
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b00  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005140  08016ce0  08016ce0  00026ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be20  0801be20  000304e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801be20  0801be20  000304e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801be20  0801be20  000304e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be20  0801be20  0002be20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be24  0801be24  0002be24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  0801be28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002958  200004e8  0801c30c  000304e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e40  0801c30c  00032e40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030514  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e7c  00000000  00000000  00030557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ea1  00000000  00000000  000593d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  0005f278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cec  00000000  00000000  00061840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027555  00000000  00000000  0006352c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002eb85  00000000  00000000  0008aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e82aa  00000000  00000000  000b9606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b340  00000000  00000000  001a18b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001acbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004e8 	.word	0x200004e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016cc8 	.word	0x08016cc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004ec 	.word	0x200004ec
 800021c:	08016cc8 	.word	0x08016cc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ce6:	0adb      	lsrs	r3, r3, #11
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <FlashCheckCRC+0x70>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 0307 	bic.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <FlashCheckCRC+0x70>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <FlashCheckCRC+0x70>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	490f      	ldr	r1, [pc, #60]	; (8000d68 <FlashCheckCRC+0x74>)
 8000d2a:	4810      	ldr	r0, [pc, #64]	; (8000d6c <FlashCheckCRC+0x78>)
 8000d2c:	f006 fc04 	bl	8007538 <HAL_CRC_Calculate>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2200      	movs	r2, #0
 8000d34:	461c      	mov	r4, r3
 8000d36:	4615      	mov	r5, r2
 8000d38:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000d42:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	bf08      	it	eq
 8000d52:	4290      	cmpeq	r0, r2
 8000d54:	d101      	bne.n	8000d5a <FlashCheckCRC+0x66>
	{
		return true;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <FlashCheckCRC+0x68>
	}
	return false;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bdb0      	pop	{r4, r5, r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	0801f000 	.word	0x0801f000
 8000d6c:	20001738 	.word	0x20001738

08000d70 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
	int i = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <FlashReadToBuf+0x88>)
 8000d7c:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 8000d7e:	f7ff ffb9 	bl	8000cf4 <FlashCheckCRC>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d031      	beq.n	8000dec <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d88:	e025      	b.n	8000dd6 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1d39      	adds	r1, r7, #4
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	e013      	b.n	8000dc4 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8000d9c:	68fa      	ldr	r2, [r7, #12]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4413      	add	r3, r2
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <FlashReadToBuf+0x8c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d208      	bcs.n	8000dbe <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4413      	add	r3, r2
 8000db2:	1d39      	adds	r1, r7, #4
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	440a      	add	r2, r1
 8000db8:	7811      	ldrb	r1, [r2, #0]
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <FlashReadToBuf+0x90>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	dde8      	ble.n	8000d9c <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	3308      	adds	r3, #8
 8000dce:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <FlashReadToBuf+0x8c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d203      	bcs.n	8000de8 <FlashReadToBuf+0x78>
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <FlashReadToBuf+0x94>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d3d0      	bcc.n	8000d8a <FlashReadToBuf+0x1a>
		}
		return true;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <FlashReadToBuf+0x7e>
	}
	return false;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	0801f000 	.word	0x0801f000
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000508 	.word	0x20000508
 8000e04:	0801ffff 	.word	0x0801ffff

08000e08 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8000e10:	f7ff ffae 	bl	8000d70 <FlashReadToBuf>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d013      	beq.n	8000e42 <FlashRead+0x3a>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <FlashRead+0x44>)
 8000e1e:	4614      	mov	r4, r2
 8000e20:	469c      	mov	ip, r3
 8000e22:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000e26:	4665      	mov	r5, ip
 8000e28:	4626      	mov	r6, r4
 8000e2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e2c:	6028      	str	r0, [r5, #0]
 8000e2e:	6069      	str	r1, [r5, #4]
 8000e30:	60aa      	str	r2, [r5, #8]
 8000e32:	60eb      	str	r3, [r5, #12]
 8000e34:	3410      	adds	r4, #16
 8000e36:	f10c 0c10 	add.w	ip, ip, #16
 8000e3a:	4574      	cmp	r4, lr
 8000e3c:	d1f3      	bne.n	8000e26 <FlashRead+0x1e>
		return true;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <FlashRead+0x3c>
	}
	return false;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4c:	20000508 	.word	0x20000508

08000e50 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8000e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e54:	b08d      	sub	sp, #52	; 0x34
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8000e5a:	4b5f      	ldr	r3, [pc, #380]	; (8000fd8 <FlashWrite+0x188>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8000e70:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <FlashWrite+0x18c>)
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8000e88:	f7ff ff72 	bl	8000d70 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <FlashWrite+0x190>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	461c      	mov	r4, r3
 8000e92:	4616      	mov	r6, r2
 8000e94:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000e98:	4635      	mov	r5, r6
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	6859      	ldr	r1, [r3, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ea6:	3410      	adds	r4, #16
 8000ea8:	3610      	adds	r6, #16
 8000eaa:	4564      	cmp	r4, ip
 8000eac:	d1f4      	bne.n	8000e98 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8000eae:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <FlashWrite+0x194>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	494a      	ldr	r1, [pc, #296]	; (8000fe0 <FlashWrite+0x190>)
 8000eb6:	484c      	ldr	r0, [pc, #304]	; (8000fe8 <FlashWrite+0x198>)
 8000eb8:	f006 fb3e 	bl	8007538 <HAL_CRC_Calculate>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 8000ec8:	f006 ffc4 	bl	8007e54 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ecc:	4b47      	ldr	r3, [pc, #284]	; (8000fec <FlashWrite+0x19c>)
 8000ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ed2:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8000ed4:	4846      	ldr	r0, [pc, #280]	; (8000ff0 <FlashWrite+0x1a0>)
 8000ed6:	f7ff feff 	bl	8000cd8 <GetPage>
 8000eda:	4604      	mov	r4, r0
 8000edc:	483f      	ldr	r0, [pc, #252]	; (8000fdc <FlashWrite+0x18c>)
 8000ede:	f7ff fefb 	bl	8000cd8 <GetPage>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	1ae3      	subs	r3, r4, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <FlashWrite+0x1a4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <FlashWrite+0x1a4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8000ef6:	4839      	ldr	r0, [pc, #228]	; (8000fdc <FlashWrite+0x18c>)
 8000ef8:	f7ff feee 	bl	8000cd8 <GetPage>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a3d      	ldr	r2, [pc, #244]	; (8000ff4 <FlashWrite+0x1a4>)
 8000f00:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8000f02:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <FlashWrite+0x1a4>)
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <FlashWrite+0x1a4>)
 8000f10:	f007 f88c 	bl	800802c <HAL_FLASHEx_Erase>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d152      	bne.n	8000fc0 <FlashWrite+0x170>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8000f1a:	e04b      	b.n	8000fb4 <FlashWrite+0x164>
		{
			for (int j = 0; j < 8; j++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f20:	e01b      	b.n	8000f5a <FlashWrite+0x10a>
			{
				if (j + i < bufLength)
 8000f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	4413      	add	r3, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <FlashWrite+0x194>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d20a      	bcs.n	8000f48 <FlashWrite+0xf8>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8000f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	441a      	add	r2, r3
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	f107 0108 	add.w	r1, r7, #8
 8000f3e:	440b      	add	r3, r1
 8000f40:	4927      	ldr	r1, [pc, #156]	; (8000fe0 <FlashWrite+0x190>)
 8000f42:	5c8a      	ldrb	r2, [r1, r2]
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e005      	b.n	8000f54 <FlashWrite+0x104>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	4413      	add	r3, r2
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	3301      	adds	r3, #1
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	dde0      	ble.n	8000f22 <FlashWrite+0xd2>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8000f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <FlashWrite+0x194>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d20f      	bcs.n	8000f8a <FlashWrite+0x13a>
 8000f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f70:	2000      	movs	r0, #0
 8000f72:	f006 ff03 	bl	8007d7c <HAL_FLASH_Program>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d106      	bne.n	8000f8a <FlashWrite+0x13a>
			{
				Address = Address + 8;
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	3308      	adds	r3, #8
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8000f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f84:	3308      	adds	r3, #8
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f88:	e014      	b.n	8000fb4 <FlashWrite+0x164>
			}
			else if (i >= bufLength)
 8000f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <FlashWrite+0x194>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d314      	bcc.n	8000fbe <FlashWrite+0x16e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8000f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f006 feee 	bl	8007d7c <HAL_FLASH_Program>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <FlashWrite+0x164>
				{
					HAL_FLASH_Lock();
 8000fa6:	f006 ff77 	bl	8007e98 <HAL_FLASH_Lock>
					flashWriting = 0;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <FlashWrite+0x188>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
					return true;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e00b      	b.n	8000fcc <FlashWrite+0x17c>
		while (Address < FLASH_USER_END_ADDR)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <FlashWrite+0x1a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d3af      	bcc.n	8000f1c <FlashWrite+0xcc>
 8000fbc:	e000      	b.n	8000fc0 <FlashWrite+0x170>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8000fbe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000fc0:	f006 ff6a 	bl	8007e98 <HAL_FLASH_Lock>

	flashWriting = 0;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <FlashWrite+0x188>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	return false;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3734      	adds	r7, #52	; 0x34
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000504 	.word	0x20000504
 8000fdc:	0801f000 	.word	0x0801f000
 8000fe0:	20000508 	.word	0x20000508
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20001738 	.word	0x20001738
 8000fec:	40022000 	.word	0x40022000
 8000ff0:	0801ffff 	.word	0x0801ffff
 8000ff4:	20000538 	.word	0x20000538

08000ff8 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001002:	ed87 1b02 	vstr	d1, [r7, #8]
 8001006:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 800100a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800100e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001012:	f7ff fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <clamp+0x2a>
 800101c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001020:	e001      	b.n	8001026 <clamp+0x2e>
 8001022:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001026:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 800102a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800102e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001032:	f7ff fd99 	bl	8000b68 <__aeabi_dcmpgt>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <clamp+0x4a>
 800103c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001040:	e001      	b.n	8001046 <clamp+0x4e>
 8001042:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001046:	ec43 2b17 	vmov	d7, r2, r3
}
 800104a:	eeb0 0a47 	vmov.f32	s0, s14
 800104e:	eef0 0a67 	vmov.f32	s1, s15
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <power2>:

/* Function to take the base b to the power of the exponent e */
double power2(double b, double e) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001062:	ed87 1b00 	vstr	d1, [r7]
	for( uint8_t i = 0; i < e; i++){
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e00c      	b.n	8001086 <power2+0x2e>
		b = b * b;
 800106c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	f7ff fae8 	bl	8000648 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( uint8_t i = 0; i < e; i++){
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa73 	bl	8000574 <__aeabi_i2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001096:	f7ff fd67 	bl	8000b68 <__aeabi_dcmpgt>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e5      	bne.n	800106c <power2+0x14>
	}
  return b;
 80010a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80010a8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ac:	eef0 0a67 	vmov.f32	s1, s15
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/

	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	02db      	lsls	r3, r3, #11
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	095b      	lsrs	r3, r3, #5
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	b29b      	uxth	r3, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <get_mean_ADC_reading>:

/* Returns the average of the ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <get_mean_ADC_reading+0x70>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e013      	b.n	8001122 <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <get_mean_ADC_reading+0x70>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <get_mean_ADC_reading+0x70>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	429a      	cmp	r2, r3
 8001128:	d3e7      	bcc.n	80010fa <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <get_mean_ADC_reading+0x70>)
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800113e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200005b4 	.word	0x200005b4
 8001154:	00000000 	.word	0x00000000

08001158 <get_bus_voltage>:

void get_bus_voltage(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC2_BUF_VIN, ADC2_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 800115c:	210a      	movs	r1, #10
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <get_bus_voltage+0x50>)
 8001160:	f7ff ffbe 	bl	80010e0 <get_mean_ADC_reading>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116c:	490f      	ldr	r1, [pc, #60]	; (80011ac <get_bus_voltage+0x54>)
 800116e:	ee17 0a90 	vmov	r0, s15
 8001172:	f002 fa61 	bl	8003638 <Moving_Average_Compute>
 8001176:	ec51 0b10 	vmov	r0, r1, d0
 800117a:	a309      	add	r3, pc, #36	; (adr r3, 80011a0 <get_bus_voltage+0x48>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fa62 	bl	8000648 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd54 	bl	8000c38 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <get_bus_voltage+0x58>)
 8001194:	6113      	str	r3, [r2, #16]
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	2e062cfe 	.word	0x2e062cfe
 80011a4:	3f7e5d97 	.word	0x3f7e5d97
 80011a8:	200005b8 	.word	0x200005b8
 80011ac:	20000950 	.word	0x20000950
 80011b0:	20000030 	.word	0x20000030
 80011b4:	00000000 	.word	0x00000000

080011b8 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if(handle == T210){
 80011bc:	4bae      	ldr	r3, [pc, #696]	; (8001478 <get_thermocouple_temperature+0x2c0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d154      	bne.n	800126e <get_thermocouple_temperature+0xb6>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T210 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T210 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80011c4:	4bad      	ldr	r3, [pc, #692]	; (800147c <get_thermocouple_temperature+0x2c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f9e5 	bl	8000598 <__aeabi_f2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001418 <get_thermocouple_temperature+0x260>
 80011d6:	ec43 2b10 	vmov	d0, r2, r3
 80011da:	f7ff ff3d 	bl	8001058 <power2>
 80011de:	ec51 0b10 	vmov	r0, r1, d0
 80011e2:	a38f      	add	r3, pc, #572	; (adr r3, 8001420 <get_thermocouple_temperature+0x268>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fa2e 	bl	8000648 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4614      	mov	r4, r2
 80011f2:	461d      	mov	r5, r3
 80011f4:	4ba1      	ldr	r3, [pc, #644]	; (800147c <get_thermocouple_temperature+0x2c4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001428 <get_thermocouple_temperature+0x270>
 8001206:	ec43 2b10 	vmov	d0, r2, r3
 800120a:	f7ff ff25 	bl	8001058 <power2>
 800120e:	ec51 0b10 	vmov	r0, r1, d0
 8001212:	a387      	add	r3, pc, #540	; (adr r3, 8001430 <get_thermocouple_temperature+0x278>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff fa16 	bl	8000648 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	f7ff f85a 	bl	80002dc <__adddf3>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4614      	mov	r4, r2
 800122e:	461d      	mov	r5, r3
 8001230:	4b92      	ldr	r3, [pc, #584]	; (800147c <get_thermocouple_temperature+0x2c4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9af 	bl	8000598 <__aeabi_f2d>
 800123a:	a37f      	add	r3, pc, #508	; (adr r3, 8001438 <get_thermocouple_temperature+0x280>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fa02 	bl	8000648 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f846 	bl	80002dc <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	a379      	add	r3, pc, #484	; (adr r3, 8001440 <get_thermocouple_temperature+0x288>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f83d 	bl	80002dc <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4986      	ldr	r1, [pc, #536]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 8001268:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800126c:	e0b0      	b.n	80013d0 <get_thermocouple_temperature+0x218>
	}
	else if(handle == T245){
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <get_thermocouple_temperature+0x2c0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d154      	bne.n	8001320 <get_thermocouple_temperature+0x168>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T245 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T245 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001276:	4b81      	ldr	r3, [pc, #516]	; (800147c <get_thermocouple_temperature+0x2c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f98c 	bl	8000598 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001418 <get_thermocouple_temperature+0x260>
 8001288:	ec43 2b10 	vmov	d0, r2, r3
 800128c:	f7ff fee4 	bl	8001058 <power2>
 8001290:	ec51 0b10 	vmov	r0, r1, d0
 8001294:	a36c      	add	r3, pc, #432	; (adr r3, 8001448 <get_thermocouple_temperature+0x290>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f9d5 	bl	8000648 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <get_thermocouple_temperature+0x2c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f974 	bl	8000598 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001428 <get_thermocouple_temperature+0x270>
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f7ff fecc 	bl	8001058 <power2>
 80012c0:	ec51 0b10 	vmov	r0, r1, d0
 80012c4:	a362      	add	r3, pc, #392	; (adr r3, 8001450 <get_thermocouple_temperature+0x298>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff f9bd 	bl	8000648 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f801 	bl	80002dc <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4614      	mov	r4, r2
 80012e0:	461d      	mov	r5, r3
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <get_thermocouple_temperature+0x2c4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f956 	bl	8000598 <__aeabi_f2d>
 80012ec:	a35a      	add	r3, pc, #360	; (adr r3, 8001458 <get_thermocouple_temperature+0x2a0>)
 80012ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f2:	f7ff f9a9 	bl	8000648 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4620      	mov	r0, r4
 80012fc:	4629      	mov	r1, r5
 80012fe:	f7fe ffed 	bl	80002dc <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a355      	add	r3, pc, #340	; (adr r3, 8001460 <get_thermocouple_temperature+0x2a8>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ffe4 	bl	80002dc <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4959      	ldr	r1, [pc, #356]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 800131a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800131e:	e057      	b.n	80013d0 <get_thermocouple_temperature+0x218>
	}
	else if(handle == T115){
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <get_thermocouple_temperature+0x2c0>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d153      	bne.n	80013d0 <get_thermocouple_temperature+0x218>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T115 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T115 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T115 + TC_COMPENSATION_X0_T115;
 8001328:	4b54      	ldr	r3, [pc, #336]	; (800147c <get_thermocouple_temperature+0x2c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f933 	bl	8000598 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8001418 <get_thermocouple_temperature+0x260>
 800133a:	ec43 2b10 	vmov	d0, r2, r3
 800133e:	f7ff fe8b 	bl	8001058 <power2>
 8001342:	ec51 0b10 	vmov	r0, r1, d0
 8001346:	a336      	add	r3, pc, #216	; (adr r3, 8001420 <get_thermocouple_temperature+0x268>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff f97c 	bl	8000648 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4614      	mov	r4, r2
 8001356:	461d      	mov	r5, r3
 8001358:	4b48      	ldr	r3, [pc, #288]	; (800147c <get_thermocouple_temperature+0x2c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f91b 	bl	8000598 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001428 <get_thermocouple_temperature+0x270>
 800136a:	ec43 2b10 	vmov	d0, r2, r3
 800136e:	f7ff fe73 	bl	8001058 <power2>
 8001372:	ec51 0b10 	vmov	r0, r1, d0
 8001376:	a32e      	add	r3, pc, #184	; (adr r3, 8001430 <get_thermocouple_temperature+0x278>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f964 	bl	8000648 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7fe ffa8 	bl	80002dc <__adddf3>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4614      	mov	r4, r2
 8001392:	461d      	mov	r5, r3
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <get_thermocouple_temperature+0x2c4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8fd 	bl	8000598 <__aeabi_f2d>
 800139e:	a326      	add	r3, pc, #152	; (adr r3, 8001438 <get_thermocouple_temperature+0x280>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7ff f950 	bl	8000648 <__aeabi_dmul>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7fe ff94 	bl	80002dc <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	a320      	add	r3, pc, #128	; (adr r3, 8001440 <get_thermocouple_temperature+0x288>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7fe ff8b 	bl	80002dc <__adddf3>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	492d      	ldr	r1, [pc, #180]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 80013cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 80013d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <get_thermocouple_temperature+0x2cc>)
 80013d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013dc:	f7fe ff7e 	bl	80002dc <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4926      	ldr	r1, [pc, #152]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 80013e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 80013ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80013f0:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8001468 <get_thermocouple_temperature+0x2b0>
 80013f4:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001470 <get_thermocouple_temperature+0x2b8>
 80013f8:	eeb0 0a47 	vmov.f32	s0, s14
 80013fc:	eef0 0a67 	vmov.f32	s1, s15
 8001400:	f7ff fdfa 	bl	8000ff8 <clamp>
 8001404:	eeb0 7a40 	vmov.f32	s14, s0
 8001408:	eef0 7a60 	vmov.f32	s15, s1
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <get_thermocouple_temperature+0x2c8>)
 800140e:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8001412:	bf00      	nop
 8001414:	bdb0      	pop	{r4, r5, r7, pc}
 8001416:	bf00      	nop
 8001418:	00000000 	.word	0x00000000
 800141c:	40080000 	.word	0x40080000
 8001420:	e6c91459 	.word	0xe6c91459
 8001424:	be3d333c 	.word	0xbe3d333c
 8001428:	00000000 	.word	0x00000000
 800142c:	40000000 	.word	0x40000000
 8001430:	77c4dab0 	.word	0x77c4dab0
 8001434:	bed98561 	.word	0xbed98561
 8001438:	0aa653bc 	.word	0x0aa653bc
 800143c:	3fd1585a 	.word	0x3fd1585a
 8001440:	d797deed 	.word	0xd797deed
 8001444:	40396624 	.word	0x40396624
 8001448:	b4effad8 	.word	0xb4effad8
 800144c:	3e21f933 	.word	0x3e21f933
 8001450:	c7e1dac1 	.word	0xc7e1dac1
 8001454:	bee97525 	.word	0xbee97525
 8001458:	8d8ee863 	.word	0x8d8ee863
 800145c:	3fbe16b0 	.word	0x3fbe16b0
 8001460:	7373b751 	.word	0x7373b751
 8001464:	40390d47 	.word	0x40390d47
 8001468:	00000000 	.word	0x00000000
 800146c:	408f3800 	.word	0x408f3800
	...
 8001478:	20000548 	.word	0x20000548
 800147c:	200005cc 	.word	0x200005cc
 8001480:	20000030 	.word	0x20000030
 8001484:	200005d8 	.word	0x200005d8

08001488 <update_display>:

void get_current(){
	sensor_values.heater_current = current_raw * CURRENT_COMPENSATION;
}

void update_display(){
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b083      	sub	sp, #12
 800148c:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 800148e:	2228      	movs	r2, #40	; 0x28
 8001490:	2100      	movs	r1, #0
 8001492:	48ac      	ldr	r0, [pc, #688]	; (8001744 <update_display+0x2bc>)
 8001494:	f013 f99b 	bl	80147ce <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001498:	4bab      	ldr	r3, [pc, #684]	; (8001748 <update_display+0x2c0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	49ab      	ldr	r1, [pc, #684]	; (800174c <update_display+0x2c4>)
 80014a0:	48a8      	ldr	r0, [pc, #672]	; (8001744 <update_display+0x2bc>)
 80014a2:	f013 f931 	bl	8014708 <siprintf>
	if(sensor_values.set_temperature<100){
 80014a6:	4ba8      	ldr	r3, [pc, #672]	; (8001748 <update_display+0x2c0>)
 80014a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4ba7      	ldr	r3, [pc, #668]	; (8001750 <update_display+0x2c8>)
 80014b2:	f7ff fb3b 	bl	8000b2c <__aeabi_dcmplt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <update_display+0x40>
		buffer[2] = 32;
 80014bc:	4ba1      	ldr	r3, [pc, #644]	; (8001744 <update_display+0x2bc>)
 80014be:	2220      	movs	r2, #32
 80014c0:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 80014c2:	4ba0      	ldr	r3, [pc, #640]	; (8001744 <update_display+0x2bc>)
 80014c4:	2220      	movs	r2, #32
 80014c6:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 80014c8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80014cc:	f7ff fdf3 	bl	80010b6 <RGB_to_BRG>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461c      	mov	r4, r3
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fdee 	bl	80010b6 <RGB_to_BRG>
 80014da:	4603      	mov	r3, r0
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9400      	str	r4, [sp, #0]
 80014e0:	4b9c      	ldr	r3, [pc, #624]	; (8001754 <update_display+0x2cc>)
 80014e2:	4a98      	ldr	r2, [pc, #608]	; (8001744 <update_display+0x2bc>)
 80014e4:	214b      	movs	r1, #75	; 0x4b
 80014e6:	200a      	movs	r0, #10
 80014e8:	f003 fd1a 	bl	8004f20 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 80014ec:	2228      	movs	r2, #40	; 0x28
 80014ee:	2100      	movs	r1, #0
 80014f0:	4894      	ldr	r0, [pc, #592]	; (8001744 <update_display+0x2bc>)
 80014f2:	f013 f96c 	bl	80147ce <memset>
	sprintf(buffer, "%.1f V", sensor_values.bus_voltage);
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <update_display+0x2c0>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f84c 	bl	8000598 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4994      	ldr	r1, [pc, #592]	; (8001758 <update_display+0x2d0>)
 8001506:	488f      	ldr	r0, [pc, #572]	; (8001744 <update_display+0x2bc>)
 8001508:	f013 f8fe 	bl	8014708 <siprintf>
	LCD_PutStr(100, 260, buffer, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800150c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001510:	f7ff fdd1 	bl	80010b6 <RGB_to_BRG>
 8001514:	4603      	mov	r3, r0
 8001516:	461c      	mov	r4, r3
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fdcc 	bl	80010b6 <RGB_to_BRG>
 800151e:	4603      	mov	r3, r0
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	9400      	str	r4, [sp, #0]
 8001524:	4b8d      	ldr	r3, [pc, #564]	; (800175c <update_display+0x2d4>)
 8001526:	4a87      	ldr	r2, [pc, #540]	; (8001744 <update_display+0x2bc>)
 8001528:	f44f 7182 	mov.w	r1, #260	; 0x104
 800152c:	2064      	movs	r0, #100	; 0x64
 800152e:	f003 fcf7 	bl	8004f20 <LCD_PutStr>


	if(handle == T210){
 8001532:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <update_display+0x2d8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d112      	bne.n	8001560 <update_display+0xd8>
		LCD_PutStr(100, 220, "T210", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800153a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800153e:	f7ff fdba 	bl	80010b6 <RGB_to_BRG>
 8001542:	4603      	mov	r3, r0
 8001544:	461c      	mov	r4, r3
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff fdb5 	bl	80010b6 <RGB_to_BRG>
 800154c:	4603      	mov	r3, r0
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	9400      	str	r4, [sp, #0]
 8001552:	4b82      	ldr	r3, [pc, #520]	; (800175c <update_display+0x2d4>)
 8001554:	4a83      	ldr	r2, [pc, #524]	; (8001764 <update_display+0x2dc>)
 8001556:	21dc      	movs	r1, #220	; 0xdc
 8001558:	2064      	movs	r0, #100	; 0x64
 800155a:	f003 fce1 	bl	8004f20 <LCD_PutStr>
 800155e:	e015      	b.n	800158c <update_display+0x104>
	}
	else if(handle == T245){
 8001560:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <update_display+0x2d8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d111      	bne.n	800158c <update_display+0x104>
		LCD_PutStr(100, 240, "T245", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001568:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800156c:	f7ff fda3 	bl	80010b6 <RGB_to_BRG>
 8001570:	4603      	mov	r3, r0
 8001572:	461c      	mov	r4, r3
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fd9e 	bl	80010b6 <RGB_to_BRG>
 800157a:	4603      	mov	r3, r0
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	9400      	str	r4, [sp, #0]
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <update_display+0x2d4>)
 8001582:	4a79      	ldr	r2, [pc, #484]	; (8001768 <update_display+0x2e0>)
 8001584:	21f0      	movs	r1, #240	; 0xf0
 8001586:	2064      	movs	r0, #100	; 0x64
 8001588:	f003 fcca 	bl	8004f20 <LCD_PutStr>
	}


	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 800158c:	4b77      	ldr	r3, [pc, #476]	; (800176c <update_display+0x2e4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d007      	beq.n	80015a4 <update_display+0x11c>
 8001594:	4b75      	ldr	r3, [pc, #468]	; (800176c <update_display+0x2e4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d003      	beq.n	80015a4 <update_display+0x11c>
 800159c:	4b73      	ldr	r3, [pc, #460]	; (800176c <update_display+0x2e4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d148      	bne.n	8001636 <update_display+0x1ae>
		LCD_PutStr(214, 65, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80015a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015a8:	f7ff fd85 	bl	80010b6 <RGB_to_BRG>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461c      	mov	r4, r3
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fd80 	bl	80010b6 <RGB_to_BRG>
 80015b6:	4603      	mov	r3, r0
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9400      	str	r4, [sp, #0]
 80015bc:	4b67      	ldr	r3, [pc, #412]	; (800175c <update_display+0x2d4>)
 80015be:	4a6c      	ldr	r2, [pc, #432]	; (8001770 <update_display+0x2e8>)
 80015c0:	2141      	movs	r1, #65	; 0x41
 80015c2:	20d6      	movs	r0, #214	; 0xd6
 80015c4:	f003 fcac 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 121, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80015c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015cc:	f7ff fd73 	bl	80010b6 <RGB_to_BRG>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461c      	mov	r4, r3
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fd6e 	bl	80010b6 <RGB_to_BRG>
 80015da:	4603      	mov	r3, r0
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9400      	str	r4, [sp, #0]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <update_display+0x2d4>)
 80015e2:	4a64      	ldr	r2, [pc, #400]	; (8001774 <update_display+0x2ec>)
 80015e4:	2179      	movs	r1, #121	; 0x79
 80015e6:	20d6      	movs	r0, #214	; 0xd6
 80015e8:	f003 fc9a 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 177, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80015ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015f0:	f7ff fd61 	bl	80010b6 <RGB_to_BRG>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461c      	mov	r4, r3
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fd5c 	bl	80010b6 <RGB_to_BRG>
 80015fe:	4603      	mov	r3, r0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	9400      	str	r4, [sp, #0]
 8001604:	4b55      	ldr	r3, [pc, #340]	; (800175c <update_display+0x2d4>)
 8001606:	4a5a      	ldr	r2, [pc, #360]	; (8001770 <update_display+0x2e8>)
 8001608:	21b1      	movs	r1, #177	; 0xb1
 800160a:	20d6      	movs	r0, #214	; 0xd6
 800160c:	f003 fc88 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 233, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001610:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001614:	f7ff fd4f 	bl	80010b6 <RGB_to_BRG>
 8001618:	4603      	mov	r3, r0
 800161a:	461c      	mov	r4, r3
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fd4a 	bl	80010b6 <RGB_to_BRG>
 8001622:	4603      	mov	r3, r0
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	9400      	str	r4, [sp, #0]
 8001628:	4b4c      	ldr	r3, [pc, #304]	; (800175c <update_display+0x2d4>)
 800162a:	4a52      	ldr	r2, [pc, #328]	; (8001774 <update_display+0x2ec>)
 800162c:	21e9      	movs	r1, #233	; 0xe9
 800162e:	20d6      	movs	r0, #214	; 0xd6
 8001630:	f003 fc76 	bl	8004f20 <LCD_PutStr>
 8001634:	e10f      	b.n	8001856 <update_display+0x3ce>
	}
	else if(active_state == STANDBY){
 8001636:	4b4d      	ldr	r3, [pc, #308]	; (800176c <update_display+0x2e4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	f040 80aa 	bne.w	8001794 <update_display+0x30c>
		LCD_PutStr(214, 65, "S", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001640:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001644:	f7ff fd37 	bl	80010b6 <RGB_to_BRG>
 8001648:	4603      	mov	r3, r0
 800164a:	461c      	mov	r4, r3
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fd32 	bl	80010b6 <RGB_to_BRG>
 8001652:	4603      	mov	r3, r0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9400      	str	r4, [sp, #0]
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <update_display+0x2d4>)
 800165a:	4a47      	ldr	r2, [pc, #284]	; (8001778 <update_display+0x2f0>)
 800165c:	2141      	movs	r1, #65	; 0x41
 800165e:	20d6      	movs	r0, #214	; 0xd6
 8001660:	f003 fc5e 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 121, "T", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001664:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001668:	f7ff fd25 	bl	80010b6 <RGB_to_BRG>
 800166c:	4603      	mov	r3, r0
 800166e:	461c      	mov	r4, r3
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff fd20 	bl	80010b6 <RGB_to_BRG>
 8001676:	4603      	mov	r3, r0
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	9400      	str	r4, [sp, #0]
 800167c:	4b37      	ldr	r3, [pc, #220]	; (800175c <update_display+0x2d4>)
 800167e:	4a3f      	ldr	r2, [pc, #252]	; (800177c <update_display+0x2f4>)
 8001680:	2179      	movs	r1, #121	; 0x79
 8001682:	20d6      	movs	r0, #214	; 0xd6
 8001684:	f003 fc4c 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 177, "A", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001688:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800168c:	f7ff fd13 	bl	80010b6 <RGB_to_BRG>
 8001690:	4603      	mov	r3, r0
 8001692:	461c      	mov	r4, r3
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fd0e 	bl	80010b6 <RGB_to_BRG>
 800169a:	4603      	mov	r3, r0
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	9400      	str	r4, [sp, #0]
 80016a0:	4b2e      	ldr	r3, [pc, #184]	; (800175c <update_display+0x2d4>)
 80016a2:	4a37      	ldr	r2, [pc, #220]	; (8001780 <update_display+0x2f8>)
 80016a4:	21b1      	movs	r1, #177	; 0xb1
 80016a6:	20d6      	movs	r0, #214	; 0xd6
 80016a8:	f003 fc3a 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 233, "N", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80016ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016b0:	f7ff fd01 	bl	80010b6 <RGB_to_BRG>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461c      	mov	r4, r3
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fcfc 	bl	80010b6 <RGB_to_BRG>
 80016be:	4603      	mov	r3, r0
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	9400      	str	r4, [sp, #0]
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <update_display+0x2d4>)
 80016c6:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <update_display+0x2fc>)
 80016c8:	21e9      	movs	r1, #233	; 0xe9
 80016ca:	20d6      	movs	r0, #214	; 0xd6
 80016cc:	f003 fc28 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 289, "D", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80016d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016d4:	f7ff fcef 	bl	80010b6 <RGB_to_BRG>
 80016d8:	4603      	mov	r3, r0
 80016da:	461c      	mov	r4, r3
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fcea 	bl	80010b6 <RGB_to_BRG>
 80016e2:	4603      	mov	r3, r0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9400      	str	r4, [sp, #0]
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <update_display+0x2d4>)
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <update_display+0x300>)
 80016ec:	f240 1121 	movw	r1, #289	; 0x121
 80016f0:	20d6      	movs	r0, #214	; 0xd6
 80016f2:	f003 fc15 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 253, "B", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80016f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016fa:	f7ff fcdc 	bl	80010b6 <RGB_to_BRG>
 80016fe:	4603      	mov	r3, r0
 8001700:	461c      	mov	r4, r3
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fcd7 	bl	80010b6 <RGB_to_BRG>
 8001708:	4603      	mov	r3, r0
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9400      	str	r4, [sp, #0]
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <update_display+0x2d4>)
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <update_display+0x304>)
 8001712:	21fd      	movs	r1, #253	; 0xfd
 8001714:	20d6      	movs	r0, #214	; 0xd6
 8001716:	f003 fc03 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(214, 279, "Y", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800171a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800171e:	f7ff fcca 	bl	80010b6 <RGB_to_BRG>
 8001722:	4603      	mov	r3, r0
 8001724:	461c      	mov	r4, r3
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fcc5 	bl	80010b6 <RGB_to_BRG>
 800172c:	4603      	mov	r3, r0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9400      	str	r4, [sp, #0]
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <update_display+0x2d4>)
 8001734:	4a16      	ldr	r2, [pc, #88]	; (8001790 <update_display+0x308>)
 8001736:	f240 1117 	movw	r1, #279	; 0x117
 800173a:	20d6      	movs	r0, #214	; 0xd6
 800173c:	f003 fbf0 	bl	8004f20 <LCD_PutStr>
 8001740:	e089      	b.n	8001856 <update_display+0x3ce>
 8001742:	bf00      	nop
 8001744:	20000588 	.word	0x20000588
 8001748:	20000030 	.word	0x20000030
 800174c:	08016ce0 	.word	0x08016ce0
 8001750:	40590000 	.word	0x40590000
 8001754:	080187f0 	.word	0x080187f0
 8001758:	08016ce4 	.word	0x08016ce4
 800175c:	08016e98 	.word	0x08016e98
 8001760:	20000548 	.word	0x20000548
 8001764:	08016cec 	.word	0x08016cec
 8001768:	08016cf4 	.word	0x08016cf4
 800176c:	2000001c 	.word	0x2000001c
 8001770:	08016cfc 	.word	0x08016cfc
 8001774:	08016d00 	.word	0x08016d00
 8001778:	08016d04 	.word	0x08016d04
 800177c:	08016d08 	.word	0x08016d08
 8001780:	08016d0c 	.word	0x08016d0c
 8001784:	08016d10 	.word	0x08016d10
 8001788:	08016d14 	.word	0x08016d14
 800178c:	08016d18 	.word	0x08016d18
 8001790:	08016d1c 	.word	0x08016d1c
	}
	else{
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*262, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8001794:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <update_display+0x480>)
 8001796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <update_display+0x484>)
 80017a0:	f7ff f87c 	bl	800089c <__aeabi_ddiv>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	a352      	add	r3, pc, #328	; (adr r3, 80018f8 <update_display+0x470>)
 80017ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b2:	f7fe ff49 	bl	8000648 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	a151      	add	r1, pc, #324	; (adr r1, 8001900 <update_display+0x478>)
 80017bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017c0:	f7fe fd8a 	bl	80002d8 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff f9ec 	bl	8000ba8 <__aeabi_d2iz>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b21c      	sxth	r4, r3
 80017d4:	f248 607e 	movw	r0, #34430	; 0x867e
 80017d8:	f7ff fc6d 	bl	80010b6 <RGB_to_BRG>
 80017dc:	4603      	mov	r3, r0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f240 131f 	movw	r3, #287	; 0x11f
 80017e4:	22e6      	movs	r2, #230	; 0xe6
 80017e6:	4621      	mov	r1, r4
 80017e8:	20d2      	movs	r0, #210	; 0xd2
 80017ea:	f00e fb09 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*262-1, RGB_to_BRG(C_BLACK));
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <update_display+0x480>)
 80017f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <update_display+0x484>)
 80017fa:	f7ff f84f 	bl	800089c <__aeabi_ddiv>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a33c      	add	r3, pc, #240	; (adr r3, 80018f8 <update_display+0x470>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff1c 	bl	8000648 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	a13a      	add	r1, pc, #232	; (adr r1, 8001900 <update_display+0x478>)
 8001816:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181a:	f7fe fd5d 	bl	80002d8 <__aeabi_dsub>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <update_display+0x488>)
 800182c:	f7fe fd54 	bl	80002d8 <__aeabi_dsub>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f9b6 	bl	8000ba8 <__aeabi_d2iz>
 800183c:	4603      	mov	r3, r0
 800183e:	b21c      	sxth	r4, r3
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fc38 	bl	80010b6 <RGB_to_BRG>
 8001846:	4603      	mov	r3, r0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4623      	mov	r3, r4
 800184c:	22e6      	movs	r2, #230	; 0xe6
 800184e:	2137      	movs	r1, #55	; 0x37
 8001850:	20d2      	movs	r0, #210	; 0xd2
 8001852:	f00e fad5 	bl	800fe00 <UG_FillFrame>
	}


	if(sensor_values.heater_current == 0){
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <update_display+0x48c>)
 8001858:	edd3 7a05 	vldr	s15, [r3, #20]
 800185c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d112      	bne.n	800188c <update_display+0x404>
	  	LCD_PutStr(10, 185, "---", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001866:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800186a:	f7ff fc24 	bl	80010b6 <RGB_to_BRG>
 800186e:	4603      	mov	r3, r0
 8001870:	461c      	mov	r4, r3
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fc1f 	bl	80010b6 <RGB_to_BRG>
 8001878:	4603      	mov	r3, r0
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	9400      	str	r4, [sp, #0]
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <update_display+0x490>)
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <update_display+0x494>)
 8001882:	21b9      	movs	r1, #185	; 0xb9
 8001884:	200a      	movs	r0, #10
 8001886:	f003 fb4b 	bl	8004f20 <LCD_PutStr>
			buffer[2] = 32;
			buffer[3] = 32;
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
	}
}
 800188a:	e02e      	b.n	80018ea <update_display+0x462>
		memset(&buffer, '\0', sizeof(buffer));
 800188c:	2228      	movs	r2, #40	; 0x28
 800188e:	2100      	movs	r1, #0
 8001890:	4823      	ldr	r0, [pc, #140]	; (8001920 <update_display+0x498>)
 8001892:	f012 ff9c 	bl	80147ce <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <update_display+0x48c>)
 8001898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800189c:	4921      	ldr	r1, [pc, #132]	; (8001924 <update_display+0x49c>)
 800189e:	4820      	ldr	r0, [pc, #128]	; (8001920 <update_display+0x498>)
 80018a0:	f012 ff32 	bl	8014708 <siprintf>
		if(sensor_values.thermocouple_temperature < 100){
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <update_display+0x48c>)
 80018a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <update_display+0x4a0>)
 80018b0:	f7ff f93c 	bl	8000b2c <__aeabi_dcmplt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <update_display+0x43e>
			buffer[2] = 32;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <update_display+0x498>)
 80018bc:	2220      	movs	r2, #32
 80018be:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <update_display+0x498>)
 80018c2:	2220      	movs	r2, #32
 80018c4:	70da      	strb	r2, [r3, #3]
	  	LCD_PutStr(10, 165, buffer, FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 80018c6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80018ca:	f7ff fbf4 	bl	80010b6 <RGB_to_BRG>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461c      	mov	r4, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff fbef 	bl	80010b6 <RGB_to_BRG>
 80018d8:	4603      	mov	r3, r0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9400      	str	r4, [sp, #0]
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <update_display+0x4a4>)
 80018e0:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <update_display+0x498>)
 80018e2:	21a5      	movs	r1, #165	; 0xa5
 80018e4:	200a      	movs	r0, #10
 80018e6:	f003 fb1b 	bl	8004f20 <LCD_PutStr>
}
 80018ea:	bf00      	nop
 80018ec:	3704      	adds	r7, #4
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd90      	pop	{r4, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40706000 	.word	0x40706000
 8001900:	00000000 	.word	0x00000000
 8001904:	4071f000 	.word	0x4071f000
 8001908:	20000608 	.word	0x20000608
 800190c:	407f4000 	.word	0x407f4000
 8001910:	3ff00000 	.word	0x3ff00000
 8001914:	20000030 	.word	0x20000030
 8001918:	08016e98 	.word	0x08016e98
 800191c:	08016d20 	.word	0x08016d20
 8001920:	20000588 	.word	0x20000588
 8001924:	08016ce0 	.word	0x08016ce0
 8001928:	40590000 	.word	0x40590000
 800192c:	080187f0 	.word	0x080187f0

08001930 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001930:	b598      	push	{r3, r4, r7, lr}
 8001932:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe0a 	bl	8000554 <__aeabi_ui2d>
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <get_set_temperature+0x64>)
 8001942:	ed93 7b00 	vldr	d7, [r3]
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <get_set_temperature+0x68>)
 8001948:	ed93 6b00 	vldr	d6, [r3]
 800194c:	eeb0 2a46 	vmov.f32	s4, s12
 8001950:	eef0 2a66 	vmov.f32	s5, s13
 8001954:	eeb0 1a47 	vmov.f32	s2, s14
 8001958:	eef0 1a67 	vmov.f32	s3, s15
 800195c:	ec41 0b10 	vmov	d0, r0, r1
 8001960:	f7ff fb4a 	bl	8000ff8 <clamp>
 8001964:	ec53 2b10 	vmov	r2, r3, d0
 8001968:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f942 	bl	8000bf8 <__aeabi_d2uiz>
 8001974:	4603      	mov	r3, r0
 8001976:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 8001978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fde8 	bl	8000554 <__aeabi_ui2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <get_set_temperature+0x6c>)
 800198a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800198e:	bf00      	nop
 8001990:	bd98      	pop	{r3, r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	20000020 	.word	0x20000020
 8001998:	20000028 	.word	0x20000028
 800199c:	20000030 	.word	0x20000030

080019a0 <beep>:

/* Beep the buzzer */
void beep(){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <beep+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2205      	movs	r2, #5
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_TIM_Base_Start_IT(&htim17);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <beep+0x1c>)
 80019ae:	f00a f97f 	bl	800bcb0 <HAL_TIM_Base_Start_IT>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000190c 	.word	0x2000190c
 80019bc:	200019a4 	.word	0x200019a4

080019c0 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <check_emergency_shutdown+0xd0>)
 80019c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <check_emergency_shutdown+0x20>
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <check_emergency_shutdown+0xd4>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d104      	bne.n	80019e0 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 80019d6:	f003 fbb1 	bl	800513c <HAL_GetTick>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a2e      	ldr	r2, [pc, #184]	; (8001a98 <check_emergency_shutdown+0xd8>)
 80019de:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <check_emergency_shutdown+0xd0>)
 80019e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f7ff f893 	bl	8000b18 <__aeabi_dcmpeq>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d024      	beq.n	8001a42 <check_emergency_shutdown+0x82>
 80019f8:	f003 fba0 	bl	800513c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <check_emergency_shutdown+0xd8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda5 	bl	8000554 <__aeabi_ui2d>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	460d      	mov	r5, r1
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <check_emergency_shutdown+0xdc>)
 8001a10:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001a14:	a31a      	add	r3, pc, #104	; (adr r3, 8001a80 <check_emergency_shutdown+0xc0>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fe15 	bl	8000648 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7ff f895 	bl	8000b54 <__aeabi_dcmpge>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <check_emergency_shutdown+0x82>
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <check_emergency_shutdown+0xd4>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d104      	bne.n	8001a42 <check_emergency_shutdown+0x82>
		active_state = EMERGENCY_SLEEP;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <check_emergency_shutdown+0xd4>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	701a      	strb	r2, [r3, #0]
		beep();
 8001a3e:	f7ff ffaf 	bl	80019a0 <beep>
	}
	sensor_values.previous_state = active_state;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <check_emergency_shutdown+0xd4>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <check_emergency_shutdown+0xd0>)
 8001a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <check_emergency_shutdown+0xd0>)
 8001a4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a52:	a30d      	add	r3, pc, #52	; (adr r3, 8001a88 <check_emergency_shutdown+0xc8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7ff f886 	bl	8000b68 <__aeabi_dcmpgt>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <check_emergency_shutdown+0xa4>
		active_state = EMERGENCY_SLEEP;
		beep();
	}
}
 8001a62:	e008      	b.n	8001a76 <check_emergency_shutdown+0xb6>
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <check_emergency_shutdown+0xd4>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <check_emergency_shutdown+0xb6>
		active_state = EMERGENCY_SLEEP;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <check_emergency_shutdown+0xd4>)
 8001a6e:	2203      	movs	r2, #3
 8001a70:	701a      	strb	r2, [r3, #0]
		beep();
 8001a72:	f7ff ff95 	bl	80019a0 <beep>
}
 8001a76:	bf00      	nop
 8001a78:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w
 8001a80:	00000000 	.word	0x00000000
 8001a84:	40ed4c00 	.word	0x40ed4c00
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	407db000 	.word	0x407db000
 8001a90:	20000030 	.word	0x20000030
 8001a94:	2000001c 	.word	0x2000001c
 8001a98:	2000055c 	.word	0x2000055c
 8001a9c:	200005d8 	.word	0x200005d8

08001aa0 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 8001aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aaa:	482b      	ldr	r0, [pc, #172]	; (8001b58 <get_enc_button_status+0xb8>)
 8001aac:	f006 fd64 	bl	8008578 <HAL_GPIO_ReadPin>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <get_enc_button_status+0x1c>
		button_status = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	e001      	b.n	8001ac0 <get_enc_button_status+0x20>
	}
	else{
		button_status = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	4926      	ldr	r1, [pc, #152]	; (8001b5c <get_enc_button_status+0xbc>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fdb7 	bl	8003638 <Moving_Average_Compute>
 8001aca:	eeb0 7a40 	vmov.f32	s14, s0
 8001ace:	eef0 7a60 	vmov.f32	s15, s1
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <get_enc_button_status+0xc0>)
 8001ad4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <get_enc_button_status+0xc0>)
 8001ada:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ade:	a31c      	add	r3, pc, #112	; (adr r3, 8001b50 <get_enc_button_status+0xb0>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7ff f840 	bl	8000b68 <__aeabi_dcmpgt>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d100      	bne.n	8001af0 <get_enc_button_status+0x50>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 8001aee:	e02b      	b.n	8001b48 <get_enc_button_status+0xa8>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001af0:	f003 fb24 	bl	800513c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <get_enc_button_status+0xc4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <get_enc_button_status+0xc8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d321      	bcc.n	8001b48 <get_enc_button_status+0xa8>
		beep();
 8001b04:	f7ff ff4c 	bl	80019a0 <beep>
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <get_enc_button_status+0x78>
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d103      	bne.n	8001b20 <get_enc_button_status+0x80>
			active_state = HALTED;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e00e      	b.n	8001b3e <get_enc_button_status+0x9e>
		else if (active_state == HALTED){
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d103      	bne.n	8001b30 <get_enc_button_status+0x90>
			active_state = RUN;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e006      	b.n	8001b3e <get_enc_button_status+0x9e>
		else if (active_state == EMERGENCY_SLEEP){
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d102      	bne.n	8001b3e <get_enc_button_status+0x9e>
			active_state = RUN;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <get_enc_button_status+0xcc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 8001b3e:	f003 fafd 	bl	800513c <HAL_GetTick>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <get_enc_button_status+0xc4>)
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	9999999a 	.word	0x9999999a
 8001b54:	3fe99999 	.word	0x3fe99999
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	200012d4 	.word	0x200012d4
 8001b60:	20000030 	.word	0x20000030
 8001b64:	20000558 	.word	0x20000558
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	2000001c 	.word	0x2000001c

08001b70 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f006 fcfc 	bl	8008578 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <get_stand_status+0x1c>
		stand_status = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	e001      	b.n	8001b90 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4937      	ldr	r1, [pc, #220]	; (8001c70 <get_stand_status+0x100>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 fd4f 	bl	8003638 <Moving_Average_Compute>
 8001b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9e:	eef0 7a60 	vmov.f32	s15, s1
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <get_stand_status+0x104>)
 8001ba4:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <get_stand_status+0x104>)
 8001baa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <get_stand_status+0x108>)
 8001bb4:	f7fe ffd8 	bl	8000b68 <__aeabi_dcmpgt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d039      	beq.n	8001c32 <get_stand_status+0xc2>
		if(active_state == RUN){
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <get_stand_status+0x10c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d107      	bne.n	8001bd6 <get_stand_status+0x66>
			active_state = STANDBY;
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <get_stand_status+0x10c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 8001bcc:	f003 fab6 	bl	800513c <HAL_GetTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <get_stand_status+0x110>)
 8001bd4:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8001bd6:	f003 fab1 	bl	800513c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <get_stand_status+0x110>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcb6 	bl	8000554 <__aeabi_ui2d>
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <get_stand_status+0x114>)
 8001bee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001bf2:	a31d      	add	r3, pc, #116	; (adr r3, 8001c68 <get_stand_status+0xf8>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fd26 	bl	8000648 <__aeabi_dmul>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe ffa6 	bl	8000b54 <__aeabi_dcmpge>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <get_stand_status+0xac>
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <get_stand_status+0x10c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <get_stand_status+0xac>
			active_state = SLEEP;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <get_stand_status+0x10c>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <get_stand_status+0x10c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d003      	beq.n	8001c2c <get_stand_status+0xbc>
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <get_stand_status+0x10c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d102      	bne.n	8001c32 <get_stand_status+0xc2>
			active_state = SLEEP;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <get_stand_status+0x10c>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <get_stand_status+0x104>)
 8001c34:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <get_stand_status+0x108>)
 8001c3e:	f7fe ff75 	bl	8000b2c <__aeabi_dcmplt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d100      	bne.n	8001c4a <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 8001c48:	e00a      	b.n	8001c60 <get_stand_status+0xf0>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <get_stand_status+0x10c>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d003      	beq.n	8001c5a <get_stand_status+0xea>
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <get_stand_status+0x10c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <get_stand_status+0xf0>
			active_state = RUN;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <get_stand_status+0x10c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40ed4c00 	.word	0x40ed4c00
 8001c70:	20000c7c 	.word	0x20000c7c
 8001c74:	20000030 	.word	0x20000030
 8001c78:	3fe00000 	.word	0x3fe00000
 8001c7c:	2000001c 	.word	0x2000001c
 8001c80:	20000560 	.word	0x20000560
 8001c84:	200005d8 	.word	0x200005d8

08001c88 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 8001c8e:	2110      	movs	r1, #16
 8001c90:	483f      	ldr	r0, [pc, #252]	; (8001d90 <get_handle_type+0x108>)
 8001c92:	f006 fc71 	bl	8008578 <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <get_handle_type+0x1a>
		handle_status = 1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	e001      	b.n	8001ca6 <get_handle_type+0x1e>
	}
	else{
		handle_status = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	493a      	ldr	r1, [pc, #232]	; (8001d94 <get_handle_type+0x10c>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 fcc4 	bl	8003638 <Moving_Average_Compute>
 8001cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb4:	eef0 7a60 	vmov.f32	s15, s1
 8001cb8:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <get_handle_type+0x110>)
 8001cba:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <get_handle_type+0x110>)
 8001cc0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <get_handle_type+0x114>)
 8001cca:	f7fe ff4d 	bl	8000b68 <__aeabi_dcmpgt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01e      	beq.n	8001d12 <get_handle_type+0x8a>
		handle = T210;
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <get_handle_type+0x118>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <get_handle_type+0x11c>)
 8001cdc:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <get_handle_type+0x120>)
 8001cde:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 8001ce0:	4932      	ldr	r1, [pc, #200]	; (8001dac <get_handle_type+0x124>)
 8001ce2:	a329      	add	r3, pc, #164	; (adr r3, 8001d88 <get_handle_type+0x100>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 8001cec:	4930      	ldr	r1, [pc, #192]	; (8001db0 <get_handle_type+0x128>)
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <get_handle_type+0x12c>)
 8001cf4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001cf8:	492f      	ldr	r1, [pc, #188]	; (8001db8 <get_handle_type+0x130>)
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <get_handle_type+0x134>)
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8001d04:	492e      	ldr	r1, [pc, #184]	; (8001dc0 <get_handle_type+0x138>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <get_handle_type+0x13c>)
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
 8001d10:	e01d      	b.n	8001d4e <get_handle_type+0xc6>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <get_handle_type+0x118>)
 8001d14:	2202      	movs	r2, #2
 8001d16:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <get_handle_type+0x11c>)
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <get_handle_type+0x140>)
 8001d1c:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //430 deg C
 8001d1e:	4923      	ldr	r1, [pc, #140]	; (8001dac <get_handle_type+0x124>)
 8001d20:	a319      	add	r3, pc, #100	; (adr r3, 8001d88 <get_handle_type+0x100>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 8001d2a:	4921      	ldr	r1, [pc, #132]	; (8001db0 <get_handle_type+0x128>)
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <get_handle_type+0x144>)
 8001d32:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001d36:	4920      	ldr	r1, [pc, #128]	; (8001db8 <get_handle_type+0x130>)
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <get_handle_type+0x134>)
 8001d3e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001d42:	491f      	ldr	r1, [pc, #124]	; (8001dc0 <get_handle_type+0x138>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <get_handle_type+0x114>)
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <get_handle_type+0x128>)
 8001d50:	ed93 7b00 	vldr	d7, [r3]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <get_handle_type+0x130>)
 8001d56:	ed93 6b00 	vldr	d6, [r3]
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <get_handle_type+0x138>)
 8001d5c:	ed93 5b00 	vldr	d5, [r3]
 8001d60:	eeb0 2a45 	vmov.f32	s4, s10
 8001d64:	eef0 2a65 	vmov.f32	s5, s11
 8001d68:	eeb0 1a46 	vmov.f32	s2, s12
 8001d6c:	eef0 1a66 	vmov.f32	s3, s13
 8001d70:	eeb0 0a47 	vmov.f32	s0, s14
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <get_handle_type+0x148>)
 8001d7a:	f001 ff34 	bl	8003be6 <PID_SetTunings>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	407c2000 	.word	0x407c2000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	20000fa8 	.word	0x20000fa8
 8001d98:	20000030 	.word	0x20000030
 8001d9c:	3fe00000 	.word	0x3fe00000
 8001da0:	20000548 	.word	0x20000548
 8001da4:	200005b0 	.word	0x200005b0
 8001da8:	42700000 	.word	0x42700000
 8001dac:	20000028 	.word	0x20000028
 8001db0:	20000570 	.word	0x20000570
 8001db4:	40240000 	.word	0x40240000
 8001db8:	20000578 	.word	0x20000578
 8001dbc:	403e0000 	.word	0x403e0000
 8001dc0:	20000580 	.word	0x20000580
 8001dc4:	3fd00000 	.word	0x3fd00000
 8001dc8:	42f00000 	.word	0x42f00000
 8001dcc:	402e0000 	.word	0x402e0000
 8001dd0:	200019f0 	.word	0x200019f0

08001dd4 <HAL_TIM_IC_CaptureCallback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7f1b      	ldrb	r3, [r3, #28]
 8001de0:	2b01      	cmp	r3, #1
		//beep();
	}
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <set_heater_duty+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	88fa      	ldrh	r2, [r7, #6]
 8001e00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20001874 	.word	0x20001874

08001e14 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim1) && (current_measurement_requested == 1) )
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d112      	bne.n	8001e4a <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10e      	bne.n	8001e4a <HAL_TIM_PWM_PulseFinishedCallback+0x36>
  {
	  HAL_TIM_Base_Start_IT(&htim16);
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001e2e:	f009 ff3f 	bl	800bcb0 <HAL_TIM_Base_Start_IT>
	  set_heater_duty(duty_cycle); //Set duty cycle back to calculated
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fedc 	bl	8000bf8 <__aeabi_d2uiz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ffd3 	bl	8001df0 <set_heater_duty>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001874 	.word	0x20001874
 8001e58:	20000620 	.word	0x20000620
 8001e5c:	20001958 	.word	0x20001958
 8001e60:	20000618 	.word	0x20000618

08001e64 <HAL_TIM_PeriodElapsedCallback>:
//float thermocouple_temperature_raw = Moving_Average_Compute(100, &thermocouple_temperature_filter_struct); /* Moving average filter */


// Callback:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 ){
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d10b      	bne.n	8001e8c <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_TIM_Base_Stop_IT(&htim16);
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e76:	f009 ff85 	bl	800bd84 <HAL_TIM_Base_Stop_IT>
	  //HAL_ADC_Start_IT(&hadc2);
	  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e7c:	f004 fffe 	bl	8006e7c <HAL_ADCEx_InjectedStart_IT>
	  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2102      	movs	r1, #2
 8001e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e88:	f006 fb8e 	bl	80085a8 <HAL_GPIO_WritePin>
  }
  if (htim == &htim17){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d106      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x3e>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_TIM_Base_Stop_IT(&htim17);
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e9e:	f009 ff71 	bl	800bd84 <HAL_TIM_Base_Stop_IT>

  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001958 	.word	0x20001958
 8001eb0:	20001600 	.word	0x20001600
 8001eb4:	200019a4 	.word	0x200019a4
 8001eb8:	2000190c 	.word	0x2000190c

08001ebc <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	if(current_measurement_requested == 1){
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d11e      	bne.n	8001f0a <HAL_ADCEx_InjectedConvCpltCallback+0x4e>
		HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2102      	movs	r1, #2
 8001ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed4:	f006 fb68 	bl	80085a8 <HAL_GPIO_WritePin>
		thermocouple_temperature_raw = HAL_ADCEx_InjectedGetValue(&hadc1,1);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8001edc:	f005 f8b4 	bl	8007048 <HAL_ADCEx_InjectedGetValue>
 8001ee0:	ee07 0a90 	vmov	s15, r0
 8001ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_ADCEx_InjectedConvCpltCallback+0x60>)
 8001eea:	edc3 7a00 	vstr	s15, [r3]
		current_raw = HAL_ADCEx_InjectedGetValue(&hadc1,2);
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 8001ef2:	f005 f8a9 	bl	8007048 <HAL_ADCEx_InjectedGetValue>
 8001ef6:	ee07 0a90 	vmov	s15, r0
 8001efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_ADCEx_InjectedConvCpltCallback+0x64>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
		current_measurement_requested = 0;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]

	}
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000620 	.word	0x20000620
 8001f18:	20001600 	.word	0x20001600
 8001f1c:	200005cc 	.word	0x200005cc
 8001f20:	200005d0 	.word	0x200005d0
 8001f24:	00000000 	.word	0x00000000

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	ed2d 8b06 	vpush	{d8-d10}
 8001f30:	b09b      	sub	sp, #108	; 0x6c
 8001f32:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f34:	f003 f89e 	bl	8005074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f38:	f000 ff08 	bl	8002d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f3c:	f001 faae 	bl	800349c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f40:	f001 fa7a 	bl	8003438 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f44:	f000 ff50 	bl	8002de8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f48:	f000 ffd6 	bl	8002ef8 <MX_ADC2_Init>
  MX_CRC_Init();
 8001f4c:	f001 f83a 	bl	8002fc4 <MX_CRC_Init>
  MX_TIM1_Init();
 8001f50:	f001 f8d8 	bl	8003104 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f54:	f001 f96a 	bl	800322c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001f58:	f001 f9bc 	bl	80032d4 <MX_TIM4_Init>
  MX_TIM16_Init();
 8001f5c:	f001 fa14 	bl	8003388 <MX_TIM16_Init>
  MX_SPI2_Init();
 8001f60:	f001 f892 	bl	8003088 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001f64:	f001 f850 	bl	8003008 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8001f68:	f011 f99c 	bl	80132a4 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8001f6c:	f001 fa34 	bl	80033d8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8001f70:	f003 f814 	bl	8004f9c <LCD_init>

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001f74:	213c      	movs	r1, #60	; 0x3c
 8001f76:	4857      	ldr	r0, [pc, #348]	; (80020d4 <main+0x1ac>)
 8001f78:	f00a f9d6 	bl	800c328 <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	4856      	ldr	r0, [pc, #344]	; (80020d8 <main+0x1b0>)
 8001f80:	f009 ff86 	bl	800be90 <HAL_TIM_PWM_Start_IT>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001f84:	2108      	movs	r1, #8
 8001f86:	4855      	ldr	r0, [pc, #340]	; (80020dc <main+0x1b4>)
 8001f88:	f00b f8ac 	bl	800d0e4 <HAL_TIMEx_PWMN_Start>


		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001f8c:	217f      	movs	r1, #127	; 0x7f
 8001f8e:	4854      	ldr	r0, [pc, #336]	; (80020e0 <main+0x1b8>)
 8001f90:	f004 ff12 	bl	8006db8 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_BUF_VIN, (uint32_t)ADC2_BUF_VIN_LEN);	//Start ADC DMA
 8001f94:	220a      	movs	r2, #10
 8001f96:	4953      	ldr	r1, [pc, #332]	; (80020e4 <main+0x1bc>)
 8001f98:	4851      	ldr	r0, [pc, #324]	; (80020e0 <main+0x1b8>)
 8001f9a:	f003 fe17 	bl	8005bcc <HAL_ADC_Start_DMA>

        HAL_ADC_Start_IT(&hadc1);        //Start ADC DMA
 8001f9e:	4852      	ldr	r0, [pc, #328]	; (80020e8 <main+0x1c0>)
 8001fa0:	f003 fce4 	bl	800596c <HAL_ADC_Start_IT>

		Moving_Average_Init(&thermocouple_temperature_filter_struct,5);
 8001fa4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001fa8:	4850      	ldr	r0, [pc, #320]	; (80020ec <main+0x1c4>)
 8001faa:	f001 fb14 	bl	80035d6 <Moving_Average_Init>
		Moving_Average_Init(&input_voltage_filterStruct,50);
 8001fae:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80020f0 <main+0x1c8>
 8001fb2:	4850      	ldr	r0, [pc, #320]	; (80020f4 <main+0x1cc>)
 8001fb4:	f001 fb0f 	bl	80035d6 <Moving_Average_Init>
		Moving_Average_Init(&stand_sense_filterStruct,50);
 8001fb8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80020f0 <main+0x1c8>
 8001fbc:	484e      	ldr	r0, [pc, #312]	; (80020f8 <main+0x1d0>)
 8001fbe:	f001 fb0a 	bl	80035d6 <Moving_Average_Init>
		Moving_Average_Init(&handle_sense_filterStruct,50);
 8001fc2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80020f0 <main+0x1c8>
 8001fc6:	484d      	ldr	r0, [pc, #308]	; (80020fc <main+0x1d4>)
 8001fc8:	f001 fb05 	bl	80035d6 <Moving_Average_Init>
		Moving_Average_Init(&enc_button_sense_filterStruct,10);
 8001fcc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001fd0:	484b      	ldr	r0, [pc, #300]	; (8002100 <main+0x1d8>)
 8001fd2:	f001 fb00 	bl	80035d6 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff ff0a 	bl	8001df0 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe0:	e00c      	b.n	8001ffc <main+0xd4>
  			get_bus_voltage();
 8001fe2:	f7ff f8b9 	bl	8001158 <get_bus_voltage>
  			get_thermocouple_temperature();
 8001fe6:	f7ff f8e7 	bl	80011b8 <get_thermocouple_temperature>
  			get_handle_type();
 8001fea:	f7ff fe4d 	bl	8001c88 <get_handle_type>
  			get_stand_status();
 8001fee:	f7ff fdbf 	bl	8001b70 <get_stand_status>
  			get_enc_button_status();
 8001ff2:	f7ff fd55 	bl	8001aa0 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffe:	2bc7      	cmp	r3, #199	; 0xc7
 8002000:	ddef      	ble.n	8001fe2 <main+0xba>
  		}

  		uint16_t menu_length = 8;
 8002002:	2308      	movs	r3, #8
 8002004:	82fb      	strh	r3, [r7, #22]

  		if(!FlashCheckCRC()){
 8002006:	f7fe fe75 	bl	8000cf4 <FlashCheckCRC>
 800200a:	4603      	mov	r3, r0
 800200c:	f083 0301 	eor.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <main+0xf4>
  	    	FlashWrite(&default_flash_values);
 8002016:	483b      	ldr	r0, [pc, #236]	; (8002104 <main+0x1dc>)
 8002018:	f7fe ff1a 	bl	8000e50 <FlashWrite>
  		}
  	    FlashRead(&flash_values);
 800201c:	483a      	ldr	r0, [pc, #232]	; (8002108 <main+0x1e0>)
 800201e:	f7fe fef3 	bl	8000e08 <FlashRead>

  		/* Set startup state */
  		active_state = SLEEP;
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <main+0x1e4>)
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8002028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800202c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	857b      	strh	r3, [r7, #42]	; 0x2a
  		uint16_t old_menu_cursor_position = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	853b      	strh	r3, [r7, #40]	; 0x28
  		uint16_t menue_start = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	84fb      	strh	r3, [r7, #38]	; 0x26
  		uint16_t menue_level = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	84bb      	strh	r3, [r7, #36]	; 0x24
  		uint16_t menu_active = 1;
 8002042:	2301      	movs	r3, #1
 8002044:	847b      	strh	r3, [r7, #34]	; 0x22
  		float old_value = 0;
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_2_Pin) == 1){
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	482f      	ldr	r0, [pc, #188]	; (8002110 <main+0x1e8>)
 8002052:	f006 fa91 	bl	8008578 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 828d 	bne.w	8002578 <main+0x650>
  			LCD_PutStr(50, 5, "SETTINGS", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800205e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002062:	f7ff f828 	bl	80010b6 <RGB_to_BRG>
 8002066:	4603      	mov	r3, r0
 8002068:	461c      	mov	r4, r3
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff f823 	bl	80010b6 <RGB_to_BRG>
 8002070:	4603      	mov	r3, r0
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	9400      	str	r4, [sp, #0]
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <main+0x1ec>)
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <main+0x1f0>)
 800207a:	2105      	movs	r1, #5
 800207c:	2032      	movs	r0, #50	; 0x32
 800207e:	f002 ff4f 	bl	8004f20 <LCD_PutStr>
  			LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_WHITE));
 8002082:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002086:	f7ff f816 	bl	80010b6 <RGB_to_BRG>
 800208a:	4603      	mov	r3, r0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2328      	movs	r3, #40	; 0x28
 8002090:	22f0      	movs	r2, #240	; 0xf0
 8002092:	2128      	movs	r1, #40	; 0x28
 8002094:	2000      	movs	r0, #0
 8002096:	f002 ff05 	bl	8004ea4 <LCD_DrawLine>
  			LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_WHITE));
 800209a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800209e:	f7ff f80a 	bl	80010b6 <RGB_to_BRG>
 80020a2:	4603      	mov	r3, r0
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2329      	movs	r3, #41	; 0x29
 80020a8:	22f0      	movs	r2, #240	; 0xf0
 80020aa:	2129      	movs	r1, #41	; 0x29
 80020ac:	2000      	movs	r0, #0
 80020ae:	f002 fef9 	bl	8004ea4 <LCD_DrawLine>
  			LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_WHITE));
 80020b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020b6:	f7fe fffe 	bl	80010b6 <RGB_to_BRG>
 80020ba:	4603      	mov	r3, r0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	232a      	movs	r3, #42	; 0x2a
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	212a      	movs	r1, #42	; 0x2a
 80020c4:	2000      	movs	r0, #0
 80020c6:	f002 feed 	bl	8004ea4 <LCD_DrawLine>

  			HAL_Delay(1000);
 80020ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ce:	f003 f841 	bl	8005154 <HAL_Delay>
  			while(menu_active == 1){
 80020d2:	e24d      	b.n	8002570 <main+0x648>
 80020d4:	200018c0 	.word	0x200018c0
 80020d8:	2000190c 	.word	0x2000190c
 80020dc:	20001874 	.word	0x20001874
 80020e0:	2000166c 	.word	0x2000166c
 80020e4:	200005b8 	.word	0x200005b8
 80020e8:	20001600 	.word	0x20001600
 80020ec:	20000624 	.word	0x20000624
 80020f0:	42480000 	.word	0x42480000
 80020f4:	20000950 	.word	0x20000950
 80020f8:	20000c7c 	.word	0x20000c7c
 80020fc:	20000fa8 	.word	0x20000fa8
 8002100:	200012d4 	.word	0x200012d4
 8002104:	20000070 	.word	0x20000070
 8002108:	200005d8 	.word	0x200005d8
 800210c:	2000001c 	.word	0x2000001c
 8002110:	48000400 	.word	0x48000400
 8002114:	080187f0 	.word	0x080187f0
 8002118:	08016d24 	.word	0x08016d24
  				if(menue_level == 0){
 800211c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800211e:	2b00      	cmp	r3, #0
 8002120:	d111      	bne.n	8002146 <main+0x21e>
  					if(TIM2->CNT < 1000)
 8002122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212c:	d204      	bcs.n	8002138 <main+0x210>
  					{
  						TIM2->CNT = 1000;
 800212e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002136:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8002138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	857b      	strh	r3, [r7, #42]	; 0x2a
  				}
  				if (menue_level == 1){
 8002146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002148:	2b01      	cmp	r3, #1
 800214a:	f040 808e 	bne.w	800226a <main+0x342>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 800214e:	69f8      	ldr	r0, [r7, #28]
 8002150:	f7fe fa22 	bl	8000598 <__aeabi_f2d>
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9f8 	bl	8000554 <__aeabi_ui2d>
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4bad      	ldr	r3, [pc, #692]	; (8002420 <main+0x4f8>)
 800216a:	f7fe f8b5 	bl	80002d8 <__aeabi_dsub>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd5f 	bl	8000c38 <__aeabi_d2f>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fa0b 	bl	8000598 <__aeabi_f2d>
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800218a:	f7fe fb87 	bl	800089c <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f7fe f8a1 	bl	80002dc <__adddf3>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4690      	mov	r8, r2
 80021a0:	4699      	mov	r9, r3
 80021a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ac:	ee17 0a90 	vmov	r0, s15
 80021b0:	f7fe f9f2 	bl	8000598 <__aeabi_f2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80021ba:	00c9      	lsls	r1, r1, #3
 80021bc:	4899      	ldr	r0, [pc, #612]	; (8002424 <main+0x4fc>)
 80021be:	180c      	adds	r4, r1, r0
 80021c0:	4640      	mov	r0, r8
 80021c2:	4649      	mov	r1, r9
 80021c4:	f7fe f888 	bl	80002d8 <__aeabi_dsub>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 80021d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d12c      	bne.n	8002230 <main+0x308>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 80021d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4a92      	ldr	r2, [pc, #584]	; (8002424 <main+0x4fc>)
 80021dc:	4413      	add	r3, r2
 80021de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fcdf 	bl	8000ba8 <__aeabi_d2iz>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bfb8      	it	lt
 80021f0:	425b      	neglt	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f9be 	bl	8000574 <__aeabi_i2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002418 <main+0x4f0>
 8002200:	ec43 2b10 	vmov	d0, r2, r3
 8002204:	f014 fbdc 	bl	80169c0 <fmod>
 8002208:	eeb0 7a40 	vmov.f32	s14, s0
 800220c:	eef0 7a60 	vmov.f32	s15, s1
 8002210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4a83      	ldr	r2, [pc, #524]	; (8002424 <main+0x4fc>)
 8002216:	189c      	adds	r4, r3, r2
 8002218:	eeb0 0a47 	vmov.f32	s0, s14
 800221c:	eef0 0a67 	vmov.f32	s1, s15
 8002220:	f014 fbfc 	bl	8016a1c <round>
 8002224:	eeb0 7a40 	vmov.f32	s14, s0
 8002228:	eef0 7a60 	vmov.f32	s15, s1
 800222c:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 8002230:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002232:	2b01      	cmp	r3, #1
 8002234:	d019      	beq.n	800226a <main+0x342>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8002236:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4a7a      	ldr	r2, [pc, #488]	; (8002424 <main+0x4fc>)
 800223c:	4413      	add	r3, r2
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fcaf 	bl	8000ba8 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002250:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002254:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4972      	ldr	r1, [pc, #456]	; (8002424 <main+0x4fc>)
 800225a:	185c      	adds	r4, r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	f7fe f989 	bl	8000574 <__aeabi_i2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 800226a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	429a      	cmp	r2, r3
 8002270:	d908      	bls.n	8002284 <main+0x35c>
  								menu_cursor_position = menu_length;
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	857b      	strh	r3, [r7, #42]	; 0x2a
  								TIM2->CNT = 1000 + menu_length*2;
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800227c:	005a      	lsls	r2, r3, #1
 800227e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 8002284:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002286:	2b04      	cmp	r3, #4
 8002288:	d902      	bls.n	8002290 <main+0x368>
  					menue_start = menu_cursor_position-5;
 800228a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800228c:	3b05      	subs	r3, #5
 800228e:	84fb      	strh	r3, [r7, #38]	; 0x26
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 8002290:	2120      	movs	r1, #32
 8002292:	4865      	ldr	r0, [pc, #404]	; (8002428 <main+0x500>)
 8002294:	f006 f970 	bl	8008578 <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d129      	bne.n	80022f2 <main+0x3ca>
 800229e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022a0:	8afb      	ldrh	r3, [r7, #22]
 80022a2:	3b02      	subs	r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	da24      	bge.n	80022f2 <main+0x3ca>
  					if(menue_level == 0){
 80022a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <main+0x3a2>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 80022ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4a5c      	ldr	r2, [pc, #368]	; (8002424 <main+0x4fc>)
 80022b4:	4413      	add	r3, r2
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fcbb 	bl	8000c38 <__aeabi_d2f>
 80022c2:	4603      	mov	r3, r0
 80022c4:	61fb      	str	r3, [r7, #28]
  						old_menu_cursor_position = menu_cursor_position;
 80022c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c8:	853b      	strh	r3, [r7, #40]	; 0x28
  					}
  					if(menue_level == 1){
 80022ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <main+0x3b6>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 80022d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80022d6:	005a      	lsls	r2, r3, #1
 80022d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 80022de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e0:	3b01      	subs	r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bfb8      	it	lt
 80022e6:	425b      	neglt	r3, r3
 80022e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  					HAL_Delay(200);
 80022ea:	20c8      	movs	r0, #200	; 0xc8
 80022ec:	f002 ff32 	bl	8005154 <HAL_Delay>
 80022f0:	e037      	b.n	8002362 <main+0x43a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 80022f2:	2120      	movs	r1, #32
 80022f4:	484c      	ldr	r0, [pc, #304]	; (8002428 <main+0x500>)
 80022f6:	f006 f93f 	bl	8008578 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d106      	bne.n	800230e <main+0x3e6>
 8002300:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002302:	8afb      	ldrh	r3, [r7, #22]
 8002304:	429a      	cmp	r2, r3
 8002306:	d102      	bne.n	800230e <main+0x3e6>
  					menu_active = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	847b      	strh	r3, [r7, #34]	; 0x22
 800230c:	e029      	b.n	8002362 <main+0x43a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 800230e:	2120      	movs	r1, #32
 8002310:	4845      	ldr	r0, [pc, #276]	; (8002428 <main+0x500>)
 8002312:	f006 f931 	bl	8008578 <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10a      	bne.n	8002332 <main+0x40a>
 800231c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800231e:	8afb      	ldrh	r3, [r7, #22]
 8002320:	3b01      	subs	r3, #1
 8002322:	429a      	cmp	r2, r3
 8002324:	d105      	bne.n	8002332 <main+0x40a>
  					menu_active = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	847b      	strh	r3, [r7, #34]	; 0x22
  					FlashWrite(&flash_values);
 800232a:	483e      	ldr	r0, [pc, #248]	; (8002424 <main+0x4fc>)
 800232c:	f7fe fd90 	bl	8000e50 <FlashWrite>
 8002330:	e017      	b.n	8002362 <main+0x43a>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8002332:	2120      	movs	r1, #32
 8002334:	483c      	ldr	r0, [pc, #240]	; (8002428 <main+0x500>)
 8002336:	f006 f91f 	bl	8008578 <HAL_GPIO_ReadPin>
 800233a:	4603      	mov	r3, r0
 800233c:	2b01      	cmp	r3, #1
 800233e:	d110      	bne.n	8002362 <main+0x43a>
 8002340:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	3b02      	subs	r3, #2
 8002346:	429a      	cmp	r2, r3
 8002348:	d10b      	bne.n	8002362 <main+0x43a>
  					flash_values = default_flash_values;
 800234a:	4a36      	ldr	r2, [pc, #216]	; (8002424 <main+0x4fc>)
 800234c:	4b37      	ldr	r3, [pc, #220]	; (800242c <main+0x504>)
 800234e:	4614      	mov	r4, r2
 8002350:	461d      	mov	r5, r3
 8002352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800235e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				}

  	  			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002366:	f7fe fea6 	bl	80010b6 <RGB_to_BRG>
 800236a:	4603      	mov	r3, r0
 800236c:	461c      	mov	r4, r3
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fea1 	bl	80010b6 <RGB_to_BRG>
 8002374:	4603      	mov	r3, r0
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	9400      	str	r4, [sp, #0]
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <main+0x508>)
 800237c:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <main+0x50c>)
 800237e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002382:	2000      	movs	r0, #0
 8002384:	f002 fdcc 	bl	8004f20 <LCD_PutStr>
  	  			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002388:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800238c:	f7fe fe93 	bl	80010b6 <RGB_to_BRG>
 8002390:	4603      	mov	r3, r0
 8002392:	461c      	mov	r4, r3
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fe8e 	bl	80010b6 <RGB_to_BRG>
 800239a:	4603      	mov	r3, r0
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9400      	str	r4, [sp, #0]
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <main+0x508>)
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <main+0x510>)
 80023a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023a8:	2096      	movs	r0, #150	; 0x96
 80023aa:	f002 fdb9 	bl	8004f20 <LCD_PutStr>

  				for(int i = menue_start;i<menue_start+6;i++){
 80023ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	e0d7      	b.n	8002564 <main+0x63c>

  					if((i == menu_cursor_position) && (menue_level == 0)){
 80023b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d141      	bne.n	8002440 <main+0x518>
 80023bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d13e      	bne.n	8002440 <main+0x518>
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80023c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	0091      	lsls	r1, r2, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	332d      	adds	r3, #45	; 0x2d
 80023de:	b29c      	uxth	r4, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <main+0x514>)
 80023ec:	189d      	adds	r5, r3, r2
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fe61 	bl	80010b6 <RGB_to_BRG>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461e      	mov	r6, r3
 80023f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023fc:	f7fe fe5b 	bl	80010b6 <RGB_to_BRG>
 8002400:	4603      	mov	r3, r0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	9600      	str	r6, [sp, #0]
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <main+0x508>)
 8002408:	462a      	mov	r2, r5
 800240a:	4621      	mov	r1, r4
 800240c:	2005      	movs	r0, #5
 800240e:	f002 fd87 	bl	8004f20 <LCD_PutStr>
 8002412:	e03d      	b.n	8002490 <main+0x568>
 8002414:	f3af 8000 	nop.w
 8002418:	00000000 	.word	0x00000000
 800241c:	40000000 	.word	0x40000000
 8002420:	408f4000 	.word	0x408f4000
 8002424:	200005d8 	.word	0x200005d8
 8002428:	48000400 	.word	0x48000400
 800242c:	20000070 	.word	0x20000070
 8002430:	08016e98 	.word	0x08016e98
 8002434:	08016d30 	.word	0x08016d30
 8002438:	08016d3c 	.word	0x08016d3c
 800243c:	200000a0 	.word	0x200000a0

  					}
  					else{
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4413      	add	r3, r2
 800244e:	461a      	mov	r2, r3
 8002450:	0091      	lsls	r1, r2, #2
 8002452:	461a      	mov	r2, r3
 8002454:	460b      	mov	r3, r1
 8002456:	4413      	add	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	332d      	adds	r3, #45	; 0x2d
 800245c:	b29c      	uxth	r4, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4a28      	ldr	r2, [pc, #160]	; (800250c <main+0x5e4>)
 800246a:	189d      	adds	r5, r3, r2
 800246c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002470:	f7fe fe21 	bl	80010b6 <RGB_to_BRG>
 8002474:	4603      	mov	r3, r0
 8002476:	461e      	mov	r6, r3
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe fe1c 	bl	80010b6 <RGB_to_BRG>
 800247e:	4603      	mov	r3, r0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	9600      	str	r6, [sp, #0]
 8002484:	4b22      	ldr	r3, [pc, #136]	; (8002510 <main+0x5e8>)
 8002486:	462a      	mov	r2, r5
 8002488:	4621      	mov	r1, r4
 800248a:	2005      	movs	r0, #5
 800248c:	f002 fd48 	bl	8004f20 <LCD_PutStr>
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 8002490:	463b      	mov	r3, r7
 8002492:	2214      	movs	r2, #20
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f012 f999 	bl	80147ce <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <main+0x5ec>)
 80024a2:	4413      	add	r3, r2
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	4638      	mov	r0, r7
 80024aa:	491b      	ldr	r1, [pc, #108]	; (8002518 <main+0x5f0>)
 80024ac:	f012 f92c 	bl	8014708 <siprintf>
  					if(i <= menu_length-3){
 80024b0:	8afb      	ldrh	r3, [r7, #22]
 80024b2:	3b02      	subs	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	da51      	bge.n	800255e <main+0x636>
  						if((i == menu_cursor_position) && (menue_level == 1)){
 80024ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d12c      	bne.n	800251c <main+0x5f4>
 80024c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d129      	bne.n	800251c <main+0x5f4>
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80024c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	461a      	mov	r2, r3
 80024d8:	0091      	lsls	r1, r2, #2
 80024da:	461a      	mov	r2, r3
 80024dc:	460b      	mov	r3, r1
 80024de:	4413      	add	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	332d      	adds	r3, #45	; 0x2d
 80024e4:	b29c      	uxth	r4, r3
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7fe fde5 	bl	80010b6 <RGB_to_BRG>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461d      	mov	r5, r3
 80024f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024f4:	f7fe fddf 	bl	80010b6 <RGB_to_BRG>
 80024f8:	4603      	mov	r3, r0
 80024fa:	463a      	mov	r2, r7
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	9500      	str	r5, [sp, #0]
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <main+0x5e8>)
 8002502:	4621      	mov	r1, r4
 8002504:	20c8      	movs	r0, #200	; 0xc8
 8002506:	f002 fd0b 	bl	8004f20 <LCD_PutStr>
 800250a:	e028      	b.n	800255e <main+0x636>
 800250c:	200000a0 	.word	0x200000a0
 8002510:	08016e98 	.word	0x08016e98
 8002514:	200005d8 	.word	0x200005d8
 8002518:	08016d44 	.word	0x08016d44

  						}
  						else{
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800251c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4413      	add	r3, r2
 800252a:	461a      	mov	r2, r3
 800252c:	0091      	lsls	r1, r2, #2
 800252e:	461a      	mov	r2, r3
 8002530:	460b      	mov	r3, r1
 8002532:	4413      	add	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	332d      	adds	r3, #45	; 0x2d
 8002538:	b29c      	uxth	r4, r3
 800253a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800253e:	f7fe fdba 	bl	80010b6 <RGB_to_BRG>
 8002542:	4603      	mov	r3, r0
 8002544:	461d      	mov	r5, r3
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fdb5 	bl	80010b6 <RGB_to_BRG>
 800254c:	4603      	mov	r3, r0
 800254e:	463a      	mov	r2, r7
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9500      	str	r5, [sp, #0]
 8002554:	4bd6      	ldr	r3, [pc, #856]	; (80028b0 <main+0x988>)
 8002556:	4621      	mov	r1, r4
 8002558:	20c8      	movs	r0, #200	; 0xc8
 800255a:	f002 fce1 	bl	8004f20 <LCD_PutStr>
  				for(int i = menue_start;i<menue_start+6;i++){
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	3301      	adds	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002566:	3305      	adds	r3, #5
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	429a      	cmp	r2, r3
 800256c:	f77f af22 	ble.w	80023b4 <main+0x48c>
  			while(menu_active == 1){
 8002570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002572:	2b01      	cmp	r3, #1
 8002574:	f43f add2 	beq.w	800211c <main+0x1f4>
  				}
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002578:	4bce      	ldr	r3, [pc, #824]	; (80028b4 <main+0x98c>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fb37 	bl	8000bf8 <__aeabi_d2uiz>
 800258a:	4603      	mov	r3, r0
 800258c:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 800258e:	4bca      	ldr	r3, [pc, #808]	; (80028b8 <main+0x990>)
 8002590:	ed93 7b00 	vldr	d7, [r3]
 8002594:	4bc9      	ldr	r3, [pc, #804]	; (80028bc <main+0x994>)
 8002596:	ed93 6b00 	vldr	d6, [r3]
 800259a:	4bc9      	ldr	r3, [pc, #804]	; (80028c0 <main+0x998>)
 800259c:	ed93 5b00 	vldr	d5, [r3]
 80025a0:	2300      	movs	r3, #0
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	2301      	movs	r3, #1
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	eeb0 2a45 	vmov.f32	s4, s10
 80025ac:	eef0 2a65 	vmov.f32	s5, s11
 80025b0:	eeb0 1a46 	vmov.f32	s2, s12
 80025b4:	eef0 1a66 	vmov.f32	s3, s13
 80025b8:	eeb0 0a47 	vmov.f32	s0, s14
 80025bc:	eef0 0a67 	vmov.f32	s1, s15
 80025c0:	4bc0      	ldr	r3, [pc, #768]	; (80028c4 <main+0x99c>)
 80025c2:	4ac1      	ldr	r2, [pc, #772]	; (80028c8 <main+0x9a0>)
 80025c4:	49c1      	ldr	r1, [pc, #772]	; (80028cc <main+0x9a4>)
 80025c6:	48c2      	ldr	r0, [pc, #776]	; (80028d0 <main+0x9a8>)
 80025c8:	f001 f8ce 	bl	8003768 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80025cc:	2101      	movs	r1, #1
 80025ce:	48c0      	ldr	r0, [pc, #768]	; (80028d0 <main+0x9a8>)
 80025d0:	f001 fa5d 	bl	8003a8e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80025d4:	4bbf      	ldr	r3, [pc, #764]	; (80028d4 <main+0x9ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	48bc      	ldr	r0, [pc, #752]	; (80028d0 <main+0x9a8>)
 80025de:	f001 fc05 	bl	8003dec <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 80025e2:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002890 <main+0x968>
 80025e6:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8002898 <main+0x970>
 80025ea:	48b9      	ldr	r0, [pc, #740]	; (80028d0 <main+0x9a8>)
 80025ec:	f001 fa6d 	bl	8003aca <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 80025f0:	ed9f 1bab 	vldr	d1, [pc, #684]	; 80028a0 <main+0x978>
 80025f4:	ed9f 0bac 	vldr	d0, [pc, #688]	; 80028a8 <main+0x980>
 80025f8:	48b5      	ldr	r0, [pc, #724]	; (80028d0 <main+0x9a8>)
 80025fa:	f001 fad4 	bl	8003ba6 <PID_SetILimits>

		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe fd59 	bl	80010b6 <RGB_to_BRG>
 8002604:	4603      	mov	r3, r0
 8002606:	4618      	mov	r0, r3
 8002608:	f00d fbd6 	bl	800fdb8 <UG_FillScreen>

		LCD_PutStr(55, 5, "AxxSolder", FONT_arial_29X35, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 800260c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002610:	f7fe fd51 	bl	80010b6 <RGB_to_BRG>
 8002614:	4603      	mov	r3, r0
 8002616:	461c      	mov	r4, r3
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe fd4c 	bl	80010b6 <RGB_to_BRG>
 800261e:	4603      	mov	r3, r0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	9400      	str	r4, [sp, #0]
 8002624:	4bac      	ldr	r3, [pc, #688]	; (80028d8 <main+0x9b0>)
 8002626:	4aad      	ldr	r2, [pc, #692]	; (80028dc <main+0x9b4>)
 8002628:	2105      	movs	r1, #5
 800262a:	2037      	movs	r0, #55	; 0x37
 800262c:	f002 fc78 	bl	8004f20 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002630:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002634:	f7fe fd3f 	bl	80010b6 <RGB_to_BRG>
 8002638:	4603      	mov	r3, r0
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2328      	movs	r3, #40	; 0x28
 800263e:	22f0      	movs	r2, #240	; 0xf0
 8002640:	2128      	movs	r1, #40	; 0x28
 8002642:	2000      	movs	r0, #0
 8002644:	f002 fc2e 	bl	8004ea4 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002648:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800264c:	f7fe fd33 	bl	80010b6 <RGB_to_BRG>
 8002650:	4603      	mov	r3, r0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2329      	movs	r3, #41	; 0x29
 8002656:	22f0      	movs	r2, #240	; 0xf0
 8002658:	2129      	movs	r1, #41	; 0x29
 800265a:	2000      	movs	r0, #0
 800265c:	f002 fc22 	bl	8004ea4 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002660:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002664:	f7fe fd27 	bl	80010b6 <RGB_to_BRG>
 8002668:	4603      	mov	r3, r0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	232a      	movs	r3, #42	; 0x2a
 800266e:	22f0      	movs	r2, #240	; 0xf0
 8002670:	212a      	movs	r1, #42	; 0x2a
 8002672:	2000      	movs	r0, #0
 8002674:	f002 fc16 	bl	8004ea4 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002678:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800267c:	f7fe fd1b 	bl	80010b6 <RGB_to_BRG>
 8002680:	4603      	mov	r3, r0
 8002682:	461c      	mov	r4, r3
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fd16 	bl	80010b6 <RGB_to_BRG>
 800268a:	4603      	mov	r3, r0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	9400      	str	r4, [sp, #0]
 8002690:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <main+0x9b0>)
 8002692:	4a93      	ldr	r2, [pc, #588]	; (80028e0 <main+0x9b8>)
 8002694:	2132      	movs	r1, #50	; 0x32
 8002696:	200a      	movs	r0, #10
 8002698:	f002 fc42 	bl	8004f20 <LCD_PutStr>
		UG_DrawCircle(105, 90, 4, RGB_to_BRG(C_GREEN));
 800269c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80026a0:	f7fe fd09 	bl	80010b6 <RGB_to_BRG>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2204      	movs	r2, #4
 80026a8:	215a      	movs	r1, #90	; 0x5a
 80026aa:	2069      	movs	r0, #105	; 0x69
 80026ac:	f00d fc62 	bl	800ff74 <UG_DrawCircle>
		UG_DrawCircle(105, 90, 3, RGB_to_BRG(C_GREEN));
 80026b0:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80026b4:	f7fe fcff 	bl	80010b6 <RGB_to_BRG>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2203      	movs	r2, #3
 80026bc:	215a      	movs	r1, #90	; 0x5a
 80026be:	2069      	movs	r0, #105	; 0x69
 80026c0:	f00d fc58 	bl	800ff74 <UG_DrawCircle>
		LCD_PutStr(115, 75, "C", FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK)); //FONT_arial_49X57
 80026c4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80026c8:	f7fe fcf5 	bl	80010b6 <RGB_to_BRG>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461c      	mov	r4, r3
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe fcf0 	bl	80010b6 <RGB_to_BRG>
 80026d6:	4603      	mov	r3, r0
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	9400      	str	r4, [sp, #0]
 80026dc:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <main+0x9b0>)
 80026de:	4a81      	ldr	r2, [pc, #516]	; (80028e4 <main+0x9bc>)
 80026e0:	214b      	movs	r1, #75	; 0x4b
 80026e2:	2073      	movs	r0, #115	; 0x73
 80026e4:	f002 fc1c 	bl	8004f20 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_29X35, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026ec:	f7fe fce3 	bl	80010b6 <RGB_to_BRG>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461c      	mov	r4, r3
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe fcde 	bl	80010b6 <RGB_to_BRG>
 80026fa:	4603      	mov	r3, r0
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	9400      	str	r4, [sp, #0]
 8002700:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <main+0x9b0>)
 8002702:	4a79      	ldr	r2, [pc, #484]	; (80028e8 <main+0x9c0>)
 8002704:	218c      	movs	r1, #140	; 0x8c
 8002706:	200a      	movs	r0, #10
 8002708:	f002 fc0a 	bl	8004f20 <LCD_PutStr>
		UG_DrawCircle(105, 185, 4, RGB_to_BRG(C_GREEN));
 800270c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002710:	f7fe fcd1 	bl	80010b6 <RGB_to_BRG>
 8002714:	4603      	mov	r3, r0
 8002716:	2204      	movs	r2, #4
 8002718:	21b9      	movs	r1, #185	; 0xb9
 800271a:	2069      	movs	r0, #105	; 0x69
 800271c:	f00d fc2a 	bl	800ff74 <UG_DrawCircle>
		UG_DrawCircle(105, 185, 3, RGB_to_BRG(C_GREEN));
 8002720:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002724:	f7fe fcc7 	bl	80010b6 <RGB_to_BRG>
 8002728:	4603      	mov	r3, r0
 800272a:	2203      	movs	r2, #3
 800272c:	21b9      	movs	r1, #185	; 0xb9
 800272e:	2069      	movs	r0, #105	; 0x69
 8002730:	f00d fc20 	bl	800ff74 <UG_DrawCircle>
		LCD_PutStr(115, 170, "C", FONT_arial_29X35, RGB_to_BRG(C_GREEN), RGB_to_BRG(C_BLACK));
 8002734:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002738:	f7fe fcbd 	bl	80010b6 <RGB_to_BRG>
 800273c:	4603      	mov	r3, r0
 800273e:	461c      	mov	r4, r3
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fcb8 	bl	80010b6 <RGB_to_BRG>
 8002746:	4603      	mov	r3, r0
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9400      	str	r4, [sp, #0]
 800274c:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <main+0x9b0>)
 800274e:	4a65      	ldr	r2, [pc, #404]	; (80028e4 <main+0x9bc>)
 8002750:	21aa      	movs	r1, #170	; 0xaa
 8002752:	2073      	movs	r0, #115	; 0x73
 8002754:	f002 fbe4 	bl	8004f20 <LCD_PutStr>

		UG_DrawFrame(3, 136, 165, 225, RGB_to_BRG(C_GREEN));
 8002758:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800275c:	f7fe fcab 	bl	80010b6 <RGB_to_BRG>
 8002760:	4603      	mov	r3, r0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	23e1      	movs	r3, #225	; 0xe1
 8002766:	22a5      	movs	r2, #165	; 0xa5
 8002768:	2188      	movs	r1, #136	; 0x88
 800276a:	2003      	movs	r0, #3
 800276c:	f00d fbba 	bl	800fee4 <UG_DrawFrame>
		UG_DrawFrame(2, 135, 166, 226, RGB_to_BRG(C_GREEN));
 8002770:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002774:	f7fe fc9f 	bl	80010b6 <RGB_to_BRG>
 8002778:	4603      	mov	r3, r0
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	23e2      	movs	r3, #226	; 0xe2
 800277e:	22a6      	movs	r2, #166	; 0xa6
 8002780:	2187      	movs	r1, #135	; 0x87
 8002782:	2002      	movs	r0, #2
 8002784:	f00d fbae 	bl	800fee4 <UG_DrawFrame>


		LCD_PutStr(2, 235, "Handle type:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002788:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800278c:	f7fe fc93 	bl	80010b6 <RGB_to_BRG>
 8002790:	4603      	mov	r3, r0
 8002792:	461c      	mov	r4, r3
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe fc8e 	bl	80010b6 <RGB_to_BRG>
 800279a:	4603      	mov	r3, r0
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	9400      	str	r4, [sp, #0]
 80027a0:	4b43      	ldr	r3, [pc, #268]	; (80028b0 <main+0x988>)
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <main+0x9c4>)
 80027a4:	21eb      	movs	r1, #235	; 0xeb
 80027a6:	2002      	movs	r0, #2
 80027a8:	f002 fbba 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027b0:	f7fe fc81 	bl	80010b6 <RGB_to_BRG>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461c      	mov	r4, r3
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fc7c 	bl	80010b6 <RGB_to_BRG>
 80027be:	4603      	mov	r3, r0
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	9400      	str	r4, [sp, #0]
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <main+0x988>)
 80027c6:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <main+0x9c8>)
 80027c8:	21ff      	movs	r1, #255	; 0xff
 80027ca:	2002      	movs	r0, #2
 80027cc:	f002 fba8 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(2, 275, "PCB temp:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027d4:	f7fe fc6f 	bl	80010b6 <RGB_to_BRG>
 80027d8:	4603      	mov	r3, r0
 80027da:	461c      	mov	r4, r3
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fc6a 	bl	80010b6 <RGB_to_BRG>
 80027e2:	4603      	mov	r3, r0
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	9400      	str	r4, [sp, #0]
 80027e8:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <main+0x988>)
 80027ea:	4a42      	ldr	r2, [pc, #264]	; (80028f4 <main+0x9cc>)
 80027ec:	f240 1113 	movw	r1, #275	; 0x113
 80027f0:	2002      	movs	r0, #2
 80027f2:	f002 fb95 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(125, 275, "POWER ->", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027fa:	f7fe fc5c 	bl	80010b6 <RGB_to_BRG>
 80027fe:	4603      	mov	r3, r0
 8002800:	461c      	mov	r4, r3
 8002802:	2000      	movs	r0, #0
 8002804:	f7fe fc57 	bl	80010b6 <RGB_to_BRG>
 8002808:	4603      	mov	r3, r0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	9400      	str	r4, [sp, #0]
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <main+0x988>)
 8002810:	4a39      	ldr	r2, [pc, #228]	; (80028f8 <main+0x9d0>)
 8002812:	f240 1113 	movw	r1, #275	; 0x113
 8002816:	207d      	movs	r0, #125	; 0x7d
 8002818:	f002 fb82 	bl	8004f20 <LCD_PutStr>

		UG_DrawLine(2, 298, 240, 298, RGB_to_BRG(C_YELLOW));
 800281c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002820:	f7fe fc49 	bl	80010b6 <RGB_to_BRG>
 8002824:	4603      	mov	r3, r0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f44f 7395 	mov.w	r3, #298	; 0x12a
 800282c:	22f0      	movs	r2, #240	; 0xf0
 800282e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8002832:	2002      	movs	r0, #2
 8002834:	f00d fc84 	bl	8010140 <UG_DrawLine>
		LCD_PutStr(2, 300, "PRESETS    ", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002838:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800283c:	f7fe fc3b 	bl	80010b6 <RGB_to_BRG>
 8002840:	4603      	mov	r3, r0
 8002842:	461c      	mov	r4, r3
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe fc36 	bl	80010b6 <RGB_to_BRG>
 800284a:	4603      	mov	r3, r0
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	9400      	str	r4, [sp, #0]
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <main+0x988>)
 8002852:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <main+0x9d4>)
 8002854:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002858:	2002      	movs	r0, #2
 800285a:	f002 fb61 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(165, 300, "280", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 800285e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002862:	f7fe fc28 	bl	80010b6 <RGB_to_BRG>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
 800286a:	2000      	movs	r0, #0
 800286c:	f7fe fc23 	bl	80010b6 <RGB_to_BRG>
 8002870:	4603      	mov	r3, r0
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	9400      	str	r4, [sp, #0]
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <main+0x988>)
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <main+0x9d8>)
 800287a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800287e:	20a5      	movs	r0, #165	; 0xa5
 8002880:	f002 fb4e 	bl	8004f20 <LCD_PutStr>
		LCD_PutStr(205, 300, "330", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002884:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002888:	f7fe fc15 	bl	80010b6 <RGB_to_BRG>
 800288c:	4603      	mov	r3, r0
 800288e:	e039      	b.n	8002904 <main+0x9dc>
 8002890:	00000000 	.word	0x00000000
 8002894:	407f4000 	.word	0x407f4000
	...
 80028a4:	4072c000 	.word	0x4072c000
 80028a8:	00000000 	.word	0x00000000
 80028ac:	c072c000 	.word	0xc072c000
 80028b0:	08016e98 	.word	0x08016e98
 80028b4:	200005d8 	.word	0x200005d8
 80028b8:	20000570 	.word	0x20000570
 80028bc:	20000578 	.word	0x20000578
 80028c0:	20000580 	.word	0x20000580
 80028c4:	20000610 	.word	0x20000610
 80028c8:	20000608 	.word	0x20000608
 80028cc:	20000038 	.word	0x20000038
 80028d0:	200019f0 	.word	0x200019f0
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	080187f0 	.word	0x080187f0
 80028dc:	08016d4c 	.word	0x08016d4c
 80028e0:	08016d58 	.word	0x08016d58
 80028e4:	08016d64 	.word	0x08016d64
 80028e8:	08016d68 	.word	0x08016d68
 80028ec:	08016d74 	.word	0x08016d74
 80028f0:	08016d84 	.word	0x08016d84
 80028f4:	08016d94 	.word	0x08016d94
 80028f8:	08016da0 	.word	0x08016da0
 80028fc:	08016dac 	.word	0x08016dac
 8002900:	08016db8 	.word	0x08016db8
 8002904:	461c      	mov	r4, r3
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fbd5 	bl	80010b6 <RGB_to_BRG>
 800290c:	4603      	mov	r3, r0
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	9400      	str	r4, [sp, #0]
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <main+0xbac>)
 8002914:	4a70      	ldr	r2, [pc, #448]	; (8002ad8 <main+0xbb0>)
 8002916:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800291a:	20cd      	movs	r0, #205	; 0xcd
 800291c:	f002 fb00 	bl	8004f20 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002920:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002924:	f7fe fbc7 	bl	80010b6 <RGB_to_BRG>
 8002928:	4603      	mov	r3, r0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f240 1321 	movw	r3, #289	; 0x121
 8002930:	22e8      	movs	r2, #232	; 0xe8
 8002932:	2135      	movs	r1, #53	; 0x35
 8002934:	20d0      	movs	r0, #208	; 0xd0
 8002936:	f00d fad5 	bl	800fee4 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 800293a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800293e:	f7fe fbba 	bl	80010b6 <RGB_to_BRG>
 8002942:	4603      	mov	r3, r0
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f44f 7390 	mov.w	r3, #288	; 0x120
 800294a:	22e7      	movs	r2, #231	; 0xe7
 800294c:	2136      	movs	r1, #54	; 0x36
 800294e:	20d1      	movs	r0, #209	; 0xd1
 8002950:	f00d fac8 	bl	800fee4 <UG_DrawFrame>


		UG_FillFrame(180, 60, 200, 80, RGB_to_BRG(C_RED));
 8002954:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002958:	f7fe fbad 	bl	80010b6 <RGB_to_BRG>
 800295c:	4603      	mov	r3, r0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2350      	movs	r3, #80	; 0x50
 8002962:	22c8      	movs	r2, #200	; 0xc8
 8002964:	213c      	movs	r1, #60	; 0x3c
 8002966:	20b4      	movs	r0, #180	; 0xb4
 8002968:	f00d fa4a 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 80, 200, 100, RGB_to_BRG(C_GREEN));
 800296c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002970:	f7fe fba1 	bl	80010b6 <RGB_to_BRG>
 8002974:	4603      	mov	r3, r0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2364      	movs	r3, #100	; 0x64
 800297a:	22c8      	movs	r2, #200	; 0xc8
 800297c:	2150      	movs	r1, #80	; 0x50
 800297e:	20b4      	movs	r0, #180	; 0xb4
 8002980:	f00d fa3e 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 100, 200, 120, RGB_to_BRG(C_BLUE));
 8002984:	201f      	movs	r0, #31
 8002986:	f7fe fb96 	bl	80010b6 <RGB_to_BRG>
 800298a:	4603      	mov	r3, r0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2378      	movs	r3, #120	; 0x78
 8002990:	22c8      	movs	r2, #200	; 0xc8
 8002992:	2164      	movs	r1, #100	; 0x64
 8002994:	20b4      	movs	r0, #180	; 0xb4
 8002996:	f00d fa33 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 120, 200, 140, RGB_to_BRG(C_ORANGE));
 800299a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299e:	f7fe fb8a 	bl	80010b6 <RGB_to_BRG>
 80029a2:	4603      	mov	r3, r0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	238c      	movs	r3, #140	; 0x8c
 80029a8:	22c8      	movs	r2, #200	; 0xc8
 80029aa:	2178      	movs	r1, #120	; 0x78
 80029ac:	20b4      	movs	r0, #180	; 0xb4
 80029ae:	f00d fa27 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 140, 200, 160, RGB_to_BRG(C_WHITE));
 80029b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029b6:	f7fe fb7e 	bl	80010b6 <RGB_to_BRG>
 80029ba:	4603      	mov	r3, r0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	23a0      	movs	r3, #160	; 0xa0
 80029c0:	22c8      	movs	r2, #200	; 0xc8
 80029c2:	218c      	movs	r1, #140	; 0x8c
 80029c4:	20b4      	movs	r0, #180	; 0xb4
 80029c6:	f00d fa1b 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 160, 200, 180, RGB_to_BRG(C_BLACK));
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe fb73 	bl	80010b6 <RGB_to_BRG>
 80029d0:	4603      	mov	r3, r0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	23b4      	movs	r3, #180	; 0xb4
 80029d6:	22c8      	movs	r2, #200	; 0xc8
 80029d8:	21a0      	movs	r1, #160	; 0xa0
 80029da:	20b4      	movs	r0, #180	; 0xb4
 80029dc:	f00d fa10 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 180, 200, 200, RGB_to_BRG(C_YELLOW));
 80029e0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80029e4:	f7fe fb67 	bl	80010b6 <RGB_to_BRG>
 80029e8:	4603      	mov	r3, r0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	23c8      	movs	r3, #200	; 0xc8
 80029ee:	22c8      	movs	r2, #200	; 0xc8
 80029f0:	21b4      	movs	r1, #180	; 0xb4
 80029f2:	20b4      	movs	r0, #180	; 0xb4
 80029f4:	f00d fa04 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 200, 200, 220, RGB_to_BRG(C_DARK_GREEN));
 80029f8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80029fc:	f7fe fb5b 	bl	80010b6 <RGB_to_BRG>
 8002a00:	4603      	mov	r3, r0
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	23dc      	movs	r3, #220	; 0xdc
 8002a06:	22c8      	movs	r2, #200	; 0xc8
 8002a08:	21c8      	movs	r1, #200	; 0xc8
 8002a0a:	20b4      	movs	r0, #180	; 0xb4
 8002a0c:	f00d f9f8 	bl	800fe00 <UG_FillFrame>
		UG_FillFrame(180, 220, 200, 240, RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002a10:	f248 607e 	movw	r0, #34430	; 0x867e
 8002a14:	f7fe fb4f 	bl	80010b6 <RGB_to_BRG>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	23f0      	movs	r3, #240	; 0xf0
 8002a1e:	22c8      	movs	r2, #200	; 0xc8
 8002a20:	21dc      	movs	r1, #220	; 0xdc
 8002a22:	20b4      	movs	r0, #180	; 0xb4
 8002a24:	f00d f9ec 	bl	800fe00 <UG_FillFrame>

  		/* Start-up beep */
  		beep();
 8002a28:	f7fe ffba 	bl	80019a0 <beep>
  		HAL_Delay(200);
 8002a2c:	20c8      	movs	r0, #200	; 0xc8
 8002a2e:	f002 fb91 	bl	8005154 <HAL_Delay>
  		beep();
 8002a32:	f7fe ffb5 	bl	80019a0 <beep>
  		HAL_Delay(200);
 8002a36:	20c8      	movs	r0, #200	; 0xc8
 8002a38:	f002 fb8c 	bl	8005154 <HAL_Delay>
  		beep();
 8002a3c:	f7fe ffb0 	bl	80019a0 <beep>

  		while (1){

  			check_emergency_shutdown();
 8002a40:	f7fe ffbe 	bl	80019c0 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 8002a44:	f002 fb7a 	bl	800513c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <main+0xbb4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <main+0xbb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d30e      	bcc.n	8002a76 <main+0xb4e>
  				get_stand_status();
 8002a58:	f7ff f88a 	bl	8001b70 <get_stand_status>
  				get_bus_voltage();
 8002a5c:	f7fe fb7c 	bl	8001158 <get_bus_voltage>
  				get_handle_type();
 8002a60:	f7ff f912 	bl	8001c88 <get_handle_type>
  				get_enc_button_status();
 8002a64:	f7ff f81c 	bl	8001aa0 <get_enc_button_status>
  				get_set_temperature();
 8002a68:	f7fe ff62 	bl	8001930 <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 8002a6c:	f002 fb66 	bl	800513c <HAL_GetTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <main+0xbb4>)
 8002a74:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8002a76:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <main+0xbbc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d842      	bhi.n	8002b04 <main+0xbdc>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <main+0xb5c>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002ab7 	.word	0x08002ab7
 8002a8c:	08002ac5 	.word	0x08002ac5
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	08002af5 	.word	0x08002af5
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 8002a98:	4913      	ldr	r1, [pc, #76]	; (8002ae8 <main+0xbc0>)
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002aa6:	e02d      	b.n	8002b04 <main+0xbdc>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <main+0xbc4>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <main+0xbc0>)
 8002ab0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002ab4:	e026      	b.n	8002b04 <main+0xbdc>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <main+0xbc8>)
 8002ab8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002abc:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <main+0xbc0>)
 8002abe:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002ac2:	e01f      	b.n	8002b04 <main+0xbdc>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 8002ac4:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <main+0xbc0>)
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002ad2:	e017      	b.n	8002b04 <main+0xbdc>
 8002ad4:	08016e98 	.word	0x08016e98
 8002ad8:	08016dbc 	.word	0x08016dbc
 8002adc:	20000568 	.word	0x20000568
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	2000001c 	.word	0x2000001c
 8002ae8:	20000610 	.word	0x20000610
 8002aec:	20000030 	.word	0x20000030
 8002af0:	200005d8 	.word	0x200005d8
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8002af4:	4982      	ldr	r1, [pc, #520]	; (8002d00 <main+0xdd8>)
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002b02:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 8002b04:	f002 fb1a 	bl	800513c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <main+0xddc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <main+0xde0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d34b      	bcc.n	8002bb0 <main+0xc88>
					thermocouple_measurement_requested = 1;
 8002b18:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <main+0xde4>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]

  				//set_heater_duty(0);
  				//HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
  				get_thermocouple_temperature();
 8002b1e:	f7fe fb4b 	bl	80011b8 <get_thermocouple_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 8002b22:	487b      	ldr	r0, [pc, #492]	; (8002d10 <main+0xde8>)
 8002b24:	f000 fe6c 	bl	8003800 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <main+0xdec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fd33 	bl	8000598 <__aeabi_f2d>
 8002b32:	a36d      	add	r3, pc, #436	; (adr r3, 8002ce8 <main+0xdc0>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fd86 	bl	8000648 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4614      	mov	r4, r2
 8002b42:	461d      	mov	r5, r3
 8002b44:	4b74      	ldr	r3, [pc, #464]	; (8002d18 <main+0xdf0>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd25 	bl	8000598 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fd fea1 	bl	800089c <__aeabi_ddiv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <main+0xdf4>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fd6e 	bl	8000648 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	496b      	ldr	r1, [pc, #428]	; (8002d20 <main+0xdf8>)
 8002b72:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <main+0xdf8>)
 8002b78:	ed93 7b00 	vldr	d7, [r3]
 8002b7c:	ed9f 2b5c 	vldr	d2, [pc, #368]	; 8002cf0 <main+0xdc8>
 8002b80:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002cf8 <main+0xdd0>
 8002b84:	eeb0 0a47 	vmov.f32	s0, s14
 8002b88:	eef0 0a67 	vmov.f32	s1, s15
 8002b8c:	f7fe fa34 	bl	8000ff8 <clamp>
 8002b90:	ec53 2b10 	vmov	r2, r3, d0
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fe f82e 	bl	8000bf8 <__aeabi_d2uiz>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f925 	bl	8001df0 <set_heater_duty>
  				previous_PID_update = HAL_GetTick();
 8002ba6:	f002 fac9 	bl	800513c <HAL_GetTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <main+0xddc>)
 8002bae:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8002bb0:	f002 fac4 	bl	800513c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	; (8002d24 <main+0xdfc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	1ad2      	subs	r2, r2, r3
 8002bbc:	4b5a      	ldr	r3, [pc, #360]	; (8002d28 <main+0xe00>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d368      	bcc.n	8002c96 <main+0xd6e>
  				memset(&buffer, '\0', sizeof(buffer));
 8002bc4:	2228      	movs	r2, #40	; 0x28
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4858      	ldr	r0, [pc, #352]	; (8002d2c <main+0xe04>)
 8002bca:	f011 fe00 	bl	80147ce <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002bce:	4b52      	ldr	r3, [pc, #328]	; (8002d18 <main+0xdf0>)
 8002bd0:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <main+0xdf0>)
 8002bd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <main+0xdf4>)
 8002bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <main+0xe08>)
 8002be6:	f7fd fe59 	bl	800089c <__aeabi_ddiv>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002bf2:	4847      	ldr	r0, [pc, #284]	; (8002d10 <main+0xde8>)
 8002bf4:	f001 f93e 	bl	8003e74 <PID_GetPpart>
 8002bf8:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <main+0xe08>)
 8002c02:	f7fd fe4b 	bl	800089c <__aeabi_ddiv>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002c0e:	4840      	ldr	r0, [pc, #256]	; (8002d10 <main+0xde8>)
 8002c10:	f001 f942 	bl	8003e98 <PID_GetIpart>
 8002c14:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	4b44      	ldr	r3, [pc, #272]	; (8002d30 <main+0xe08>)
 8002c1e:	f7fd fe3d 	bl	800089c <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002c2a:	4839      	ldr	r0, [pc, #228]	; (8002d10 <main+0xde8>)
 8002c2c:	f001 f946 	bl	8003ebc <PID_GetDpart>
 8002c30:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <main+0xe08>)
 8002c3a:	f7fd fe2f 	bl	800089c <__aeabi_ddiv>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4690      	mov	r8, r2
 8002c44:	4699      	mov	r9, r3
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <main+0xdf0>)
 8002c48:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <main+0xdf0>)
 8002c4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c52:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002c56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002c5a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002c5e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002c62:	ed8d ab04 	vstr	d10, [sp, #16]
 8002c66:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002c6a:	e9cd 4500 	strd	r4, r5, [sp]
 8002c6e:	4652      	mov	r2, sl
 8002c70:	465b      	mov	r3, fp
 8002c72:	4930      	ldr	r1, [pc, #192]	; (8002d34 <main+0xe0c>)
 8002c74:	482d      	ldr	r0, [pc, #180]	; (8002d2c <main+0xe04>)
 8002c76:	f011 fd47 	bl	8014708 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8002c7a:	482c      	ldr	r0, [pc, #176]	; (8002d2c <main+0xe04>)
 8002c7c:	f7fd fb20 	bl	80002c0 <strlen>
 8002c80:	4603      	mov	r3, r0
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	4829      	ldr	r0, [pc, #164]	; (8002d2c <main+0xe04>)
 8002c88:	f010 fbca 	bl	8013420 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8002c8c:	f002 fa56 	bl	800513c <HAL_GetTick>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <main+0xdfc>)
 8002c94:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_check_for_valid_heater_update >= interval_check_for_valid_heater){
 8002c96:	f002 fa51 	bl	800513c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <main+0xe10>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <main+0xe14>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d30b      	bcc.n	8002cc2 <main+0xd9a>
  					set_heater_duty(PID_MAX_OUTPUT*0.8);
 8002caa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002cae:	f7ff f89f 	bl	8001df0 <set_heater_duty>
  					current_measurement_requested = 1;
 8002cb2:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <main+0xe18>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
 8002cb8:	f002 fa40 	bl	800513c <HAL_GetTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <main+0xe10>)
 8002cc0:	6013      	str	r3, [r2, #0]
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8002cc2:	f002 fa3b 	bl	800513c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <main+0xe1c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	1ad2      	subs	r2, r2, r3
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <main+0xe20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	f4ff aeb4 	bcc.w	8002a40 <main+0xb18>
  				update_display();
 8002cd8:	f7fe fbd6 	bl	8001488 <update_display>
  				previous_millis_display = HAL_GetTick();
 8002cdc:	f002 fa2e 	bl	800513c <HAL_GetTick>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <main+0xe1c>)
 8002ce4:	6013      	str	r3, [r2, #0]
  			check_emergency_shutdown();
 8002ce6:	e6ab      	b.n	8002a40 <main+0xb18>
 8002ce8:	eb851eb8 	.word	0xeb851eb8
 8002cec:	3fbeb851 	.word	0x3fbeb851
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	407f4000 	.word	0x407f4000
	...
 8002d00:	20000610 	.word	0x20000610
 8002d04:	20000554 	.word	0x20000554
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	20000621 	.word	0x20000621
 8002d10:	200019f0 	.word	0x200019f0
 8002d14:	200005b0 	.word	0x200005b0
 8002d18:	20000030 	.word	0x20000030
 8002d1c:	20000608 	.word	0x20000608
 8002d20:	20000618 	.word	0x20000618
 8002d24:	20000550 	.word	0x20000550
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	20000588 	.word	0x20000588
 8002d30:	40240000 	.word	0x40240000
 8002d34:	08016dc0 	.word	0x08016dc0
 8002d38:	20000564 	.word	0x20000564
 8002d3c:	20000014 	.word	0x20000014
 8002d40:	20000620 	.word	0x20000620
 8002d44:	2000054c 	.word	0x2000054c
 8002d48:	20000004 	.word	0x20000004

08002d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b094      	sub	sp, #80	; 0x50
 8002d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d52:	f107 0318 	add.w	r3, r7, #24
 8002d56:	2238      	movs	r2, #56	; 0x38
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f011 fd37 	bl	80147ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f007 fa98 	bl	800a2a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002d74:	2322      	movs	r3, #34	; 0x22
 8002d76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002d82:	2301      	movs	r3, #1
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d86:	2302      	movs	r3, #2
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002d92:	2355      	movs	r3, #85	; 0x55
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da2:	f107 0318 	add.w	r3, r7, #24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f007 fb30 	bl	800a40c <HAL_RCC_OscConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002db2:	f000 fc0b 	bl	80035cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db6:	230f      	movs	r3, #15
 8002db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f007 fe2e 	bl	800aa30 <HAL_RCC_ClockConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002dda:	f000 fbf7 	bl	80035cc <Error_Handler>
  }
}
 8002dde:	bf00      	nop
 8002de0:	3750      	adds	r7, #80	; 0x50
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f011 fce4 	bl	80147ce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e16:	4b35      	ldr	r3, [pc, #212]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002e22:	4b32      	ldr	r3, [pc, #200]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e30:	2204      	movs	r2, #4
 8002e32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e42:	2202      	movs	r2, #2
 8002e44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e46:	4b29      	ldr	r3, [pc, #164]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e4e:	4b27      	ldr	r3, [pc, #156]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e70:	481e      	ldr	r0, [pc, #120]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e72:	f002 fbf7 	bl	8005664 <HAL_ADC_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002e7c:	f000 fba6 	bl	80035cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002e80:	2300      	movs	r3, #0
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4818      	ldr	r0, [pc, #96]	; (8002eec <MX_ADC1_Init+0x104>)
 8002e8c:	f004 f93c 	bl	8007108 <HAL_ADCEx_MultiModeConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e96:	f000 fb99 	bl	80035cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <MX_ADC1_Init+0x108>)
 8002e9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e9e:	2306      	movs	r3, #6
 8002ea0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002ea2:	2304      	movs	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ea6:	237f      	movs	r3, #127	; 0x7f
 8002ea8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480d      	ldr	r0, [pc, #52]	; (8002eec <MX_ADC1_Init+0x104>)
 8002eb8:	f003 f97e 	bl	80061b8 <HAL_ADC_ConfigChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002ec2:	f000 fb83 	bl	80035cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_ADC1_Init+0x10c>)
 8002ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002eca:	230c      	movs	r3, #12
 8002ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4806      	ldr	r0, [pc, #24]	; (8002eec <MX_ADC1_Init+0x104>)
 8002ed4:	f003 f970 	bl	80061b8 <HAL_ADC_ConfigChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002ede:	f000 fb75 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	3730      	adds	r7, #48	; 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20001600 	.word	0x20001600
 8002ef0:	0c900008 	.word	0x0c900008
 8002ef4:	10c00010 	.word	0x10c00010

08002ef8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002efe:	463b      	mov	r3, r7
 8002f00:	2220      	movs	r2, #32
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f011 fc62 	bl	80147ce <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f0c:	4a2b      	ldr	r2, [pc, #172]	; (8002fbc <MX_ADC2_Init+0xc4>)
 8002f0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f16:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f32:	2204      	movs	r2, #4
 8002f34:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f72:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002f74:	f002 fb76 	bl	8005664 <HAL_ADC_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002f7e:	f000 fb25 	bl	80035cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f82:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_ADC2_Init+0xc8>)
 8002f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f86:	2306      	movs	r3, #6
 8002f88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f8e:	237f      	movs	r3, #127	; 0x7f
 8002f90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f92:	2304      	movs	r3, #4
 8002f94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <MX_ADC2_Init+0xc0>)
 8002fa0:	f003 f90a 	bl	80061b8 <HAL_ADC_ConfigChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002faa:	f000 fb0f 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000166c 	.word	0x2000166c
 8002fbc:	50000100 	.word	0x50000100
 8002fc0:	2a000400 	.word	0x2a000400

08002fc4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <MX_CRC_Init+0x40>)
 8002fcc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002fec:	4804      	ldr	r0, [pc, #16]	; (8003000 <MX_CRC_Init+0x3c>)
 8002fee:	f004 fa3f 	bl	8007470 <HAL_CRC_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002ff8:	f000 fae8 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20001738 	.word	0x20001738
 8003004:	40023000 	.word	0x40023000

08003008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <MX_I2C1_Init+0x74>)
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <MX_I2C1_Init+0x78>)
 8003010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <MX_I2C1_Init+0x74>)
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <MX_I2C1_Init+0x7c>)
 8003016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <MX_I2C1_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800301e:	4b17      	ldr	r3, [pc, #92]	; (800307c <MX_I2C1_Init+0x74>)
 8003020:	2201      	movs	r2, #1
 8003022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_I2C1_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <MX_I2C1_Init+0x74>)
 800302c:	2200      	movs	r2, #0
 800302e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <MX_I2C1_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <MX_I2C1_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800303c:	4b0f      	ldr	r3, [pc, #60]	; (800307c <MX_I2C1_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003042:	480e      	ldr	r0, [pc, #56]	; (800307c <MX_I2C1_Init+0x74>)
 8003044:	f005 fac8 	bl	80085d8 <HAL_I2C_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800304e:	f000 fabd 	bl	80035cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003052:	2100      	movs	r1, #0
 8003054:	4809      	ldr	r0, [pc, #36]	; (800307c <MX_I2C1_Init+0x74>)
 8003056:	f005 fb5a 	bl	800870e <HAL_I2CEx_ConfigAnalogFilter>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003060:	f000 fab4 	bl	80035cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003064:	2100      	movs	r1, #0
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_I2C1_Init+0x74>)
 8003068:	f005 fb9c 	bl	80087a4 <HAL_I2CEx_ConfigDigitalFilter>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003072:	f000 faab 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000175c 	.word	0x2000175c
 8003080:	40005400 	.word	0x40005400
 8003084:	30a0a7fb 	.word	0x30a0a7fb

08003088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800308c:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <MX_SPI2_Init+0x74>)
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <MX_SPI2_Init+0x78>)
 8003090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <MX_SPI2_Init+0x74>)
 8003094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <MX_SPI2_Init+0x74>)
 800309c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <MX_SPI2_Init+0x74>)
 80030a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80030a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <MX_SPI2_Init+0x74>)
 80030ac:	2202      	movs	r2, #2
 80030ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <MX_SPI2_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_SPI2_Init+0x74>)
 80030b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <MX_SPI2_Init+0x74>)
 80030c0:	2208      	movs	r2, #8
 80030c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <MX_SPI2_Init+0x74>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_SPI2_Init+0x74>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <MX_SPI2_Init+0x74>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_SPI2_Init+0x74>)
 80030d8:	2207      	movs	r2, #7
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <MX_SPI2_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_SPI2_Init+0x74>)
 80030e4:	2208      	movs	r2, #8
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <MX_SPI2_Init+0x74>)
 80030ea:	f008 f875 	bl	800b1d8 <HAL_SPI_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80030f4:	f000 fa6a 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200017b0 	.word	0x200017b0
 8003100:	40003800 	.word	0x40003800

08003104 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b098      	sub	sp, #96	; 0x60
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	615a      	str	r2, [r3, #20]
 8003128:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2234      	movs	r2, #52	; 0x34
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f011 fb4c 	bl	80147ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <MX_TIM1_Init+0x120>)
 8003138:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <MX_TIM1_Init+0x124>)
 800313a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17-6;
 800313c:	4b39      	ldr	r3, [pc, #228]	; (8003224 <MX_TIM1_Init+0x120>)
 800313e:	220b      	movs	r2, #11
 8003140:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <MX_TIM1_Init+0x120>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <MX_TIM1_Init+0x120>)
 800314a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800314e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003150:	4b34      	ldr	r3, [pc, #208]	; (8003224 <MX_TIM1_Init+0x120>)
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003156:	4b33      	ldr	r3, [pc, #204]	; (8003224 <MX_TIM1_Init+0x120>)
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <MX_TIM1_Init+0x120>)
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003162:	4830      	ldr	r0, [pc, #192]	; (8003224 <MX_TIM1_Init+0x120>)
 8003164:	f008 fe3d 	bl	800bde2 <HAL_TIM_PWM_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800316e:	f000 fa2d 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800317e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003182:	4619      	mov	r1, r3
 8003184:	4827      	ldr	r0, [pc, #156]	; (8003224 <MX_TIM1_Init+0x120>)
 8003186:	f00a f861 	bl	800d24c <HAL_TIMEx_MasterConfigSynchronization>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003190:	f000 fa1c 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003194:	2360      	movs	r3, #96	; 0x60
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319c:	2300      	movs	r3, #0
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031b4:	2208      	movs	r2, #8
 80031b6:	4619      	mov	r1, r3
 80031b8:	481a      	ldr	r0, [pc, #104]	; (8003224 <MX_TIM1_Init+0x120>)
 80031ba:	f009 fab3 	bl	800c724 <HAL_TIM_PWM_ConfigChannel>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80031c4:	f000 fa02 	bl	80035cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80031f8:	2300      	movs	r3, #0
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4807      	ldr	r0, [pc, #28]	; (8003224 <MX_TIM1_Init+0x120>)
 8003206:	f00a f8a3 	bl	800d350 <HAL_TIMEx_ConfigBreakDeadTime>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003210:	f000 f9dc 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <MX_TIM1_Init+0x120>)
 8003216:	f001 f95f 	bl	80044d8 <HAL_TIM_MspPostInit>

}
 800321a:	bf00      	nop
 800321c:	3760      	adds	r7, #96	; 0x60
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20001874 	.word	0x20001874
 8003228:	40012c00 	.word	0x40012c00

0800322c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	; 0x30
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f011 fac7 	bl	80147ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003240:	463b      	mov	r3, r7
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <MX_TIM2_Init+0xa4>)
 800324c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003250:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003252:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <MX_TIM2_Init+0xa4>)
 8003254:	2200      	movs	r2, #0
 8003256:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <MX_TIM2_Init+0xa4>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <MX_TIM2_Init+0xa4>)
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_TIM2_Init+0xa4>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_TIM2_Init+0xa4>)
 800326e:	2200      	movs	r2, #0
 8003270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003272:	2303      	movs	r3, #3
 8003274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800327a:	2301      	movs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003282:	230a      	movs	r3, #10
 8003284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800328a:	2301      	movs	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800328e:	2300      	movs	r3, #0
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003292:	230a      	movs	r3, #10
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4619      	mov	r1, r3
 800329c:	480c      	ldr	r0, [pc, #48]	; (80032d0 <MX_TIM2_Init+0xa4>)
 800329e:	f008 ff9d 	bl	800c1dc <HAL_TIM_Encoder_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80032a8:	f000 f990 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032b4:	463b      	mov	r3, r7
 80032b6:	4619      	mov	r1, r3
 80032b8:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_TIM2_Init+0xa4>)
 80032ba:	f009 ffc7 	bl	800d24c <HAL_TIMEx_MasterConfigSynchronization>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80032c4:	f000 f982 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032c8:	bf00      	nop
 80032ca:	3730      	adds	r7, #48	; 0x30
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200018c0 	.word	0x200018c0

080032d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032da:	f107 031c 	add.w	r3, r7, #28
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032e6:	463b      	mov	r3, r7
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
 80032f4:	615a      	str	r2, [r3, #20]
 80032f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <MX_TIM4_Init+0xac>)
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <MX_TIM4_Init+0xb0>)
 80032fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8500-1;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <MX_TIM4_Init+0xac>)
 8003300:	f242 1233 	movw	r2, #8499	; 0x2133
 8003304:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <MX_TIM4_Init+0xac>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <MX_TIM4_Init+0xac>)
 800330e:	220a      	movs	r2, #10
 8003310:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <MX_TIM4_Init+0xac>)
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <MX_TIM4_Init+0xac>)
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800331e:	4818      	ldr	r0, [pc, #96]	; (8003380 <MX_TIM4_Init+0xac>)
 8003320:	f008 fd5f 	bl	800bde2 <HAL_TIM_PWM_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800332a:	f000 f94f 	bl	80035cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003336:	f107 031c 	add.w	r3, r7, #28
 800333a:	4619      	mov	r1, r3
 800333c:	4810      	ldr	r0, [pc, #64]	; (8003380 <MX_TIM4_Init+0xac>)
 800333e:	f009 ff85 	bl	800d24c <HAL_TIMEx_MasterConfigSynchronization>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003348:	f000 f940 	bl	80035cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800334c:	2360      	movs	r3, #96	; 0x60
 800334e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800335c:	463b      	mov	r3, r7
 800335e:	2204      	movs	r2, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4807      	ldr	r0, [pc, #28]	; (8003380 <MX_TIM4_Init+0xac>)
 8003364:	f009 f9de 	bl	800c724 <HAL_TIM_PWM_ConfigChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800336e:	f000 f92d 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003372:	4803      	ldr	r0, [pc, #12]	; (8003380 <MX_TIM4_Init+0xac>)
 8003374:	f001 f8b0 	bl	80044d8 <HAL_TIM_MspPostInit>

}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	; 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	2000190c 	.word	0x2000190c
 8003384:	40000800 	.word	0x40000800

08003388 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <MX_TIM16_Init+0x48>)
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <MX_TIM16_Init+0x4c>)
 8003390:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700;
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <MX_TIM16_Init+0x48>)
 8003394:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8003398:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <MX_TIM16_Init+0x48>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <MX_TIM16_Init+0x48>)
 80033a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <MX_TIM16_Init+0x48>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <MX_TIM16_Init+0x48>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <MX_TIM16_Init+0x48>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80033ba:	4805      	ldr	r0, [pc, #20]	; (80033d0 <MX_TIM16_Init+0x48>)
 80033bc:	f008 fc20 	bl	800bc00 <HAL_TIM_Base_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80033c6:	f000 f901 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20001958 	.word	0x20001958
 80033d4:	40014400 	.word	0x40014400

080033d8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <MX_TIM17_Init+0x58>)
 80033de:	4a15      	ldr	r2, [pc, #84]	; (8003434 <MX_TIM17_Init+0x5c>)
 80033e0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <MX_TIM17_Init+0x58>)
 80033e4:	f244 2267 	movw	r2, #16999	; 0x4267
 80033e8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <MX_TIM17_Init+0x58>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <MX_TIM17_Init+0x58>)
 80033f2:	2263      	movs	r2, #99	; 0x63
 80033f4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <MX_TIM17_Init+0x58>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_TIM17_Init+0x58>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_TIM17_Init+0x58>)
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003408:	4809      	ldr	r0, [pc, #36]	; (8003430 <MX_TIM17_Init+0x58>)
 800340a:	f008 fbf9 	bl	800bc00 <HAL_TIM_Base_Init>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003414:	f000 f8da 	bl	80035cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003418:	2108      	movs	r1, #8
 800341a:	4805      	ldr	r0, [pc, #20]	; (8003430 <MX_TIM17_Init+0x58>)
 800341c:	f008 fe84 	bl	800c128 <HAL_TIM_OnePulse_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003426:	f000 f8d1 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200019a4 	.word	0x200019a4
 8003434:	40014800 	.word	0x40014800

08003438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <MX_DMA_Init+0x60>)
 8003440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <MX_DMA_Init+0x60>)
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6493      	str	r3, [r2, #72]	; 0x48
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <MX_DMA_Init+0x60>)
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <MX_DMA_Init+0x60>)
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <MX_DMA_Init+0x60>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6493      	str	r3, [r2, #72]	; 0x48
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <MX_DMA_Init+0x60>)
 8003464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	200b      	movs	r0, #11
 8003474:	f003 ffc7 	bl	8007406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003478:	200b      	movs	r0, #11
 800347a:	f003 ffde 	bl	800743a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	200c      	movs	r0, #12
 8003484:	f003 ffbf 	bl	8007406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003488:	200c      	movs	r0, #12
 800348a:	f003 ffd6 	bl	800743a <HAL_NVIC_EnableIRQ>

}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000

0800349c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	4a42      	ldr	r2, [pc, #264]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	4a3c      	ldr	r2, [pc, #240]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034d0:	f043 0320 	orr.w	r3, r3, #32
 80034d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d6:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e6:	4a36      	ldr	r2, [pc, #216]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <MX_GPIO_Init+0x124>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	4a30      	ldr	r2, [pc, #192]	; (80035c0 <MX_GPIO_Init+0x124>)
 8003500:	f043 0302 	orr.w	r3, r3, #2
 8003504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003506:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <MX_GPIO_Init+0x124>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003512:	2200      	movs	r2, #0
 8003514:	2102      	movs	r1, #2
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	f005 f845 	bl	80085a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800351e:	2200      	movs	r2, #0
 8003520:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003524:	4827      	ldr	r0, [pc, #156]	; (80035c4 <MX_GPIO_Init+0x128>)
 8003526:	f005 f83f 	bl	80085a8 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 800352a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800352e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	4619      	mov	r1, r3
 800353e:	4822      	ldr	r0, [pc, #136]	; (80035c8 <MX_GPIO_Init+0x12c>)
 8003540:	f004 fe98 	bl	8008274 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003544:	2302      	movs	r3, #2
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355e:	f004 fe89 	bl	8008274 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin|SW_2_Pin;
 8003562:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8003566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4619      	mov	r1, r3
 8003576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800357a:	f004 fe7b 	bl	8008274 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800357e:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003582:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003584:	2301      	movs	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	480b      	ldr	r0, [pc, #44]	; (80035c4 <MX_GPIO_Init+0x128>)
 8003598:	f004 fe6c 	bl	8008274 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 800359c:	f44f 7390 	mov.w	r3, #288	; 0x120
 80035a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <MX_GPIO_Init+0x128>)
 80035b2:	f004 fe5f 	bl	8008274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035b6:	bf00      	nop
 80035b8:	3728      	adds	r7, #40	; 0x28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	48000400 	.word	0x48000400
 80035c8:	48000800 	.word	0x48000800

080035cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035d0:	b672      	cpsid	i
}
 80035d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035d4:	e7fe      	b.n	80035d4 <Error_Handler+0x8>

080035d6 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e008      	b.n	8003610 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	2200      	movs	r2, #0
 8003608:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	d4e9      	bmi.n	80035fe <Moving_Average_Init+0x28>
	}
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	441a      	add	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800369a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	d507      	bpl.n	80036b4 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 80036b2:	e003      	b.n	80036bc <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036d4:	ee16 0a90 	vmov	r0, s13
 80036d8:	f7fc ff5e 	bl	8000598 <__aeabi_f2d>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80036e4:	eeb0 0a47 	vmov.f32	s0, s14
 80036e8:	eef0 0a67 	vmov.f32	s1, s15
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003722:	f7fd fa21 	bl	8000b68 <__aeabi_dcmpgt>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003738:	e011      	b.n	800375e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003746:	f7fd f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d100      	bne.n	8003752 <PID_Init+0x60>
}
 8003750:	e005      	b.n	800375e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6278      	str	r0, [r7, #36]	; 0x24
 8003770:	6239      	str	r1, [r7, #32]
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	ed87 0b04 	vstr	d0, [r7, #16]
 800377a:	ed87 1b02 	vstr	d1, [r7, #8]
 800377e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800379a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80037f0 <PID+0x88>
 800379e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80037f8 <PID+0x90>
 80037a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037a4:	f000 f991 	bl	8003aca <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	2264      	movs	r2, #100	; 0x64
 80037ac:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80037ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037b2:	4619      	mov	r1, r3
 80037b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037b6:	f000 fad9 	bl	8003d6c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80037ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037be:	4619      	mov	r1, r3
 80037c0:	ed97 2b00 	vldr	d2, [r7]
 80037c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80037c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80037cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ce:	f000 fa25 	bl	8003c1c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80037d2:	f001 fcb3 	bl	800513c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	605a      	str	r2, [r3, #4]

}
 80037e2:	bf00      	nop
 80037e4:	3728      	adds	r7, #40	; 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w
 80037f0:	00000000 	.word	0x00000000
 80037f4:	406fe000 	.word	0x406fe000
	...

08003800 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b08c      	sub	sp, #48	; 0x30
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <PID_Compute+0x16>
	{
		return _FALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	e136      	b.n	8003a84 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003816:	f001 fc91 	bl	800513c <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d204      	bcs.n	800383a <PID_Compute+0x3a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8124 	beq.w	8003a82 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800384e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003852:	f7fc fd41 	bl	80002d8 <__aeabi_dsub>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003864:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003868:	f7fc fd36 	bl	80002d8 <__aeabi_dsub>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003880:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003884:	f7fc fee0 	bl	8000648 <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4650      	mov	r0, sl
 800388e:	4659      	mov	r1, fp
 8003890:	f7fc fd24 	bl	80002dc <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80038aa:	f7fd f95d 	bl	8000b68 <__aeabi_dcmpgt>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d006      	beq.n	80038c2 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80038c0:	e010      	b.n	80038e4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80038ce:	f7fd f92d 	bl	8000b2c <__aeabi_dcmplt>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d114      	bne.n	8003922 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003908:	f7fc fe9e 	bl	8000648 <__aeabi_dmul>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4650      	mov	r0, sl
 8003912:	4659      	mov	r1, fp
 8003914:	f7fc fce0 	bl	80002d8 <__aeabi_dsub>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800392e:	f7fd f91b 	bl	8000b68 <__aeabi_dcmpgt>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003944:	e010      	b.n	8003968 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003952:	f7fd f8eb 	bl	8000b2c <__aeabi_dcmplt>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800396e:	4690      	mov	r8, r2
 8003970:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003978:	4640      	mov	r0, r8
 800397a:	4649      	mov	r1, r9
 800397c:	f7fc fe64 	bl	8000648 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d017      	beq.n	80039c2 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003998:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800399c:	f7fc fe54 	bl	8000648 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80039ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80039b2:	f7fc fe49 	bl	8000648 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80039c0:	e005      	b.n	80039ce <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039de:	f7fc fe33 	bl	8000648 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	f7fc fc75 	bl	80002d8 <__aeabi_dsub>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f6:	f7fc fc71 	bl	80002dc <__adddf3>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003a08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a0c:	f7fd f8ac 	bl	8000b68 <__aeabi_dcmpgt>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003a1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003a20:	e00e      	b.n	8003a40 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003a28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a2c:	f7fd f87e 	bl	8000b2c <__aeabi_dcmplt>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003a3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003a46:	4614      	mov	r4, r2
 8003a48:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a50:	4620      	mov	r0, r4
 8003a52:	4629      	mov	r1, r5
 8003a54:	f7fc fdf8 	bl	8000648 <__aeabi_dmul>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003a66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a74:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8003a82:	2300      	movs	r3, #0
	}

}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a8e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <PID_SetMode+0x2e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fe1b 	bl	80036f2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	705a      	strb	r2, [r3, #1]

}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b086      	sub	sp, #24
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6178      	str	r0, [r7, #20]
 8003ad2:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ad6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ae2:	f7fd f837 	bl	8000b54 <__aeabi_dcmpge>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d158      	bne.n	8003b9e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8003aec:	6979      	ldr	r1, [r7, #20]
 8003aee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003af2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003afc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d04b      	beq.n	8003ba0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b16:	f7fd f827 	bl	8000b68 <__aeabi_dcmpgt>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b2a:	e9c1 2300 	strd	r2, r3, [r1]
 8003b2e:	e012      	b.n	8003b56 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b3e:	f7fc fff5 	bl	8000b2c <__aeabi_dcmplt>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b52:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b62:	f7fd f801 	bl	8000b68 <__aeabi_dcmpgt>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003b78:	e012      	b.n	8003ba0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b86:	f7fc ffd1 	bl	8000b2c <__aeabi_dcmplt>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003b9c:	e000      	b.n	8003ba0 <PID_SetOutputLimits+0xd6>
		return;
 8003b9e:	bf00      	nop
		}
		else { }

	}

}
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6178      	str	r0, [r7, #20]
 8003bae:	ed87 0b02 	vstr	d0, [r7, #8]
 8003bb2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bbe:	f7fc ffc9 	bl	8000b54 <__aeabi_dcmpge>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bce:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8003bd2:	6979      	ldr	r1, [r7, #20]
 8003bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8003bdc:	e000      	b.n	8003be0 <PID_SetILimits+0x3a>
		return;
 8003bde:	bf00      	nop
}
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	61f8      	str	r0, [r7, #28]
 8003bee:	ed87 0b04 	vstr	d0, [r7, #16]
 8003bf2:	ed87 1b02 	vstr	d1, [r7, #8]
 8003bf6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	789b      	ldrb	r3, [r3, #2]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	ed97 2b00 	vldr	d2, [r7]
 8003c04:	ed97 1b02 	vldr	d1, [r7, #8]
 8003c08:	ed97 0b04 	vldr	d0, [r7, #16]
 8003c0c:	69f8      	ldr	r0, [r7, #28]
 8003c0e:	f000 f805 	bl	8003c1c <PID_SetTunings2>
}
 8003c12:	bf00      	nop
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	61f8      	str	r0, [r7, #28]
 8003c24:	ed87 0b04 	vstr	d0, [r7, #16]
 8003c28:	ed87 1b02 	vstr	d1, [r7, #8]
 8003c2c:	ed87 2b00 	vstr	d2, [r7]
 8003c30:	460b      	mov	r3, r1
 8003c32:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c40:	f7fc ff74 	bl	8000b2c <__aeabi_dcmplt>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 8089 	bne.w	8003d5e <PID_SetTunings2+0x142>
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c58:	f7fc ff68 	bl	8000b2c <__aeabi_dcmplt>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d17d      	bne.n	8003d5e <PID_SetTunings2+0x142>
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c6e:	f7fc ff5d 	bl	8000b2c <__aeabi_dcmplt>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d172      	bne.n	8003d5e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	7efa      	ldrb	r2, [r7, #27]
 8003c7c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003c7e:	7efb      	ldrb	r3, [r7, #27]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003c90:	69f9      	ldr	r1, [r7, #28]
 8003c92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c96:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003caa:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fc4e 	bl	8000554 <__aeabi_ui2d>
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <PID_SetTunings2+0x14c>)
 8003cbe:	f7fc fded 	bl	800089c <__aeabi_ddiv>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8003cca:	69f9      	ldr	r1, [r7, #28]
 8003ccc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cd0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003cd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cdc:	f7fc fcb4 	bl	8000648 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	69f9      	ldr	r1, [r7, #28]
 8003ce6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003cea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cf2:	f7fc fdd3 	bl	800089c <__aeabi_ddiv>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	69f9      	ldr	r1, [r7, #28]
 8003cfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d12b      	bne.n	8003d60 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d0e:	f04f 0000 	mov.w	r0, #0
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	f7fc fadf 	bl	80002d8 <__aeabi_dsub>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	69f9      	ldr	r1, [r7, #28]
 8003d20:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f04f 0100 	mov.w	r1, #0
 8003d32:	f7fc fad1 	bl	80002d8 <__aeabi_dsub>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	69f9      	ldr	r1, [r7, #28]
 8003d3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	f7fc fac3 	bl	80002d8 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	69f9      	ldr	r1, [r7, #28]
 8003d58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003d5c:	e000      	b.n	8003d60 <PID_SetTunings2+0x144>
		return;
 8003d5e:	bf00      	nop

	}

}
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	408f4000 	.word	0x408f4000

08003d6c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02e      	beq.n	8003dde <PID_SetControllerDirection+0x72>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	78db      	ldrb	r3, [r3, #3]
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d029      	beq.n	8003dde <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d90:	f04f 0000 	mov.w	r0, #0
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f7fc fa9e 	bl	80002d8 <__aeabi_dsub>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003dac:	f04f 0000 	mov.w	r0, #0
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f7fc fa90 	bl	80002d8 <__aeabi_dsub>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003dc8:	f04f 0000 	mov.w	r0, #0
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	f7fc fa82 	bl	80002d8 <__aeabi_dsub>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	70da      	strb	r2, [r3, #3]

}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	dd01      	ble.n	8003e02 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dd2e      	ble.n	8003e6c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003e0e:	68b8      	ldr	r0, [r7, #8]
 8003e10:	f7fc fbb0 	bl	8000574 <__aeabi_i2d>
 8003e14:	4604      	mov	r4, r0
 8003e16:	460d      	mov	r5, r1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fb99 	bl	8000554 <__aeabi_ui2d>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f7fc fd37 	bl	800089c <__aeabi_ddiv>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003e3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e40:	f7fc fc02 	bl	8000648 <__aeabi_dmul>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e58:	f7fc fd20 	bl	800089c <__aeabi_ddiv>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]

	}

}
 8003e6c:	bf00      	nop
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdb0      	pop	{r4, r5, r7, pc}

08003e74 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003e82:	ec43 2b17 	vmov	d7, r2, r3
}
 8003e86:	eeb0 0a47 	vmov.f32	s0, s14
 8003e8a:	eef0 0a67 	vmov.f32	s1, s15
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003ea6:	ec43 2b17 	vmov	d7, r2, r3
}
 8003eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8003eae:	eef0 0a67 	vmov.f32	s1, s15
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003eca:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ece:	eeb0 0a47 	vmov.f32	s0, s14
 8003ed2:	eef0 0a67 	vmov.f32	s1, s15
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_MspInit+0x44>)
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <HAL_MspInit+0x44>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <HAL_MspInit+0x44>)
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_MspInit+0x44>)
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <HAL_MspInit+0x44>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6593      	str	r3, [r2, #88]	; 0x58
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_MspInit+0x44>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003f16:	f006 fa69 	bl	800a3ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b09c      	sub	sp, #112	; 0x70
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f40:	f107 0318 	add.w	r3, r7, #24
 8003f44:	2244      	movs	r2, #68	; 0x44
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f010 fc40 	bl	80147ce <memset>
  if(hadc->Instance==ADC1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f56:	d146      	bne.n	8003fe6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003f5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f64:	f107 0318 	add.w	r3, r7, #24
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f006 ff45 	bl	800adf8 <HAL_RCCEx_PeriphCLKConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003f74:	f7ff fb2a 	bl	80035cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f78:	4b57      	ldr	r3, [pc, #348]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 8003f80:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f82:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10b      	bne.n	8003fa2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003f8a:	4b54      	ldr	r3, [pc, #336]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	4a53      	ldr	r2, [pc, #332]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f96:	4b51      	ldr	r3, [pc, #324]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	4b4e      	ldr	r3, [pc, #312]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	4a4d      	ldr	r2, [pc, #308]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fae:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 8003fba:	230c      	movs	r3, #12
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fd0:	f004 f950 	bl	8008274 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	2012      	movs	r0, #18
 8003fda:	f003 fa14 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003fde:	2012      	movs	r0, #18
 8003fe0:	f003 fa2b 	bl	800743a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003fe4:	e074      	b.n	80040d0 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a3d      	ldr	r2, [pc, #244]	; (80040e0 <HAL_ADC_MspInit+0x1b8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d16f      	bne.n	80040d0 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003ff6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ffc:	f107 0318 	add.w	r3, r7, #24
 8004000:	4618      	mov	r0, r3
 8004002:	f006 fef9 	bl	800adf8 <HAL_RCCEx_PeriphCLKConfig>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 800400c:	f7ff fade 	bl	80035cc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004010:	4b31      	ldr	r3, [pc, #196]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 8004018:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_ADC_MspInit+0x1b0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10b      	bne.n	800403a <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004022:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4a2d      	ldr	r2, [pc, #180]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8004028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402e:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800403a:	4b28      	ldr	r3, [pc, #160]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8004040:	f043 0320 	orr.w	r3, r3, #32
 8004044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004046:	4b25      	ldr	r3, [pc, #148]	; (80040dc <HAL_ADC_MspInit+0x1b4>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 8004052:	2302      	movs	r3, #2
 8004054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004056:	2303      	movs	r3, #3
 8004058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 800405e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004062:	4619      	mov	r1, r3
 8004064:	481f      	ldr	r0, [pc, #124]	; (80040e4 <HAL_ADC_MspInit+0x1bc>)
 8004066:	f004 f905 	bl	8008274 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800406a:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <HAL_ADC_MspInit+0x1c4>)
 800406e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 8004072:	2224      	movs	r2, #36	; 0x24
 8004074:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004088:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 800408a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800408e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 8004092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004096:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 800409a:	2220      	movs	r2, #32
 800409c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80040a4:	4810      	ldr	r0, [pc, #64]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 80040a6:	f003 fbe9 	bl	800787c <HAL_DMA_Init>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 80040b0:	f7ff fa8c 	bl	80035cc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
 80040ba:	4a0b      	ldr	r2, [pc, #44]	; (80040e8 <HAL_ADC_MspInit+0x1c0>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80040c0:	2200      	movs	r2, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	2012      	movs	r0, #18
 80040c6:	f003 f99e 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80040ca:	2012      	movs	r0, #18
 80040cc:	f003 f9b5 	bl	800743a <HAL_NVIC_EnableIRQ>
}
 80040d0:	bf00      	nop
 80040d2:	3770      	adds	r7, #112	; 0x70
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20001a88 	.word	0x20001a88
 80040dc:	40021000 	.word	0x40021000
 80040e0:	50000100 	.word	0x50000100
 80040e4:	48001400 	.word	0x48001400
 80040e8:	200016d8 	.word	0x200016d8
 80040ec:	4002001c 	.word	0x4002001c

080040f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <HAL_CRC_MspInit+0x38>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10b      	bne.n	800411a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_CRC_MspInit+0x3c>)
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_CRC_MspInit+0x3c>)
 8004108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800410c:	6493      	str	r3, [r2, #72]	; 0x48
 800410e:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_CRC_MspInit+0x3c>)
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023000 	.word	0x40023000
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b09c      	sub	sp, #112	; 0x70
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004148:	f107 0318 	add.w	r3, r7, #24
 800414c:	2244      	movs	r2, #68	; 0x44
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f010 fb3c 	bl	80147ce <memset>
  if(hi2c->Instance==I2C1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <HAL_I2C_MspInit+0xe4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d154      	bne.n	800420a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004164:	2300      	movs	r3, #0
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004168:	f107 0318 	add.w	r3, r7, #24
 800416c:	4618      	mov	r0, r3
 800416e:	f006 fe43 	bl	800adf8 <HAL_RCCEx_PeriphCLKConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004178:	f7ff fa28 	bl	80035cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 800417e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 800418a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	4a1f      	ldr	r2, [pc, #124]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 800419a:	f043 0302 	orr.w	r3, r3, #2
 800419e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 80041a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b2:	2312      	movs	r3, #18
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	2300      	movs	r3, #0
 80041bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041be:	2304      	movs	r3, #4
 80041c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041cc:	f004 f852 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80041d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041d6:	2312      	movs	r3, #18
 80041d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041de:	2300      	movs	r3, #0
 80041e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e2:	2304      	movs	r3, #4
 80041e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041ea:	4619      	mov	r1, r3
 80041ec:	480b      	ldr	r0, [pc, #44]	; (800421c <HAL_I2C_MspInit+0xec>)
 80041ee:	f004 f841 	bl	8008274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 80041f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_I2C_MspInit+0xe8>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800420a:	bf00      	nop
 800420c:	3770      	adds	r7, #112	; 0x70
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40005400 	.word	0x40005400
 8004218:	40021000 	.word	0x40021000
 800421c:	48000400 	.word	0x48000400

08004220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	f107 0314 	add.w	r3, r7, #20
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	60da      	str	r2, [r3, #12]
 8004236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <HAL_SPI_MspInit+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d151      	bne.n	80042e6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004242:	4b2c      	ldr	r3, [pc, #176]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 8004248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
 800424e:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 800425c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004266:	4b23      	ldr	r3, [pc, #140]	; (80042f4 <HAL_SPI_MspInit+0xd4>)
 8004268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004272:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004284:	2305      	movs	r3, #5
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	481a      	ldr	r0, [pc, #104]	; (80042f8 <HAL_SPI_MspInit+0xd8>)
 8004290:	f003 fff0 	bl	8008274 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <HAL_SPI_MspInit+0xe0>)
 8004298:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 800429c:	220d      	movs	r2, #13
 800429e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042a0:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042a2:	2210      	movs	r2, #16
 80042a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042b8:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80042ca:	480c      	ldr	r0, [pc, #48]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042cc:	f003 fad6 	bl	800787c <HAL_DMA_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80042d6:	f7ff f979 	bl	80035cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <HAL_SPI_MspInit+0xdc>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40003800 	.word	0x40003800
 80042f4:	40021000 	.word	0x40021000
 80042f8:	48000400 	.word	0x48000400
 80042fc:	20001814 	.word	0x20001814
 8004300:	40020008 	.word	0x40020008

08004304 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1e      	ldr	r2, [pc, #120]	; (800438c <HAL_TIM_PWM_MspInit+0x88>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d124      	bne.n	8004360 <HAL_TIM_PWM_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 8004318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431a:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 800431c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004320:	6613      	str	r3, [r2, #96]	; 0x60
 8004322:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	2019      	movs	r0, #25
 8004334:	f003 f867 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004338:	2019      	movs	r0, #25
 800433a:	f003 f87e 	bl	800743a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	201a      	movs	r0, #26
 8004344:	f003 f85f 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004348:	201a      	movs	r0, #26
 800434a:	f003 f876 	bl	800743a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	201b      	movs	r0, #27
 8004354:	f003 f857 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004358:	201b      	movs	r0, #27
 800435a:	f003 f86e 	bl	800743a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800435e:	e010      	b.n	8004382 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_TIM_PWM_MspInit+0x90>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10b      	bne.n	8004382 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	4a08      	ldr	r2, [pc, #32]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6593      	str	r3, [r2, #88]	; 0x58
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_TIM_PWM_MspInit+0x8c>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40021000 	.word	0x40021000
 8004394:	40000800 	.word	0x40000800

08004398 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d144      	bne.n	8004444 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ba:	4b24      	ldr	r3, [pc, #144]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a23      	ldr	r2, [pc, #140]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
 80043c6:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043f0:	f043 0302 	orr.w	r3, r3, #2
 80043f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <HAL_TIM_Encoder_MspInit+0xb4>)
 80043f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004402:	2301      	movs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004406:	2302      	movs	r3, #2
 8004408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004412:	2301      	movs	r3, #1
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	4619      	mov	r1, r3
 800441c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004420:	f003 ff28 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8004424:	2308      	movs	r3, #8
 8004426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004434:	2301      	movs	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4619      	mov	r1, r3
 800443e:	4804      	ldr	r0, [pc, #16]	; (8004450 <HAL_TIM_Encoder_MspInit+0xb8>)
 8004440:	f003 ff18 	bl	8008274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004444:	bf00      	nop
 8004446:	3728      	adds	r7, #40	; 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	48000400 	.word	0x48000400

08004454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_TIM_Base_MspInit+0x78>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d114      	bne.n	8004490 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 8004468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	6613      	str	r3, [r2, #96]	; 0x60
 8004472:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	2100      	movs	r1, #0
 8004482:	2019      	movs	r0, #25
 8004484:	f002 ffbf 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004488:	2019      	movs	r0, #25
 800448a:	f002 ffd6 	bl	800743a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800448e:	e018      	b.n	80044c2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0f      	ldr	r2, [pc, #60]	; (80044d4 <HAL_TIM_Base_MspInit+0x80>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d113      	bne.n	80044c2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 800449c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449e:	4a0c      	ldr	r2, [pc, #48]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6613      	str	r3, [r2, #96]	; 0x60
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_TIM_Base_MspInit+0x7c>)
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2100      	movs	r1, #0
 80044b6:	201a      	movs	r0, #26
 80044b8:	f002 ffa5 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80044bc:	201a      	movs	r0, #26
 80044be:	f002 ffbc 	bl	800743a <HAL_NVIC_EnableIRQ>
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40014400 	.word	0x40014400
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40014800 	.word	0x40014800

080044d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_TIM_MspPostInit+0xa8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d11c      	bne.n	8004534 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 80044fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 8004500:	f043 0320 	orr.w	r3, r3, #32
 8004504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004522:	2306      	movs	r3, #6
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004526:	f107 0314 	add.w	r3, r7, #20
 800452a:	4619      	mov	r1, r3
 800452c:	4816      	ldr	r0, [pc, #88]	; (8004588 <HAL_TIM_MspPostInit+0xb0>)
 800452e:	f003 fea1 	bl	8008274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004532:	e020      	b.n	8004576 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <HAL_TIM_MspPostInit+0xb4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d11b      	bne.n	8004576 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_TIM_MspPostInit+0xac>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004566:	2302      	movs	r3, #2
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	4619      	mov	r1, r3
 8004570:	4807      	ldr	r0, [pc, #28]	; (8004590 <HAL_TIM_MspPostInit+0xb8>)
 8004572:	f003 fe7f 	bl	8008274 <HAL_GPIO_Init>
}
 8004576:	bf00      	nop
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40021000 	.word	0x40021000
 8004588:	48001400 	.word	0x48001400
 800458c:	40000800 	.word	0x40000800
 8004590:	48000400 	.word	0x48000400

08004594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004598:	e7fe      	b.n	8004598 <NMI_Handler+0x4>

0800459a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800459e:	e7fe      	b.n	800459e <HardFault_Handler+0x4>

080045a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a4:	e7fe      	b.n	80045a4 <MemManage_Handler+0x4>

080045a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045aa:	e7fe      	b.n	80045aa <BusFault_Handler+0x4>

080045ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045b0:	e7fe      	b.n	80045b0 <UsageFault_Handler+0x4>

080045b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045e0:	f000 fd9a 	bl	8005118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80045ec:	4802      	ldr	r0, [pc, #8]	; (80045f8 <DMA1_Channel1_IRQHandler+0x10>)
 80045ee:	f003 fa68 	bl	8007ac2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20001814 	.word	0x20001814

080045fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <DMA1_Channel2_IRQHandler+0x10>)
 8004602:	f003 fa5e 	bl	8007ac2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	200016d8 	.word	0x200016d8

08004610 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004614:	4803      	ldr	r0, [pc, #12]	; (8004624 <ADC1_2_IRQHandler+0x14>)
 8004616:	f001 fb8d 	bl	8005d34 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800461a:	4803      	ldr	r0, [pc, #12]	; (8004628 <ADC1_2_IRQHandler+0x18>)
 800461c:	f001 fb8a 	bl	8005d34 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20001600 	.word	0x20001600
 8004628:	2000166c 	.word	0x2000166c

0800462c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <USB_LP_IRQHandler+0x10>)
 8004632:	f004 f9f3 	bl	8008a1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200027f8 	.word	0x200027f8

08004640 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004644:	4803      	ldr	r0, [pc, #12]	; (8004654 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004646:	f007 ff1d 	bl	800c484 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800464a:	4803      	ldr	r0, [pc, #12]	; (8004658 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800464c:	f007 ff1a 	bl	800c484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20001874 	.word	0x20001874
 8004658:	20001958 	.word	0x20001958

0800465c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004660:	4803      	ldr	r0, [pc, #12]	; (8004670 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004662:	f007 ff0f 	bl	800c484 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004666:	4803      	ldr	r0, [pc, #12]	; (8004674 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004668:	f007 ff0c 	bl	800c484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20001874 	.word	0x20001874
 8004674:	200019a4 	.word	0x200019a4

08004678 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800467c:	4802      	ldr	r0, [pc, #8]	; (8004688 <TIM1_CC_IRQHandler+0x10>)
 800467e:	f007 ff01 	bl	800c484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20001874 	.word	0x20001874

0800468c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return 1;
 8004690:	2301      	movs	r3, #1
}
 8004692:	4618      	mov	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_kill>:

int _kill(int pid, int sig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80046a6:	f010 f8e5 	bl	8014874 <__errno>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2216      	movs	r2, #22
 80046ae:	601a      	str	r2, [r3, #0]
  return -1;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_exit>:

void _exit (int status)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80046c4:	f04f 31ff 	mov.w	r1, #4294967295
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ffe7 	bl	800469c <_kill>
  while (1) {}    /* Make sure we hang here */
 80046ce:	e7fe      	b.n	80046ce <_exit+0x12>

080046d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e00a      	b.n	80046f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046e2:	f3af 8000 	nop.w
 80046e6:	4601      	mov	r1, r0
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	60ba      	str	r2, [r7, #8]
 80046ee:	b2ca      	uxtb	r2, r1
 80046f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	3301      	adds	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	dbf0      	blt.n	80046e2 <_read+0x12>
  }

  return len;
 8004700:	687b      	ldr	r3, [r7, #4]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e009      	b.n	8004730 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	60ba      	str	r2, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	3301      	adds	r3, #1
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	429a      	cmp	r2, r3
 8004736:	dbf1      	blt.n	800471c <_write+0x12>
  }
  return len;
 8004738:	687b      	ldr	r3, [r7, #4]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_close>:

int _close(int file)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800474a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800476a:	605a      	str	r2, [r3, #4]
  return 0;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <_isatty>:

int _isatty(int file)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004782:	2301      	movs	r3, #1
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047b4:	4a14      	ldr	r2, [pc, #80]	; (8004808 <_sbrk+0x5c>)
 80047b6:	4b15      	ldr	r3, [pc, #84]	; (800480c <_sbrk+0x60>)
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <_sbrk+0x64>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <_sbrk+0x64>)
 80047ca:	4a12      	ldr	r2, [pc, #72]	; (8004814 <_sbrk+0x68>)
 80047cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <_sbrk+0x64>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d207      	bcs.n	80047ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047dc:	f010 f84a 	bl	8014874 <__errno>
 80047e0:	4603      	mov	r3, r0
 80047e2:	220c      	movs	r2, #12
 80047e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	e009      	b.n	8004800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <_sbrk+0x64>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047f2:	4b07      	ldr	r3, [pc, #28]	; (8004810 <_sbrk+0x64>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4413      	add	r3, r2
 80047fa:	4a05      	ldr	r2, [pc, #20]	; (8004810 <_sbrk+0x64>)
 80047fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047fe:	68fb      	ldr	r3, [r7, #12]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20008000 	.word	0x20008000
 800480c:	00000400 	.word	0x00000400
 8004810:	20001a8c 	.word	0x20001a8c
 8004814:	20002e40 	.word	0x20002e40

08004818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <SystemInit+0x20>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	4a05      	ldr	r2, [pc, #20]	; (8004838 <SystemInit+0x20>)
 8004824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800483c:	480d      	ldr	r0, [pc, #52]	; (8004874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800483e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004840:	f7ff ffea 	bl	8004818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004844:	480c      	ldr	r0, [pc, #48]	; (8004878 <LoopForever+0x6>)
  ldr r1, =_edata
 8004846:	490d      	ldr	r1, [pc, #52]	; (800487c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004848:	4a0d      	ldr	r2, [pc, #52]	; (8004880 <LoopForever+0xe>)
  movs r3, #0
 800484a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800484c:	e002      	b.n	8004854 <LoopCopyDataInit>

0800484e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800484e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004852:	3304      	adds	r3, #4

08004854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004858:	d3f9      	bcc.n	800484e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800485c:	4c0a      	ldr	r4, [pc, #40]	; (8004888 <LoopForever+0x16>)
  movs r3, #0
 800485e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004860:	e001      	b.n	8004866 <LoopFillZerobss>

08004862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004864:	3204      	adds	r2, #4

08004866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004868:	d3fb      	bcc.n	8004862 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800486a:	f010 f809 	bl	8014880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800486e:	f7fd fb5b 	bl	8001f28 <main>

08004872 <LoopForever>:

LoopForever:
    b LoopForever
 8004872:	e7fe      	b.n	8004872 <LoopForever>
  ldr   r0, =_estack
 8004874:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800487c:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8004880:	0801be28 	.word	0x0801be28
  ldr r2, =_sbss
 8004884:	200004e8 	.word	0x200004e8
  ldr r4, =_ebss
 8004888:	20002e40 	.word	0x20002e40

0800488c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800488c:	e7fe      	b.n	800488c <COMP1_2_3_IRQHandler>
	...

08004890 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <setSPI_Size+0x54>)
 800489c:	f993 3000 	ldrsb.w	r3, [r3]
 80048a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d017      	beq.n	80048d8 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <setSPI_Size+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <setSPI_Size+0x58>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80048b8:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <setSPI_Size+0x54>)
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d104      	bne.n	80048d0 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <setSPI_Size+0x58>)
 80048c8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80048cc:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80048ce:	e003      	b.n	80048d8 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <setSPI_Size+0x58>)
 80048d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048d6:	60da      	str	r2, [r3, #12]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	2000016c 	.word	0x2000016c
 80048e8:	200017b0 	.word	0x200017b0

080048ec <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	460a      	mov	r2, r1
 80048f6:	71fb      	strb	r3, [r7, #7]
 80048f8:	4613      	mov	r3, r2
 80048fa:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80048fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ffc5 	bl	8004890 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004906:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <setDMAMemMode+0x10c>)
 8004908:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800490c:	461a      	mov	r2, r3
 800490e:	79bb      	ldrb	r3, [r7, #6]
 8004910:	429a      	cmp	r2, r3
 8004912:	d106      	bne.n	8004922 <setDMAMemMode+0x36>
 8004914:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <setDMAMemMode+0x10c>)
 8004916:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800491a:	461a      	mov	r2, r3
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	429a      	cmp	r2, r3
 8004920:	d066      	beq.n	80049f0 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8004922:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <setDMAMemMode+0x10c>)
 8004928:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800492a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <setDMAMemMode+0x10c>)
 8004930:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004932:	4b32      	ldr	r3, [pc, #200]	; (80049fc <setDMAMemMode+0x110>)
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <setDMAMemMode+0x110>)
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8004946:	bf00      	nop
 8004948:	4b2c      	ldr	r3, [pc, #176]	; (80049fc <setDMAMemMode+0x110>)
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f7      	bne.n	8004948 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10e      	bne.n	800497c <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <setDMAMemMode+0x110>)
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <setDMAMemMode+0x110>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <setDMAMemMode+0x110>)
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e00d      	b.n	8004998 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <setDMAMemMode+0x110>)
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	2200      	movs	r2, #0
 8004982:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <setDMAMemMode+0x110>)
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <setDMAMemMode+0x110>)
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004996:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8004998:	79bb      	ldrb	r3, [r7, #6]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d116      	bne.n	80049cc <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <setDMAMemMode+0x110>)
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a6:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <setDMAMemMode+0x110>)
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b0:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <setDMAMemMode+0x110>)
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <setDMAMemMode+0x110>)
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 80049c8:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80049ca:	e011      	b.n	80049f0 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <setDMAMemMode+0x110>)
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d4:	4b09      	ldr	r3, [pc, #36]	; (80049fc <setDMAMemMode+0x110>)
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <setDMAMemMode+0x110>)
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <setDMAMemMode+0x110>)
 80049e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80049ee:	601a      	str	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	2000016c 	.word	0x2000016c
 80049fc:	200017b0 	.word	0x200017b0

08004a00 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7ff ff3f 	bl	8004890 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_RESET);
 8004a12:	2200      	movs	r2, #0
 8004a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a18:	4815      	ldr	r0, [pc, #84]	; (8004a70 <LCD_WriteCommand+0x70>)
 8004a1a:	f003 fdc5 	bl	80085a8 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a24:	4812      	ldr	r0, [pc, #72]	; (8004a70 <LCD_WriteCommand+0x70>)
 8004a26:	f003 fdbf 	bl	80085a8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8004a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2e:	2201      	movs	r2, #1
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4810      	ldr	r0, [pc, #64]	; (8004a74 <LCD_WriteCommand+0x74>)
 8004a34:	f006 fc7b 	bl	800b32e <HAL_SPI_Transmit>
  if(argc){
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a44:	480a      	ldr	r0, [pc, #40]	; (8004a70 <LCD_WriteCommand+0x70>)
 8004a46:	f003 fdaf 	bl	80085a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	4807      	ldr	r0, [pc, #28]	; (8004a74 <LCD_WriteCommand+0x74>)
 8004a58:	f006 fc69 	bl	800b32e <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a62:	4803      	ldr	r0, [pc, #12]	; (8004a70 <LCD_WriteCommand+0x70>)
 8004a64:	f003 fda0 	bl	80085a8 <HAL_GPIO_WritePin>
#endif
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	48000800 	.word	0x48000800
 8004a74:	200017b0 	.word	0x200017b0

08004a78 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 8004a82:	2201      	movs	r2, #1
 8004a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a88:	4830      	ldr	r0, [pc, #192]	; (8004b4c <LCD_WriteData+0xd4>)
 8004a8a:	f003 fd8d 	bl	80085a8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a94:	482d      	ldr	r0, [pc, #180]	; (8004b4c <LCD_WriteData+0xd4>)
 8004a96:	f003 fd87 	bl	80085a8 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8004a9a:	e049      	b.n	8004b30 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	bf28      	it	cs
 8004aa6:	4613      	movcs	r3, r2
 8004aa8:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d924      	bls.n	8004afa <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8004ab0:	89fb      	ldrh	r3, [r7, #14]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4826      	ldr	r0, [pc, #152]	; (8004b50 <LCD_WriteData+0xd8>)
 8004ab8:	f006 fdae 	bl	800b618 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8004abc:	bf00      	nop
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <LCD_WriteData+0xd8>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f003 f8ac 	bl	8007c20 <HAL_DMA_GetState>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d1f7      	bne.n	8004abe <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 8004ace:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <LCD_WriteData+0xdc>)
 8004ad0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d127      	bne.n	8004b28 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <LCD_WriteData+0xdc>)
 8004ada:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d104      	bne.n	8004aec <LCD_WriteData+0x74>
          buff += chunk_size;
 8004ae2:	89fb      	ldrh	r3, [r7, #14]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	e01d      	b.n	8004b28 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8004aec:	89fb      	ldrh	r3, [r7, #14]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	461a      	mov	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	e016      	b.n	8004b28 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8004afa:	89fa      	ldrh	r2, [r7, #14]
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4813      	ldr	r0, [pc, #76]	; (8004b50 <LCD_WriteData+0xd8>)
 8004b04:	f006 fc13 	bl	800b32e <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <LCD_WriteData+0xdc>)
 8004b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d104      	bne.n	8004b1c <LCD_WriteData+0xa4>
        buff += chunk_size;
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	e005      	b.n	8004b28 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8004b28:	89fb      	ldrh	r3, [r7, #14]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1b2      	bne.n	8004a9c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004b36:	2201      	movs	r2, #1
 8004b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b3c:	4803      	ldr	r0, [pc, #12]	; (8004b4c <LCD_WriteData+0xd4>)
 8004b3e:	f003 fd33 	bl	80085a8 <HAL_GPIO_WritePin>
#endif
}
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	48000800 	.word	0x48000800
 8004b50:	200017b0 	.word	0x200017b0
 8004b54:	2000016c 	.word	0x2000016c

08004b58 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8004b58:	b590      	push	{r4, r7, lr}
 8004b5a:	b08b      	sub	sp, #44	; 0x2c
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4623      	mov	r3, r4
 8004b68:	80fb      	strh	r3, [r7, #6]
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80bb      	strh	r3, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	807b      	strh	r3, [r7, #2]
 8004b72:	4613      	mov	r3, r2
 8004b74:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8004b7e:	88bb      	ldrh	r3, [r7, #4]
 8004b80:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b82:	883b      	ldrh	r3, [r7, #0]
 8004b84:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8004b86:	232a      	movs	r3, #42	; 0x2a
 8004b88:	763b      	strb	r3, [r7, #24]
 8004b8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004b8e:	121b      	asrs	r3, r3, #8
 8004b90:	b21b      	sxth	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	767b      	strb	r3, [r7, #25]
 8004b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	76bb      	strb	r3, [r7, #26]
 8004b9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004ba0:	121b      	asrs	r3, r3, #8
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	76fb      	strb	r3, [r7, #27]
 8004ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004bae:	f107 0318 	add.w	r3, r7, #24
 8004bb2:	2104      	movs	r1, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff23 	bl	8004a00 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8004bba:	232b      	movs	r3, #43	; 0x2b
 8004bbc:	743b      	strb	r3, [r7, #16]
 8004bbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004bc2:	121b      	asrs	r3, r3, #8
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	747b      	strb	r3, [r7, #17]
 8004bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	74bb      	strb	r3, [r7, #18]
 8004bd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004bd4:	121b      	asrs	r3, r3, #8
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	74fb      	strb	r3, [r7, #19]
 8004bdc:	8c3b      	ldrh	r3, [r7, #32]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004be2:	f107 0310 	add.w	r3, r7, #16
 8004be6:	2104      	movs	r1, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff ff09 	bl	8004a00 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8004bee:	232c      	movs	r3, #44	; 0x2c
 8004bf0:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004bf2:	f107 030c 	add.w	r3, r7, #12
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff01 	bl	8004a00 <LCD_WriteCommand>
  }
}
 8004bfe:	bf00      	nop
 8004c00:	372c      	adds	r7, #44	; 0x2c
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
	...

08004c08 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	80fb      	strh	r3, [r7, #6]
 8004c12:	460b      	mov	r3, r1
 8004c14:	80bb      	strh	r3, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8004c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db39      	blt.n	8004c96 <LCD_DrawPixel+0x8e>
 8004c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c26:	2bef      	cmp	r3, #239	; 0xef
 8004c28:	dc35      	bgt.n	8004c96 <LCD_DrawPixel+0x8e>
 8004c2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	db31      	blt.n	8004c96 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8004c32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004c3a:	da2c      	bge.n	8004c96 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8004c3c:	887b      	ldrh	r3, [r7, #2]
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	733b      	strb	r3, [r7, #12]
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8004c4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c54:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004c58:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004c5c:	f7ff ff7c 	bl	8004b58 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 8004c60:	2201      	movs	r2, #1
 8004c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c66:	480e      	ldr	r0, [pc, #56]	; (8004ca0 <LCD_DrawPixel+0x98>)
 8004c68:	f003 fc9e 	bl	80085a8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c72:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <LCD_DrawPixel+0x98>)
 8004c74:	f003 fc98 	bl	80085a8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8004c78:	f107 010c 	add.w	r1, r7, #12
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	2202      	movs	r2, #2
 8004c82:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <LCD_DrawPixel+0x9c>)
 8004c84:	f006 fb53 	bl	800b32e <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c8e:	4804      	ldr	r0, [pc, #16]	; (8004ca0 <LCD_DrawPixel+0x98>)
 8004c90:	f003 fc8a 	bl	80085a8 <HAL_GPIO_WritePin>
 8004c94:	e000      	b.n	8004c98 <LCD_DrawPixel+0x90>
    return;
 8004c96:	bf00      	nop
#endif
}
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	48000800 	.word	0x48000800
 8004ca4:	200017b0 	.word	0x200017b0

08004ca8 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b094      	sub	sp, #80	; 0x50
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d905      	bls.n	8004cc6 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8004cba:	1cbb      	adds	r3, r7, #2
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff feda 	bl	8004a78 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8004cc4:	e026      	b.n	8004d14 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cca:	e009      	b.n	8004ce0 <LCD_FillPixels+0x38>
      fill[t]=color;
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	3350      	adds	r3, #80	; 0x50
 8004cd4:	443b      	add	r3, r7
 8004cd6:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8004cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cdc:	3301      	adds	r3, #1
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	bf28      	it	cs
 8004ce6:	2320      	movcs	r3, #32
 8004ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3ee      	bcc.n	8004ccc <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8004cee:	e00e      	b.n	8004d0e <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	bf28      	it	cs
 8004cf6:	2320      	movcs	r3, #32
 8004cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff feb9 	bl	8004a78 <LCD_WriteData>
      pixels-=sz;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ed      	bne.n	8004cf0 <LCD_FillPixels+0x48>
}
 8004d14:	bf00      	nop
 8004d16:	3750      	adds	r7, #80	; 0x50
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	80fb      	strh	r3, [r7, #6]
 8004d2e:	4603      	mov	r3, r0
 8004d30:	80bb      	strh	r3, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	807b      	strh	r3, [r7, #2]
 8004d36:	4613      	mov	r3, r2
 8004d38:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8004d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d105      	bne.n	8004d50 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8004d44:	2100      	movs	r1, #0
 8004d46:	2001      	movs	r0, #1
 8004d48:	f7ff fdd0 	bl	80048ec <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e014      	b.n	8004d7a <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8004d50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004d58:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004d5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004d60:	f7ff fefa 	bl	8004b58 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004d64:	2101      	movs	r1, #1
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7ff fdc0 	bl	80048ec <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_DC_Pin, GPIO_PIN_SET);
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d72:	4804      	ldr	r0, [pc, #16]	; (8004d84 <LCD_FillArea+0x68>)
 8004d74:	f003 fc18 	bl	80085a8 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <LCD_FillArea+0x6c>)
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd90      	pop	{r4, r7, pc}
 8004d82:	bf00      	nop
 8004d84:	48000800 	.word	0x48000800
 8004d88:	08004ca9 	.word	0x08004ca9

08004d8c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	80fb      	strh	r3, [r7, #6]
 8004d9e:	4603      	mov	r3, r0
 8004da0:	80bb      	strh	r3, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	807b      	strh	r3, [r7, #2]
 8004da6:	4613      	mov	r3, r2
 8004da8:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	3301      	adds	r3, #1
 8004db2:	4619      	mov	r1, r3
 8004db4:	883a      	ldrh	r2, [r7, #0]
 8004db6:	88bb      	ldrh	r3, [r7, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004dc2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004dc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004dca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004dce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004dd2:	f7ff fec1 	bl	8004b58 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7ff fd87 	bl	80048ec <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8004dde:	8c3b      	ldrh	r3, [r7, #32]
 8004de0:	4619      	mov	r1, r3
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff ff60 	bl	8004ca8 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8004de8:	2100      	movs	r1, #0
 8004dea:	2001      	movs	r0, #1
 8004dec:	f7ff fd7e 	bl	80048ec <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}

08004dfa <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8004dfa:	b590      	push	{r4, r7, lr}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	603a      	str	r2, [r7, #0]
 8004e04:	80fb      	strh	r3, [r7, #6]
 8004e06:	460b      	mov	r3, r1
 8004e08:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	889b      	ldrh	r3, [r3, #4]
 8004e0e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	88db      	ldrh	r3, [r3, #6]
 8004e14:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2bef      	cmp	r3, #239	; 0xef
 8004e1a:	d839      	bhi.n	8004e90 <LCD_DrawImage+0x96>
 8004e1c:	88bb      	ldrh	r3, [r7, #4]
 8004e1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e22:	d235      	bcs.n	8004e90 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8004e24:	88fa      	ldrh	r2, [r7, #6]
 8004e26:	89fb      	ldrh	r3, [r7, #14]
 8004e28:	4413      	add	r3, r2
 8004e2a:	2bf0      	cmp	r3, #240	; 0xf0
 8004e2c:	dc32      	bgt.n	8004e94 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8004e2e:	88ba      	ldrh	r2, [r7, #4]
 8004e30:	89bb      	ldrh	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e38:	dc2e      	bgt.n	8004e98 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	7a1b      	ldrb	r3, [r3, #8]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d12c      	bne.n	8004e9c <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8004e42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	89fb      	ldrh	r3, [r7, #14]
 8004e4e:	4413      	add	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	b21c      	sxth	r4, r3
 8004e58:	88ba      	ldrh	r2, [r7, #4]
 8004e5a:	89bb      	ldrh	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	4622      	mov	r2, r4
 8004e68:	f7ff fe76 	bl	8004b58 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f7ff fd3c 	bl	80048ec <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	89fb      	ldrh	r3, [r7, #14]
 8004e7a:	89ba      	ldrh	r2, [r7, #12]
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7ff fdf9 	bl	8004a78 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004e86:	2100      	movs	r1, #0
 8004e88:	2001      	movs	r0, #1
 8004e8a:	f7ff fd2f 	bl	80048ec <setDMAMemMode>
 8004e8e:	e006      	b.n	8004e9e <LCD_DrawImage+0xa4>
    return;
 8004e90:	bf00      	nop
 8004e92:	e004      	b.n	8004e9e <LCD_DrawImage+0xa4>
    return;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <LCD_DrawImage+0xa4>
    return;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <LCD_DrawImage+0xa4>
    return;
 8004e9c:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}

08004ea4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	80fb      	strh	r3, [r7, #6]
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	80bb      	strh	r3, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	807b      	strh	r3, [r7, #2]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d10a      	bne.n	8004ee0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8004eca:	88ba      	ldrh	r2, [r7, #4]
 8004ecc:	883b      	ldrh	r3, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d918      	bls.n	8004f04 <LCD_DrawLine+0x60>
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	81bb      	strh	r3, [r7, #12]
 8004ed6:	883b      	ldrh	r3, [r7, #0]
 8004ed8:	80bb      	strh	r3, [r7, #4]
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	803b      	strh	r3, [r7, #0]
 8004ede:	e011      	b.n	8004f04 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8004ee0:	88ba      	ldrh	r2, [r7, #4]
 8004ee2:	883b      	ldrh	r3, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d10a      	bne.n	8004efe <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	887b      	ldrh	r3, [r7, #2]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d909      	bls.n	8004f04 <LCD_DrawLine+0x60>
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	81fb      	strh	r3, [r7, #14]
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	80fb      	strh	r3, [r7, #6]
 8004ef8:	89fb      	ldrh	r3, [r7, #14]
 8004efa:	807b      	strh	r3, [r7, #2]
 8004efc:	e002      	b.n	8004f04 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e009      	b.n	8004f18 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8004f04:	883c      	ldrh	r4, [r7, #0]
 8004f06:	887a      	ldrh	r2, [r7, #2]
 8004f08:	88b9      	ldrh	r1, [r7, #4]
 8004f0a:	88f8      	ldrh	r0, [r7, #6]
 8004f0c:	8c3b      	ldrh	r3, [r7, #32]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7ff ff3b 	bl	8004d8c <LCD_Fill>
  return UG_RESULT_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd90      	pop	{r4, r7, pc}

08004f20 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60ba      	str	r2, [r7, #8]
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	81fb      	strh	r3, [r7, #14]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f00a ff30 	bl	800fd98 <UG_FontSelect>
  UG_SetForecolor(color);
 8004f38:	8b3b      	ldrh	r3, [r7, #24]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f00b fa78 	bl	8010430 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8004f40:	8bbb      	ldrh	r3, [r7, #28]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f00b fa86 	bl	8010454 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8004f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f4c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f00b f9d4 	bl	8010300 <UG_PutString>
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <LCD_setPower+0x14>
 8004f70:	2329      	movs	r3, #41	; 0x29
 8004f72:	e000      	b.n	8004f76 <LCD_setPower+0x16>
 8004f74:	2328      	movs	r3, #40	; 0x28
 8004f76:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004f78:	f107 030c 	add.w	r3, r7, #12
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fd3e 	bl	8004a00 <LCD_WriteCommand>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <LCD_Update>:

static void LCD_Update(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8004f90:	2100      	movs	r1, #0
 8004f92:	2001      	movs	r0, #1
 8004f94:	f7ff fcaa 	bl	80048ec <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_CS_Pin, GPIO_PIN_SET);
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fa8:	482a      	ldr	r0, [pc, #168]	; (8005054 <LCD_init+0xb8>)
 8004faa:	f003 fafd 	bl	80085a8 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOC, SPI2_RST_Pin, GPIO_PIN_RESET);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fb4:	4827      	ldr	r0, [pc, #156]	; (8005054 <LCD_init+0xb8>)
 8004fb6:	f003 faf7 	bl	80085a8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f000 f8ca 	bl	8005154 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOC, SPI2_RST_Pin, GPIO_PIN_SET);
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fc6:	4823      	ldr	r0, [pc, #140]	; (8005054 <LCD_init+0xb8>)
 8004fc8:	f003 faee 	bl	80085a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8004fcc:	20c8      	movs	r0, #200	; 0xc8
 8004fce:	f000 f8c1 	bl	8005154 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8004fd2:	4921      	ldr	r1, [pc, #132]	; (8005058 <LCD_init+0xbc>)
 8004fd4:	4821      	ldr	r0, [pc, #132]	; (800505c <LCD_init+0xc0>)
 8004fd6:	f00a fe45 	bl	800fc64 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8004fda:	4921      	ldr	r1, [pc, #132]	; (8005060 <LCD_init+0xc4>)
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f00c facf 	bl	8011580 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8004fe2:	4920      	ldr	r1, [pc, #128]	; (8005064 <LCD_init+0xc8>)
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f00c facb 	bl	8011580 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8004fea:	491f      	ldr	r1, [pc, #124]	; (8005068 <LCD_init+0xcc>)
 8004fec:	2002      	movs	r0, #2
 8004fee:	f00c fac7 	bl	8011580 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8004ff2:	491e      	ldr	r1, [pc, #120]	; (800506c <LCD_init+0xd0>)
 8004ff4:	2003      	movs	r0, #3
 8004ff6:	f00c fac3 	bl	8011580 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f00b fa3c 	bl	8010478 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005000:	2000      	movs	r0, #0
 8005002:	f00b fa4d 	bl	80104a0 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005006:	2300      	movs	r3, #0
 8005008:	80fb      	strh	r3, [r7, #6]
 800500a:	e013      	b.n	8005034 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	3301      	adds	r3, #1
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <LCD_init+0xd4>)
 8005012:	441a      	add	r2, r3
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	4916      	ldr	r1, [pc, #88]	; (8005070 <LCD_init+0xd4>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7ff fcef 	bl	8004a00 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	4a12      	ldr	r2, [pc, #72]	; (8005070 <LCD_init+0xd4>)
 8005026:	5cd3      	ldrb	r3, [r2, r3]
 8005028:	b29a      	uxth	r2, r3
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	4413      	add	r3, r2
 800502e:	b29b      	uxth	r3, r3
 8005030:	3302      	adds	r3, #2
 8005032:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	2b4b      	cmp	r3, #75	; 0x4b
 8005038:	d9e8      	bls.n	800500c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800503a:	2000      	movs	r0, #0
 800503c:	f00a febc 	bl	800fdb8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005040:	2001      	movs	r0, #1
 8005042:	f7ff ff8d 	bl	8004f60 <LCD_setPower>
  UG_Update();
 8005046:	f00c fabd 	bl	80115c4 <UG_Update>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	48000800 	.word	0x48000800
 8005058:	20000170 	.word	0x20000170
 800505c:	20001a90 	.word	0x20001a90
 8005060:	08004ea5 	.word	0x08004ea5
 8005064:	08004d8d 	.word	0x08004d8d
 8005068:	08004d1d 	.word	0x08004d1d
 800506c:	08004dfb 	.word	0x08004dfb
 8005070:	08016e4c 	.word	0x08016e4c

08005074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800507e:	2003      	movs	r0, #3
 8005080:	f002 f9b6 	bl	80073f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005084:	200f      	movs	r0, #15
 8005086:	f000 f80d 	bl	80050a4 <HAL_InitTick>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	71fb      	strb	r3, [r7, #7]
 8005094:	e001      	b.n	800509a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005096:	f7fe ff23 	bl	8003ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800509a:	79fb      	ldrb	r3, [r7, #7]

}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <HAL_InitTick+0x68>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_InitTick+0x6c>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_InitTick+0x68>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80050c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80050c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 f9c2 	bl	8007456 <HAL_SYSTICK_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d809      	bhi.n	80050f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050de:	2200      	movs	r2, #0
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	f002 f98e 	bl	8007406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050ea:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <HAL_InitTick+0x70>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e007      	b.n	8005102 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
 80050f6:	e004      	b.n	8005102 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e001      	b.n	8005102 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000180 	.word	0x20000180
 8005110:	20000168 	.word	0x20000168
 8005114:	2000017c 	.word	0x2000017c

08005118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800511c:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_IncTick+0x1c>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_IncTick+0x20>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4413      	add	r3, r2
 8005126:	4a03      	ldr	r2, [pc, #12]	; (8005134 <HAL_IncTick+0x1c>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20001b04 	.word	0x20001b04
 8005138:	20000180 	.word	0x20000180

0800513c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return uwTick;
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <HAL_GetTick+0x14>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20001b04 	.word	0x20001b04

08005154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800515c:	f7ff ffee 	bl	800513c <HAL_GetTick>
 8005160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d004      	beq.n	8005178 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_Delay+0x40>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005178:	bf00      	nop
 800517a:	f7ff ffdf 	bl	800513c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d8f7      	bhi.n	800517a <HAL_Delay+0x26>
  {
  }
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000180 	.word	0x20000180

08005198 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3360      	adds	r3, #96	; 0x60
 8005212:	461a      	mov	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <LL_ADC_SetOffset+0x44>)
 8005222:	4013      	ands	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	03fff000 	.word	0x03fff000

08005248 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3360      	adds	r3, #96	; 0x60
 8005256:	461a      	mov	r2, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3360      	adds	r3, #96	; 0x60
 8005284:	461a      	mov	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	431a      	orrs	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3360      	adds	r3, #96	; 0x60
 80052ba:	461a      	mov	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3360      	adds	r3, #96	; 0x60
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	615a      	str	r2, [r3, #20]
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3330      	adds	r3, #48	; 0x30
 8005372:	461a      	mov	r2, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	4413      	add	r3, r2
 8005380:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	211f      	movs	r1, #31
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	401a      	ands	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	f003 011f 	and.w	r1, r3, #31
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	431a      	orrs	r2, r3
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3314      	adds	r3, #20
 80053f0:	461a      	mov	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0e5b      	lsrs	r3, r3, #25
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	0d1b      	lsrs	r3, r3, #20
 8005408:	f003 031f 	and.w	r3, r3, #31
 800540c:	2107      	movs	r1, #7
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	401a      	ands	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	0d1b      	lsrs	r3, r3, #20
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005450:	43db      	mvns	r3, r3
 8005452:	401a      	ands	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f003 0318 	and.w	r3, r3, #24
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <LL_ADC_SetChannelSingleDiff+0x44>)
 800545c:	40d9      	lsrs	r1, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	400b      	ands	r3, r1
 8005462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005466:	431a      	orrs	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	0007ffff 	.word	0x0007ffff

08005480 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 031f 	and.w	r3, r3, #31
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6093      	str	r3, [r2, #8]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f0:	d101      	bne.n	80054f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005518:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005540:	d101      	bne.n	8005546 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800558c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005590:	f043 0202 	orr.w	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <LL_ADC_IsEnabled+0x18>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <LL_ADC_IsEnabled+0x1a>
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d101      	bne.n	80055e2 <LL_ADC_IsDisableOngoing+0x18>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <LL_ADC_IsDisableOngoing+0x1a>
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d101      	bne.n	8005630 <LL_ADC_REG_IsConversionOngoing+0x18>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b08      	cmp	r3, #8
 8005650:	d101      	bne.n	8005656 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e167      	b.n	800594e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fe fc4b 	bl	8003f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff19 	bl	80054dc <LL_ADC_IsDeepPowerDownEnabled>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff feff 	bl	80054b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff34 	bl	800552c <LL_ADC_IsInternalRegulatorEnabled>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d115      	bne.n	80056f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff ff18 	bl	8005504 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056d4:	4ba0      	ldr	r3, [pc, #640]	; (8005958 <HAL_ADC_Init+0x2f4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	4aa0      	ldr	r2, [pc, #640]	; (800595c <HAL_ADC_Init+0x2f8>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	3301      	adds	r3, #1
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056e8:	e002      	b.n	80056f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f9      	bne.n	80056ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ff16 	bl	800552c <LL_ADC_IsInternalRegulatorEnabled>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570a:	f043 0210 	orr.w	r2, r3, #16
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	f043 0201 	orr.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff76 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 800572c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8100 	bne.w	800593c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 80fc 	bne.w	800593c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005748:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800574c:	f043 0202 	orr.w	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff23 	bl	80055a4 <LL_ADC_IsEnabled>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d111      	bne.n	8005788 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005764:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005768:	f7ff ff1c 	bl	80055a4 <LL_ADC_IsEnabled>
 800576c:	4604      	mov	r4, r0
 800576e:	487c      	ldr	r0, [pc, #496]	; (8005960 <HAL_ADC_Init+0x2fc>)
 8005770:	f7ff ff18 	bl	80055a4 <LL_ADC_IsEnabled>
 8005774:	4603      	mov	r3, r0
 8005776:	4323      	orrs	r3, r4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4619      	mov	r1, r3
 8005782:	4878      	ldr	r0, [pc, #480]	; (8005964 <HAL_ADC_Init+0x300>)
 8005784:	f7ff fd08 	bl	8005198 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	7f5b      	ldrb	r3, [r3, #29]
 800578c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005792:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005798:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800579e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d106      	bne.n	80057c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	045b      	lsls	r3, r3, #17
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	4b60      	ldr	r3, [pc, #384]	; (8005968 <HAL_ADC_Init+0x304>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	69b9      	ldr	r1, [r7, #24]
 80057f0:	430b      	orrs	r3, r1
 80057f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff15 	bl	800563e <LL_ADC_INJ_IsConversionOngoing>
 8005814:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d16d      	bne.n	80058f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d16a      	bne.n	80058f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005826:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800582e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583e:	f023 0302 	bic.w	r3, r3, #2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	69b9      	ldr	r1, [r7, #24]
 8005848:	430b      	orrs	r3, r1
 800584a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691a      	ldr	r2, [r3, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005862:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800586c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6911      	ldr	r1, [r2, #16]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	430b      	orrs	r3, r1
 800587e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005882:	e013      	b.n	80058ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005892:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d118      	bne.n	80058e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058cc:	4311      	orrs	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058d2:	4311      	orrs	r1, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058d8:	430a      	orrs	r2, r1
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	e007      	b.n	80058f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d10c      	bne.n	800591a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f023 010f 	bic.w	r1, r3, #15
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
 8005918:	e007      	b.n	800592a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 020f 	bic.w	r2, r2, #15
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	65da      	str	r2, [r3, #92]	; 0x5c
 800593a:	e007      	b.n	800594c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800594c:	7ffb      	ldrb	r3, [r7, #31]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd90      	pop	{r4, r7, pc}
 8005956:	bf00      	nop
 8005958:	20000168 	.word	0x20000168
 800595c:	053e2d63 	.word	0x053e2d63
 8005960:	50000100 	.word	0x50000100
 8005964:	50000300 	.word	0x50000300
 8005968:	fff04007 	.word	0xfff04007

0800596c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005974:	4893      	ldr	r0, [pc, #588]	; (8005bc4 <HAL_ADC_Start_IT+0x258>)
 8005976:	f7ff fd83 	bl	8005480 <LL_ADC_GetMultimode>
 800597a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fe49 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	f040 8113 	bne.w	8005bb4 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_ADC_Start_IT+0x30>
 8005998:	2302      	movs	r3, #2
 800599a:	e10e      	b.n	8005bba <HAL_ADC_Start_IT+0x24e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fff7 	bl	8006998 <ADC_Enable>
 80059aa:	4603      	mov	r3, r0
 80059ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80fa 	bne.w	8005baa <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a7e      	ldr	r2, [pc, #504]	; (8005bc8 <HAL_ADC_Start_IT+0x25c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d002      	beq.n	80059da <HAL_ADC_Start_IT+0x6e>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	e001      	b.n	80059de <HAL_ADC_Start_IT+0x72>
 80059da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d002      	beq.n	80059ec <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d105      	bne.n	80059f8 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d006      	beq.n	8005a12 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	f023 0206 	bic.w	r2, r3, #6
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	661a      	str	r2, [r3, #96]	; 0x60
 8005a10:	e002      	b.n	8005a18 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	221c      	movs	r2, #28
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 021c 	bic.w	r2, r2, #28
 8005a36:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d108      	bne.n	8005a52 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	605a      	str	r2, [r3, #4]
          break;
 8005a50:	e008      	b.n	8005a64 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0204 	orr.w	r2, r2, #4
 8005a60:	605a      	str	r2, [r3, #4]
          break;
 8005a62:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d107      	bne.n	8005a7c <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0210 	orr.w	r2, r2, #16
 8005a7a:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a51      	ldr	r2, [pc, #324]	; (8005bc8 <HAL_ADC_Start_IT+0x25c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d002      	beq.n	8005a8c <HAL_ADC_Start_IT+0x120>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	e001      	b.n	8005a90 <HAL_ADC_Start_IT+0x124>
 8005a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d008      	beq.n	8005aaa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d002      	beq.n	8005aaa <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d13a      	bne.n	8005b20 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02d      	beq.n	8005b14 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ac0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d110      	bne.n	8005af2 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0220 	bic.w	r2, r2, #32
 8005ade:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aee:	605a      	str	r2, [r3, #4]
              break;
 8005af0:	e010      	b.n	8005b14 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b00:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0220 	orr.w	r2, r2, #32
 8005b10:	605a      	str	r2, [r3, #4]
              break;
 8005b12:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fd69 	bl	80055f0 <LL_ADC_REG_StartConversion>
 8005b1e:	e04b      	b.n	8005bb8 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b24:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a25      	ldr	r2, [pc, #148]	; (8005bc8 <HAL_ADC_Start_IT+0x25c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d002      	beq.n	8005b3c <HAL_ADC_Start_IT+0x1d0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	e001      	b.n	8005b40 <HAL_ADC_Start_IT+0x1d4>
 8005b3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b40:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d034      	beq.n	8005bb8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d110      	bne.n	8005b88 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0220 	bic.w	r2, r2, #32
 8005b74:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b84:	605a      	str	r2, [r3, #4]
              break;
 8005b86:	e017      	b.n	8005bb8 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b96:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0220 	orr.w	r2, r2, #32
 8005ba6:	605a      	str	r2, [r3, #4]
              break;
 8005ba8:	e006      	b.n	8005bb8 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005bb2:	e001      	b.n	8005bb8 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	50000300 	.word	0x50000300
 8005bc8:	50000100 	.word	0x50000100

08005bcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bd8:	4851      	ldr	r0, [pc, #324]	; (8005d20 <HAL_ADC_Start_DMA+0x154>)
 8005bda:	f7ff fc51 	bl	8005480 <LL_ADC_GetMultimode>
 8005bde:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fd17 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 808f 	bne.w	8005d10 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_ADC_Start_DMA+0x34>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e08a      	b.n	8005d16 <HAL_ADC_Start_DMA+0x14a>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d002      	beq.n	8005c1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b09      	cmp	r3, #9
 8005c18:	d173      	bne.n	8005d02 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 febc 	bl	8006998 <ADC_Enable>
 8005c20:	4603      	mov	r3, r0
 8005c22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d166      	bne.n	8005cf8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a38      	ldr	r2, [pc, #224]	; (8005d24 <HAL_ADC_Start_DMA+0x158>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d002      	beq.n	8005c4e <HAL_ADC_Start_DMA+0x82>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	e001      	b.n	8005c52 <HAL_ADC_Start_DMA+0x86>
 8005c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d002      	beq.n	8005c60 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d006      	beq.n	8005c86 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7c:	f023 0206 	bic.w	r2, r3, #6
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	661a      	str	r2, [r3, #96]	; 0x60
 8005c84:	e002      	b.n	8005c8c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <HAL_ADC_Start_DMA+0x15c>)
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_ADC_Start_DMA+0x160>)
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca0:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <HAL_ADC_Start_DMA+0x164>)
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	221c      	movs	r2, #28
 8005caa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0210 	orr.w	r2, r2, #16
 8005cc2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3340      	adds	r3, #64	; 0x40
 8005cde:	4619      	mov	r1, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f001 fe72 	bl	80079cc <HAL_DMA_Start_IT>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fc7d 	bl	80055f0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005cf6:	e00d      	b.n	8005d14 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005d00:	e008      	b.n	8005d14 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005d0e:	e001      	b.n	8005d14 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
 8005d12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	50000300 	.word	0x50000300
 8005d24:	50000100 	.word	0x50000100
 8005d28:	08006b63 	.word	0x08006b63
 8005d2c:	08006c3b 	.word	0x08006c3b
 8005d30:	08006c57 	.word	0x08006c57

08005d34 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d50:	4883      	ldr	r0, [pc, #524]	; (8005f60 <HAL_ADC_IRQHandler+0x22c>)
 8005d52:	f7ff fb95 	bl	8005480 <LL_ADC_GetMultimode>
 8005d56:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <HAL_ADC_IRQHandler+0x5e>
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d012      	beq.n	8005d92 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 f9b5 	bl	80070f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <HAL_ADC_IRQHandler+0x72>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8085 	beq.w	8005ebc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d07f      	beq.n	8005ebc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff faaf 	bl	800533c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d064      	beq.n	8005eae <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5e      	ldr	r2, [pc, #376]	; (8005f64 <HAL_ADC_IRQHandler+0x230>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d002      	beq.n	8005df4 <HAL_ADC_IRQHandler+0xc0>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	e001      	b.n	8005df8 <HAL_ADC_IRQHandler+0xc4>
 8005df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d008      	beq.n	8005e12 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d002      	beq.n	8005e12 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b09      	cmp	r3, #9
 8005e10:	d104      	bne.n	8005e1c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e00d      	b.n	8005e38 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a50      	ldr	r2, [pc, #320]	; (8005f64 <HAL_ADC_IRQHandler+0x230>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d002      	beq.n	8005e2c <HAL_ADC_IRQHandler+0xf8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	e001      	b.n	8005e30 <HAL_ADC_IRQHandler+0xfc>
 8005e2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005e30:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d135      	bne.n	8005eae <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d12e      	bne.n	8005eae <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fbdf 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11a      	bne.n	8005e96 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 020c 	bic.w	r2, r2, #12
 8005e6e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d112      	bne.n	8005eae <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8c:	f043 0201 	orr.w	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e94:	e00b      	b.n	8005eae <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	f043 0210 	orr.w	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea6:	f043 0201 	orr.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f95a 	bl	8006168 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	220c      	movs	r2, #12
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <HAL_ADC_IRQHandler+0x19c>
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 809e 	beq.w	8006018 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8098 	beq.w	8006018 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fa58 	bl	80053ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005f0a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff fa13 	bl	800533c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f16:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a11      	ldr	r2, [pc, #68]	; (8005f64 <HAL_ADC_IRQHandler+0x230>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d002      	beq.n	8005f28 <HAL_ADC_IRQHandler+0x1f4>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	e001      	b.n	8005f2c <HAL_ADC_IRQHandler+0x1f8>
 8005f28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d008      	beq.n	8005f46 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d002      	beq.n	8005f46 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b07      	cmp	r3, #7
 8005f44:	d104      	bne.n	8005f50 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	e011      	b.n	8005f74 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a03      	ldr	r2, [pc, #12]	; (8005f64 <HAL_ADC_IRQHandler+0x230>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d006      	beq.n	8005f68 <HAL_ADC_IRQHandler+0x234>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	e005      	b.n	8005f6c <HAL_ADC_IRQHandler+0x238>
 8005f60:	50000300 	.word	0x50000300
 8005f64:	50000100 	.word	0x50000100
 8005f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f6c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d047      	beq.n	800600a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_ADC_IRQHandler+0x260>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d03f      	beq.n	800600a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13a      	bne.n	800600a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d133      	bne.n	800600a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d12e      	bne.n	800600a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fb44 	bl	800563e <LL_ADC_INJ_IsConversionOngoing>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11a      	bne.n	8005ff2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fca:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d112      	bne.n	800600a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	f043 0201 	orr.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ff0:	e00b      	b.n	800600a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff6:	f043 0210 	orr.w	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006002:	f043 0201 	orr.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fb ff56 	bl	8001ebc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2260      	movs	r2, #96	; 0x60
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d011      	beq.n	8006046 <HAL_ADC_IRQHandler+0x312>
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00c      	beq.n	8006046 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8a9 	bl	8006190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2280      	movs	r2, #128	; 0x80
 8006044:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <HAL_ADC_IRQHandler+0x342>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00d      	beq.n	8006076 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 f830 	bl	80070cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006074:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607c:	2b00      	cmp	r3, #0
 800607e:	d012      	beq.n	80060a6 <HAL_ADC_IRQHandler+0x372>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 f822 	bl	80070e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d036      	beq.n	800611e <HAL_ADC_IRQHandler+0x3ea>
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d031      	beq.n	800611e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80060c2:	2301      	movs	r3, #1
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
 80060c6:	e014      	b.n	80060f2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80060ce:	4825      	ldr	r0, [pc, #148]	; (8006164 <HAL_ADC_IRQHandler+0x430>)
 80060d0:	f7ff f9e4 	bl	800549c <LL_ADC_GetMultiDMATransfer>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80060da:	2301      	movs	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
 80060de:	e008      	b.n	80060f2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80060ee:	2301      	movs	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10e      	bne.n	8006116 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	f043 0202 	orr.w	r2, r3, #2
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f847 	bl	80061a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2210      	movs	r2, #16
 800611c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d018      	beq.n	800615a <HAL_ADC_IRQHandler+0x426>
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612e:	2b00      	cmp	r3, #0
 8006130:	d013      	beq.n	800615a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006152:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 ffaf 	bl	80070b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800615a:	bf00      	nop
 800615c:	3728      	adds	r7, #40	; 0x28
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	50000300 	.word	0x50000300

08006168 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b0b6      	sub	sp, #216	; 0xd8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d101      	bne.n	80061da <HAL_ADC_ConfigChannel+0x22>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e3c8      	b.n	800696c <HAL_ADC_ConfigChannel+0x7b4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fa16 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 83ad 	bne.w	800694e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	f7ff f8ae 	bl	8005362 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fa04 	bl	8005618 <LL_ADC_REG_IsConversionOngoing>
 8006210:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff fa10 	bl	800563e <LL_ADC_INJ_IsConversionOngoing>
 800621e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006222:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 81d9 	bne.w	80065de <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800622c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 81d4 	bne.w	80065de <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623e:	d10f      	bne.n	8006260 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	4619      	mov	r1, r3
 800624c:	f7ff f8c8 	bl	80053e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff f85c 	bl	8005316 <LL_ADC_SetSamplingTimeCommonConfig>
 800625e:	e00e      	b.n	800627e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6819      	ldr	r1, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	461a      	mov	r2, r3
 800626e:	f7ff f8b7 	bl	80053e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff f84c 	bl	8005316 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	08db      	lsrs	r3, r3, #3
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d022      	beq.n	80062e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6919      	ldr	r1, [r3, #16]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062b0:	f7fe ffa6 	bl	8005200 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	6919      	ldr	r1, [r3, #16]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	461a      	mov	r2, r3
 80062c2:	f7fe fff2 	bl	80052aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d102      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x124>
 80062d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062da:	e000      	b.n	80062de <HAL_ADC_ConfigChannel+0x126>
 80062dc:	2300      	movs	r3, #0
 80062de:	461a      	mov	r2, r3
 80062e0:	f7fe fffe 	bl	80052e0 <LL_ADC_SetOffsetSaturation>
 80062e4:	e17b      	b.n	80065de <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe ffab 	bl	8005248 <LL_ADC_GetOffsetChannel>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x15a>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe ffa0 	bl	8005248 <LL_ADC_GetOffsetChannel>
 8006308:	4603      	mov	r3, r0
 800630a:	0e9b      	lsrs	r3, r3, #26
 800630c:	f003 021f 	and.w	r2, r3, #31
 8006310:	e01e      	b.n	8006350 <HAL_ADC_ConfigChannel+0x198>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe ff95 	bl	8005248 <LL_ADC_GetOffsetChannel>
 800631e:	4603      	mov	r3, r0
 8006320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006324:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006328:	fa93 f3a3 	rbit	r3, r3
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006330:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006340:	2320      	movs	r3, #32
 8006342:	e004      	b.n	800634e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	b2db      	uxtb	r3, r3
 800634e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x1b0>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0e9b      	lsrs	r3, r3, #26
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	e018      	b.n	800639a <HAL_ADC_ConfigChannel+0x1e2>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006374:	fa93 f3a3 	rbit	r3, r3
 8006378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800637c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800638c:	2320      	movs	r3, #32
 800638e:	e004      	b.n	800639a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006390:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006394:	fab3 f383 	clz	r3, r3
 8006398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800639a:	429a      	cmp	r2, r3
 800639c:	d106      	bne.n	80063ac <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe ff64 	bl	8005274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe ff48 	bl	8005248 <LL_ADC_GetOffsetChannel>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <HAL_ADC_ConfigChannel+0x220>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe ff3d 	bl	8005248 <LL_ADC_GetOffsetChannel>
 80063ce:	4603      	mov	r3, r0
 80063d0:	0e9b      	lsrs	r3, r3, #26
 80063d2:	f003 021f 	and.w	r2, r3, #31
 80063d6:	e01e      	b.n	8006416 <HAL_ADC_ConfigChannel+0x25e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2101      	movs	r1, #1
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe ff32 	bl	8005248 <LL_ADC_GetOffsetChannel>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80063f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80063fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e004      	b.n	8006414 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800640a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <HAL_ADC_ConfigChannel+0x276>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	0e9b      	lsrs	r3, r3, #26
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	e018      	b.n	8006460 <HAL_ADC_ConfigChannel+0x2a8>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800644a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e004      	b.n	8006460 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006460:	429a      	cmp	r2, r3
 8006462:	d106      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	2101      	movs	r1, #1
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe ff01 	bl	8005274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2102      	movs	r1, #2
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fee5 	bl	8005248 <LL_ADC_GetOffsetChannel>
 800647e:	4603      	mov	r3, r0
 8006480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <HAL_ADC_ConfigChannel+0x2e6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe feda 	bl	8005248 <LL_ADC_GetOffsetChannel>
 8006494:	4603      	mov	r3, r0
 8006496:	0e9b      	lsrs	r3, r3, #26
 8006498:	f003 021f 	and.w	r2, r3, #31
 800649c:	e01e      	b.n	80064dc <HAL_ADC_ConfigChannel+0x324>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2102      	movs	r1, #2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fecf 	bl	8005248 <LL_ADC_GetOffsetChannel>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b4:	fa93 f3a3 	rbit	r3, r3
 80064b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80064bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80064c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80064c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80064cc:	2320      	movs	r3, #32
 80064ce:	e004      	b.n	80064da <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80064d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064d4:	fab3 f383 	clz	r3, r3
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x33c>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	0e9b      	lsrs	r3, r3, #26
 80064ee:	f003 031f 	and.w	r3, r3, #31
 80064f2:	e016      	b.n	8006522 <HAL_ADC_ConfigChannel+0x36a>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006500:	fa93 f3a3 	rbit	r3, r3
 8006504:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800650c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006514:	2320      	movs	r3, #32
 8006516:	e004      	b.n	8006522 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800651c:	fab3 f383 	clz	r3, r3
 8006520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006522:	429a      	cmp	r2, r3
 8006524:	d106      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	2102      	movs	r1, #2
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fea0 	bl	8005274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2103      	movs	r1, #3
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fe84 	bl	8005248 <LL_ADC_GetOffsetChannel>
 8006540:	4603      	mov	r3, r0
 8006542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10a      	bne.n	8006560 <HAL_ADC_ConfigChannel+0x3a8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2103      	movs	r1, #3
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fe79 	bl	8005248 <LL_ADC_GetOffsetChannel>
 8006556:	4603      	mov	r3, r0
 8006558:	0e9b      	lsrs	r3, r3, #26
 800655a:	f003 021f 	and.w	r2, r3, #31
 800655e:	e017      	b.n	8006590 <HAL_ADC_ConfigChannel+0x3d8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2103      	movs	r1, #3
 8006566:	4618      	mov	r0, r3
 8006568:	f7fe fe6e 	bl	8005248 <LL_ADC_GetOffsetChannel>
 800656c:	4603      	mov	r3, r0
 800656e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006572:	fa93 f3a3 	rbit	r3, r3
 8006576:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800657a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800657c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006582:	2320      	movs	r3, #32
 8006584:	e003      	b.n	800658e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006588:	fab3 f383 	clz	r3, r3
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x3f0>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0e9b      	lsrs	r3, r3, #26
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	e011      	b.n	80065cc <HAL_ADC_ConfigChannel+0x414>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b0:	fa93 f3a3 	rbit	r3, r3
 80065b4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80065b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80065c0:	2320      	movs	r3, #32
 80065c2:	e003      	b.n	80065cc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80065c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c6:	fab3 f383 	clz	r3, r3
 80065ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d106      	bne.n	80065de <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	2103      	movs	r1, #3
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fe4b 	bl	8005274 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe ffde 	bl	80055a4 <LL_ADC_IsEnabled>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 8140 	bne.w	8006870 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6819      	ldr	r1, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	461a      	mov	r2, r3
 80065fe:	f7fe ff1b 	bl	8005438 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a8f      	ldr	r2, [pc, #572]	; (8006844 <HAL_ADC_ConfigChannel+0x68c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	f040 8131 	bne.w	8006870 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x47e>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0e9b      	lsrs	r3, r3, #26
 8006624:	3301      	adds	r3, #1
 8006626:	f003 031f 	and.w	r3, r3, #31
 800662a:	2b09      	cmp	r3, #9
 800662c:	bf94      	ite	ls
 800662e:	2301      	movls	r3, #1
 8006630:	2300      	movhi	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e019      	b.n	800666a <HAL_ADC_ConfigChannel+0x4b2>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663e:	fa93 f3a3 	rbit	r3, r3
 8006642:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006646:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006648:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800664e:	2320      	movs	r3, #32
 8006650:	e003      	b.n	800665a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	3301      	adds	r3, #1
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2b09      	cmp	r3, #9
 8006662:	bf94      	ite	ls
 8006664:	2301      	movls	r3, #1
 8006666:	2300      	movhi	r3, #0
 8006668:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800666a:	2b00      	cmp	r3, #0
 800666c:	d079      	beq.n	8006762 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_ADC_ConfigChannel+0x4d2>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	0e9b      	lsrs	r3, r3, #26
 8006680:	3301      	adds	r3, #1
 8006682:	069b      	lsls	r3, r3, #26
 8006684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006688:	e015      	b.n	80066b6 <HAL_ADC_ConfigChannel+0x4fe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	fa93 f3a3 	rbit	r3, r3
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800669c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80066a2:	2320      	movs	r3, #32
 80066a4:	e003      	b.n	80066ae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80066a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066a8:	fab3 f383 	clz	r3, r3
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	3301      	adds	r3, #1
 80066b0:	069b      	lsls	r3, r3, #26
 80066b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x51e>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	0e9b      	lsrs	r3, r3, #26
 80066c8:	3301      	adds	r3, #1
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2101      	movs	r1, #1
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	e017      	b.n	8006706 <HAL_ADC_ConfigChannel+0x54e>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	fa93 f3a3 	rbit	r3, r3
 80066e2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80066e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80066ee:	2320      	movs	r3, #32
 80066f0:	e003      	b.n	80066fa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80066f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f4:	fab3 f383 	clz	r3, r3
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	3301      	adds	r3, #1
 80066fc:	f003 031f 	and.w	r3, r3, #31
 8006700:	2101      	movs	r1, #1
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	ea42 0103 	orr.w	r1, r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <HAL_ADC_ConfigChannel+0x574>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	0e9b      	lsrs	r3, r3, #26
 800671c:	3301      	adds	r3, #1
 800671e:	f003 021f 	and.w	r2, r3, #31
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	051b      	lsls	r3, r3, #20
 800672a:	e018      	b.n	800675e <HAL_ADC_ConfigChannel+0x5a6>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	fa93 f3a3 	rbit	r3, r3
 8006738:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800673e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006744:	2320      	movs	r3, #32
 8006746:	e003      	b.n	8006750 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	fab3 f383 	clz	r3, r3
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3301      	adds	r3, #1
 8006752:	f003 021f 	and.w	r2, r3, #31
 8006756:	4613      	mov	r3, r2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4413      	add	r3, r2
 800675c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800675e:	430b      	orrs	r3, r1
 8006760:	e081      	b.n	8006866 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	2b00      	cmp	r3, #0
 800676c:	d107      	bne.n	800677e <HAL_ADC_ConfigChannel+0x5c6>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	0e9b      	lsrs	r3, r3, #26
 8006774:	3301      	adds	r3, #1
 8006776:	069b      	lsls	r3, r3, #26
 8006778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800677c:	e015      	b.n	80067aa <HAL_ADC_ConfigChannel+0x5f2>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	fa93 f3a3 	rbit	r3, r3
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006796:	2320      	movs	r3, #32
 8006798:	e003      	b.n	80067a2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	fab3 f383 	clz	r3, r3
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	3301      	adds	r3, #1
 80067a4:	069b      	lsls	r3, r3, #26
 80067a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_ADC_ConfigChannel+0x612>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	0e9b      	lsrs	r3, r3, #26
 80067bc:	3301      	adds	r3, #1
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2101      	movs	r1, #1
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	e017      	b.n	80067fa <HAL_ADC_ConfigChannel+0x642>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	fa93 f3a3 	rbit	r3, r3
 80067d6:	61fb      	str	r3, [r7, #28]
  return result;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80067e2:	2320      	movs	r3, #32
 80067e4:	e003      	b.n	80067ee <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	fab3 f383 	clz	r3, r3
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	3301      	adds	r3, #1
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	ea42 0103 	orr.w	r1, r2, r3
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x66e>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0e9b      	lsrs	r3, r3, #26
 8006810:	3301      	adds	r3, #1
 8006812:	f003 021f 	and.w	r2, r3, #31
 8006816:	4613      	mov	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4413      	add	r3, r2
 800681c:	3b1e      	subs	r3, #30
 800681e:	051b      	lsls	r3, r3, #20
 8006820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006824:	e01e      	b.n	8006864 <HAL_ADC_ConfigChannel+0x6ac>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	fa93 f3a3 	rbit	r3, r3
 8006832:	613b      	str	r3, [r7, #16]
  return result;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800683e:	2320      	movs	r3, #32
 8006840:	e006      	b.n	8006850 <HAL_ADC_ConfigChannel+0x698>
 8006842:	bf00      	nop
 8006844:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	fab3 f383 	clz	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	3301      	adds	r3, #1
 8006852:	f003 021f 	and.w	r2, r3, #31
 8006856:	4613      	mov	r3, r2
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	3b1e      	subs	r3, #30
 800685e:	051b      	lsls	r3, r3, #20
 8006860:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006864:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800686a:	4619      	mov	r1, r3
 800686c:	f7fe fdb8 	bl	80053e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b3f      	ldr	r3, [pc, #252]	; (8006974 <HAL_ADC_ConfigChannel+0x7bc>)
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d071      	beq.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800687c:	483e      	ldr	r0, [pc, #248]	; (8006978 <HAL_ADC_ConfigChannel+0x7c0>)
 800687e:	f7fe fcb1 	bl	80051e4 <LL_ADC_GetCommonPathInternalCh>
 8006882:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a3c      	ldr	r2, [pc, #240]	; (800697c <HAL_ADC_ConfigChannel+0x7c4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_ADC_ConfigChannel+0x6e2>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a3a      	ldr	r2, [pc, #232]	; (8006980 <HAL_ADC_ConfigChannel+0x7c8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d127      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800689a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800689e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d121      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ae:	d157      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068b8:	4619      	mov	r1, r3
 80068ba:	482f      	ldr	r0, [pc, #188]	; (8006978 <HAL_ADC_ConfigChannel+0x7c0>)
 80068bc:	f7fe fc7f 	bl	80051be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <HAL_ADC_ConfigChannel+0x7cc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	4a30      	ldr	r2, [pc, #192]	; (8006988 <HAL_ADC_ConfigChannel+0x7d0>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	099b      	lsrs	r3, r3, #6
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80068da:	e002      	b.n	80068e2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3b01      	subs	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f9      	bne.n	80068dc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068e8:	e03a      	b.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a27      	ldr	r2, [pc, #156]	; (800698c <HAL_ADC_ConfigChannel+0x7d4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d113      	bne.n	800691c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10d      	bne.n	800691c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a22      	ldr	r2, [pc, #136]	; (8006990 <HAL_ADC_ConfigChannel+0x7d8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02a      	beq.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800690a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800690e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006912:	4619      	mov	r1, r3
 8006914:	4818      	ldr	r0, [pc, #96]	; (8006978 <HAL_ADC_ConfigChannel+0x7c0>)
 8006916:	f7fe fc52 	bl	80051be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800691a:	e021      	b.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <HAL_ADC_ConfigChannel+0x7dc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d11c      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d116      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <HAL_ADC_ConfigChannel+0x7d8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d011      	beq.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800693c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006944:	4619      	mov	r1, r3
 8006946:	480c      	ldr	r0, [pc, #48]	; (8006978 <HAL_ADC_ConfigChannel+0x7c0>)
 8006948:	f7fe fc39 	bl	80051be <LL_ADC_SetCommonPathInternalCh>
 800694c:	e008      	b.n	8006960 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006968:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800696c:	4618      	mov	r0, r3
 800696e:	37d8      	adds	r7, #216	; 0xd8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	80080000 	.word	0x80080000
 8006978:	50000300 	.word	0x50000300
 800697c:	c3210000 	.word	0xc3210000
 8006980:	90c00010 	.word	0x90c00010
 8006984:	20000168 	.word	0x20000168
 8006988:	053e2d63 	.word	0x053e2d63
 800698c:	c7520000 	.word	0xc7520000
 8006990:	50000100 	.word	0x50000100
 8006994:	cb840000 	.word	0xcb840000

08006998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7fe fdfb 	bl	80055a4 <LL_ADC_IsEnabled>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d169      	bne.n	8006a88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <ADC_Enable+0xfc>)
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00d      	beq.n	80069de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069c6:	f043 0210 	orr.w	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d2:	f043 0201 	orr.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e055      	b.n	8006a8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fdb6 	bl	8005554 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069e8:	482b      	ldr	r0, [pc, #172]	; (8006a98 <ADC_Enable+0x100>)
 80069ea:	f7fe fbfb 	bl	80051e4 <LL_ADC_GetCommonPathInternalCh>
 80069ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80069f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069f8:	4b28      	ldr	r3, [pc, #160]	; (8006a9c <ADC_Enable+0x104>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	099b      	lsrs	r3, r3, #6
 80069fe:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <ADC_Enable+0x108>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	099b      	lsrs	r3, r3, #6
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a12:	e002      	b.n	8006a1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f9      	bne.n	8006a14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a20:	f7fe fb8c 	bl	800513c <HAL_GetTick>
 8006a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a26:	e028      	b.n	8006a7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fdb9 	bl	80055a4 <LL_ADC_IsEnabled>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fd89 	bl	8005554 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a42:	f7fe fb7b 	bl	800513c <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d914      	bls.n	8006a7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d00d      	beq.n	8006a7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	f043 0210 	orr.w	r2, r3, #16
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e007      	b.n	8006a8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d1cf      	bne.n	8006a28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	8000003f 	.word	0x8000003f
 8006a98:	50000300 	.word	0x50000300
 8006a9c:	20000168 	.word	0x20000168
 8006aa0:	053e2d63 	.word	0x053e2d63

08006aa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fd8a 	bl	80055ca <LL_ADC_IsDisableOngoing>
 8006ab6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fd71 	bl	80055a4 <LL_ADC_IsEnabled>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d047      	beq.n	8006b58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d144      	bne.n	8006b58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 030d 	and.w	r3, r3, #13
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10c      	bne.n	8006af6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fd4b 	bl	800557c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2203      	movs	r2, #3
 8006aec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006aee:	f7fe fb25 	bl	800513c <HAL_GetTick>
 8006af2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006af4:	e029      	b.n	8006b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afa:	f043 0210 	orr.w	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e023      	b.n	8006b5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b12:	f7fe fb13 	bl	800513c <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d914      	bls.n	8006b4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00d      	beq.n	8006b4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b32:	f043 0210 	orr.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3e:	f043 0201 	orr.w	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e007      	b.n	8006b5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1dc      	bne.n	8006b12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d14b      	bne.n	8006c14 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d021      	beq.n	8006bda <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fbce 	bl	800533c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d032      	beq.n	8006c0c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d12b      	bne.n	8006c0c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d11f      	bne.n	8006c0c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	f043 0201 	orr.w	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bd8:	e018      	b.n	8006c0c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d111      	bne.n	8006c0c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c04:	f043 0201 	orr.w	r2, r3, #1
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff faab 	bl	8006168 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c12:	e00e      	b.n	8006c32 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fabf 	bl	80061a4 <HAL_ADC_ErrorCallback>
}
 8006c26:	e004      	b.n	8006c32 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
}
 8006c32:	bf00      	nop
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff fa97 	bl	800617c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	f043 0204 	orr.w	r2, r3, #4
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fa91 	bl	80061a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <LL_ADC_INJ_GetTrigAuto>:
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <LL_ADC_GetMultimode>:
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_ADC_IsEnabled>:
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <LL_ADC_IsEnabled+0x18>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <LL_ADC_IsEnabled+0x1a>
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <LL_ADC_StartCalibration>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <LL_ADC_IsCalibrationOnGoing>:
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2e:	d101      	bne.n	8006d34 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <LL_ADC_REG_IsConversionOngoing>:
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d101      	bne.n	8006d5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <LL_ADC_INJ_StartConversion>:
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d7c:	f043 0208 	orr.w	r2, r3, #8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_ADC_INJ_IsConversionOngoing>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d101      	bne.n	8006da8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_ADCEx_Calibration_Start+0x1c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e04d      	b.n	8006e70 <HAL_ADCEx_Calibration_Start+0xb8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fe61 	bl	8006aa4 <ADC_Disable>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d136      	bne.n	8006e5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006df4:	f023 0302 	bic.w	r3, r3, #2
 8006df8:	f043 0202 	orr.w	r2, r3, #2
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff ff6e 	bl	8006ce8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e0c:	e014      	b.n	8006e38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d90d      	bls.n	8006e38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	f023 0312 	bic.w	r3, r3, #18
 8006e24:	f043 0210 	orr.w	r2, r3, #16
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e01b      	b.n	8006e70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff ff6c 	bl	8006d1a <LL_ADC_IsCalibrationOnGoing>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e2      	bne.n	8006e0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	f023 0303 	bic.w	r3, r3, #3
 8006e50:	f043 0201 	orr.w	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e58:	e005      	b.n	8006e66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5e:	f043 0210 	orr.w	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	0004de01 	.word	0x0004de01

08006e7c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e84:	486e      	ldr	r0, [pc, #440]	; (8007040 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8006e86:	f7ff ff0e 	bl	8006ca6 <LL_ADC_GetMultimode>
 8006e8a:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff ff7d 	bl	8006d90 <LL_ADC_INJ_IsConversionOngoing>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e0ca      	b.n	8007036 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eaa:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0b2      	b.n	8007036 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_ADCEx_InjectedStart_IT+0x62>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e0ab      	b.n	8007036 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fd56 	bl	8006998 <ADC_Enable>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 809a 	bne.w	800702c <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f08:	f023 0208 	bic.w	r2, r3, #8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60
 8006f10:	e002      	b.n	8006f18 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a44      	ldr	r2, [pc, #272]	; (8007044 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d002      	beq.n	8006f3c <HAL_ADCEx_InjectedStart_IT+0xc0>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e001      	b.n	8006f40 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8006f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d002      	beq.n	8006f4e <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2260      	movs	r2, #96	; 0x60
 8006f60:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f86:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d110      	bne.n	8006fb2 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0220 	bic.w	r2, r2, #32
 8006f9e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fae:	605a      	str	r2, [r3, #4]
          break;
 8006fb0:	e010      	b.n	8006fd4 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0220 	orr.w	r2, r2, #32
 8006fd0:	605a      	str	r2, [r3, #4]
          break;
 8006fd2:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d002      	beq.n	8006fe4 <HAL_ADCEx_InjectedStart_IT+0x168>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	e001      	b.n	8006fe8 <HAL_ADCEx_InjectedStart_IT+0x16c>
 8006fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d008      	beq.n	8007002 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d002      	beq.n	8007002 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b07      	cmp	r3, #7
 8007000:	d10d      	bne.n	800701e <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fe3f 	bl	8006c8a <LL_ADC_INJ_GetTrigAuto>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d110      	bne.n	8007034 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fea6 	bl	8006d68 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 800701c:	e00a      	b.n	8007034 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007022:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	65da      	str	r2, [r3, #92]	; 0x5c
 800702a:	e003      	b.n	8007034 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	50000300 	.word	0x50000300
 8007044:	50000100 	.word	0x50000100

08007048 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f240 321b 	movw	r2, #795	; 0x31b
 8007058:	4293      	cmp	r3, r2
 800705a:	d00e      	beq.n	800707a <HAL_ADCEx_InjectedGetValue+0x32>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8007062:	d21c      	bcs.n	800709e <HAL_ADCEx_InjectedGetValue+0x56>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f240 120f 	movw	r2, #271	; 0x10f
 800706a:	4293      	cmp	r3, r2
 800706c:	d011      	beq.n	8007092 <HAL_ADCEx_InjectedGetValue+0x4a>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f240 2215 	movw	r2, #533	; 0x215
 8007074:	4293      	cmp	r3, r2
 8007076:	d006      	beq.n	8007086 <HAL_ADCEx_InjectedGetValue+0x3e>
 8007078:	e011      	b.n	800709e <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007082:	60fb      	str	r3, [r7, #12]
      break;
 8007084:	e011      	b.n	80070aa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708e:	60fb      	str	r3, [r7, #12]
      break;
 8007090:	e00b      	b.n	80070aa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709a:	60fb      	str	r3, [r7, #12]
      break;
 800709c:	e005      	b.n	80070aa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a6:	60fb      	str	r3, [r7, #12]
      break;
 80070a8:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007108:	b590      	push	{r4, r7, lr}
 800710a:	b0a1      	sub	sp, #132	; 0x84
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e08b      	b.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800712e:	2300      	movs	r3, #0
 8007130:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007132:	2300      	movs	r3, #0
 8007134:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800713e:	d102      	bne.n	8007146 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007140:	4b41      	ldr	r3, [pc, #260]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8007142:	60bb      	str	r3, [r7, #8]
 8007144:	e001      	b.n	800714a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e06a      	b.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fde9 	bl	8006d42 <LL_ADC_REG_IsConversionOngoing>
 8007170:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fde3 	bl	8006d42 <LL_ADC_REG_IsConversionOngoing>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d14c      	bne.n	800721c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007184:	2b00      	cmp	r3, #0
 8007186:	d149      	bne.n	800721c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007188:	4b30      	ldr	r3, [pc, #192]	; (800724c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800718a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d028      	beq.n	80071e6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6859      	ldr	r1, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071a6:	035b      	lsls	r3, r3, #13
 80071a8:	430b      	orrs	r3, r1
 80071aa:	431a      	orrs	r2, r3
 80071ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80071b4:	f7ff fd85 	bl	8006cc2 <LL_ADC_IsEnabled>
 80071b8:	4604      	mov	r4, r0
 80071ba:	4823      	ldr	r0, [pc, #140]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80071bc:	f7ff fd81 	bl	8006cc2 <LL_ADC_IsEnabled>
 80071c0:	4603      	mov	r3, r0
 80071c2:	4323      	orrs	r3, r4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d133      	bne.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80071c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80071d0:	f023 030f 	bic.w	r3, r3, #15
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	6811      	ldr	r1, [r2, #0]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	6892      	ldr	r2, [r2, #8]
 80071dc:	430a      	orrs	r2, r1
 80071de:	431a      	orrs	r2, r3
 80071e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80071e4:	e024      	b.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80071e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80071f6:	f7ff fd64 	bl	8006cc2 <LL_ADC_IsEnabled>
 80071fa:	4604      	mov	r4, r0
 80071fc:	4812      	ldr	r0, [pc, #72]	; (8007248 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80071fe:	f7ff fd60 	bl	8006cc2 <LL_ADC_IsEnabled>
 8007202:	4603      	mov	r3, r0
 8007204:	4323      	orrs	r3, r4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d112      	bne.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800720a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007212:	f023 030f 	bic.w	r3, r3, #15
 8007216:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007218:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800721a:	e009      	b.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800722e:	e000      	b.n	8007232 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007230:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800723a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800723e:	4618      	mov	r0, r3
 8007240:	3784      	adds	r7, #132	; 0x84
 8007242:	46bd      	mov	sp, r7
 8007244:	bd90      	pop	{r4, r7, pc}
 8007246:	bf00      	nop
 8007248:	50000100 	.word	0x50000100
 800724c:	50000300 	.word	0x50000300

08007250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f003 0307 	and.w	r3, r3, #7
 800725e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <__NVIC_SetPriorityGrouping+0x44>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800726c:	4013      	ands	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800727c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007282:	4a04      	ldr	r2, [pc, #16]	; (8007294 <__NVIC_SetPriorityGrouping+0x44>)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	60d3      	str	r3, [r2, #12]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	e000ed00 	.word	0xe000ed00

08007298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <__NVIC_GetPriorityGrouping+0x18>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	0a1b      	lsrs	r3, r3, #8
 80072a2:	f003 0307 	and.w	r3, r3, #7
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	e000ed00 	.word	0xe000ed00

080072b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	db0b      	blt.n	80072de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	f003 021f 	and.w	r2, r3, #31
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <__NVIC_EnableIRQ+0x38>)
 80072ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	2001      	movs	r0, #1
 80072d6:	fa00 f202 	lsl.w	r2, r0, r2
 80072da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80072de:	bf00      	nop
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	e000e100 	.word	0xe000e100

080072f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db0a      	blt.n	800731a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	b2da      	uxtb	r2, r3
 8007308:	490c      	ldr	r1, [pc, #48]	; (800733c <__NVIC_SetPriority+0x4c>)
 800730a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730e:	0112      	lsls	r2, r2, #4
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	440b      	add	r3, r1
 8007314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007318:	e00a      	b.n	8007330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	4908      	ldr	r1, [pc, #32]	; (8007340 <__NVIC_SetPriority+0x50>)
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	3b04      	subs	r3, #4
 8007328:	0112      	lsls	r2, r2, #4
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	440b      	add	r3, r1
 800732e:	761a      	strb	r2, [r3, #24]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	e000e100 	.word	0xe000e100
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007344:	b480      	push	{r7}
 8007346:	b089      	sub	sp, #36	; 0x24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f1c3 0307 	rsb	r3, r3, #7
 800735e:	2b04      	cmp	r3, #4
 8007360:	bf28      	it	cs
 8007362:	2304      	movcs	r3, #4
 8007364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3304      	adds	r3, #4
 800736a:	2b06      	cmp	r3, #6
 800736c:	d902      	bls.n	8007374 <NVIC_EncodePriority+0x30>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3b03      	subs	r3, #3
 8007372:	e000      	b.n	8007376 <NVIC_EncodePriority+0x32>
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	43da      	mvns	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	401a      	ands	r2, r3
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800738c:	f04f 31ff 	mov.w	r1, #4294967295
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	43d9      	mvns	r1, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800739c:	4313      	orrs	r3, r2
         );
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3724      	adds	r7, #36	; 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073bc:	d301      	bcc.n	80073c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073be:	2301      	movs	r3, #1
 80073c0:	e00f      	b.n	80073e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073c2:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <SysTick_Config+0x40>)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073ca:	210f      	movs	r1, #15
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	f7ff ff8e 	bl	80072f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <SysTick_Config+0x40>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073da:	4b04      	ldr	r3, [pc, #16]	; (80073ec <SysTick_Config+0x40>)
 80073dc:	2207      	movs	r2, #7
 80073de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	e000e010 	.word	0xe000e010

080073f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff ff29 	bl	8007250 <__NVIC_SetPriorityGrouping>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	4603      	mov	r3, r0
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007414:	f7ff ff40 	bl	8007298 <__NVIC_GetPriorityGrouping>
 8007418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	6978      	ldr	r0, [r7, #20]
 8007420:	f7ff ff90 	bl	8007344 <NVIC_EncodePriority>
 8007424:	4602      	mov	r2, r0
 8007426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff ff5f 	bl	80072f0 <__NVIC_SetPriority>
}
 8007432:	bf00      	nop
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	4603      	mov	r3, r0
 8007442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff ff33 	bl	80072b4 <__NVIC_EnableIRQ>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7ff ffa4 	bl	80073ac <SysTick_Config>
 8007464:	4603      	mov	r3, r0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e054      	b.n	800752c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7f5b      	ldrb	r3, [r3, #29]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fc fe2c 	bl	80040f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10c      	bne.n	80074c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a22      	ldr	r2, [pc, #136]	; (8007534 <HAL_CRC_Init+0xc4>)
 80074ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0218 	bic.w	r2, r2, #24
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	e00c      	b.n	80074da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6899      	ldr	r1, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f948 	bl	8007760 <HAL_CRCEx_Polynomial_Set>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e028      	b.n	800752c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	795b      	ldrb	r3, [r3, #5]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ea:	611a      	str	r2, [r3, #16]
 80074ec:	e004      	b.n	80074f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6912      	ldr	r2, [r2, #16]
 80074f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695a      	ldr	r2, [r3, #20]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699a      	ldr	r2, [r3, #24]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	04c11db7 	.word	0x04c11db7

08007538 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007544:	2300      	movs	r3, #0
 8007546:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2202      	movs	r2, #2
 800754c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d006      	beq.n	8007574 <HAL_CRC_Calculate+0x3c>
 8007566:	2b03      	cmp	r3, #3
 8007568:	d829      	bhi.n	80075be <HAL_CRC_Calculate+0x86>
 800756a:	2b01      	cmp	r3, #1
 800756c:	d019      	beq.n	80075a2 <HAL_CRC_Calculate+0x6a>
 800756e:	2b02      	cmp	r3, #2
 8007570:	d01e      	beq.n	80075b0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007572:	e024      	b.n	80075be <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e00a      	b.n	8007590 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	441a      	add	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	3301      	adds	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	d3f0      	bcc.n	800757a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	613b      	str	r3, [r7, #16]
      break;
 80075a0:	e00e      	b.n	80075c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f812 	bl	80075d0 <CRC_Handle_8>
 80075ac:	6138      	str	r0, [r7, #16]
      break;
 80075ae:	e007      	b.n	80075c0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f899 	bl	80076ec <CRC_Handle_16>
 80075ba:	6138      	str	r0, [r7, #16]
      break;
 80075bc:	e000      	b.n	80075c0 <HAL_CRC_Calculate+0x88>
      break;
 80075be:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80075c6:	693b      	ldr	r3, [r7, #16]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e023      	b.n	800762a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	3301      	adds	r3, #1
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	440b      	add	r3, r1
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80075fc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	3302      	adds	r3, #2
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	440b      	add	r3, r1
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800760c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	3303      	adds	r3, #3
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	440b      	add	r3, r1
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007620:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3301      	adds	r3, #1
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	089b      	lsrs	r3, r3, #2
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	429a      	cmp	r2, r3
 8007632:	d3d6      	bcc.n	80075e2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04d      	beq.n	80076da <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d107      	bne.n	8007658 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	4413      	add	r3, r2
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d116      	bne.n	8007690 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	021b      	lsls	r3, r3, #8
 800766e:	b21a      	sxth	r2, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	3301      	adds	r3, #1
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	440b      	add	r3, r1
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b21b      	sxth	r3, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	b21b      	sxth	r3, r3
 8007682:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	8b7a      	ldrh	r2, [r7, #26]
 800768e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b03      	cmp	r3, #3
 8007698:	d11f      	bne.n	80076da <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	b21a      	sxth	r2, r3
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	3301      	adds	r3, #1
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	440b      	add	r3, r1
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	4313      	orrs	r3, r2
 80076b8:	b21b      	sxth	r3, r3
 80076ba:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	8b7a      	ldrh	r2, [r7, #26]
 80076c6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	3302      	adds	r3, #2
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3724      	adds	r7, #36	; 0x24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e013      	b.n	8007726 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	041a      	lsls	r2, r3, #16
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	3302      	adds	r3, #2
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	440b      	add	r3, r1
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3301      	adds	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	085b      	lsrs	r3, r3, #1
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	429a      	cmp	r2, r3
 800772e:	d3e6      	bcc.n	80076fe <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
}
 8007754:	4618      	mov	r0, r3
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007770:	231f      	movs	r3, #31
 8007772:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
 8007782:	e063      	b.n	800784c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007784:	bf00      	nop
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1e5a      	subs	r2, r3, #1
 800778a:	613a      	str	r2, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <HAL_CRCEx_Polynomial_Set+0x44>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	fa22 f303 	lsr.w	r3, r2, r3
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b18      	cmp	r3, #24
 80077a8:	d846      	bhi.n	8007838 <HAL_CRCEx_Polynomial_Set+0xd8>
 80077aa:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	0800783f 	.word	0x0800783f
 80077b4:	08007839 	.word	0x08007839
 80077b8:	08007839 	.word	0x08007839
 80077bc:	08007839 	.word	0x08007839
 80077c0:	08007839 	.word	0x08007839
 80077c4:	08007839 	.word	0x08007839
 80077c8:	08007839 	.word	0x08007839
 80077cc:	08007839 	.word	0x08007839
 80077d0:	0800782d 	.word	0x0800782d
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007839 	.word	0x08007839
 80077dc:	08007839 	.word	0x08007839
 80077e0:	08007839 	.word	0x08007839
 80077e4:	08007839 	.word	0x08007839
 80077e8:	08007839 	.word	0x08007839
 80077ec:	08007839 	.word	0x08007839
 80077f0:	08007821 	.word	0x08007821
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007839 	.word	0x08007839
 80077fc:	08007839 	.word	0x08007839
 8007800:	08007839 	.word	0x08007839
 8007804:	08007839 	.word	0x08007839
 8007808:	08007839 	.word	0x08007839
 800780c:	08007839 	.word	0x08007839
 8007810:	08007815 	.word	0x08007815
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b06      	cmp	r3, #6
 8007818:	d913      	bls.n	8007842 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800781e:	e010      	b.n	8007842 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b07      	cmp	r3, #7
 8007824:	d90f      	bls.n	8007846 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800782a:	e00c      	b.n	8007846 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b0f      	cmp	r3, #15
 8007830:	d90b      	bls.n	800784a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007836:	e008      	b.n	800784a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	75fb      	strb	r3, [r7, #23]
        break;
 800783c:	e006      	b.n	800784c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800783e:	bf00      	nop
 8007840:	e004      	b.n	800784c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800784a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10d      	bne.n	800786e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f023 0118 	bic.w	r1, r3, #24
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	430a      	orrs	r2, r1
 800786c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800786e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007870:	4618      	mov	r0, r3
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e08d      	b.n	80079aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	4b47      	ldr	r3, [pc, #284]	; (80079b4 <HAL_DMA_Init+0x138>)
 8007896:	429a      	cmp	r2, r3
 8007898:	d80f      	bhi.n	80078ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	4b45      	ldr	r3, [pc, #276]	; (80079b8 <HAL_DMA_Init+0x13c>)
 80078a2:	4413      	add	r3, r2
 80078a4:	4a45      	ldr	r2, [pc, #276]	; (80079bc <HAL_DMA_Init+0x140>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	009a      	lsls	r2, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a42      	ldr	r2, [pc, #264]	; (80079c0 <HAL_DMA_Init+0x144>)
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
 80078b8:	e00e      	b.n	80078d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	4b40      	ldr	r3, [pc, #256]	; (80079c4 <HAL_DMA_Init+0x148>)
 80078c2:	4413      	add	r3, r2
 80078c4:	4a3d      	ldr	r2, [pc, #244]	; (80079bc <HAL_DMA_Init+0x140>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	091b      	lsrs	r3, r3, #4
 80078cc:	009a      	lsls	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a3c      	ldr	r2, [pc, #240]	; (80079c8 <HAL_DMA_Init+0x14c>)
 80078d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80078fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f9c4 	bl	8007cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007938:	d102      	bne.n	8007940 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007954:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d010      	beq.n	8007980 <HAL_DMA_Init+0x104>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b04      	cmp	r3, #4
 8007964:	d80c      	bhi.n	8007980 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9e4 	bl	8007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	e008      	b.n	8007992 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40020407 	.word	0x40020407
 80079b8:	bffdfff8 	.word	0xbffdfff8
 80079bc:	cccccccd 	.word	0xcccccccd
 80079c0:	40020000 	.word	0x40020000
 80079c4:	bffdfbf8 	.word	0xbffdfbf8
 80079c8:	40020400 	.word	0x40020400

080079cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_DMA_Start_IT+0x20>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e066      	b.n	8007aba <HAL_DMA_Start_IT+0xee>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d155      	bne.n	8007aac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f909 	bl	8007c3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d008      	beq.n	8007a44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 020e 	orr.w	r2, r2, #14
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e00f      	b.n	8007a64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0204 	bic.w	r2, r2, #4
 8007a52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 020a 	orr.w	r2, r2, #10
 8007a62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d007      	beq.n	8007a9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0201 	orr.w	r2, r2, #1
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e005      	b.n	8007ab8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	f003 031f 	and.w	r3, r3, #31
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	409a      	lsls	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d026      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x7a>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d021      	beq.n	8007b3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0204 	bic.w	r2, r2, #4
 8007b14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	f003 021f 	and.w	r2, r3, #31
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2104      	movs	r1, #4
 8007b24:	fa01 f202 	lsl.w	r2, r1, r2
 8007b28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d071      	beq.n	8007c16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007b3a:	e06c      	b.n	8007c16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2202      	movs	r2, #2
 8007b46:	409a      	lsls	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d02e      	beq.n	8007bae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d029      	beq.n	8007bae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 020a 	bic.w	r2, r2, #10
 8007b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	f003 021f 	and.w	r2, r3, #31
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d038      	beq.n	8007c16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007bac:	e033      	b.n	8007c16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb2:	f003 031f 	and.w	r3, r3, #31
 8007bb6:	2208      	movs	r2, #8
 8007bb8:	409a      	lsls	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d02a      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	f003 0308 	and.w	r3, r3, #8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d025      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 020e 	bic.w	r2, r2, #14
 8007bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be0:	f003 021f 	and.w	r2, r3, #31
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be8:	2101      	movs	r1, #1
 8007bea:	fa01 f202 	lsl.w	r2, r1, r2
 8007bee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
}
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c2e:	b2db      	uxtb	r3, r3
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	f003 021f 	and.w	r2, r3, #31
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	2101      	movs	r1, #1
 8007c74:	fa01 f202 	lsl.w	r2, r1, r2
 8007c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d108      	bne.n	8007c9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c9a:	e007      	b.n	8007cac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d802      	bhi.n	8007cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007ccc:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e001      	b.n	8007cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007cd4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	3b08      	subs	r3, #8
 8007ce2:	4a12      	ldr	r2, [pc, #72]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	089b      	lsrs	r3, r3, #2
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a0b      	ldr	r2, [pc, #44]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	409a      	lsls	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40020407 	.word	0x40020407
 8007d24:	40020800 	.word	0x40020800
 8007d28:	40020820 	.word	0x40020820
 8007d2c:	cccccccd 	.word	0xcccccccd
 8007d30:	40020880 	.word	0x40020880

08007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a08      	ldr	r2, [pc, #32]	; (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	2201      	movs	r2, #1
 8007d62:	409a      	lsls	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	1000823f 	.word	0x1000823f
 8007d78:	40020940 	.word	0x40020940

08007d7c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_FLASH_Program+0x1e>
 8007d96:	2302      	movs	r3, #2
 8007d98:	e053      	b.n	8007e42 <HAL_FLASH_Program+0xc6>
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007da4:	f000 f892 	bl	8007ecc <FLASH_WaitForLastOperation>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d143      	bne.n	8007e3a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007db8:	4b25      	ldr	r3, [pc, #148]	; (8007e50 <HAL_FLASH_Program+0xd4>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007dc4:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <HAL_FLASH_Program+0xd4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a21      	ldr	r2, [pc, #132]	; (8007e50 <HAL_FLASH_Program+0xd4>)
 8007dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007dd0:	4b1e      	ldr	r3, [pc, #120]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	771a      	strb	r2, [r3, #28]
 8007dd6:	e002      	b.n	8007dde <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007dd8:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d107      	bne.n	8007df4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f000 f8c3 	bl	8007f74 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007dee:	2301      	movs	r3, #1
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e010      	b.n	8007e16 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d002      	beq.n	8007e00 <HAL_FLASH_Program+0x84>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d10a      	bne.n	8007e16 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	4619      	mov	r1, r3
 8007e04:	68b8      	ldr	r0, [r7, #8]
 8007e06:	f000 f8db 	bl	8007fc0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d102      	bne.n	8007e16 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007e10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e14:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e1a:	f000 f857 	bl	8007ecc <FLASH_WaitForLastOperation>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d006      	beq.n	8007e36 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_FLASH_Program+0xd4>)
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	43db      	mvns	r3, r3
 8007e30:	4907      	ldr	r1, [pc, #28]	; (8007e50 <HAL_FLASH_Program+0xd4>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007e36:	f000 f9d3 	bl	80081e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e3a:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <HAL_FLASH_Program+0xd0>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000184 	.word	0x20000184
 8007e50:	40022000 	.word	0x40022000

08007e54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <HAL_FLASH_Unlock+0x38>)
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	da0b      	bge.n	8007e7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_FLASH_Unlock+0x38>)
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <HAL_FLASH_Unlock+0x3c>)
 8007e6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007e6c:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <HAL_FLASH_Unlock+0x38>)
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <HAL_FLASH_Unlock+0x40>)
 8007e70:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <HAL_FLASH_Unlock+0x38>)
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da01      	bge.n	8007e7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	40022000 	.word	0x40022000
 8007e90:	45670123 	.word	0x45670123
 8007e94:	cdef89ab 	.word	0xcdef89ab

08007e98 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <HAL_FLASH_Lock+0x30>)
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	4a08      	ldr	r2, [pc, #32]	; (8007ec8 <HAL_FLASH_Lock+0x30>)
 8007ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eac:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <HAL_FLASH_Lock+0x30>)
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da01      	bge.n	8007eba <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007eba:	79fb      	ldrb	r3, [r7, #7]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	40022000 	.word	0x40022000

08007ecc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007ed4:	f7fd f932 	bl	800513c <HAL_GetTick>
 8007ed8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007eda:	e009      	b.n	8007ef0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007edc:	f7fd f92e 	bl	800513c <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d201      	bcs.n	8007ef0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e038      	b.n	8007f62 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efc:	d0ee      	beq.n	8007edc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007efe:	4b1b      	ldr	r3, [pc, #108]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007f06:	4013      	ands	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <FLASH_WaitForLastOperation+0xa4>)
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <FLASH_WaitForLastOperation+0xa4>)
 8007f1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d007      	beq.n	8007f36 <FLASH_WaitForLastOperation+0x6a>
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f30:	490e      	ldr	r1, [pc, #56]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	618b      	str	r3, [r1, #24]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <FLASH_WaitForLastOperation+0x7e>
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007f48:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e009      	b.n	8007f62 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d102      	bne.n	8007f60 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007f5a:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <FLASH_WaitForLastOperation+0xa0>)
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40022000 	.word	0x40022000
 8007f70:	20000184 	.word	0x20000184

08007f74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <FLASH_Program_DoubleWord+0x48>)
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <FLASH_Program_DoubleWord+0x48>)
 8007f86:	f043 0301 	orr.w	r3, r3, #1
 8007f8a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007f92:	f3bf 8f6f 	isb	sy
}
 8007f96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	000a      	movs	r2, r1
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	68f9      	ldr	r1, [r7, #12]
 8007faa:	3104      	adds	r1, #4
 8007fac:	4613      	mov	r3, r2
 8007fae:	600b      	str	r3, [r1, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	40022000 	.word	0x40022000

08007fc0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b089      	sub	sp, #36	; 0x24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <FLASH_Program_Fast+0x68>)
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	4a13      	ldr	r2, [pc, #76]	; (8008028 <FLASH_Program_Fast+0x68>)
 8007fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fe0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fe8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fec:	b672      	cpsid	i
}
 8007fee:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	3304      	adds	r3, #4
 8008002:	617b      	str	r3, [r7, #20]
    row_index--;
 8008004:	7ffb      	ldrb	r3, [r7, #31]
 8008006:	3b01      	subs	r3, #1
 8008008:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800800a:	7ffb      	ldrb	r3, [r7, #31]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1ef      	bne.n	8007ff0 <FLASH_Program_Fast+0x30>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f383 8810 	msr	PRIMASK, r3
}
 800801a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800801c:	bf00      	nop
 800801e:	3724      	adds	r7, #36	; 0x24
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40022000 	.word	0x40022000

0800802c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008036:	4b47      	ldr	r3, [pc, #284]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_FLASHEx_Erase+0x16>
 800803e:	2302      	movs	r3, #2
 8008040:	e083      	b.n	800814a <HAL_FLASHEx_Erase+0x11e>
 8008042:	4b44      	ldr	r3, [pc, #272]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800804c:	f7ff ff3e 	bl	8007ecc <FLASH_WaitForLastOperation>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d173      	bne.n	8008142 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800805a:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 800805c:	2200      	movs	r2, #0
 800805e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008060:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008068:	2b00      	cmp	r3, #0
 800806a:	d013      	beq.n	8008094 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800806c:	4b3a      	ldr	r3, [pc, #232]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008078:	4b37      	ldr	r3, [pc, #220]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a36      	ldr	r2, [pc, #216]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 800807e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008082:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008084:	4b33      	ldr	r3, [pc, #204]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 8008086:	2203      	movs	r2, #3
 8008088:	771a      	strb	r2, [r3, #28]
 800808a:	e016      	b.n	80080ba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800808c:	4b31      	ldr	r3, [pc, #196]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 800808e:	2201      	movs	r2, #1
 8008090:	771a      	strb	r2, [r3, #28]
 8008092:	e012      	b.n	80080ba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008094:	4b30      	ldr	r3, [pc, #192]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80080a0:	4b2d      	ldr	r3, [pc, #180]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2c      	ldr	r2, [pc, #176]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 80080a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080aa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80080ac:	4b29      	ldr	r3, [pc, #164]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 80080ae:	2202      	movs	r2, #2
 80080b0:	771a      	strb	r2, [r3, #28]
 80080b2:	e002      	b.n	80080ba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80080b4:	4b27      	ldr	r3, [pc, #156]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d111      	bne.n	80080e6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f848 	bl	800815c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080d0:	f7ff fefc 	bl	8007ecc <FLASH_WaitForLastOperation>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 80080de:	f023 0304 	bic.w	r3, r3, #4
 80080e2:	6153      	str	r3, [r2, #20]
 80080e4:	e02b      	b.n	800813e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f04f 32ff 	mov.w	r2, #4294967295
 80080ec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	60bb      	str	r3, [r7, #8]
 80080f4:	e01b      	b.n	800812e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	4619      	mov	r1, r3
 80080fc:	68b8      	ldr	r0, [r7, #8]
 80080fe:	f000 f84b 	bl	8008198 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008106:	f7ff fee1 	bl	8007ecc <FLASH_WaitForLastOperation>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800810e:	4b12      	ldr	r3, [pc, #72]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	4a11      	ldr	r2, [pc, #68]	; (8008158 <HAL_FLASHEx_Erase+0x12c>)
 8008114:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008118:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	601a      	str	r2, [r3, #0]
          break;
 8008126:	e00a      	b.n	800813e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3301      	adds	r3, #1
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	4413      	add	r3, r2
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	d3db      	bcc.n	80080f6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800813e:	f000 f84f 	bl	80081e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008142:	4b04      	ldr	r3, [pc, #16]	; (8008154 <HAL_FLASHEx_Erase+0x128>)
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]

  return status;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000184 	.word	0x20000184
 8008158:	40022000 	.word	0x40022000

0800815c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800816e:	4b09      	ldr	r3, [pc, #36]	; (8008194 <FLASH_MassErase+0x38>)
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	4a08      	ldr	r2, [pc, #32]	; (8008194 <FLASH_MassErase+0x38>)
 8008174:	f043 0304 	orr.w	r3, r3, #4
 8008178:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <FLASH_MassErase+0x38>)
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4a05      	ldr	r2, [pc, #20]	; (8008194 <FLASH_MassErase+0x38>)
 8008180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008184:	6153      	str	r3, [r2, #20]
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40022000 	.word	0x40022000

08008198 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80081a2:	4b0e      	ldr	r3, [pc, #56]	; (80081dc <FLASH_PageErase+0x44>)
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80081b2:	490a      	ldr	r1, [pc, #40]	; (80081dc <FLASH_PageErase+0x44>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80081b8:	4b08      	ldr	r3, [pc, #32]	; (80081dc <FLASH_PageErase+0x44>)
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	4a07      	ldr	r2, [pc, #28]	; (80081dc <FLASH_PageErase+0x44>)
 80081be:	f043 0302 	orr.w	r3, r3, #2
 80081c2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <FLASH_PageErase+0x44>)
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	4a04      	ldr	r2, [pc, #16]	; (80081dc <FLASH_PageErase+0x44>)
 80081ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ce:	6153      	str	r3, [r2, #20]
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	40022000 	.word	0x40022000

080081e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <FLASH_FlushCaches+0x8c>)
 80081e8:	7f1b      	ldrb	r3, [r3, #28]
 80081ea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d002      	beq.n	80081f8 <FLASH_FlushCaches+0x18>
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d117      	bne.n	8008228 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <FLASH_FlushCaches+0x90>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1c      	ldr	r2, [pc, #112]	; (8008270 <FLASH_FlushCaches+0x90>)
 80081fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008202:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008204:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	; (8008270 <FLASH_FlushCaches+0x90>)
 800820a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800821a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800821c:	4b14      	ldr	r3, [pc, #80]	; (8008270 <FLASH_FlushCaches+0x90>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a13      	ldr	r2, [pc, #76]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008226:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d002      	beq.n	8008234 <FLASH_FlushCaches+0x54>
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d111      	bne.n	8008258 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a0d      	ldr	r2, [pc, #52]	; (8008270 <FLASH_FlushCaches+0x90>)
 800823a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800823e:	6013      	str	r3, [r2, #0]
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800824c:	4b08      	ldr	r3, [pc, #32]	; (8008270 <FLASH_FlushCaches+0x90>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a07      	ldr	r2, [pc, #28]	; (8008270 <FLASH_FlushCaches+0x90>)
 8008252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008256:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <FLASH_FlushCaches+0x8c>)
 800825a:	2200      	movs	r2, #0
 800825c:	771a      	strb	r2, [r3, #28]
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000184 	.word	0x20000184
 8008270:	40022000 	.word	0x40022000

08008274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008282:	e15a      	b.n	800853a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	2101      	movs	r1, #1
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	fa01 f303 	lsl.w	r3, r1, r3
 8008290:	4013      	ands	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 814c 	beq.w	8008534 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d005      	beq.n	80082b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d130      	bne.n	8008316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	2203      	movs	r2, #3
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	43db      	mvns	r3, r3
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4013      	ands	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	fa02 f303 	lsl.w	r3, r2, r3
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082ea:	2201      	movs	r2, #1
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4013      	ands	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	091b      	lsrs	r3, r3, #4
 8008300:	f003 0201 	and.w	r2, r3, #1
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	fa02 f303 	lsl.w	r3, r2, r3
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	2b03      	cmp	r3, #3
 8008320:	d017      	beq.n	8008352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	2203      	movs	r2, #3
 800832e:	fa02 f303 	lsl.w	r3, r2, r3
 8008332:	43db      	mvns	r3, r3
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4013      	ands	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	fa02 f303 	lsl.w	r3, r2, r3
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d123      	bne.n	80083a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	08da      	lsrs	r2, r3, #3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3208      	adds	r2, #8
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	220f      	movs	r2, #15
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43db      	mvns	r3, r3
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4013      	ands	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	08da      	lsrs	r2, r3, #3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3208      	adds	r2, #8
 80083a0:	6939      	ldr	r1, [r7, #16]
 80083a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	2203      	movs	r2, #3
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4013      	ands	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f003 0203 	and.w	r2, r3, #3
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 80a6 	beq.w	8008534 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e8:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <HAL_GPIO_Init+0x2e4>)
 80083ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ec:	4a5a      	ldr	r2, [pc, #360]	; (8008558 <HAL_GPIO_Init+0x2e4>)
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	6613      	str	r3, [r2, #96]	; 0x60
 80083f4:	4b58      	ldr	r3, [pc, #352]	; (8008558 <HAL_GPIO_Init+0x2e4>)
 80083f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008400:	4a56      	ldr	r2, [pc, #344]	; (800855c <HAL_GPIO_Init+0x2e8>)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	089b      	lsrs	r3, r3, #2
 8008406:	3302      	adds	r3, #2
 8008408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	220f      	movs	r2, #15
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	43db      	mvns	r3, r3
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4013      	ands	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800842a:	d01f      	beq.n	800846c <HAL_GPIO_Init+0x1f8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a4c      	ldr	r2, [pc, #304]	; (8008560 <HAL_GPIO_Init+0x2ec>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d019      	beq.n	8008468 <HAL_GPIO_Init+0x1f4>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a4b      	ldr	r2, [pc, #300]	; (8008564 <HAL_GPIO_Init+0x2f0>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d013      	beq.n	8008464 <HAL_GPIO_Init+0x1f0>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a4a      	ldr	r2, [pc, #296]	; (8008568 <HAL_GPIO_Init+0x2f4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00d      	beq.n	8008460 <HAL_GPIO_Init+0x1ec>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a49      	ldr	r2, [pc, #292]	; (800856c <HAL_GPIO_Init+0x2f8>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <HAL_GPIO_Init+0x1e8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a48      	ldr	r2, [pc, #288]	; (8008570 <HAL_GPIO_Init+0x2fc>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d101      	bne.n	8008458 <HAL_GPIO_Init+0x1e4>
 8008454:	2305      	movs	r3, #5
 8008456:	e00a      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 8008458:	2306      	movs	r3, #6
 800845a:	e008      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 800845c:	2304      	movs	r3, #4
 800845e:	e006      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 8008460:	2303      	movs	r3, #3
 8008462:	e004      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 8008464:	2302      	movs	r3, #2
 8008466:	e002      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 8008468:	2301      	movs	r3, #1
 800846a:	e000      	b.n	800846e <HAL_GPIO_Init+0x1fa>
 800846c:	2300      	movs	r3, #0
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	f002 0203 	and.w	r2, r2, #3
 8008474:	0092      	lsls	r2, r2, #2
 8008476:	4093      	lsls	r3, r2
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800847e:	4937      	ldr	r1, [pc, #220]	; (800855c <HAL_GPIO_Init+0x2e8>)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	3302      	adds	r3, #2
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800848c:	4b39      	ldr	r3, [pc, #228]	; (8008574 <HAL_GPIO_Init+0x300>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	43db      	mvns	r3, r3
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4013      	ands	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084b0:	4a30      	ldr	r2, [pc, #192]	; (8008574 <HAL_GPIO_Init+0x300>)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084b6:	4b2f      	ldr	r3, [pc, #188]	; (8008574 <HAL_GPIO_Init+0x300>)
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	43db      	mvns	r3, r3
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4013      	ands	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084da:	4a26      	ldr	r2, [pc, #152]	; (8008574 <HAL_GPIO_Init+0x300>)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80084e0:	4b24      	ldr	r3, [pc, #144]	; (8008574 <HAL_GPIO_Init+0x300>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4013      	ands	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <HAL_GPIO_Init+0x300>)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800850a:	4b1a      	ldr	r3, [pc, #104]	; (8008574 <HAL_GPIO_Init+0x300>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	43db      	mvns	r3, r3
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4013      	ands	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800852e:	4a11      	ldr	r2, [pc, #68]	; (8008574 <HAL_GPIO_Init+0x300>)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	3301      	adds	r3, #1
 8008538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f ae9d 	bne.w	8008284 <HAL_GPIO_Init+0x10>
  }
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	40021000 	.word	0x40021000
 800855c:	40010000 	.word	0x40010000
 8008560:	48000400 	.word	0x48000400
 8008564:	48000800 	.word	0x48000800
 8008568:	48000c00 	.word	0x48000c00
 800856c:	48001000 	.word	0x48001000
 8008570:	48001400 	.word	0x48001400
 8008574:	40010400 	.word	0x40010400

08008578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	807b      	strh	r3, [r7, #2]
 80085b4:	4613      	mov	r3, r2
 80085b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085b8:	787b      	ldrb	r3, [r7, #1]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80085be:	887a      	ldrh	r2, [r7, #2]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80085c4:	e002      	b.n	80085cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80085c6:	887a      	ldrh	r2, [r7, #2]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e08d      	b.n	8008706 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fb fd96 	bl	8004130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2224      	movs	r2, #36	; 0x24
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0201 	bic.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d107      	bne.n	8008652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800864e:	609a      	str	r2, [r3, #8]
 8008650:	e006      	b.n	8008660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689a      	ldr	r2, [r3, #8]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800865e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d108      	bne.n	800867a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008676:	605a      	str	r2, [r3, #4]
 8008678:	e007      	b.n	800868a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	69d9      	ldr	r1, [r3, #28]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1a      	ldr	r2, [r3, #32]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2220      	movs	r2, #32
 80086f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b20      	cmp	r3, #32
 8008722:	d138      	bne.n	8008796 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800872e:	2302      	movs	r3, #2
 8008730:	e032      	b.n	8008798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2224      	movs	r2, #36	; 0x24
 800873e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f022 0201 	bic.w	r2, r2, #1
 8008750:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008760:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6819      	ldr	r1, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008796:	2302      	movs	r3, #2
  }
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b20      	cmp	r3, #32
 80087b8:	d139      	bne.n	800882e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e033      	b.n	8008830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2224      	movs	r2, #36	; 0x24
 80087d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0201 	bic.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80087f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0201 	orr.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800882e:	2302      	movs	r3, #2
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e0c0      	b.n	80089d0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f00a ff24 	bl	80136b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2203      	movs	r2, #3
 800886c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f004 fe79 	bl	800d56c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
 800887e:	e03e      	b.n	80088fe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	440b      	add	r3, r1
 800888e:	3311      	adds	r3, #17
 8008890:	2201      	movs	r2, #1
 8008892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008894:	7bfa      	ldrb	r2, [r7, #15]
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	440b      	add	r3, r1
 80088a2:	3310      	adds	r3, #16
 80088a4:	7bfa      	ldrb	r2, [r7, #15]
 80088a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088a8:	7bfa      	ldrb	r2, [r7, #15]
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	00db      	lsls	r3, r3, #3
 80088b4:	440b      	add	r3, r1
 80088b6:	3313      	adds	r3, #19
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088bc:	7bfa      	ldrb	r2, [r7, #15]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	440b      	add	r3, r1
 80088ca:	3320      	adds	r3, #32
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088d0:	7bfa      	ldrb	r2, [r7, #15]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	440b      	add	r3, r1
 80088de:	3324      	adds	r3, #36	; 0x24
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	440b      	add	r3, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	3301      	adds	r3, #1
 80088fc:	73fb      	strb	r3, [r7, #15]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	791b      	ldrb	r3, [r3, #4]
 8008902:	7bfa      	ldrb	r2, [r7, #15]
 8008904:	429a      	cmp	r2, r3
 8008906:	d3bb      	bcc.n	8008880 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e044      	b.n	8008998 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800890e:	7bfa      	ldrb	r2, [r7, #15]
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	440b      	add	r3, r1
 800891c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008924:	7bfa      	ldrb	r2, [r7, #15]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008936:	7bfa      	ldrb	r2, [r7, #15]
 8008938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	440b      	add	r3, r1
 8008948:	f203 1353 	addw	r3, r3, #339	; 0x153
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008950:	7bfa      	ldrb	r2, [r7, #15]
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	440b      	add	r3, r1
 800895e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008966:	7bfa      	ldrb	r2, [r7, #15]
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	00db      	lsls	r3, r3, #3
 8008972:	440b      	add	r3, r1
 8008974:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	440b      	add	r3, r1
 800898a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800898e:	2200      	movs	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	3301      	adds	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	7bfa      	ldrb	r2, [r7, #15]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d3b5      	bcc.n	800890e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3304      	adds	r3, #4
 80089aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80089ae:	f004 fdf8 	bl	800d5a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7a9b      	ldrb	r3, [r3, #10]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d102      	bne.n	80089ce <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fc41 	bl	800a250 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_PCD_Start+0x16>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e012      	b.n	8008a14 <HAL_PCD_Start+0x3c>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f004 fd9f 	bl	800d53e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f007 f860 	bl	800faca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f007 f865 	bl	800faf8 <USB_ReadInterrupts>
 8008a2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fb04 	bl	8009048 <PCD_EP_ISR_Handler>

    return;
 8008a40:	e110      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d013      	beq.n	8008a74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f00a feb4 	bl	80137d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f8fc 	bl	8008c6a <HAL_PCD_SetAddress>

    return;
 8008a72:	e0f7      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a90:	b292      	uxth	r2, r2
 8008a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008a96:	e0e5      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00c      	beq.n	8008abc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008aba:	e0d3      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d034      	beq.n	8008b30 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0204 	bic.w	r2, r2, #4
 8008ad8:	b292      	uxth	r2, r2
 8008ada:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0208 	bic.w	r2, r2, #8
 8008af0:	b292      	uxth	r2, r2
 8008af2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d107      	bne.n	8008b10 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008b08:	2100      	movs	r1, #0
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f00b f854 	bl	8013bb8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f00a fe97 	bl	8013844 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008b2e:	e099      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d027      	beq.n	8008b8a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f042 0208 	orr.w	r2, r2, #8
 8008b4c:	b292      	uxth	r2, r2
 8008b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b64:	b292      	uxth	r2, r2
 8008b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0204 	orr.w	r2, r2, #4
 8008b7c:	b292      	uxth	r2, r2
 8008b7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f00a fe44 	bl	8013810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008b88:	e06c      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d040      	beq.n	8008c16 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d12b      	bne.n	8008c0e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0204 	orr.w	r2, r2, #4
 8008bc8:	b292      	uxth	r2, r2
 8008bca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0208 	orr.w	r2, r2, #8
 8008be0:	b292      	uxth	r2, r2
 8008be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	089b      	lsrs	r3, r3, #2
 8008bfa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008c04:	2101      	movs	r1, #1
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f00a ffd6 	bl	8013bb8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008c0c:	e02a      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f00a fdfe 	bl	8013810 <HAL_PCD_SuspendCallback>
    return;
 8008c14:	e026      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00f      	beq.n	8008c40 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c32:	b292      	uxth	r2, r2
 8008c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f00a fdbc 	bl	80137b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008c3e:	e011      	b.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00c      	beq.n	8008c64 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5c:	b292      	uxth	r2, r2
 8008c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008c62:	bf00      	nop
  }
}
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_PCD_SetAddress+0x1a>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e012      	b.n	8008caa <HAL_PCD_SetAddress+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f006 ff01 	bl	800faa2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	70fb      	strb	r3, [r7, #3]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	803b      	strh	r3, [r7, #0]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da0e      	bge.n	8008cf6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	f003 0207 	and.w	r2, r3, #7
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	3310      	adds	r3, #16
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	705a      	strb	r2, [r3, #1]
 8008cf4:	e00e      	b.n	8008d14 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	f003 0207 	and.w	r2, r3, #7
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008d20:	883a      	ldrh	r2, [r7, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	78ba      	ldrb	r2, [r7, #2]
 8008d2a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008d2c:	78bb      	ldrb	r3, [r7, #2]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d102      	bne.n	8008d38 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d101      	bne.n	8008d46 <HAL_PCD_EP_Open+0x94>
 8008d42:	2302      	movs	r3, #2
 8008d44:	e00e      	b.n	8008d64 <HAL_PCD_EP_Open+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68f9      	ldr	r1, [r7, #12]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f004 fc43 	bl	800d5e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8008d62:	7afb      	ldrb	r3, [r7, #11]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da0e      	bge.n	8008d9e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	f003 0207 	and.w	r2, r3, #7
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	3310      	adds	r3, #16
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	705a      	strb	r2, [r3, #1]
 8008d9c:	e00e      	b.n	8008dbc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	f003 0207 	and.w	r2, r3, #7
 8008da4:	4613      	mov	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	4413      	add	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008dbc:	78fb      	ldrb	r3, [r7, #3]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_PCD_EP_Close+0x6a>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e00e      	b.n	8008df4 <HAL_PCD_EP_Close+0x88>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f004 ffbf 	bl	800dd68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	f003 0207 	and.w	r2, r3, #7
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e3c:	7afb      	ldrb	r3, [r7, #11]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6979      	ldr	r1, [r7, #20]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f005 f977 	bl	800e142 <USB_EPStartXfer>

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	460b      	mov	r3, r1
 8008e68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	f003 0207 	and.w	r2, r3, #7
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	00db      	lsls	r3, r3, #3
 8008e7a:	440b      	add	r3, r1
 8008e7c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8008e80:	681b      	ldr	r3, [r3, #0]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b086      	sub	sp, #24
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
 8008ea0:	f003 0207 	and.w	r2, r3, #7
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	3310      	adds	r3, #16
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f005 f928 	bl	800e142 <USB_EPStartXfer>

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	7912      	ldrb	r2, [r2, #4]
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d901      	bls.n	8008f1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e03e      	b.n	8008f98 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	da0e      	bge.n	8008f40 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	f003 0207 	and.w	r2, r3, #7
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	3310      	adds	r3, #16
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	705a      	strb	r2, [r3, #1]
 8008f3e:	e00c      	b.n	8008f5a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4613      	mov	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_PCD_EP_SetStall+0x7e>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e00e      	b.n	8008f98 <HAL_PCD_EP_SetStall+0x9c>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f006 fc8b 	bl	800f8a4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	7912      	ldrb	r2, [r2, #4]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d901      	bls.n	8008fbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e040      	b.n	8009040 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	da0e      	bge.n	8008fe4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	f003 0207 	and.w	r2, r3, #7
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	3310      	adds	r3, #16
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	705a      	strb	r2, [r3, #1]
 8008fe2:	e00e      	b.n	8009002 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	f003 0207 	and.w	r2, r3, #7
 8008fea:	4613      	mov	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4413      	add	r3, r2
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	f003 0307 	and.w	r3, r3, #7
 800900e:	b2da      	uxtb	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_PCD_EP_ClrStall+0x82>
 800901e:	2302      	movs	r3, #2
 8009020:	e00e      	b.n	8009040 <HAL_PCD_EP_ClrStall+0xa0>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	4618      	mov	r0, r3
 8009032:	f006 fc88 	bl	800f946 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b096      	sub	sp, #88	; 0x58
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009050:	e3ae      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800905a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800905e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800906c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8170 	bne.w	8009356 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b00      	cmp	r3, #0
 8009080:	d14d      	bne.n	800911e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800908e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009092:	81fb      	strh	r3, [r7, #14]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	89fb      	ldrh	r3, [r7, #14]
 800909a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800909e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3310      	adds	r3, #16
 80090aa:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	4413      	add	r3, r2
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80090d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80090d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d6:	695a      	ldr	r2, [r3, #20]
 80090d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	441a      	add	r2, r3
 80090de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80090e2:	2100      	movs	r1, #0
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f00a fb4c 	bl	8013782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7b1b      	ldrb	r3, [r3, #12]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 835d 	beq.w	80097b0 <PCD_EP_ISR_Handler+0x768>
 80090f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f040 8358 	bne.w	80097b0 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	7b1b      	ldrb	r3, [r3, #12]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800910a:	b2da      	uxtb	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	b292      	uxth	r2, r2
 8009112:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	731a      	strb	r2, [r3, #12]
 800911c:	e348      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009124:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009138:	2b00      	cmp	r3, #0
 800913a:	d032      	beq.n	80091a2 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009144:	b29b      	uxth	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	4413      	add	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	4413      	add	r3, r2
 8009156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009162:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800916e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009170:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009174:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009176:	b29b      	uxth	r3, r3
 8009178:	f006 fd10 	bl	800fb9c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29a      	uxth	r2, r3
 8009184:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009188:	4013      	ands	r3, r2
 800918a:	823b      	strh	r3, [r7, #16]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	8a3a      	ldrh	r2, [r7, #16]
 8009192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009196:	b292      	uxth	r2, r2
 8009198:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f00a fac4 	bl	8013728 <HAL_PCD_SetupStageCallback>
 80091a0:	e306      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80091a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f280 8302 	bge.w	80097b0 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80091b8:	4013      	ands	r3, r2
 80091ba:	83fb      	strh	r3, [r7, #30]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	8bfa      	ldrh	r2, [r7, #30]
 80091c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091c6:	b292      	uxth	r2, r2
 80091c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	4413      	add	r3, r2
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	4413      	add	r3, r2
 80091e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80091ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80091f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d019      	beq.n	800922e <PCD_EP_ISR_Handler+0x1e6>
 80091fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d015      	beq.n	800922e <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009208:	6959      	ldr	r1, [r3, #20]
 800920a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800920c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800920e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009210:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009212:	b29b      	uxth	r3, r3
 8009214:	f006 fcc2 	bl	800fb9c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	441a      	add	r2, r3
 8009222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009224:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f00a fa8f 	bl	801374c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009238:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800923c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009240:	2b00      	cmp	r3, #0
 8009242:	f040 82b5 	bne.w	80097b0 <PCD_EP_ISR_Handler+0x768>
 8009246:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800924a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800924e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009252:	f000 82ad 	beq.w	80097b0 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	61bb      	str	r3, [r7, #24]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	4413      	add	r3, r2
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009280:	b29a      	uxth	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b3e      	cmp	r3, #62	; 0x3e
 800928c:	d91d      	bls.n	80092ca <PCD_EP_ISR_Handler+0x282>
 800928e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	647b      	str	r3, [r7, #68]	; 0x44
 8009296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <PCD_EP_ISR_Handler+0x260>
 80092a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a4:	3b01      	subs	r3, #1
 80092a6:	647b      	str	r3, [r7, #68]	; 0x44
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	029b      	lsls	r3, r3, #10
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4313      	orrs	r3, r2
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	e026      	b.n	8009318 <PCD_EP_ISR_Handler+0x2d0>
 80092ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <PCD_EP_ISR_Handler+0x2a0>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e017      	b.n	8009318 <PCD_EP_ISR_Handler+0x2d0>
 80092e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	085b      	lsrs	r3, r3, #1
 80092ee:	647b      	str	r3, [r7, #68]	; 0x44
 80092f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <PCD_EP_ISR_Handler+0x2ba>
 80092fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fe:	3301      	adds	r3, #1
 8009300:	647b      	str	r3, [r7, #68]	; 0x44
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29a      	uxth	r2, r3
 8009308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930a:	b29b      	uxth	r3, r3
 800930c:	029b      	lsls	r3, r3, #10
 800930e:	b29b      	uxth	r3, r3
 8009310:	4313      	orrs	r3, r2
 8009312:	b29a      	uxth	r2, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009328:	827b      	strh	r3, [r7, #18]
 800932a:	8a7b      	ldrh	r3, [r7, #18]
 800932c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009330:	827b      	strh	r3, [r7, #18]
 8009332:	8a7b      	ldrh	r3, [r7, #18]
 8009334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009338:	827b      	strh	r3, [r7, #18]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	8a7b      	ldrh	r3, [r7, #18]
 8009340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009350:	b29b      	uxth	r3, r3
 8009352:	8013      	strh	r3, [r2, #0]
 8009354:	e22c      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800936a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800936e:	2b00      	cmp	r3, #0
 8009370:	f280 80f6 	bge.w	8009560 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29a      	uxth	r2, r3
 8009386:	f640 738f 	movw	r3, #3983	; 0xf8f
 800938a:	4013      	ands	r3, r2
 800938c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80093a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093a6:	b292      	uxth	r2, r2
 80093a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80093aa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80093c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093c2:	7b1b      	ldrb	r3, [r3, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d123      	bne.n	8009410 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	461a      	mov	r2, r3
 80093d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	4413      	add	r3, r2
 80093e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80093f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 808e 	beq.w	8009516 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009400:	6959      	ldr	r1, [r3, #20]
 8009402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009404:	88da      	ldrh	r2, [r3, #6]
 8009406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800940a:	f006 fbc7 	bl	800fb9c <USB_ReadPMA>
 800940e:	e082      	b.n	8009516 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	78db      	ldrb	r3, [r3, #3]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d10a      	bne.n	800942e <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009418:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800941c:	461a      	mov	r2, r3
 800941e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9d3 	bl	80097cc <HAL_PCD_EP_DB_Receive>
 8009426:	4603      	mov	r3, r0
 8009428:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800942c:	e073      	b.n	8009516 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009448:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800945e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800946e:	b29b      	uxth	r3, r3
 8009470:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d022      	beq.n	80094d2 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009494:	b29b      	uxth	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	4413      	add	r3, r2
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	6812      	ldr	r2, [r2, #0]
 80094a4:	4413      	add	r3, r2
 80094a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80094b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d02c      	beq.n	8009516 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6818      	ldr	r0, [r3, #0]
 80094c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c2:	6959      	ldr	r1, [r3, #20]
 80094c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094c6:	891a      	ldrh	r2, [r3, #8]
 80094c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80094cc:	f006 fb66 	bl	800fb9c <USB_ReadPMA>
 80094d0:	e021      	b.n	8009516 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	4413      	add	r3, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6812      	ldr	r2, [r2, #0]
 80094ea:	4413      	add	r3, r2
 80094ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094f6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80094fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	6959      	ldr	r1, [r3, #20]
 800950a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800950c:	895a      	ldrh	r2, [r3, #10]
 800950e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009512:	f006 fb43 	bl	800fb9c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009518:	69da      	ldr	r2, [r3, #28]
 800951a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800951e:	441a      	add	r2, r3
 8009520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009526:	695a      	ldr	r2, [r3, #20]
 8009528:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800952c:	441a      	add	r2, r3
 800952e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009530:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <PCD_EP_ISR_Handler+0x4fe>
 800953a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800953e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	429a      	cmp	r2, r3
 8009544:	d206      	bcs.n	8009554 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f00a f8fd 	bl	801374c <HAL_PCD_DataOutStageCallback>
 8009552:	e005      	b.n	8009560 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800955a:	4618      	mov	r0, r3
 800955c:	f004 fdf1 	bl	800e142 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8121 	beq.w	80097b0 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800956e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	3310      	adds	r3, #16
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4413      	add	r3, r2
 8009580:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	441a      	add	r2, r3
 80095ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80095be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c0:	78db      	ldrb	r3, [r3, #3]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	f040 80a2 	bne.w	800970c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80095c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ca:	2200      	movs	r2, #0
 80095cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80095ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d0:	7b1b      	ldrb	r3, [r3, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8093 	beq.w	80096fe <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80095d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d046      	beq.n	8009672 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80095e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d126      	bne.n	800963a <PCD_EP_ISR_Handler+0x5f2>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	461a      	mov	r2, r3
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	4413      	add	r3, r2
 8009602:	627b      	str	r3, [r7, #36]	; 0x24
 8009604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	00da      	lsls	r2, r3, #3
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	4413      	add	r3, r2
 800960e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009612:	623b      	str	r3, [r7, #32]
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	b29b      	uxth	r3, r3
 800961a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800961e:	b29a      	uxth	r2, r3
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	801a      	strh	r2, [r3, #0]
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009632:	b29a      	uxth	r2, r3
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	e061      	b.n	80096fe <PCD_EP_ISR_Handler+0x6b6>
 800963a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d15d      	bne.n	80096fe <PCD_EP_ISR_Handler+0x6b6>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009650:	b29b      	uxth	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	4413      	add	r3, r2
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800965a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	00da      	lsls	r2, r3, #3
 8009660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009662:	4413      	add	r3, r2
 8009664:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009668:	62bb      	str	r3, [r7, #40]	; 0x28
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	2200      	movs	r2, #0
 800966e:	801a      	strh	r2, [r3, #0]
 8009670:	e045      	b.n	80096fe <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d126      	bne.n	80096ce <PCD_EP_ISR_Handler+0x686>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	637b      	str	r3, [r7, #52]	; 0x34
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800968e:	b29b      	uxth	r3, r3
 8009690:	461a      	mov	r2, r3
 8009692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009694:	4413      	add	r3, r2
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
 8009698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	00da      	lsls	r2, r3, #3
 800969e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a0:	4413      	add	r3, r2
 80096a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096a6:	633b      	str	r3, [r7, #48]	; 0x30
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	801a      	strh	r2, [r3, #0]
 80096cc:	e017      	b.n	80096fe <PCD_EP_ISR_Handler+0x6b6>
 80096ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d0:	785b      	ldrb	r3, [r3, #1]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d113      	bne.n	80096fe <PCD_EP_ISR_Handler+0x6b6>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096de:	b29b      	uxth	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	4413      	add	r3, r2
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	00da      	lsls	r2, r3, #3
 80096ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f0:	4413      	add	r3, r2
 80096f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	2200      	movs	r2, #0
 80096fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80096fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f00a f83c 	bl	8013782 <HAL_PCD_DataInStageCallback>
 800970a:	e051      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800970c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d144      	bne.n	80097a2 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009720:	b29b      	uxth	r3, r3
 8009722:	461a      	mov	r2, r3
 8009724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	4413      	add	r3, r2
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	4413      	add	r3, r2
 8009732:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800973c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009742:	699a      	ldr	r2, [r3, #24]
 8009744:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009748:	429a      	cmp	r2, r3
 800974a:	d907      	bls.n	800975c <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800974c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800974e:	699a      	ldr	r2, [r3, #24]
 8009750:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009754:	1ad2      	subs	r2, r2, r3
 8009756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009758:	619a      	str	r2, [r3, #24]
 800975a:	e002      	b.n	8009762 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800975c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975e:	2200      	movs	r2, #0
 8009760:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800976a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f00a f806 	bl	8013782 <HAL_PCD_DataInStageCallback>
 8009776:	e01b      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977a:	695a      	ldr	r2, [r3, #20]
 800977c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009780:	441a      	add	r2, r3
 8009782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009784:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009788:	69da      	ldr	r2, [r3, #28]
 800978a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800978e:	441a      	add	r2, r3
 8009790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009792:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800979a:	4618      	mov	r0, r3
 800979c:	f004 fcd1 	bl	800e142 <USB_EPStartXfer>
 80097a0:	e006      	b.n	80097b0 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80097a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80097a6:	461a      	mov	r2, r3
 80097a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f917 	bl	80099de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	b21b      	sxth	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f6ff ac48 	blt.w	8009052 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3758      	adds	r7, #88	; 0x58
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4613      	mov	r3, r2
 80097d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d07c      	beq.n	80098de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4413      	add	r3, r2
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	4413      	add	r3, r2
 80097fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009808:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	699a      	ldr	r2, [r3, #24]
 800980e:	8b7b      	ldrh	r3, [r7, #26]
 8009810:	429a      	cmp	r2, r3
 8009812:	d306      	bcc.n	8009822 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	699a      	ldr	r2, [r3, #24]
 8009818:	8b7b      	ldrh	r3, [r7, #26]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	619a      	str	r2, [r3, #24]
 8009820:	e002      	b.n	8009828 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d123      	bne.n	8009878 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984a:	833b      	strh	r3, [r7, #24]
 800984c:	8b3b      	ldrh	r3, [r7, #24]
 800984e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009852:	833b      	strh	r3, [r7, #24]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	441a      	add	r2, r3
 8009862:	8b3b      	ldrh	r3, [r7, #24]
 8009864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009874:	b29b      	uxth	r3, r3
 8009876:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009878:	88fb      	ldrh	r3, [r7, #6]
 800987a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01f      	beq.n	80098c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4413      	add	r3, r2
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29b      	uxth	r3, r3
 8009894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989c:	82fb      	strh	r3, [r7, #22]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	441a      	add	r2, r3
 80098ac:	8afb      	ldrh	r3, [r7, #22]
 80098ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098be:	b29b      	uxth	r3, r3
 80098c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80098c2:	8b7b      	ldrh	r3, [r7, #26]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8085 	beq.w	80099d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6959      	ldr	r1, [r3, #20]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	891a      	ldrh	r2, [r3, #8]
 80098d6:	8b7b      	ldrh	r3, [r7, #26]
 80098d8:	f006 f960 	bl	800fb9c <USB_ReadPMA>
 80098dc:	e07a      	b.n	80099d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	4413      	add	r3, r2
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009902:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	8b7b      	ldrh	r3, [r7, #26]
 800990a:	429a      	cmp	r2, r3
 800990c:	d306      	bcc.n	800991c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699a      	ldr	r2, [r3, #24]
 8009912:	8b7b      	ldrh	r3, [r7, #26]
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	619a      	str	r2, [r3, #24]
 800991a:	e002      	b.n	8009922 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2200      	movs	r2, #0
 8009920:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d123      	bne.n	8009972 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	83fb      	strh	r3, [r7, #30]
 8009946:	8bfb      	ldrh	r3, [r7, #30]
 8009948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800994c:	83fb      	strh	r3, [r7, #30]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	441a      	add	r2, r3
 800995c:	8bfb      	ldrh	r3, [r7, #30]
 800995e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800996a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996e:	b29b      	uxth	r3, r3
 8009970:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d11f      	bne.n	80099bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009996:	83bb      	strh	r3, [r7, #28]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	441a      	add	r2, r3
 80099a6:	8bbb      	ldrh	r3, [r7, #28]
 80099a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80099bc:	8b7b      	ldrh	r3, [r7, #26]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d008      	beq.n	80099d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6959      	ldr	r1, [r3, #20]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	895a      	ldrh	r2, [r3, #10]
 80099ce:	8b7b      	ldrh	r3, [r7, #26]
 80099d0:	f006 f8e4 	bl	800fb9c <USB_ReadPMA>
    }
  }

  return count;
 80099d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3720      	adds	r7, #32
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b0a4      	sub	sp, #144	; 0x90
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	4613      	mov	r3, r2
 80099ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80099ec:	88fb      	ldrh	r3, [r7, #6]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 81db 	beq.w	8009dae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	6812      	ldr	r2, [r2, #0]
 8009a10:	4413      	add	r3, r2
 8009a12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a1c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	699a      	ldr	r2, [r3, #24]
 8009a24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d907      	bls.n	8009a3c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	699a      	ldr	r2, [r3, #24]
 8009a30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009a34:	1ad2      	subs	r2, r2, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	619a      	str	r2, [r3, #24]
 8009a3a:	e002      	b.n	8009a42 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 80b9 	bne.w	8009bbe <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d126      	bne.n	8009aa2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a68:	4413      	add	r3, r2
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	00da      	lsls	r2, r3, #3
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	4413      	add	r3, r2
 8009a76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	801a      	strh	r2, [r3, #0]
 8009aa0:	e01a      	b.n	8009ad8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d116      	bne.n	8009ad8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	461a      	mov	r2, r3
 8009abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abe:	4413      	add	r3, r2
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	00da      	lsls	r2, r3, #3
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aca:	4413      	add	r3, r2
 8009acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d126      	bne.n	8009b34 <HAL_PCD_EP_DB_Transmit+0x156>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	61fb      	str	r3, [r7, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	4413      	add	r3, r2
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	00da      	lsls	r2, r3, #3
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	4413      	add	r3, r2
 8009b08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b0c:	61bb      	str	r3, [r7, #24]
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	e017      	b.n	8009b64 <HAL_PCD_EP_DB_Transmit+0x186>
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d113      	bne.n	8009b64 <HAL_PCD_EP_DB_Transmit+0x186>
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	4413      	add	r3, r2
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	00da      	lsls	r2, r3, #3
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	4413      	add	r3, r2
 8009b58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b5c:	623b      	str	r3, [r7, #32]
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	2200      	movs	r2, #0
 8009b62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f009 fe09 	bl	8013782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 82fa 	beq.w	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b96:	82fb      	strh	r3, [r7, #22]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	8afb      	ldrh	r3, [r7, #22]
 8009ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	8013      	strh	r3, [r2, #0]
 8009bbc:	e2d8      	b.n	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d021      	beq.n	8009c0c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	f040 82ac 	bne.w	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	695a      	ldr	r2, [r3, #20]
 8009c1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009c20:	441a      	add	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	69da      	ldr	r2, [r3, #28]
 8009c2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009c2e:	441a      	add	r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	6a1a      	ldr	r2, [r3, #32]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d30b      	bcc.n	8009c58 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	6a1a      	ldr	r2, [r3, #32]
 8009c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	621a      	str	r2, [r3, #32]
 8009c56:	e017      	b.n	8009c88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d108      	bne.n	8009c72 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009c60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009c70:	e00a      	b.n	8009c88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2200      	movs	r2, #0
 8009c86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	785b      	ldrb	r3, [r3, #1]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d165      	bne.n	8009d5c <HAL_PCD_EP_DB_Transmit+0x37e>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca4:	4413      	add	r3, r2
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	00da      	lsls	r2, r3, #3
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8009cce:	d91d      	bls.n	8009d0c <HAL_PCD_EP_DB_Transmit+0x32e>
 8009cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cd4:	095b      	lsrs	r3, r3, #5
 8009cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <HAL_PCD_EP_DB_Transmit+0x30c>
 8009ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	029b      	lsls	r3, r3, #10
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	801a      	strh	r2, [r3, #0]
 8009d0a:	e044      	b.n	8009d96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <HAL_PCD_EP_DB_Transmit+0x34c>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e035      	b.n	8009d96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d2e:	085b      	lsrs	r3, r3, #1
 8009d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <HAL_PCD_EP_DB_Transmit+0x366>
 8009d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d40:	3301      	adds	r3, #1
 8009d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	881b      	ldrh	r3, [r3, #0]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	029b      	lsls	r3, r3, #10
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4313      	orrs	r3, r2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	e01c      	b.n	8009d96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d118      	bne.n	8009d96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	647b      	str	r3, [r7, #68]	; 0x44
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	461a      	mov	r2, r3
 8009d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d78:	4413      	add	r3, r2
 8009d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	00da      	lsls	r2, r3, #3
 8009d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d84:	4413      	add	r3, r2
 8009d86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6959      	ldr	r1, [r3, #20]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	891a      	ldrh	r2, [r3, #8]
 8009da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f005 feb6 	bl	800fb18 <USB_WritePMA>
 8009dac:	e1e0      	b.n	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	4413      	add	r3, r2
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d307      	bcc.n	8009df2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009dea:	1ad2      	subs	r2, r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	619a      	str	r2, [r3, #24]
 8009df0:	e002      	b.n	8009df8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 80c0 	bne.w	8009f82 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d126      	bne.n	8009e58 <HAL_PCD_EP_DB_Transmit+0x47a>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e1e:	4413      	add	r3, r2
 8009e20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	00da      	lsls	r2, r3, #3
 8009e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e40:	801a      	strh	r2, [r3, #0]
 8009e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e54:	801a      	strh	r2, [r3, #0]
 8009e56:	e01a      	b.n	8009e8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d116      	bne.n	8009e8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	667b      	str	r3, [r7, #100]	; 0x64
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e74:	4413      	add	r3, r2
 8009e76:	667b      	str	r3, [r7, #100]	; 0x64
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	00da      	lsls	r2, r3, #3
 8009e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e80:	4413      	add	r3, r2
 8009e82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e86:	663b      	str	r3, [r7, #96]	; 0x60
 8009e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	677b      	str	r3, [r7, #116]	; 0x74
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d12b      	bne.n	8009ef4 <HAL_PCD_EP_DB_Transmit+0x516>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eb0:	4413      	add	r3, r2
 8009eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	00da      	lsls	r2, r3, #3
 8009eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ed8:	801a      	strh	r2, [r3, #0]
 8009eda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	e017      	b.n	8009f24 <HAL_PCD_EP_DB_Transmit+0x546>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d113      	bne.n	8009f24 <HAL_PCD_EP_DB_Transmit+0x546>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f0a:	4413      	add	r3, r2
 8009f0c:	677b      	str	r3, [r7, #116]	; 0x74
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	00da      	lsls	r2, r3, #3
 8009f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f16:	4413      	add	r3, r2
 8009f18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8009f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f20:	2200      	movs	r2, #0
 8009f22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f009 fc29 	bl	8013782 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f040 811a 	bne.w	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f56:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	441a      	add	r2, r3
 8009f68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8009f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	8013      	strh	r3, [r2, #0]
 8009f80:	e0f6      	b.n	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d121      	bne.n	8009fd0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	441a      	add	r2, r3
 8009fb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	f040 80ca 	bne.w	800a170 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	695a      	ldr	r2, [r3, #20]
 8009fe0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009fe4:	441a      	add	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	69da      	ldr	r2, [r3, #28]
 8009fee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009ff2:	441a      	add	r2, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6a1a      	ldr	r2, [r3, #32]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	429a      	cmp	r2, r3
 800a002:	d30b      	bcc.n	800a01c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a014:	1ad2      	subs	r2, r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	621a      	str	r2, [r3, #32]
 800a01a:	e017      	b.n	800a04c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d108      	bne.n	800a036 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a024:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a028:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a034:	e00a      	b.n	800a04c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2200      	movs	r2, #0
 800a042:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	657b      	str	r3, [r7, #84]	; 0x54
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	785b      	ldrb	r3, [r3, #1]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d165      	bne.n	800a126 <HAL_PCD_EP_DB_Transmit+0x748>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a068:	b29b      	uxth	r3, r3
 800a06a:	461a      	mov	r2, r3
 800a06c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a06e:	4413      	add	r3, r2
 800a070:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	00da      	lsls	r2, r3, #3
 800a078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07a:	4413      	add	r3, r2
 800a07c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a080:	65bb      	str	r3, [r7, #88]	; 0x58
 800a082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a084:	881b      	ldrh	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a090:	801a      	strh	r2, [r3, #0]
 800a092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a096:	2b3e      	cmp	r3, #62	; 0x3e
 800a098:	d91d      	bls.n	800a0d6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a09a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a6:	f003 031f 	and.w	r3, r3, #31
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a0ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	029b      	lsls	r3, r3, #10
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0d2:	801a      	strh	r2, [r3, #0]
 800a0d4:	e041      	b.n	800a15a <HAL_PCD_EP_DB_Transmit+0x77c>
 800a0d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <HAL_PCD_EP_DB_Transmit+0x716>
 800a0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	e032      	b.n	800a15a <HAL_PCD_EP_DB_Transmit+0x77c>
 800a0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <HAL_PCD_EP_DB_Transmit+0x730>
 800a108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a10a:	3301      	adds	r3, #1
 800a10c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a10e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	b29a      	uxth	r2, r3
 800a114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a116:	b29b      	uxth	r3, r3
 800a118:	029b      	lsls	r3, r3, #10
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b29a      	uxth	r2, r3
 800a120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a122:	801a      	strh	r2, [r3, #0]
 800a124:	e019      	b.n	800a15a <HAL_PCD_EP_DB_Transmit+0x77c>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d115      	bne.n	800a15a <HAL_PCD_EP_DB_Transmit+0x77c>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a136:	b29b      	uxth	r3, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a13c:	4413      	add	r3, r2
 800a13e:	657b      	str	r3, [r7, #84]	; 0x54
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	00da      	lsls	r2, r3, #3
 800a146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a148:	4413      	add	r3, r2
 800a14a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a14e:	653b      	str	r3, [r7, #80]	; 0x50
 800a150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a154:	b29a      	uxth	r2, r3
 800a156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a158:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	6959      	ldr	r1, [r3, #20]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	895a      	ldrh	r2, [r3, #10]
 800a166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	f005 fcd4 	bl	800fb18 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a18a:	82bb      	strh	r3, [r7, #20]
 800a18c:	8abb      	ldrh	r3, [r7, #20]
 800a18e:	f083 0310 	eor.w	r3, r3, #16
 800a192:	82bb      	strh	r3, [r7, #20]
 800a194:	8abb      	ldrh	r3, [r7, #20]
 800a196:	f083 0320 	eor.w	r3, r3, #32
 800a19a:	82bb      	strh	r3, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	441a      	add	r2, r3
 800a1aa:	8abb      	ldrh	r3, [r7, #20]
 800a1ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3790      	adds	r7, #144	; 0x90
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b087      	sub	sp, #28
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	817b      	strh	r3, [r7, #10]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a1dc:	897b      	ldrh	r3, [r7, #10]
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00b      	beq.n	800a200 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1e8:	897b      	ldrh	r3, [r7, #10]
 800a1ea:	f003 0207 	and.w	r2, r3, #7
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	3310      	adds	r3, #16
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]
 800a1fe:	e009      	b.n	800a214 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a200:	897a      	ldrh	r2, [r7, #10]
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a214:	893b      	ldrh	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d107      	bne.n	800a22a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	2200      	movs	r2, #0
 800a21e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	b29a      	uxth	r2, r3
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	80da      	strh	r2, [r3, #6]
 800a228:	e00b      	b.n	800a242 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2201      	movs	r2, #1
 800a22e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	b29a      	uxth	r2, r3
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a274:	b29b      	uxth	r3, r3
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f043 0302 	orr.w	r3, r3, #2
 800a28e:	b29a      	uxth	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d141      	bne.n	800a336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a2b2:	4b4b      	ldr	r3, [pc, #300]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2be:	d131      	bne.n	800a324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2c0:	4b47      	ldr	r3, [pc, #284]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2c6:	4a46      	ldr	r2, [pc, #280]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a2d0:	4b43      	ldr	r3, [pc, #268]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a2d8:	4a41      	ldr	r2, [pc, #260]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a2de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a2e0:	4b40      	ldr	r3, [pc, #256]	; (800a3e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2232      	movs	r2, #50	; 0x32
 800a2e6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ea:	4a3f      	ldr	r2, [pc, #252]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f0:	0c9b      	lsrs	r3, r3, #18
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2f6:	e002      	b.n	800a2fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a2fe:	4b38      	ldr	r3, [pc, #224]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a30a:	d102      	bne.n	800a312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f2      	bne.n	800a2f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a312:	4b33      	ldr	r3, [pc, #204]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31e:	d158      	bne.n	800a3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e057      	b.n	800a3d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a324:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a32a:	4a2d      	ldr	r2, [pc, #180]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a32c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a334:	e04d      	b.n	800a3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a33c:	d141      	bne.n	800a3c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a33e:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a34a:	d131      	bne.n	800a3b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a34c:	4b24      	ldr	r3, [pc, #144]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a352:	4a23      	ldr	r2, [pc, #140]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a35c:	4b20      	ldr	r3, [pc, #128]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a364:	4a1e      	ldr	r2, [pc, #120]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a36a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a36c:	4b1d      	ldr	r3, [pc, #116]	; (800a3e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2232      	movs	r2, #50	; 0x32
 800a372:	fb02 f303 	mul.w	r3, r2, r3
 800a376:	4a1c      	ldr	r2, [pc, #112]	; (800a3e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a378:	fba2 2303 	umull	r2, r3, r2, r3
 800a37c:	0c9b      	lsrs	r3, r3, #18
 800a37e:	3301      	adds	r3, #1
 800a380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a382:	e002      	b.n	800a38a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3b01      	subs	r3, #1
 800a388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a38a:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a396:	d102      	bne.n	800a39e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1f2      	bne.n	800a384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a39e:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3aa:	d112      	bne.n	800a3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e011      	b.n	800a3d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b6:	4a0a      	ldr	r2, [pc, #40]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a3c0:	e007      	b.n	800a3d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3ca:	4a05      	ldr	r2, [pc, #20]	; (800a3e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	40007000 	.word	0x40007000
 800a3e4:	20000168 	.word	0x20000168
 800a3e8:	431bde83 	.word	0x431bde83

0800a3ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a3f0:	4b05      	ldr	r3, [pc, #20]	; (800a408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4a04      	ldr	r2, [pc, #16]	; (800a408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a3f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3fa:	6093      	str	r3, [r2, #8]
}
 800a3fc:	bf00      	nop
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	40007000 	.word	0x40007000

0800a40c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e2fe      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d075      	beq.n	800a516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a42a:	4b97      	ldr	r3, [pc, #604]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f003 030c 	and.w	r3, r3, #12
 800a432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a434:	4b94      	ldr	r3, [pc, #592]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2b0c      	cmp	r3, #12
 800a442:	d102      	bne.n	800a44a <HAL_RCC_OscConfig+0x3e>
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2b03      	cmp	r3, #3
 800a448:	d002      	beq.n	800a450 <HAL_RCC_OscConfig+0x44>
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d10b      	bne.n	800a468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a450:	4b8d      	ldr	r3, [pc, #564]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d05b      	beq.n	800a514 <HAL_RCC_OscConfig+0x108>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d157      	bne.n	800a514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e2d9      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a470:	d106      	bne.n	800a480 <HAL_RCC_OscConfig+0x74>
 800a472:	4b85      	ldr	r3, [pc, #532]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a84      	ldr	r2, [pc, #528]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	e01d      	b.n	800a4bc <HAL_RCC_OscConfig+0xb0>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a488:	d10c      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x98>
 800a48a:	4b7f      	ldr	r3, [pc, #508]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a7e      	ldr	r2, [pc, #504]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	4b7c      	ldr	r3, [pc, #496]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a7b      	ldr	r2, [pc, #492]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	e00b      	b.n	800a4bc <HAL_RCC_OscConfig+0xb0>
 800a4a4:	4b78      	ldr	r3, [pc, #480]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a77      	ldr	r2, [pc, #476]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a4aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	4b75      	ldr	r3, [pc, #468]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a74      	ldr	r2, [pc, #464]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a4b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d013      	beq.n	800a4ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c4:	f7fa fe3a 	bl	800513c <HAL_GetTick>
 800a4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4ca:	e008      	b.n	800a4de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4cc:	f7fa fe36 	bl	800513c <HAL_GetTick>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	2b64      	cmp	r3, #100	; 0x64
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e29e      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4de:	4b6a      	ldr	r3, [pc, #424]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d0f0      	beq.n	800a4cc <HAL_RCC_OscConfig+0xc0>
 800a4ea:	e014      	b.n	800a516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ec:	f7fa fe26 	bl	800513c <HAL_GetTick>
 800a4f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a4f2:	e008      	b.n	800a506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4f4:	f7fa fe22 	bl	800513c <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	2b64      	cmp	r3, #100	; 0x64
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e28a      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a506:	4b60      	ldr	r3, [pc, #384]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1f0      	bne.n	800a4f4 <HAL_RCC_OscConfig+0xe8>
 800a512:	e000      	b.n	800a516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d075      	beq.n	800a60e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a522:	4b59      	ldr	r3, [pc, #356]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f003 030c 	and.w	r3, r3, #12
 800a52a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a52c:	4b56      	ldr	r3, [pc, #344]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	2b0c      	cmp	r3, #12
 800a53a:	d102      	bne.n	800a542 <HAL_RCC_OscConfig+0x136>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d002      	beq.n	800a548 <HAL_RCC_OscConfig+0x13c>
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	2b04      	cmp	r3, #4
 800a546:	d11f      	bne.n	800a588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a548:	4b4f      	ldr	r3, [pc, #316]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <HAL_RCC_OscConfig+0x154>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d101      	bne.n	800a560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e25d      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a560:	4b49      	ldr	r3, [pc, #292]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	061b      	lsls	r3, r3, #24
 800a56e:	4946      	ldr	r1, [pc, #280]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a574:	4b45      	ldr	r3, [pc, #276]	; (800a68c <HAL_RCC_OscConfig+0x280>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fa fd93 	bl	80050a4 <HAL_InitTick>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d043      	beq.n	800a60c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e249      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d023      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a590:	4b3d      	ldr	r3, [pc, #244]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a3c      	ldr	r2, [pc, #240]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a59c:	f7fa fdce 	bl	800513c <HAL_GetTick>
 800a5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5a2:	e008      	b.n	800a5b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a4:	f7fa fdca 	bl	800513c <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e232      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5b6:	4b34      	ldr	r3, [pc, #208]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5c2:	4b31      	ldr	r3, [pc, #196]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	061b      	lsls	r3, r3, #24
 800a5d0:	492d      	ldr	r1, [pc, #180]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	604b      	str	r3, [r1, #4]
 800a5d6:	e01a      	b.n	800a60e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5d8:	4b2b      	ldr	r3, [pc, #172]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a2a      	ldr	r2, [pc, #168]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a5de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e4:	f7fa fdaa 	bl	800513c <HAL_GetTick>
 800a5e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5ea:	e008      	b.n	800a5fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5ec:	f7fa fda6 	bl	800513c <HAL_GetTick>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e20e      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a5fe:	4b22      	ldr	r3, [pc, #136]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1f0      	bne.n	800a5ec <HAL_RCC_OscConfig+0x1e0>
 800a60a:	e000      	b.n	800a60e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a60c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	2b00      	cmp	r3, #0
 800a618:	d041      	beq.n	800a69e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01c      	beq.n	800a65c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a622:	4b19      	ldr	r3, [pc, #100]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a628:	4a17      	ldr	r2, [pc, #92]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a632:	f7fa fd83 	bl	800513c <HAL_GetTick>
 800a636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a638:	e008      	b.n	800a64c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a63a:	f7fa fd7f 	bl	800513c <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d901      	bls.n	800a64c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e1e7      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a64c:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0ef      	beq.n	800a63a <HAL_RCC_OscConfig+0x22e>
 800a65a:	e020      	b.n	800a69e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a65c:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a662:	4a09      	ldr	r2, [pc, #36]	; (800a688 <HAL_RCC_OscConfig+0x27c>)
 800a664:	f023 0301 	bic.w	r3, r3, #1
 800a668:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a66c:	f7fa fd66 	bl	800513c <HAL_GetTick>
 800a670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a672:	e00d      	b.n	800a690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a674:	f7fa fd62 	bl	800513c <HAL_GetTick>
 800a678:	4602      	mov	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad3      	subs	r3, r2, r3
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d906      	bls.n	800a690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e1ca      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
 800a686:	bf00      	nop
 800a688:	40021000 	.word	0x40021000
 800a68c:	2000017c 	.word	0x2000017c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a690:	4b8c      	ldr	r3, [pc, #560]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1ea      	bne.n	800a674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80a6 	beq.w	800a7f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a6b0:	4b84      	ldr	r3, [pc, #528]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d101      	bne.n	800a6c0 <HAL_RCC_OscConfig+0x2b4>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e000      	b.n	800a6c2 <HAL_RCC_OscConfig+0x2b6>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6c6:	4b7f      	ldr	r3, [pc, #508]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ca:	4a7e      	ldr	r2, [pc, #504]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a6cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d0:	6593      	str	r3, [r2, #88]	; 0x58
 800a6d2:	4b7c      	ldr	r3, [pc, #496]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6e2:	4b79      	ldr	r3, [pc, #484]	; (800a8c8 <HAL_RCC_OscConfig+0x4bc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d118      	bne.n	800a720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6ee:	4b76      	ldr	r3, [pc, #472]	; (800a8c8 <HAL_RCC_OscConfig+0x4bc>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a75      	ldr	r2, [pc, #468]	; (800a8c8 <HAL_RCC_OscConfig+0x4bc>)
 800a6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6fa:	f7fa fd1f 	bl	800513c <HAL_GetTick>
 800a6fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a700:	e008      	b.n	800a714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a702:	f7fa fd1b 	bl	800513c <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e183      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a714:	4b6c      	ldr	r3, [pc, #432]	; (800a8c8 <HAL_RCC_OscConfig+0x4bc>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0f0      	beq.n	800a702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d108      	bne.n	800a73a <HAL_RCC_OscConfig+0x32e>
 800a728:	4b66      	ldr	r3, [pc, #408]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a72e:	4a65      	ldr	r2, [pc, #404]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a730:	f043 0301 	orr.w	r3, r3, #1
 800a734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a738:	e024      	b.n	800a784 <HAL_RCC_OscConfig+0x378>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d110      	bne.n	800a764 <HAL_RCC_OscConfig+0x358>
 800a742:	4b60      	ldr	r3, [pc, #384]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a748:	4a5e      	ldr	r2, [pc, #376]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a74a:	f043 0304 	orr.w	r3, r3, #4
 800a74e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a752:	4b5c      	ldr	r3, [pc, #368]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a758:	4a5a      	ldr	r2, [pc, #360]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a75a:	f043 0301 	orr.w	r3, r3, #1
 800a75e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a762:	e00f      	b.n	800a784 <HAL_RCC_OscConfig+0x378>
 800a764:	4b57      	ldr	r3, [pc, #348]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76a:	4a56      	ldr	r2, [pc, #344]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a76c:	f023 0301 	bic.w	r3, r3, #1
 800a770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a774:	4b53      	ldr	r3, [pc, #332]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77a:	4a52      	ldr	r2, [pc, #328]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a77c:	f023 0304 	bic.w	r3, r3, #4
 800a780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d016      	beq.n	800a7ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a78c:	f7fa fcd6 	bl	800513c <HAL_GetTick>
 800a790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a792:	e00a      	b.n	800a7aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a794:	f7fa fcd2 	bl	800513c <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e138      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7aa:	4b46      	ldr	r3, [pc, #280]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d0ed      	beq.n	800a794 <HAL_RCC_OscConfig+0x388>
 800a7b8:	e015      	b.n	800a7e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ba:	f7fa fcbf 	bl	800513c <HAL_GetTick>
 800a7be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7c0:	e00a      	b.n	800a7d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7c2:	f7fa fcbb 	bl	800513c <HAL_GetTick>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d901      	bls.n	800a7d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e121      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7d8:	4b3a      	ldr	r3, [pc, #232]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1ed      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a7e6:	7ffb      	ldrb	r3, [r7, #31]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d105      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ec:	4b35      	ldr	r3, [pc, #212]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	4a34      	ldr	r2, [pc, #208]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a7f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0320 	and.w	r3, r3, #32
 800a800:	2b00      	cmp	r3, #0
 800a802:	d03c      	beq.n	800a87e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d01c      	beq.n	800a846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a80c:	4b2d      	ldr	r3, [pc, #180]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a80e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a812:	4a2c      	ldr	r2, [pc, #176]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a814:	f043 0301 	orr.w	r3, r3, #1
 800a818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81c:	f7fa fc8e 	bl	800513c <HAL_GetTick>
 800a820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a822:	e008      	b.n	800a836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a824:	f7fa fc8a 	bl	800513c <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d901      	bls.n	800a836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e0f2      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a836:	4b23      	ldr	r3, [pc, #140]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0ef      	beq.n	800a824 <HAL_RCC_OscConfig+0x418>
 800a844:	e01b      	b.n	800a87e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a846:	4b1f      	ldr	r3, [pc, #124]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a84c:	4a1d      	ldr	r2, [pc, #116]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a856:	f7fa fc71 	bl	800513c <HAL_GetTick>
 800a85a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a85c:	e008      	b.n	800a870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a85e:	f7fa fc6d 	bl	800513c <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d901      	bls.n	800a870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e0d5      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a876:	f003 0302 	and.w	r3, r3, #2
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1ef      	bne.n	800a85e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80c9 	beq.w	800aa1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a888:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	f003 030c 	and.w	r3, r3, #12
 800a890:	2b0c      	cmp	r3, #12
 800a892:	f000 8083 	beq.w	800a99c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d15e      	bne.n	800a95c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <HAL_RCC_OscConfig+0x4b8>)
 800a8a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8aa:	f7fa fc47 	bl	800513c <HAL_GetTick>
 800a8ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8b0:	e00c      	b.n	800a8cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8b2:	f7fa fc43 	bl	800513c <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d905      	bls.n	800a8cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e0ab      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
 800a8c4:	40021000 	.word	0x40021000
 800a8c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8cc:	4b55      	ldr	r3, [pc, #340]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1ec      	bne.n	800a8b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8d8:	4b52      	ldr	r3, [pc, #328]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	4b52      	ldr	r3, [pc, #328]	; (800aa28 <HAL_RCC_OscConfig+0x61c>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	6a11      	ldr	r1, [r2, #32]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8e8:	3a01      	subs	r2, #1
 800a8ea:	0112      	lsls	r2, r2, #4
 800a8ec:	4311      	orrs	r1, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a8f2:	0212      	lsls	r2, r2, #8
 800a8f4:	4311      	orrs	r1, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a8fa:	0852      	lsrs	r2, r2, #1
 800a8fc:	3a01      	subs	r2, #1
 800a8fe:	0552      	lsls	r2, r2, #21
 800a900:	4311      	orrs	r1, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a906:	0852      	lsrs	r2, r2, #1
 800a908:	3a01      	subs	r2, #1
 800a90a:	0652      	lsls	r2, r2, #25
 800a90c:	4311      	orrs	r1, r2
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a912:	06d2      	lsls	r2, r2, #27
 800a914:	430a      	orrs	r2, r1
 800a916:	4943      	ldr	r1, [pc, #268]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a918:	4313      	orrs	r3, r2
 800a91a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a91c:	4b41      	ldr	r3, [pc, #260]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a40      	ldr	r2, [pc, #256]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a928:	4b3e      	ldr	r3, [pc, #248]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	4a3d      	ldr	r2, [pc, #244]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a92e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a934:	f7fa fc02 	bl	800513c <HAL_GetTick>
 800a938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a93a:	e008      	b.n	800a94e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a93c:	f7fa fbfe 	bl	800513c <HAL_GetTick>
 800a940:	4602      	mov	r2, r0
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	2b02      	cmp	r3, #2
 800a948:	d901      	bls.n	800a94e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e066      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a94e:	4b35      	ldr	r3, [pc, #212]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a956:	2b00      	cmp	r3, #0
 800a958:	d0f0      	beq.n	800a93c <HAL_RCC_OscConfig+0x530>
 800a95a:	e05e      	b.n	800aa1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a95c:	4b31      	ldr	r3, [pc, #196]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a30      	ldr	r2, [pc, #192]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a968:	f7fa fbe8 	bl	800513c <HAL_GetTick>
 800a96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a96e:	e008      	b.n	800a982 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a970:	f7fa fbe4 	bl	800513c <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d901      	bls.n	800a982 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a97e:	2303      	movs	r3, #3
 800a980:	e04c      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a982:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1f0      	bne.n	800a970 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a98e:	4b25      	ldr	r3, [pc, #148]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a990:	68da      	ldr	r2, [r3, #12]
 800a992:	4924      	ldr	r1, [pc, #144]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a994:	4b25      	ldr	r3, [pc, #148]	; (800aa2c <HAL_RCC_OscConfig+0x620>)
 800a996:	4013      	ands	r3, r2
 800a998:	60cb      	str	r3, [r1, #12]
 800a99a:	e03e      	b.n	800aa1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d101      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e039      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a9a8:	4b1e      	ldr	r3, [pc, #120]	; (800aa24 <HAL_RCC_OscConfig+0x618>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f003 0203 	and.w	r2, r3, #3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d12c      	bne.n	800aa16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d123      	bne.n	800aa16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d11b      	bne.n	800aa16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d113      	bne.n	800aa16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f8:	085b      	lsrs	r3, r3, #1
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d109      	bne.n	800aa16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d001      	beq.n	800aa1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e000      	b.n	800aa1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	40021000 	.word	0x40021000
 800aa28:	019f800c 	.word	0x019f800c
 800aa2c:	feeefffc 	.word	0xfeeefffc

0800aa30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e11e      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa48:	4b91      	ldr	r3, [pc, #580]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 030f 	and.w	r3, r3, #15
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d910      	bls.n	800aa78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa56:	4b8e      	ldr	r3, [pc, #568]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f023 020f 	bic.w	r2, r3, #15
 800aa5e:	498c      	ldr	r1, [pc, #560]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa66:	4b8a      	ldr	r3, [pc, #552]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 030f 	and.w	r3, r3, #15
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d001      	beq.n	800aa78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e106      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d073      	beq.n	800ab6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	2b03      	cmp	r3, #3
 800aa8a:	d129      	bne.n	800aae0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa8c:	4b81      	ldr	r3, [pc, #516]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d101      	bne.n	800aa9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e0f4      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aa9c:	f000 f966 	bl	800ad6c <RCC_GetSysClockFreqFromPLLSource>
 800aaa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	4a7c      	ldr	r2, [pc, #496]	; (800ac98 <HAL_RCC_ClockConfig+0x268>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d93f      	bls.n	800ab2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aaaa:	4b7a      	ldr	r3, [pc, #488]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d009      	beq.n	800aaca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d033      	beq.n	800ab2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d12f      	bne.n	800ab2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aaca:	4b72      	ldr	r3, [pc, #456]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aad2:	4a70      	ldr	r2, [pc, #448]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aada:	2380      	movs	r3, #128	; 0x80
 800aadc:	617b      	str	r3, [r7, #20]
 800aade:	e024      	b.n	800ab2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d107      	bne.n	800aaf8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aae8:	4b6a      	ldr	r3, [pc, #424]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d109      	bne.n	800ab08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	e0c6      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aaf8:	4b66      	ldr	r3, [pc, #408]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e0be      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ab08:	f000 f8ce 	bl	800aca8 <HAL_RCC_GetSysClockFreq>
 800ab0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	4a61      	ldr	r2, [pc, #388]	; (800ac98 <HAL_RCC_ClockConfig+0x268>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d909      	bls.n	800ab2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab16:	4b5f      	ldr	r3, [pc, #380]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab1e:	4a5d      	ldr	r2, [pc, #372]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ab26:	2380      	movs	r3, #128	; 0x80
 800ab28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab2a:	4b5a      	ldr	r3, [pc, #360]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f023 0203 	bic.w	r2, r3, #3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	4957      	ldr	r1, [pc, #348]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab3c:	f7fa fafe 	bl	800513c <HAL_GetTick>
 800ab40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab42:	e00a      	b.n	800ab5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab44:	f7fa fafa 	bl	800513c <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e095      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab5a:	4b4e      	ldr	r3, [pc, #312]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f003 020c 	and.w	r2, r3, #12
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d1eb      	bne.n	800ab44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d023      	beq.n	800abc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab84:	4b43      	ldr	r3, [pc, #268]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	4a42      	ldr	r2, [pc, #264]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0308 	and.w	r3, r3, #8
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ab9c:	4b3d      	ldr	r3, [pc, #244]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aba4:	4a3b      	ldr	r2, [pc, #236]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800aba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800abaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abac:	4b39      	ldr	r3, [pc, #228]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	4936      	ldr	r1, [pc, #216]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	608b      	str	r3, [r1, #8]
 800abbe:	e008      	b.n	800abd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2b80      	cmp	r3, #128	; 0x80
 800abc4:	d105      	bne.n	800abd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800abc6:	4b33      	ldr	r3, [pc, #204]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	4a32      	ldr	r2, [pc, #200]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800abcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abd2:	4b2f      	ldr	r3, [pc, #188]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 030f 	and.w	r3, r3, #15
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d21d      	bcs.n	800ac1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abe0:	4b2b      	ldr	r3, [pc, #172]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f023 020f 	bic.w	r2, r3, #15
 800abe8:	4929      	ldr	r1, [pc, #164]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	4313      	orrs	r3, r2
 800abee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800abf0:	f7fa faa4 	bl	800513c <HAL_GetTick>
 800abf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abf6:	e00a      	b.n	800ac0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abf8:	f7fa faa0 	bl	800513c <HAL_GetTick>
 800abfc:	4602      	mov	r2, r0
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d901      	bls.n	800ac0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e03b      	b.n	800ac86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac0e:	4b20      	ldr	r3, [pc, #128]	; (800ac90 <HAL_RCC_ClockConfig+0x260>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 030f 	and.w	r3, r3, #15
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d1ed      	bne.n	800abf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0304 	and.w	r3, r3, #4
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	4917      	ldr	r1, [pc, #92]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0308 	and.w	r3, r3, #8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	490f      	ldr	r1, [pc, #60]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac5a:	f000 f825 	bl	800aca8 <HAL_RCC_GetSysClockFreq>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <HAL_RCC_ClockConfig+0x264>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	091b      	lsrs	r3, r3, #4
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	490c      	ldr	r1, [pc, #48]	; (800ac9c <HAL_RCC_ClockConfig+0x26c>)
 800ac6c:	5ccb      	ldrb	r3, [r1, r3]
 800ac6e:	f003 031f 	and.w	r3, r3, #31
 800ac72:	fa22 f303 	lsr.w	r3, r2, r3
 800ac76:	4a0a      	ldr	r2, [pc, #40]	; (800aca0 <HAL_RCC_ClockConfig+0x270>)
 800ac78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ac7a:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <HAL_RCC_ClockConfig+0x274>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fa fa10 	bl	80050a4 <HAL_InitTick>
 800ac84:	4603      	mov	r3, r0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3718      	adds	r7, #24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	40022000 	.word	0x40022000
 800ac94:	40021000 	.word	0x40021000
 800ac98:	04c4b400 	.word	0x04c4b400
 800ac9c:	08016e3c 	.word	0x08016e3c
 800aca0:	20000168 	.word	0x20000168
 800aca4:	2000017c 	.word	0x2000017c

0800aca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800acae:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 030c 	and.w	r3, r3, #12
 800acb6:	2b04      	cmp	r3, #4
 800acb8:	d102      	bne.n	800acc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800acba:	4b2a      	ldr	r3, [pc, #168]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e047      	b.n	800ad50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800acc0:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	f003 030c 	and.w	r3, r3, #12
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d102      	bne.n	800acd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800accc:	4b26      	ldr	r3, [pc, #152]	; (800ad68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800acce:	613b      	str	r3, [r7, #16]
 800acd0:	e03e      	b.n	800ad50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800acd2:	4b23      	ldr	r3, [pc, #140]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 030c 	and.w	r3, r3, #12
 800acda:	2b0c      	cmp	r3, #12
 800acdc:	d136      	bne.n	800ad4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800acde:	4b20      	ldr	r3, [pc, #128]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	f003 0303 	and.w	r3, r3, #3
 800ace6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ace8:	4b1d      	ldr	r3, [pc, #116]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	091b      	lsrs	r3, r3, #4
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	3301      	adds	r3, #1
 800acf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d10c      	bne.n	800ad16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800acfc:	4a1a      	ldr	r2, [pc, #104]	; (800ad68 <HAL_RCC_GetSysClockFreq+0xc0>)
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad04:	4a16      	ldr	r2, [pc, #88]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad06:	68d2      	ldr	r2, [r2, #12]
 800ad08:	0a12      	lsrs	r2, r2, #8
 800ad0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	617b      	str	r3, [r7, #20]
      break;
 800ad14:	e00c      	b.n	800ad30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad16:	4a13      	ldr	r2, [pc, #76]	; (800ad64 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1e:	4a10      	ldr	r2, [pc, #64]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad20:	68d2      	ldr	r2, [r2, #12]
 800ad22:	0a12      	lsrs	r2, r2, #8
 800ad24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad28:	fb02 f303 	mul.w	r3, r2, r3
 800ad2c:	617b      	str	r3, [r7, #20]
      break;
 800ad2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	0e5b      	lsrs	r3, r3, #25
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	e001      	b.n	800ad50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ad50:	693b      	ldr	r3, [r7, #16]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	40021000 	.word	0x40021000
 800ad64:	00f42400 	.word	0x00f42400
 800ad68:	007a1200 	.word	0x007a1200

0800ad6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad72:	4b1e      	ldr	r3, [pc, #120]	; (800adec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f003 0303 	and.w	r3, r3, #3
 800ad7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad7c:	4b1b      	ldr	r3, [pc, #108]	; (800adec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	091b      	lsrs	r3, r3, #4
 800ad82:	f003 030f 	and.w	r3, r3, #15
 800ad86:	3301      	adds	r3, #1
 800ad88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d10c      	bne.n	800adaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad90:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad98:	4a14      	ldr	r2, [pc, #80]	; (800adec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ad9a:	68d2      	ldr	r2, [r2, #12]
 800ad9c:	0a12      	lsrs	r2, r2, #8
 800ad9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	617b      	str	r3, [r7, #20]
    break;
 800ada8:	e00c      	b.n	800adc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800adaa:	4a12      	ldr	r2, [pc, #72]	; (800adf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb2:	4a0e      	ldr	r2, [pc, #56]	; (800adec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adb4:	68d2      	ldr	r2, [r2, #12]
 800adb6:	0a12      	lsrs	r2, r2, #8
 800adb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800adbc:	fb02 f303 	mul.w	r3, r2, r3
 800adc0:	617b      	str	r3, [r7, #20]
    break;
 800adc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	0e5b      	lsrs	r3, r3, #25
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	3301      	adds	r3, #1
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	fbb2 f3f3 	udiv	r3, r2, r3
 800addc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800adde:	687b      	ldr	r3, [r7, #4]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	371c      	adds	r7, #28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	40021000 	.word	0x40021000
 800adf0:	007a1200 	.word	0x007a1200
 800adf4:	00f42400 	.word	0x00f42400

0800adf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae00:	2300      	movs	r3, #0
 800ae02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae04:	2300      	movs	r3, #0
 800ae06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8098 	beq.w	800af46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae16:	2300      	movs	r3, #0
 800ae18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae1a:	4b43      	ldr	r3, [pc, #268]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10d      	bne.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae26:	4b40      	ldr	r3, [pc, #256]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2a:	4a3f      	ldr	r2, [pc, #252]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae30:	6593      	str	r3, [r2, #88]	; 0x58
 800ae32:	4b3d      	ldr	r3, [pc, #244]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae3a:	60bb      	str	r3, [r7, #8]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae42:	4b3a      	ldr	r3, [pc, #232]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a39      	ldr	r2, [pc, #228]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae4e:	f7fa f975 	bl	800513c <HAL_GetTick>
 800ae52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae54:	e009      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae56:	f7fa f971 	bl	800513c <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d902      	bls.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	74fb      	strb	r3, [r7, #19]
        break;
 800ae68:	e005      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae6a:	4b30      	ldr	r3, [pc, #192]	; (800af2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0ef      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ae76:	7cfb      	ldrb	r3, [r7, #19]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d159      	bne.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ae7c:	4b2a      	ldr	r3, [pc, #168]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01e      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d019      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ae98:	4b23      	ldr	r3, [pc, #140]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aea4:	4b20      	ldr	r3, [pc, #128]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeb4:	4b1c      	ldr	r3, [pc, #112]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeba:	4a1b      	ldr	r2, [pc, #108]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aec4:	4a18      	ldr	r2, [pc, #96]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed6:	f7fa f931 	bl	800513c <HAL_GetTick>
 800aeda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aedc:	e00b      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aede:	f7fa f92d 	bl	800513c <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d902      	bls.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	74fb      	strb	r3, [r7, #19]
            break;
 800aef4:	e006      	b.n	800af04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aef6:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefc:	f003 0302 	and.w	r3, r3, #2
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0ec      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800af04:	7cfb      	ldrb	r3, [r7, #19]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10b      	bne.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af18:	4903      	ldr	r1, [pc, #12]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af20:	e008      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af22:	7cfb      	ldrb	r3, [r7, #19]
 800af24:	74bb      	strb	r3, [r7, #18]
 800af26:	e005      	b.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800af28:	40021000 	.word	0x40021000
 800af2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af30:	7cfb      	ldrb	r3, [r7, #19]
 800af32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af34:	7c7b      	ldrb	r3, [r7, #17]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d105      	bne.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af3a:	4ba6      	ldr	r3, [pc, #664]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af3e:	4aa5      	ldr	r2, [pc, #660]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00a      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af52:	4ba0      	ldr	r3, [pc, #640]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af58:	f023 0203 	bic.w	r2, r3, #3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	499c      	ldr	r1, [pc, #624]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af62:	4313      	orrs	r3, r2
 800af64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af74:	4b97      	ldr	r3, [pc, #604]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7a:	f023 020c 	bic.w	r2, r3, #12
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	4994      	ldr	r1, [pc, #592]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af84:	4313      	orrs	r3, r2
 800af86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af96:	4b8f      	ldr	r3, [pc, #572]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	498b      	ldr	r1, [pc, #556]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800afb8:	4b86      	ldr	r3, [pc, #536]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	4983      	ldr	r1, [pc, #524]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afda:	4b7e      	ldr	r3, [pc, #504]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	497a      	ldr	r1, [pc, #488]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afea:	4313      	orrs	r3, r2
 800afec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800affc:	4b75      	ldr	r3, [pc, #468]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b002:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	4972      	ldr	r1, [pc, #456]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b01e:	4b6d      	ldr	r3, [pc, #436]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	4969      	ldr	r1, [pc, #420]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b040:	4b64      	ldr	r3, [pc, #400]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	4961      	ldr	r1, [pc, #388]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b050:	4313      	orrs	r3, r2
 800b052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00a      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b062:	4b5c      	ldr	r3, [pc, #368]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	4958      	ldr	r1, [pc, #352]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b072:	4313      	orrs	r3, r2
 800b074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b080:	2b00      	cmp	r3, #0
 800b082:	d015      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b084:	4b53      	ldr	r3, [pc, #332]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b092:	4950      	ldr	r1, [pc, #320]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b094:	4313      	orrs	r3, r2
 800b096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0a2:	d105      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0a4:	4b4b      	ldr	r3, [pc, #300]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	4a4a      	ldr	r2, [pc, #296]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d015      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b0bc:	4b45      	ldr	r3, [pc, #276]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	4942      	ldr	r1, [pc, #264]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0da:	d105      	bne.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b0dc:	4b3d      	ldr	r3, [pc, #244]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	4a3c      	ldr	r2, [pc, #240]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d015      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0f4:	4b37      	ldr	r3, [pc, #220]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	4934      	ldr	r1, [pc, #208]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b104:	4313      	orrs	r3, r2
 800b106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b112:	d105      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b114:	4b2f      	ldr	r3, [pc, #188]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	4a2e      	ldr	r2, [pc, #184]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b11a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b11e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d015      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b12c:	4b29      	ldr	r3, [pc, #164]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13a:	4926      	ldr	r1, [pc, #152]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b14a:	d105      	bne.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b14c:	4b21      	ldr	r3, [pc, #132]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b156:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d015      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b164:	4b1b      	ldr	r3, [pc, #108]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	4918      	ldr	r1, [pc, #96]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b174:	4313      	orrs	r3, r2
 800b176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b182:	d105      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b184:	4b13      	ldr	r3, [pc, #76]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	4a12      	ldr	r2, [pc, #72]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b18a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b18e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d015      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1aa:	490a      	ldr	r1, [pc, #40]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ba:	d105      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b1bc:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	4a04      	ldr	r2, [pc, #16]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b1c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b1c8:	7cbb      	ldrb	r3, [r7, #18]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40021000 	.word	0x40021000

0800b1d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e09d      	b.n	800b326 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d108      	bne.n	800b204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1fa:	d009      	beq.n	800b210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	61da      	str	r2, [r3, #28]
 800b202:	e005      	b.n	800b210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d106      	bne.n	800b230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7f8 fff8 	bl	8004220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b246:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b250:	d902      	bls.n	800b258 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	e002      	b.n	800b25e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b25c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b266:	d007      	beq.n	800b278 <HAL_SPI_Init+0xa0>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b270:	d002      	beq.n	800b278 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b288:	431a      	orrs	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	f003 0302 	and.w	r3, r3, #2
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	431a      	orrs	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ba:	ea42 0103 	orr.w	r1, r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	430a      	orrs	r2, r1
 800b2cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	f003 0204 	and.w	r2, r3, #4
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	f003 0310 	and.w	r3, r3, #16
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e6:	f003 0308 	and.w	r3, r3, #8
 800b2ea:	431a      	orrs	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b2f4:	ea42 0103 	orr.w	r1, r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	430a      	orrs	r2, r1
 800b304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	69da      	ldr	r2, [r3, #28]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b088      	sub	sp, #32
 800b332:	af00      	add	r7, sp, #0
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	603b      	str	r3, [r7, #0]
 800b33a:	4613      	mov	r3, r2
 800b33c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_SPI_Transmit+0x22>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e15f      	b.n	800b610 <HAL_SPI_Transmit+0x2e2>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b358:	f7f9 fef0 	bl	800513c <HAL_GetTick>
 800b35c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b35e:	88fb      	ldrh	r3, [r7, #6]
 800b360:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d002      	beq.n	800b374 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b36e:	2302      	movs	r3, #2
 800b370:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b372:	e148      	b.n	800b606 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <HAL_SPI_Transmit+0x52>
 800b37a:	88fb      	ldrh	r3, [r7, #6]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b384:	e13f      	b.n	800b606 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2203      	movs	r2, #3
 800b38a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	88fa      	ldrh	r2, [r7, #6]
 800b39e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	88fa      	ldrh	r2, [r7, #6]
 800b3a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3d0:	d10f      	bne.n	800b3f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fc:	2b40      	cmp	r3, #64	; 0x40
 800b3fe:	d007      	beq.n	800b410 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b40e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b418:	d94f      	bls.n	800b4ba <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <HAL_SPI_Transmit+0xfa>
 800b422:	8afb      	ldrh	r3, [r7, #22]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d142      	bne.n	800b4ae <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	881a      	ldrh	r2, [r3, #0]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	1c9a      	adds	r2, r3, #2
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b442:	b29b      	uxth	r3, r3
 800b444:	3b01      	subs	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b44c:	e02f      	b.n	800b4ae <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f003 0302 	and.w	r3, r3, #2
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d112      	bne.n	800b482 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b460:	881a      	ldrh	r2, [r3, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	1c9a      	adds	r2, r3, #2
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b480:	e015      	b.n	800b4ae <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b482:	f7f9 fe5b 	bl	800513c <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d803      	bhi.n	800b49a <HAL_SPI_Transmit+0x16c>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b498:	d102      	bne.n	800b4a0 <HAL_SPI_Transmit+0x172>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b4ac:	e0ab      	b.n	800b606 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1ca      	bne.n	800b44e <HAL_SPI_Transmit+0x120>
 800b4b8:	e080      	b.n	800b5bc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <HAL_SPI_Transmit+0x19a>
 800b4c2:	8afb      	ldrh	r3, [r7, #22]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d174      	bne.n	800b5b2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d912      	bls.n	800b4f8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	881a      	ldrh	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e2:	1c9a      	adds	r2, r3, #2
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	3b02      	subs	r3, #2
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4f6:	e05c      	b.n	800b5b2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	330c      	adds	r3, #12
 800b502:	7812      	ldrb	r2, [r2, #0]
 800b504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b01      	subs	r3, #1
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b51e:	e048      	b.n	800b5b2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d12b      	bne.n	800b586 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b532:	b29b      	uxth	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	d912      	bls.n	800b55e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53c:	881a      	ldrh	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b548:	1c9a      	adds	r2, r3, #2
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b02      	subs	r3, #2
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b55c:	e029      	b.n	800b5b2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	330c      	adds	r3, #12
 800b568:	7812      	ldrb	r2, [r2, #0]
 800b56a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	3b01      	subs	r3, #1
 800b57e:	b29a      	uxth	r2, r3
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b584:	e015      	b.n	800b5b2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b586:	f7f9 fdd9 	bl	800513c <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	429a      	cmp	r2, r3
 800b594:	d803      	bhi.n	800b59e <HAL_SPI_Transmit+0x270>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d102      	bne.n	800b5a4 <HAL_SPI_Transmit+0x276>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d106      	bne.n	800b5b2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b5b0:	e029      	b.n	800b606 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1b1      	bne.n	800b520 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f000 fad7 	bl	800bb74 <SPI_EndRxTxTransaction>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d002      	beq.n	800b5d2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2220      	movs	r2, #32
 800b5d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d10a      	bne.n	800b5f0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5da:	2300      	movs	r3, #0
 800b5dc:	613b      	str	r3, [r7, #16]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	613b      	str	r3, [r7, #16]
 800b5ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	77fb      	strb	r3, [r7, #31]
 800b5fc:	e003      	b.n	800b606 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b60e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	4613      	mov	r3, r2
 800b624:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_SPI_Transmit_DMA+0x20>
 800b634:	2302      	movs	r3, #2
 800b636:	e0d4      	b.n	800b7e2 <HAL_SPI_Transmit_DMA+0x1ca>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b646:	b2db      	uxtb	r3, r3
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d002      	beq.n	800b652 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b64c:	2302      	movs	r3, #2
 800b64e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b650:	e0c2      	b.n	800b7d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <HAL_SPI_Transmit_DMA+0x46>
 800b658:	88fb      	ldrh	r3, [r7, #6]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b662:	e0b9      	b.n	800b7d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2203      	movs	r2, #3
 800b668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	88fa      	ldrh	r2, [r7, #6]
 800b67c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	88fa      	ldrh	r2, [r7, #6]
 800b682:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ae:	d10f      	bne.n	800b6d0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d4:	4a45      	ldr	r2, [pc, #276]	; (800b7ec <HAL_SPI_Transmit_DMA+0x1d4>)
 800b6d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6dc:	4a44      	ldr	r2, [pc, #272]	; (800b7f0 <HAL_SPI_Transmit_DMA+0x1d8>)
 800b6de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e4:	4a43      	ldr	r2, [pc, #268]	; (800b7f4 <HAL_SPI_Transmit_DMA+0x1dc>)
 800b6e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b6fe:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b708:	d82d      	bhi.n	800b766 <HAL_SPI_Transmit_DMA+0x14e>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b714:	d127      	bne.n	800b766 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10f      	bne.n	800b744 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b732:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b738:	b29b      	uxth	r3, r3
 800b73a:	085b      	lsrs	r3, r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b742:	e010      	b.n	800b766 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b752:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b758:	b29b      	uxth	r3, r3
 800b75a:	085b      	lsrs	r3, r3, #1
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	3301      	adds	r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	4619      	mov	r1, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	330c      	adds	r3, #12
 800b776:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b77c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b77e:	f7fc f925 	bl	80079cc <HAL_DMA_Start_IT>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b78c:	f043 0210 	orr.w	r2, r3, #16
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	75fb      	strb	r3, [r7, #23]

    goto error;
 800b798:	e01e      	b.n	800b7d8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a4:	2b40      	cmp	r3, #64	; 0x40
 800b7a6:	d007      	beq.n	800b7b8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0220 	orr.w	r2, r2, #32
 800b7c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	685a      	ldr	r2, [r3, #4]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0202 	orr.w	r2, r2, #2
 800b7d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	0800b8db 	.word	0x0800b8db
 800b7f0:	0800b835 	.word	0x0800b835
 800b7f4:	0800b8f7 	.word	0x0800b8f7

0800b7f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b840:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b842:	f7f9 fc7b 	bl	800513c <HAL_GetTick>
 800b846:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b20      	cmp	r3, #32
 800b854:	d03b      	beq.n	800b8ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f022 0220 	bic.w	r2, r2, #32
 800b864:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 0202 	bic.w	r2, r2, #2
 800b874:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	2164      	movs	r1, #100	; 0x64
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f000 f97a 	bl	800bb74 <SPI_EndRxTxTransaction>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d005      	beq.n	800b892 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b88a:	f043 0220 	orr.w	r2, r3, #32
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b8c6:	6978      	ldr	r0, [r7, #20]
 800b8c8:	f7ff ffaa 	bl	800b820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b8cc:	e002      	b.n	800b8d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b8ce:	6978      	ldr	r0, [r7, #20]
 800b8d0:	f7ff ff92 	bl	800b7f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f7ff ff8f 	bl	800b80c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b902:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0203 	bic.w	r2, r2, #3
 800b912:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b918:	f043 0210 	orr.w	r2, r3, #16
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7ff ff79 	bl	800b820 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b92e:	bf00      	nop
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
	...

0800b938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	4613      	mov	r3, r2
 800b946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b948:	f7f9 fbf8 	bl	800513c <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	1a9b      	subs	r3, r3, r2
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4413      	add	r3, r2
 800b956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b958:	f7f9 fbf0 	bl	800513c <HAL_GetTick>
 800b95c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b95e:	4b39      	ldr	r3, [pc, #228]	; (800ba44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	015b      	lsls	r3, r3, #5
 800b964:	0d1b      	lsrs	r3, r3, #20
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	fb02 f303 	mul.w	r3, r2, r3
 800b96c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b96e:	e054      	b.n	800ba1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d050      	beq.n	800ba1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b978:	f7f9 fbe0 	bl	800513c <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	69fa      	ldr	r2, [r7, #28]
 800b984:	429a      	cmp	r2, r3
 800b986:	d902      	bls.n	800b98e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d13d      	bne.n	800ba0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b99c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9a6:	d111      	bne.n	800b9cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9b0:	d004      	beq.n	800b9bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ba:	d107      	bne.n	800b9cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9d4:	d10f      	bne.n	800b9f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9e4:	601a      	str	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ba06:	2303      	movs	r3, #3
 800ba08:	e017      	b.n	800ba3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	4013      	ands	r3, r2
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	bf0c      	ite	eq
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	2300      	movne	r3, #0
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	461a      	mov	r2, r3
 800ba32:	79fb      	ldrb	r3, [r7, #7]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d19b      	bne.n	800b970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000168 	.word	0x20000168

0800ba48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ba5a:	f7f9 fb6f 	bl	800513c <HAL_GetTick>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	1a9b      	subs	r3, r3, r2
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	4413      	add	r3, r2
 800ba68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ba6a:	f7f9 fb67 	bl	800513c <HAL_GetTick>
 800ba6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	330c      	adds	r3, #12
 800ba76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ba78:	4b3d      	ldr	r3, [pc, #244]	; (800bb70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	00da      	lsls	r2, r3, #3
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	0d1b      	lsrs	r3, r3, #20
 800ba88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8a:	fb02 f303 	mul.w	r3, r2, r3
 800ba8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ba90:	e060      	b.n	800bb54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ba98:	d107      	bne.n	800baaa <SPI_WaitFifoStateUntilTimeout+0x62>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab0:	d050      	beq.n	800bb54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bab2:	f7f9 fb43 	bl	800513c <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800babe:	429a      	cmp	r2, r3
 800bac0:	d902      	bls.n	800bac8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d13d      	bne.n	800bb44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bad6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bae0:	d111      	bne.n	800bb06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baea:	d004      	beq.n	800baf6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf4:	d107      	bne.n	800bb06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb0e:	d10f      	bne.n	800bb30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e010      	b.n	800bb66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d196      	bne.n	800ba92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3728      	adds	r7, #40	; 0x28
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000168 	.word	0x20000168

0800bb74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af02      	add	r7, sp, #8
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff ff5b 	bl	800ba48 <SPI_WaitFifoStateUntilTimeout>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb9c:	f043 0220 	orr.w	r2, r3, #32
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e027      	b.n	800bbf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2180      	movs	r1, #128	; 0x80
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fec0 	bl	800b938 <SPI_WaitFlagStateUntilTimeout>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbc2:	f043 0220 	orr.w	r2, r3, #32
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e014      	b.n	800bbf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff ff34 	bl	800ba48 <SPI_WaitFifoStateUntilTimeout>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d007      	beq.n	800bbf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbea:	f043 0220 	orr.w	r2, r3, #32
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e000      	b.n	800bbf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d101      	bne.n	800bc12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e049      	b.n	800bca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d106      	bne.n	800bc2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7f8 fc14 	bl	8004454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f000 fe98 	bl	800c974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d001      	beq.n	800bcc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e04a      	b.n	800bd5e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f042 0201 	orr.w	r2, r2, #1
 800bcde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a21      	ldr	r2, [pc, #132]	; (800bd6c <HAL_TIM_Base_Start_IT+0xbc>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d018      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x6c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcf2:	d013      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x6c>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a1d      	ldr	r2, [pc, #116]	; (800bd70 <HAL_TIM_Base_Start_IT+0xc0>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d00e      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x6c>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a1c      	ldr	r2, [pc, #112]	; (800bd74 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d009      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x6c>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a1a      	ldr	r2, [pc, #104]	; (800bd78 <HAL_TIM_Base_Start_IT+0xc8>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d004      	beq.n	800bd1c <HAL_TIM_Base_Start_IT+0x6c>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a19      	ldr	r2, [pc, #100]	; (800bd7c <HAL_TIM_Base_Start_IT+0xcc>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d115      	bne.n	800bd48 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd24:	4013      	ands	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b06      	cmp	r3, #6
 800bd2c:	d015      	beq.n	800bd5a <HAL_TIM_Base_Start_IT+0xaa>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd34:	d011      	beq.n	800bd5a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd46:	e008      	b.n	800bd5a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e000      	b.n	800bd5c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	40012c00 	.word	0x40012c00
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40013400 	.word	0x40013400
 800bd7c:	40014000 	.word	0x40014000
 800bd80:	00010007 	.word	0x00010007

0800bd84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68da      	ldr	r2, [r3, #12]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f022 0201 	bic.w	r2, r2, #1
 800bd9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	6a1a      	ldr	r2, [r3, #32]
 800bda2:	f241 1311 	movw	r3, #4369	; 0x1111
 800bda6:	4013      	ands	r3, r2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10f      	bne.n	800bdcc <HAL_TIM_Base_Stop_IT+0x48>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6a1a      	ldr	r2, [r3, #32]
 800bdb2:	f244 4344 	movw	r3, #17476	; 0x4444
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d107      	bne.n	800bdcc <HAL_TIM_Base_Stop_IT+0x48>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f022 0201 	bic.w	r2, r2, #1
 800bdca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b082      	sub	sp, #8
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e049      	b.n	800be88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d106      	bne.n	800be0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7f8 fa7b 	bl	8004304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2202      	movs	r2, #2
 800be12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4619      	mov	r1, r3
 800be20:	4610      	mov	r0, r2
 800be22:	f000 fda7 	bl	800c974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2201      	movs	r2, #1
 800be4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2201      	movs	r2, #1
 800be5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2201      	movs	r2, #1
 800be62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d109      	bne.n	800beb8 <HAL_TIM_PWM_Start_IT+0x28>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b01      	cmp	r3, #1
 800beae:	bf14      	ite	ne
 800beb0:	2301      	movne	r3, #1
 800beb2:	2300      	moveq	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	e03c      	b.n	800bf32 <HAL_TIM_PWM_Start_IT+0xa2>
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b04      	cmp	r3, #4
 800bebc:	d109      	bne.n	800bed2 <HAL_TIM_PWM_Start_IT+0x42>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	bf14      	ite	ne
 800beca:	2301      	movne	r3, #1
 800becc:	2300      	moveq	r3, #0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	e02f      	b.n	800bf32 <HAL_TIM_PWM_Start_IT+0xa2>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b08      	cmp	r3, #8
 800bed6:	d109      	bne.n	800beec <HAL_TIM_PWM_Start_IT+0x5c>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	bf14      	ite	ne
 800bee4:	2301      	movne	r3, #1
 800bee6:	2300      	moveq	r3, #0
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	e022      	b.n	800bf32 <HAL_TIM_PWM_Start_IT+0xa2>
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	2b0c      	cmp	r3, #12
 800bef0:	d109      	bne.n	800bf06 <HAL_TIM_PWM_Start_IT+0x76>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	2b01      	cmp	r3, #1
 800befc:	bf14      	ite	ne
 800befe:	2301      	movne	r3, #1
 800bf00:	2300      	moveq	r3, #0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	e015      	b.n	800bf32 <HAL_TIM_PWM_Start_IT+0xa2>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b10      	cmp	r3, #16
 800bf0a:	d109      	bne.n	800bf20 <HAL_TIM_PWM_Start_IT+0x90>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	bf14      	ite	ne
 800bf18:	2301      	movne	r3, #1
 800bf1a:	2300      	moveq	r3, #0
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	e008      	b.n	800bf32 <HAL_TIM_PWM_Start_IT+0xa2>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	bf14      	ite	ne
 800bf2c:	2301      	movne	r3, #1
 800bf2e:	2300      	moveq	r3, #0
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e0e2      	b.n	800c100 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d104      	bne.n	800bf4a <HAL_TIM_PWM_Start_IT+0xba>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf48:	e023      	b.n	800bf92 <HAL_TIM_PWM_Start_IT+0x102>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d104      	bne.n	800bf5a <HAL_TIM_PWM_Start_IT+0xca>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2202      	movs	r2, #2
 800bf54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf58:	e01b      	b.n	800bf92 <HAL_TIM_PWM_Start_IT+0x102>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d104      	bne.n	800bf6a <HAL_TIM_PWM_Start_IT+0xda>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2202      	movs	r2, #2
 800bf64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf68:	e013      	b.n	800bf92 <HAL_TIM_PWM_Start_IT+0x102>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b0c      	cmp	r3, #12
 800bf6e:	d104      	bne.n	800bf7a <HAL_TIM_PWM_Start_IT+0xea>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf78:	e00b      	b.n	800bf92 <HAL_TIM_PWM_Start_IT+0x102>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b10      	cmp	r3, #16
 800bf7e:	d104      	bne.n	800bf8a <HAL_TIM_PWM_Start_IT+0xfa>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2202      	movs	r2, #2
 800bf84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf88:	e003      	b.n	800bf92 <HAL_TIM_PWM_Start_IT+0x102>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b0c      	cmp	r3, #12
 800bf96:	d841      	bhi.n	800c01c <HAL_TIM_PWM_Start_IT+0x18c>
 800bf98:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <HAL_TIM_PWM_Start_IT+0x110>)
 800bf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9e:	bf00      	nop
 800bfa0:	0800bfd5 	.word	0x0800bfd5
 800bfa4:	0800c01d 	.word	0x0800c01d
 800bfa8:	0800c01d 	.word	0x0800c01d
 800bfac:	0800c01d 	.word	0x0800c01d
 800bfb0:	0800bfe7 	.word	0x0800bfe7
 800bfb4:	0800c01d 	.word	0x0800c01d
 800bfb8:	0800c01d 	.word	0x0800c01d
 800bfbc:	0800c01d 	.word	0x0800c01d
 800bfc0:	0800bff9 	.word	0x0800bff9
 800bfc4:	0800c01d 	.word	0x0800c01d
 800bfc8:	0800c01d 	.word	0x0800c01d
 800bfcc:	0800c01d 	.word	0x0800c01d
 800bfd0:	0800c00b 	.word	0x0800c00b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68da      	ldr	r2, [r3, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f042 0202 	orr.w	r2, r2, #2
 800bfe2:	60da      	str	r2, [r3, #12]
      break;
 800bfe4:	e01d      	b.n	800c022 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68da      	ldr	r2, [r3, #12]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f042 0204 	orr.w	r2, r2, #4
 800bff4:	60da      	str	r2, [r3, #12]
      break;
 800bff6:	e014      	b.n	800c022 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0208 	orr.w	r2, r2, #8
 800c006:	60da      	str	r2, [r3, #12]
      break;
 800c008:	e00b      	b.n	800c022 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f042 0210 	orr.w	r2, r2, #16
 800c018:	60da      	str	r2, [r3, #12]
      break;
 800c01a:	e002      	b.n	800c022 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	73fb      	strb	r3, [r7, #15]
      break;
 800c020:	bf00      	nop
  }

  if (status == HAL_OK)
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d16a      	bne.n	800c0fe <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2201      	movs	r2, #1
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	4618      	mov	r0, r3
 800c032:	f001 f831 	bl	800d098 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a33      	ldr	r2, [pc, #204]	; (800c108 <HAL_TIM_PWM_Start_IT+0x278>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d013      	beq.n	800c068 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a31      	ldr	r2, [pc, #196]	; (800c10c <HAL_TIM_PWM_Start_IT+0x27c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d00e      	beq.n	800c068 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a30      	ldr	r2, [pc, #192]	; (800c110 <HAL_TIM_PWM_Start_IT+0x280>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d009      	beq.n	800c068 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a2e      	ldr	r2, [pc, #184]	; (800c114 <HAL_TIM_PWM_Start_IT+0x284>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d004      	beq.n	800c068 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a2d      	ldr	r2, [pc, #180]	; (800c118 <HAL_TIM_PWM_Start_IT+0x288>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d101      	bne.n	800c06c <HAL_TIM_PWM_Start_IT+0x1dc>
 800c068:	2301      	movs	r3, #1
 800c06a:	e000      	b.n	800c06e <HAL_TIM_PWM_Start_IT+0x1de>
 800c06c:	2300      	movs	r3, #0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d007      	beq.n	800c082 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a20      	ldr	r2, [pc, #128]	; (800c108 <HAL_TIM_PWM_Start_IT+0x278>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d018      	beq.n	800c0be <HAL_TIM_PWM_Start_IT+0x22e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c094:	d013      	beq.n	800c0be <HAL_TIM_PWM_Start_IT+0x22e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a20      	ldr	r2, [pc, #128]	; (800c11c <HAL_TIM_PWM_Start_IT+0x28c>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d00e      	beq.n	800c0be <HAL_TIM_PWM_Start_IT+0x22e>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a1e      	ldr	r2, [pc, #120]	; (800c120 <HAL_TIM_PWM_Start_IT+0x290>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d009      	beq.n	800c0be <HAL_TIM_PWM_Start_IT+0x22e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a17      	ldr	r2, [pc, #92]	; (800c10c <HAL_TIM_PWM_Start_IT+0x27c>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d004      	beq.n	800c0be <HAL_TIM_PWM_Start_IT+0x22e>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a15      	ldr	r2, [pc, #84]	; (800c110 <HAL_TIM_PWM_Start_IT+0x280>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d115      	bne.n	800c0ea <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689a      	ldr	r2, [r3, #8]
 800c0c4:	4b17      	ldr	r3, [pc, #92]	; (800c124 <HAL_TIM_PWM_Start_IT+0x294>)
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b06      	cmp	r3, #6
 800c0ce:	d015      	beq.n	800c0fc <HAL_TIM_PWM_Start_IT+0x26c>
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0d6:	d011      	beq.n	800c0fc <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f042 0201 	orr.w	r2, r2, #1
 800c0e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0e8:	e008      	b.n	800c0fc <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f042 0201 	orr.w	r2, r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]
 800c0fa:	e000      	b.n	800c0fe <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3710      	adds	r7, #16
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}
 800c108:	40012c00 	.word	0x40012c00
 800c10c:	40013400 	.word	0x40013400
 800c110:	40014000 	.word	0x40014000
 800c114:	40014400 	.word	0x40014400
 800c118:	40014800 	.word	0x40014800
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	00010007 	.word	0x00010007

0800c128 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e041      	b.n	800c1c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f839 	bl	800c1c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3304      	adds	r3, #4
 800c166:	4619      	mov	r1, r3
 800c168:	4610      	mov	r0, r2
 800c16a:	f000 fc03 	bl	800c974 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0208 	bic.w	r2, r2, #8
 800c17c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e097      	b.n	800c320 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7f8 f8c7 	bl	8004398 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	6812      	ldr	r2, [r2, #0]
 800c21c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c220:	f023 0307 	bic.w	r3, r3, #7
 800c224:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3304      	adds	r3, #4
 800c22e:	4619      	mov	r1, r3
 800c230:	4610      	mov	r0, r2
 800c232:	f000 fb9f 	bl	800c974 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	4313      	orrs	r3, r2
 800c256:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c25e:	f023 0303 	bic.w	r3, r3, #3
 800c262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	689a      	ldr	r2, [r3, #8]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	4313      	orrs	r3, r2
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	4313      	orrs	r3, r2
 800c274:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c27c:	f023 030c 	bic.w	r3, r3, #12
 800c280:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c28c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	69db      	ldr	r3, [r3, #28]
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	4313      	orrs	r3, r2
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	011a      	lsls	r2, r3, #4
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	031b      	lsls	r3, r3, #12
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c2ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c2c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c338:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c340:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c348:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c350:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d110      	bne.n	800c37a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d102      	bne.n	800c364 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c35e:	7b7b      	ldrb	r3, [r7, #13]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d001      	beq.n	800c368 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e089      	b.n	800c47c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c378:	e031      	b.n	800c3de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d110      	bne.n	800c3a2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d102      	bne.n	800c38c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c386:	7b3b      	ldrb	r3, [r7, #12]
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d001      	beq.n	800c390 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e075      	b.n	800c47c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2202      	movs	r2, #2
 800c394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	e01d      	b.n	800c3de <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d108      	bne.n	800c3ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d105      	bne.n	800c3ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c3ae:	7b7b      	ldrb	r3, [r7, #13]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d102      	bne.n	800c3ba <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c3b4:	7b3b      	ldrb	r3, [r7, #12]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d001      	beq.n	800c3be <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e05e      	b.n	800c47c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2202      	movs	r2, #2
 800c3da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <HAL_TIM_Encoder_Start_IT+0xc4>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	d010      	beq.n	800c40c <HAL_TIM_Encoder_Start_IT+0xe4>
 800c3ea:	e01f      	b.n	800c42c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 fe4f 	bl	800d098 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68da      	ldr	r2, [r3, #12]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f042 0202 	orr.w	r2, r2, #2
 800c408:	60da      	str	r2, [r3, #12]
      break;
 800c40a:	e02e      	b.n	800c46a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2201      	movs	r2, #1
 800c412:	2104      	movs	r1, #4
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fe3f 	bl	800d098 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f042 0204 	orr.w	r2, r2, #4
 800c428:	60da      	str	r2, [r3, #12]
      break;
 800c42a:	e01e      	b.n	800c46a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2201      	movs	r2, #1
 800c432:	2100      	movs	r1, #0
 800c434:	4618      	mov	r0, r3
 800c436:	f000 fe2f 	bl	800d098 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2201      	movs	r2, #1
 800c440:	2104      	movs	r1, #4
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fe28 	bl	800d098 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68da      	ldr	r2, [r3, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0202 	orr.w	r2, r2, #2
 800c456:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	68da      	ldr	r2, [r3, #12]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0204 	orr.w	r2, r2, #4
 800c466:	60da      	str	r2, [r3, #12]
      break;
 800c468:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f042 0201 	orr.w	r2, r2, #1
 800c478:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	f003 0302 	and.w	r3, r3, #2
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d020      	beq.n	800c4e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d01b      	beq.n	800c4e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0202 	mvn.w	r2, #2
 800c4b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	699b      	ldr	r3, [r3, #24]
 800c4c6:	f003 0303 	and.w	r3, r3, #3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7f5 fc80 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 800c4d4:	e005      	b.n	800c4e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fa38 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7f5 fc99 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d020      	beq.n	800c534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d01b      	beq.n	800c534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f06f 0204 	mvn.w	r2, #4
 800c504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2202      	movs	r2, #2
 800c50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7f5 fc5a 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 800c520:	e005      	b.n	800c52e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fa12 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f7f5 fc73 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d020      	beq.n	800c580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f003 0308 	and.w	r3, r3, #8
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01b      	beq.n	800c580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f06f 0208 	mvn.w	r2, #8
 800c550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2204      	movs	r2, #4
 800c556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	f003 0303 	and.w	r3, r3, #3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7f5 fc34 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 800c56c:	e005      	b.n	800c57a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f9ec 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7f5 fc4d 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f003 0310 	and.w	r3, r3, #16
 800c586:	2b00      	cmp	r3, #0
 800c588:	d020      	beq.n	800c5cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01b      	beq.n	800c5cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f06f 0210 	mvn.w	r2, #16
 800c59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2208      	movs	r2, #8
 800c5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7f5 fc0e 	bl	8001dd4 <HAL_TIM_IC_CaptureCallback>
 800c5b8:	e005      	b.n	800c5c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9c6 	bl	800c94c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7f5 fc27 	bl	8001e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00c      	beq.n	800c5f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f06f 0201 	mvn.w	r2, #1
 800c5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7f5 fc3a 	bl	8001e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d104      	bne.n	800c604 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00c      	beq.n	800c61e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d007      	beq.n	800c61e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 ff2f 	bl	800d47c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00c      	beq.n	800c642 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 ff27 	bl	800d490 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00c      	beq.n	800c666 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f97d 	bl	800c960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00c      	beq.n	800c68a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f003 0320 	and.w	r3, r3, #32
 800c676:	2b00      	cmp	r3, #0
 800c678:	d007      	beq.n	800c68a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f06f 0220 	mvn.w	r2, #32
 800c682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 feef 	bl	800d468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00c      	beq.n	800c6ae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d007      	beq.n	800c6ae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fefb 	bl	800d4a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00c      	beq.n	800c6d2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 fef3 	bl	800d4b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00c      	beq.n	800c6f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d007      	beq.n	800c6f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 feeb 	bl	800d4cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00c      	beq.n	800c71a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d007      	beq.n	800c71a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 fee3 	bl	800d4e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
	...

0800c724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d101      	bne.n	800c742 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c73e:	2302      	movs	r3, #2
 800c740:	e0ff      	b.n	800c942 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b14      	cmp	r3, #20
 800c74e:	f200 80f0 	bhi.w	800c932 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c752:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c933 	.word	0x0800c933
 800c760:	0800c933 	.word	0x0800c933
 800c764:	0800c933 	.word	0x0800c933
 800c768:	0800c7ed 	.word	0x0800c7ed
 800c76c:	0800c933 	.word	0x0800c933
 800c770:	0800c933 	.word	0x0800c933
 800c774:	0800c933 	.word	0x0800c933
 800c778:	0800c82f 	.word	0x0800c82f
 800c77c:	0800c933 	.word	0x0800c933
 800c780:	0800c933 	.word	0x0800c933
 800c784:	0800c933 	.word	0x0800c933
 800c788:	0800c86f 	.word	0x0800c86f
 800c78c:	0800c933 	.word	0x0800c933
 800c790:	0800c933 	.word	0x0800c933
 800c794:	0800c933 	.word	0x0800c933
 800c798:	0800c8b1 	.word	0x0800c8b1
 800c79c:	0800c933 	.word	0x0800c933
 800c7a0:	0800c933 	.word	0x0800c933
 800c7a4:	0800c933 	.word	0x0800c933
 800c7a8:	0800c8f1 	.word	0x0800c8f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68b9      	ldr	r1, [r7, #8]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 f97a 	bl	800caac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	699a      	ldr	r2, [r3, #24]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f042 0208 	orr.w	r2, r2, #8
 800c7c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f022 0204 	bic.w	r2, r2, #4
 800c7d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6999      	ldr	r1, [r3, #24]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	691a      	ldr	r2, [r3, #16]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	619a      	str	r2, [r3, #24]
      break;
 800c7ea:	e0a5      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68b9      	ldr	r1, [r7, #8]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 f9ea 	bl	800cbcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	699a      	ldr	r2, [r3, #24]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6999      	ldr	r1, [r3, #24]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	021a      	lsls	r2, r3, #8
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	430a      	orrs	r2, r1
 800c82a:	619a      	str	r2, [r3, #24]
      break;
 800c82c:	e084      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68b9      	ldr	r1, [r7, #8]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fa53 	bl	800cce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	69da      	ldr	r2, [r3, #28]
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f042 0208 	orr.w	r2, r2, #8
 800c848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69da      	ldr	r2, [r3, #28]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0204 	bic.w	r2, r2, #4
 800c858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69d9      	ldr	r1, [r3, #28]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	691a      	ldr	r2, [r3, #16]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	61da      	str	r2, [r3, #28]
      break;
 800c86c:	e064      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fabb 	bl	800cdf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69da      	ldr	r2, [r3, #28]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69da      	ldr	r2, [r3, #28]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69d9      	ldr	r1, [r3, #28]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	691b      	ldr	r3, [r3, #16]
 800c8a4:	021a      	lsls	r2, r3, #8
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	61da      	str	r2, [r3, #28]
      break;
 800c8ae:	e043      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fb24 	bl	800cf04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f042 0208 	orr.w	r2, r2, #8
 800c8ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f022 0204 	bic.w	r2, r2, #4
 800c8da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	691a      	ldr	r2, [r3, #16]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c8ee:	e023      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fb68 	bl	800cfcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c90a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c91a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	021a      	lsls	r2, r3, #8
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	430a      	orrs	r2, r1
 800c92e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c930:	e002      	b.n	800c938 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]
      break;
 800c936:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c940:	7dfb      	ldrb	r3, [r7, #23]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop

0800c94c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a42      	ldr	r2, [pc, #264]	; (800ca90 <TIM_Base_SetConfig+0x11c>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d00f      	beq.n	800c9ac <TIM_Base_SetConfig+0x38>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c992:	d00b      	beq.n	800c9ac <TIM_Base_SetConfig+0x38>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a3f      	ldr	r2, [pc, #252]	; (800ca94 <TIM_Base_SetConfig+0x120>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d007      	beq.n	800c9ac <TIM_Base_SetConfig+0x38>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a3e      	ldr	r2, [pc, #248]	; (800ca98 <TIM_Base_SetConfig+0x124>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d003      	beq.n	800c9ac <TIM_Base_SetConfig+0x38>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a3d      	ldr	r2, [pc, #244]	; (800ca9c <TIM_Base_SetConfig+0x128>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d108      	bne.n	800c9be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	68fa      	ldr	r2, [r7, #12]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4a33      	ldr	r2, [pc, #204]	; (800ca90 <TIM_Base_SetConfig+0x11c>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d01b      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9cc:	d017      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a30      	ldr	r2, [pc, #192]	; (800ca94 <TIM_Base_SetConfig+0x120>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d013      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a2f      	ldr	r2, [pc, #188]	; (800ca98 <TIM_Base_SetConfig+0x124>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d00f      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a2e      	ldr	r2, [pc, #184]	; (800ca9c <TIM_Base_SetConfig+0x128>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d00b      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a2d      	ldr	r2, [pc, #180]	; (800caa0 <TIM_Base_SetConfig+0x12c>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d007      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a2c      	ldr	r2, [pc, #176]	; (800caa4 <TIM_Base_SetConfig+0x130>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d003      	beq.n	800c9fe <TIM_Base_SetConfig+0x8a>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a2b      	ldr	r2, [pc, #172]	; (800caa8 <TIM_Base_SetConfig+0x134>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d108      	bne.n	800ca10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4a16      	ldr	r2, [pc, #88]	; (800ca90 <TIM_Base_SetConfig+0x11c>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d00f      	beq.n	800ca5c <TIM_Base_SetConfig+0xe8>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a17      	ldr	r2, [pc, #92]	; (800ca9c <TIM_Base_SetConfig+0x128>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d00b      	beq.n	800ca5c <TIM_Base_SetConfig+0xe8>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a16      	ldr	r2, [pc, #88]	; (800caa0 <TIM_Base_SetConfig+0x12c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d007      	beq.n	800ca5c <TIM_Base_SetConfig+0xe8>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	; (800caa4 <TIM_Base_SetConfig+0x130>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d003      	beq.n	800ca5c <TIM_Base_SetConfig+0xe8>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a14      	ldr	r2, [pc, #80]	; (800caa8 <TIM_Base_SetConfig+0x134>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d103      	bne.n	800ca64 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	691a      	ldr	r2, [r3, #16]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2201      	movs	r2, #1
 800ca68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d105      	bne.n	800ca82 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	f023 0201 	bic.w	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	611a      	str	r2, [r3, #16]
  }
}
 800ca82:	bf00      	nop
 800ca84:	3714      	adds	r7, #20
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	40012c00 	.word	0x40012c00
 800ca94:	40000400 	.word	0x40000400
 800ca98:	40000800 	.word	0x40000800
 800ca9c:	40013400 	.word	0x40013400
 800caa0:	40014000 	.word	0x40014000
 800caa4:	40014400 	.word	0x40014400
 800caa8:	40014800 	.word	0x40014800

0800caac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caac:	b480      	push	{r7}
 800caae:	b087      	sub	sp, #28
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	f023 0201 	bic.w	r2, r3, #1
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	699b      	ldr	r3, [r3, #24]
 800cad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0303 	bic.w	r3, r3, #3
 800cae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f023 0302 	bic.w	r3, r3, #2
 800caf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a2c      	ldr	r2, [pc, #176]	; (800cbb8 <TIM_OC1_SetConfig+0x10c>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d00f      	beq.n	800cb2c <TIM_OC1_SetConfig+0x80>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a2b      	ldr	r2, [pc, #172]	; (800cbbc <TIM_OC1_SetConfig+0x110>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d00b      	beq.n	800cb2c <TIM_OC1_SetConfig+0x80>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a2a      	ldr	r2, [pc, #168]	; (800cbc0 <TIM_OC1_SetConfig+0x114>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d007      	beq.n	800cb2c <TIM_OC1_SetConfig+0x80>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a29      	ldr	r2, [pc, #164]	; (800cbc4 <TIM_OC1_SetConfig+0x118>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d003      	beq.n	800cb2c <TIM_OC1_SetConfig+0x80>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a28      	ldr	r2, [pc, #160]	; (800cbc8 <TIM_OC1_SetConfig+0x11c>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d10c      	bne.n	800cb46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	f023 0308 	bic.w	r3, r3, #8
 800cb32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	697a      	ldr	r2, [r7, #20]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f023 0304 	bic.w	r3, r3, #4
 800cb44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <TIM_OC1_SetConfig+0x10c>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00f      	beq.n	800cb6e <TIM_OC1_SetConfig+0xc2>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a1a      	ldr	r2, [pc, #104]	; (800cbbc <TIM_OC1_SetConfig+0x110>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d00b      	beq.n	800cb6e <TIM_OC1_SetConfig+0xc2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a19      	ldr	r2, [pc, #100]	; (800cbc0 <TIM_OC1_SetConfig+0x114>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d007      	beq.n	800cb6e <TIM_OC1_SetConfig+0xc2>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a18      	ldr	r2, [pc, #96]	; (800cbc4 <TIM_OC1_SetConfig+0x118>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d003      	beq.n	800cb6e <TIM_OC1_SetConfig+0xc2>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a17      	ldr	r2, [pc, #92]	; (800cbc8 <TIM_OC1_SetConfig+0x11c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d111      	bne.n	800cb92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	693a      	ldr	r2, [r7, #16]
 800cb96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	621a      	str	r2, [r3, #32]
}
 800cbac:	bf00      	nop
 800cbae:	371c      	adds	r7, #28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	40012c00 	.word	0x40012c00
 800cbbc:	40013400 	.word	0x40013400
 800cbc0:	40014000 	.word	0x40014000
 800cbc4:	40014400 	.word	0x40014400
 800cbc8:	40014800 	.word	0x40014800

0800cbcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b087      	sub	sp, #28
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	f023 0210 	bic.w	r2, r3, #16
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	021b      	lsls	r3, r3, #8
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	f023 0320 	bic.w	r3, r3, #32
 800cc1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	011b      	lsls	r3, r3, #4
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a28      	ldr	r2, [pc, #160]	; (800cccc <TIM_OC2_SetConfig+0x100>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d003      	beq.n	800cc38 <TIM_OC2_SetConfig+0x6c>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4a27      	ldr	r2, [pc, #156]	; (800ccd0 <TIM_OC2_SetConfig+0x104>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d10d      	bne.n	800cc54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	011b      	lsls	r3, r3, #4
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a1d      	ldr	r2, [pc, #116]	; (800cccc <TIM_OC2_SetConfig+0x100>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d00f      	beq.n	800cc7c <TIM_OC2_SetConfig+0xb0>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a1c      	ldr	r2, [pc, #112]	; (800ccd0 <TIM_OC2_SetConfig+0x104>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d00b      	beq.n	800cc7c <TIM_OC2_SetConfig+0xb0>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a1b      	ldr	r2, [pc, #108]	; (800ccd4 <TIM_OC2_SetConfig+0x108>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d007      	beq.n	800cc7c <TIM_OC2_SetConfig+0xb0>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a1a      	ldr	r2, [pc, #104]	; (800ccd8 <TIM_OC2_SetConfig+0x10c>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d003      	beq.n	800cc7c <TIM_OC2_SetConfig+0xb0>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4a19      	ldr	r2, [pc, #100]	; (800ccdc <TIM_OC2_SetConfig+0x110>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d113      	bne.n	800cca4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	621a      	str	r2, [r3, #32]
}
 800ccbe:	bf00      	nop
 800ccc0:	371c      	adds	r7, #28
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	40012c00 	.word	0x40012c00
 800ccd0:	40013400 	.word	0x40013400
 800ccd4:	40014000 	.word	0x40014000
 800ccd8:	40014400 	.word	0x40014400
 800ccdc:	40014800 	.word	0x40014800

0800cce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a1b      	ldr	r3, [r3, #32]
 800ccf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4313      	orrs	r3, r2
 800cd24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a27      	ldr	r2, [pc, #156]	; (800cddc <TIM_OC3_SetConfig+0xfc>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d003      	beq.n	800cd4a <TIM_OC3_SetConfig+0x6a>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	4a26      	ldr	r2, [pc, #152]	; (800cde0 <TIM_OC3_SetConfig+0x100>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d10d      	bne.n	800cd66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	021b      	lsls	r3, r3, #8
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a1c      	ldr	r2, [pc, #112]	; (800cddc <TIM_OC3_SetConfig+0xfc>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00f      	beq.n	800cd8e <TIM_OC3_SetConfig+0xae>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a1b      	ldr	r2, [pc, #108]	; (800cde0 <TIM_OC3_SetConfig+0x100>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d00b      	beq.n	800cd8e <TIM_OC3_SetConfig+0xae>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a1a      	ldr	r2, [pc, #104]	; (800cde4 <TIM_OC3_SetConfig+0x104>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d007      	beq.n	800cd8e <TIM_OC3_SetConfig+0xae>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a19      	ldr	r2, [pc, #100]	; (800cde8 <TIM_OC3_SetConfig+0x108>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d003      	beq.n	800cd8e <TIM_OC3_SetConfig+0xae>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a18      	ldr	r2, [pc, #96]	; (800cdec <TIM_OC3_SetConfig+0x10c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d113      	bne.n	800cdb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	011b      	lsls	r3, r3, #4
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	621a      	str	r2, [r3, #32]
}
 800cdd0:	bf00      	nop
 800cdd2:	371c      	adds	r7, #28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	40012c00 	.word	0x40012c00
 800cde0:	40013400 	.word	0x40013400
 800cde4:	40014000 	.word	0x40014000
 800cde8:	40014400 	.word	0x40014400
 800cdec:	40014800 	.word	0x40014800

0800cdf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6a1b      	ldr	r3, [r3, #32]
 800ce04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	021b      	lsls	r3, r3, #8
 800ce32:	68fa      	ldr	r2, [r7, #12]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	031b      	lsls	r3, r3, #12
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a28      	ldr	r2, [pc, #160]	; (800cef0 <TIM_OC4_SetConfig+0x100>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d003      	beq.n	800ce5c <TIM_OC4_SetConfig+0x6c>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a27      	ldr	r2, [pc, #156]	; (800cef4 <TIM_OC4_SetConfig+0x104>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d10d      	bne.n	800ce78 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	031b      	lsls	r3, r3, #12
 800ce6a:	697a      	ldr	r2, [r7, #20]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a1d      	ldr	r2, [pc, #116]	; (800cef0 <TIM_OC4_SetConfig+0x100>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00f      	beq.n	800cea0 <TIM_OC4_SetConfig+0xb0>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	4a1c      	ldr	r2, [pc, #112]	; (800cef4 <TIM_OC4_SetConfig+0x104>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d00b      	beq.n	800cea0 <TIM_OC4_SetConfig+0xb0>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	4a1b      	ldr	r2, [pc, #108]	; (800cef8 <TIM_OC4_SetConfig+0x108>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d007      	beq.n	800cea0 <TIM_OC4_SetConfig+0xb0>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a1a      	ldr	r2, [pc, #104]	; (800cefc <TIM_OC4_SetConfig+0x10c>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d003      	beq.n	800cea0 <TIM_OC4_SetConfig+0xb0>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a19      	ldr	r2, [pc, #100]	; (800cf00 <TIM_OC4_SetConfig+0x110>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d113      	bne.n	800cec8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cea6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ceae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	019b      	lsls	r3, r3, #6
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	699b      	ldr	r3, [r3, #24]
 800cec0:	019b      	lsls	r3, r3, #6
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	693a      	ldr	r2, [r7, #16]
 800cecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	621a      	str	r2, [r3, #32]
}
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	40012c00 	.word	0x40012c00
 800cef4:	40013400 	.word	0x40013400
 800cef8:	40014000 	.word	0x40014000
 800cefc:	40014400 	.word	0x40014400
 800cf00:	40014800 	.word	0x40014800

0800cf04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b087      	sub	sp, #28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a1b      	ldr	r3, [r3, #32]
 800cf12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a1b      	ldr	r3, [r3, #32]
 800cf18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cf48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	041b      	lsls	r3, r3, #16
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a17      	ldr	r2, [pc, #92]	; (800cfb8 <TIM_OC5_SetConfig+0xb4>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00f      	beq.n	800cf7e <TIM_OC5_SetConfig+0x7a>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a16      	ldr	r2, [pc, #88]	; (800cfbc <TIM_OC5_SetConfig+0xb8>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <TIM_OC5_SetConfig+0x7a>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a15      	ldr	r2, [pc, #84]	; (800cfc0 <TIM_OC5_SetConfig+0xbc>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d007      	beq.n	800cf7e <TIM_OC5_SetConfig+0x7a>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a14      	ldr	r2, [pc, #80]	; (800cfc4 <TIM_OC5_SetConfig+0xc0>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d003      	beq.n	800cf7e <TIM_OC5_SetConfig+0x7a>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a13      	ldr	r2, [pc, #76]	; (800cfc8 <TIM_OC5_SetConfig+0xc4>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d109      	bne.n	800cf92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	021b      	lsls	r3, r3, #8
 800cf8c:	697a      	ldr	r2, [r7, #20]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	68fa      	ldr	r2, [r7, #12]
 800cf9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	621a      	str	r2, [r3, #32]
}
 800cfac:	bf00      	nop
 800cfae:	371c      	adds	r7, #28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	40012c00 	.word	0x40012c00
 800cfbc:	40013400 	.word	0x40013400
 800cfc0:	40014000 	.word	0x40014000
 800cfc4:	40014400 	.word	0x40014400
 800cfc8:	40014800 	.word	0x40014800

0800cfcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
 800cfe0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	4313      	orrs	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	051b      	lsls	r3, r3, #20
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	4313      	orrs	r3, r2
 800d01e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a18      	ldr	r2, [pc, #96]	; (800d084 <TIM_OC6_SetConfig+0xb8>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d00f      	beq.n	800d048 <TIM_OC6_SetConfig+0x7c>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <TIM_OC6_SetConfig+0xbc>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d00b      	beq.n	800d048 <TIM_OC6_SetConfig+0x7c>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a16      	ldr	r2, [pc, #88]	; (800d08c <TIM_OC6_SetConfig+0xc0>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d007      	beq.n	800d048 <TIM_OC6_SetConfig+0x7c>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <TIM_OC6_SetConfig+0xc4>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d003      	beq.n	800d048 <TIM_OC6_SetConfig+0x7c>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a14      	ldr	r2, [pc, #80]	; (800d094 <TIM_OC6_SetConfig+0xc8>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d109      	bne.n	800d05c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d04e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	029b      	lsls	r3, r3, #10
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	4313      	orrs	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	621a      	str	r2, [r3, #32]
}
 800d076:	bf00      	nop
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
 800d082:	bf00      	nop
 800d084:	40012c00 	.word	0x40012c00
 800d088:	40013400 	.word	0x40013400
 800d08c:	40014000 	.word	0x40014000
 800d090:	40014400 	.word	0x40014400
 800d094:	40014800 	.word	0x40014800

0800d098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d098:	b480      	push	{r7}
 800d09a:	b087      	sub	sp, #28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f003 031f 	and.w	r3, r3, #31
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6a1a      	ldr	r2, [r3, #32]
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	43db      	mvns	r3, r3
 800d0ba:	401a      	ands	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6a1a      	ldr	r2, [r3, #32]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f003 031f 	and.w	r3, r3, #31
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d0d0:	431a      	orrs	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	621a      	str	r2, [r3, #32]
}
 800d0d6:	bf00      	nop
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d109      	bne.n	800d108 <HAL_TIMEx_PWMN_Start+0x24>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	bf14      	ite	ne
 800d100:	2301      	movne	r3, #1
 800d102:	2300      	moveq	r3, #0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	e022      	b.n	800d14e <HAL_TIMEx_PWMN_Start+0x6a>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2b04      	cmp	r3, #4
 800d10c:	d109      	bne.n	800d122 <HAL_TIMEx_PWMN_Start+0x3e>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b01      	cmp	r3, #1
 800d118:	bf14      	ite	ne
 800d11a:	2301      	movne	r3, #1
 800d11c:	2300      	moveq	r3, #0
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	e015      	b.n	800d14e <HAL_TIMEx_PWMN_Start+0x6a>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b08      	cmp	r3, #8
 800d126:	d109      	bne.n	800d13c <HAL_TIMEx_PWMN_Start+0x58>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b01      	cmp	r3, #1
 800d132:	bf14      	ite	ne
 800d134:	2301      	movne	r3, #1
 800d136:	2300      	moveq	r3, #0
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	e008      	b.n	800d14e <HAL_TIMEx_PWMN_Start+0x6a>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b01      	cmp	r3, #1
 800d146:	bf14      	ite	ne
 800d148:	2301      	movne	r3, #1
 800d14a:	2300      	moveq	r3, #0
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e069      	b.n	800d22a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d104      	bne.n	800d166 <HAL_TIMEx_PWMN_Start+0x82>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2202      	movs	r2, #2
 800d160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d164:	e013      	b.n	800d18e <HAL_TIMEx_PWMN_Start+0xaa>
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	2b04      	cmp	r3, #4
 800d16a:	d104      	bne.n	800d176 <HAL_TIMEx_PWMN_Start+0x92>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2202      	movs	r2, #2
 800d170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d174:	e00b      	b.n	800d18e <HAL_TIMEx_PWMN_Start+0xaa>
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b08      	cmp	r3, #8
 800d17a:	d104      	bne.n	800d186 <HAL_TIMEx_PWMN_Start+0xa2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2202      	movs	r2, #2
 800d180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d184:	e003      	b.n	800d18e <HAL_TIMEx_PWMN_Start+0xaa>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2202      	movs	r2, #2
 800d18a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2204      	movs	r2, #4
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	4618      	mov	r0, r3
 800d198:	f000 f9ac 	bl	800d4f4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a20      	ldr	r2, [pc, #128]	; (800d234 <HAL_TIMEx_PWMN_Start+0x150>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d018      	beq.n	800d1e8 <HAL_TIMEx_PWMN_Start+0x104>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1be:	d013      	beq.n	800d1e8 <HAL_TIMEx_PWMN_Start+0x104>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a1c      	ldr	r2, [pc, #112]	; (800d238 <HAL_TIMEx_PWMN_Start+0x154>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d00e      	beq.n	800d1e8 <HAL_TIMEx_PWMN_Start+0x104>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a1b      	ldr	r2, [pc, #108]	; (800d23c <HAL_TIMEx_PWMN_Start+0x158>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d009      	beq.n	800d1e8 <HAL_TIMEx_PWMN_Start+0x104>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a19      	ldr	r2, [pc, #100]	; (800d240 <HAL_TIMEx_PWMN_Start+0x15c>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d004      	beq.n	800d1e8 <HAL_TIMEx_PWMN_Start+0x104>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a18      	ldr	r2, [pc, #96]	; (800d244 <HAL_TIMEx_PWMN_Start+0x160>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d115      	bne.n	800d214 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	689a      	ldr	r2, [r3, #8]
 800d1ee:	4b16      	ldr	r3, [pc, #88]	; (800d248 <HAL_TIMEx_PWMN_Start+0x164>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b06      	cmp	r3, #6
 800d1f8:	d015      	beq.n	800d226 <HAL_TIMEx_PWMN_Start+0x142>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d200:	d011      	beq.n	800d226 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f042 0201 	orr.w	r2, r2, #1
 800d210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d212:	e008      	b.n	800d226 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f042 0201 	orr.w	r2, r2, #1
 800d222:	601a      	str	r2, [r3, #0]
 800d224:	e000      	b.n	800d228 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	40012c00 	.word	0x40012c00
 800d238:	40000400 	.word	0x40000400
 800d23c:	40000800 	.word	0x40000800
 800d240:	40013400 	.word	0x40013400
 800d244:	40014000 	.word	0x40014000
 800d248:	00010007 	.word	0x00010007

0800d24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d101      	bne.n	800d264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d260:	2302      	movs	r3, #2
 800d262:	e065      	b.n	800d330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2202      	movs	r2, #2
 800d270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	4a2c      	ldr	r2, [pc, #176]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d004      	beq.n	800d298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a2b      	ldr	r2, [pc, #172]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d108      	bne.n	800d2aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d29e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a1b      	ldr	r2, [pc, #108]	; (800d33c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d018      	beq.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2da:	d013      	beq.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a18      	ldr	r2, [pc, #96]	; (800d344 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d00e      	beq.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a17      	ldr	r2, [pc, #92]	; (800d348 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d009      	beq.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a12      	ldr	r2, [pc, #72]	; (800d340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d004      	beq.n	800d304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a13      	ldr	r2, [pc, #76]	; (800d34c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d10c      	bne.n	800d31e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d30a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	4313      	orrs	r3, r2
 800d314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68ba      	ldr	r2, [r7, #8]
 800d31c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	40012c00 	.word	0x40012c00
 800d340:	40013400 	.word	0x40013400
 800d344:	40000400 	.word	0x40000400
 800d348:	40000800 	.word	0x40000800
 800d34c:	40014000 	.word	0x40014000

0800d350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d364:	2b01      	cmp	r3, #1
 800d366:	d101      	bne.n	800d36c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d368:	2302      	movs	r3, #2
 800d36a:	e073      	b.n	800d454 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	4313      	orrs	r3, r2
 800d380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	041b      	lsls	r3, r3, #16
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	4a19      	ldr	r2, [pc, #100]	; (800d460 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	d004      	beq.n	800d408 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a18      	ldr	r2, [pc, #96]	; (800d464 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d11c      	bne.n	800d442 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	051b      	lsls	r3, r3, #20
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	40012c00 	.word	0x40012c00
 800d464:	40013400 	.word	0x40013400

0800d468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b087      	sub	sp, #28
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	f003 030f 	and.w	r3, r3, #15
 800d506:	2204      	movs	r2, #4
 800d508:	fa02 f303 	lsl.w	r3, r2, r3
 800d50c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6a1a      	ldr	r2, [r3, #32]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	43db      	mvns	r3, r3
 800d516:	401a      	ands	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6a1a      	ldr	r2, [r3, #32]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f003 030f 	and.w	r3, r3, #15
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	fa01 f303 	lsl.w	r3, r1, r3
 800d52c:	431a      	orrs	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	621a      	str	r2, [r3, #32]
}
 800d532:	bf00      	nop
 800d534:	371c      	adds	r7, #28
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d53e:	b480      	push	{r7}
 800d540:	b085      	sub	sp, #20
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d54e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	b29a      	uxth	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d574:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800d578:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d580:	b29a      	uxth	r2, r3
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	b29b      	uxth	r3, r3
 800d586:	43db      	mvns	r3, r3
 800d588:	b29b      	uxth	r3, r3
 800d58a:	4013      	ands	r3, r2
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d5a2:	b480      	push	{r7}
 800d5a4:	b085      	sub	sp, #20
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	1d3b      	adds	r3, r7, #4
 800d5ac:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
	...

0800d5e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b09d      	sub	sp, #116	; 0x74
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800d602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d606:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	78db      	ldrb	r3, [r3, #3]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d81f      	bhi.n	800d652 <USB_ActivateEndpoint+0x72>
 800d612:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <USB_ActivateEndpoint+0x38>)
 800d614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d618:	0800d629 	.word	0x0800d629
 800d61c:	0800d645 	.word	0x0800d645
 800d620:	0800d65b 	.word	0x0800d65b
 800d624:	0800d637 	.word	0x0800d637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d628:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d62c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d634:	e012      	b.n	800d65c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d636:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d63a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800d63e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d642:	e00b      	b.n	800d65c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d644:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d64c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800d650:	e004      	b.n	800d65c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800d658:	e000      	b.n	800d65c <USB_ActivateEndpoint+0x7c>
      break;
 800d65a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	441a      	add	r2, r3
 800d666:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	b21b      	sxth	r3, r3
 800d68e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d696:	b21a      	sxth	r2, r3
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	b21b      	sxth	r3, r3
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	b21b      	sxth	r3, r3
 800d6a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	441a      	add	r2, r3
 800d6b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	7b1b      	ldrb	r3, [r3, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f040 8178 	bne.w	800d9c2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	785b      	ldrb	r3, [r3, #1]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8084 	beq.w	800d7e4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	61bb      	str	r3, [r7, #24]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	61bb      	str	r3, [r7, #24]
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	00da      	lsls	r2, r3, #3
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6fe:	617b      	str	r3, [r7, #20]
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	88db      	ldrh	r3, [r3, #6]
 800d704:	085b      	lsrs	r3, r3, #1
 800d706:	b29b      	uxth	r3, r3
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	827b      	strh	r3, [r7, #18]
 800d71e:	8a7b      	ldrh	r3, [r7, #18]
 800d720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d724:	2b00      	cmp	r3, #0
 800d726:	d01b      	beq.n	800d760 <USB_ActivateEndpoint+0x180>
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	b29b      	uxth	r3, r3
 800d736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d73e:	823b      	strh	r3, [r7, #16]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	441a      	add	r2, r3
 800d74a:	8a3b      	ldrh	r3, [r7, #16]
 800d74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	78db      	ldrb	r3, [r3, #3]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d020      	beq.n	800d7aa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	b29b      	uxth	r3, r3
 800d776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d77e:	81bb      	strh	r3, [r7, #12]
 800d780:	89bb      	ldrh	r3, [r7, #12]
 800d782:	f083 0320 	eor.w	r3, r3, #32
 800d786:	81bb      	strh	r3, [r7, #12]
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	441a      	add	r2, r3
 800d792:	89bb      	ldrh	r3, [r7, #12]
 800d794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d79c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	8013      	strh	r3, [r2, #0]
 800d7a8:	e2d5      	b.n	800dd56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7c0:	81fb      	strh	r3, [r7, #14]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	441a      	add	r2, r3
 800d7cc:	89fb      	ldrh	r3, [r7, #14]
 800d7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	8013      	strh	r3, [r2, #0]
 800d7e2:	e2b8      	b.n	800dd56 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	4413      	add	r3, r2
 800d7f6:	633b      	str	r3, [r7, #48]	; 0x30
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	00da      	lsls	r2, r3, #3
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d800:	4413      	add	r3, r2
 800d802:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	88db      	ldrh	r3, [r3, #6]
 800d80c:	085b      	lsrs	r3, r3, #1
 800d80e:	b29b      	uxth	r3, r3
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	b29a      	uxth	r2, r3
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d822:	b29b      	uxth	r3, r3
 800d824:	461a      	mov	r2, r3
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	4413      	add	r3, r2
 800d82a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	00da      	lsls	r2, r3, #3
 800d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d834:	4413      	add	r3, r2
 800d836:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d83a:	627b      	str	r3, [r7, #36]	; 0x24
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d846:	b29a      	uxth	r2, r3
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	801a      	strh	r2, [r3, #0]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	2b3e      	cmp	r3, #62	; 0x3e
 800d852:	d91d      	bls.n	800d890 <USB_ActivateEndpoint+0x2b0>
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	095b      	lsrs	r3, r3, #5
 800d85a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	f003 031f 	and.w	r3, r3, #31
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <USB_ActivateEndpoint+0x28e>
 800d868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d86a:	3b01      	subs	r3, #1
 800d86c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	b29a      	uxth	r2, r3
 800d874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d876:	b29b      	uxth	r3, r3
 800d878:	029b      	lsls	r3, r3, #10
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29b      	uxth	r3, r3
 800d880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d888:	b29a      	uxth	r2, r3
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	801a      	strh	r2, [r3, #0]
 800d88e:	e026      	b.n	800d8de <USB_ActivateEndpoint+0x2fe>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10a      	bne.n	800d8ae <USB_ActivateEndpoint+0x2ce>
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	801a      	strh	r2, [r3, #0]
 800d8ac:	e017      	b.n	800d8de <USB_ActivateEndpoint+0x2fe>
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	085b      	lsrs	r3, r3, #1
 800d8b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	f003 0301 	and.w	r3, r3, #1
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <USB_ActivateEndpoint+0x2e8>
 800d8c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	029b      	lsls	r3, r3, #10
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	4413      	add	r3, r2
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800d8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d01b      	beq.n	800d92e <USB_ActivateEndpoint+0x34e>
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	b29b      	uxth	r3, r3
 800d904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d90c:	843b      	strh	r3, [r7, #32]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	441a      	add	r2, r3
 800d918:	8c3b      	ldrh	r3, [r7, #32]
 800d91a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d91e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d922:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d124      	bne.n	800d980 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	b29b      	uxth	r3, r3
 800d944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d94c:	83bb      	strh	r3, [r7, #28]
 800d94e:	8bbb      	ldrh	r3, [r7, #28]
 800d950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d954:	83bb      	strh	r3, [r7, #28]
 800d956:	8bbb      	ldrh	r3, [r7, #28]
 800d958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d95c:	83bb      	strh	r3, [r7, #28]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	441a      	add	r2, r3
 800d968:	8bbb      	ldrh	r3, [r7, #28]
 800d96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	8013      	strh	r3, [r2, #0]
 800d97e:	e1ea      	b.n	800dd56 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d996:	83fb      	strh	r3, [r7, #30]
 800d998:	8bfb      	ldrh	r3, [r7, #30]
 800d99a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d99e:	83fb      	strh	r3, [r7, #30]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	441a      	add	r2, r3
 800d9aa:	8bfb      	ldrh	r3, [r7, #30]
 800d9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	8013      	strh	r3, [r2, #0]
 800d9c0:	e1c9      	b.n	800dd56 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	78db      	ldrb	r3, [r3, #3]
 800d9c6:	2b02      	cmp	r3, #2
 800d9c8:	d11e      	bne.n	800da08 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	441a      	add	r2, r3
 800d9ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d9f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d9fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da02:	b29b      	uxth	r3, r3
 800da04:	8013      	strh	r3, [r2, #0]
 800da06:	e01d      	b.n	800da44 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	881b      	ldrh	r3, [r3, #0]
 800da14:	b29b      	uxth	r3, r3
 800da16:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800da1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	009b      	lsls	r3, r3, #2
 800da2a:	441a      	add	r2, r3
 800da2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800da30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da40:	b29b      	uxth	r3, r3
 800da42:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da4e:	b29b      	uxth	r3, r3
 800da50:	461a      	mov	r2, r3
 800da52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da54:	4413      	add	r3, r2
 800da56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	00da      	lsls	r2, r3, #3
 800da5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da60:	4413      	add	r3, r2
 800da62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da66:	65bb      	str	r3, [r7, #88]	; 0x58
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	891b      	ldrh	r3, [r3, #8]
 800da6c:	085b      	lsrs	r3, r3, #1
 800da6e:	b29b      	uxth	r3, r3
 800da70:	005b      	lsls	r3, r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da76:	801a      	strh	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	657b      	str	r3, [r7, #84]	; 0x54
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da82:	b29b      	uxth	r3, r3
 800da84:	461a      	mov	r2, r3
 800da86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da88:	4413      	add	r3, r2
 800da8a:	657b      	str	r3, [r7, #84]	; 0x54
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	00da      	lsls	r2, r3, #3
 800da92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da94:	4413      	add	r3, r2
 800da96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da9a:	653b      	str	r3, [r7, #80]	; 0x50
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	895b      	ldrh	r3, [r3, #10]
 800daa0:	085b      	lsrs	r3, r3, #1
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	785b      	ldrb	r3, [r3, #1]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 8093 	bne.w	800dbdc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800dac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800daca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01b      	beq.n	800db0a <USB_ActivateEndpoint+0x52a>
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	4413      	add	r3, r2
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dae8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	441a      	add	r2, r3
 800daf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800daf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dafa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dafe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800db02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db06:	b29b      	uxth	r3, r3
 800db08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800db18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800db1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01b      	beq.n	800db5a <USB_ActivateEndpoint+0x57a>
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	881b      	ldrh	r3, [r3, #0]
 800db2e:	b29b      	uxth	r3, r3
 800db30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db38:	877b      	strh	r3, [r7, #58]	; 0x3a
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	441a      	add	r2, r3
 800db44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800db56:	b29b      	uxth	r3, r3
 800db58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	b29b      	uxth	r3, r3
 800db68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db70:	873b      	strh	r3, [r7, #56]	; 0x38
 800db72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800db78:	873b      	strh	r3, [r7, #56]	; 0x38
 800db7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800db80:	873b      	strh	r3, [r7, #56]	; 0x38
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	441a      	add	r2, r3
 800db8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbb8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	441a      	add	r2, r3
 800dbc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	8013      	strh	r3, [r2, #0]
 800dbda:	e0bc      	b.n	800dd56 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800dbec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d01d      	beq.n	800dc34 <USB_ActivateEndpoint+0x654>
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	441a      	add	r2, r3
 800dc1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800dc20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800dc44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800dc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d01d      	beq.n	800dc8c <USB_ActivateEndpoint+0x6ac>
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	881b      	ldrh	r3, [r3, #0]
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc66:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	441a      	add	r2, r3
 800dc74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800dc78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	78db      	ldrb	r3, [r3, #3]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d024      	beq.n	800dcde <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dcae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dcb2:	f083 0320 	eor.w	r3, r3, #32
 800dcb6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	441a      	add	r2, r3
 800dcc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dcc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dcd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	8013      	strh	r3, [r2, #0]
 800dcdc:	e01d      	b.n	800dd1a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	4413      	add	r3, r2
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcf4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	441a      	add	r2, r3
 800dd02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	4413      	add	r3, r2
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	441a      	add	r2, r3
 800dd3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dd56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3774      	adds	r7, #116	; 0x74
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop

0800dd68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b08d      	sub	sp, #52	; 0x34
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	7b1b      	ldrb	r3, [r3, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f040 808e 	bne.w	800de98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	785b      	ldrb	r3, [r3, #1]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d044      	beq.n	800de0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	81bb      	strh	r3, [r7, #12]
 800dd92:	89bb      	ldrh	r3, [r7, #12]
 800dd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d01b      	beq.n	800ddd4 <USB_DeactivateEndpoint+0x6c>
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	881b      	ldrh	r3, [r3, #0]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ddae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddb2:	817b      	strh	r3, [r7, #10]
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	441a      	add	r2, r3
 800ddbe:	897b      	ldrh	r3, [r7, #10]
 800ddc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dde6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddea:	813b      	strh	r3, [r7, #8]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	441a      	add	r2, r3
 800ddf6:	893b      	ldrh	r3, [r7, #8]
 800ddf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ddfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de08:	b29b      	uxth	r3, r3
 800de0a:	8013      	strh	r3, [r2, #0]
 800de0c:	e192      	b.n	800e134 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	009b      	lsls	r3, r3, #2
 800de16:	4413      	add	r3, r2
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	827b      	strh	r3, [r7, #18]
 800de1c:	8a7b      	ldrh	r3, [r7, #18]
 800de1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de22:	2b00      	cmp	r3, #0
 800de24:	d01b      	beq.n	800de5e <USB_DeactivateEndpoint+0xf6>
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	4413      	add	r3, r2
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	b29b      	uxth	r3, r3
 800de34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de3c:	823b      	strh	r3, [r7, #16]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	441a      	add	r2, r3
 800de48:	8a3b      	ldrh	r3, [r7, #16]
 800de4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800de56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4413      	add	r3, r2
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800de70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de74:	81fb      	strh	r3, [r7, #14]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	441a      	add	r2, r3
 800de80:	89fb      	ldrh	r3, [r7, #14]
 800de82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800de8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800de8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de92:	b29b      	uxth	r3, r3
 800de94:	8013      	strh	r3, [r2, #0]
 800de96:	e14d      	b.n	800e134 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f040 80a5 	bne.w	800dfec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	843b      	strh	r3, [r7, #32]
 800deb0:	8c3b      	ldrh	r3, [r7, #32]
 800deb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d01b      	beq.n	800def2 <USB_DeactivateEndpoint+0x18a>
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4413      	add	r3, r2
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800decc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ded0:	83fb      	strh	r3, [r7, #30]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	441a      	add	r2, r3
 800dedc:	8bfb      	ldrh	r3, [r7, #30]
 800dede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800deea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deee:	b29b      	uxth	r3, r3
 800def0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4413      	add	r3, r2
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	83bb      	strh	r3, [r7, #28]
 800df00:	8bbb      	ldrh	r3, [r7, #28]
 800df02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df06:	2b00      	cmp	r3, #0
 800df08:	d01b      	beq.n	800df42 <USB_DeactivateEndpoint+0x1da>
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	b29b      	uxth	r3, r3
 800df18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df20:	837b      	strh	r3, [r7, #26]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	441a      	add	r2, r3
 800df2c:	8b7b      	ldrh	r3, [r7, #26]
 800df2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df3e:	b29b      	uxth	r3, r3
 800df40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	881b      	ldrh	r3, [r3, #0]
 800df4e:	b29b      	uxth	r3, r3
 800df50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df58:	833b      	strh	r3, [r7, #24]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	441a      	add	r2, r3
 800df64:	8b3b      	ldrh	r3, [r7, #24]
 800df66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800df6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800df76:	b29b      	uxth	r3, r3
 800df78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	881b      	ldrh	r3, [r3, #0]
 800df86:	b29b      	uxth	r3, r3
 800df88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df90:	82fb      	strh	r3, [r7, #22]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	441a      	add	r2, r3
 800df9c:	8afb      	ldrh	r3, [r7, #22]
 800df9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	b29b      	uxth	r3, r3
 800dfc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dfc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfc8:	82bb      	strh	r3, [r7, #20]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	441a      	add	r2, r3
 800dfd4:	8abb      	ldrh	r3, [r7, #20]
 800dfd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dfda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dfde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	8013      	strh	r3, [r2, #0]
 800dfea:	e0a3      	b.n	800e134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d01b      	beq.n	800e03c <USB_DeactivateEndpoint+0x2d4>
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	b29b      	uxth	r3, r3
 800e012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e01a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	441a      	add	r2, r3
 800e026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e038:	b29b      	uxth	r3, r3
 800e03a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e04a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e050:	2b00      	cmp	r3, #0
 800e052:	d01b      	beq.n	800e08c <USB_DeactivateEndpoint+0x324>
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	881b      	ldrh	r3, [r3, #0]
 800e060:	b29b      	uxth	r3, r3
 800e062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e06a:	853b      	strh	r3, [r7, #40]	; 0x28
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	441a      	add	r2, r3
 800e076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e088:	b29b      	uxth	r3, r3
 800e08a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	4413      	add	r3, r2
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	441a      	add	r2, r3
 800e0ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e0b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	441a      	add	r2, r3
 800e0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	881b      	ldrh	r3, [r3, #0]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e112:	847b      	strh	r3, [r7, #34]	; 0x22
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	441a      	add	r2, r3
 800e11e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e130:	b29b      	uxth	r3, r3
 800e132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3734      	adds	r7, #52	; 0x34
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b0c2      	sub	sp, #264	; 0x108
 800e146:	af00      	add	r7, sp, #0
 800e148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e14c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e150:	6018      	str	r0, [r3, #0]
 800e152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e15a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	785b      	ldrb	r3, [r3, #1]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	f040 86b7 	bne.w	800eedc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	699a      	ldr	r2, [r3, #24]
 800e17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	429a      	cmp	r2, r3
 800e188:	d908      	bls.n	800e19c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e19a:	e007      	b.n	800e1ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	7b1b      	ldrb	r3, [r3, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d13a      	bne.n	800e232 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6959      	ldr	r1, [r3, #20]
 800e1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	88da      	ldrh	r2, [r3, #6]
 800e1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e1de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e1e2:	6800      	ldr	r0, [r0, #0]
 800e1e4:	f001 fc98 	bl	800fb18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e202:	b29b      	uxth	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	4413      	add	r3, r2
 800e20a:	613b      	str	r3, [r7, #16]
 800e20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	00da      	lsls	r2, r3, #3
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	4413      	add	r3, r2
 800e21e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e222:	60fb      	str	r3, [r7, #12]
 800e224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e228:	b29a      	uxth	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	801a      	strh	r2, [r3, #0]
 800e22e:	f000 be1f 	b.w	800ee70 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	78db      	ldrb	r3, [r3, #3]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	f040 8462 	bne.w	800eb08 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	6a1a      	ldr	r2, [r3, #32]
 800e250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	f240 83df 	bls.w	800ea20 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4413      	add	r3, r2
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	441a      	add	r2, r3
 800e2a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e2aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6a1a      	ldr	r2, [r3, #32]
 800e2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2ce:	1ad2      	subs	r2, r2, r3
 800e2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4413      	add	r3, r2
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 81c7 	beq.w	800e692 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	633b      	str	r3, [r7, #48]	; 0x30
 800e310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	785b      	ldrb	r3, [r3, #1]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d177      	bne.n	800e410 <USB_EPStartXfer+0x2ce>
 800e320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	461a      	mov	r2, r3
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	4413      	add	r3, r2
 800e342:	62bb      	str	r3, [r7, #40]	; 0x28
 800e344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	00da      	lsls	r2, r3, #3
 800e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e354:	4413      	add	r3, r2
 800e356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e35a:	627b      	str	r3, [r7, #36]	; 0x24
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	b29b      	uxth	r3, r3
 800e362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e366:	b29a      	uxth	r2, r3
 800e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36a:	801a      	strh	r2, [r3, #0]
 800e36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e370:	2b3e      	cmp	r3, #62	; 0x3e
 800e372:	d921      	bls.n	800e3b8 <USB_EPStartXfer+0x276>
 800e374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e378:	095b      	lsrs	r3, r3, #5
 800e37a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e382:	f003 031f 	and.w	r3, r3, #31
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <USB_EPStartXfer+0x252>
 800e38a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e38e:	3b01      	subs	r3, #1
 800e390:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	b29a      	uxth	r2, r3
 800e39a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	029b      	lsls	r3, r3, #10
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	801a      	strh	r2, [r3, #0]
 800e3b6:	e050      	b.n	800e45a <USB_EPStartXfer+0x318>
 800e3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10a      	bne.n	800e3d6 <USB_EPStartXfer+0x294>
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	801a      	strh	r2, [r3, #0]
 800e3d4:	e041      	b.n	800e45a <USB_EPStartXfer+0x318>
 800e3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3da:	085b      	lsrs	r3, r3, #1
 800e3dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3e4:	f003 0301 	and.w	r3, r3, #1
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <USB_EPStartXfer+0x2b4>
 800e3ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e400:	b29b      	uxth	r3, r3
 800e402:	029b      	lsls	r3, r3, #10
 800e404:	b29b      	uxth	r3, r3
 800e406:	4313      	orrs	r3, r2
 800e408:	b29a      	uxth	r2, r3
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	801a      	strh	r2, [r3, #0]
 800e40e:	e024      	b.n	800e45a <USB_EPStartXfer+0x318>
 800e410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	785b      	ldrb	r3, [r3, #1]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d11c      	bne.n	800e45a <USB_EPStartXfer+0x318>
 800e420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e42e:	b29b      	uxth	r3, r3
 800e430:	461a      	mov	r2, r3
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	4413      	add	r3, r2
 800e436:	633b      	str	r3, [r7, #48]	; 0x30
 800e438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	00da      	lsls	r2, r3, #3
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	4413      	add	r3, r2
 800e44a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e44e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e454:	b29a      	uxth	r2, r3
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	895b      	ldrh	r3, [r3, #10]
 800e466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6959      	ldr	r1, [r3, #20]
 800e476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e488:	6800      	ldr	r0, [r0, #0]
 800e48a:	f001 fb45 	bl	800fb18 <USB_WritePMA>
            ep->xfer_buff += len;
 800e48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	695a      	ldr	r2, [r3, #20]
 800e49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e49e:	441a      	add	r2, r3
 800e4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6a1a      	ldr	r2, [r3, #32]
 800e4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d90f      	bls.n	800e4e8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6a1a      	ldr	r2, [r3, #32]
 800e4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4d8:	1ad2      	subs	r2, r2, r3
 800e4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	621a      	str	r2, [r3, #32]
 800e4e6:	e00e      	b.n	800e506 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	6a1b      	ldr	r3, [r3, #32]
 800e4f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2200      	movs	r2, #0
 800e504:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d177      	bne.n	800e606 <USB_EPStartXfer+0x4c4>
 800e516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e530:	b29b      	uxth	r3, r3
 800e532:	461a      	mov	r2, r3
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	4413      	add	r3, r2
 800e538:	61bb      	str	r3, [r7, #24]
 800e53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	00da      	lsls	r2, r3, #3
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	4413      	add	r3, r2
 800e54c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e550:	617b      	str	r3, [r7, #20]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	881b      	ldrh	r3, [r3, #0]
 800e556:	b29b      	uxth	r3, r3
 800e558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	801a      	strh	r2, [r3, #0]
 800e562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e566:	2b3e      	cmp	r3, #62	; 0x3e
 800e568:	d921      	bls.n	800e5ae <USB_EPStartXfer+0x46c>
 800e56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e56e:	095b      	lsrs	r3, r3, #5
 800e570:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e578:	f003 031f 	and.w	r3, r3, #31
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d104      	bne.n	800e58a <USB_EPStartXfer+0x448>
 800e580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e584:	3b01      	subs	r3, #1
 800e586:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	881b      	ldrh	r3, [r3, #0]
 800e58e:	b29a      	uxth	r2, r3
 800e590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e594:	b29b      	uxth	r3, r3
 800e596:	029b      	lsls	r3, r3, #10
 800e598:	b29b      	uxth	r3, r3
 800e59a:	4313      	orrs	r3, r2
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	801a      	strh	r2, [r3, #0]
 800e5ac:	e056      	b.n	800e65c <USB_EPStartXfer+0x51a>
 800e5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d10a      	bne.n	800e5cc <USB_EPStartXfer+0x48a>
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	881b      	ldrh	r3, [r3, #0]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	801a      	strh	r2, [r3, #0]
 800e5ca:	e047      	b.n	800e65c <USB_EPStartXfer+0x51a>
 800e5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5d0:	085b      	lsrs	r3, r3, #1
 800e5d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <USB_EPStartXfer+0x4aa>
 800e5e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	029b      	lsls	r3, r3, #10
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	801a      	strh	r2, [r3, #0]
 800e604:	e02a      	b.n	800e65c <USB_EPStartXfer+0x51a>
 800e606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	785b      	ldrb	r3, [r3, #1]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d122      	bne.n	800e65c <USB_EPStartXfer+0x51a>
 800e616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e61a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	623b      	str	r3, [r7, #32]
 800e622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e630:	b29b      	uxth	r3, r3
 800e632:	461a      	mov	r2, r3
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	4413      	add	r3, r2
 800e638:	623b      	str	r3, [r7, #32]
 800e63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	00da      	lsls	r2, r3, #3
 800e648:	6a3b      	ldr	r3, [r7, #32]
 800e64a:	4413      	add	r3, r2
 800e64c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e650:	61fb      	str	r3, [r7, #28]
 800e652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e656:	b29a      	uxth	r2, r3
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	891b      	ldrh	r3, [r3, #8]
 800e668:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6959      	ldr	r1, [r3, #20]
 800e678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e682:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e686:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	f001 fa44 	bl	800fb18 <USB_WritePMA>
 800e690:	e3ee      	b.n	800ee70 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	785b      	ldrb	r3, [r3, #1]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d177      	bne.n	800e792 <USB_EPStartXfer+0x650>
 800e6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	461a      	mov	r2, r3
 800e6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6c2:	4413      	add	r3, r2
 800e6c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	00da      	lsls	r2, r3, #3
 800e6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e6dc:	647b      	str	r3, [r7, #68]	; 0x44
 800e6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ec:	801a      	strh	r2, [r3, #0]
 800e6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6f2:	2b3e      	cmp	r3, #62	; 0x3e
 800e6f4:	d921      	bls.n	800e73a <USB_EPStartXfer+0x5f8>
 800e6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e6fa:	095b      	lsrs	r3, r3, #5
 800e6fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e704:	f003 031f 	and.w	r3, r3, #31
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d104      	bne.n	800e716 <USB_EPStartXfer+0x5d4>
 800e70c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e710:	3b01      	subs	r3, #1
 800e712:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e720:	b29b      	uxth	r3, r3
 800e722:	029b      	lsls	r3, r3, #10
 800e724:	b29b      	uxth	r3, r3
 800e726:	4313      	orrs	r3, r2
 800e728:	b29b      	uxth	r3, r3
 800e72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e732:	b29a      	uxth	r2, r3
 800e734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e736:	801a      	strh	r2, [r3, #0]
 800e738:	e056      	b.n	800e7e8 <USB_EPStartXfer+0x6a6>
 800e73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10a      	bne.n	800e758 <USB_EPStartXfer+0x616>
 800e742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e744:	881b      	ldrh	r3, [r3, #0]
 800e746:	b29b      	uxth	r3, r3
 800e748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e74c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e750:	b29a      	uxth	r2, r3
 800e752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e754:	801a      	strh	r2, [r3, #0]
 800e756:	e047      	b.n	800e7e8 <USB_EPStartXfer+0x6a6>
 800e758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e75c:	085b      	lsrs	r3, r3, #1
 800e75e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e766:	f003 0301 	and.w	r3, r3, #1
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d004      	beq.n	800e778 <USB_EPStartXfer+0x636>
 800e76e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e772:	3301      	adds	r3, #1
 800e774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77a:	881b      	ldrh	r3, [r3, #0]
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e782:	b29b      	uxth	r3, r3
 800e784:	029b      	lsls	r3, r3, #10
 800e786:	b29b      	uxth	r3, r3
 800e788:	4313      	orrs	r3, r2
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e78e:	801a      	strh	r2, [r3, #0]
 800e790:	e02a      	b.n	800e7e8 <USB_EPStartXfer+0x6a6>
 800e792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	785b      	ldrb	r3, [r3, #1]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d122      	bne.n	800e7e8 <USB_EPStartXfer+0x6a6>
 800e7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	653b      	str	r3, [r7, #80]	; 0x50
 800e7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	461a      	mov	r2, r3
 800e7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7c2:	4413      	add	r3, r2
 800e7c4:	653b      	str	r3, [r7, #80]	; 0x50
 800e7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	00da      	lsls	r2, r3, #3
 800e7d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d6:	4413      	add	r3, r2
 800e7d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	891b      	ldrh	r3, [r3, #8]
 800e7f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	6959      	ldr	r1, [r3, #20]
 800e804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e808:	b29b      	uxth	r3, r3
 800e80a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e80e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e812:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e816:	6800      	ldr	r0, [r0, #0]
 800e818:	f001 f97e 	bl	800fb18 <USB_WritePMA>
            ep->xfer_buff += len;
 800e81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	695a      	ldr	r2, [r3, #20]
 800e828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e82c:	441a      	add	r2, r3
 800e82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6a1a      	ldr	r2, [r3, #32]
 800e846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	d90f      	bls.n	800e876 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6a1a      	ldr	r2, [r3, #32]
 800e862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e866:	1ad2      	subs	r2, r2, r3
 800e868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	621a      	str	r2, [r3, #32]
 800e874:	e00e      	b.n	800e894 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2200      	movs	r2, #0
 800e892:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	643b      	str	r3, [r7, #64]	; 0x40
 800e8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	785b      	ldrb	r3, [r3, #1]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d177      	bne.n	800e9a0 <USB_EPStartXfer+0x85e>
 800e8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	4413      	add	r3, r2
 800e8d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	00da      	lsls	r2, r3, #3
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fa:	801a      	strh	r2, [r3, #0]
 800e8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e900:	2b3e      	cmp	r3, #62	; 0x3e
 800e902:	d921      	bls.n	800e948 <USB_EPStartXfer+0x806>
 800e904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e908:	095b      	lsrs	r3, r3, #5
 800e90a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e912:	f003 031f 	and.w	r3, r3, #31
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <USB_EPStartXfer+0x7e2>
 800e91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e91e:	3b01      	subs	r3, #1
 800e920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	b29a      	uxth	r2, r3
 800e92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e92e:	b29b      	uxth	r3, r3
 800e930:	029b      	lsls	r3, r3, #10
 800e932:	b29b      	uxth	r3, r3
 800e934:	4313      	orrs	r3, r2
 800e936:	b29b      	uxth	r3, r3
 800e938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e93c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e940:	b29a      	uxth	r2, r3
 800e942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e944:	801a      	strh	r2, [r3, #0]
 800e946:	e050      	b.n	800e9ea <USB_EPStartXfer+0x8a8>
 800e948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10a      	bne.n	800e966 <USB_EPStartXfer+0x824>
 800e950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e952:	881b      	ldrh	r3, [r3, #0]
 800e954:	b29b      	uxth	r3, r3
 800e956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e95a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e95e:	b29a      	uxth	r2, r3
 800e960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e962:	801a      	strh	r2, [r3, #0]
 800e964:	e041      	b.n	800e9ea <USB_EPStartXfer+0x8a8>
 800e966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e96a:	085b      	lsrs	r3, r3, #1
 800e96c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d004      	beq.n	800e986 <USB_EPStartXfer+0x844>
 800e97c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e980:	3301      	adds	r3, #1
 800e982:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e990:	b29b      	uxth	r3, r3
 800e992:	029b      	lsls	r3, r3, #10
 800e994:	b29b      	uxth	r3, r3
 800e996:	4313      	orrs	r3, r2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99c:	801a      	strh	r2, [r3, #0]
 800e99e:	e024      	b.n	800e9ea <USB_EPStartXfer+0x8a8>
 800e9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d11c      	bne.n	800e9ea <USB_EPStartXfer+0x8a8>
 800e9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c4:	4413      	add	r3, r2
 800e9c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	00da      	lsls	r2, r3, #3
 800e9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d8:	4413      	add	r3, r2
 800e9da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	895b      	ldrh	r3, [r3, #10]
 800e9f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	6959      	ldr	r1, [r3, #20]
 800ea06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ea10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ea18:	6800      	ldr	r0, [r0, #0]
 800ea1a:	f001 f87d 	bl	800fb18 <USB_WritePMA>
 800ea1e:	e227      	b.n	800ee70 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ea20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	6a1b      	ldr	r3, [r3, #32]
 800ea2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ea30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	4413      	add	r3, r2
 800ea4a:	881b      	ldrh	r3, [r3, #0]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ea52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea56:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ea5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	441a      	add	r2, r3
 800ea74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ea78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ea8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaac:	4413      	add	r3, r2
 800eaae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	00da      	lsls	r2, r3, #3
 800eabe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eac0:	4413      	add	r3, r2
 800eac2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eac6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eacc:	b29a      	uxth	r2, r3
 800eace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ead0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ead2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ead6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	891b      	ldrh	r3, [r3, #8]
 800eade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6959      	ldr	r1, [r3, #20]
 800eaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eaf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eafc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800eb00:	6800      	ldr	r0, [r0, #0]
 800eb02:	f001 f809 	bl	800fb18 <USB_WritePMA>
 800eb06:	e1b3      	b.n	800ee70 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eb08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6a1a      	ldr	r2, [r3, #32]
 800eb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4413      	add	r3, r2
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 80c6 	beq.w	800ecda <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	673b      	str	r3, [r7, #112]	; 0x70
 800eb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d177      	bne.n	800ec5a <USB_EPStartXfer+0xb18>
 800eb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb84:	b29b      	uxth	r3, r3
 800eb86:	461a      	mov	r2, r3
 800eb88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb8a:	4413      	add	r3, r2
 800eb8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800eb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	00da      	lsls	r2, r3, #3
 800eb9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb9e:	4413      	add	r3, r2
 800eba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eba4:	667b      	str	r3, [r7, #100]	; 0x64
 800eba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebb4:	801a      	strh	r2, [r3, #0]
 800ebb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebba:	2b3e      	cmp	r3, #62	; 0x3e
 800ebbc:	d921      	bls.n	800ec02 <USB_EPStartXfer+0xac0>
 800ebbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebc2:	095b      	lsrs	r3, r3, #5
 800ebc4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ebc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ebcc:	f003 031f 	and.w	r3, r3, #31
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d104      	bne.n	800ebde <USB_EPStartXfer+0xa9c>
 800ebd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ebde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	029b      	lsls	r3, r3, #10
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebfe:	801a      	strh	r2, [r3, #0]
 800ec00:	e050      	b.n	800eca4 <USB_EPStartXfer+0xb62>
 800ec02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10a      	bne.n	800ec20 <USB_EPStartXfer+0xade>
 800ec0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	b29b      	uxth	r3, r3
 800ec10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec1c:	801a      	strh	r2, [r3, #0]
 800ec1e:	e041      	b.n	800eca4 <USB_EPStartXfer+0xb62>
 800ec20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec24:	085b      	lsrs	r3, r3, #1
 800ec26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec2e:	f003 0301 	and.w	r3, r3, #1
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d004      	beq.n	800ec40 <USB_EPStartXfer+0xafe>
 800ec36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ec40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec42:	881b      	ldrh	r3, [r3, #0]
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	029b      	lsls	r3, r3, #10
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4313      	orrs	r3, r2
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec56:	801a      	strh	r2, [r3, #0]
 800ec58:	e024      	b.n	800eca4 <USB_EPStartXfer+0xb62>
 800ec5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	785b      	ldrb	r3, [r3, #1]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d11c      	bne.n	800eca4 <USB_EPStartXfer+0xb62>
 800ec6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec7e:	4413      	add	r3, r2
 800ec80:	673b      	str	r3, [r7, #112]	; 0x70
 800ec82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	00da      	lsls	r2, r3, #3
 800ec90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec92:	4413      	add	r3, r2
 800ec94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec98:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800eca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	895b      	ldrh	r3, [r3, #10]
 800ecb0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ecb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6959      	ldr	r1, [r3, #20]
 800ecc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ecca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ecce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ecd2:	6800      	ldr	r0, [r0, #0]
 800ecd4:	f000 ff20 	bl	800fb18 <USB_WritePMA>
 800ecd8:	e0ca      	b.n	800ee70 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ecda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	785b      	ldrb	r3, [r3, #1]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d177      	bne.n	800edda <USB_EPStartXfer+0xc98>
 800ecea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ecf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed0a:	4413      	add	r3, r2
 800ed0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	00da      	lsls	r2, r3, #3
 800ed1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ed1e:	4413      	add	r3, r2
 800ed20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed24:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed28:	881b      	ldrh	r3, [r3, #0]
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed34:	801a      	strh	r2, [r3, #0]
 800ed36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed3a:	2b3e      	cmp	r3, #62	; 0x3e
 800ed3c:	d921      	bls.n	800ed82 <USB_EPStartXfer+0xc40>
 800ed3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed42:	095b      	lsrs	r3, r3, #5
 800ed44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed4c:	f003 031f 	and.w	r3, r3, #31
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d104      	bne.n	800ed5e <USB_EPStartXfer+0xc1c>
 800ed54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ed5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	029b      	lsls	r3, r3, #10
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed7e:	801a      	strh	r2, [r3, #0]
 800ed80:	e05c      	b.n	800ee3c <USB_EPStartXfer+0xcfa>
 800ed82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d10a      	bne.n	800eda0 <USB_EPStartXfer+0xc5e>
 800ed8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed9c:	801a      	strh	r2, [r3, #0]
 800ed9e:	e04d      	b.n	800ee3c <USB_EPStartXfer+0xcfa>
 800eda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eda4:	085b      	lsrs	r3, r3, #1
 800eda6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800edaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d004      	beq.n	800edc0 <USB_EPStartXfer+0xc7e>
 800edb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edba:	3301      	adds	r3, #1
 800edbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800edc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edc2:	881b      	ldrh	r3, [r3, #0]
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800edca:	b29b      	uxth	r3, r3
 800edcc:	029b      	lsls	r3, r3, #10
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4313      	orrs	r3, r2
 800edd2:	b29a      	uxth	r2, r3
 800edd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800edd6:	801a      	strh	r2, [r3, #0]
 800edd8:	e030      	b.n	800ee3c <USB_EPStartXfer+0xcfa>
 800edda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	785b      	ldrb	r3, [r3, #1]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d128      	bne.n	800ee3c <USB_EPStartXfer+0xcfa>
 800edea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800edf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	461a      	mov	r2, r3
 800ee0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee0e:	4413      	add	r3, r2
 800ee10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ee14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	00da      	lsls	r2, r3, #3
 800ee22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee26:	4413      	add	r3, r2
 800ee28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	891b      	ldrh	r3, [r3, #8]
 800ee48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6959      	ldr	r1, [r3, #20]
 800ee58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ee62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ee66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ee6a:	6800      	ldr	r0, [r0, #0]
 800ee6c:	f000 fe54 	bl	800fb18 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ee70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4413      	add	r3, r2
 800ee8a:	881b      	ldrh	r3, [r3, #0]
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee96:	817b      	strh	r3, [r7, #10]
 800ee98:	897b      	ldrh	r3, [r7, #10]
 800ee9a:	f083 0310 	eor.w	r3, r3, #16
 800ee9e:	817b      	strh	r3, [r7, #10]
 800eea0:	897b      	ldrh	r3, [r7, #10]
 800eea2:	f083 0320 	eor.w	r3, r3, #32
 800eea6:	817b      	strh	r3, [r7, #10]
 800eea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	441a      	add	r2, r3
 800eec2:	897b      	ldrh	r3, [r7, #10]
 800eec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	8013      	strh	r3, [r2, #0]
 800eed8:	f000 bcde 	b.w	800f898 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800eedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	7b1b      	ldrb	r3, [r3, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f040 80bb 	bne.w	800f064 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800eeee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	699a      	ldr	r2, [r3, #24]
 800eefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d917      	bls.n	800ef3a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ef0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ef1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	699a      	ldr	r2, [r3, #24]
 800ef26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	619a      	str	r2, [r3, #24]
 800ef38:	e00e      	b.n	800ef58 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ef3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ef4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2200      	movs	r2, #0
 800ef56:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ef58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	461a      	mov	r2, r3
 800ef78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	781b      	ldrb	r3, [r3, #0]
 800ef8e:	00da      	lsls	r2, r3, #3
 800ef90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef94:	4413      	add	r3, r2
 800ef96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ef9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efaa:	b29a      	uxth	r2, r3
 800efac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efb0:	801a      	strh	r2, [r3, #0]
 800efb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efb6:	2b3e      	cmp	r3, #62	; 0x3e
 800efb8:	d924      	bls.n	800f004 <USB_EPStartXfer+0xec2>
 800efba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efbe:	095b      	lsrs	r3, r3, #5
 800efc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800efc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efc8:	f003 031f 	and.w	r3, r3, #31
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d104      	bne.n	800efda <USB_EPStartXfer+0xe98>
 800efd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efd4:	3b01      	subs	r3, #1
 800efd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800efda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	029b      	lsls	r3, r3, #10
 800efea:	b29b      	uxth	r3, r3
 800efec:	4313      	orrs	r3, r2
 800efee:	b29b      	uxth	r3, r3
 800eff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eff8:	b29a      	uxth	r2, r3
 800effa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800effe:	801a      	strh	r2, [r3, #0]
 800f000:	f000 bc10 	b.w	800f824 <USB_EPStartXfer+0x16e2>
 800f004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10c      	bne.n	800f026 <USB_EPStartXfer+0xee4>
 800f00c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	b29b      	uxth	r3, r3
 800f014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f022:	801a      	strh	r2, [r3, #0]
 800f024:	e3fe      	b.n	800f824 <USB_EPStartXfer+0x16e2>
 800f026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f02a:	085b      	lsrs	r3, r3, #1
 800f02c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f034:	f003 0301 	and.w	r3, r3, #1
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d004      	beq.n	800f046 <USB_EPStartXfer+0xf04>
 800f03c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f040:	3301      	adds	r3, #1
 800f042:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f052:	b29b      	uxth	r3, r3
 800f054:	029b      	lsls	r3, r3, #10
 800f056:	b29b      	uxth	r3, r3
 800f058:	4313      	orrs	r3, r2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f060:	801a      	strh	r2, [r3, #0]
 800f062:	e3df      	b.n	800f824 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	78db      	ldrb	r3, [r3, #3]
 800f070:	2b02      	cmp	r3, #2
 800f072:	f040 8218 	bne.w	800f4a6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	785b      	ldrb	r3, [r3, #1]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f040 809d 	bne.w	800f1c2 <USB_EPStartXfer+0x1080>
 800f088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f08c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f09a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0ac:	4413      	add	r3, r2
 800f0ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	00da      	lsls	r2, r3, #3
 800f0c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f0ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f0ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f0e0:	801a      	strh	r2, [r3, #0]
 800f0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	2b3e      	cmp	r3, #62	; 0x3e
 800f0f0:	d92b      	bls.n	800f14a <USB_EPStartXfer+0x1008>
 800f0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	691b      	ldr	r3, [r3, #16]
 800f0fe:	095b      	lsrs	r3, r3, #5
 800f100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	f003 031f 	and.w	r3, r3, #31
 800f114:	2b00      	cmp	r3, #0
 800f116:	d104      	bne.n	800f122 <USB_EPStartXfer+0xfe0>
 800f118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f11c:	3b01      	subs	r3, #1
 800f11e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	b29a      	uxth	r2, r3
 800f12a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f12e:	b29b      	uxth	r3, r3
 800f130:	029b      	lsls	r3, r3, #10
 800f132:	b29b      	uxth	r3, r3
 800f134:	4313      	orrs	r3, r2
 800f136:	b29b      	uxth	r3, r3
 800f138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f13c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f140:	b29a      	uxth	r2, r3
 800f142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f146:	801a      	strh	r2, [r3, #0]
 800f148:	e070      	b.n	800f22c <USB_EPStartXfer+0x10ea>
 800f14a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f14e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	691b      	ldr	r3, [r3, #16]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10c      	bne.n	800f174 <USB_EPStartXfer+0x1032>
 800f15a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	b29b      	uxth	r3, r3
 800f162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f170:	801a      	strh	r2, [r3, #0]
 800f172:	e05b      	b.n	800f22c <USB_EPStartXfer+0x10ea>
 800f174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	691b      	ldr	r3, [r3, #16]
 800f180:	085b      	lsrs	r3, r3, #1
 800f182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	691b      	ldr	r3, [r3, #16]
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <USB_EPStartXfer+0x1062>
 800f19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f19e:	3301      	adds	r3, #1
 800f1a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f1a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	029b      	lsls	r3, r3, #10
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1be:	801a      	strh	r2, [r3, #0]
 800f1c0:	e034      	b.n	800f22c <USB_EPStartXfer+0x10ea>
 800f1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	785b      	ldrb	r3, [r3, #1]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d12c      	bne.n	800f22c <USB_EPStartXfer+0x10ea>
 800f1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f1e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	00da      	lsls	r2, r3, #3
 800f20a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f20e:	4413      	add	r3, r2
 800f210:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	b29a      	uxth	r2, r3
 800f226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f22a:	801a      	strh	r2, [r3, #0]
 800f22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	785b      	ldrb	r3, [r3, #1]
 800f246:	2b00      	cmp	r3, #0
 800f248:	f040 809d 	bne.w	800f386 <USB_EPStartXfer+0x1244>
 800f24c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f250:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f25e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f268:	b29b      	uxth	r3, r3
 800f26a:	461a      	mov	r2, r3
 800f26c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f270:	4413      	add	r3, r2
 800f272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	00da      	lsls	r2, r3, #3
 800f284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f288:	4413      	add	r3, r2
 800f28a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f28e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2a4:	801a      	strh	r2, [r3, #0]
 800f2a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	2b3e      	cmp	r3, #62	; 0x3e
 800f2b4:	d92b      	bls.n	800f30e <USB_EPStartXfer+0x11cc>
 800f2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	691b      	ldr	r3, [r3, #16]
 800f2c2:	095b      	lsrs	r3, r3, #5
 800f2c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	f003 031f 	and.w	r3, r3, #31
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d104      	bne.n	800f2e6 <USB_EPStartXfer+0x11a4>
 800f2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f2e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	029b      	lsls	r3, r3, #10
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f304:	b29a      	uxth	r2, r3
 800f306:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f30a:	801a      	strh	r2, [r3, #0]
 800f30c:	e069      	b.n	800f3e2 <USB_EPStartXfer+0x12a0>
 800f30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d10c      	bne.n	800f338 <USB_EPStartXfer+0x11f6>
 800f31e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f322:	881b      	ldrh	r3, [r3, #0]
 800f324:	b29b      	uxth	r3, r3
 800f326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f32a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f32e:	b29a      	uxth	r2, r3
 800f330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f334:	801a      	strh	r2, [r3, #0]
 800f336:	e054      	b.n	800f3e2 <USB_EPStartXfer+0x12a0>
 800f338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	691b      	ldr	r3, [r3, #16]
 800f344:	085b      	lsrs	r3, r3, #1
 800f346:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d004      	beq.n	800f368 <USB_EPStartXfer+0x1226>
 800f35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f362:	3301      	adds	r3, #1
 800f364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f368:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	b29a      	uxth	r2, r3
 800f370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f374:	b29b      	uxth	r3, r3
 800f376:	029b      	lsls	r3, r3, #10
 800f378:	b29b      	uxth	r3, r3
 800f37a:	4313      	orrs	r3, r2
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f382:	801a      	strh	r2, [r3, #0]
 800f384:	e02d      	b.n	800f3e2 <USB_EPStartXfer+0x12a0>
 800f386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	785b      	ldrb	r3, [r3, #1]
 800f392:	2b01      	cmp	r3, #1
 800f394:	d125      	bne.n	800f3e2 <USB_EPStartXfer+0x12a0>
 800f396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f39a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	00da      	lsls	r2, r3, #3
 800f3c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f3ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	69db      	ldr	r3, [r3, #28]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 8218 	beq.w	800f824 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	881b      	ldrh	r3, [r3, #0]
 800f410:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d005      	beq.n	800f42c <USB_EPStartXfer+0x12ea>
 800f420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10d      	bne.n	800f448 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f42c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f434:	2b00      	cmp	r3, #0
 800f436:	f040 81f5 	bne.w	800f824 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f43a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800f43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f442:	2b00      	cmp	r3, #0
 800f444:	f040 81ee 	bne.w	800f824 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	009b      	lsls	r3, r3, #2
 800f460:	4413      	add	r3, r2
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	b29b      	uxth	r3, r3
 800f466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f46a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f46e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	441a      	add	r2, r3
 800f48c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800f490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f49c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	8013      	strh	r3, [r2, #0]
 800f4a4:	e1be      	b.n	800f824 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	78db      	ldrb	r3, [r3, #3]
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	f040 81b4 	bne.w	800f820 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	699a      	ldr	r2, [r3, #24]
 800f4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	691b      	ldr	r3, [r3, #16]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d917      	bls.n	800f504 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800f4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	699a      	ldr	r2, [r3, #24]
 800f4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4f4:	1ad2      	subs	r2, r2, r3
 800f4f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	619a      	str	r2, [r3, #24]
 800f502:	e00e      	b.n	800f522 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800f514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2200      	movs	r2, #0
 800f520:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	785b      	ldrb	r3, [r3, #1]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f040 8085 	bne.w	800f63e <USB_EPStartXfer+0x14fc>
 800f534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f550:	b29b      	uxth	r3, r3
 800f552:	461a      	mov	r2, r3
 800f554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f558:	4413      	add	r3, r2
 800f55a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	00da      	lsls	r2, r3, #3
 800f56c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f570:	4413      	add	r3, r2
 800f572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f57a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b29b      	uxth	r3, r3
 800f582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f586:	b29a      	uxth	r2, r3
 800f588:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f58c:	801a      	strh	r2, [r3, #0]
 800f58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f592:	2b3e      	cmp	r3, #62	; 0x3e
 800f594:	d923      	bls.n	800f5de <USB_EPStartXfer+0x149c>
 800f596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f59a:	095b      	lsrs	r3, r3, #5
 800f59c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5a4:	f003 031f 	and.w	r3, r3, #31
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d104      	bne.n	800f5b6 <USB_EPStartXfer+0x1474>
 800f5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f5b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5c2:	b29b      	uxth	r3, r3
 800f5c4:	029b      	lsls	r3, r3, #10
 800f5c6:	b29b      	uxth	r3, r3
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5da:	801a      	strh	r2, [r3, #0]
 800f5dc:	e060      	b.n	800f6a0 <USB_EPStartXfer+0x155e>
 800f5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d10c      	bne.n	800f600 <USB_EPStartXfer+0x14be>
 800f5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f5fc:	801a      	strh	r2, [r3, #0]
 800f5fe:	e04f      	b.n	800f6a0 <USB_EPStartXfer+0x155e>
 800f600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f604:	085b      	lsrs	r3, r3, #1
 800f606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f60e:	f003 0301 	and.w	r3, r3, #1
 800f612:	2b00      	cmp	r3, #0
 800f614:	d004      	beq.n	800f620 <USB_EPStartXfer+0x14de>
 800f616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f61a:	3301      	adds	r3, #1
 800f61c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	b29a      	uxth	r2, r3
 800f628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	029b      	lsls	r3, r3, #10
 800f630:	b29b      	uxth	r3, r3
 800f632:	4313      	orrs	r3, r2
 800f634:	b29a      	uxth	r2, r3
 800f636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f63a:	801a      	strh	r2, [r3, #0]
 800f63c:	e030      	b.n	800f6a0 <USB_EPStartXfer+0x155e>
 800f63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	785b      	ldrb	r3, [r3, #1]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d128      	bne.n	800f6a0 <USB_EPStartXfer+0x155e>
 800f64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	461a      	mov	r2, r3
 800f66e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f672:	4413      	add	r3, r2
 800f674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	00da      	lsls	r2, r3, #3
 800f686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f68a:	4413      	add	r3, r2
 800f68c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f698:	b29a      	uxth	r2, r3
 800f69a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f69e:	801a      	strh	r2, [r3, #0]
 800f6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f040 8085 	bne.w	800f7ca <USB_EPStartXfer+0x1688>
 800f6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	461a      	mov	r2, r3
 800f6e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	00da      	lsls	r2, r3, #3
 800f6f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f712:	b29a      	uxth	r2, r3
 800f714:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f718:	801a      	strh	r2, [r3, #0]
 800f71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f71e:	2b3e      	cmp	r3, #62	; 0x3e
 800f720:	d923      	bls.n	800f76a <USB_EPStartXfer+0x1628>
 800f722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f726:	095b      	lsrs	r3, r3, #5
 800f728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f730:	f003 031f 	and.w	r3, r3, #31
 800f734:	2b00      	cmp	r3, #0
 800f736:	d104      	bne.n	800f742 <USB_EPStartXfer+0x1600>
 800f738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f73c:	3b01      	subs	r3, #1
 800f73e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	b29a      	uxth	r2, r3
 800f74a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f74e:	b29b      	uxth	r3, r3
 800f750:	029b      	lsls	r3, r3, #10
 800f752:	b29b      	uxth	r3, r3
 800f754:	4313      	orrs	r3, r2
 800f756:	b29b      	uxth	r3, r3
 800f758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f760:	b29a      	uxth	r2, r3
 800f762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f766:	801a      	strh	r2, [r3, #0]
 800f768:	e05c      	b.n	800f824 <USB_EPStartXfer+0x16e2>
 800f76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d10c      	bne.n	800f78c <USB_EPStartXfer+0x164a>
 800f772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	b29b      	uxth	r3, r3
 800f77a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f77e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f782:	b29a      	uxth	r2, r3
 800f784:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f788:	801a      	strh	r2, [r3, #0]
 800f78a:	e04b      	b.n	800f824 <USB_EPStartXfer+0x16e2>
 800f78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f790:	085b      	lsrs	r3, r3, #1
 800f792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f79a:	f003 0301 	and.w	r3, r3, #1
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d004      	beq.n	800f7ac <USB_EPStartXfer+0x166a>
 800f7a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f7ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	029b      	lsls	r3, r3, #10
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7c6:	801a      	strh	r2, [r3, #0]
 800f7c8:	e02c      	b.n	800f824 <USB_EPStartXfer+0x16e2>
 800f7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	785b      	ldrb	r3, [r3, #1]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d124      	bne.n	800f824 <USB_EPStartXfer+0x16e2>
 800f7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f7f0:	4413      	add	r3, r2
 800f7f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	00da      	lsls	r2, r3, #3
 800f804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f808:	4413      	add	r3, r2
 800f80a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f80e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f816:	b29a      	uxth	r2, r3
 800f818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f81c:	801a      	strh	r2, [r3, #0]
 800f81e:	e001      	b.n	800f824 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f820:	2301      	movs	r3, #1
 800f822:	e03a      	b.n	800f89a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	4413      	add	r3, r2
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	b29b      	uxth	r3, r3
 800f842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f84a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f84e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f852:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f856:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f85a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f85e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f862:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f86a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	441a      	add	r2, r3
 800f880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f88c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f894:	b29b      	uxth	r3, r3
 800f896:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	785b      	ldrb	r3, [r3, #1]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d020      	beq.n	800f8f8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	4413      	add	r3, r2
 800f8c0:	881b      	ldrh	r3, [r3, #0]
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8cc:	81bb      	strh	r3, [r7, #12]
 800f8ce:	89bb      	ldrh	r3, [r7, #12]
 800f8d0:	f083 0310 	eor.w	r3, r3, #16
 800f8d4:	81bb      	strh	r3, [r7, #12]
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	781b      	ldrb	r3, [r3, #0]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	441a      	add	r2, r3
 800f8e0:	89bb      	ldrh	r3, [r7, #12]
 800f8e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	8013      	strh	r3, [r2, #0]
 800f8f6:	e01f      	b.n	800f938 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4413      	add	r3, r2
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	b29b      	uxth	r3, r3
 800f906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f90e:	81fb      	strh	r3, [r7, #14]
 800f910:	89fb      	ldrh	r3, [r7, #14]
 800f912:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f916:	81fb      	strh	r3, [r7, #14]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	441a      	add	r2, r3
 800f922:	89fb      	ldrh	r3, [r7, #14]
 800f924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f92c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f934:	b29b      	uxth	r3, r3
 800f936:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f946:	b480      	push	{r7}
 800f948:	b087      	sub	sp, #28
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	7b1b      	ldrb	r3, [r3, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	f040 809d 	bne.w	800fa94 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	785b      	ldrb	r3, [r3, #1]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d04c      	beq.n	800f9fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	823b      	strh	r3, [r7, #16]
 800f970:	8a3b      	ldrh	r3, [r7, #16]
 800f972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f976:	2b00      	cmp	r3, #0
 800f978:	d01b      	beq.n	800f9b2 <USB_EPClearStall+0x6c>
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	4413      	add	r3, r2
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	b29b      	uxth	r3, r3
 800f988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f98c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f990:	81fb      	strh	r3, [r7, #14]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	009b      	lsls	r3, r3, #2
 800f99a:	441a      	add	r2, r3
 800f99c:	89fb      	ldrh	r3, [r7, #14]
 800f99e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	78db      	ldrb	r3, [r3, #3]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d06c      	beq.n	800fa94 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	4413      	add	r3, r2
 800f9c4:	881b      	ldrh	r3, [r3, #0]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9d0:	81bb      	strh	r3, [r7, #12]
 800f9d2:	89bb      	ldrh	r3, [r7, #12]
 800f9d4:	f083 0320 	eor.w	r3, r3, #32
 800f9d8:	81bb      	strh	r3, [r7, #12]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	441a      	add	r2, r3
 800f9e4:	89bb      	ldrh	r3, [r7, #12]
 800f9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	8013      	strh	r3, [r2, #0]
 800f9fa:	e04b      	b.n	800fa94 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9fc:	687a      	ldr	r2, [r7, #4]
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	82fb      	strh	r3, [r7, #22]
 800fa0a:	8afb      	ldrh	r3, [r7, #22]
 800fa0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d01b      	beq.n	800fa4c <USB_EPClearStall+0x106>
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa2a:	82bb      	strh	r3, [r7, #20]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	441a      	add	r2, r3
 800fa36:	8abb      	ldrh	r3, [r7, #20]
 800fa38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fa44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa62:	827b      	strh	r3, [r7, #18]
 800fa64:	8a7b      	ldrh	r3, [r7, #18]
 800fa66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fa6a:	827b      	strh	r3, [r7, #18]
 800fa6c:	8a7b      	ldrh	r3, [r7, #18]
 800fa6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fa72:	827b      	strh	r3, [r7, #18]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	441a      	add	r2, r3
 800fa7e:	8a7b      	ldrh	r3, [r7, #18]
 800fa80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	371c      	adds	r7, #28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b083      	sub	sp, #12
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	460b      	mov	r3, r1
 800faac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800faae:	78fb      	ldrb	r3, [r7, #3]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d103      	bne.n	800fabc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2280      	movs	r2, #128	; 0x80
 800fab8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr

0800faca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fad8:	b29b      	uxth	r3, r3
 800fada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3714      	adds	r7, #20
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b08b      	sub	sp, #44	; 0x2c
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	4611      	mov	r1, r2
 800fb24:	461a      	mov	r2, r3
 800fb26:	460b      	mov	r3, r1
 800fb28:	80fb      	strh	r3, [r7, #6]
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fb2e:	88bb      	ldrh	r3, [r7, #4]
 800fb30:	3301      	adds	r3, #1
 800fb32:	085b      	lsrs	r3, r3, #1
 800fb34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fb3e:	88fa      	ldrh	r2, [r7, #6]
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb4e:	e01b      	b.n	800fb88 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	021b      	lsls	r3, r3, #8
 800fb5e:	b21a      	sxth	r2, r3
 800fb60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	b21b      	sxth	r3, r3
 800fb68:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800fb6a:	6a3b      	ldr	r3, [r7, #32]
 800fb6c:	8a7a      	ldrh	r2, [r7, #18]
 800fb6e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fb70:	6a3b      	ldr	r3, [r7, #32]
 800fb72:	3302      	adds	r3, #2
 800fb74:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb84:	3b01      	subs	r3, #1
 800fb86:	627b      	str	r3, [r7, #36]	; 0x24
 800fb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e0      	bne.n	800fb50 <USB_WritePMA+0x38>
  }
}
 800fb8e:	bf00      	nop
 800fb90:	bf00      	nop
 800fb92:	372c      	adds	r7, #44	; 0x2c
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b08b      	sub	sp, #44	; 0x2c
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	4611      	mov	r1, r2
 800fba8:	461a      	mov	r2, r3
 800fbaa:	460b      	mov	r3, r1
 800fbac:	80fb      	strh	r3, [r7, #6]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fbb2:	88bb      	ldrh	r3, [r7, #4]
 800fbb4:	085b      	lsrs	r3, r3, #1
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fbc2:	88fa      	ldrh	r2, [r7, #6]
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbcc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	627b      	str	r3, [r7, #36]	; 0x24
 800fbd2:	e018      	b.n	800fc06 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800fbd4:	6a3b      	ldr	r3, [r7, #32]
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	3302      	adds	r3, #2
 800fbe0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	3301      	adds	r3, #1
 800fbee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	0a1b      	lsrs	r3, r3, #8
 800fbf4:	b2da      	uxtb	r2, r3
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc02:	3b01      	subs	r3, #1
 800fc04:	627b      	str	r3, [r7, #36]	; 0x24
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1e3      	bne.n	800fbd4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fc0c:	88bb      	ldrh	r3, [r7, #4]
 800fc0e:	f003 0301 	and.w	r3, r3, #1
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d007      	beq.n	800fc28 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800fc18:	6a3b      	ldr	r3, [r7, #32]
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	b2da      	uxtb	r2, r3
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	701a      	strb	r2, [r3, #0]
  }
}
 800fc28:	bf00      	nop
 800fc2a:	372c      	adds	r7, #44	; 0x2c
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800fc34:	b480      	push	{r7}
 800fc36:	b085      	sub	sp, #20
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	607a      	str	r2, [r7, #4]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800fc46:	89fb      	ldrh	r3, [r7, #14]
 800fc48:	021b      	lsls	r3, r3, #8
 800fc4a:	b21a      	sxth	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	b21b      	sxth	r3, r3
 800fc52:	4313      	orrs	r3, r2
 800fc54:	b21b      	sxth	r3, r3
 800fc56:	b29b      	uxth	r3, r3
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2204      	movs	r2, #4
 800fc78:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2204      	movs	r2, #4
 800fc7e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	3b01      	subs	r3, #1
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	b21a      	sxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	b21a      	sxth	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800fd2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800fd52:	2300      	movs	r3, #0
 800fd54:	73fb      	strb	r3, [r7, #15]
 800fd56:	e010      	b.n	800fd7a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800fd58:	7bfb      	ldrb	r3, [r7, #15]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	330a      	adds	r3, #10
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	4413      	add	r3, r2
 800fd62:	2200      	movs	r2, #0
 800fd64:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	330a      	adds	r3, #10
 800fd6c:	00db      	lsls	r3, r3, #3
 800fd6e:	4413      	add	r3, r2
 800fd70:	2200      	movs	r2, #0
 800fd72:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	3301      	adds	r3, #1
 800fd78:	73fb      	strb	r3, [r7, #15]
 800fd7a:	7bfb      	ldrb	r3, [r7, #15]
 800fd7c:	2b03      	cmp	r3, #3
 800fd7e:	d9eb      	bls.n	800fd58 <UG_Init+0xf4>
   }

   gui = g;
 800fd80:	4a04      	ldr	r2, [pc, #16]	; (800fd94 <UG_Init+0x130>)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6013      	str	r3, [r2, #0]
   return 1;
 800fd86:	2301      	movs	r3, #1
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3714      	adds	r7, #20
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd92:	4770      	bx	lr
 800fd94:	20001b08 	.word	0x20001b08

0800fd98 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800fda0:	4b04      	ldr	r3, [pc, #16]	; (800fdb4 <UG_FontSelect+0x1c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr
 800fdb4:	20001b08 	.word	0x20001b08

0800fdb8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af02      	add	r7, sp, #8
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800fdc2:	4b0e      	ldr	r3, [pc, #56]	; (800fdfc <UG_FillScreen+0x44>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	b21a      	sxth	r2, r3
 800fdd4:	4b09      	ldr	r3, [pc, #36]	; (800fdfc <UG_FillScreen+0x44>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	3b01      	subs	r3, #1
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	b219      	sxth	r1, r3
 800fde6:	88fb      	ldrh	r3, [r7, #6]
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	460b      	mov	r3, r1
 800fdec:	2100      	movs	r1, #0
 800fdee:	2000      	movs	r0, #0
 800fdf0:	f000 f806 	bl	800fe00 <UG_FillFrame>
}
 800fdf4:	bf00      	nop
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	20001b08 	.word	0x20001b08

0800fe00 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fe00:	b5b0      	push	{r4, r5, r7, lr}
 800fe02:	b086      	sub	sp, #24
 800fe04:	af02      	add	r7, sp, #8
 800fe06:	4604      	mov	r4, r0
 800fe08:	4608      	mov	r0, r1
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4623      	mov	r3, r4
 800fe10:	80fb      	strh	r3, [r7, #6]
 800fe12:	4603      	mov	r3, r0
 800fe14:	80bb      	strh	r3, [r7, #4]
 800fe16:	460b      	mov	r3, r1
 800fe18:	807b      	strh	r3, [r7, #2]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800fe1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fe22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	da05      	bge.n	800fe36 <UG_FillFrame+0x36>
     swap(x1,x2);
 800fe2a:	88fb      	ldrh	r3, [r7, #6]
 800fe2c:	817b      	strh	r3, [r7, #10]
 800fe2e:	887b      	ldrh	r3, [r7, #2]
 800fe30:	80fb      	strh	r3, [r7, #6]
 800fe32:	897b      	ldrh	r3, [r7, #10]
 800fe34:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800fe36:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fe3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	da05      	bge.n	800fe4e <UG_FillFrame+0x4e>
     swap(y1,y2);
 800fe42:	88bb      	ldrh	r3, [r7, #4]
 800fe44:	813b      	strh	r3, [r7, #8]
 800fe46:	883b      	ldrh	r3, [r7, #0]
 800fe48:	80bb      	strh	r3, [r7, #4]
 800fe4a:	893b      	ldrh	r3, [r7, #8]
 800fe4c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800fe4e:	4b24      	ldr	r3, [pc, #144]	; (800fee0 <UG_FillFrame+0xe0>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fe56:	f003 0302 	and.w	r3, r3, #2
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d012      	beq.n	800fe84 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fe5e:	4b20      	ldr	r3, [pc, #128]	; (800fee0 <UG_FillFrame+0xe0>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe64:	461d      	mov	r5, r3
 800fe66:	f9b7 4000 	ldrsh.w	r4, [r7]
 800fe6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fe6e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fe72:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800fe76:	8c3b      	ldrh	r3, [r7, #32]
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	4623      	mov	r3, r4
 800fe7c:	47a8      	blx	r5
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d028      	beq.n	800fed6 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800fe84:	88bb      	ldrh	r3, [r7, #4]
 800fe86:	81bb      	strh	r3, [r7, #12]
 800fe88:	e01e      	b.n	800fec8 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800fe8a:	88fb      	ldrh	r3, [r7, #6]
 800fe8c:	81fb      	strh	r3, [r7, #14]
 800fe8e:	e00f      	b.n	800feb0 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800fe90:	4b13      	ldr	r3, [pc, #76]	; (800fee0 <UG_FillFrame+0xe0>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	8c3a      	ldrh	r2, [r7, #32]
 800fe9a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800fe9e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800fea2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800fea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	3301      	adds	r3, #1
 800feac:	b29b      	uxth	r3, r3
 800feae:	81fb      	strh	r3, [r7, #14]
 800feb0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800feb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800feb8:	429a      	cmp	r2, r3
 800feba:	dde9      	ble.n	800fe90 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800febc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	3301      	adds	r3, #1
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	81bb      	strh	r3, [r7, #12]
 800fec8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fecc:	f9b7 3000 	ldrsh.w	r3, [r7]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	ddda      	ble.n	800fe8a <UG_FillFrame+0x8a>
 800fed4:	e000      	b.n	800fed8 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800fed6:	bf00      	nop
      }
   }
}
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bdb0      	pop	{r4, r5, r7, pc}
 800fede:	bf00      	nop
 800fee0:	20001b08 	.word	0x20001b08

0800fee4 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800fee4:	b590      	push	{r4, r7, lr}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af02      	add	r7, sp, #8
 800feea:	4604      	mov	r4, r0
 800feec:	4608      	mov	r0, r1
 800feee:	4611      	mov	r1, r2
 800fef0:	461a      	mov	r2, r3
 800fef2:	4623      	mov	r3, r4
 800fef4:	80fb      	strh	r3, [r7, #6]
 800fef6:	4603      	mov	r3, r0
 800fef8:	80bb      	strh	r3, [r7, #4]
 800fefa:	460b      	mov	r3, r1
 800fefc:	807b      	strh	r3, [r7, #2]
 800fefe:	4613      	mov	r3, r2
 800ff00:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800ff02:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800ff06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ff0a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ff0e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ff12:	8b3b      	ldrh	r3, [r7, #24]
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	4623      	mov	r3, r4
 800ff18:	f000 f912 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800ff1c:	f9b7 4000 	ldrsh.w	r4, [r7]
 800ff20:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ff24:	f9b7 1000 	ldrsh.w	r1, [r7]
 800ff28:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ff2c:	8b3b      	ldrh	r3, [r7, #24]
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	4623      	mov	r3, r4
 800ff32:	f000 f905 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800ff36:	f9b7 4000 	ldrsh.w	r4, [r7]
 800ff3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ff3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ff42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ff46:	8b3b      	ldrh	r3, [r7, #24]
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	4623      	mov	r3, r4
 800ff4c:	f000 f8f8 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800ff50:	f9b7 4000 	ldrsh.w	r4, [r7]
 800ff54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ff58:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ff5c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800ff60:	8b3b      	ldrh	r3, [r7, #24]
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	4623      	mov	r3, r4
 800ff66:	f000 f8eb 	bl	8010140 <UG_DrawLine>
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd90      	pop	{r4, r7, pc}
	...

0800ff74 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	4611      	mov	r1, r2
 800ff80:	461a      	mov	r2, r3
 800ff82:	4623      	mov	r3, r4
 800ff84:	80fb      	strh	r3, [r7, #6]
 800ff86:	4603      	mov	r3, r0
 800ff88:	80bb      	strh	r3, [r7, #4]
 800ff8a:	460b      	mov	r3, r1
 800ff8c:	807b      	strh	r3, [r7, #2]
 800ff8e:	4613      	mov	r3, r2
 800ff90:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800ff92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f2c0 80c8 	blt.w	801012c <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800ff9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f2c0 80c5 	blt.w	8010130 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800ffa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f340 80c2 	ble.w	8010134 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800ffb0:	887b      	ldrh	r3, [r7, #2]
 800ffb2:	005b      	lsls	r3, r3, #1
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	f1c3 0301 	rsb	r3, r3, #1
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	823b      	strh	r3, [r7, #16]
   e = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	81fb      	strh	r3, [r7, #14]
   x = r;
 800ffc6:	887b      	ldrh	r3, [r7, #2]
 800ffc8:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800ffce:	e0a5      	b.n	801011c <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800ffd0:	4b5a      	ldr	r3, [pc, #360]	; (801013c <UG_DrawCircle+0x1c8>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	88f9      	ldrh	r1, [r7, #6]
 800ffda:	8afa      	ldrh	r2, [r7, #22]
 800ffdc:	1a8a      	subs	r2, r1, r2
 800ffde:	b292      	uxth	r2, r2
 800ffe0:	b210      	sxth	r0, r2
 800ffe2:	88b9      	ldrh	r1, [r7, #4]
 800ffe4:	8aba      	ldrh	r2, [r7, #20]
 800ffe6:	440a      	add	r2, r1
 800ffe8:	b292      	uxth	r2, r2
 800ffea:	b211      	sxth	r1, r2
 800ffec:	883a      	ldrh	r2, [r7, #0]
 800ffee:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800fff0:	4b52      	ldr	r3, [pc, #328]	; (801013c <UG_DrawCircle+0x1c8>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	88f9      	ldrh	r1, [r7, #6]
 800fffa:	8afa      	ldrh	r2, [r7, #22]
 800fffc:	1a8a      	subs	r2, r1, r2
 800fffe:	b292      	uxth	r2, r2
 8010000:	b210      	sxth	r0, r2
 8010002:	88b9      	ldrh	r1, [r7, #4]
 8010004:	8aba      	ldrh	r2, [r7, #20]
 8010006:	1a8a      	subs	r2, r1, r2
 8010008:	b292      	uxth	r2, r2
 801000a:	b211      	sxth	r1, r2
 801000c:	883a      	ldrh	r2, [r7, #0]
 801000e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8010010:	4b4a      	ldr	r3, [pc, #296]	; (801013c <UG_DrawCircle+0x1c8>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	88f9      	ldrh	r1, [r7, #6]
 801001a:	8afa      	ldrh	r2, [r7, #22]
 801001c:	440a      	add	r2, r1
 801001e:	b292      	uxth	r2, r2
 8010020:	b210      	sxth	r0, r2
 8010022:	88b9      	ldrh	r1, [r7, #4]
 8010024:	8aba      	ldrh	r2, [r7, #20]
 8010026:	440a      	add	r2, r1
 8010028:	b292      	uxth	r2, r2
 801002a:	b211      	sxth	r1, r2
 801002c:	883a      	ldrh	r2, [r7, #0]
 801002e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8010030:	4b42      	ldr	r3, [pc, #264]	; (801013c <UG_DrawCircle+0x1c8>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	88f9      	ldrh	r1, [r7, #6]
 801003a:	8afa      	ldrh	r2, [r7, #22]
 801003c:	440a      	add	r2, r1
 801003e:	b292      	uxth	r2, r2
 8010040:	b210      	sxth	r0, r2
 8010042:	88b9      	ldrh	r1, [r7, #4]
 8010044:	8aba      	ldrh	r2, [r7, #20]
 8010046:	1a8a      	subs	r2, r1, r2
 8010048:	b292      	uxth	r2, r2
 801004a:	b211      	sxth	r1, r2
 801004c:	883a      	ldrh	r2, [r7, #0]
 801004e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8010050:	4b3a      	ldr	r3, [pc, #232]	; (801013c <UG_DrawCircle+0x1c8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	88f9      	ldrh	r1, [r7, #6]
 801005a:	8aba      	ldrh	r2, [r7, #20]
 801005c:	1a8a      	subs	r2, r1, r2
 801005e:	b292      	uxth	r2, r2
 8010060:	b210      	sxth	r0, r2
 8010062:	88b9      	ldrh	r1, [r7, #4]
 8010064:	8afa      	ldrh	r2, [r7, #22]
 8010066:	440a      	add	r2, r1
 8010068:	b292      	uxth	r2, r2
 801006a:	b211      	sxth	r1, r2
 801006c:	883a      	ldrh	r2, [r7, #0]
 801006e:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8010070:	4b32      	ldr	r3, [pc, #200]	; (801013c <UG_DrawCircle+0x1c8>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	88f9      	ldrh	r1, [r7, #6]
 801007a:	8aba      	ldrh	r2, [r7, #20]
 801007c:	1a8a      	subs	r2, r1, r2
 801007e:	b292      	uxth	r2, r2
 8010080:	b210      	sxth	r0, r2
 8010082:	88b9      	ldrh	r1, [r7, #4]
 8010084:	8afa      	ldrh	r2, [r7, #22]
 8010086:	1a8a      	subs	r2, r1, r2
 8010088:	b292      	uxth	r2, r2
 801008a:	b211      	sxth	r1, r2
 801008c:	883a      	ldrh	r2, [r7, #0]
 801008e:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8010090:	4b2a      	ldr	r3, [pc, #168]	; (801013c <UG_DrawCircle+0x1c8>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	88f9      	ldrh	r1, [r7, #6]
 801009a:	8aba      	ldrh	r2, [r7, #20]
 801009c:	440a      	add	r2, r1
 801009e:	b292      	uxth	r2, r2
 80100a0:	b210      	sxth	r0, r2
 80100a2:	88b9      	ldrh	r1, [r7, #4]
 80100a4:	8afa      	ldrh	r2, [r7, #22]
 80100a6:	440a      	add	r2, r1
 80100a8:	b292      	uxth	r2, r2
 80100aa:	b211      	sxth	r1, r2
 80100ac:	883a      	ldrh	r2, [r7, #0]
 80100ae:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 80100b0:	4b22      	ldr	r3, [pc, #136]	; (801013c <UG_DrawCircle+0x1c8>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	88f9      	ldrh	r1, [r7, #6]
 80100ba:	8aba      	ldrh	r2, [r7, #20]
 80100bc:	440a      	add	r2, r1
 80100be:	b292      	uxth	r2, r2
 80100c0:	b210      	sxth	r0, r2
 80100c2:	88b9      	ldrh	r1, [r7, #4]
 80100c4:	8afa      	ldrh	r2, [r7, #22]
 80100c6:	1a8a      	subs	r2, r1, r2
 80100c8:	b292      	uxth	r2, r2
 80100ca:	b211      	sxth	r1, r2
 80100cc:	883a      	ldrh	r2, [r7, #0]
 80100ce:	4798      	blx	r3

      y++;
 80100d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	3301      	adds	r3, #1
 80100d8:	b29b      	uxth	r3, r3
 80100da:	82bb      	strh	r3, [r7, #20]
      e += yd;
 80100dc:	89fa      	ldrh	r2, [r7, #14]
 80100de:	8a3b      	ldrh	r3, [r7, #16]
 80100e0:	4413      	add	r3, r2
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 80100e6:	8a3b      	ldrh	r3, [r7, #16]
 80100e8:	3302      	adds	r3, #2
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 80100ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80100f2:	005a      	lsls	r2, r3, #1
 80100f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80100f8:	4413      	add	r3, r2
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	dd0e      	ble.n	801011c <UG_DrawCircle+0x1a8>
      {
         x--;
 80100fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010102:	b29b      	uxth	r3, r3
 8010104:	3b01      	subs	r3, #1
 8010106:	b29b      	uxth	r3, r3
 8010108:	82fb      	strh	r3, [r7, #22]
         e += xd;
 801010a:	89fa      	ldrh	r2, [r7, #14]
 801010c:	8a7b      	ldrh	r3, [r7, #18]
 801010e:	4413      	add	r3, r2
 8010110:	b29b      	uxth	r3, r3
 8010112:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8010114:	8a7b      	ldrh	r3, [r7, #18]
 8010116:	3302      	adds	r3, #2
 8010118:	b29b      	uxth	r3, r3
 801011a:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 801011c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010120:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010124:	429a      	cmp	r2, r3
 8010126:	f6bf af53 	bge.w	800ffd0 <UG_DrawCircle+0x5c>
 801012a:	e004      	b.n	8010136 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 801012c:	bf00      	nop
 801012e:	e002      	b.n	8010136 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8010130:	bf00      	nop
 8010132:	e000      	b.n	8010136 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8010134:	bf00      	nop
      }
   }
}
 8010136:	371c      	adds	r7, #28
 8010138:	46bd      	mov	sp, r7
 801013a:	bd90      	pop	{r4, r7, pc}
 801013c:	20001b08 	.word	0x20001b08

08010140 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8010140:	b5b0      	push	{r4, r5, r7, lr}
 8010142:	b08a      	sub	sp, #40	; 0x28
 8010144:	af02      	add	r7, sp, #8
 8010146:	4604      	mov	r4, r0
 8010148:	4608      	mov	r0, r1
 801014a:	4611      	mov	r1, r2
 801014c:	461a      	mov	r2, r3
 801014e:	4623      	mov	r3, r4
 8010150:	80fb      	strh	r3, [r7, #6]
 8010152:	4603      	mov	r3, r0
 8010154:	80bb      	strh	r3, [r7, #4]
 8010156:	460b      	mov	r3, r1
 8010158:	807b      	strh	r3, [r7, #2]
 801015a:	4613      	mov	r3, r2
 801015c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 801015e:	4b67      	ldr	r3, [pc, #412]	; (80102fc <UG_DrawLine+0x1bc>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010166:	f003 0302 	and.w	r3, r3, #2
 801016a:	2b00      	cmp	r3, #0
 801016c:	d013      	beq.n	8010196 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801016e:	4b63      	ldr	r3, [pc, #396]	; (80102fc <UG_DrawLine+0x1bc>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010174:	461d      	mov	r5, r3
 8010176:	f9b7 4000 	ldrsh.w	r4, [r7]
 801017a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801017e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010182:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010186:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	4623      	mov	r3, r4
 801018c:	47a8      	blx	r5
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	f000 80ae 	beq.w	80102f2 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8010196:	887a      	ldrh	r2, [r7, #2]
 8010198:	88fb      	ldrh	r3, [r7, #6]
 801019a:	1ad3      	subs	r3, r2, r3
 801019c:	b29b      	uxth	r3, r3
 801019e:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80101a0:	883a      	ldrh	r2, [r7, #0]
 80101a2:	88bb      	ldrh	r3, [r7, #4]
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80101aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	bfb8      	it	lt
 80101b2:	425b      	neglt	r3, r3
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80101b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bfb8      	it	lt
 80101c0:	425b      	neglt	r3, r3
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80101c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	dd01      	ble.n	80101d2 <UG_DrawLine+0x92>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e001      	b.n	80101d6 <UG_DrawLine+0x96>
 80101d2:	f04f 33ff 	mov.w	r3, #4294967295
 80101d6:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80101d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dd01      	ble.n	80101e4 <UG_DrawLine+0xa4>
 80101e0:	2301      	movs	r3, #1
 80101e2:	e001      	b.n	80101e8 <UG_DrawLine+0xa8>
 80101e4:	f04f 33ff 	mov.w	r3, #4294967295
 80101e8:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80101ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80101ee:	105b      	asrs	r3, r3, #1
 80101f0:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80101f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80101f6:	105b      	asrs	r3, r3, #1
 80101f8:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80101fa:	88fb      	ldrh	r3, [r7, #6]
 80101fc:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 80101fe:	88bb      	ldrh	r3, [r7, #4]
 8010200:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8010202:	4b3e      	ldr	r3, [pc, #248]	; (80102fc <UG_DrawLine+0x1bc>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801020c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8010210:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8010214:	4798      	blx	r3

   if( dxabs >= dyabs )
 8010216:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801021a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801021e:	429a      	cmp	r2, r3
 8010220:	db33      	blt.n	801028a <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8010222:	2300      	movs	r3, #0
 8010224:	83fb      	strh	r3, [r7, #30]
 8010226:	e029      	b.n	801027c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8010228:	8b7a      	ldrh	r2, [r7, #26]
 801022a:	89fb      	ldrh	r3, [r7, #14]
 801022c:	4413      	add	r3, r2
 801022e:	b29b      	uxth	r3, r3
 8010230:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8010232:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010236:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801023a:	429a      	cmp	r2, r3
 801023c:	db09      	blt.n	8010252 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 801023e:	8b7a      	ldrh	r2, [r7, #26]
 8010240:	8a3b      	ldrh	r3, [r7, #16]
 8010242:	1ad3      	subs	r3, r2, r3
 8010244:	b29b      	uxth	r3, r3
 8010246:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8010248:	8afa      	ldrh	r2, [r7, #22]
 801024a:	897b      	ldrh	r3, [r7, #10]
 801024c:	4413      	add	r3, r2
 801024e:	b29b      	uxth	r3, r3
 8010250:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8010252:	8b3a      	ldrh	r2, [r7, #24]
 8010254:	89bb      	ldrh	r3, [r7, #12]
 8010256:	4413      	add	r3, r2
 8010258:	b29b      	uxth	r3, r3
 801025a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 801025c:	4b27      	ldr	r3, [pc, #156]	; (80102fc <UG_DrawLine+0x1bc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8010266:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801026a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801026e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8010270:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010274:	b29b      	uxth	r3, r3
 8010276:	3301      	adds	r3, #1
 8010278:	b29b      	uxth	r3, r3
 801027a:	83fb      	strh	r3, [r7, #30]
 801027c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010280:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8010284:	429a      	cmp	r2, r3
 8010286:	dbcf      	blt.n	8010228 <UG_DrawLine+0xe8>
 8010288:	e034      	b.n	80102f4 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 801028a:	2300      	movs	r3, #0
 801028c:	83fb      	strh	r3, [r7, #30]
 801028e:	e029      	b.n	80102e4 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8010290:	8bba      	ldrh	r2, [r7, #28]
 8010292:	8a3b      	ldrh	r3, [r7, #16]
 8010294:	4413      	add	r3, r2
 8010296:	b29b      	uxth	r3, r3
 8010298:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 801029a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801029e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	db09      	blt.n	80102ba <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80102a6:	8bba      	ldrh	r2, [r7, #28]
 80102a8:	89fb      	ldrh	r3, [r7, #14]
 80102aa:	1ad3      	subs	r3, r2, r3
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80102b0:	8b3a      	ldrh	r2, [r7, #24]
 80102b2:	89bb      	ldrh	r3, [r7, #12]
 80102b4:	4413      	add	r3, r2
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80102ba:	8afa      	ldrh	r2, [r7, #22]
 80102bc:	897b      	ldrh	r3, [r7, #10]
 80102be:	4413      	add	r3, r2
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 80102c4:	4b0d      	ldr	r3, [pc, #52]	; (80102fc <UG_DrawLine+0x1bc>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80102ce:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80102d2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80102d6:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80102d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	3301      	adds	r3, #1
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	83fb      	strh	r3, [r7, #30]
 80102e4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80102e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	dbcf      	blt.n	8010290 <UG_DrawLine+0x150>
 80102f0:	e000      	b.n	80102f4 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80102f2:	bf00      	nop
      }
   }  
}
 80102f4:	3720      	adds	r7, #32
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bdb0      	pop	{r4, r5, r7, pc}
 80102fa:	bf00      	nop
 80102fc:	20001b08 	.word	0x20001b08

08010300 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8010300:	b590      	push	{r4, r7, lr}
 8010302:	b087      	sub	sp, #28
 8010304:	af02      	add	r7, sp, #8
 8010306:	4603      	mov	r3, r0
 8010308:	603a      	str	r2, [r7, #0]
 801030a:	80fb      	strh	r3, [r7, #6]
 801030c:	460b      	mov	r3, r1
 801030e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8010310:	88fb      	ldrh	r3, [r7, #6]
 8010312:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8010314:	88bb      	ldrh	r3, [r7, #4]
 8010316:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8010318:	4b44      	ldr	r3, [pc, #272]	; (801042c <UG_PutString+0x12c>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801031e:	4618      	mov	r0, r3
 8010320:	f000 fa96 	bl	8010850 <_UG_FontSelect>
   while ( *str != 0 )
 8010324:	e064      	b.n	80103f0 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010326:	4b41      	ldr	r3, [pc, #260]	; (801042c <UG_PutString+0x12c>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8010332:	463b      	mov	r3, r7
 8010334:	4618      	mov	r0, r3
 8010336:	f000 f8c7 	bl	80104c8 <_UG_DecodeUTF8>
 801033a:	4603      	mov	r3, r0
 801033c:	817b      	strh	r3, [r7, #10]
 801033e:	e004      	b.n	801034a <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	1c5a      	adds	r2, r3, #1
 8010344:	603a      	str	r2, [r7, #0]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 801034a:	897b      	ldrh	r3, [r7, #10]
 801034c:	2b0a      	cmp	r3, #10
 801034e:	d105      	bne.n	801035c <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8010350:	4b36      	ldr	r3, [pc, #216]	; (801042c <UG_PutString+0x12c>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	81fb      	strh	r3, [r7, #14]
         continue;
 801035a:	e049      	b.n	80103f0 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 801035c:	897b      	ldrh	r3, [r7, #10]
 801035e:	2100      	movs	r1, #0
 8010360:	4618      	mov	r0, r3
 8010362:	f000 f929 	bl	80105b8 <_UG_GetCharData>
 8010366:	4603      	mov	r3, r0
 8010368:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 801036a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801036e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010372:	d100      	bne.n	8010376 <UG_PutString+0x76>
 8010374:	e03c      	b.n	80103f0 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8010376:	4b2d      	ldr	r3, [pc, #180]	; (801042c <UG_PutString+0x12c>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010380:	4619      	mov	r1, r3
 8010382:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010386:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801038a:	4413      	add	r3, r2
 801038c:	4299      	cmp	r1, r3
 801038e:	dc12      	bgt.n	80103b6 <UG_PutString+0xb6>
      {
         xp = x;
 8010390:	88fb      	ldrh	r3, [r7, #6]
 8010392:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8010394:	4b25      	ldr	r3, [pc, #148]	; (801042c <UG_PutString+0x12c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801039c:	b21a      	sxth	r2, r3
 801039e:	4b23      	ldr	r3, [pc, #140]	; (801042c <UG_PutString+0x12c>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80103a6:	b21b      	sxth	r3, r3
 80103a8:	4413      	add	r3, r2
 80103aa:	b21b      	sxth	r3, r3
 80103ac:	b29a      	uxth	r2, r3
 80103ae:	89bb      	ldrh	r3, [r7, #12]
 80103b0:	4413      	add	r3, r2
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80103b6:	4b1d      	ldr	r3, [pc, #116]	; (801042c <UG_PutString+0x12c>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 80103be:	4b1b      	ldr	r3, [pc, #108]	; (801042c <UG_PutString+0x12c>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80103c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80103ca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80103ce:	8978      	ldrh	r0, [r7, #10]
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4623      	mov	r3, r4
 80103d4:	f000 fabe 	bl	8010954 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80103d8:	4b14      	ldr	r3, [pc, #80]	; (801042c <UG_PutString+0x12c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	893b      	ldrh	r3, [r7, #8]
 80103e4:	4413      	add	r3, r2
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	89fb      	ldrh	r3, [r7, #14]
 80103ea:	4413      	add	r3, r2
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d196      	bne.n	8010326 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <UG_PutString+0x12c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010400:	f003 0302 	and.w	r3, r3, #2
 8010404:	2b00      	cmp	r3, #0
 8010406:	d00c      	beq.n	8010422 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8010408:	4b08      	ldr	r3, [pc, #32]	; (801042c <UG_PutString+0x12c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801040e:	461c      	mov	r4, r3
 8010410:	f04f 33ff 	mov.w	r3, #4294967295
 8010414:	f04f 32ff 	mov.w	r2, #4294967295
 8010418:	f04f 31ff 	mov.w	r1, #4294967295
 801041c:	f04f 30ff 	mov.w	r0, #4294967295
 8010420:	47a0      	blx	r4
}
 8010422:	bf00      	nop
 8010424:	3714      	adds	r7, #20
 8010426:	46bd      	mov	sp, r7
 8010428:	bd90      	pop	{r4, r7, pc}
 801042a:	bf00      	nop
 801042c:	20001b08 	.word	0x20001b08

08010430 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	4603      	mov	r3, r0
 8010438:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <UG_SetForecolor+0x20>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	88fa      	ldrh	r2, [r7, #6]
 8010440:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr
 8010450:	20001b08 	.word	0x20001b08

08010454 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8010454:	b480      	push	{r7}
 8010456:	b083      	sub	sp, #12
 8010458:	af00      	add	r7, sp, #0
 801045a:	4603      	mov	r3, r0
 801045c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 801045e:	4b05      	ldr	r3, [pc, #20]	; (8010474 <UG_SetBackcolor+0x20>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	88fa      	ldrh	r2, [r7, #6]
 8010464:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8010468:	bf00      	nop
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	20001b08 	.word	0x20001b08

08010478 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8010482:	4b06      	ldr	r3, [pc, #24]	; (801049c <UG_FontSetHSpace+0x24>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	88fa      	ldrh	r2, [r7, #6]
 8010488:	b252      	sxtb	r2, r2
 801048a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 801048e:	bf00      	nop
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	20001b08 	.word	0x20001b08

080104a0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80104aa:	4b06      	ldr	r3, [pc, #24]	; (80104c4 <UG_FontSetVSpace+0x24>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	88fa      	ldrh	r2, [r7, #6]
 80104b0:	b252      	sxtb	r2, r2
 80104b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80104b6:	bf00      	nop
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	20001b08 	.word	0x20001b08

080104c8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]

  char c=**str;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80104d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	db07      	blt.n	80104f0 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	1c5a      	adds	r2, r3, #1
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	601a      	str	r2, [r3, #0]
    return c;
 80104ea:	7bfb      	ldrb	r3, [r7, #15]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	e05c      	b.n	80105aa <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	81bb      	strh	r3, [r7, #12]

  while(**str)
 80104f8:	e04f      	b.n	801059a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	1c5a      	adds	r2, r3, #1
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 801050c:	7bbb      	ldrb	r3, [r7, #14]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d130      	bne.n	8010574 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8010512:	7bfb      	ldrb	r3, [r7, #15]
 8010514:	2bdf      	cmp	r3, #223	; 0xdf
 8010516:	d806      	bhi.n	8010526 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8010518:	2301      	movs	r3, #1
 801051a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	f003 031f 	and.w	r3, r3, #31
 8010522:	73fb      	strb	r3, [r7, #15]
 8010524:	e023      	b.n	801056e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	2bef      	cmp	r3, #239	; 0xef
 801052a:	d806      	bhi.n	801053a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 801052c:	2302      	movs	r3, #2
 801052e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8010530:	7bfb      	ldrb	r3, [r7, #15]
 8010532:	f003 030f 	and.w	r3, r3, #15
 8010536:	73fb      	strb	r3, [r7, #15]
 8010538:	e019      	b.n	801056e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 801053a:	7bfb      	ldrb	r3, [r7, #15]
 801053c:	2bf7      	cmp	r3, #247	; 0xf7
 801053e:	d806      	bhi.n	801054e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8010540:	2303      	movs	r3, #3
 8010542:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	f003 0307 	and.w	r3, r3, #7
 801054a:	73fb      	strb	r3, [r7, #15]
 801054c:	e00f      	b.n	801056e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 801054e:	7bfb      	ldrb	r3, [r7, #15]
 8010550:	2bfb      	cmp	r3, #251	; 0xfb
 8010552:	d806      	bhi.n	8010562 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8010554:	2304      	movs	r3, #4
 8010556:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	f003 0303 	and.w	r3, r3, #3
 801055e:	73fb      	strb	r3, [r7, #15]
 8010560:	e005      	b.n	801056e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8010562:	2305      	movs	r3, #5
 8010564:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8010566:	7bfb      	ldrb	r3, [r7, #15]
 8010568:	f003 0301 	and.w	r3, r3, #1
 801056c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 801056e:	7bfb      	ldrb	r3, [r7, #15]
 8010570:	81bb      	strh	r3, [r7, #12]
 8010572:	e012      	b.n	801059a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8010574:	89bb      	ldrh	r3, [r7, #12]
 8010576:	019b      	lsls	r3, r3, #6
 8010578:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	b21b      	sxth	r3, r3
 801057e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010582:	b21a      	sxth	r2, r3
 8010584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010588:	4313      	orrs	r3, r2
 801058a:	b21b      	sxth	r3, r3
 801058c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 801058e:	7bbb      	ldrb	r3, [r7, #14]
 8010590:	3b01      	subs	r3, #1
 8010592:	73bb      	strb	r3, [r7, #14]
 8010594:	7bbb      	ldrb	r3, [r7, #14]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d005      	beq.n	80105a6 <_UG_DecodeUTF8+0xde>
  while(**str)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1aa      	bne.n	80104fa <_UG_DecodeUTF8+0x32>
 80105a4:	e000      	b.n	80105a8 <_UG_DecodeUTF8+0xe0>
        break;
 80105a6:	bf00      	nop
    }
  }
  return encoding;
 80105a8:	89bb      	ldrh	r3, [r7, #12]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
	...

080105b8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b086      	sub	sp, #24
 80105bc:	af00      	add	r7, sp, #0
 80105be:	4603      	mov	r3, r0
 80105c0:	6039      	str	r1, [r7, #0]
 80105c2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80105cc:	2300      	movs	r3, #0
 80105ce:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80105d4:	2300      	movs	r3, #0
 80105d6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80105d8:	4b98      	ldr	r3, [pc, #608]	; (801083c <_UG_GetCharData+0x284>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105de:	4b98      	ldr	r3, [pc, #608]	; (8010840 <_UG_GetCharData+0x288>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	d10f      	bne.n	8010606 <_UG_GetCharData+0x4e>
 80105e6:	4b97      	ldr	r3, [pc, #604]	; (8010844 <_UG_GetCharData+0x28c>)
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	88fa      	ldrh	r2, [r7, #6]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d10a      	bne.n	8010606 <_UG_GetCharData+0x4e>
    if(p){
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d003      	beq.n	80105fe <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80105f6:	4b94      	ldr	r3, [pc, #592]	; (8010848 <_UG_GetCharData+0x290>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80105fe:	4b93      	ldr	r3, [pc, #588]	; (801084c <_UG_GetCharData+0x294>)
 8010600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010604:	e116      	b.n	8010834 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8010606:	4b8d      	ldr	r3, [pc, #564]	; (801083c <_UG_GetCharData+0x284>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 80cc 	beq.w	80107ac <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8010614:	88fb      	ldrh	r3, [r7, #6]
 8010616:	2bfc      	cmp	r3, #252	; 0xfc
 8010618:	f300 80c8 	bgt.w	80107ac <_UG_GetCharData+0x1f4>
 801061c:	2bd6      	cmp	r3, #214	; 0xd6
 801061e:	da09      	bge.n	8010634 <_UG_GetCharData+0x7c>
 8010620:	2bc4      	cmp	r3, #196	; 0xc4
 8010622:	d06c      	beq.n	80106fe <_UG_GetCharData+0x146>
 8010624:	2bc4      	cmp	r3, #196	; 0xc4
 8010626:	f300 80c1 	bgt.w	80107ac <_UG_GetCharData+0x1f4>
 801062a:	2bb0      	cmp	r3, #176	; 0xb0
 801062c:	d06d      	beq.n	801070a <_UG_GetCharData+0x152>
 801062e:	2bb5      	cmp	r3, #181	; 0xb5
 8010630:	d068      	beq.n	8010704 <_UG_GetCharData+0x14c>
 8010632:	e06e      	b.n	8010712 <_UG_GetCharData+0x15a>
 8010634:	3bd6      	subs	r3, #214	; 0xd6
 8010636:	2b26      	cmp	r3, #38	; 0x26
 8010638:	f200 80b8 	bhi.w	80107ac <_UG_GetCharData+0x1f4>
 801063c:	a201      	add	r2, pc, #4	; (adr r2, 8010644 <_UG_GetCharData+0x8c>)
 801063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010642:	bf00      	nop
 8010644:	080106e7 	.word	0x080106e7
 8010648:	080107ad 	.word	0x080107ad
 801064c:	080107ad 	.word	0x080107ad
 8010650:	080107ad 	.word	0x080107ad
 8010654:	080107ad 	.word	0x080107ad
 8010658:	080107ad 	.word	0x080107ad
 801065c:	080106f3 	.word	0x080106f3
 8010660:	080107ad 	.word	0x080107ad
 8010664:	080107ad 	.word	0x080107ad
 8010668:	080107ad 	.word	0x080107ad
 801066c:	080107ad 	.word	0x080107ad
 8010670:	080107ad 	.word	0x080107ad
 8010674:	080107ad 	.word	0x080107ad
 8010678:	080107ad 	.word	0x080107ad
 801067c:	080106f9 	.word	0x080106f9
 8010680:	080107ad 	.word	0x080107ad
 8010684:	080107ad 	.word	0x080107ad
 8010688:	080107ad 	.word	0x080107ad
 801068c:	080107ad 	.word	0x080107ad
 8010690:	080107ad 	.word	0x080107ad
 8010694:	080107ad 	.word	0x080107ad
 8010698:	080107ad 	.word	0x080107ad
 801069c:	080107ad 	.word	0x080107ad
 80106a0:	080107ad 	.word	0x080107ad
 80106a4:	080107ad 	.word	0x080107ad
 80106a8:	080107ad 	.word	0x080107ad
 80106ac:	080107ad 	.word	0x080107ad
 80106b0:	080107ad 	.word	0x080107ad
 80106b4:	080107ad 	.word	0x080107ad
 80106b8:	080107ad 	.word	0x080107ad
 80106bc:	080107ad 	.word	0x080107ad
 80106c0:	080107ad 	.word	0x080107ad
 80106c4:	080106e1 	.word	0x080106e1
 80106c8:	080107ad 	.word	0x080107ad
 80106cc:	080107ad 	.word	0x080107ad
 80106d0:	080107ad 	.word	0x080107ad
 80106d4:	080107ad 	.word	0x080107ad
 80106d8:	080107ad 	.word	0x080107ad
 80106dc:	080106ed 	.word	0x080106ed
    {
       case 0xF6: encoding = 0x94; break; // ö
 80106e0:	2394      	movs	r3, #148	; 0x94
 80106e2:	80fb      	strh	r3, [r7, #6]
 80106e4:	e015      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80106e6:	2399      	movs	r3, #153	; 0x99
 80106e8:	80fb      	strh	r3, [r7, #6]
 80106ea:	e012      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80106ec:	2381      	movs	r3, #129	; 0x81
 80106ee:	80fb      	strh	r3, [r7, #6]
 80106f0:	e00f      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80106f2:	239a      	movs	r3, #154	; 0x9a
 80106f4:	80fb      	strh	r3, [r7, #6]
 80106f6:	e00c      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80106f8:	2384      	movs	r3, #132	; 0x84
 80106fa:	80fb      	strh	r3, [r7, #6]
 80106fc:	e009      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80106fe:	238e      	movs	r3, #142	; 0x8e
 8010700:	80fb      	strh	r3, [r7, #6]
 8010702:	e006      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8010704:	23e6      	movs	r3, #230	; 0xe6
 8010706:	80fb      	strh	r3, [r7, #6]
 8010708:	e003      	b.n	8010712 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 801070a:	23f8      	movs	r3, #248	; 0xf8
 801070c:	80fb      	strh	r3, [r7, #6]
 801070e:	bf00      	nop
 8010710:	e04c      	b.n	80107ac <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8010712:	e04b      	b.n	80107ac <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8010714:	4b49      	ldr	r3, [pc, #292]	; (801083c <_UG_GetCharData+0x284>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801071a:	8a7a      	ldrh	r2, [r7, #18]
 801071c:	0052      	lsls	r2, r2, #1
 801071e:	4413      	add	r3, r2
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff fa87 	bl	800fc34 <ptr_8to16>
 8010726:	4603      	mov	r3, r0
 8010728:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 801072a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801072e:	2b00      	cmp	r3, #0
 8010730:	da06      	bge.n	8010740 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8010732:	89fb      	ldrh	r3, [r7, #14]
 8010734:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010738:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 801073a:	2301      	movs	r3, #1
 801073c:	747b      	strb	r3, [r7, #17]
 801073e:	e032      	b.n	80107a6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8010740:	7c7b      	ldrb	r3, [r7, #17]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d021      	beq.n	801078a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8010746:	88fa      	ldrh	r2, [r7, #6]
 8010748:	8afb      	ldrh	r3, [r7, #22]
 801074a:	429a      	cmp	r2, r3
 801074c:	d30d      	bcc.n	801076a <_UG_GetCharData+0x1b2>
 801074e:	88fa      	ldrh	r2, [r7, #6]
 8010750:	89fb      	ldrh	r3, [r7, #14]
 8010752:	429a      	cmp	r2, r3
 8010754:	d809      	bhi.n	801076a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8010756:	88fa      	ldrh	r2, [r7, #6]
 8010758:	8afb      	ldrh	r3, [r7, #22]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	b29a      	uxth	r2, r3
 801075e:	8abb      	ldrh	r3, [r7, #20]
 8010760:	4413      	add	r3, r2
 8010762:	82bb      	strh	r3, [r7, #20]
        found=1;
 8010764:	2301      	movs	r3, #1
 8010766:	743b      	strb	r3, [r7, #16]
        break;
 8010768:	e02a      	b.n	80107c0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 801076a:	88fa      	ldrh	r2, [r7, #6]
 801076c:	8afb      	ldrh	r3, [r7, #22]
 801076e:	429a      	cmp	r2, r3
 8010770:	d323      	bcc.n	80107ba <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8010772:	89fa      	ldrh	r2, [r7, #14]
 8010774:	8afb      	ldrh	r3, [r7, #22]
 8010776:	1ad3      	subs	r3, r2, r3
 8010778:	b29a      	uxth	r2, r3
 801077a:	8abb      	ldrh	r3, [r7, #20]
 801077c:	4413      	add	r3, r2
 801077e:	b29b      	uxth	r3, r3
 8010780:	3301      	adds	r3, #1
 8010782:	82bb      	strh	r3, [r7, #20]
      range=0;
 8010784:	2300      	movs	r3, #0
 8010786:	747b      	strb	r3, [r7, #17]
 8010788:	e00d      	b.n	80107a6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 801078a:	88fa      	ldrh	r2, [r7, #6]
 801078c:	89fb      	ldrh	r3, [r7, #14]
 801078e:	429a      	cmp	r2, r3
 8010790:	d102      	bne.n	8010798 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8010792:	2301      	movs	r3, #1
 8010794:	743b      	strb	r3, [r7, #16]
        break;
 8010796:	e013      	b.n	80107c0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8010798:	88fa      	ldrh	r2, [r7, #6]
 801079a:	89fb      	ldrh	r3, [r7, #14]
 801079c:	429a      	cmp	r2, r3
 801079e:	d30e      	bcc.n	80107be <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80107a0:	8abb      	ldrh	r3, [r7, #20]
 80107a2:	3301      	adds	r3, #1
 80107a4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80107a6:	8a7b      	ldrh	r3, [r7, #18]
 80107a8:	3301      	adds	r3, #1
 80107aa:	827b      	strh	r3, [r7, #18]
 80107ac:	4b23      	ldr	r3, [pc, #140]	; (801083c <_UG_GetCharData+0x284>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80107b2:	8a7a      	ldrh	r2, [r7, #18]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d3ad      	bcc.n	8010714 <_UG_GetCharData+0x15c>
 80107b8:	e002      	b.n	80107c0 <_UG_GetCharData+0x208>
        break;
 80107ba:	bf00      	nop
 80107bc:	e000      	b.n	80107c0 <_UG_GetCharData+0x208>
        break;
 80107be:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80107c0:	7c3b      	ldrb	r3, [r7, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d034      	beq.n	8010830 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80107c6:	4b1d      	ldr	r3, [pc, #116]	; (801083c <_UG_GetCharData+0x284>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107cc:	4a1c      	ldr	r2, [pc, #112]	; (8010840 <_UG_GetCharData+0x288>)
 80107ce:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80107d0:	4a1c      	ldr	r2, [pc, #112]	; (8010844 <_UG_GetCharData+0x28c>)
 80107d2:	88fb      	ldrh	r3, [r7, #6]
 80107d4:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80107d6:	4b19      	ldr	r3, [pc, #100]	; (801083c <_UG_GetCharData+0x284>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107dc:	8aba      	ldrh	r2, [r7, #20]
 80107de:	4917      	ldr	r1, [pc, #92]	; (801083c <_UG_GetCharData+0x284>)
 80107e0:	6809      	ldr	r1, [r1, #0]
 80107e2:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80107e4:	fb01 f202 	mul.w	r2, r1, r2
 80107e8:	4413      	add	r3, r2
 80107ea:	4a17      	ldr	r2, [pc, #92]	; (8010848 <_UG_GetCharData+0x290>)
 80107ec:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80107ee:	4b13      	ldr	r3, [pc, #76]	; (801083c <_UG_GetCharData+0x284>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d009      	beq.n	801080c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80107f8:	4b10      	ldr	r3, [pc, #64]	; (801083c <_UG_GetCharData+0x284>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107fe:	8abb      	ldrh	r3, [r7, #20]
 8010800:	4413      	add	r3, r2
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	b21a      	sxth	r2, r3
 8010806:	4b11      	ldr	r3, [pc, #68]	; (801084c <_UG_GetCharData+0x294>)
 8010808:	801a      	strh	r2, [r3, #0]
 801080a:	e006      	b.n	801081a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 801080c:	4b0b      	ldr	r3, [pc, #44]	; (801083c <_UG_GetCharData+0x284>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010814:	b21a      	sxth	r2, r3
 8010816:	4b0d      	ldr	r3, [pc, #52]	; (801084c <_UG_GetCharData+0x294>)
 8010818:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8010820:	4b09      	ldr	r3, [pc, #36]	; (8010848 <_UG_GetCharData+0x290>)
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8010828:	4b08      	ldr	r3, [pc, #32]	; (801084c <_UG_GetCharData+0x294>)
 801082a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801082e:	e001      	b.n	8010834 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8010830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010834:	4618      	mov	r0, r3
 8010836:	3718      	adds	r7, #24
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	20001b08 	.word	0x20001b08
 8010840:	20001b0c 	.word	0x20001b0c
 8010844:	20001b10 	.word	0x20001b10
 8010848:	20001b14 	.word	0x20001b14
 801084c:	20001b18 	.word	0x20001b18

08010850 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8010850:	b590      	push	{r4, r7, lr}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8010858:	4b3d      	ldr	r3, [pc, #244]	; (8010950 <_UG_FontSelect+0x100>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d070      	beq.n	8010946 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8010864:	4b3a      	ldr	r3, [pc, #232]	; (8010950 <_UG_FontSelect+0x100>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	781a      	ldrb	r2, [r3, #0]
 8010870:	4b37      	ldr	r3, [pc, #220]	; (8010950 <_UG_FontSelect+0x100>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010878:	b2d2      	uxtb	r2, r2
 801087a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	b25b      	sxtb	r3, r3
 8010888:	2b00      	cmp	r3, #0
 801088a:	da01      	bge.n	8010890 <_UG_FontSelect+0x40>
 801088c:	2201      	movs	r2, #1
 801088e:	e000      	b.n	8010892 <_UG_FontSelect+0x42>
 8010890:	2200      	movs	r2, #0
 8010892:	4b2f      	ldr	r3, [pc, #188]	; (8010950 <_UG_FontSelect+0x100>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	b2d2      	uxtb	r2, r2
 8010898:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	607a      	str	r2, [r7, #4]
 80108a2:	4a2b      	ldr	r2, [pc, #172]	; (8010950 <_UG_FontSelect+0x100>)
 80108a4:	6812      	ldr	r2, [r2, #0]
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	607a      	str	r2, [r7, #4]
 80108b2:	4a27      	ldr	r2, [pc, #156]	; (8010950 <_UG_FontSelect+0x100>)
 80108b4:	6812      	ldr	r2, [r2, #0]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80108bc:	4b24      	ldr	r3, [pc, #144]	; (8010950 <_UG_FontSelect+0x100>)
 80108be:	681c      	ldr	r4, [r3, #0]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff f9b7 	bl	800fc34 <ptr_8to16>
 80108c6:	4603      	mov	r3, r0
 80108c8:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	3302      	adds	r3, #2
 80108ce:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80108d0:	4b1f      	ldr	r3, [pc, #124]	; (8010950 <_UG_FontSelect+0x100>)
 80108d2:	681c      	ldr	r4, [r3, #0]
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f7ff f9ad 	bl	800fc34 <ptr_8to16>
 80108da:	4603      	mov	r3, r0
 80108dc:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	3302      	adds	r3, #2
 80108e2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80108e4:	4b1a      	ldr	r3, [pc, #104]	; (8010950 <_UG_FontSelect+0x100>)
 80108e6:	681c      	ldr	r4, [r3, #0]
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff f9a3 	bl	800fc34 <ptr_8to16>
 80108ee:	4603      	mov	r3, r0
 80108f0:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	3302      	adds	r3, #2
 80108f6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	1c5a      	adds	r2, r3, #1
 80108fc:	607a      	str	r2, [r7, #4]
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d00b      	beq.n	801091c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8010904:	4b12      	ldr	r3, [pc, #72]	; (8010950 <_UG_FontSelect+0x100>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 801090c:	4b10      	ldr	r3, [pc, #64]	; (8010950 <_UG_FontSelect+0x100>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010912:	461a      	mov	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	4413      	add	r3, r2
 8010918:	607b      	str	r3, [r7, #4]
 801091a:	e003      	b.n	8010924 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 801091c:	4b0c      	ldr	r3, [pc, #48]	; (8010950 <_UG_FontSelect+0x100>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2200      	movs	r2, #0
 8010922:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8010924:	4b0a      	ldr	r3, [pc, #40]	; (8010950 <_UG_FontSelect+0x100>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 801092c:	4b08      	ldr	r3, [pc, #32]	; (8010950 <_UG_FontSelect+0x100>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010932:	005b      	lsls	r3, r3, #1
 8010934:	461a      	mov	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4413      	add	r3, r2
 801093a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 801093c:	4b04      	ldr	r3, [pc, #16]	; (8010950 <_UG_FontSelect+0x100>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	641a      	str	r2, [r3, #64]	; 0x40
 8010944:	e000      	b.n	8010948 <_UG_FontSelect+0xf8>
    return;
 8010946:	bf00      	nop
}
 8010948:	370c      	adds	r7, #12
 801094a:	46bd      	mov	sp, r7
 801094c:	bd90      	pop	{r4, r7, pc}
 801094e:	bf00      	nop
 8010950:	20001b08 	.word	0x20001b08

08010954 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8010954:	b5b0      	push	{r4, r5, r7, lr}
 8010956:	b08c      	sub	sp, #48	; 0x30
 8010958:	af00      	add	r7, sp, #0
 801095a:	4604      	mov	r4, r0
 801095c:	4608      	mov	r0, r1
 801095e:	4611      	mov	r1, r2
 8010960:	461a      	mov	r2, r3
 8010962:	4623      	mov	r3, r4
 8010964:	80fb      	strh	r3, [r7, #6]
 8010966:	4603      	mov	r3, r0
 8010968:	80bb      	strh	r3, [r7, #4]
 801096a:	460b      	mov	r3, r1
 801096c:	807b      	strh	r3, [r7, #2]
 801096e:	4613      	mov	r3, r2
 8010970:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8010972:	2300      	movs	r3, #0
 8010974:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010976:	2300      	movs	r3, #0
 8010978:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801097a:	2300      	movs	r3, #0
 801097c:	847b      	strh	r3, [r7, #34]	; 0x22
 801097e:	2300      	movs	r3, #0
 8010980:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8010982:	4b8c      	ldr	r3, [pc, #560]	; (8010bb4 <_UG_PutChar+0x260>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801098a:	75fb      	strb	r3, [r7, #23]
 801098c:	4b89      	ldr	r3, [pc, #548]	; (8010bb4 <_UG_PutChar+0x260>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8010994:	f003 0302 	and.w	r3, r3, #2
 8010998:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801099a:	2300      	movs	r3, #0
 801099c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 801099e:	f107 0208 	add.w	r2, r7, #8
 80109a2:	88fb      	ldrh	r3, [r7, #6]
 80109a4:	4611      	mov	r1, r2
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7ff fe06 	bl	80105b8 <_UG_GetCharData>
 80109ac:	4603      	mov	r3, r0
 80109ae:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80109b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80109b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b8:	d102      	bne.n	80109c0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80109ba:	f04f 33ff 	mov.w	r3, #4294967295
 80109be:	e226      	b.n	8010e0e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 80109c0:	4b7c      	ldr	r3, [pc, #496]	; (8010bb4 <_UG_PutChar+0x260>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80109c8:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 80109ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <_UG_PutChar+0x80>
     return 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	e21c      	b.n	8010e0e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 80109d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109d6:	08db      	lsrs	r3, r3, #3
 80109d8:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80109da:	4b76      	ldr	r3, [pc, #472]	; (8010bb4 <_UG_PutChar+0x260>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80109e2:	f003 0307 	and.w	r3, r3, #7
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d002      	beq.n	80109f2 <_UG_PutChar+0x9e>
 80109ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109ee:	3301      	adds	r3, #1
 80109f0:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80109f2:	7dbb      	ldrb	r3, [r7, #22]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d01d      	beq.n	8010a34 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80109f8:	4b6e      	ldr	r3, [pc, #440]	; (8010bb4 <_UG_PutChar+0x260>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109fe:	461d      	mov	r5, r3
 8010a00:	88ba      	ldrh	r2, [r7, #4]
 8010a02:	8abb      	ldrh	r3, [r7, #20]
 8010a04:	4413      	add	r3, r2
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	b21c      	sxth	r4, r3
 8010a0e:	4b69      	ldr	r3, [pc, #420]	; (8010bb4 <_UG_PutChar+0x260>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	887b      	ldrh	r3, [r7, #2]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	b21b      	sxth	r3, r3
 8010a24:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8010a28:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8010a2c:	4622      	mov	r2, r4
 8010a2e:	47a8      	blx	r5
 8010a30:	4603      	mov	r3, r0
 8010a32:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8010a34:	4b5f      	ldr	r3, [pc, #380]	; (8010bb4 <_UG_PutChar+0x260>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f040 8172 	bne.w	8010d26 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010a42:	2300      	movs	r3, #0
 8010a44:	853b      	strh	r3, [r7, #40]	; 0x28
 8010a46:	e0ec      	b.n	8010c22 <_UG_PutChar+0x2ce>
     {
       c=0;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010a50:	e0df      	b.n	8010c12 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	1c5a      	adds	r2, r3, #1
 8010a56:	60ba      	str	r2, [r7, #8]
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010a60:	e0ca      	b.n	8010bf8 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8010a62:	7f7b      	ldrb	r3, [r7, #29]
 8010a64:	f003 0301 	and.w	r3, r3, #1
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d033      	beq.n	8010ad4 <_UG_PutChar+0x180>
           {
             if(driver)
 8010a6c:	7dbb      	ldrb	r3, [r7, #22]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d01f      	beq.n	8010ab2 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8010a72:	8c3b      	ldrh	r3, [r7, #32]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00a      	beq.n	8010a8e <_UG_PutChar+0x13a>
 8010a78:	7dfb      	ldrb	r3, [r7, #23]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d107      	bne.n	8010a8e <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8010a7e:	8c3a      	ldrh	r2, [r7, #32]
 8010a80:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	4610      	mov	r0, r2
 8010a88:	4798      	blx	r3
                 bpixels=0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8010a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <_UG_PutChar+0x156>
 8010a94:	7dfb      	ldrb	r3, [r7, #23]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d007      	beq.n	8010aaa <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8010a9a:	88ba      	ldrh	r2, [r7, #4]
 8010a9c:	8bfb      	ldrh	r3, [r7, #30]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8010aa2:	887a      	ldrh	r2, [r7, #2]
 8010aa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010aa6:	4413      	add	r3, r2
 8010aa8:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8010aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010aac:	3301      	adds	r3, #1
 8010aae:	847b      	strh	r3, [r7, #34]	; 0x22
 8010ab0:	e096      	b.n	8010be0 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8010ab2:	4b40      	ldr	r3, [pc, #256]	; (8010bb4 <_UG_PutChar+0x260>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	88b9      	ldrh	r1, [r7, #4]
 8010abc:	8bfa      	ldrh	r2, [r7, #30]
 8010abe:	440a      	add	r2, r1
 8010ac0:	b292      	uxth	r2, r2
 8010ac2:	b210      	sxth	r0, r2
 8010ac4:	8879      	ldrh	r1, [r7, #2]
 8010ac6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010ac8:	440a      	add	r2, r1
 8010aca:	b292      	uxth	r2, r2
 8010acc:	b211      	sxth	r1, r2
 8010ace:	883a      	ldrh	r2, [r7, #0]
 8010ad0:	4798      	blx	r3
 8010ad2:	e085      	b.n	8010be0 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8010ad4:	7dbb      	ldrb	r3, [r7, #22]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d06e      	beq.n	8010bb8 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8010ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d064      	beq.n	8010baa <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8010ae0:	7dfb      	ldrb	r3, [r7, #23]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d15e      	bne.n	8010ba4 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8010ae6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ae8:	8839      	ldrh	r1, [r7, #0]
 8010aea:	69bb      	ldr	r3, [r7, #24]
 8010aec:	4610      	mov	r0, r2
 8010aee:	4798      	blx	r3
                   fpixels=0;
 8010af0:	2300      	movs	r3, #0
 8010af2:	847b      	strh	r3, [r7, #34]	; 0x22
 8010af4:	e059      	b.n	8010baa <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8010af6:	88ba      	ldrh	r2, [r7, #4]
 8010af8:	8abb      	ldrh	r3, [r7, #20]
 8010afa:	4413      	add	r3, r2
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8010b04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d003      	beq.n	8010b16 <_UG_PutChar+0x1c2>
 8010b0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b10:	89fb      	ldrh	r3, [r7, #14]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d224      	bcs.n	8010b60 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010b16:	4b27      	ldr	r3, [pc, #156]	; (8010bb4 <_UG_PutChar+0x260>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b1c:	461d      	mov	r5, r3
 8010b1e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010b22:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010b26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b28:	89fb      	ldrh	r3, [r7, #14]
 8010b2a:	4413      	add	r3, r2
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	b21c      	sxth	r4, r3
 8010b34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010b3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b42:	4413      	add	r3, r2
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	b21b      	sxth	r3, r3
 8010b48:	4622      	mov	r2, r4
 8010b4a:	47a8      	blx	r5
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010b50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b52:	8839      	ldrh	r1, [r7, #0]
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	4610      	mov	r0, r2
 8010b58:	4798      	blx	r3
                       fpixels=0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	847b      	strh	r3, [r7, #34]	; 0x22
 8010b5e:	e021      	b.n	8010ba4 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8010b60:	4b14      	ldr	r3, [pc, #80]	; (8010bb4 <_UG_PutChar+0x260>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b66:	461c      	mov	r4, r3
 8010b68:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010b6c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010b70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b72:	89fb      	ldrh	r3, [r7, #14]
 8010b74:	4413      	add	r3, r2
 8010b76:	b29b      	uxth	r3, r3
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	b21a      	sxth	r2, r3
 8010b7e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010b82:	47a0      	blx	r4
 8010b84:	4603      	mov	r3, r0
 8010b86:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8010b88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b8a:	8839      	ldrh	r1, [r7, #0]
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	4610      	mov	r0, r2
 8010b90:	4798      	blx	r3
                       fpixels -= width;
 8010b92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b94:	89fb      	ldrh	r3, [r7, #14]
 8010b96:	1ad3      	subs	r3, r2, r3
 8010b98:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8010b9a:	88bb      	ldrh	r3, [r7, #4]
 8010b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8010b9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8010ba4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1a5      	bne.n	8010af6 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8010baa:	8c3b      	ldrh	r3, [r7, #32]
 8010bac:	3301      	adds	r3, #1
 8010bae:	843b      	strh	r3, [r7, #32]
 8010bb0:	e016      	b.n	8010be0 <_UG_PutChar+0x28c>
 8010bb2:	bf00      	nop
 8010bb4:	20001b08 	.word	0x20001b08
             }
             else if(!trans)                           // Not accelerated output
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d110      	bne.n	8010be0 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8010bbe:	4b96      	ldr	r3, [pc, #600]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	88b9      	ldrh	r1, [r7, #4]
 8010bc8:	8bfa      	ldrh	r2, [r7, #30]
 8010bca:	440a      	add	r2, r1
 8010bcc:	b292      	uxth	r2, r2
 8010bce:	b210      	sxth	r0, r2
 8010bd0:	8879      	ldrh	r1, [r7, #2]
 8010bd2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010bd4:	440a      	add	r2, r1
 8010bd6:	b292      	uxth	r2, r2
 8010bd8:	b211      	sxth	r1, r2
 8010bda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010bde:	4798      	blx	r3
             }
           }
           b >>= 1;
 8010be0:	7f7b      	ldrb	r3, [r7, #29]
 8010be2:	085b      	lsrs	r3, r3, #1
 8010be4:	777b      	strb	r3, [r7, #29]
           c++;
 8010be6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	3301      	adds	r3, #1
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8010bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010bf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bfa:	2b07      	cmp	r3, #7
 8010bfc:	d806      	bhi.n	8010c0c <_UG_PutChar+0x2b8>
 8010bfe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8010c02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	f6ff af2b 	blt.w	8010a62 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8010c0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c0e:	3301      	adds	r3, #1
 8010c10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010c12:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c16:	429a      	cmp	r2, r3
 8010c18:	f4ff af1b 	bcc.w	8010a52 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010c1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c1e:	3301      	adds	r3, #1
 8010c20:	853b      	strh	r3, [r7, #40]	; 0x28
 8010c22:	4b7d      	ldr	r3, [pc, #500]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	f4ff af0a 	bcc.w	8010a48 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8010c34:	7dbb      	ldrb	r3, [r7, #22]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f000 80e7 	beq.w	8010e0a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8010c3c:	8c3b      	ldrh	r3, [r7, #32]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d009      	beq.n	8010c56 <_UG_PutChar+0x302>
 8010c42:	7dfb      	ldrb	r3, [r7, #23]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d106      	bne.n	8010c56 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8010c48:	8c3a      	ldrh	r2, [r7, #32]
 8010c4a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8010c4e:	69bb      	ldr	r3, [r7, #24]
 8010c50:	4610      	mov	r0, r2
 8010c52:	4798      	blx	r3
 8010c54:	e0d9      	b.n	8010e0a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8010c56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f000 80d6 	beq.w	8010e0a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d15c      	bne.n	8010d1e <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8010c64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c66:	8839      	ldrh	r1, [r7, #0]
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	4798      	blx	r3
 8010c6e:	e0cc      	b.n	8010e0a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8010c70:	88ba      	ldrh	r2, [r7, #4]
 8010c72:	8abb      	ldrh	r3, [r7, #20]
 8010c74:	4413      	add	r3, r2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8010c7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d003      	beq.n	8010c90 <_UG_PutChar+0x33c>
 8010c88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010c8a:	8a3b      	ldrh	r3, [r7, #16]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d224      	bcs.n	8010cda <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8010c90:	4b61      	ldr	r3, [pc, #388]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c96:	461d      	mov	r5, r3
 8010c98:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010c9c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010ca0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ca2:	8a3b      	ldrh	r3, [r7, #16]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	b21c      	sxth	r4, r3
 8010cae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010cb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cbc:	4413      	add	r3, r2
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	b21b      	sxth	r3, r3
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	47a8      	blx	r5
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010cca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ccc:	8839      	ldrh	r1, [r7, #0]
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	4610      	mov	r0, r2
 8010cd2:	4798      	blx	r3
               fpixels=0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010cd8:	e021      	b.n	8010d1e <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8010cda:	4b4f      	ldr	r3, [pc, #316]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ce0:	461c      	mov	r4, r3
 8010ce2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8010ce6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010cec:	8a3b      	ldrh	r3, [r7, #16]
 8010cee:	4413      	add	r3, r2
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	b21a      	sxth	r2, r3
 8010cf8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8010cfc:	47a0      	blx	r4
 8010cfe:	4603      	mov	r3, r0
 8010d00:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8010d02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d04:	8839      	ldrh	r1, [r7, #0]
 8010d06:	69bb      	ldr	r3, [r7, #24]
 8010d08:	4610      	mov	r0, r2
 8010d0a:	4798      	blx	r3
               fpixels -= width;
 8010d0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010d0e:	8a3b      	ldrh	r3, [r7, #16]
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8010d14:	88bb      	ldrh	r3, [r7, #4]
 8010d16:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8010d18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8010d1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1a5      	bne.n	8010c70 <_UG_PutChar+0x31c>
 8010d24:	e071      	b.n	8010e0a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8010d26:	4b3c      	ldr	r3, [pc, #240]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d2e:	2b01      	cmp	r3, #1
 8010d30:	d16b      	bne.n	8010e0a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010d32:	2300      	movs	r3, #0
 8010d34:	853b      	strh	r3, [r7, #40]	; 0x28
 8010d36:	e060      	b.n	8010dfa <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8010d38:	2300      	movs	r3, #0
 8010d3a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010d3c:	e04a      	b.n	8010dd4 <_UG_PutChar+0x480>
       {
         b = *data++;
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	1c5a      	adds	r2, r3, #1
 8010d42:	60ba      	str	r2, [r7, #8]
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010d48:	883b      	ldrh	r3, [r7, #0]
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	7f7a      	ldrb	r2, [r7, #29]
 8010d4e:	fb03 f202 	mul.w	r2, r3, r2
 8010d52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	7f79      	ldrb	r1, [r7, #29]
 8010d5a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8010d5e:	fb01 f303 	mul.w	r3, r1, r3
 8010d62:	4413      	add	r3, r2
 8010d64:	121b      	asrs	r3, r3, #8
 8010d66:	b21b      	sxth	r3, r3
 8010d68:	b2db      	uxtb	r3, r3
 8010d6a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8010d6c:	883b      	ldrh	r3, [r7, #0]
 8010d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010d72:	7f79      	ldrb	r1, [r7, #29]
 8010d74:	fb03 f101 	mul.w	r1, r3, r1
 8010d78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010d80:	7f78      	ldrb	r0, [r7, #29]
 8010d82:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010d86:	fb00 f303 	mul.w	r3, r0, r3
 8010d8a:	440b      	add	r3, r1
 8010d8c:	121b      	asrs	r3, r3, #8
 8010d8e:	b21b      	sxth	r3, r3
 8010d90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010d94:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8010d96:	4313      	orrs	r3, r2
 8010d98:	b21b      	sxth	r3, r3
 8010d9a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8010d9c:	7dbb      	ldrb	r3, [r7, #22]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d005      	beq.n	8010dae <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8010da2:	8a7a      	ldrh	r2, [r7, #18]
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	4611      	mov	r1, r2
 8010da8:	2001      	movs	r0, #1
 8010daa:	4798      	blx	r3
 8010dac:	e00f      	b.n	8010dce <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8010dae:	4b1a      	ldr	r3, [pc, #104]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	88b9      	ldrh	r1, [r7, #4]
 8010db8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010dba:	440a      	add	r2, r1
 8010dbc:	b292      	uxth	r2, r2
 8010dbe:	b210      	sxth	r0, r2
 8010dc0:	8879      	ldrh	r1, [r7, #2]
 8010dc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010dc4:	440a      	add	r2, r1
 8010dc6:	b292      	uxth	r2, r2
 8010dc8:	b211      	sxth	r1, r2
 8010dca:	8a7a      	ldrh	r2, [r7, #18]
 8010dcc:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8010dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010dd4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010dd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	dbaf      	blt.n	8010d3e <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	4a0d      	ldr	r2, [pc, #52]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010de2:	6812      	ldr	r2, [r2, #0]
 8010de4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8010de8:	4611      	mov	r1, r2
 8010dea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8010dee:	1a8a      	subs	r2, r1, r2
 8010df0:	4413      	add	r3, r2
 8010df2:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8010df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010df6:	3301      	adds	r3, #1
 8010df8:	853b      	strh	r3, [r7, #40]	; 0x28
 8010dfa:	4b07      	ldr	r3, [pc, #28]	; (8010e18 <_UG_PutChar+0x4c4>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d396      	bcc.n	8010d38 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8010e0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3730      	adds	r7, #48	; 0x30
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bdb0      	pop	{r4, r5, r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20001b08 	.word	0x20001b08

08010e1c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b089      	sub	sp, #36	; 0x24
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8010e24:	4b57      	ldr	r3, [pc, #348]	; (8010f84 <_UG_ProcessTouchData+0x168>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	88db      	ldrh	r3, [r3, #6]
 8010e2a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8010e2c:	4b55      	ldr	r3, [pc, #340]	; (8010f84 <_UG_ProcessTouchData+0x168>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	891b      	ldrh	r3, [r3, #8]
 8010e32:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8010e34:	4b53      	ldr	r3, [pc, #332]	; (8010f84 <_UG_ProcessTouchData+0x168>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	791b      	ldrb	r3, [r3, #4]
 8010e3a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010e42:	2300      	movs	r3, #0
 8010e44:	83fb      	strh	r3, [r7, #30]
 8010e46:	e090      	b.n	8010f6a <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685a      	ldr	r2, [r3, #4]
 8010e4c:	8bfb      	ldrh	r3, [r7, #30]
 8010e4e:	015b      	lsls	r3, r3, #5
 8010e50:	4413      	add	r3, r2
 8010e52:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	785b      	ldrb	r3, [r3, #1]
 8010e5e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
 8010e62:	f003 0301 	and.w	r3, r3, #1
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d179      	bne.n	8010f5e <_UG_ProcessTouchData+0x142>
 8010e6a:	7bfb      	ldrb	r3, [r7, #15]
 8010e6c:	f003 0302 	and.w	r3, r3, #2
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d074      	beq.n	8010f5e <_UG_ProcessTouchData+0x142>
 8010e74:	7bfb      	ldrb	r3, [r7, #15]
 8010e76:	f003 0308 	and.w	r3, r3, #8
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d06f      	beq.n	8010f5e <_UG_ProcessTouchData+0x142>
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
 8010e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d16a      	bne.n	8010f5e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8010e88:	7dfb      	ldrb	r3, [r7, #23]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d047      	beq.n	8010f1e <_UG_ProcessTouchData+0x102>
 8010e8e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e96:	d042      	beq.n	8010f1e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010e98:	7f7b      	ldrb	r3, [r7, #29]
 8010e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d107      	bne.n	8010eb2 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8010ea2:	7f7b      	ldrb	r3, [r7, #29]
 8010ea4:	f043 0305 	orr.w	r3, r3, #5
 8010ea8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8010eaa:	7f7b      	ldrb	r3, [r7, #29]
 8010eac:	f023 0318 	bic.w	r3, r3, #24
 8010eb0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010eb2:	7f7b      	ldrb	r3, [r7, #29]
 8010eb4:	f023 0320 	bic.w	r3, r3, #32
 8010eb8:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ec0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	db25      	blt.n	8010f14 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010ece:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	dc1e      	bgt.n	8010f14 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010edc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	db17      	blt.n	8010f14 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010eea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	dc10      	bgt.n	8010f14 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8010ef2:	7f7b      	ldrb	r3, [r7, #29]
 8010ef4:	f043 0320 	orr.w	r3, r3, #32
 8010ef8:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8010efa:	7f7b      	ldrb	r3, [r7, #29]
 8010efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d107      	bne.n	8010f14 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8010f04:	7f7b      	ldrb	r3, [r7, #29]
 8010f06:	f023 0304 	bic.w	r3, r3, #4
 8010f0a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8010f0c:	7f7b      	ldrb	r3, [r7, #29]
 8010f0e:	f043 0302 	orr.w	r3, r3, #2
 8010f12:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8010f14:	7f7b      	ldrb	r3, [r7, #29]
 8010f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f1a:	777b      	strb	r3, [r7, #29]
 8010f1c:	e01f      	b.n	8010f5e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010f1e:	7f7b      	ldrb	r3, [r7, #29]
 8010f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d01a      	beq.n	8010f5e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8010f28:	7f7b      	ldrb	r3, [r7, #29]
 8010f2a:	f003 0320 	and.w	r3, r3, #32
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d004      	beq.n	8010f3c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8010f32:	7f7b      	ldrb	r3, [r7, #29]
 8010f34:	f043 0308 	orr.w	r3, r3, #8
 8010f38:	777b      	strb	r3, [r7, #29]
 8010f3a:	e003      	b.n	8010f44 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8010f3c:	7f7b      	ldrb	r3, [r7, #29]
 8010f3e:	f043 0310 	orr.w	r3, r3, #16
 8010f42:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8010f44:	7f7b      	ldrb	r3, [r7, #29]
 8010f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d003      	beq.n	8010f56 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8010f4e:	7f7b      	ldrb	r3, [r7, #29]
 8010f50:	f043 0301 	orr.w	r3, r3, #1
 8010f54:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8010f56:	7f7b      	ldrb	r3, [r7, #29]
 8010f58:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8010f5c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	7f7a      	ldrb	r2, [r7, #29]
 8010f62:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8010f64:	8bfb      	ldrh	r3, [r7, #30]
 8010f66:	3301      	adds	r3, #1
 8010f68:	83fb      	strh	r3, [r7, #30]
 8010f6a:	8bfa      	ldrh	r2, [r7, #30]
 8010f6c:	8abb      	ldrh	r3, [r7, #20]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	f4ff af6a 	bcc.w	8010e48 <_UG_ProcessTouchData+0x2c>
   }
}
 8010f74:	bf00      	nop
 8010f76:	bf00      	nop
 8010f78:	3724      	adds	r7, #36	; 0x24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr
 8010f82:	bf00      	nop
 8010f84:	20001b08 	.word	0x20001b08

08010f88 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	781b      	ldrb	r3, [r3, #0]
 8010f94:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8010f96:	2300      	movs	r3, #0
 8010f98:	82fb      	strh	r3, [r7, #22]
 8010f9a:	e035      	b.n	8011008 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	685a      	ldr	r2, [r3, #4]
 8010fa0:	8afb      	ldrh	r3, [r7, #22]
 8010fa2:	015b      	lsls	r3, r3, #5
 8010fa4:	4413      	add	r3, r2
 8010fa6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	785b      	ldrb	r3, [r3, #1]
 8010fb2:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d121      	bne.n	8011002 <_UG_UpdateObjects+0x7a>
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
 8010fc0:	f003 0302 	and.w	r3, r3, #2
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d01c      	beq.n	8011002 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
 8010fca:	f003 0320 	and.w	r3, r3, #32
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d004      	beq.n	8010fdc <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	6939      	ldr	r1, [r7, #16]
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8010fdc:	7bfb      	ldrb	r3, [r7, #15]
 8010fde:	f003 0308 	and.w	r3, r3, #8
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00d      	beq.n	8011002 <_UG_UpdateObjects+0x7a>
 8010fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	da09      	bge.n	8011002 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8010fee:	7bbb      	ldrb	r3, [r7, #14]
 8010ff0:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d004      	beq.n	8011002 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	6939      	ldr	r1, [r7, #16]
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8011002:	8afb      	ldrh	r3, [r7, #22]
 8011004:	3301      	adds	r3, #1
 8011006:	82fb      	strh	r3, [r7, #22]
 8011008:	8afa      	ldrh	r2, [r7, #22]
 801100a:	8abb      	ldrh	r3, [r7, #20]
 801100c:	429a      	cmp	r2, r3
 801100e:	d3c5      	bcc.n	8010f9c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8011010:	bf00      	nop
 8011012:	bf00      	nop
 8011014:	3718      	adds	r7, #24
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
	...

0801101c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b086      	sub	sp, #24
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8011024:	4b22      	ldr	r3, [pc, #136]	; (80110b0 <_UG_HandleEvents+0x94>)
 8011026:	2200      	movs	r2, #0
 8011028:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 801102a:	4b21      	ldr	r3, [pc, #132]	; (80110b0 <_UG_HandleEvents+0x94>)
 801102c:	2202      	movs	r2, #2
 801102e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8011036:	2300      	movs	r3, #0
 8011038:	82fb      	strh	r3, [r7, #22]
 801103a:	e02f      	b.n	801109c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	8afb      	ldrh	r3, [r7, #22]
 8011042:	015b      	lsls	r3, r3, #5
 8011044:	4413      	add	r3, r2
 8011046:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 801104e:	7bfb      	ldrb	r3, [r7, #15]
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	d11e      	bne.n	8011096 <_UG_HandleEvents+0x7a>
 8011058:	7bfb      	ldrb	r3, [r7, #15]
 801105a:	f003 0302 	and.w	r3, r3, #2
 801105e:	2b00      	cmp	r3, #0
 8011060:	d019      	beq.n	8011096 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	7e9b      	ldrb	r3, [r3, #26]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d015      	beq.n	8011096 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 801106a:	4a11      	ldr	r2, [pc, #68]	; (80110b0 <_UG_HandleEvents+0x94>)
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	7e1a      	ldrb	r2, [r3, #24]
 8011074:	4b0e      	ldr	r3, [pc, #56]	; (80110b0 <_UG_HandleEvents+0x94>)
 8011076:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	7e5a      	ldrb	r2, [r3, #25]
 801107c:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <_UG_HandleEvents+0x94>)
 801107e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	7e9a      	ldrb	r2, [r3, #26]
 8011084:	4b0a      	ldr	r3, [pc, #40]	; (80110b0 <_UG_HandleEvents+0x94>)
 8011086:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801108c:	4808      	ldr	r0, [pc, #32]	; (80110b0 <_UG_HandleEvents+0x94>)
 801108e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	2200      	movs	r2, #0
 8011094:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8011096:	8afb      	ldrh	r3, [r7, #22]
 8011098:	3301      	adds	r3, #1
 801109a:	82fb      	strh	r3, [r7, #22]
 801109c:	8afa      	ldrh	r2, [r7, #22]
 801109e:	8abb      	ldrh	r3, [r7, #20]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d3cb      	bcc.n	801103c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80110a4:	bf00      	nop
 80110a6:	bf00      	nop
 80110a8:	3718      	adds	r7, #24
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	20001b1c 	.word	0x20001b1c

080110b4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80110b4:	b590      	push	{r4, r7, lr}
 80110b6:	b08f      	sub	sp, #60	; 0x3c
 80110b8:	af02      	add	r7, sp, #8
 80110ba:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 812c 	beq.w	801131e <_UG_PutText+0x26a>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f000 8127 	beq.w	801131e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	89db      	ldrh	r3, [r3, #14]
 80110d4:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	895b      	ldrh	r3, [r3, #10]
 80110da:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	3302      	adds	r3, #2
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80110e6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80110ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80110ee:	1ad2      	subs	r2, r2, r3
 80110f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	f2c0 8114 	blt.w	8011322 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	891b      	ldrh	r3, [r3, #8]
 80110fe:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	899b      	ldrh	r3, [r3, #12]
 8011104:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	7d1b      	ldrb	r3, [r3, #20]
 801110a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8adb      	ldrh	r3, [r3, #22]
 8011110:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b1b      	ldrh	r3, [r3, #24]
 8011116:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff fb92 	bl	8010850 <_UG_FontSelect>

   rc=1;
 801112c:	2301      	movs	r3, #1
 801112e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011134:	4b80      	ldr	r3, [pc, #512]	; (8011338 <_UG_PutText+0x284>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801113c:	2b00      	cmp	r3, #0
 801113e:	d107      	bne.n	8011150 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8011140:	f107 0308 	add.w	r3, r7, #8
 8011144:	4618      	mov	r0, r3
 8011146:	f7ff f9bf 	bl	80104c8 <_UG_DecodeUTF8>
 801114a:	4603      	mov	r3, r0
 801114c:	84bb      	strh	r3, [r7, #36]	; 0x24
 801114e:	e004      	b.n	801115a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	1c5a      	adds	r2, r3, #1
 8011154:	60ba      	str	r2, [r7, #8]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 801115a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801115c:	2b00      	cmp	r3, #0
 801115e:	d006      	beq.n	801116e <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8011160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011162:	2b0a      	cmp	r3, #10
 8011164:	d1e6      	bne.n	8011134 <_UG_PutText+0x80>
 8011166:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011168:	3301      	adds	r3, #1
 801116a:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801116c:	e7e2      	b.n	8011134 <_UG_PutText+0x80>
     if(!chr) break;
 801116e:	bf00      	nop
   }

   yp = 0;
 8011170:	2300      	movs	r3, #0
 8011172:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8011174:	7e7b      	ldrb	r3, [r7, #25]
 8011176:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801117a:	2b00      	cmp	r3, #0
 801117c:	d01f      	beq.n	80111be <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 801117e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011180:	8c3b      	ldrh	r3, [r7, #32]
 8011182:	1ad3      	subs	r3, r2, r3
 8011184:	b29b      	uxth	r3, r3
 8011186:	3301      	adds	r3, #1
 8011188:	b29b      	uxth	r3, r3
 801118a:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 801118c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801118e:	8bfb      	ldrh	r3, [r7, #30]
 8011190:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8011192:	fb11 f303 	smulbb	r3, r1, r3
 8011196:	b29b      	uxth	r3, r3
 8011198:	1ad3      	subs	r3, r2, r3
 801119a:	b29b      	uxth	r3, r3
 801119c:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 801119e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80111a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111a2:	3b01      	subs	r3, #1
 80111a4:	b299      	uxth	r1, r3
 80111a6:	8abb      	ldrh	r3, [r7, #20]
 80111a8:	fb11 f303 	smulbb	r3, r1, r3
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 80111b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f2c0 80b4 	blt.w	8011326 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80111be:	7e7b      	ldrb	r3, [r7, #25]
 80111c0:	f003 0310 	and.w	r3, r3, #16
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d003      	beq.n	80111d0 <_UG_PutText+0x11c>
 80111c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80111cc:	105b      	asrs	r3, r3, #1
 80111ce:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 80111d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80111d2:	8c3b      	ldrh	r3, [r7, #32]
 80111d4:	4413      	add	r3, r2
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 80111da:	2300      	movs	r3, #0
 80111dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80111e6:	4b54      	ldr	r3, [pc, #336]	; (8011338 <_UG_PutText+0x284>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d107      	bne.n	8011202 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 80111f2:	f107 0308 	add.w	r3, r7, #8
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff f966 	bl	80104c8 <_UG_DecodeUTF8>
 80111fc:	4603      	mov	r3, r0
 80111fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011200:	e004      	b.n	801120c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	1c5a      	adds	r2, r3, #1
 8011206:	60ba      	str	r2, [r7, #8]
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 801120c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801120e:	2b00      	cmp	r3, #0
 8011210:	d01b      	beq.n	801124a <_UG_PutText+0x196>
 8011212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011214:	2b0a      	cmp	r3, #10
 8011216:	d018      	beq.n	801124a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8011218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801121a:	2100      	movs	r1, #0
 801121c:	4618      	mov	r0, r3
 801121e:	f7ff f9cb 	bl	80105b8 <_UG_GetCharData>
 8011222:	4603      	mov	r3, r0
 8011224:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8011226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122e:	d00a      	beq.n	8011246 <_UG_PutText+0x192>
         sl++;
 8011230:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011232:	3301      	adds	r3, #1
 8011234:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8011236:	8a7a      	ldrh	r2, [r7, #18]
 8011238:	8afb      	ldrh	r3, [r7, #22]
 801123a:	4413      	add	r3, r2
 801123c:	b29a      	uxth	r2, r3
 801123e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011240:	4413      	add	r3, r2
 8011242:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011244:	e7cf      	b.n	80111e6 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8011246:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011248:	e7cd      	b.n	80111e6 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 801124a:	8afb      	ldrh	r3, [r7, #22]
 801124c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8011252:	8b7a      	ldrh	r2, [r7, #26]
 8011254:	8bbb      	ldrh	r3, [r7, #28]
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	b29b      	uxth	r3, r3
 801125a:	3301      	adds	r3, #1
 801125c:	b29b      	uxth	r3, r3
 801125e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8011260:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	b29b      	uxth	r3, r3
 8011268:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 801126a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801126e:	2b00      	cmp	r3, #0
 8011270:	db5b      	blt.n	801132a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8011272:	7e7b      	ldrb	r3, [r7, #25]
 8011274:	f003 0301 	and.w	r3, r3, #1
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <_UG_PutText+0x1ce>
 801127c:	2300      	movs	r3, #0
 801127e:	853b      	strh	r3, [r7, #40]	; 0x28
 8011280:	e008      	b.n	8011294 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8011282:	7e7b      	ldrb	r3, [r7, #25]
 8011284:	f003 0302 	and.w	r3, r3, #2
 8011288:	2b00      	cmp	r3, #0
 801128a:	d003      	beq.n	8011294 <_UG_PutText+0x1e0>
 801128c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011290:	105b      	asrs	r3, r3, #1
 8011292:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8011294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011296:	8bbb      	ldrh	r3, [r7, #28]
 8011298:	4413      	add	r3, r2
 801129a:	b29b      	uxth	r3, r3
 801129c:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801129e:	4b26      	ldr	r3, [pc, #152]	; (8011338 <_UG_PutText+0x284>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d107      	bne.n	80112ba <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80112aa:	f107 030c 	add.w	r3, r7, #12
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7ff f90a 	bl	80104c8 <_UG_DecodeUTF8>
 80112b4:	4603      	mov	r3, r0
 80112b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80112b8:	e004      	b.n	80112c4 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	1c5a      	adds	r2, r3, #1
 80112be:	60fa      	str	r2, [r7, #12]
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80112c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d031      	beq.n	801132e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80112ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80112cc:	2b0a      	cmp	r3, #10
 80112ce:	d01c      	beq.n	801130a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8a1c      	ldrh	r4, [r3, #16]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	8a5b      	ldrh	r3, [r3, #18]
 80112d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80112dc:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80112e0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80112e2:	9300      	str	r3, [sp, #0]
 80112e4:	4623      	mov	r3, r4
 80112e6:	f7ff fb35 	bl	8010954 <_UG_PutChar>
 80112ea:	4603      	mov	r3, r0
 80112ec:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 80112ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80112f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f6:	d0d2      	beq.n	801129e <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80112f8:	8a7a      	ldrh	r2, [r7, #18]
 80112fa:	8afb      	ldrh	r3, [r7, #22]
 80112fc:	4413      	add	r3, r2
 80112fe:	b29a      	uxth	r2, r3
 8011300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011302:	4413      	add	r3, r2
 8011304:	b29b      	uxth	r3, r3
 8011306:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8011308:	e7c9      	b.n	801129e <_UG_PutText+0x1ea>
           break;
 801130a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 801130c:	8bfa      	ldrh	r2, [r7, #30]
 801130e:	8abb      	ldrh	r3, [r7, #20]
 8011310:	4413      	add	r3, r2
 8011312:	b29a      	uxth	r2, r3
 8011314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011316:	4413      	add	r3, r2
 8011318:	b29b      	uxth	r3, r3
 801131a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 801131c:	e75d      	b.n	80111da <_UG_PutText+0x126>
     return;
 801131e:	bf00      	nop
 8011320:	e006      	b.n	8011330 <_UG_PutText+0x27c>
     return;
 8011322:	bf00      	nop
 8011324:	e004      	b.n	8011330 <_UG_PutText+0x27c>
        return;
 8011326:	bf00      	nop
 8011328:	e002      	b.n	8011330 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 801132a:	bf00      	nop
 801132c:	e000      	b.n	8011330 <_UG_PutText+0x27c>
           return;
 801132e:	bf00      	nop
   }
}
 8011330:	3734      	adds	r7, #52	; 0x34
 8011332:	46bd      	mov	sp, r7
 8011334:	bd90      	pop	{r4, r7, pc}
 8011336:	bf00      	nop
 8011338:	20001b08 	.word	0x20001b08

0801133c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 801133c:	b5b0      	push	{r4, r5, r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af02      	add	r7, sp, #8
 8011342:	4604      	mov	r4, r0
 8011344:	4608      	mov	r0, r1
 8011346:	4611      	mov	r1, r2
 8011348:	461a      	mov	r2, r3
 801134a:	4623      	mov	r3, r4
 801134c:	80fb      	strh	r3, [r7, #6]
 801134e:	4603      	mov	r3, r0
 8011350:	80bb      	strh	r3, [r7, #4]
 8011352:	460b      	mov	r3, r1
 8011354:	807b      	strh	r3, [r7, #2]
 8011356:	4613      	mov	r3, r2
 8011358:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 801135a:	887b      	ldrh	r3, [r7, #2]
 801135c:	3b01      	subs	r3, #1
 801135e:	b29b      	uxth	r3, r3
 8011360:	b21c      	sxth	r4, r3
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	1c9a      	adds	r2, r3, #2
 8011366:	61ba      	str	r2, [r7, #24]
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801136e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011372:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011376:	9300      	str	r3, [sp, #0]
 8011378:	4613      	mov	r3, r2
 801137a:	4622      	mov	r2, r4
 801137c:	f7fe fee0 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8011380:	88bb      	ldrh	r3, [r7, #4]
 8011382:	3301      	adds	r3, #1
 8011384:	b29b      	uxth	r3, r3
 8011386:	b219      	sxth	r1, r3
 8011388:	883b      	ldrh	r3, [r7, #0]
 801138a:	3b01      	subs	r3, #1
 801138c:	b29b      	uxth	r3, r3
 801138e:	b21c      	sxth	r4, r3
 8011390:	69bb      	ldr	r3, [r7, #24]
 8011392:	1c9a      	adds	r2, r3, #2
 8011394:	61ba      	str	r2, [r7, #24]
 8011396:	881b      	ldrh	r3, [r3, #0]
 8011398:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801139c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	4623      	mov	r3, r4
 80113a4:	f7fe fecc 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	1c9a      	adds	r2, r3, #2
 80113ac:	61ba      	str	r2, [r7, #24]
 80113ae:	881b      	ldrh	r3, [r3, #0]
 80113b0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80113b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80113b8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80113bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	4623      	mov	r3, r4
 80113c4:	f7fe febc 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80113c8:	883b      	ldrh	r3, [r7, #0]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	b21c      	sxth	r4, r3
 80113d0:	69bb      	ldr	r3, [r7, #24]
 80113d2:	1c9a      	adds	r2, r3, #2
 80113d4:	61ba      	str	r2, [r7, #24]
 80113d6:	881b      	ldrh	r3, [r3, #0]
 80113d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80113dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80113e0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80113e4:	9300      	str	r3, [sp, #0]
 80113e6:	4623      	mov	r3, r4
 80113e8:	f7fe feaa 	bl	8010140 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80113ec:	88fb      	ldrh	r3, [r7, #6]
 80113ee:	3301      	adds	r3, #1
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	b218      	sxth	r0, r3
 80113f4:	88bb      	ldrh	r3, [r7, #4]
 80113f6:	3301      	adds	r3, #1
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	b219      	sxth	r1, r3
 80113fc:	887b      	ldrh	r3, [r7, #2]
 80113fe:	3b02      	subs	r3, #2
 8011400:	b29b      	uxth	r3, r3
 8011402:	b21c      	sxth	r4, r3
 8011404:	88bb      	ldrh	r3, [r7, #4]
 8011406:	3301      	adds	r3, #1
 8011408:	b29b      	uxth	r3, r3
 801140a:	b21d      	sxth	r5, r3
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	1c9a      	adds	r2, r3, #2
 8011410:	61ba      	str	r2, [r7, #24]
 8011412:	881b      	ldrh	r3, [r3, #0]
 8011414:	9300      	str	r3, [sp, #0]
 8011416:	462b      	mov	r3, r5
 8011418:	4622      	mov	r2, r4
 801141a:	f7fe fe91 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 801141e:	88fb      	ldrh	r3, [r7, #6]
 8011420:	3301      	adds	r3, #1
 8011422:	b29b      	uxth	r3, r3
 8011424:	b218      	sxth	r0, r3
 8011426:	88bb      	ldrh	r3, [r7, #4]
 8011428:	3302      	adds	r3, #2
 801142a:	b29b      	uxth	r3, r3
 801142c:	b219      	sxth	r1, r3
 801142e:	88fb      	ldrh	r3, [r7, #6]
 8011430:	3301      	adds	r3, #1
 8011432:	b29b      	uxth	r3, r3
 8011434:	b21c      	sxth	r4, r3
 8011436:	883b      	ldrh	r3, [r7, #0]
 8011438:	3b02      	subs	r3, #2
 801143a:	b29b      	uxth	r3, r3
 801143c:	b21d      	sxth	r5, r3
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	1c9a      	adds	r2, r3, #2
 8011442:	61ba      	str	r2, [r7, #24]
 8011444:	881b      	ldrh	r3, [r3, #0]
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	462b      	mov	r3, r5
 801144a:	4622      	mov	r2, r4
 801144c:	f7fe fe78 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8011450:	88fb      	ldrh	r3, [r7, #6]
 8011452:	3301      	adds	r3, #1
 8011454:	b29b      	uxth	r3, r3
 8011456:	b218      	sxth	r0, r3
 8011458:	883b      	ldrh	r3, [r7, #0]
 801145a:	3b01      	subs	r3, #1
 801145c:	b29b      	uxth	r3, r3
 801145e:	b219      	sxth	r1, r3
 8011460:	887b      	ldrh	r3, [r7, #2]
 8011462:	3b01      	subs	r3, #1
 8011464:	b29b      	uxth	r3, r3
 8011466:	b21c      	sxth	r4, r3
 8011468:	883b      	ldrh	r3, [r7, #0]
 801146a:	3b01      	subs	r3, #1
 801146c:	b29b      	uxth	r3, r3
 801146e:	b21d      	sxth	r5, r3
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	1c9a      	adds	r2, r3, #2
 8011474:	61ba      	str	r2, [r7, #24]
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	462b      	mov	r3, r5
 801147c:	4622      	mov	r2, r4
 801147e:	f7fe fe5f 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8011482:	887b      	ldrh	r3, [r7, #2]
 8011484:	3b01      	subs	r3, #1
 8011486:	b29b      	uxth	r3, r3
 8011488:	b218      	sxth	r0, r3
 801148a:	88bb      	ldrh	r3, [r7, #4]
 801148c:	3301      	adds	r3, #1
 801148e:	b29b      	uxth	r3, r3
 8011490:	b219      	sxth	r1, r3
 8011492:	887b      	ldrh	r3, [r7, #2]
 8011494:	3b01      	subs	r3, #1
 8011496:	b29b      	uxth	r3, r3
 8011498:	b21c      	sxth	r4, r3
 801149a:	883b      	ldrh	r3, [r7, #0]
 801149c:	3b02      	subs	r3, #2
 801149e:	b29b      	uxth	r3, r3
 80114a0:	b21d      	sxth	r5, r3
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	1c9a      	adds	r2, r3, #2
 80114a6:	61ba      	str	r2, [r7, #24]
 80114a8:	881b      	ldrh	r3, [r3, #0]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	462b      	mov	r3, r5
 80114ae:	4622      	mov	r2, r4
 80114b0:	f7fe fe46 	bl	8010140 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80114b4:	88fb      	ldrh	r3, [r7, #6]
 80114b6:	3302      	adds	r3, #2
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	b218      	sxth	r0, r3
 80114bc:	88bb      	ldrh	r3, [r7, #4]
 80114be:	3302      	adds	r3, #2
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	b219      	sxth	r1, r3
 80114c4:	887b      	ldrh	r3, [r7, #2]
 80114c6:	3b03      	subs	r3, #3
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	b21c      	sxth	r4, r3
 80114cc:	88bb      	ldrh	r3, [r7, #4]
 80114ce:	3302      	adds	r3, #2
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	b21d      	sxth	r5, r3
 80114d4:	69bb      	ldr	r3, [r7, #24]
 80114d6:	1c9a      	adds	r2, r3, #2
 80114d8:	61ba      	str	r2, [r7, #24]
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	462b      	mov	r3, r5
 80114e0:	4622      	mov	r2, r4
 80114e2:	f7fe fe2d 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80114e6:	88fb      	ldrh	r3, [r7, #6]
 80114e8:	3302      	adds	r3, #2
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	b218      	sxth	r0, r3
 80114ee:	88bb      	ldrh	r3, [r7, #4]
 80114f0:	3303      	adds	r3, #3
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	b219      	sxth	r1, r3
 80114f6:	88fb      	ldrh	r3, [r7, #6]
 80114f8:	3302      	adds	r3, #2
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	b21c      	sxth	r4, r3
 80114fe:	883b      	ldrh	r3, [r7, #0]
 8011500:	3b03      	subs	r3, #3
 8011502:	b29b      	uxth	r3, r3
 8011504:	b21d      	sxth	r5, r3
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	1c9a      	adds	r2, r3, #2
 801150a:	61ba      	str	r2, [r7, #24]
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	462b      	mov	r3, r5
 8011512:	4622      	mov	r2, r4
 8011514:	f7fe fe14 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8011518:	88fb      	ldrh	r3, [r7, #6]
 801151a:	3302      	adds	r3, #2
 801151c:	b29b      	uxth	r3, r3
 801151e:	b218      	sxth	r0, r3
 8011520:	883b      	ldrh	r3, [r7, #0]
 8011522:	3b02      	subs	r3, #2
 8011524:	b29b      	uxth	r3, r3
 8011526:	b219      	sxth	r1, r3
 8011528:	887b      	ldrh	r3, [r7, #2]
 801152a:	3b02      	subs	r3, #2
 801152c:	b29b      	uxth	r3, r3
 801152e:	b21c      	sxth	r4, r3
 8011530:	883b      	ldrh	r3, [r7, #0]
 8011532:	3b02      	subs	r3, #2
 8011534:	b29b      	uxth	r3, r3
 8011536:	b21d      	sxth	r5, r3
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	1c9a      	adds	r2, r3, #2
 801153c:	61ba      	str	r2, [r7, #24]
 801153e:	881b      	ldrh	r3, [r3, #0]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	462b      	mov	r3, r5
 8011544:	4622      	mov	r2, r4
 8011546:	f7fe fdfb 	bl	8010140 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 801154a:	887b      	ldrh	r3, [r7, #2]
 801154c:	3b02      	subs	r3, #2
 801154e:	b29b      	uxth	r3, r3
 8011550:	b218      	sxth	r0, r3
 8011552:	88bb      	ldrh	r3, [r7, #4]
 8011554:	3302      	adds	r3, #2
 8011556:	b29b      	uxth	r3, r3
 8011558:	b219      	sxth	r1, r3
 801155a:	887b      	ldrh	r3, [r7, #2]
 801155c:	3b02      	subs	r3, #2
 801155e:	b29b      	uxth	r3, r3
 8011560:	b21a      	sxth	r2, r3
 8011562:	883b      	ldrh	r3, [r7, #0]
 8011564:	3b03      	subs	r3, #3
 8011566:	b29b      	uxth	r3, r3
 8011568:	b21c      	sxth	r4, r3
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	881b      	ldrh	r3, [r3, #0]
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	4623      	mov	r3, r4
 8011572:	f7fe fde5 	bl	8010140 <UG_DrawLine>
}
 8011576:	bf00      	nop
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011580 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 801158c:	79fb      	ldrb	r3, [r7, #7]
 801158e:	2b03      	cmp	r3, #3
 8011590:	d810      	bhi.n	80115b4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8011592:	4b0b      	ldr	r3, [pc, #44]	; (80115c0 <UG_DriverRegister+0x40>)
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	330a      	adds	r3, #10
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	4413      	add	r3, r2
 801159e:	683a      	ldr	r2, [r7, #0]
 80115a0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80115a2:	4b07      	ldr	r3, [pc, #28]	; (80115c0 <UG_DriverRegister+0x40>)
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	79fb      	ldrb	r3, [r7, #7]
 80115a8:	330a      	adds	r3, #10
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	4413      	add	r3, r2
 80115ae:	2203      	movs	r2, #3
 80115b0:	721a      	strb	r2, [r3, #8]
 80115b2:	e000      	b.n	80115b6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80115b4:	bf00      	nop
}
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr
 80115c0:	20001b08 	.word	0x20001b08

080115c4 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80115ca:	4b5e      	ldr	r3, [pc, #376]	; (8011744 <UG_Update+0x180>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80115d2:	f003 0301 	and.w	r3, r3, #1
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00a      	beq.n	80115f0 <UG_Update+0x2c>
 80115da:	4b5a      	ldr	r3, [pc, #360]	; (8011744 <UG_Update+0x180>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80115e2:	4b58      	ldr	r3, [pc, #352]	; (8011744 <UG_Update+0x180>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f022 0201 	bic.w	r2, r2, #1
 80115ea:	b2d2      	uxtb	r2, r2
 80115ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80115f0:	4b54      	ldr	r3, [pc, #336]	; (8011744 <UG_Update+0x180>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	68da      	ldr	r2, [r3, #12]
 80115f6:	4b53      	ldr	r3, [pc, #332]	; (8011744 <UG_Update+0x180>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	691b      	ldr	r3, [r3, #16]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d071      	beq.n	80116e4 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8011600:	4b50      	ldr	r3, [pc, #320]	; (8011744 <UG_Update+0x180>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d06c      	beq.n	80116e4 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 801160a:	4b4e      	ldr	r3, [pc, #312]	; (8011744 <UG_Update+0x180>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	4b4d      	ldr	r3, [pc, #308]	; (8011744 <UG_Update+0x180>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	6912      	ldr	r2, [r2, #16]
 8011614:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8011616:	4b4b      	ldr	r3, [pc, #300]	; (8011744 <UG_Update+0x180>)
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	4b4a      	ldr	r3, [pc, #296]	; (8011744 <UG_Update+0x180>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	68d2      	ldr	r2, [r2, #12]
 8011620:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8011622:	4b48      	ldr	r3, [pc, #288]	; (8011744 <UG_Update+0x180>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	695b      	ldr	r3, [r3, #20]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d045      	beq.n	80116b8 <UG_Update+0xf4>
 801162c:	4b45      	ldr	r3, [pc, #276]	; (8011744 <UG_Update+0x180>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	695b      	ldr	r3, [r3, #20]
 8011632:	7d9b      	ldrb	r3, [r3, #22]
 8011634:	f003 0302 	and.w	r3, r3, #2
 8011638:	2b00      	cmp	r3, #0
 801163a:	d03d      	beq.n	80116b8 <UG_Update+0xf4>
 801163c:	4b41      	ldr	r3, [pc, #260]	; (8011744 <UG_Update+0x180>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	695b      	ldr	r3, [r3, #20]
 8011642:	7a1b      	ldrb	r3, [r3, #8]
 8011644:	f003 0308 	and.w	r3, r3, #8
 8011648:	2b00      	cmp	r3, #0
 801164a:	d035      	beq.n	80116b8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 801164c:	4b3d      	ldr	r3, [pc, #244]	; (8011744 <UG_Update+0x180>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	695b      	ldr	r3, [r3, #20]
 8011652:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011656:	4b3b      	ldr	r3, [pc, #236]	; (8011744 <UG_Update+0x180>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011660:	429a      	cmp	r2, r3
 8011662:	d123      	bne.n	80116ac <UG_Update+0xe8>
 8011664:	4b37      	ldr	r3, [pc, #220]	; (8011744 <UG_Update+0x180>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	695b      	ldr	r3, [r3, #20]
 801166a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801166e:	4b35      	ldr	r3, [pc, #212]	; (8011744 <UG_Update+0x180>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011678:	429a      	cmp	r2, r3
 801167a:	d117      	bne.n	80116ac <UG_Update+0xe8>
 801167c:	4b31      	ldr	r3, [pc, #196]	; (8011744 <UG_Update+0x180>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	695b      	ldr	r3, [r3, #20]
 8011682:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8011686:	4b2f      	ldr	r3, [pc, #188]	; (8011744 <UG_Update+0x180>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011690:	429a      	cmp	r2, r3
 8011692:	d10b      	bne.n	80116ac <UG_Update+0xe8>
 8011694:	4b2b      	ldr	r3, [pc, #172]	; (8011744 <UG_Update+0x180>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	695b      	ldr	r3, [r3, #20]
 801169a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801169e:	4b29      	ldr	r3, [pc, #164]	; (8011744 <UG_Update+0x180>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d005      	beq.n	80116b8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80116ac:	4b25      	ldr	r3, [pc, #148]	; (8011744 <UG_Update+0x180>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	695b      	ldr	r3, [r3, #20]
 80116b2:	4618      	mov	r0, r3
 80116b4:	f000 f848 	bl	8011748 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80116b8:	4b22      	ldr	r3, [pc, #136]	; (8011744 <UG_Update+0x180>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	7a1a      	ldrb	r2, [r3, #8]
 80116c0:	4b20      	ldr	r3, [pc, #128]	; (8011744 <UG_Update+0x180>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116ca:	b2d2      	uxtb	r2, r2
 80116cc:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80116ce:	4b1d      	ldr	r3, [pc, #116]	; (8011744 <UG_Update+0x180>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	7a1a      	ldrb	r2, [r3, #8]
 80116d6:	4b1b      	ldr	r3, [pc, #108]	; (8011744 <UG_Update+0x180>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	691b      	ldr	r3, [r3, #16]
 80116dc:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80116e0:	b2d2      	uxtb	r2, r2
 80116e2:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80116e4:	4b17      	ldr	r3, [pc, #92]	; (8011744 <UG_Update+0x180>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	691b      	ldr	r3, [r3, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d01b      	beq.n	8011726 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80116ee:	4b15      	ldr	r3, [pc, #84]	; (8011744 <UG_Update+0x180>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	691b      	ldr	r3, [r3, #16]
 80116f4:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	7a1b      	ldrb	r3, [r3, #8]
 80116fa:	f003 0320 	and.w	r3, r3, #32
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d002      	beq.n	8011708 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f000 f8ca 	bl	801189c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	7a1b      	ldrb	r3, [r3, #8]
 801170c:	f003 0308 	and.w	r3, r3, #8
 8011710:	2b00      	cmp	r3, #0
 8011712:	d008      	beq.n	8011726 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fb81 	bl	8010e1c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f7ff fc34 	bl	8010f88 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8011720:	6878      	ldr	r0, [r7, #4]
 8011722:	f7ff fc7b 	bl	801101c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8011726:	4b07      	ldr	r3, [pc, #28]	; (8011744 <UG_Update+0x180>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d004      	beq.n	801173c <UG_Update+0x178>
     gui->device->flush();
 8011732:	4b04      	ldr	r3, [pc, #16]	; (8011744 <UG_Update+0x180>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	4798      	blx	r3
   }
}
 801173c:	bf00      	nop
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	20001b08 	.word	0x20001b08

08011748 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b08f      	sub	sp, #60	; 0x3c
 801174c:	af02      	add	r7, sp, #8
 801174e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	f000 809a 	beq.w	801188c <_UG_WindowDrawTitle+0x144>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	7a1b      	ldrb	r3, [r3, #8]
 801175c:	f003 0302 	and.w	r3, r3, #2
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 8093 	beq.w	801188c <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	89db      	ldrh	r3, [r3, #14]
 801176a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	8a1b      	ldrh	r3, [r3, #16]
 8011770:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	8a5b      	ldrh	r3, [r3, #18]
 8011776:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	8a9b      	ldrh	r3, [r3, #20]
 801177c:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7d9b      	ldrb	r3, [r3, #22]
 8011782:	f003 0301 	and.w	r3, r3, #1
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00f      	beq.n	80117aa <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 801178a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801178c:	3303      	adds	r3, #3
 801178e:	b29b      	uxth	r3, r3
 8011790:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8011792:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011794:	3303      	adds	r3, #3
 8011796:	b29b      	uxth	r3, r3
 8011798:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 801179a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801179c:	3b03      	subs	r3, #3
 801179e:	b29b      	uxth	r3, r3
 80117a0:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80117a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80117a4:	3b03      	subs	r3, #3
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80117aa:	4b3b      	ldr	r3, [pc, #236]	; (8011898 <_UG_WindowDrawTitle+0x150>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	691b      	ldr	r3, [r3, #16]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d106      	bne.n	80117c4 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80117ba:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117c0:	83bb      	strh	r3, [r7, #28]
 80117c2:	e005      	b.n	80117d0 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80117c8:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117ce:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117da:	4413      	add	r3, r2
 80117dc:	b29b      	uxth	r3, r3
 80117de:	3b01      	subs	r3, #1
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	b21c      	sxth	r4, r3
 80117e4:	8bfb      	ldrh	r3, [r7, #30]
 80117e6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80117ea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80117ee:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	4623      	mov	r3, r4
 80117f6:	f7fe fb03 	bl	800fe00 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	699b      	ldr	r3, [r3, #24]
 80117fe:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	69db      	ldr	r3, [r3, #28]
 8011804:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8011806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011808:	3303      	adds	r3, #3
 801180a:	b29b      	uxth	r3, r3
 801180c:	b21b      	sxth	r3, r3
 801180e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8011810:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011812:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8011814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011816:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801181e:	b29a      	uxth	r2, r3
 8011820:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011822:	4413      	add	r3, r2
 8011824:	b29b      	uxth	r3, r3
 8011826:	3b01      	subs	r3, #1
 8011828:	b29b      	uxth	r3, r3
 801182a:	b21b      	sxth	r3, r3
 801182c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011834:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 801183e:	b21b      	sxth	r3, r3
 8011840:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8011848:	b21b      	sxth	r3, r3
 801184a:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 801184c:	f107 030c 	add.w	r3, r7, #12
 8011850:	4618      	mov	r0, r3
 8011852:	f7ff fc2f 	bl	80110b4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801185c:	b29a      	uxth	r2, r3
 801185e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011860:	4413      	add	r3, r2
 8011862:	b29b      	uxth	r3, r3
 8011864:	b219      	sxth	r1, r3
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801186c:	b29a      	uxth	r2, r3
 801186e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011870:	4413      	add	r3, r2
 8011872:	b29b      	uxth	r3, r3
 8011874:	b21b      	sxth	r3, r3
 8011876:	f649 5413 	movw	r4, #40211	; 0x9d13
 801187a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801187e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011882:	9400      	str	r4, [sp, #0]
 8011884:	f7fe fc5c 	bl	8010140 <UG_DrawLine>
      return UG_RESULT_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	e001      	b.n	8011890 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 801188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011890:	4618      	mov	r0, r3
 8011892:	3734      	adds	r7, #52	; 0x34
 8011894:	46bd      	mov	sp, r7
 8011896:	bd90      	pop	{r4, r7, pc}
 8011898:	20001b08 	.word	0x20001b08

0801189c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b089      	sub	sp, #36	; 0x24
 80118a0:	af02      	add	r7, sp, #8
 80118a2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	89db      	ldrh	r3, [r3, #14]
 80118a8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	8a1b      	ldrh	r3, [r3, #16]
 80118ae:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8a5b      	ldrh	r3, [r3, #18]
 80118b4:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	8a9b      	ldrh	r3, [r3, #20]
 80118ba:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	7a1b      	ldrb	r3, [r3, #8]
 80118c0:	f023 0320 	bic.w	r3, r3, #32
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	7a1b      	ldrb	r3, [r3, #8]
 80118ce:	f003 0308 	and.w	r3, r3, #8
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f000 8084 	beq.w	80119e0 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	7d9b      	ldrb	r3, [r3, #22]
 80118dc:	f003 0301 	and.w	r3, r3, #1
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d021      	beq.n	8011928 <_UG_WindowUpdate+0x8c>
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	7a1b      	ldrb	r3, [r3, #8]
 80118e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d11b      	bne.n	8011928 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80118f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80118f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80118f8:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80118fc:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8011900:	4c43      	ldr	r4, [pc, #268]	; (8011a10 <_UG_WindowUpdate+0x174>)
 8011902:	9400      	str	r4, [sp, #0]
 8011904:	f7ff fd1a 	bl	801133c <_UG_DrawObjectFrame>
         xs+=3;
 8011908:	8abb      	ldrh	r3, [r7, #20]
 801190a:	3303      	adds	r3, #3
 801190c:	b29b      	uxth	r3, r3
 801190e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8011910:	8a7b      	ldrh	r3, [r7, #18]
 8011912:	3303      	adds	r3, #3
 8011914:	b29b      	uxth	r3, r3
 8011916:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8011918:	8a3b      	ldrh	r3, [r7, #16]
 801191a:	3b03      	subs	r3, #3
 801191c:	b29b      	uxth	r3, r3
 801191e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8011920:	89fb      	ldrh	r3, [r7, #14]
 8011922:	3b03      	subs	r3, #3
 8011924:	b29b      	uxth	r3, r3
 8011926:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	7d9b      	ldrb	r3, [r3, #22]
 801192c:	f003 0302 	and.w	r3, r3, #2
 8011930:	2b00      	cmp	r3, #0
 8011932:	d01a      	beq.n	801196a <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff ff07 	bl	8011748 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011940:	b29a      	uxth	r2, r3
 8011942:	8a7b      	ldrh	r3, [r7, #18]
 8011944:	4413      	add	r3, r2
 8011946:	b29b      	uxth	r3, r3
 8011948:	3301      	adds	r3, #1
 801194a:	b29b      	uxth	r3, r3
 801194c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	7a1b      	ldrb	r3, [r3, #8]
 8011952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011956:	2b00      	cmp	r3, #0
 8011958:	d007      	beq.n	801196a <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	7a1b      	ldrb	r3, [r3, #8]
 801195e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011962:	b2da      	uxtb	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	721a      	strb	r2, [r3, #8]
            return;
 8011968:	e04e      	b.n	8011a08 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8011972:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011976:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801197a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	4623      	mov	r3, r4
 8011982:	f7fe fa3d 	bl	800fe00 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 801198c:	2300      	movs	r3, #0
 801198e:	82fb      	strh	r3, [r7, #22]
 8011990:	e021      	b.n	80119d6 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	8afb      	ldrh	r3, [r7, #22]
 8011998:	015b      	lsls	r3, r3, #5
 801199a:	4413      	add	r3, r2
 801199c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d112      	bne.n	80119d0 <_UG_WindowUpdate+0x134>
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	f003 0302 	and.w	r3, r3, #2
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00c      	beq.n	80119d0 <_UG_WindowUpdate+0x134>
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 0308 	and.w	r3, r3, #8
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d006      	beq.n	80119d0 <_UG_WindowUpdate+0x134>
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80119ca:	b2da      	uxtb	r2, r3
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80119d0:	8afb      	ldrh	r3, [r7, #22]
 80119d2:	3301      	adds	r3, #1
 80119d4:	82fb      	strh	r3, [r7, #22]
 80119d6:	8afa      	ldrh	r2, [r7, #22]
 80119d8:	89bb      	ldrh	r3, [r7, #12]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d3d9      	bcc.n	8011992 <_UG_WindowUpdate+0xf6>
 80119de:	e013      	b.n	8011a08 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80119f8:	4b06      	ldr	r3, [pc, #24]	; (8011a14 <_UG_WindowUpdate+0x178>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a00:	9300      	str	r3, [sp, #0]
 8011a02:	4623      	mov	r3, r4
 8011a04:	f7fe f9fc 	bl	800fe00 <UG_FillFrame>
   }
}
 8011a08:	371c      	adds	r7, #28
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd90      	pop	{r4, r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	0801ba84 	.word	0x0801ba84
 8011a14:	20001b08 	.word	0x20001b08

08011a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	460b      	mov	r3, r1
 8011a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011a24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011a28:	f002 f8fc 	bl	8013c24 <USBD_static_malloc>
 8011a2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d105      	bne.n	8011a40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2200      	movs	r2, #0
 8011a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011a3c:	2302      	movs	r3, #2
 8011a3e:	e066      	b.n	8011b0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	68fa      	ldr	r2, [r7, #12]
 8011a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7c1b      	ldrb	r3, [r3, #16]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d119      	bne.n	8011a84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a54:	2202      	movs	r2, #2
 8011a56:	2181      	movs	r1, #129	; 0x81
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f001 ff8a 	bl	8013972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2201      	movs	r2, #1
 8011a62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a68:	2202      	movs	r2, #2
 8011a6a:	2101      	movs	r1, #1
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f001 ff80 	bl	8013972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2201      	movs	r2, #1
 8011a76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2210      	movs	r2, #16
 8011a7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011a82:	e016      	b.n	8011ab2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011a84:	2340      	movs	r3, #64	; 0x40
 8011a86:	2202      	movs	r2, #2
 8011a88:	2181      	movs	r1, #129	; 0x81
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f001 ff71 	bl	8013972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2201      	movs	r2, #1
 8011a94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011a96:	2340      	movs	r3, #64	; 0x40
 8011a98:	2202      	movs	r2, #2
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f001 ff68 	bl	8013972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	2210      	movs	r2, #16
 8011aae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011ab2:	2308      	movs	r3, #8
 8011ab4:	2203      	movs	r2, #3
 8011ab6:	2182      	movs	r1, #130	; 0x82
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f001 ff5a 	bl	8013972 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	7c1b      	ldrb	r3, [r3, #16]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d109      	bne.n	8011afc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011af2:	2101      	movs	r1, #1
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f002 f82b 	bl	8013b50 <USBD_LL_PrepareReceive>
 8011afa:	e007      	b.n	8011b0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b02:	2340      	movs	r3, #64	; 0x40
 8011b04:	2101      	movs	r1, #1
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f002 f822 	bl	8013b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3710      	adds	r7, #16
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}

08011b16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b16:	b580      	push	{r7, lr}
 8011b18:	b082      	sub	sp, #8
 8011b1a:	af00      	add	r7, sp, #0
 8011b1c:	6078      	str	r0, [r7, #4]
 8011b1e:	460b      	mov	r3, r1
 8011b20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011b22:	2181      	movs	r1, #129	; 0x81
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f001 ff4a 	bl	80139be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011b30:	2101      	movs	r1, #1
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f001 ff43 	bl	80139be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011b40:	2182      	movs	r1, #130	; 0x82
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f001 ff3b 	bl	80139be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2200      	movs	r2, #0
 8011b54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00e      	beq.n	8011b80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b72:	4618      	mov	r0, r3
 8011b74:	f002 f864 	bl	8013c40 <USBD_static_free>
    pdev->pClassData = NULL;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011b80:	2300      	movs	r3, #0
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
	...

08011b8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d101      	bne.n	8011bb4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	e0af      	b.n	8011d14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d03f      	beq.n	8011c40 <USBD_CDC_Setup+0xb4>
 8011bc0:	2b20      	cmp	r3, #32
 8011bc2:	f040 809f 	bne.w	8011d04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	88db      	ldrh	r3, [r3, #6]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d02e      	beq.n	8011c2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	b25b      	sxtb	r3, r3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da16      	bge.n	8011c06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8011be4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011be6:	683a      	ldr	r2, [r7, #0]
 8011be8:	88d2      	ldrh	r2, [r2, #6]
 8011bea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	88db      	ldrh	r3, [r3, #6]
 8011bf0:	2b07      	cmp	r3, #7
 8011bf2:	bf28      	it	cs
 8011bf4:	2307      	movcs	r3, #7
 8011bf6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	89fa      	ldrh	r2, [r7, #14]
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f001 facf 	bl	80131a2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8011c04:	e085      	b.n	8011d12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	785a      	ldrb	r2, [r3, #1]
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	88db      	ldrh	r3, [r3, #6]
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011c1c:	6939      	ldr	r1, [r7, #16]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	88db      	ldrh	r3, [r3, #6]
 8011c22:	461a      	mov	r2, r3
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f001 fae8 	bl	80131fa <USBD_CtlPrepareRx>
      break;
 8011c2a:	e072      	b.n	8011d12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	7850      	ldrb	r0, [r2, #1]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	6839      	ldr	r1, [r7, #0]
 8011c3c:	4798      	blx	r3
      break;
 8011c3e:	e068      	b.n	8011d12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	2b0b      	cmp	r3, #11
 8011c46:	d852      	bhi.n	8011cee <USBD_CDC_Setup+0x162>
 8011c48:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <USBD_CDC_Setup+0xc4>)
 8011c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c4e:	bf00      	nop
 8011c50:	08011c81 	.word	0x08011c81
 8011c54:	08011cfd 	.word	0x08011cfd
 8011c58:	08011cef 	.word	0x08011cef
 8011c5c:	08011cef 	.word	0x08011cef
 8011c60:	08011cef 	.word	0x08011cef
 8011c64:	08011cef 	.word	0x08011cef
 8011c68:	08011cef 	.word	0x08011cef
 8011c6c:	08011cef 	.word	0x08011cef
 8011c70:	08011cef 	.word	0x08011cef
 8011c74:	08011cef 	.word	0x08011cef
 8011c78:	08011cab 	.word	0x08011cab
 8011c7c:	08011cd5 	.word	0x08011cd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b03      	cmp	r3, #3
 8011c8a:	d107      	bne.n	8011c9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011c8c:	f107 030a 	add.w	r3, r7, #10
 8011c90:	2202      	movs	r2, #2
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f001 fa84 	bl	80131a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011c9a:	e032      	b.n	8011d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011c9c:	6839      	ldr	r1, [r7, #0]
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f001 fa0e 	bl	80130c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8011ca8:	e02b      	b.n	8011d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cb0:	b2db      	uxtb	r3, r3
 8011cb2:	2b03      	cmp	r3, #3
 8011cb4:	d107      	bne.n	8011cc6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011cb6:	f107 030d 	add.w	r3, r7, #13
 8011cba:	2201      	movs	r2, #1
 8011cbc:	4619      	mov	r1, r3
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f001 fa6f 	bl	80131a2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011cc4:	e01d      	b.n	8011d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8011cc6:	6839      	ldr	r1, [r7, #0]
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f001 f9f9 	bl	80130c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011cce:	2303      	movs	r3, #3
 8011cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8011cd2:	e016      	b.n	8011d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b03      	cmp	r3, #3
 8011cde:	d00f      	beq.n	8011d00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f001 f9ec 	bl	80130c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8011ce8:	2303      	movs	r3, #3
 8011cea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011cec:	e008      	b.n	8011d00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f001 f9e5 	bl	80130c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8011cf6:	2303      	movs	r3, #3
 8011cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8011cfa:	e002      	b.n	8011d02 <USBD_CDC_Setup+0x176>
          break;
 8011cfc:	bf00      	nop
 8011cfe:	e008      	b.n	8011d12 <USBD_CDC_Setup+0x186>
          break;
 8011d00:	bf00      	nop
      }
      break;
 8011d02:	e006      	b.n	8011d12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f001 f9da 	bl	80130c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8011d0c:	2303      	movs	r3, #3
 8011d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8011d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8011d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3718      	adds	r7, #24
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	460b      	mov	r3, r1
 8011d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e04f      	b.n	8011dde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011d46:	78fa      	ldrb	r2, [r7, #3]
 8011d48:	6879      	ldr	r1, [r7, #4]
 8011d4a:	4613      	mov	r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4413      	add	r3, r2
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	3318      	adds	r3, #24
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d029      	beq.n	8011db0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011d5c:	78fa      	ldrb	r2, [r7, #3]
 8011d5e:	6879      	ldr	r1, [r7, #4]
 8011d60:	4613      	mov	r3, r2
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	440b      	add	r3, r1
 8011d6a:	3318      	adds	r3, #24
 8011d6c:	681a      	ldr	r2, [r3, #0]
 8011d6e:	78f9      	ldrb	r1, [r7, #3]
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	460b      	mov	r3, r1
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	440b      	add	r3, r1
 8011d78:	00db      	lsls	r3, r3, #3
 8011d7a:	4403      	add	r3, r0
 8011d7c:	3320      	adds	r3, #32
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	fbb2 f1f3 	udiv	r1, r2, r3
 8011d84:	fb01 f303 	mul.w	r3, r1, r3
 8011d88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d110      	bne.n	8011db0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011d8e:	78fa      	ldrb	r2, [r7, #3]
 8011d90:	6879      	ldr	r1, [r7, #4]
 8011d92:	4613      	mov	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	4413      	add	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	440b      	add	r3, r1
 8011d9c:	3318      	adds	r3, #24
 8011d9e:	2200      	movs	r2, #0
 8011da0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011da2:	78f9      	ldrb	r1, [r7, #3]
 8011da4:	2300      	movs	r3, #0
 8011da6:	2200      	movs	r2, #0
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f001 feb0 	bl	8013b0e <USBD_LL_Transmit>
 8011dae:	e015      	b.n	8011ddc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d00b      	beq.n	8011ddc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011dca:	691b      	ldr	r3, [r3, #16]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011dd8:	78fa      	ldrb	r2, [r7, #3]
 8011dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011ddc:	2300      	movs	r3, #0
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}

08011de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011de6:	b580      	push	{r7, lr}
 8011de8:	b084      	sub	sp, #16
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	460b      	mov	r3, r1
 8011df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011df8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d101      	bne.n	8011e08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011e04:	2303      	movs	r3, #3
 8011e06:	e015      	b.n	8011e34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f001 fec0 	bl	8013b92 <USBD_LL_GetRxDataSize>
 8011e12:	4602      	mov	r2, r0
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	68fa      	ldr	r2, [r7, #12]
 8011e24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011e2e:	4611      	mov	r1, r2
 8011e30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011e32:	2300      	movs	r3, #0
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d101      	bne.n	8011e56 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8011e52:	2303      	movs	r3, #3
 8011e54:	e01b      	b.n	8011e8e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d015      	beq.n	8011e8c <USBD_CDC_EP0_RxReady+0x50>
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011e66:	2bff      	cmp	r3, #255	; 0xff
 8011e68:	d010      	beq.n	8011e8c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011e78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011e80:	b292      	uxth	r2, r2
 8011e82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	22ff      	movs	r2, #255	; 0xff
 8011e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2243      	movs	r2, #67	; 0x43
 8011ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011ea6:	4b03      	ldr	r3, [pc, #12]	; (8011eb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	2000022c 	.word	0x2000022c

08011eb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2243      	movs	r2, #67	; 0x43
 8011ec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011ec6:	4b03      	ldr	r3, [pc, #12]	; (8011ed4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	370c      	adds	r7, #12
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed2:	4770      	bx	lr
 8011ed4:	200001e8 	.word	0x200001e8

08011ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2243      	movs	r2, #67	; 0x43
 8011ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011ee6:	4b03      	ldr	r3, [pc, #12]	; (8011ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr
 8011ef4:	20000270 	.word	0x20000270

08011ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	220a      	movs	r2, #10
 8011f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011f06:	4b03      	ldr	r3, [pc, #12]	; (8011f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	370c      	adds	r7, #12
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr
 8011f14:	200001a4 	.word	0x200001a4

08011f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d101      	bne.n	8011f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	e004      	b.n	8011f36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	683a      	ldr	r2, [r7, #0]
 8011f30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011f34:	2300      	movs	r3, #0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	370c      	adds	r7, #12
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011f42:	b480      	push	{r7}
 8011f44:	b087      	sub	sp, #28
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	60b9      	str	r1, [r7, #8]
 8011f4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f54:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d101      	bne.n	8011f60 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011f5c:	2303      	movs	r3, #3
 8011f5e:	e008      	b.n	8011f72 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	68ba      	ldr	r2, [r7, #8]
 8011f64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	371c      	adds	r7, #28
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011f7e:	b480      	push	{r7}
 8011f80:	b085      	sub	sp, #20
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d101      	bne.n	8011f9a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8011f96:	2303      	movs	r3, #3
 8011f98:	e004      	b.n	8011fa4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	683a      	ldr	r2, [r7, #0]
 8011f9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011fa2:	2300      	movs	r3, #0
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3714      	adds	r7, #20
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d101      	bne.n	8011fd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011fce:	2303      	movs	r3, #3
 8011fd0:	e01a      	b.n	8012008 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d114      	bne.n	8012006 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011ffa:	2181      	movs	r1, #129	; 0x81
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f001 fd86 	bl	8013b0e <USBD_LL_Transmit>

    ret = USBD_OK;
 8012002:	2300      	movs	r3, #0
 8012004:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012006:	7bfb      	ldrb	r3, [r7, #15]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3710      	adds	r7, #16
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801201e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012026:	2b00      	cmp	r3, #0
 8012028:	d101      	bne.n	801202e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801202a:	2303      	movs	r3, #3
 801202c:	e016      	b.n	801205c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	7c1b      	ldrb	r3, [r3, #16]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d109      	bne.n	801204a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801203c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012040:	2101      	movs	r1, #1
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f001 fd84 	bl	8013b50 <USBD_LL_PrepareReceive>
 8012048:	e007      	b.n	801205a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012050:	2340      	movs	r3, #64	; 0x40
 8012052:	2101      	movs	r1, #1
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f001 fd7b 	bl	8013b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	4613      	mov	r3, r2
 8012070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d101      	bne.n	801207c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012078:	2303      	movs	r3, #3
 801207a:	e01f      	b.n	80120bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2200      	movs	r2, #0
 8012080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2200      	movs	r2, #0
 8012090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d003      	beq.n	80120a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	68ba      	ldr	r2, [r7, #8]
 801209e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2201      	movs	r2, #1
 80120a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	79fa      	ldrb	r2, [r7, #7]
 80120ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80120b0:	68f8      	ldr	r0, [r7, #12]
 80120b2:	f001 fbe3 	bl	801387c <USBD_LL_Init>
 80120b6:	4603      	mov	r3, r0
 80120b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3718      	adds	r7, #24
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80120ce:	2300      	movs	r3, #0
 80120d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d101      	bne.n	80120dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80120d8:	2303      	movs	r3, #3
 80120da:	e016      	b.n	801210a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	683a      	ldr	r2, [r7, #0]
 80120e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120f8:	f107 020e 	add.w	r2, r7, #14
 80120fc:	4610      	mov	r0, r2
 80120fe:	4798      	blx	r3
 8012100:	4602      	mov	r2, r0
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012108:	2300      	movs	r3, #0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3710      	adds	r7, #16
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b082      	sub	sp, #8
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f001 fc0e 	bl	801393c <USBD_LL_Start>
 8012120:	4603      	mov	r3, r0
}
 8012122:	4618      	mov	r0, r3
 8012124:	3708      	adds	r7, #8
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801212a:	b480      	push	{r7}
 801212c:	b083      	sub	sp, #12
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012132:	2300      	movs	r3, #0
}
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	460b      	mov	r3, r1
 801214a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801214c:	2303      	movs	r3, #3
 801214e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012156:	2b00      	cmp	r3, #0
 8012158:	d009      	beq.n	801216e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	78fa      	ldrb	r2, [r7, #3]
 8012164:	4611      	mov	r1, r2
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	4798      	blx	r3
 801216a:	4603      	mov	r3, r0
 801216c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801218a:	2b00      	cmp	r3, #0
 801218c:	d007      	beq.n	801219e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	78fa      	ldrb	r2, [r7, #3]
 8012198:	4611      	mov	r1, r2
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	4798      	blx	r3
  }

  return USBD_OK;
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	4618      	mov	r0, r3
 80121bc:	f000 ff46 	bl	801304c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2201      	movs	r2, #1
 80121c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80121ce:	461a      	mov	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80121dc:	f003 031f 	and.w	r3, r3, #31
 80121e0:	2b02      	cmp	r3, #2
 80121e2:	d01a      	beq.n	801221a <USBD_LL_SetupStage+0x72>
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d822      	bhi.n	801222e <USBD_LL_SetupStage+0x86>
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d002      	beq.n	80121f2 <USBD_LL_SetupStage+0x4a>
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d00a      	beq.n	8012206 <USBD_LL_SetupStage+0x5e>
 80121f0:	e01d      	b.n	801222e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121f8:	4619      	mov	r1, r3
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 f9ee 	bl	80125dc <USBD_StdDevReq>
 8012200:	4603      	mov	r3, r0
 8012202:	73fb      	strb	r3, [r7, #15]
      break;
 8012204:	e020      	b.n	8012248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801220c:	4619      	mov	r1, r3
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fa52 	bl	80126b8 <USBD_StdItfReq>
 8012214:	4603      	mov	r3, r0
 8012216:	73fb      	strb	r3, [r7, #15]
      break;
 8012218:	e016      	b.n	8012248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012220:	4619      	mov	r1, r3
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f000 fa91 	bl	801274a <USBD_StdEPReq>
 8012228:	4603      	mov	r3, r0
 801222a:	73fb      	strb	r3, [r7, #15]
      break;
 801222c:	e00c      	b.n	8012248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012238:	b2db      	uxtb	r3, r3
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f001 fbdd 	bl	80139fc <USBD_LL_StallEP>
 8012242:	4603      	mov	r3, r0
 8012244:	73fb      	strb	r3, [r7, #15]
      break;
 8012246:	bf00      	nop
  }

  return ret;
 8012248:	7bfb      	ldrb	r3, [r7, #15]
}
 801224a:	4618      	mov	r0, r3
 801224c:	3710      	adds	r7, #16
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b086      	sub	sp, #24
 8012256:	af00      	add	r7, sp, #0
 8012258:	60f8      	str	r0, [r7, #12]
 801225a:	460b      	mov	r3, r1
 801225c:	607a      	str	r2, [r7, #4]
 801225e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012260:	7afb      	ldrb	r3, [r7, #11]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d138      	bne.n	80122d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801226c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012274:	2b03      	cmp	r3, #3
 8012276:	d14a      	bne.n	801230e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	689a      	ldr	r2, [r3, #8]
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	429a      	cmp	r2, r3
 8012282:	d913      	bls.n	80122ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	689a      	ldr	r2, [r3, #8]
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	1ad2      	subs	r2, r2, r3
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	68da      	ldr	r2, [r3, #12]
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	4293      	cmp	r3, r2
 801229c:	bf28      	it	cs
 801229e:	4613      	movcs	r3, r2
 80122a0:	461a      	mov	r2, r3
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f000 ffc5 	bl	8013234 <USBD_CtlContinueRx>
 80122aa:	e030      	b.n	801230e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	2b03      	cmp	r3, #3
 80122b6:	d10b      	bne.n	80122d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122be:	691b      	ldr	r3, [r3, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d005      	beq.n	80122d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ca:	691b      	ldr	r3, [r3, #16]
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f000 ffc0 	bl	8013256 <USBD_CtlSendStatus>
 80122d6:	e01a      	b.n	801230e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b03      	cmp	r3, #3
 80122e2:	d114      	bne.n	801230e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ea:	699b      	ldr	r3, [r3, #24]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00e      	beq.n	801230e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	7afa      	ldrb	r2, [r7, #11]
 80122fa:	4611      	mov	r1, r2
 80122fc:	68f8      	ldr	r0, [r7, #12]
 80122fe:	4798      	blx	r3
 8012300:	4603      	mov	r3, r0
 8012302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012304:	7dfb      	ldrb	r3, [r7, #23]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d001      	beq.n	801230e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801230a:	7dfb      	ldrb	r3, [r7, #23]
 801230c:	e000      	b.n	8012310 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801230e:	2300      	movs	r3, #0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3718      	adds	r7, #24
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	460b      	mov	r3, r1
 8012322:	607a      	str	r2, [r7, #4]
 8012324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012326:	7afb      	ldrb	r3, [r7, #11]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d16b      	bne.n	8012404 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	3314      	adds	r3, #20
 8012330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012338:	2b02      	cmp	r3, #2
 801233a:	d156      	bne.n	80123ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801233c:	693b      	ldr	r3, [r7, #16]
 801233e:	689a      	ldr	r2, [r3, #8]
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	429a      	cmp	r2, r3
 8012346:	d914      	bls.n	8012372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	689a      	ldr	r2, [r3, #8]
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	1ad2      	subs	r2, r2, r3
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	461a      	mov	r2, r3
 801235c:	6879      	ldr	r1, [r7, #4]
 801235e:	68f8      	ldr	r0, [r7, #12]
 8012360:	f000 ff3a 	bl	80131d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012364:	2300      	movs	r3, #0
 8012366:	2200      	movs	r2, #0
 8012368:	2100      	movs	r1, #0
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	f001 fbf0 	bl	8013b50 <USBD_LL_PrepareReceive>
 8012370:	e03b      	b.n	80123ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	68da      	ldr	r2, [r3, #12]
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	429a      	cmp	r2, r3
 801237c:	d11c      	bne.n	80123b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012386:	429a      	cmp	r2, r3
 8012388:	d316      	bcc.n	80123b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012394:	429a      	cmp	r2, r3
 8012396:	d20f      	bcs.n	80123b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012398:	2200      	movs	r2, #0
 801239a:	2100      	movs	r1, #0
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f000 ff1b 	bl	80131d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123aa:	2300      	movs	r3, #0
 80123ac:	2200      	movs	r2, #0
 80123ae:	2100      	movs	r1, #0
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f001 fbcd 	bl	8013b50 <USBD_LL_PrepareReceive>
 80123b6:	e018      	b.n	80123ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d10b      	bne.n	80123dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d005      	beq.n	80123dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123d6:	68db      	ldr	r3, [r3, #12]
 80123d8:	68f8      	ldr	r0, [r7, #12]
 80123da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80123dc:	2180      	movs	r1, #128	; 0x80
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f001 fb0c 	bl	80139fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80123e4:	68f8      	ldr	r0, [r7, #12]
 80123e6:	f000 ff49 	bl	801327c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d122      	bne.n	801243a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f7ff fe98 	bl	801212a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2200      	movs	r2, #0
 80123fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012402:	e01a      	b.n	801243a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b03      	cmp	r3, #3
 801240e:	d114      	bne.n	801243a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00e      	beq.n	801243a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012422:	695b      	ldr	r3, [r3, #20]
 8012424:	7afa      	ldrb	r2, [r7, #11]
 8012426:	4611      	mov	r1, r2
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	4798      	blx	r3
 801242c:	4603      	mov	r3, r0
 801242e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012430:	7dfb      	ldrb	r3, [r7, #23]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d001      	beq.n	801243a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012436:	7dfb      	ldrb	r3, [r7, #23]
 8012438:	e000      	b.n	801243c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801243a:	2300      	movs	r3, #0
}
 801243c:	4618      	mov	r0, r3
 801243e:	3718      	adds	r7, #24
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b082      	sub	sp, #8
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012470:	2b00      	cmp	r3, #0
 8012472:	d101      	bne.n	8012478 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012474:	2303      	movs	r3, #3
 8012476:	e02f      	b.n	80124d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00f      	beq.n	80124a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d009      	beq.n	80124a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	6852      	ldr	r2, [r2, #4]
 801249a:	b2d2      	uxtb	r2, r2
 801249c:	4611      	mov	r1, r2
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80124a2:	2340      	movs	r3, #64	; 0x40
 80124a4:	2200      	movs	r2, #0
 80124a6:	2100      	movs	r1, #0
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f001 fa62 	bl	8013972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2201      	movs	r2, #1
 80124b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	2240      	movs	r2, #64	; 0x40
 80124ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80124be:	2340      	movs	r3, #64	; 0x40
 80124c0:	2200      	movs	r2, #0
 80124c2:	2180      	movs	r1, #128	; 0x80
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f001 fa54 	bl	8013972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2201      	movs	r2, #1
 80124ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2240      	movs	r2, #64	; 0x40
 80124d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80124d6:	2300      	movs	r3, #0
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80124e0:	b480      	push	{r7}
 80124e2:	b083      	sub	sp, #12
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	460b      	mov	r3, r1
 80124ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	78fa      	ldrb	r2, [r7, #3]
 80124f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801250e:	b2da      	uxtb	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2204      	movs	r2, #4
 801251a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801251e:	2300      	movs	r3, #0
}
 8012520:	4618      	mov	r0, r3
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801253a:	b2db      	uxtb	r3, r3
 801253c:	2b04      	cmp	r3, #4
 801253e:	d106      	bne.n	801254e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012546:	b2da      	uxtb	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	370c      	adds	r7, #12
 8012554:	46bd      	mov	sp, r7
 8012556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255a:	4770      	bx	lr

0801255c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801256a:	2b00      	cmp	r3, #0
 801256c:	d101      	bne.n	8012572 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801256e:	2303      	movs	r3, #3
 8012570:	e012      	b.n	8012598 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b03      	cmp	r3, #3
 801257c:	d10b      	bne.n	8012596 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012584:	69db      	ldr	r3, [r3, #28]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d005      	beq.n	8012596 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012590:	69db      	ldr	r3, [r3, #28]
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b087      	sub	sp, #28
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	3301      	adds	r3, #1
 80125b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80125be:	8a3b      	ldrh	r3, [r7, #16]
 80125c0:	021b      	lsls	r3, r3, #8
 80125c2:	b21a      	sxth	r2, r3
 80125c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	b21b      	sxth	r3, r3
 80125cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80125ce:	89fb      	ldrh	r3, [r7, #14]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	371c      	adds	r7, #28
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125e6:	2300      	movs	r3, #0
 80125e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125f2:	2b40      	cmp	r3, #64	; 0x40
 80125f4:	d005      	beq.n	8012602 <USBD_StdDevReq+0x26>
 80125f6:	2b40      	cmp	r3, #64	; 0x40
 80125f8:	d853      	bhi.n	80126a2 <USBD_StdDevReq+0xc6>
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00b      	beq.n	8012616 <USBD_StdDevReq+0x3a>
 80125fe:	2b20      	cmp	r3, #32
 8012600:	d14f      	bne.n	80126a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	6839      	ldr	r1, [r7, #0]
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	4798      	blx	r3
 8012610:	4603      	mov	r3, r0
 8012612:	73fb      	strb	r3, [r7, #15]
      break;
 8012614:	e04a      	b.n	80126ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	785b      	ldrb	r3, [r3, #1]
 801261a:	2b09      	cmp	r3, #9
 801261c:	d83b      	bhi.n	8012696 <USBD_StdDevReq+0xba>
 801261e:	a201      	add	r2, pc, #4	; (adr r2, 8012624 <USBD_StdDevReq+0x48>)
 8012620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012624:	08012679 	.word	0x08012679
 8012628:	0801268d 	.word	0x0801268d
 801262c:	08012697 	.word	0x08012697
 8012630:	08012683 	.word	0x08012683
 8012634:	08012697 	.word	0x08012697
 8012638:	08012657 	.word	0x08012657
 801263c:	0801264d 	.word	0x0801264d
 8012640:	08012697 	.word	0x08012697
 8012644:	0801266f 	.word	0x0801266f
 8012648:	08012661 	.word	0x08012661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801264c:	6839      	ldr	r1, [r7, #0]
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f000 f9de 	bl	8012a10 <USBD_GetDescriptor>
          break;
 8012654:	e024      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012656:	6839      	ldr	r1, [r7, #0]
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f000 fb6d 	bl	8012d38 <USBD_SetAddress>
          break;
 801265e:	e01f      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012660:	6839      	ldr	r1, [r7, #0]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 fbac 	bl	8012dc0 <USBD_SetConfig>
 8012668:	4603      	mov	r3, r0
 801266a:	73fb      	strb	r3, [r7, #15]
          break;
 801266c:	e018      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f000 fc4b 	bl	8012f0c <USBD_GetConfig>
          break;
 8012676:	e013      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fc7c 	bl	8012f78 <USBD_GetStatus>
          break;
 8012680:	e00e      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 fcab 	bl	8012fe0 <USBD_SetFeature>
          break;
 801268a:	e009      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 fcba 	bl	8013008 <USBD_ClrFeature>
          break;
 8012694:	e004      	b.n	80126a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012696:	6839      	ldr	r1, [r7, #0]
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f000 fd11 	bl	80130c0 <USBD_CtlError>
          break;
 801269e:	bf00      	nop
      }
      break;
 80126a0:	e004      	b.n	80126ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80126a2:	6839      	ldr	r1, [r7, #0]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f000 fd0b 	bl	80130c0 <USBD_CtlError>
      break;
 80126aa:	bf00      	nop
  }

  return ret;
 80126ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop

080126b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126c2:	2300      	movs	r3, #0
 80126c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126ce:	2b40      	cmp	r3, #64	; 0x40
 80126d0:	d005      	beq.n	80126de <USBD_StdItfReq+0x26>
 80126d2:	2b40      	cmp	r3, #64	; 0x40
 80126d4:	d82f      	bhi.n	8012736 <USBD_StdItfReq+0x7e>
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <USBD_StdItfReq+0x26>
 80126da:	2b20      	cmp	r3, #32
 80126dc:	d12b      	bne.n	8012736 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	3b01      	subs	r3, #1
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d81d      	bhi.n	8012728 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	889b      	ldrh	r3, [r3, #4]
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d813      	bhi.n	801271e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126fc:	689b      	ldr	r3, [r3, #8]
 80126fe:	6839      	ldr	r1, [r7, #0]
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	4798      	blx	r3
 8012704:	4603      	mov	r3, r0
 8012706:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	88db      	ldrh	r3, [r3, #6]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d110      	bne.n	8012732 <USBD_StdItfReq+0x7a>
 8012710:	7bfb      	ldrb	r3, [r7, #15]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10d      	bne.n	8012732 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f000 fd9d 	bl	8013256 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801271c:	e009      	b.n	8012732 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801271e:	6839      	ldr	r1, [r7, #0]
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f000 fccd 	bl	80130c0 <USBD_CtlError>
          break;
 8012726:	e004      	b.n	8012732 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fcc8 	bl	80130c0 <USBD_CtlError>
          break;
 8012730:	e000      	b.n	8012734 <USBD_StdItfReq+0x7c>
          break;
 8012732:	bf00      	nop
      }
      break;
 8012734:	e004      	b.n	8012740 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 fcc1 	bl	80130c0 <USBD_CtlError>
      break;
 801273e:	bf00      	nop
  }

  return ret;
 8012740:	7bfb      	ldrb	r3, [r7, #15]
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b084      	sub	sp, #16
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
 8012752:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012754:	2300      	movs	r3, #0
 8012756:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	889b      	ldrh	r3, [r3, #4]
 801275c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012766:	2b40      	cmp	r3, #64	; 0x40
 8012768:	d007      	beq.n	801277a <USBD_StdEPReq+0x30>
 801276a:	2b40      	cmp	r3, #64	; 0x40
 801276c:	f200 8145 	bhi.w	80129fa <USBD_StdEPReq+0x2b0>
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00c      	beq.n	801278e <USBD_StdEPReq+0x44>
 8012774:	2b20      	cmp	r3, #32
 8012776:	f040 8140 	bne.w	80129fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	6839      	ldr	r1, [r7, #0]
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	4798      	blx	r3
 8012788:	4603      	mov	r3, r0
 801278a:	73fb      	strb	r3, [r7, #15]
      break;
 801278c:	e13a      	b.n	8012a04 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	785b      	ldrb	r3, [r3, #1]
 8012792:	2b03      	cmp	r3, #3
 8012794:	d007      	beq.n	80127a6 <USBD_StdEPReq+0x5c>
 8012796:	2b03      	cmp	r3, #3
 8012798:	f300 8129 	bgt.w	80129ee <USBD_StdEPReq+0x2a4>
 801279c:	2b00      	cmp	r3, #0
 801279e:	d07f      	beq.n	80128a0 <USBD_StdEPReq+0x156>
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d03c      	beq.n	801281e <USBD_StdEPReq+0xd4>
 80127a4:	e123      	b.n	80129ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127ac:	b2db      	uxtb	r3, r3
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d002      	beq.n	80127b8 <USBD_StdEPReq+0x6e>
 80127b2:	2b03      	cmp	r3, #3
 80127b4:	d016      	beq.n	80127e4 <USBD_StdEPReq+0x9a>
 80127b6:	e02c      	b.n	8012812 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127b8:	7bbb      	ldrb	r3, [r7, #14]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00d      	beq.n	80127da <USBD_StdEPReq+0x90>
 80127be:	7bbb      	ldrb	r3, [r7, #14]
 80127c0:	2b80      	cmp	r3, #128	; 0x80
 80127c2:	d00a      	beq.n	80127da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80127c4:	7bbb      	ldrb	r3, [r7, #14]
 80127c6:	4619      	mov	r1, r3
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f001 f917 	bl	80139fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80127ce:	2180      	movs	r1, #128	; 0x80
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f001 f913 	bl	80139fc <USBD_LL_StallEP>
 80127d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80127d8:	e020      	b.n	801281c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80127da:	6839      	ldr	r1, [r7, #0]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 fc6f 	bl	80130c0 <USBD_CtlError>
              break;
 80127e2:	e01b      	b.n	801281c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	885b      	ldrh	r3, [r3, #2]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d10e      	bne.n	801280a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80127ec:	7bbb      	ldrb	r3, [r7, #14]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00b      	beq.n	801280a <USBD_StdEPReq+0xc0>
 80127f2:	7bbb      	ldrb	r3, [r7, #14]
 80127f4:	2b80      	cmp	r3, #128	; 0x80
 80127f6:	d008      	beq.n	801280a <USBD_StdEPReq+0xc0>
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	88db      	ldrh	r3, [r3, #6]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d104      	bne.n	801280a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012800:	7bbb      	ldrb	r3, [r7, #14]
 8012802:	4619      	mov	r1, r3
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f001 f8f9 	bl	80139fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fd23 	bl	8013256 <USBD_CtlSendStatus>

              break;
 8012810:	e004      	b.n	801281c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 fc53 	bl	80130c0 <USBD_CtlError>
              break;
 801281a:	bf00      	nop
          }
          break;
 801281c:	e0ec      	b.n	80129f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012824:	b2db      	uxtb	r3, r3
 8012826:	2b02      	cmp	r3, #2
 8012828:	d002      	beq.n	8012830 <USBD_StdEPReq+0xe6>
 801282a:	2b03      	cmp	r3, #3
 801282c:	d016      	beq.n	801285c <USBD_StdEPReq+0x112>
 801282e:	e030      	b.n	8012892 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012830:	7bbb      	ldrb	r3, [r7, #14]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00d      	beq.n	8012852 <USBD_StdEPReq+0x108>
 8012836:	7bbb      	ldrb	r3, [r7, #14]
 8012838:	2b80      	cmp	r3, #128	; 0x80
 801283a:	d00a      	beq.n	8012852 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801283c:	7bbb      	ldrb	r3, [r7, #14]
 801283e:	4619      	mov	r1, r3
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f001 f8db 	bl	80139fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012846:	2180      	movs	r1, #128	; 0x80
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f001 f8d7 	bl	80139fc <USBD_LL_StallEP>
 801284e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012850:	e025      	b.n	801289e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 fc33 	bl	80130c0 <USBD_CtlError>
              break;
 801285a:	e020      	b.n	801289e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	885b      	ldrh	r3, [r3, #2]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d11b      	bne.n	801289c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012864:	7bbb      	ldrb	r3, [r7, #14]
 8012866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801286a:	2b00      	cmp	r3, #0
 801286c:	d004      	beq.n	8012878 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801286e:	7bbb      	ldrb	r3, [r7, #14]
 8012870:	4619      	mov	r1, r3
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f001 f8e1 	bl	8013a3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 fcec 	bl	8013256 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012884:	689b      	ldr	r3, [r3, #8]
 8012886:	6839      	ldr	r1, [r7, #0]
 8012888:	6878      	ldr	r0, [r7, #4]
 801288a:	4798      	blx	r3
 801288c:	4603      	mov	r3, r0
 801288e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012890:	e004      	b.n	801289c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f000 fc13 	bl	80130c0 <USBD_CtlError>
              break;
 801289a:	e000      	b.n	801289e <USBD_StdEPReq+0x154>
              break;
 801289c:	bf00      	nop
          }
          break;
 801289e:	e0ab      	b.n	80129f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	2b02      	cmp	r3, #2
 80128aa:	d002      	beq.n	80128b2 <USBD_StdEPReq+0x168>
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d032      	beq.n	8012916 <USBD_StdEPReq+0x1cc>
 80128b0:	e097      	b.n	80129e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d007      	beq.n	80128c8 <USBD_StdEPReq+0x17e>
 80128b8:	7bbb      	ldrb	r3, [r7, #14]
 80128ba:	2b80      	cmp	r3, #128	; 0x80
 80128bc:	d004      	beq.n	80128c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 fbfd 	bl	80130c0 <USBD_CtlError>
                break;
 80128c6:	e091      	b.n	80129ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	da0b      	bge.n	80128e8 <USBD_StdEPReq+0x19e>
 80128d0:	7bbb      	ldrb	r3, [r7, #14]
 80128d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128d6:	4613      	mov	r3, r2
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	4413      	add	r3, r2
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	3310      	adds	r3, #16
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	4413      	add	r3, r2
 80128e4:	3304      	adds	r3, #4
 80128e6:	e00b      	b.n	8012900 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80128e8:	7bbb      	ldrb	r3, [r7, #14]
 80128ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128ee:	4613      	mov	r3, r2
 80128f0:	009b      	lsls	r3, r3, #2
 80128f2:	4413      	add	r3, r2
 80128f4:	009b      	lsls	r3, r3, #2
 80128f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	4413      	add	r3, r2
 80128fe:	3304      	adds	r3, #4
 8012900:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2200      	movs	r2, #0
 8012906:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	2202      	movs	r2, #2
 801290c:	4619      	mov	r1, r3
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f000 fc47 	bl	80131a2 <USBD_CtlSendData>
              break;
 8012914:	e06a      	b.n	80129ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801291a:	2b00      	cmp	r3, #0
 801291c:	da11      	bge.n	8012942 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801291e:	7bbb      	ldrb	r3, [r7, #14]
 8012920:	f003 020f 	and.w	r2, r3, #15
 8012924:	6879      	ldr	r1, [r7, #4]
 8012926:	4613      	mov	r3, r2
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	4413      	add	r3, r2
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	440b      	add	r3, r1
 8012930:	3324      	adds	r3, #36	; 0x24
 8012932:	881b      	ldrh	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d117      	bne.n	8012968 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012938:	6839      	ldr	r1, [r7, #0]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 fbc0 	bl	80130c0 <USBD_CtlError>
                  break;
 8012940:	e054      	b.n	80129ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012942:	7bbb      	ldrb	r3, [r7, #14]
 8012944:	f003 020f 	and.w	r2, r3, #15
 8012948:	6879      	ldr	r1, [r7, #4]
 801294a:	4613      	mov	r3, r2
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	4413      	add	r3, r2
 8012950:	009b      	lsls	r3, r3, #2
 8012952:	440b      	add	r3, r1
 8012954:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012958:	881b      	ldrh	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d104      	bne.n	8012968 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801295e:	6839      	ldr	r1, [r7, #0]
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 fbad 	bl	80130c0 <USBD_CtlError>
                  break;
 8012966:	e041      	b.n	80129ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801296c:	2b00      	cmp	r3, #0
 801296e:	da0b      	bge.n	8012988 <USBD_StdEPReq+0x23e>
 8012970:	7bbb      	ldrb	r3, [r7, #14]
 8012972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012976:	4613      	mov	r3, r2
 8012978:	009b      	lsls	r3, r3, #2
 801297a:	4413      	add	r3, r2
 801297c:	009b      	lsls	r3, r3, #2
 801297e:	3310      	adds	r3, #16
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	4413      	add	r3, r2
 8012984:	3304      	adds	r3, #4
 8012986:	e00b      	b.n	80129a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012988:	7bbb      	ldrb	r3, [r7, #14]
 801298a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801298e:	4613      	mov	r3, r2
 8012990:	009b      	lsls	r3, r3, #2
 8012992:	4413      	add	r3, r2
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	4413      	add	r3, r2
 801299e:	3304      	adds	r3, #4
 80129a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80129a2:	7bbb      	ldrb	r3, [r7, #14]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d002      	beq.n	80129ae <USBD_StdEPReq+0x264>
 80129a8:	7bbb      	ldrb	r3, [r7, #14]
 80129aa:	2b80      	cmp	r3, #128	; 0x80
 80129ac:	d103      	bne.n	80129b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	2200      	movs	r2, #0
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	e00e      	b.n	80129d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80129b6:	7bbb      	ldrb	r3, [r7, #14]
 80129b8:	4619      	mov	r1, r3
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f001 f85c 	bl	8013a78 <USBD_LL_IsStallEP>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d003      	beq.n	80129ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	2201      	movs	r2, #1
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	e002      	b.n	80129d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	2200      	movs	r2, #0
 80129d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	2202      	movs	r2, #2
 80129d8:	4619      	mov	r1, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 fbe1 	bl	80131a2 <USBD_CtlSendData>
              break;
 80129e0:	e004      	b.n	80129ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80129e2:	6839      	ldr	r1, [r7, #0]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f000 fb6b 	bl	80130c0 <USBD_CtlError>
              break;
 80129ea:	bf00      	nop
          }
          break;
 80129ec:	e004      	b.n	80129f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80129ee:	6839      	ldr	r1, [r7, #0]
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 fb65 	bl	80130c0 <USBD_CtlError>
          break;
 80129f6:	bf00      	nop
      }
      break;
 80129f8:	e004      	b.n	8012a04 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80129fa:	6839      	ldr	r1, [r7, #0]
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f000 fb5f 	bl	80130c0 <USBD_CtlError>
      break;
 8012a02:	bf00      	nop
  }

  return ret;
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
	...

08012a10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012a22:	2300      	movs	r3, #0
 8012a24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	885b      	ldrh	r3, [r3, #2]
 8012a2a:	0a1b      	lsrs	r3, r3, #8
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	2b0e      	cmp	r3, #14
 8012a32:	f200 8152 	bhi.w	8012cda <USBD_GetDescriptor+0x2ca>
 8012a36:	a201      	add	r2, pc, #4	; (adr r2, 8012a3c <USBD_GetDescriptor+0x2c>)
 8012a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a3c:	08012aad 	.word	0x08012aad
 8012a40:	08012ac5 	.word	0x08012ac5
 8012a44:	08012b05 	.word	0x08012b05
 8012a48:	08012cdb 	.word	0x08012cdb
 8012a4c:	08012cdb 	.word	0x08012cdb
 8012a50:	08012c7b 	.word	0x08012c7b
 8012a54:	08012ca7 	.word	0x08012ca7
 8012a58:	08012cdb 	.word	0x08012cdb
 8012a5c:	08012cdb 	.word	0x08012cdb
 8012a60:	08012cdb 	.word	0x08012cdb
 8012a64:	08012cdb 	.word	0x08012cdb
 8012a68:	08012cdb 	.word	0x08012cdb
 8012a6c:	08012cdb 	.word	0x08012cdb
 8012a70:	08012cdb 	.word	0x08012cdb
 8012a74:	08012a79 	.word	0x08012a79
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a7e:	69db      	ldr	r3, [r3, #28]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d00b      	beq.n	8012a9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a8a:	69db      	ldr	r3, [r3, #28]
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	7c12      	ldrb	r2, [r2, #16]
 8012a90:	f107 0108 	add.w	r1, r7, #8
 8012a94:	4610      	mov	r0, r2
 8012a96:	4798      	blx	r3
 8012a98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012a9a:	e126      	b.n	8012cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012a9c:	6839      	ldr	r1, [r7, #0]
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 fb0e 	bl	80130c0 <USBD_CtlError>
        err++;
 8012aa4:	7afb      	ldrb	r3, [r7, #11]
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	72fb      	strb	r3, [r7, #11]
      break;
 8012aaa:	e11e      	b.n	8012cea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	7c12      	ldrb	r2, [r2, #16]
 8012ab8:	f107 0108 	add.w	r1, r7, #8
 8012abc:	4610      	mov	r0, r2
 8012abe:	4798      	blx	r3
 8012ac0:	60f8      	str	r0, [r7, #12]
      break;
 8012ac2:	e112      	b.n	8012cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	7c1b      	ldrb	r3, [r3, #16]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10d      	bne.n	8012ae8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ad4:	f107 0208 	add.w	r2, r7, #8
 8012ad8:	4610      	mov	r0, r2
 8012ada:	4798      	blx	r3
 8012adc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012ae6:	e100      	b.n	8012cea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af0:	f107 0208 	add.w	r2, r7, #8
 8012af4:	4610      	mov	r0, r2
 8012af6:	4798      	blx	r3
 8012af8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	3301      	adds	r3, #1
 8012afe:	2202      	movs	r2, #2
 8012b00:	701a      	strb	r2, [r3, #0]
      break;
 8012b02:	e0f2      	b.n	8012cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	2b05      	cmp	r3, #5
 8012b0c:	f200 80ac 	bhi.w	8012c68 <USBD_GetDescriptor+0x258>
 8012b10:	a201      	add	r2, pc, #4	; (adr r2, 8012b18 <USBD_GetDescriptor+0x108>)
 8012b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b16:	bf00      	nop
 8012b18:	08012b31 	.word	0x08012b31
 8012b1c:	08012b65 	.word	0x08012b65
 8012b20:	08012b99 	.word	0x08012b99
 8012b24:	08012bcd 	.word	0x08012bcd
 8012b28:	08012c01 	.word	0x08012c01
 8012b2c:	08012c35 	.word	0x08012c35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00b      	beq.n	8012b54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	687a      	ldr	r2, [r7, #4]
 8012b46:	7c12      	ldrb	r2, [r2, #16]
 8012b48:	f107 0108 	add.w	r1, r7, #8
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	4798      	blx	r3
 8012b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b52:	e091      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b54:	6839      	ldr	r1, [r7, #0]
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 fab2 	bl	80130c0 <USBD_CtlError>
            err++;
 8012b5c:	7afb      	ldrb	r3, [r7, #11]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	72fb      	strb	r3, [r7, #11]
          break;
 8012b62:	e089      	b.n	8012c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b6a:	689b      	ldr	r3, [r3, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00b      	beq.n	8012b88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	687a      	ldr	r2, [r7, #4]
 8012b7a:	7c12      	ldrb	r2, [r2, #16]
 8012b7c:	f107 0108 	add.w	r1, r7, #8
 8012b80:	4610      	mov	r0, r2
 8012b82:	4798      	blx	r3
 8012b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b86:	e077      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f000 fa98 	bl	80130c0 <USBD_CtlError>
            err++;
 8012b90:	7afb      	ldrb	r3, [r7, #11]
 8012b92:	3301      	adds	r3, #1
 8012b94:	72fb      	strb	r3, [r7, #11]
          break;
 8012b96:	e06f      	b.n	8012c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00b      	beq.n	8012bbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	7c12      	ldrb	r2, [r2, #16]
 8012bb0:	f107 0108 	add.w	r1, r7, #8
 8012bb4:	4610      	mov	r0, r2
 8012bb6:	4798      	blx	r3
 8012bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bba:	e05d      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bbc:	6839      	ldr	r1, [r7, #0]
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fa7e 	bl	80130c0 <USBD_CtlError>
            err++;
 8012bc4:	7afb      	ldrb	r3, [r7, #11]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8012bca:	e055      	b.n	8012c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bd2:	691b      	ldr	r3, [r3, #16]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00b      	beq.n	8012bf0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	7c12      	ldrb	r2, [r2, #16]
 8012be4:	f107 0108 	add.w	r1, r7, #8
 8012be8:	4610      	mov	r0, r2
 8012bea:	4798      	blx	r3
 8012bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bee:	e043      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f000 fa64 	bl	80130c0 <USBD_CtlError>
            err++;
 8012bf8:	7afb      	ldrb	r3, [r7, #11]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8012bfe:	e03b      	b.n	8012c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c06:	695b      	ldr	r3, [r3, #20]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d00b      	beq.n	8012c24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c12:	695b      	ldr	r3, [r3, #20]
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	7c12      	ldrb	r2, [r2, #16]
 8012c18:	f107 0108 	add.w	r1, r7, #8
 8012c1c:	4610      	mov	r0, r2
 8012c1e:	4798      	blx	r3
 8012c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c22:	e029      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c24:	6839      	ldr	r1, [r7, #0]
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f000 fa4a 	bl	80130c0 <USBD_CtlError>
            err++;
 8012c2c:	7afb      	ldrb	r3, [r7, #11]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	72fb      	strb	r3, [r7, #11]
          break;
 8012c32:	e021      	b.n	8012c78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c3a:	699b      	ldr	r3, [r3, #24]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00b      	beq.n	8012c58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	7c12      	ldrb	r2, [r2, #16]
 8012c4c:	f107 0108 	add.w	r1, r7, #8
 8012c50:	4610      	mov	r0, r2
 8012c52:	4798      	blx	r3
 8012c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c56:	e00f      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c58:	6839      	ldr	r1, [r7, #0]
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 fa30 	bl	80130c0 <USBD_CtlError>
            err++;
 8012c60:	7afb      	ldrb	r3, [r7, #11]
 8012c62:	3301      	adds	r3, #1
 8012c64:	72fb      	strb	r3, [r7, #11]
          break;
 8012c66:	e007      	b.n	8012c78 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012c68:	6839      	ldr	r1, [r7, #0]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fa28 	bl	80130c0 <USBD_CtlError>
          err++;
 8012c70:	7afb      	ldrb	r3, [r7, #11]
 8012c72:	3301      	adds	r3, #1
 8012c74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012c76:	bf00      	nop
      }
      break;
 8012c78:	e037      	b.n	8012cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	7c1b      	ldrb	r3, [r3, #16]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d109      	bne.n	8012c96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c8a:	f107 0208 	add.w	r2, r7, #8
 8012c8e:	4610      	mov	r0, r2
 8012c90:	4798      	blx	r3
 8012c92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c94:	e029      	b.n	8012cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012c96:	6839      	ldr	r1, [r7, #0]
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 fa11 	bl	80130c0 <USBD_CtlError>
        err++;
 8012c9e:	7afb      	ldrb	r3, [r7, #11]
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8012ca4:	e021      	b.n	8012cea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	7c1b      	ldrb	r3, [r3, #16]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d10d      	bne.n	8012cca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb6:	f107 0208 	add.w	r2, r7, #8
 8012cba:	4610      	mov	r0, r2
 8012cbc:	4798      	blx	r3
 8012cbe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	2207      	movs	r2, #7
 8012cc6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012cc8:	e00f      	b.n	8012cea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012cca:	6839      	ldr	r1, [r7, #0]
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 f9f7 	bl	80130c0 <USBD_CtlError>
        err++;
 8012cd2:	7afb      	ldrb	r3, [r7, #11]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8012cd8:	e007      	b.n	8012cea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012cda:	6839      	ldr	r1, [r7, #0]
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 f9ef 	bl	80130c0 <USBD_CtlError>
      err++;
 8012ce2:	7afb      	ldrb	r3, [r7, #11]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8012ce8:	bf00      	nop
  }

  if (err != 0U)
 8012cea:	7afb      	ldrb	r3, [r7, #11]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d11e      	bne.n	8012d2e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	88db      	ldrh	r3, [r3, #6]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d016      	beq.n	8012d26 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012cf8:	893b      	ldrh	r3, [r7, #8]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00e      	beq.n	8012d1c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	88da      	ldrh	r2, [r3, #6]
 8012d02:	893b      	ldrh	r3, [r7, #8]
 8012d04:	4293      	cmp	r3, r2
 8012d06:	bf28      	it	cs
 8012d08:	4613      	movcs	r3, r2
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012d0e:	893b      	ldrh	r3, [r7, #8]
 8012d10:	461a      	mov	r2, r3
 8012d12:	68f9      	ldr	r1, [r7, #12]
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fa44 	bl	80131a2 <USBD_CtlSendData>
 8012d1a:	e009      	b.n	8012d30 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012d1c:	6839      	ldr	r1, [r7, #0]
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f000 f9ce 	bl	80130c0 <USBD_CtlError>
 8012d24:	e004      	b.n	8012d30 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fa95 	bl	8013256 <USBD_CtlSendStatus>
 8012d2c:	e000      	b.n	8012d30 <USBD_GetDescriptor+0x320>
    return;
 8012d2e:	bf00      	nop
  }
}
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop

08012d38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	889b      	ldrh	r3, [r3, #4]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d131      	bne.n	8012dae <USBD_SetAddress+0x76>
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	88db      	ldrh	r3, [r3, #6]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d12d      	bne.n	8012dae <USBD_SetAddress+0x76>
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	885b      	ldrh	r3, [r3, #2]
 8012d56:	2b7f      	cmp	r3, #127	; 0x7f
 8012d58:	d829      	bhi.n	8012dae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	885b      	ldrh	r3, [r3, #2]
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	2b03      	cmp	r3, #3
 8012d70:	d104      	bne.n	8012d7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012d72:	6839      	ldr	r1, [r7, #0]
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 f9a3 	bl	80130c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d7a:	e01d      	b.n	8012db8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	7bfa      	ldrb	r2, [r7, #15]
 8012d80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012d84:	7bfb      	ldrb	r3, [r7, #15]
 8012d86:	4619      	mov	r1, r3
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fea1 	bl	8013ad0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f000 fa61 	bl	8013256 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012d94:	7bfb      	ldrb	r3, [r7, #15]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d004      	beq.n	8012da4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2202      	movs	r2, #2
 8012d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012da2:	e009      	b.n	8012db8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2201      	movs	r2, #1
 8012da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dac:	e004      	b.n	8012db8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012dae:	6839      	ldr	r1, [r7, #0]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f000 f985 	bl	80130c0 <USBD_CtlError>
  }
}
 8012db6:	bf00      	nop
 8012db8:	bf00      	nop
 8012dba:	3710      	adds	r7, #16
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	885b      	ldrh	r3, [r3, #2]
 8012dd2:	b2da      	uxtb	r2, r3
 8012dd4:	4b4c      	ldr	r3, [pc, #304]	; (8012f08 <USBD_SetConfig+0x148>)
 8012dd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012dd8:	4b4b      	ldr	r3, [pc, #300]	; (8012f08 <USBD_SetConfig+0x148>)
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d905      	bls.n	8012dec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012de0:	6839      	ldr	r1, [r7, #0]
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 f96c 	bl	80130c0 <USBD_CtlError>
    return USBD_FAIL;
 8012de8:	2303      	movs	r3, #3
 8012dea:	e088      	b.n	8012efe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b02      	cmp	r3, #2
 8012df6:	d002      	beq.n	8012dfe <USBD_SetConfig+0x3e>
 8012df8:	2b03      	cmp	r3, #3
 8012dfa:	d025      	beq.n	8012e48 <USBD_SetConfig+0x88>
 8012dfc:	e071      	b.n	8012ee2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012dfe:	4b42      	ldr	r3, [pc, #264]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d01c      	beq.n	8012e40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012e06:	4b40      	ldr	r3, [pc, #256]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e10:	4b3d      	ldr	r3, [pc, #244]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	4619      	mov	r1, r3
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7ff f992 	bl	8012140 <USBD_SetClassConfig>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012e20:	7bfb      	ldrb	r3, [r7, #15]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d004      	beq.n	8012e30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012e26:	6839      	ldr	r1, [r7, #0]
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f949 	bl	80130c0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e2e:	e065      	b.n	8012efc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 fa10 	bl	8013256 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2203      	movs	r2, #3
 8012e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012e3e:	e05d      	b.n	8012efc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f000 fa08 	bl	8013256 <USBD_CtlSendStatus>
      break;
 8012e46:	e059      	b.n	8012efc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012e48:	4b2f      	ldr	r3, [pc, #188]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d112      	bne.n	8012e76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2202      	movs	r2, #2
 8012e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012e58:	4b2b      	ldr	r3, [pc, #172]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012e62:	4b29      	ldr	r3, [pc, #164]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	4619      	mov	r1, r3
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7ff f985 	bl	8012178 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f000 f9f1 	bl	8013256 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e74:	e042      	b.n	8012efc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012e76:	4b24      	ldr	r3, [pc, #144]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e78:	781b      	ldrb	r3, [r3, #0]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d02a      	beq.n	8012eda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	b2db      	uxtb	r3, r3
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff f973 	bl	8012178 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012e92:	4b1d      	ldr	r3, [pc, #116]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	461a      	mov	r2, r3
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e9c:	4b1a      	ldr	r3, [pc, #104]	; (8012f08 <USBD_SetConfig+0x148>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7ff f94c 	bl	8012140 <USBD_SetClassConfig>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012eac:	7bfb      	ldrb	r3, [r7, #15]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00f      	beq.n	8012ed2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012eb2:	6839      	ldr	r1, [r7, #0]
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 f903 	bl	80130c0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7ff f958 	bl	8012178 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2202      	movs	r2, #2
 8012ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012ed0:	e014      	b.n	8012efc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 f9bf 	bl	8013256 <USBD_CtlSendStatus>
      break;
 8012ed8:	e010      	b.n	8012efc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 f9bb 	bl	8013256 <USBD_CtlSendStatus>
      break;
 8012ee0:	e00c      	b.n	8012efc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012ee2:	6839      	ldr	r1, [r7, #0]
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 f8eb 	bl	80130c0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012eea:	4b07      	ldr	r3, [pc, #28]	; (8012f08 <USBD_SetConfig+0x148>)
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	4619      	mov	r1, r3
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ff f941 	bl	8012178 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012ef6:	2303      	movs	r3, #3
 8012ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8012efa:	bf00      	nop
  }

  return ret;
 8012efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012efe:	4618      	mov	r0, r3
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20001b24 	.word	0x20001b24

08012f0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	88db      	ldrh	r3, [r3, #6]
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d004      	beq.n	8012f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012f1e:	6839      	ldr	r1, [r7, #0]
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f000 f8cd 	bl	80130c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012f26:	e023      	b.n	8012f70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	2b02      	cmp	r3, #2
 8012f32:	dc02      	bgt.n	8012f3a <USBD_GetConfig+0x2e>
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	dc03      	bgt.n	8012f40 <USBD_GetConfig+0x34>
 8012f38:	e015      	b.n	8012f66 <USBD_GetConfig+0x5a>
 8012f3a:	2b03      	cmp	r3, #3
 8012f3c:	d00b      	beq.n	8012f56 <USBD_GetConfig+0x4a>
 8012f3e:	e012      	b.n	8012f66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	3308      	adds	r3, #8
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 f927 	bl	80131a2 <USBD_CtlSendData>
        break;
 8012f54:	e00c      	b.n	8012f70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	3304      	adds	r3, #4
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	4619      	mov	r1, r3
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 f91f 	bl	80131a2 <USBD_CtlSendData>
        break;
 8012f64:	e004      	b.n	8012f70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012f66:	6839      	ldr	r1, [r7, #0]
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 f8a9 	bl	80130c0 <USBD_CtlError>
        break;
 8012f6e:	bf00      	nop
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	3b01      	subs	r3, #1
 8012f8c:	2b02      	cmp	r3, #2
 8012f8e:	d81e      	bhi.n	8012fce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	88db      	ldrh	r3, [r3, #6]
 8012f94:	2b02      	cmp	r3, #2
 8012f96:	d004      	beq.n	8012fa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012f98:	6839      	ldr	r1, [r7, #0]
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f000 f890 	bl	80130c0 <USBD_CtlError>
        break;
 8012fa0:	e01a      	b.n	8012fd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d005      	beq.n	8012fbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	f043 0202 	orr.w	r2, r3, #2
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	330c      	adds	r3, #12
 8012fc2:	2202      	movs	r2, #2
 8012fc4:	4619      	mov	r1, r3
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f000 f8eb 	bl	80131a2 <USBD_CtlSendData>
      break;
 8012fcc:	e004      	b.n	8012fd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012fce:	6839      	ldr	r1, [r7, #0]
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 f875 	bl	80130c0 <USBD_CtlError>
      break;
 8012fd6:	bf00      	nop
  }
}
 8012fd8:	bf00      	nop
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	885b      	ldrh	r3, [r3, #2]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d106      	bne.n	8013000 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 f92b 	bl	8013256 <USBD_CtlSendStatus>
  }
}
 8013000:	bf00      	nop
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}

08013008 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013018:	b2db      	uxtb	r3, r3
 801301a:	3b01      	subs	r3, #1
 801301c:	2b02      	cmp	r3, #2
 801301e:	d80b      	bhi.n	8013038 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	885b      	ldrh	r3, [r3, #2]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d10c      	bne.n	8013042 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2200      	movs	r2, #0
 801302c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f000 f910 	bl	8013256 <USBD_CtlSendStatus>
      }
      break;
 8013036:	e004      	b.n	8013042 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013038:	6839      	ldr	r1, [r7, #0]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f840 	bl	80130c0 <USBD_CtlError>
      break;
 8013040:	e000      	b.n	8013044 <USBD_ClrFeature+0x3c>
      break;
 8013042:	bf00      	nop
  }
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	781a      	ldrb	r2, [r3, #0]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3301      	adds	r3, #1
 8013066:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	781a      	ldrb	r2, [r3, #0]
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	3301      	adds	r3, #1
 8013074:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f7ff fa92 	bl	80125a0 <SWAPBYTE>
 801307c:	4603      	mov	r3, r0
 801307e:	461a      	mov	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	3301      	adds	r3, #1
 8013088:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	3301      	adds	r3, #1
 801308e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013090:	68f8      	ldr	r0, [r7, #12]
 8013092:	f7ff fa85 	bl	80125a0 <SWAPBYTE>
 8013096:	4603      	mov	r3, r0
 8013098:	461a      	mov	r2, r3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3301      	adds	r3, #1
 80130a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3301      	adds	r3, #1
 80130a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80130aa:	68f8      	ldr	r0, [r7, #12]
 80130ac:	f7ff fa78 	bl	80125a0 <SWAPBYTE>
 80130b0:	4603      	mov	r3, r0
 80130b2:	461a      	mov	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	80da      	strh	r2, [r3, #6]
}
 80130b8:	bf00      	nop
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80130ca:	2180      	movs	r1, #128	; 0x80
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f000 fc95 	bl	80139fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80130d2:	2100      	movs	r1, #0
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f000 fc91 	bl	80139fc <USBD_LL_StallEP>
}
 80130da:	bf00      	nop
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b086      	sub	sp, #24
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	60f8      	str	r0, [r7, #12]
 80130ea:	60b9      	str	r1, [r7, #8]
 80130ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80130ee:	2300      	movs	r3, #0
 80130f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d036      	beq.n	8013166 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80130fc:	6938      	ldr	r0, [r7, #16]
 80130fe:	f000 f836 	bl	801316e <USBD_GetLen>
 8013102:	4603      	mov	r3, r0
 8013104:	3301      	adds	r3, #1
 8013106:	b29b      	uxth	r3, r3
 8013108:	005b      	lsls	r3, r3, #1
 801310a:	b29a      	uxth	r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013110:	7dfb      	ldrb	r3, [r7, #23]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	4413      	add	r3, r2
 8013116:	687a      	ldr	r2, [r7, #4]
 8013118:	7812      	ldrb	r2, [r2, #0]
 801311a:	701a      	strb	r2, [r3, #0]
  idx++;
 801311c:	7dfb      	ldrb	r3, [r7, #23]
 801311e:	3301      	adds	r3, #1
 8013120:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013122:	7dfb      	ldrb	r3, [r7, #23]
 8013124:	68ba      	ldr	r2, [r7, #8]
 8013126:	4413      	add	r3, r2
 8013128:	2203      	movs	r2, #3
 801312a:	701a      	strb	r2, [r3, #0]
  idx++;
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	3301      	adds	r3, #1
 8013130:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013132:	e013      	b.n	801315c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013134:	7dfb      	ldrb	r3, [r7, #23]
 8013136:	68ba      	ldr	r2, [r7, #8]
 8013138:	4413      	add	r3, r2
 801313a:	693a      	ldr	r2, [r7, #16]
 801313c:	7812      	ldrb	r2, [r2, #0]
 801313e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	3301      	adds	r3, #1
 8013144:	613b      	str	r3, [r7, #16]
    idx++;
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	3301      	adds	r3, #1
 801314a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801314c:	7dfb      	ldrb	r3, [r7, #23]
 801314e:	68ba      	ldr	r2, [r7, #8]
 8013150:	4413      	add	r3, r2
 8013152:	2200      	movs	r2, #0
 8013154:	701a      	strb	r2, [r3, #0]
    idx++;
 8013156:	7dfb      	ldrb	r3, [r7, #23]
 8013158:	3301      	adds	r3, #1
 801315a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	781b      	ldrb	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d1e7      	bne.n	8013134 <USBD_GetString+0x52>
 8013164:	e000      	b.n	8013168 <USBD_GetString+0x86>
    return;
 8013166:	bf00      	nop
  }
}
 8013168:	3718      	adds	r7, #24
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801316e:	b480      	push	{r7}
 8013170:	b085      	sub	sp, #20
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013176:	2300      	movs	r3, #0
 8013178:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801317e:	e005      	b.n	801318c <USBD_GetLen+0x1e>
  {
    len++;
 8013180:	7bfb      	ldrb	r3, [r7, #15]
 8013182:	3301      	adds	r3, #1
 8013184:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	3301      	adds	r3, #1
 801318a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1f5      	bne.n	8013180 <USBD_GetLen+0x12>
  }

  return len;
 8013194:	7bfb      	ldrb	r3, [r7, #15]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3714      	adds	r7, #20
 801319a:	46bd      	mov	sp, r7
 801319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a0:	4770      	bx	lr

080131a2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80131a2:	b580      	push	{r7, lr}
 80131a4:	b084      	sub	sp, #16
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	60f8      	str	r0, [r7, #12]
 80131aa:	60b9      	str	r1, [r7, #8]
 80131ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2202      	movs	r2, #2
 80131b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	2100      	movs	r1, #0
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f000 fca0 	bl	8013b0e <USBD_LL_Transmit>

  return USBD_OK;
 80131ce:	2300      	movs	r3, #0
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3710      	adds	r7, #16
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}

080131d8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	2100      	movs	r1, #0
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f000 fc8f 	bl	8013b0e <USBD_LL_Transmit>

  return USBD_OK;
 80131f0:	2300      	movs	r3, #0
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}

080131fa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80131fa:	b580      	push	{r7, lr}
 80131fc:	b084      	sub	sp, #16
 80131fe:	af00      	add	r7, sp, #0
 8013200:	60f8      	str	r0, [r7, #12]
 8013202:	60b9      	str	r1, [r7, #8]
 8013204:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2203      	movs	r2, #3
 801320a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	687a      	ldr	r2, [r7, #4]
 8013212:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	687a      	ldr	r2, [r7, #4]
 801321a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	68ba      	ldr	r2, [r7, #8]
 8013222:	2100      	movs	r1, #0
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f000 fc93 	bl	8013b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	68ba      	ldr	r2, [r7, #8]
 8013244:	2100      	movs	r1, #0
 8013246:	68f8      	ldr	r0, [r7, #12]
 8013248:	f000 fc82 	bl	8013b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801324c:	2300      	movs	r3, #0
}
 801324e:	4618      	mov	r0, r3
 8013250:	3710      	adds	r7, #16
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}

08013256 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013256:	b580      	push	{r7, lr}
 8013258:	b082      	sub	sp, #8
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	2204      	movs	r2, #4
 8013262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013266:	2300      	movs	r3, #0
 8013268:	2200      	movs	r2, #0
 801326a:	2100      	movs	r1, #0
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f000 fc4e 	bl	8013b0e <USBD_LL_Transmit>

  return USBD_OK;
 8013272:	2300      	movs	r3, #0
}
 8013274:	4618      	mov	r0, r3
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2205      	movs	r2, #5
 8013288:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801328c:	2300      	movs	r3, #0
 801328e:	2200      	movs	r2, #0
 8013290:	2100      	movs	r1, #0
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f000 fc5c 	bl	8013b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013298:	2300      	movs	r3, #0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3708      	adds	r7, #8
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}
	...

080132a4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80132a8:	2200      	movs	r2, #0
 80132aa:	4912      	ldr	r1, [pc, #72]	; (80132f4 <MX_USB_Device_Init+0x50>)
 80132ac:	4812      	ldr	r0, [pc, #72]	; (80132f8 <MX_USB_Device_Init+0x54>)
 80132ae:	f7fe fed9 	bl	8012064 <USBD_Init>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80132b8:	f7f0 f988 	bl	80035cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80132bc:	490f      	ldr	r1, [pc, #60]	; (80132fc <MX_USB_Device_Init+0x58>)
 80132be:	480e      	ldr	r0, [pc, #56]	; (80132f8 <MX_USB_Device_Init+0x54>)
 80132c0:	f7fe ff00 	bl	80120c4 <USBD_RegisterClass>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d001      	beq.n	80132ce <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80132ca:	f7f0 f97f 	bl	80035cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80132ce:	490c      	ldr	r1, [pc, #48]	; (8013300 <MX_USB_Device_Init+0x5c>)
 80132d0:	4809      	ldr	r0, [pc, #36]	; (80132f8 <MX_USB_Device_Init+0x54>)
 80132d2:	f7fe fe21 	bl	8011f18 <USBD_CDC_RegisterInterface>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d001      	beq.n	80132e0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80132dc:	f7f0 f976 	bl	80035cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80132e0:	4805      	ldr	r0, [pc, #20]	; (80132f8 <MX_USB_Device_Init+0x54>)
 80132e2:	f7fe ff16 	bl	8012112 <USBD_Start>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d001      	beq.n	80132f0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80132ec:	f7f0 f96e 	bl	80035cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80132f0:	bf00      	nop
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	200002c8 	.word	0x200002c8
 80132f8:	20001b28 	.word	0x20001b28
 80132fc:	200001b0 	.word	0x200001b0
 8013300:	200002b4 	.word	0x200002b4

08013304 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013308:	2200      	movs	r2, #0
 801330a:	4905      	ldr	r1, [pc, #20]	; (8013320 <CDC_Init_FS+0x1c>)
 801330c:	4805      	ldr	r0, [pc, #20]	; (8013324 <CDC_Init_FS+0x20>)
 801330e:	f7fe fe18 	bl	8011f42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013312:	4905      	ldr	r1, [pc, #20]	; (8013328 <CDC_Init_FS+0x24>)
 8013314:	4803      	ldr	r0, [pc, #12]	; (8013324 <CDC_Init_FS+0x20>)
 8013316:	f7fe fe32 	bl	8011f7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801331a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801331c:	4618      	mov	r0, r3
 801331e:	bd80      	pop	{r7, pc}
 8013320:	200021f8 	.word	0x200021f8
 8013324:	20001b28 	.word	0x20001b28
 8013328:	20001df8 	.word	0x20001df8

0801332c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013330:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013332:	4618      	mov	r0, r3
 8013334:	46bd      	mov	sp, r7
 8013336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333a:	4770      	bx	lr

0801333c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	4603      	mov	r3, r0
 8013344:	6039      	str	r1, [r7, #0]
 8013346:	71fb      	strb	r3, [r7, #7]
 8013348:	4613      	mov	r3, r2
 801334a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801334c:	79fb      	ldrb	r3, [r7, #7]
 801334e:	2b23      	cmp	r3, #35	; 0x23
 8013350:	d84a      	bhi.n	80133e8 <CDC_Control_FS+0xac>
 8013352:	a201      	add	r2, pc, #4	; (adr r2, 8013358 <CDC_Control_FS+0x1c>)
 8013354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013358:	080133e9 	.word	0x080133e9
 801335c:	080133e9 	.word	0x080133e9
 8013360:	080133e9 	.word	0x080133e9
 8013364:	080133e9 	.word	0x080133e9
 8013368:	080133e9 	.word	0x080133e9
 801336c:	080133e9 	.word	0x080133e9
 8013370:	080133e9 	.word	0x080133e9
 8013374:	080133e9 	.word	0x080133e9
 8013378:	080133e9 	.word	0x080133e9
 801337c:	080133e9 	.word	0x080133e9
 8013380:	080133e9 	.word	0x080133e9
 8013384:	080133e9 	.word	0x080133e9
 8013388:	080133e9 	.word	0x080133e9
 801338c:	080133e9 	.word	0x080133e9
 8013390:	080133e9 	.word	0x080133e9
 8013394:	080133e9 	.word	0x080133e9
 8013398:	080133e9 	.word	0x080133e9
 801339c:	080133e9 	.word	0x080133e9
 80133a0:	080133e9 	.word	0x080133e9
 80133a4:	080133e9 	.word	0x080133e9
 80133a8:	080133e9 	.word	0x080133e9
 80133ac:	080133e9 	.word	0x080133e9
 80133b0:	080133e9 	.word	0x080133e9
 80133b4:	080133e9 	.word	0x080133e9
 80133b8:	080133e9 	.word	0x080133e9
 80133bc:	080133e9 	.word	0x080133e9
 80133c0:	080133e9 	.word	0x080133e9
 80133c4:	080133e9 	.word	0x080133e9
 80133c8:	080133e9 	.word	0x080133e9
 80133cc:	080133e9 	.word	0x080133e9
 80133d0:	080133e9 	.word	0x080133e9
 80133d4:	080133e9 	.word	0x080133e9
 80133d8:	080133e9 	.word	0x080133e9
 80133dc:	080133e9 	.word	0x080133e9
 80133e0:	080133e9 	.word	0x080133e9
 80133e4:	080133e9 	.word	0x080133e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80133e8:	bf00      	nop
  }

  return (USBD_OK);
 80133ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	370c      	adds	r7, #12
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr

080133f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013402:	6879      	ldr	r1, [r7, #4]
 8013404:	4805      	ldr	r0, [pc, #20]	; (801341c <CDC_Receive_FS+0x24>)
 8013406:	f7fe fdba 	bl	8011f7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801340a:	4804      	ldr	r0, [pc, #16]	; (801341c <CDC_Receive_FS+0x24>)
 801340c:	f7fe fe00 	bl	8012010 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013410:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	20001b28 	.word	0x20001b28

08013420 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	460b      	mov	r3, r1
 801342a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013430:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <CDC_Transmit_FS+0x48>)
 8013432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013436:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801343e:	2b00      	cmp	r3, #0
 8013440:	d001      	beq.n	8013446 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013442:	2301      	movs	r3, #1
 8013444:	e00b      	b.n	801345e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013446:	887b      	ldrh	r3, [r7, #2]
 8013448:	461a      	mov	r2, r3
 801344a:	6879      	ldr	r1, [r7, #4]
 801344c:	4806      	ldr	r0, [pc, #24]	; (8013468 <CDC_Transmit_FS+0x48>)
 801344e:	f7fe fd78 	bl	8011f42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013452:	4805      	ldr	r0, [pc, #20]	; (8013468 <CDC_Transmit_FS+0x48>)
 8013454:	f7fe fdac 	bl	8011fb0 <USBD_CDC_TransmitPacket>
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801345c:	7bfb      	ldrb	r3, [r7, #15]
}
 801345e:	4618      	mov	r0, r3
 8013460:	3710      	adds	r7, #16
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	20001b28 	.word	0x20001b28

0801346c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801346c:	b480      	push	{r7}
 801346e:	b087      	sub	sp, #28
 8013470:	af00      	add	r7, sp, #0
 8013472:	60f8      	str	r0, [r7, #12]
 8013474:	60b9      	str	r1, [r7, #8]
 8013476:	4613      	mov	r3, r2
 8013478:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801347a:	2300      	movs	r3, #0
 801347c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801347e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013482:	4618      	mov	r0, r3
 8013484:	371c      	adds	r7, #28
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
	...

08013490 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	4603      	mov	r3, r0
 8013498:	6039      	str	r1, [r7, #0]
 801349a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	2212      	movs	r2, #18
 80134a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80134a2:	4b03      	ldr	r3, [pc, #12]	; (80134b0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr
 80134b0:	200002e8 	.word	0x200002e8

080134b4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	4603      	mov	r3, r0
 80134bc:	6039      	str	r1, [r7, #0]
 80134be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2204      	movs	r2, #4
 80134c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80134c6:	4b03      	ldr	r3, [pc, #12]	; (80134d4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	370c      	adds	r7, #12
 80134cc:	46bd      	mov	sp, r7
 80134ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d2:	4770      	bx	lr
 80134d4:	200002fc 	.word	0x200002fc

080134d8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	6039      	str	r1, [r7, #0]
 80134e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134e4:	79fb      	ldrb	r3, [r7, #7]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d105      	bne.n	80134f6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	4907      	ldr	r1, [pc, #28]	; (801350c <USBD_CDC_ProductStrDescriptor+0x34>)
 80134ee:	4808      	ldr	r0, [pc, #32]	; (8013510 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134f0:	f7ff fdf7 	bl	80130e2 <USBD_GetString>
 80134f4:	e004      	b.n	8013500 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	4904      	ldr	r1, [pc, #16]	; (801350c <USBD_CDC_ProductStrDescriptor+0x34>)
 80134fa:	4805      	ldr	r0, [pc, #20]	; (8013510 <USBD_CDC_ProductStrDescriptor+0x38>)
 80134fc:	f7ff fdf1 	bl	80130e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013500:	4b02      	ldr	r3, [pc, #8]	; (801350c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	200025f8 	.word	0x200025f8
 8013510:	08016df4 	.word	0x08016df4

08013514 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	6039      	str	r1, [r7, #0]
 801351e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013520:	683a      	ldr	r2, [r7, #0]
 8013522:	4904      	ldr	r1, [pc, #16]	; (8013534 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8013524:	4804      	ldr	r0, [pc, #16]	; (8013538 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8013526:	f7ff fddc 	bl	80130e2 <USBD_GetString>
  return USBD_StrDesc;
 801352a:	4b02      	ldr	r3, [pc, #8]	; (8013534 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801352c:	4618      	mov	r0, r3
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}
 8013534:	200025f8 	.word	0x200025f8
 8013538:	08016e0c 	.word	0x08016e0c

0801353c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	4603      	mov	r3, r0
 8013544:	6039      	str	r1, [r7, #0]
 8013546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	221a      	movs	r2, #26
 801354c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801354e:	f000 f843 	bl	80135d8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013552:	4b02      	ldr	r3, [pc, #8]	; (801355c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8013554:	4618      	mov	r0, r3
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	20000300 	.word	0x20000300

08013560 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	4603      	mov	r3, r0
 8013568:	6039      	str	r1, [r7, #0]
 801356a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801356c:	79fb      	ldrb	r3, [r7, #7]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d105      	bne.n	801357e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	4907      	ldr	r1, [pc, #28]	; (8013594 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013576:	4808      	ldr	r0, [pc, #32]	; (8013598 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013578:	f7ff fdb3 	bl	80130e2 <USBD_GetString>
 801357c:	e004      	b.n	8013588 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	4904      	ldr	r1, [pc, #16]	; (8013594 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8013582:	4805      	ldr	r0, [pc, #20]	; (8013598 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8013584:	f7ff fdad 	bl	80130e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013588:	4b02      	ldr	r3, [pc, #8]	; (8013594 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801358a:	4618      	mov	r0, r3
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	200025f8 	.word	0x200025f8
 8013598:	08016e20 	.word	0x08016e20

0801359c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	4603      	mov	r3, r0
 80135a4:	6039      	str	r1, [r7, #0]
 80135a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80135a8:	79fb      	ldrb	r3, [r7, #7]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d105      	bne.n	80135ba <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80135ae:	683a      	ldr	r2, [r7, #0]
 80135b0:	4907      	ldr	r1, [pc, #28]	; (80135d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80135b2:	4808      	ldr	r0, [pc, #32]	; (80135d4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80135b4:	f7ff fd95 	bl	80130e2 <USBD_GetString>
 80135b8:	e004      	b.n	80135c4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	4904      	ldr	r1, [pc, #16]	; (80135d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80135be:	4805      	ldr	r0, [pc, #20]	; (80135d4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80135c0:	f7ff fd8f 	bl	80130e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80135c4:	4b02      	ldr	r3, [pc, #8]	; (80135d0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	200025f8 	.word	0x200025f8
 80135d4:	08016e2c 	.word	0x08016e2c

080135d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80135de:	4b0f      	ldr	r3, [pc, #60]	; (801361c <Get_SerialNum+0x44>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80135e4:	4b0e      	ldr	r3, [pc, #56]	; (8013620 <Get_SerialNum+0x48>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80135ea:	4b0e      	ldr	r3, [pc, #56]	; (8013624 <Get_SerialNum+0x4c>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80135f0:	68fa      	ldr	r2, [r7, #12]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4413      	add	r3, r2
 80135f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d009      	beq.n	8013612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80135fe:	2208      	movs	r2, #8
 8013600:	4909      	ldr	r1, [pc, #36]	; (8013628 <Get_SerialNum+0x50>)
 8013602:	68f8      	ldr	r0, [r7, #12]
 8013604:	f000 f814 	bl	8013630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013608:	2204      	movs	r2, #4
 801360a:	4908      	ldr	r1, [pc, #32]	; (801362c <Get_SerialNum+0x54>)
 801360c:	68b8      	ldr	r0, [r7, #8]
 801360e:	f000 f80f 	bl	8013630 <IntToUnicode>
  }
}
 8013612:	bf00      	nop
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	1fff7590 	.word	0x1fff7590
 8013620:	1fff7594 	.word	0x1fff7594
 8013624:	1fff7598 	.word	0x1fff7598
 8013628:	20000302 	.word	0x20000302
 801362c:	20000312 	.word	0x20000312

08013630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013630:	b480      	push	{r7}
 8013632:	b087      	sub	sp, #28
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	4613      	mov	r3, r2
 801363c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801363e:	2300      	movs	r3, #0
 8013640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013642:	2300      	movs	r3, #0
 8013644:	75fb      	strb	r3, [r7, #23]
 8013646:	e027      	b.n	8013698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	0f1b      	lsrs	r3, r3, #28
 801364c:	2b09      	cmp	r3, #9
 801364e:	d80b      	bhi.n	8013668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	0f1b      	lsrs	r3, r3, #28
 8013654:	b2da      	uxtb	r2, r3
 8013656:	7dfb      	ldrb	r3, [r7, #23]
 8013658:	005b      	lsls	r3, r3, #1
 801365a:	4619      	mov	r1, r3
 801365c:	68bb      	ldr	r3, [r7, #8]
 801365e:	440b      	add	r3, r1
 8013660:	3230      	adds	r2, #48	; 0x30
 8013662:	b2d2      	uxtb	r2, r2
 8013664:	701a      	strb	r2, [r3, #0]
 8013666:	e00a      	b.n	801367e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	0f1b      	lsrs	r3, r3, #28
 801366c:	b2da      	uxtb	r2, r3
 801366e:	7dfb      	ldrb	r3, [r7, #23]
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4619      	mov	r1, r3
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	440b      	add	r3, r1
 8013678:	3237      	adds	r2, #55	; 0x37
 801367a:	b2d2      	uxtb	r2, r2
 801367c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	011b      	lsls	r3, r3, #4
 8013682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013684:	7dfb      	ldrb	r3, [r7, #23]
 8013686:	005b      	lsls	r3, r3, #1
 8013688:	3301      	adds	r3, #1
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	4413      	add	r3, r2
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013692:	7dfb      	ldrb	r3, [r7, #23]
 8013694:	3301      	adds	r3, #1
 8013696:	75fb      	strb	r3, [r7, #23]
 8013698:	7dfa      	ldrb	r2, [r7, #23]
 801369a:	79fb      	ldrb	r3, [r7, #7]
 801369c:	429a      	cmp	r2, r3
 801369e:	d3d3      	bcc.n	8013648 <IntToUnicode+0x18>
  }
}
 80136a0:	bf00      	nop
 80136a2:	bf00      	nop
 80136a4:	371c      	adds	r7, #28
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr
	...

080136b0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b094      	sub	sp, #80	; 0x50
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80136b8:	f107 030c 	add.w	r3, r7, #12
 80136bc:	2244      	movs	r2, #68	; 0x44
 80136be:	2100      	movs	r1, #0
 80136c0:	4618      	mov	r0, r3
 80136c2:	f001 f884 	bl	80147ce <memset>
  if(pcdHandle->Instance==USB)
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	4a15      	ldr	r2, [pc, #84]	; (8013720 <HAL_PCD_MspInit+0x70>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d122      	bne.n	8013716 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80136d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80136d6:	2300      	movs	r3, #0
 80136d8:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80136da:	f107 030c 	add.w	r3, r7, #12
 80136de:	4618      	mov	r0, r3
 80136e0:	f7f7 fb8a 	bl	800adf8 <HAL_RCCEx_PeriphCLKConfig>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80136ea:	f7ef ff6f 	bl	80035cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80136ee:	4b0d      	ldr	r3, [pc, #52]	; (8013724 <HAL_PCD_MspInit+0x74>)
 80136f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136f2:	4a0c      	ldr	r2, [pc, #48]	; (8013724 <HAL_PCD_MspInit+0x74>)
 80136f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80136f8:	6593      	str	r3, [r2, #88]	; 0x58
 80136fa:	4b0a      	ldr	r3, [pc, #40]	; (8013724 <HAL_PCD_MspInit+0x74>)
 80136fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013702:	60bb      	str	r3, [r7, #8]
 8013704:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8013706:	2200      	movs	r2, #0
 8013708:	2100      	movs	r1, #0
 801370a:	2014      	movs	r0, #20
 801370c:	f7f3 fe7b 	bl	8007406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8013710:	2014      	movs	r0, #20
 8013712:	f7f3 fe92 	bl	800743a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8013716:	bf00      	nop
 8013718:	3750      	adds	r7, #80	; 0x50
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	40005c00 	.word	0x40005c00
 8013724:	40021000 	.word	0x40021000

08013728 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801373c:	4619      	mov	r1, r3
 801373e:	4610      	mov	r0, r2
 8013740:	f7fe fd32 	bl	80121a8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8013744:	bf00      	nop
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	460b      	mov	r3, r1
 8013756:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 801375e:	78fa      	ldrb	r2, [r7, #3]
 8013760:	6879      	ldr	r1, [r7, #4]
 8013762:	4613      	mov	r3, r2
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4413      	add	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	440b      	add	r3, r1
 801376c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	78fb      	ldrb	r3, [r7, #3]
 8013774:	4619      	mov	r1, r3
 8013776:	f7fe fd6c 	bl	8012252 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801377a:	bf00      	nop
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}

08013782 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013782:	b580      	push	{r7, lr}
 8013784:	b082      	sub	sp, #8
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
 801378a:	460b      	mov	r3, r1
 801378c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8013794:	78fa      	ldrb	r2, [r7, #3]
 8013796:	6879      	ldr	r1, [r7, #4]
 8013798:	4613      	mov	r3, r2
 801379a:	009b      	lsls	r3, r3, #2
 801379c:	4413      	add	r3, r2
 801379e:	00db      	lsls	r3, r3, #3
 80137a0:	440b      	add	r3, r1
 80137a2:	3324      	adds	r3, #36	; 0x24
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	78fb      	ldrb	r3, [r7, #3]
 80137a8:	4619      	mov	r1, r3
 80137aa:	f7fe fdb5 	bl	8012318 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80137ae:	bf00      	nop
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}

080137b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137b6:	b580      	push	{r7, lr}
 80137b8:	b082      	sub	sp, #8
 80137ba:	af00      	add	r7, sp, #0
 80137bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fe fec9 	bl	801255c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80137ca:	bf00      	nop
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b084      	sub	sp, #16
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80137da:	2301      	movs	r3, #1
 80137dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	795b      	ldrb	r3, [r3, #5]
 80137e2:	2b02      	cmp	r3, #2
 80137e4:	d001      	beq.n	80137ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80137e6:	f7ef fef1 	bl	80035cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80137f0:	7bfa      	ldrb	r2, [r7, #15]
 80137f2:	4611      	mov	r1, r2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7fe fe73 	bl	80124e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013800:	4618      	mov	r0, r3
 8013802:	f7fe fe1f 	bl	8012444 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8013806:	bf00      	nop
 8013808:	3710      	adds	r7, #16
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
	...

08013810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fe6e 	bl	8012500 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	7a5b      	ldrb	r3, [r3, #9]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d005      	beq.n	8013838 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801382c:	4b04      	ldr	r3, [pc, #16]	; (8013840 <HAL_PCD_SuspendCallback+0x30>)
 801382e:	691b      	ldr	r3, [r3, #16]
 8013830:	4a03      	ldr	r2, [pc, #12]	; (8013840 <HAL_PCD_SuspendCallback+0x30>)
 8013832:	f043 0306 	orr.w	r3, r3, #6
 8013836:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8013838:	bf00      	nop
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	e000ed00 	.word	0xe000ed00

08013844 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	7a5b      	ldrb	r3, [r3, #9]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d007      	beq.n	8013864 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013854:	4b08      	ldr	r3, [pc, #32]	; (8013878 <HAL_PCD_ResumeCallback+0x34>)
 8013856:	691b      	ldr	r3, [r3, #16]
 8013858:	4a07      	ldr	r2, [pc, #28]	; (8013878 <HAL_PCD_ResumeCallback+0x34>)
 801385a:	f023 0306 	bic.w	r3, r3, #6
 801385e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013860:	f000 f9f8 	bl	8013c54 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801386a:	4618      	mov	r0, r3
 801386c:	f7fe fe5e 	bl	801252c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	e000ed00 	.word	0xe000ed00

0801387c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8013884:	4a2b      	ldr	r2, [pc, #172]	; (8013934 <USBD_LL_Init+0xb8>)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	4a29      	ldr	r2, [pc, #164]	; (8013934 <USBD_LL_Init+0xb8>)
 8013890:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8013894:	4b27      	ldr	r3, [pc, #156]	; (8013934 <USBD_LL_Init+0xb8>)
 8013896:	4a28      	ldr	r2, [pc, #160]	; (8013938 <USBD_LL_Init+0xbc>)
 8013898:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801389a:	4b26      	ldr	r3, [pc, #152]	; (8013934 <USBD_LL_Init+0xb8>)
 801389c:	2208      	movs	r2, #8
 801389e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80138a0:	4b24      	ldr	r3, [pc, #144]	; (8013934 <USBD_LL_Init+0xb8>)
 80138a2:	2202      	movs	r2, #2
 80138a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80138a6:	4b23      	ldr	r3, [pc, #140]	; (8013934 <USBD_LL_Init+0xb8>)
 80138a8:	2202      	movs	r2, #2
 80138aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80138ac:	4b21      	ldr	r3, [pc, #132]	; (8013934 <USBD_LL_Init+0xb8>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80138b2:	4b20      	ldr	r3, [pc, #128]	; (8013934 <USBD_LL_Init+0xb8>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80138b8:	4b1e      	ldr	r3, [pc, #120]	; (8013934 <USBD_LL_Init+0xb8>)
 80138ba:	2200      	movs	r2, #0
 80138bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80138be:	4b1d      	ldr	r3, [pc, #116]	; (8013934 <USBD_LL_Init+0xb8>)
 80138c0:	2200      	movs	r2, #0
 80138c2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80138c4:	481b      	ldr	r0, [pc, #108]	; (8013934 <USBD_LL_Init+0xb8>)
 80138c6:	f7f4 ffb9 	bl	800883c <HAL_PCD_Init>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80138d0:	f7ef fe7c 	bl	80035cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80138da:	2318      	movs	r3, #24
 80138dc:	2200      	movs	r2, #0
 80138de:	2100      	movs	r1, #0
 80138e0:	f7f6 fc73 	bl	800a1ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80138ea:	2358      	movs	r3, #88	; 0x58
 80138ec:	2200      	movs	r2, #0
 80138ee:	2180      	movs	r1, #128	; 0x80
 80138f0:	f7f6 fc6b 	bl	800a1ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80138fa:	23c0      	movs	r3, #192	; 0xc0
 80138fc:	2200      	movs	r2, #0
 80138fe:	2181      	movs	r1, #129	; 0x81
 8013900:	f7f6 fc63 	bl	800a1ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801390a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801390e:	2200      	movs	r2, #0
 8013910:	2101      	movs	r1, #1
 8013912:	f7f6 fc5a 	bl	800a1ca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801391c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013920:	2200      	movs	r2, #0
 8013922:	2182      	movs	r1, #130	; 0x82
 8013924:	f7f6 fc51 	bl	800a1ca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8013928:	2300      	movs	r3, #0
}
 801392a:	4618      	mov	r0, r3
 801392c:	3708      	adds	r7, #8
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	200027f8 	.word	0x200027f8
 8013938:	40005c00 	.word	0x40005c00

0801393c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013944:	2300      	movs	r3, #0
 8013946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013948:	2300      	movs	r3, #0
 801394a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013952:	4618      	mov	r0, r3
 8013954:	f7f5 f840 	bl	80089d8 <HAL_PCD_Start>
 8013958:	4603      	mov	r3, r0
 801395a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	4618      	mov	r0, r3
 8013960:	f000 f97e 	bl	8013c60 <USBD_Get_USB_Status>
 8013964:	4603      	mov	r3, r0
 8013966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013968:	7bbb      	ldrb	r3, [r7, #14]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013972:	b580      	push	{r7, lr}
 8013974:	b084      	sub	sp, #16
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
 801397a:	4608      	mov	r0, r1
 801397c:	4611      	mov	r1, r2
 801397e:	461a      	mov	r2, r3
 8013980:	4603      	mov	r3, r0
 8013982:	70fb      	strb	r3, [r7, #3]
 8013984:	460b      	mov	r3, r1
 8013986:	70bb      	strb	r3, [r7, #2]
 8013988:	4613      	mov	r3, r2
 801398a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801398c:	2300      	movs	r3, #0
 801398e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013990:	2300      	movs	r3, #0
 8013992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801399a:	78bb      	ldrb	r3, [r7, #2]
 801399c:	883a      	ldrh	r2, [r7, #0]
 801399e:	78f9      	ldrb	r1, [r7, #3]
 80139a0:	f7f5 f987 	bl	8008cb2 <HAL_PCD_EP_Open>
 80139a4:	4603      	mov	r3, r0
 80139a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139a8:	7bfb      	ldrb	r3, [r7, #15]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f000 f958 	bl	8013c60 <USBD_Get_USB_Status>
 80139b0:	4603      	mov	r3, r0
 80139b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	460b      	mov	r3, r1
 80139c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139ca:	2300      	movs	r3, #0
 80139cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139ce:	2300      	movs	r3, #0
 80139d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80139d8:	78fa      	ldrb	r2, [r7, #3]
 80139da:	4611      	mov	r1, r2
 80139dc:	4618      	mov	r0, r3
 80139de:	f7f5 f9c5 	bl	8008d6c <HAL_PCD_EP_Close>
 80139e2:	4603      	mov	r3, r0
 80139e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139e6:	7bfb      	ldrb	r3, [r7, #15]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f000 f939 	bl	8013c60 <USBD_Get_USB_Status>
 80139ee:	4603      	mov	r3, r0
 80139f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b084      	sub	sp, #16
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
 8013a04:	460b      	mov	r3, r1
 8013a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a16:	78fa      	ldrb	r2, [r7, #3]
 8013a18:	4611      	mov	r1, r2
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f5 fa6e 	bl	8008efc <HAL_PCD_EP_SetStall>
 8013a20:	4603      	mov	r3, r0
 8013a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a24:	7bfb      	ldrb	r3, [r7, #15]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f000 f91a 	bl	8013c60 <USBD_Get_USB_Status>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3710      	adds	r7, #16
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b084      	sub	sp, #16
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	460b      	mov	r3, r1
 8013a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a54:	78fa      	ldrb	r2, [r7, #3]
 8013a56:	4611      	mov	r1, r2
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f5 faa1 	bl	8008fa0 <HAL_PCD_EP_ClrStall>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a62:	7bfb      	ldrb	r3, [r7, #15]
 8013a64:	4618      	mov	r0, r3
 8013a66:	f000 f8fb 	bl	8013c60 <USBD_Get_USB_Status>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3710      	adds	r7, #16
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	460b      	mov	r3, r1
 8013a82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013a8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	da0b      	bge.n	8013aac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013a94:	78fb      	ldrb	r3, [r7, #3]
 8013a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a9a:	68f9      	ldr	r1, [r7, #12]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	4413      	add	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	440b      	add	r3, r1
 8013aa6:	3312      	adds	r3, #18
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	e00b      	b.n	8013ac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013aac:	78fb      	ldrb	r3, [r7, #3]
 8013aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ab2:	68f9      	ldr	r1, [r7, #12]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	4413      	add	r3, r2
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	440b      	add	r3, r1
 8013abe:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8013ac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3714      	adds	r7, #20
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b084      	sub	sp, #16
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	460b      	mov	r3, r1
 8013ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013adc:	2300      	movs	r3, #0
 8013ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013aea:	78fa      	ldrb	r2, [r7, #3]
 8013aec:	4611      	mov	r1, r2
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7f5 f8bb 	bl	8008c6a <HAL_PCD_SetAddress>
 8013af4:	4603      	mov	r3, r0
 8013af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013af8:	7bfb      	ldrb	r3, [r7, #15]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f000 f8b0 	bl	8013c60 <USBD_Get_USB_Status>
 8013b00:	4603      	mov	r3, r0
 8013b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3710      	adds	r7, #16
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}

08013b0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b0e:	b580      	push	{r7, lr}
 8013b10:	b086      	sub	sp, #24
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	60f8      	str	r0, [r7, #12]
 8013b16:	607a      	str	r2, [r7, #4]
 8013b18:	603b      	str	r3, [r7, #0]
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b22:	2300      	movs	r3, #0
 8013b24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013b2c:	7af9      	ldrb	r1, [r7, #11]
 8013b2e:	683b      	ldr	r3, [r7, #0]
 8013b30:	687a      	ldr	r2, [r7, #4]
 8013b32:	f7f5 f9ac 	bl	8008e8e <HAL_PCD_EP_Transmit>
 8013b36:	4603      	mov	r3, r0
 8013b38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b3a:	7dfb      	ldrb	r3, [r7, #23]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f000 f88f 	bl	8013c60 <USBD_Get_USB_Status>
 8013b42:	4603      	mov	r3, r0
 8013b44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b46:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3718      	adds	r7, #24
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b086      	sub	sp, #24
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	607a      	str	r2, [r7, #4]
 8013b5a:	603b      	str	r3, [r7, #0]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b60:	2300      	movs	r3, #0
 8013b62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b64:	2300      	movs	r3, #0
 8013b66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013b6e:	7af9      	ldrb	r1, [r7, #11]
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	f7f5 f942 	bl	8008dfc <HAL_PCD_EP_Receive>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b7c:	7dfb      	ldrb	r3, [r7, #23]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 f86e 	bl	8013c60 <USBD_Get_USB_Status>
 8013b84:	4603      	mov	r3, r0
 8013b86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b88:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}

08013b92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b92:	b580      	push	{r7, lr}
 8013b94:	b082      	sub	sp, #8
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013ba4:	78fa      	ldrb	r2, [r7, #3]
 8013ba6:	4611      	mov	r1, r2
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7f5 f958 	bl	8008e5e <HAL_PCD_EP_GetRxCount>
 8013bae:	4603      	mov	r3, r0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8013bc4:	78fb      	ldrb	r3, [r7, #3]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d002      	beq.n	8013bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d013      	beq.n	8013bf6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8013bce:	e023      	b.n	8013c18 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	7a5b      	ldrb	r3, [r3, #9]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d007      	beq.n	8013be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013bd8:	f000 f83c 	bl	8013c54 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013bdc:	4b10      	ldr	r3, [pc, #64]	; (8013c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8013bde:	691b      	ldr	r3, [r3, #16]
 8013be0:	4a0f      	ldr	r2, [pc, #60]	; (8013c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8013be2:	f023 0306 	bic.w	r3, r3, #6
 8013be6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7fe fc9c 	bl	801252c <USBD_LL_Resume>
    break;
 8013bf4:	e010      	b.n	8013c18 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fe fc7f 	bl	8012500 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	7a5b      	ldrb	r3, [r3, #9]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d005      	beq.n	8013c16 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c0a:	4b05      	ldr	r3, [pc, #20]	; (8013c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c0c:	691b      	ldr	r3, [r3, #16]
 8013c0e:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <HAL_PCDEx_LPM_Callback+0x68>)
 8013c10:	f043 0306 	orr.w	r3, r3, #6
 8013c14:	6113      	str	r3, [r2, #16]
    break;
 8013c16:	bf00      	nop
}
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	e000ed00 	.word	0xe000ed00

08013c24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013c2c:	4b03      	ldr	r3, [pc, #12]	; (8013c3c <USBD_static_malloc+0x18>)
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	370c      	adds	r7, #12
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	20002ad4 	.word	0x20002ad4

08013c40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]

}
 8013c48:	bf00      	nop
 8013c4a:	370c      	adds	r7, #12
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr

08013c54 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013c58:	f7ef f878 	bl	8002d4c <SystemClock_Config>
}
 8013c5c:	bf00      	nop
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b085      	sub	sp, #20
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	4603      	mov	r3, r0
 8013c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013c6e:	79fb      	ldrb	r3, [r7, #7]
 8013c70:	2b03      	cmp	r3, #3
 8013c72:	d817      	bhi.n	8013ca4 <USBD_Get_USB_Status+0x44>
 8013c74:	a201      	add	r2, pc, #4	; (adr r2, 8013c7c <USBD_Get_USB_Status+0x1c>)
 8013c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c7a:	bf00      	nop
 8013c7c:	08013c8d 	.word	0x08013c8d
 8013c80:	08013c93 	.word	0x08013c93
 8013c84:	08013c99 	.word	0x08013c99
 8013c88:	08013c9f 	.word	0x08013c9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8013c90:	e00b      	b.n	8013caa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013c92:	2303      	movs	r3, #3
 8013c94:	73fb      	strb	r3, [r7, #15]
    break;
 8013c96:	e008      	b.n	8013caa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013c98:	2301      	movs	r3, #1
 8013c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013c9c:	e005      	b.n	8013caa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013c9e:	2303      	movs	r3, #3
 8013ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ca2:	e002      	b.n	8013caa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013ca4:	2303      	movs	r3, #3
 8013ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ca8:	bf00      	nop
  }
  return usb_status;
 8013caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3714      	adds	r7, #20
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr

08013cb8 <__cvt>:
 8013cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cbc:	ec55 4b10 	vmov	r4, r5, d0
 8013cc0:	2d00      	cmp	r5, #0
 8013cc2:	460e      	mov	r6, r1
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	462b      	mov	r3, r5
 8013cc8:	bfbb      	ittet	lt
 8013cca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013cce:	461d      	movlt	r5, r3
 8013cd0:	2300      	movge	r3, #0
 8013cd2:	232d      	movlt	r3, #45	; 0x2d
 8013cd4:	700b      	strb	r3, [r1, #0]
 8013cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013cdc:	4691      	mov	r9, r2
 8013cde:	f023 0820 	bic.w	r8, r3, #32
 8013ce2:	bfbc      	itt	lt
 8013ce4:	4622      	movlt	r2, r4
 8013ce6:	4614      	movlt	r4, r2
 8013ce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013cec:	d005      	beq.n	8013cfa <__cvt+0x42>
 8013cee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013cf2:	d100      	bne.n	8013cf6 <__cvt+0x3e>
 8013cf4:	3601      	adds	r6, #1
 8013cf6:	2102      	movs	r1, #2
 8013cf8:	e000      	b.n	8013cfc <__cvt+0x44>
 8013cfa:	2103      	movs	r1, #3
 8013cfc:	ab03      	add	r3, sp, #12
 8013cfe:	9301      	str	r3, [sp, #4]
 8013d00:	ab02      	add	r3, sp, #8
 8013d02:	9300      	str	r3, [sp, #0]
 8013d04:	ec45 4b10 	vmov	d0, r4, r5
 8013d08:	4653      	mov	r3, sl
 8013d0a:	4632      	mov	r2, r6
 8013d0c:	f000 fe68 	bl	80149e0 <_dtoa_r>
 8013d10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013d14:	4607      	mov	r7, r0
 8013d16:	d102      	bne.n	8013d1e <__cvt+0x66>
 8013d18:	f019 0f01 	tst.w	r9, #1
 8013d1c:	d022      	beq.n	8013d64 <__cvt+0xac>
 8013d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013d22:	eb07 0906 	add.w	r9, r7, r6
 8013d26:	d110      	bne.n	8013d4a <__cvt+0x92>
 8013d28:	783b      	ldrb	r3, [r7, #0]
 8013d2a:	2b30      	cmp	r3, #48	; 0x30
 8013d2c:	d10a      	bne.n	8013d44 <__cvt+0x8c>
 8013d2e:	2200      	movs	r2, #0
 8013d30:	2300      	movs	r3, #0
 8013d32:	4620      	mov	r0, r4
 8013d34:	4629      	mov	r1, r5
 8013d36:	f7ec feef 	bl	8000b18 <__aeabi_dcmpeq>
 8013d3a:	b918      	cbnz	r0, 8013d44 <__cvt+0x8c>
 8013d3c:	f1c6 0601 	rsb	r6, r6, #1
 8013d40:	f8ca 6000 	str.w	r6, [sl]
 8013d44:	f8da 3000 	ldr.w	r3, [sl]
 8013d48:	4499      	add	r9, r3
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	4620      	mov	r0, r4
 8013d50:	4629      	mov	r1, r5
 8013d52:	f7ec fee1 	bl	8000b18 <__aeabi_dcmpeq>
 8013d56:	b108      	cbz	r0, 8013d5c <__cvt+0xa4>
 8013d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8013d5c:	2230      	movs	r2, #48	; 0x30
 8013d5e:	9b03      	ldr	r3, [sp, #12]
 8013d60:	454b      	cmp	r3, r9
 8013d62:	d307      	bcc.n	8013d74 <__cvt+0xbc>
 8013d64:	9b03      	ldr	r3, [sp, #12]
 8013d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d68:	1bdb      	subs	r3, r3, r7
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	6013      	str	r3, [r2, #0]
 8013d6e:	b004      	add	sp, #16
 8013d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d74:	1c59      	adds	r1, r3, #1
 8013d76:	9103      	str	r1, [sp, #12]
 8013d78:	701a      	strb	r2, [r3, #0]
 8013d7a:	e7f0      	b.n	8013d5e <__cvt+0xa6>

08013d7c <__exponent>:
 8013d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d7e:	4603      	mov	r3, r0
 8013d80:	2900      	cmp	r1, #0
 8013d82:	bfb8      	it	lt
 8013d84:	4249      	neglt	r1, r1
 8013d86:	f803 2b02 	strb.w	r2, [r3], #2
 8013d8a:	bfb4      	ite	lt
 8013d8c:	222d      	movlt	r2, #45	; 0x2d
 8013d8e:	222b      	movge	r2, #43	; 0x2b
 8013d90:	2909      	cmp	r1, #9
 8013d92:	7042      	strb	r2, [r0, #1]
 8013d94:	dd2a      	ble.n	8013dec <__exponent+0x70>
 8013d96:	f10d 0207 	add.w	r2, sp, #7
 8013d9a:	4617      	mov	r7, r2
 8013d9c:	260a      	movs	r6, #10
 8013d9e:	4694      	mov	ip, r2
 8013da0:	fb91 f5f6 	sdiv	r5, r1, r6
 8013da4:	fb06 1415 	mls	r4, r6, r5, r1
 8013da8:	3430      	adds	r4, #48	; 0x30
 8013daa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013dae:	460c      	mov	r4, r1
 8013db0:	2c63      	cmp	r4, #99	; 0x63
 8013db2:	f102 32ff 	add.w	r2, r2, #4294967295
 8013db6:	4629      	mov	r1, r5
 8013db8:	dcf1      	bgt.n	8013d9e <__exponent+0x22>
 8013dba:	3130      	adds	r1, #48	; 0x30
 8013dbc:	f1ac 0402 	sub.w	r4, ip, #2
 8013dc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013dc4:	1c41      	adds	r1, r0, #1
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	42ba      	cmp	r2, r7
 8013dca:	d30a      	bcc.n	8013de2 <__exponent+0x66>
 8013dcc:	f10d 0209 	add.w	r2, sp, #9
 8013dd0:	eba2 020c 	sub.w	r2, r2, ip
 8013dd4:	42bc      	cmp	r4, r7
 8013dd6:	bf88      	it	hi
 8013dd8:	2200      	movhi	r2, #0
 8013dda:	4413      	add	r3, r2
 8013ddc:	1a18      	subs	r0, r3, r0
 8013dde:	b003      	add	sp, #12
 8013de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013de2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013de6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013dea:	e7ed      	b.n	8013dc8 <__exponent+0x4c>
 8013dec:	2330      	movs	r3, #48	; 0x30
 8013dee:	3130      	adds	r1, #48	; 0x30
 8013df0:	7083      	strb	r3, [r0, #2]
 8013df2:	70c1      	strb	r1, [r0, #3]
 8013df4:	1d03      	adds	r3, r0, #4
 8013df6:	e7f1      	b.n	8013ddc <__exponent+0x60>

08013df8 <_printf_float>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ed2d 8b02 	vpush	{d8}
 8013e00:	b08d      	sub	sp, #52	; 0x34
 8013e02:	460c      	mov	r4, r1
 8013e04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013e08:	4616      	mov	r6, r2
 8013e0a:	461f      	mov	r7, r3
 8013e0c:	4605      	mov	r5, r0
 8013e0e:	f000 fce7 	bl	80147e0 <_localeconv_r>
 8013e12:	f8d0 a000 	ldr.w	sl, [r0]
 8013e16:	4650      	mov	r0, sl
 8013e18:	f7ec fa52 	bl	80002c0 <strlen>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	9305      	str	r3, [sp, #20]
 8013e24:	f8d8 3000 	ldr.w	r3, [r8]
 8013e28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013e2c:	3307      	adds	r3, #7
 8013e2e:	f023 0307 	bic.w	r3, r3, #7
 8013e32:	f103 0208 	add.w	r2, r3, #8
 8013e36:	f8c8 2000 	str.w	r2, [r8]
 8013e3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013e3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e42:	9307      	str	r3, [sp, #28]
 8013e44:	f8cd 8018 	str.w	r8, [sp, #24]
 8013e48:	ee08 0a10 	vmov	s16, r0
 8013e4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e54:	4b9e      	ldr	r3, [pc, #632]	; (80140d0 <_printf_float+0x2d8>)
 8013e56:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5a:	f7ec fe8f 	bl	8000b7c <__aeabi_dcmpun>
 8013e5e:	bb88      	cbnz	r0, 8013ec4 <_printf_float+0xcc>
 8013e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013e64:	4b9a      	ldr	r3, [pc, #616]	; (80140d0 <_printf_float+0x2d8>)
 8013e66:	f04f 32ff 	mov.w	r2, #4294967295
 8013e6a:	f7ec fe69 	bl	8000b40 <__aeabi_dcmple>
 8013e6e:	bb48      	cbnz	r0, 8013ec4 <_printf_float+0xcc>
 8013e70:	2200      	movs	r2, #0
 8013e72:	2300      	movs	r3, #0
 8013e74:	4640      	mov	r0, r8
 8013e76:	4649      	mov	r1, r9
 8013e78:	f7ec fe58 	bl	8000b2c <__aeabi_dcmplt>
 8013e7c:	b110      	cbz	r0, 8013e84 <_printf_float+0x8c>
 8013e7e:	232d      	movs	r3, #45	; 0x2d
 8013e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e84:	4a93      	ldr	r2, [pc, #588]	; (80140d4 <_printf_float+0x2dc>)
 8013e86:	4b94      	ldr	r3, [pc, #592]	; (80140d8 <_printf_float+0x2e0>)
 8013e88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013e8c:	bf94      	ite	ls
 8013e8e:	4690      	movls	r8, r2
 8013e90:	4698      	movhi	r8, r3
 8013e92:	2303      	movs	r3, #3
 8013e94:	6123      	str	r3, [r4, #16]
 8013e96:	9b05      	ldr	r3, [sp, #20]
 8013e98:	f023 0304 	bic.w	r3, r3, #4
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	f04f 0900 	mov.w	r9, #0
 8013ea2:	9700      	str	r7, [sp, #0]
 8013ea4:	4633      	mov	r3, r6
 8013ea6:	aa0b      	add	r2, sp, #44	; 0x2c
 8013ea8:	4621      	mov	r1, r4
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f000 f9da 	bl	8014264 <_printf_common>
 8013eb0:	3001      	adds	r0, #1
 8013eb2:	f040 8090 	bne.w	8013fd6 <_printf_float+0x1de>
 8013eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8013eba:	b00d      	add	sp, #52	; 0x34
 8013ebc:	ecbd 8b02 	vpop	{d8}
 8013ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec4:	4642      	mov	r2, r8
 8013ec6:	464b      	mov	r3, r9
 8013ec8:	4640      	mov	r0, r8
 8013eca:	4649      	mov	r1, r9
 8013ecc:	f7ec fe56 	bl	8000b7c <__aeabi_dcmpun>
 8013ed0:	b140      	cbz	r0, 8013ee4 <_printf_float+0xec>
 8013ed2:	464b      	mov	r3, r9
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	bfbc      	itt	lt
 8013ed8:	232d      	movlt	r3, #45	; 0x2d
 8013eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013ede:	4a7f      	ldr	r2, [pc, #508]	; (80140dc <_printf_float+0x2e4>)
 8013ee0:	4b7f      	ldr	r3, [pc, #508]	; (80140e0 <_printf_float+0x2e8>)
 8013ee2:	e7d1      	b.n	8013e88 <_printf_float+0x90>
 8013ee4:	6863      	ldr	r3, [r4, #4]
 8013ee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013eea:	9206      	str	r2, [sp, #24]
 8013eec:	1c5a      	adds	r2, r3, #1
 8013eee:	d13f      	bne.n	8013f70 <_printf_float+0x178>
 8013ef0:	2306      	movs	r3, #6
 8013ef2:	6063      	str	r3, [r4, #4]
 8013ef4:	9b05      	ldr	r3, [sp, #20]
 8013ef6:	6861      	ldr	r1, [r4, #4]
 8013ef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013efc:	2300      	movs	r3, #0
 8013efe:	9303      	str	r3, [sp, #12]
 8013f00:	ab0a      	add	r3, sp, #40	; 0x28
 8013f02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013f06:	ab09      	add	r3, sp, #36	; 0x24
 8013f08:	ec49 8b10 	vmov	d0, r8, r9
 8013f0c:	9300      	str	r3, [sp, #0]
 8013f0e:	6022      	str	r2, [r4, #0]
 8013f10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013f14:	4628      	mov	r0, r5
 8013f16:	f7ff fecf 	bl	8013cb8 <__cvt>
 8013f1a:	9b06      	ldr	r3, [sp, #24]
 8013f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f1e:	2b47      	cmp	r3, #71	; 0x47
 8013f20:	4680      	mov	r8, r0
 8013f22:	d108      	bne.n	8013f36 <_printf_float+0x13e>
 8013f24:	1cc8      	adds	r0, r1, #3
 8013f26:	db02      	blt.n	8013f2e <_printf_float+0x136>
 8013f28:	6863      	ldr	r3, [r4, #4]
 8013f2a:	4299      	cmp	r1, r3
 8013f2c:	dd41      	ble.n	8013fb2 <_printf_float+0x1ba>
 8013f2e:	f1ab 0302 	sub.w	r3, fp, #2
 8013f32:	fa5f fb83 	uxtb.w	fp, r3
 8013f36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013f3a:	d820      	bhi.n	8013f7e <_printf_float+0x186>
 8013f3c:	3901      	subs	r1, #1
 8013f3e:	465a      	mov	r2, fp
 8013f40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013f44:	9109      	str	r1, [sp, #36]	; 0x24
 8013f46:	f7ff ff19 	bl	8013d7c <__exponent>
 8013f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f4c:	1813      	adds	r3, r2, r0
 8013f4e:	2a01      	cmp	r2, #1
 8013f50:	4681      	mov	r9, r0
 8013f52:	6123      	str	r3, [r4, #16]
 8013f54:	dc02      	bgt.n	8013f5c <_printf_float+0x164>
 8013f56:	6822      	ldr	r2, [r4, #0]
 8013f58:	07d2      	lsls	r2, r2, #31
 8013f5a:	d501      	bpl.n	8013f60 <_printf_float+0x168>
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	6123      	str	r3, [r4, #16]
 8013f60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d09c      	beq.n	8013ea2 <_printf_float+0xaa>
 8013f68:	232d      	movs	r3, #45	; 0x2d
 8013f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f6e:	e798      	b.n	8013ea2 <_printf_float+0xaa>
 8013f70:	9a06      	ldr	r2, [sp, #24]
 8013f72:	2a47      	cmp	r2, #71	; 0x47
 8013f74:	d1be      	bne.n	8013ef4 <_printf_float+0xfc>
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d1bc      	bne.n	8013ef4 <_printf_float+0xfc>
 8013f7a:	2301      	movs	r3, #1
 8013f7c:	e7b9      	b.n	8013ef2 <_printf_float+0xfa>
 8013f7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013f82:	d118      	bne.n	8013fb6 <_printf_float+0x1be>
 8013f84:	2900      	cmp	r1, #0
 8013f86:	6863      	ldr	r3, [r4, #4]
 8013f88:	dd0b      	ble.n	8013fa2 <_printf_float+0x1aa>
 8013f8a:	6121      	str	r1, [r4, #16]
 8013f8c:	b913      	cbnz	r3, 8013f94 <_printf_float+0x19c>
 8013f8e:	6822      	ldr	r2, [r4, #0]
 8013f90:	07d0      	lsls	r0, r2, #31
 8013f92:	d502      	bpl.n	8013f9a <_printf_float+0x1a2>
 8013f94:	3301      	adds	r3, #1
 8013f96:	440b      	add	r3, r1
 8013f98:	6123      	str	r3, [r4, #16]
 8013f9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8013f9c:	f04f 0900 	mov.w	r9, #0
 8013fa0:	e7de      	b.n	8013f60 <_printf_float+0x168>
 8013fa2:	b913      	cbnz	r3, 8013faa <_printf_float+0x1b2>
 8013fa4:	6822      	ldr	r2, [r4, #0]
 8013fa6:	07d2      	lsls	r2, r2, #31
 8013fa8:	d501      	bpl.n	8013fae <_printf_float+0x1b6>
 8013faa:	3302      	adds	r3, #2
 8013fac:	e7f4      	b.n	8013f98 <_printf_float+0x1a0>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e7f2      	b.n	8013f98 <_printf_float+0x1a0>
 8013fb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fb8:	4299      	cmp	r1, r3
 8013fba:	db05      	blt.n	8013fc8 <_printf_float+0x1d0>
 8013fbc:	6823      	ldr	r3, [r4, #0]
 8013fbe:	6121      	str	r1, [r4, #16]
 8013fc0:	07d8      	lsls	r0, r3, #31
 8013fc2:	d5ea      	bpl.n	8013f9a <_printf_float+0x1a2>
 8013fc4:	1c4b      	adds	r3, r1, #1
 8013fc6:	e7e7      	b.n	8013f98 <_printf_float+0x1a0>
 8013fc8:	2900      	cmp	r1, #0
 8013fca:	bfd4      	ite	le
 8013fcc:	f1c1 0202 	rsble	r2, r1, #2
 8013fd0:	2201      	movgt	r2, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	e7e0      	b.n	8013f98 <_printf_float+0x1a0>
 8013fd6:	6823      	ldr	r3, [r4, #0]
 8013fd8:	055a      	lsls	r2, r3, #21
 8013fda:	d407      	bmi.n	8013fec <_printf_float+0x1f4>
 8013fdc:	6923      	ldr	r3, [r4, #16]
 8013fde:	4642      	mov	r2, r8
 8013fe0:	4631      	mov	r1, r6
 8013fe2:	4628      	mov	r0, r5
 8013fe4:	47b8      	blx	r7
 8013fe6:	3001      	adds	r0, #1
 8013fe8:	d12c      	bne.n	8014044 <_printf_float+0x24c>
 8013fea:	e764      	b.n	8013eb6 <_printf_float+0xbe>
 8013fec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ff0:	f240 80e0 	bls.w	80141b4 <_printf_float+0x3bc>
 8013ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	f7ec fd8c 	bl	8000b18 <__aeabi_dcmpeq>
 8014000:	2800      	cmp	r0, #0
 8014002:	d034      	beq.n	801406e <_printf_float+0x276>
 8014004:	4a37      	ldr	r2, [pc, #220]	; (80140e4 <_printf_float+0x2ec>)
 8014006:	2301      	movs	r3, #1
 8014008:	4631      	mov	r1, r6
 801400a:	4628      	mov	r0, r5
 801400c:	47b8      	blx	r7
 801400e:	3001      	adds	r0, #1
 8014010:	f43f af51 	beq.w	8013eb6 <_printf_float+0xbe>
 8014014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014018:	429a      	cmp	r2, r3
 801401a:	db02      	blt.n	8014022 <_printf_float+0x22a>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	07d8      	lsls	r0, r3, #31
 8014020:	d510      	bpl.n	8014044 <_printf_float+0x24c>
 8014022:	ee18 3a10 	vmov	r3, s16
 8014026:	4652      	mov	r2, sl
 8014028:	4631      	mov	r1, r6
 801402a:	4628      	mov	r0, r5
 801402c:	47b8      	blx	r7
 801402e:	3001      	adds	r0, #1
 8014030:	f43f af41 	beq.w	8013eb6 <_printf_float+0xbe>
 8014034:	f04f 0800 	mov.w	r8, #0
 8014038:	f104 091a 	add.w	r9, r4, #26
 801403c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801403e:	3b01      	subs	r3, #1
 8014040:	4543      	cmp	r3, r8
 8014042:	dc09      	bgt.n	8014058 <_printf_float+0x260>
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	079b      	lsls	r3, r3, #30
 8014048:	f100 8107 	bmi.w	801425a <_printf_float+0x462>
 801404c:	68e0      	ldr	r0, [r4, #12]
 801404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014050:	4298      	cmp	r0, r3
 8014052:	bfb8      	it	lt
 8014054:	4618      	movlt	r0, r3
 8014056:	e730      	b.n	8013eba <_printf_float+0xc2>
 8014058:	2301      	movs	r3, #1
 801405a:	464a      	mov	r2, r9
 801405c:	4631      	mov	r1, r6
 801405e:	4628      	mov	r0, r5
 8014060:	47b8      	blx	r7
 8014062:	3001      	adds	r0, #1
 8014064:	f43f af27 	beq.w	8013eb6 <_printf_float+0xbe>
 8014068:	f108 0801 	add.w	r8, r8, #1
 801406c:	e7e6      	b.n	801403c <_printf_float+0x244>
 801406e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014070:	2b00      	cmp	r3, #0
 8014072:	dc39      	bgt.n	80140e8 <_printf_float+0x2f0>
 8014074:	4a1b      	ldr	r2, [pc, #108]	; (80140e4 <_printf_float+0x2ec>)
 8014076:	2301      	movs	r3, #1
 8014078:	4631      	mov	r1, r6
 801407a:	4628      	mov	r0, r5
 801407c:	47b8      	blx	r7
 801407e:	3001      	adds	r0, #1
 8014080:	f43f af19 	beq.w	8013eb6 <_printf_float+0xbe>
 8014084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014088:	4313      	orrs	r3, r2
 801408a:	d102      	bne.n	8014092 <_printf_float+0x29a>
 801408c:	6823      	ldr	r3, [r4, #0]
 801408e:	07d9      	lsls	r1, r3, #31
 8014090:	d5d8      	bpl.n	8014044 <_printf_float+0x24c>
 8014092:	ee18 3a10 	vmov	r3, s16
 8014096:	4652      	mov	r2, sl
 8014098:	4631      	mov	r1, r6
 801409a:	4628      	mov	r0, r5
 801409c:	47b8      	blx	r7
 801409e:	3001      	adds	r0, #1
 80140a0:	f43f af09 	beq.w	8013eb6 <_printf_float+0xbe>
 80140a4:	f04f 0900 	mov.w	r9, #0
 80140a8:	f104 0a1a 	add.w	sl, r4, #26
 80140ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140ae:	425b      	negs	r3, r3
 80140b0:	454b      	cmp	r3, r9
 80140b2:	dc01      	bgt.n	80140b8 <_printf_float+0x2c0>
 80140b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140b6:	e792      	b.n	8013fde <_printf_float+0x1e6>
 80140b8:	2301      	movs	r3, #1
 80140ba:	4652      	mov	r2, sl
 80140bc:	4631      	mov	r1, r6
 80140be:	4628      	mov	r0, r5
 80140c0:	47b8      	blx	r7
 80140c2:	3001      	adds	r0, #1
 80140c4:	f43f aef7 	beq.w	8013eb6 <_printf_float+0xbe>
 80140c8:	f109 0901 	add.w	r9, r9, #1
 80140cc:	e7ee      	b.n	80140ac <_printf_float+0x2b4>
 80140ce:	bf00      	nop
 80140d0:	7fefffff 	.word	0x7fefffff
 80140d4:	0801ba9c 	.word	0x0801ba9c
 80140d8:	0801baa0 	.word	0x0801baa0
 80140dc:	0801baa4 	.word	0x0801baa4
 80140e0:	0801baa8 	.word	0x0801baa8
 80140e4:	0801baac 	.word	0x0801baac
 80140e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80140ec:	429a      	cmp	r2, r3
 80140ee:	bfa8      	it	ge
 80140f0:	461a      	movge	r2, r3
 80140f2:	2a00      	cmp	r2, #0
 80140f4:	4691      	mov	r9, r2
 80140f6:	dc37      	bgt.n	8014168 <_printf_float+0x370>
 80140f8:	f04f 0b00 	mov.w	fp, #0
 80140fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014100:	f104 021a 	add.w	r2, r4, #26
 8014104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014106:	9305      	str	r3, [sp, #20]
 8014108:	eba3 0309 	sub.w	r3, r3, r9
 801410c:	455b      	cmp	r3, fp
 801410e:	dc33      	bgt.n	8014178 <_printf_float+0x380>
 8014110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014114:	429a      	cmp	r2, r3
 8014116:	db3b      	blt.n	8014190 <_printf_float+0x398>
 8014118:	6823      	ldr	r3, [r4, #0]
 801411a:	07da      	lsls	r2, r3, #31
 801411c:	d438      	bmi.n	8014190 <_printf_float+0x398>
 801411e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014122:	eba2 0903 	sub.w	r9, r2, r3
 8014126:	9b05      	ldr	r3, [sp, #20]
 8014128:	1ad2      	subs	r2, r2, r3
 801412a:	4591      	cmp	r9, r2
 801412c:	bfa8      	it	ge
 801412e:	4691      	movge	r9, r2
 8014130:	f1b9 0f00 	cmp.w	r9, #0
 8014134:	dc35      	bgt.n	80141a2 <_printf_float+0x3aa>
 8014136:	f04f 0800 	mov.w	r8, #0
 801413a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801413e:	f104 0a1a 	add.w	sl, r4, #26
 8014142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014146:	1a9b      	subs	r3, r3, r2
 8014148:	eba3 0309 	sub.w	r3, r3, r9
 801414c:	4543      	cmp	r3, r8
 801414e:	f77f af79 	ble.w	8014044 <_printf_float+0x24c>
 8014152:	2301      	movs	r3, #1
 8014154:	4652      	mov	r2, sl
 8014156:	4631      	mov	r1, r6
 8014158:	4628      	mov	r0, r5
 801415a:	47b8      	blx	r7
 801415c:	3001      	adds	r0, #1
 801415e:	f43f aeaa 	beq.w	8013eb6 <_printf_float+0xbe>
 8014162:	f108 0801 	add.w	r8, r8, #1
 8014166:	e7ec      	b.n	8014142 <_printf_float+0x34a>
 8014168:	4613      	mov	r3, r2
 801416a:	4631      	mov	r1, r6
 801416c:	4642      	mov	r2, r8
 801416e:	4628      	mov	r0, r5
 8014170:	47b8      	blx	r7
 8014172:	3001      	adds	r0, #1
 8014174:	d1c0      	bne.n	80140f8 <_printf_float+0x300>
 8014176:	e69e      	b.n	8013eb6 <_printf_float+0xbe>
 8014178:	2301      	movs	r3, #1
 801417a:	4631      	mov	r1, r6
 801417c:	4628      	mov	r0, r5
 801417e:	9205      	str	r2, [sp, #20]
 8014180:	47b8      	blx	r7
 8014182:	3001      	adds	r0, #1
 8014184:	f43f ae97 	beq.w	8013eb6 <_printf_float+0xbe>
 8014188:	9a05      	ldr	r2, [sp, #20]
 801418a:	f10b 0b01 	add.w	fp, fp, #1
 801418e:	e7b9      	b.n	8014104 <_printf_float+0x30c>
 8014190:	ee18 3a10 	vmov	r3, s16
 8014194:	4652      	mov	r2, sl
 8014196:	4631      	mov	r1, r6
 8014198:	4628      	mov	r0, r5
 801419a:	47b8      	blx	r7
 801419c:	3001      	adds	r0, #1
 801419e:	d1be      	bne.n	801411e <_printf_float+0x326>
 80141a0:	e689      	b.n	8013eb6 <_printf_float+0xbe>
 80141a2:	9a05      	ldr	r2, [sp, #20]
 80141a4:	464b      	mov	r3, r9
 80141a6:	4442      	add	r2, r8
 80141a8:	4631      	mov	r1, r6
 80141aa:	4628      	mov	r0, r5
 80141ac:	47b8      	blx	r7
 80141ae:	3001      	adds	r0, #1
 80141b0:	d1c1      	bne.n	8014136 <_printf_float+0x33e>
 80141b2:	e680      	b.n	8013eb6 <_printf_float+0xbe>
 80141b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141b6:	2a01      	cmp	r2, #1
 80141b8:	dc01      	bgt.n	80141be <_printf_float+0x3c6>
 80141ba:	07db      	lsls	r3, r3, #31
 80141bc:	d53a      	bpl.n	8014234 <_printf_float+0x43c>
 80141be:	2301      	movs	r3, #1
 80141c0:	4642      	mov	r2, r8
 80141c2:	4631      	mov	r1, r6
 80141c4:	4628      	mov	r0, r5
 80141c6:	47b8      	blx	r7
 80141c8:	3001      	adds	r0, #1
 80141ca:	f43f ae74 	beq.w	8013eb6 <_printf_float+0xbe>
 80141ce:	ee18 3a10 	vmov	r3, s16
 80141d2:	4652      	mov	r2, sl
 80141d4:	4631      	mov	r1, r6
 80141d6:	4628      	mov	r0, r5
 80141d8:	47b8      	blx	r7
 80141da:	3001      	adds	r0, #1
 80141dc:	f43f ae6b 	beq.w	8013eb6 <_printf_float+0xbe>
 80141e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141e4:	2200      	movs	r2, #0
 80141e6:	2300      	movs	r3, #0
 80141e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80141ec:	f7ec fc94 	bl	8000b18 <__aeabi_dcmpeq>
 80141f0:	b9d8      	cbnz	r0, 801422a <_printf_float+0x432>
 80141f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80141f6:	f108 0201 	add.w	r2, r8, #1
 80141fa:	4631      	mov	r1, r6
 80141fc:	4628      	mov	r0, r5
 80141fe:	47b8      	blx	r7
 8014200:	3001      	adds	r0, #1
 8014202:	d10e      	bne.n	8014222 <_printf_float+0x42a>
 8014204:	e657      	b.n	8013eb6 <_printf_float+0xbe>
 8014206:	2301      	movs	r3, #1
 8014208:	4652      	mov	r2, sl
 801420a:	4631      	mov	r1, r6
 801420c:	4628      	mov	r0, r5
 801420e:	47b8      	blx	r7
 8014210:	3001      	adds	r0, #1
 8014212:	f43f ae50 	beq.w	8013eb6 <_printf_float+0xbe>
 8014216:	f108 0801 	add.w	r8, r8, #1
 801421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801421c:	3b01      	subs	r3, #1
 801421e:	4543      	cmp	r3, r8
 8014220:	dcf1      	bgt.n	8014206 <_printf_float+0x40e>
 8014222:	464b      	mov	r3, r9
 8014224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014228:	e6da      	b.n	8013fe0 <_printf_float+0x1e8>
 801422a:	f04f 0800 	mov.w	r8, #0
 801422e:	f104 0a1a 	add.w	sl, r4, #26
 8014232:	e7f2      	b.n	801421a <_printf_float+0x422>
 8014234:	2301      	movs	r3, #1
 8014236:	4642      	mov	r2, r8
 8014238:	e7df      	b.n	80141fa <_printf_float+0x402>
 801423a:	2301      	movs	r3, #1
 801423c:	464a      	mov	r2, r9
 801423e:	4631      	mov	r1, r6
 8014240:	4628      	mov	r0, r5
 8014242:	47b8      	blx	r7
 8014244:	3001      	adds	r0, #1
 8014246:	f43f ae36 	beq.w	8013eb6 <_printf_float+0xbe>
 801424a:	f108 0801 	add.w	r8, r8, #1
 801424e:	68e3      	ldr	r3, [r4, #12]
 8014250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014252:	1a5b      	subs	r3, r3, r1
 8014254:	4543      	cmp	r3, r8
 8014256:	dcf0      	bgt.n	801423a <_printf_float+0x442>
 8014258:	e6f8      	b.n	801404c <_printf_float+0x254>
 801425a:	f04f 0800 	mov.w	r8, #0
 801425e:	f104 0919 	add.w	r9, r4, #25
 8014262:	e7f4      	b.n	801424e <_printf_float+0x456>

08014264 <_printf_common>:
 8014264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014268:	4616      	mov	r6, r2
 801426a:	4699      	mov	r9, r3
 801426c:	688a      	ldr	r2, [r1, #8]
 801426e:	690b      	ldr	r3, [r1, #16]
 8014270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014274:	4293      	cmp	r3, r2
 8014276:	bfb8      	it	lt
 8014278:	4613      	movlt	r3, r2
 801427a:	6033      	str	r3, [r6, #0]
 801427c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014280:	4607      	mov	r7, r0
 8014282:	460c      	mov	r4, r1
 8014284:	b10a      	cbz	r2, 801428a <_printf_common+0x26>
 8014286:	3301      	adds	r3, #1
 8014288:	6033      	str	r3, [r6, #0]
 801428a:	6823      	ldr	r3, [r4, #0]
 801428c:	0699      	lsls	r1, r3, #26
 801428e:	bf42      	ittt	mi
 8014290:	6833      	ldrmi	r3, [r6, #0]
 8014292:	3302      	addmi	r3, #2
 8014294:	6033      	strmi	r3, [r6, #0]
 8014296:	6825      	ldr	r5, [r4, #0]
 8014298:	f015 0506 	ands.w	r5, r5, #6
 801429c:	d106      	bne.n	80142ac <_printf_common+0x48>
 801429e:	f104 0a19 	add.w	sl, r4, #25
 80142a2:	68e3      	ldr	r3, [r4, #12]
 80142a4:	6832      	ldr	r2, [r6, #0]
 80142a6:	1a9b      	subs	r3, r3, r2
 80142a8:	42ab      	cmp	r3, r5
 80142aa:	dc26      	bgt.n	80142fa <_printf_common+0x96>
 80142ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80142b0:	1e13      	subs	r3, r2, #0
 80142b2:	6822      	ldr	r2, [r4, #0]
 80142b4:	bf18      	it	ne
 80142b6:	2301      	movne	r3, #1
 80142b8:	0692      	lsls	r2, r2, #26
 80142ba:	d42b      	bmi.n	8014314 <_printf_common+0xb0>
 80142bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142c0:	4649      	mov	r1, r9
 80142c2:	4638      	mov	r0, r7
 80142c4:	47c0      	blx	r8
 80142c6:	3001      	adds	r0, #1
 80142c8:	d01e      	beq.n	8014308 <_printf_common+0xa4>
 80142ca:	6823      	ldr	r3, [r4, #0]
 80142cc:	6922      	ldr	r2, [r4, #16]
 80142ce:	f003 0306 	and.w	r3, r3, #6
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	bf02      	ittt	eq
 80142d6:	68e5      	ldreq	r5, [r4, #12]
 80142d8:	6833      	ldreq	r3, [r6, #0]
 80142da:	1aed      	subeq	r5, r5, r3
 80142dc:	68a3      	ldr	r3, [r4, #8]
 80142de:	bf0c      	ite	eq
 80142e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142e4:	2500      	movne	r5, #0
 80142e6:	4293      	cmp	r3, r2
 80142e8:	bfc4      	itt	gt
 80142ea:	1a9b      	subgt	r3, r3, r2
 80142ec:	18ed      	addgt	r5, r5, r3
 80142ee:	2600      	movs	r6, #0
 80142f0:	341a      	adds	r4, #26
 80142f2:	42b5      	cmp	r5, r6
 80142f4:	d11a      	bne.n	801432c <_printf_common+0xc8>
 80142f6:	2000      	movs	r0, #0
 80142f8:	e008      	b.n	801430c <_printf_common+0xa8>
 80142fa:	2301      	movs	r3, #1
 80142fc:	4652      	mov	r2, sl
 80142fe:	4649      	mov	r1, r9
 8014300:	4638      	mov	r0, r7
 8014302:	47c0      	blx	r8
 8014304:	3001      	adds	r0, #1
 8014306:	d103      	bne.n	8014310 <_printf_common+0xac>
 8014308:	f04f 30ff 	mov.w	r0, #4294967295
 801430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014310:	3501      	adds	r5, #1
 8014312:	e7c6      	b.n	80142a2 <_printf_common+0x3e>
 8014314:	18e1      	adds	r1, r4, r3
 8014316:	1c5a      	adds	r2, r3, #1
 8014318:	2030      	movs	r0, #48	; 0x30
 801431a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801431e:	4422      	add	r2, r4
 8014320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014328:	3302      	adds	r3, #2
 801432a:	e7c7      	b.n	80142bc <_printf_common+0x58>
 801432c:	2301      	movs	r3, #1
 801432e:	4622      	mov	r2, r4
 8014330:	4649      	mov	r1, r9
 8014332:	4638      	mov	r0, r7
 8014334:	47c0      	blx	r8
 8014336:	3001      	adds	r0, #1
 8014338:	d0e6      	beq.n	8014308 <_printf_common+0xa4>
 801433a:	3601      	adds	r6, #1
 801433c:	e7d9      	b.n	80142f2 <_printf_common+0x8e>
	...

08014340 <_printf_i>:
 8014340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014344:	7e0f      	ldrb	r7, [r1, #24]
 8014346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014348:	2f78      	cmp	r7, #120	; 0x78
 801434a:	4691      	mov	r9, r2
 801434c:	4680      	mov	r8, r0
 801434e:	460c      	mov	r4, r1
 8014350:	469a      	mov	sl, r3
 8014352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014356:	d807      	bhi.n	8014368 <_printf_i+0x28>
 8014358:	2f62      	cmp	r7, #98	; 0x62
 801435a:	d80a      	bhi.n	8014372 <_printf_i+0x32>
 801435c:	2f00      	cmp	r7, #0
 801435e:	f000 80d4 	beq.w	801450a <_printf_i+0x1ca>
 8014362:	2f58      	cmp	r7, #88	; 0x58
 8014364:	f000 80c0 	beq.w	80144e8 <_printf_i+0x1a8>
 8014368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801436c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014370:	e03a      	b.n	80143e8 <_printf_i+0xa8>
 8014372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014376:	2b15      	cmp	r3, #21
 8014378:	d8f6      	bhi.n	8014368 <_printf_i+0x28>
 801437a:	a101      	add	r1, pc, #4	; (adr r1, 8014380 <_printf_i+0x40>)
 801437c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014380:	080143d9 	.word	0x080143d9
 8014384:	080143ed 	.word	0x080143ed
 8014388:	08014369 	.word	0x08014369
 801438c:	08014369 	.word	0x08014369
 8014390:	08014369 	.word	0x08014369
 8014394:	08014369 	.word	0x08014369
 8014398:	080143ed 	.word	0x080143ed
 801439c:	08014369 	.word	0x08014369
 80143a0:	08014369 	.word	0x08014369
 80143a4:	08014369 	.word	0x08014369
 80143a8:	08014369 	.word	0x08014369
 80143ac:	080144f1 	.word	0x080144f1
 80143b0:	08014419 	.word	0x08014419
 80143b4:	080144ab 	.word	0x080144ab
 80143b8:	08014369 	.word	0x08014369
 80143bc:	08014369 	.word	0x08014369
 80143c0:	08014513 	.word	0x08014513
 80143c4:	08014369 	.word	0x08014369
 80143c8:	08014419 	.word	0x08014419
 80143cc:	08014369 	.word	0x08014369
 80143d0:	08014369 	.word	0x08014369
 80143d4:	080144b3 	.word	0x080144b3
 80143d8:	682b      	ldr	r3, [r5, #0]
 80143da:	1d1a      	adds	r2, r3, #4
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	602a      	str	r2, [r5, #0]
 80143e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143e8:	2301      	movs	r3, #1
 80143ea:	e09f      	b.n	801452c <_printf_i+0x1ec>
 80143ec:	6820      	ldr	r0, [r4, #0]
 80143ee:	682b      	ldr	r3, [r5, #0]
 80143f0:	0607      	lsls	r7, r0, #24
 80143f2:	f103 0104 	add.w	r1, r3, #4
 80143f6:	6029      	str	r1, [r5, #0]
 80143f8:	d501      	bpl.n	80143fe <_printf_i+0xbe>
 80143fa:	681e      	ldr	r6, [r3, #0]
 80143fc:	e003      	b.n	8014406 <_printf_i+0xc6>
 80143fe:	0646      	lsls	r6, r0, #25
 8014400:	d5fb      	bpl.n	80143fa <_printf_i+0xba>
 8014402:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014406:	2e00      	cmp	r6, #0
 8014408:	da03      	bge.n	8014412 <_printf_i+0xd2>
 801440a:	232d      	movs	r3, #45	; 0x2d
 801440c:	4276      	negs	r6, r6
 801440e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014412:	485a      	ldr	r0, [pc, #360]	; (801457c <_printf_i+0x23c>)
 8014414:	230a      	movs	r3, #10
 8014416:	e012      	b.n	801443e <_printf_i+0xfe>
 8014418:	682b      	ldr	r3, [r5, #0]
 801441a:	6820      	ldr	r0, [r4, #0]
 801441c:	1d19      	adds	r1, r3, #4
 801441e:	6029      	str	r1, [r5, #0]
 8014420:	0605      	lsls	r5, r0, #24
 8014422:	d501      	bpl.n	8014428 <_printf_i+0xe8>
 8014424:	681e      	ldr	r6, [r3, #0]
 8014426:	e002      	b.n	801442e <_printf_i+0xee>
 8014428:	0641      	lsls	r1, r0, #25
 801442a:	d5fb      	bpl.n	8014424 <_printf_i+0xe4>
 801442c:	881e      	ldrh	r6, [r3, #0]
 801442e:	4853      	ldr	r0, [pc, #332]	; (801457c <_printf_i+0x23c>)
 8014430:	2f6f      	cmp	r7, #111	; 0x6f
 8014432:	bf0c      	ite	eq
 8014434:	2308      	moveq	r3, #8
 8014436:	230a      	movne	r3, #10
 8014438:	2100      	movs	r1, #0
 801443a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801443e:	6865      	ldr	r5, [r4, #4]
 8014440:	60a5      	str	r5, [r4, #8]
 8014442:	2d00      	cmp	r5, #0
 8014444:	bfa2      	ittt	ge
 8014446:	6821      	ldrge	r1, [r4, #0]
 8014448:	f021 0104 	bicge.w	r1, r1, #4
 801444c:	6021      	strge	r1, [r4, #0]
 801444e:	b90e      	cbnz	r6, 8014454 <_printf_i+0x114>
 8014450:	2d00      	cmp	r5, #0
 8014452:	d04b      	beq.n	80144ec <_printf_i+0x1ac>
 8014454:	4615      	mov	r5, r2
 8014456:	fbb6 f1f3 	udiv	r1, r6, r3
 801445a:	fb03 6711 	mls	r7, r3, r1, r6
 801445e:	5dc7      	ldrb	r7, [r0, r7]
 8014460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014464:	4637      	mov	r7, r6
 8014466:	42bb      	cmp	r3, r7
 8014468:	460e      	mov	r6, r1
 801446a:	d9f4      	bls.n	8014456 <_printf_i+0x116>
 801446c:	2b08      	cmp	r3, #8
 801446e:	d10b      	bne.n	8014488 <_printf_i+0x148>
 8014470:	6823      	ldr	r3, [r4, #0]
 8014472:	07de      	lsls	r6, r3, #31
 8014474:	d508      	bpl.n	8014488 <_printf_i+0x148>
 8014476:	6923      	ldr	r3, [r4, #16]
 8014478:	6861      	ldr	r1, [r4, #4]
 801447a:	4299      	cmp	r1, r3
 801447c:	bfde      	ittt	le
 801447e:	2330      	movle	r3, #48	; 0x30
 8014480:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014484:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014488:	1b52      	subs	r2, r2, r5
 801448a:	6122      	str	r2, [r4, #16]
 801448c:	f8cd a000 	str.w	sl, [sp]
 8014490:	464b      	mov	r3, r9
 8014492:	aa03      	add	r2, sp, #12
 8014494:	4621      	mov	r1, r4
 8014496:	4640      	mov	r0, r8
 8014498:	f7ff fee4 	bl	8014264 <_printf_common>
 801449c:	3001      	adds	r0, #1
 801449e:	d14a      	bne.n	8014536 <_printf_i+0x1f6>
 80144a0:	f04f 30ff 	mov.w	r0, #4294967295
 80144a4:	b004      	add	sp, #16
 80144a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144aa:	6823      	ldr	r3, [r4, #0]
 80144ac:	f043 0320 	orr.w	r3, r3, #32
 80144b0:	6023      	str	r3, [r4, #0]
 80144b2:	4833      	ldr	r0, [pc, #204]	; (8014580 <_printf_i+0x240>)
 80144b4:	2778      	movs	r7, #120	; 0x78
 80144b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80144ba:	6823      	ldr	r3, [r4, #0]
 80144bc:	6829      	ldr	r1, [r5, #0]
 80144be:	061f      	lsls	r7, r3, #24
 80144c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80144c4:	d402      	bmi.n	80144cc <_printf_i+0x18c>
 80144c6:	065f      	lsls	r7, r3, #25
 80144c8:	bf48      	it	mi
 80144ca:	b2b6      	uxthmi	r6, r6
 80144cc:	07df      	lsls	r7, r3, #31
 80144ce:	bf48      	it	mi
 80144d0:	f043 0320 	orrmi.w	r3, r3, #32
 80144d4:	6029      	str	r1, [r5, #0]
 80144d6:	bf48      	it	mi
 80144d8:	6023      	strmi	r3, [r4, #0]
 80144da:	b91e      	cbnz	r6, 80144e4 <_printf_i+0x1a4>
 80144dc:	6823      	ldr	r3, [r4, #0]
 80144de:	f023 0320 	bic.w	r3, r3, #32
 80144e2:	6023      	str	r3, [r4, #0]
 80144e4:	2310      	movs	r3, #16
 80144e6:	e7a7      	b.n	8014438 <_printf_i+0xf8>
 80144e8:	4824      	ldr	r0, [pc, #144]	; (801457c <_printf_i+0x23c>)
 80144ea:	e7e4      	b.n	80144b6 <_printf_i+0x176>
 80144ec:	4615      	mov	r5, r2
 80144ee:	e7bd      	b.n	801446c <_printf_i+0x12c>
 80144f0:	682b      	ldr	r3, [r5, #0]
 80144f2:	6826      	ldr	r6, [r4, #0]
 80144f4:	6961      	ldr	r1, [r4, #20]
 80144f6:	1d18      	adds	r0, r3, #4
 80144f8:	6028      	str	r0, [r5, #0]
 80144fa:	0635      	lsls	r5, r6, #24
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	d501      	bpl.n	8014504 <_printf_i+0x1c4>
 8014500:	6019      	str	r1, [r3, #0]
 8014502:	e002      	b.n	801450a <_printf_i+0x1ca>
 8014504:	0670      	lsls	r0, r6, #25
 8014506:	d5fb      	bpl.n	8014500 <_printf_i+0x1c0>
 8014508:	8019      	strh	r1, [r3, #0]
 801450a:	2300      	movs	r3, #0
 801450c:	6123      	str	r3, [r4, #16]
 801450e:	4615      	mov	r5, r2
 8014510:	e7bc      	b.n	801448c <_printf_i+0x14c>
 8014512:	682b      	ldr	r3, [r5, #0]
 8014514:	1d1a      	adds	r2, r3, #4
 8014516:	602a      	str	r2, [r5, #0]
 8014518:	681d      	ldr	r5, [r3, #0]
 801451a:	6862      	ldr	r2, [r4, #4]
 801451c:	2100      	movs	r1, #0
 801451e:	4628      	mov	r0, r5
 8014520:	f7eb fe7e 	bl	8000220 <memchr>
 8014524:	b108      	cbz	r0, 801452a <_printf_i+0x1ea>
 8014526:	1b40      	subs	r0, r0, r5
 8014528:	6060      	str	r0, [r4, #4]
 801452a:	6863      	ldr	r3, [r4, #4]
 801452c:	6123      	str	r3, [r4, #16]
 801452e:	2300      	movs	r3, #0
 8014530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014534:	e7aa      	b.n	801448c <_printf_i+0x14c>
 8014536:	6923      	ldr	r3, [r4, #16]
 8014538:	462a      	mov	r2, r5
 801453a:	4649      	mov	r1, r9
 801453c:	4640      	mov	r0, r8
 801453e:	47d0      	blx	sl
 8014540:	3001      	adds	r0, #1
 8014542:	d0ad      	beq.n	80144a0 <_printf_i+0x160>
 8014544:	6823      	ldr	r3, [r4, #0]
 8014546:	079b      	lsls	r3, r3, #30
 8014548:	d413      	bmi.n	8014572 <_printf_i+0x232>
 801454a:	68e0      	ldr	r0, [r4, #12]
 801454c:	9b03      	ldr	r3, [sp, #12]
 801454e:	4298      	cmp	r0, r3
 8014550:	bfb8      	it	lt
 8014552:	4618      	movlt	r0, r3
 8014554:	e7a6      	b.n	80144a4 <_printf_i+0x164>
 8014556:	2301      	movs	r3, #1
 8014558:	4632      	mov	r2, r6
 801455a:	4649      	mov	r1, r9
 801455c:	4640      	mov	r0, r8
 801455e:	47d0      	blx	sl
 8014560:	3001      	adds	r0, #1
 8014562:	d09d      	beq.n	80144a0 <_printf_i+0x160>
 8014564:	3501      	adds	r5, #1
 8014566:	68e3      	ldr	r3, [r4, #12]
 8014568:	9903      	ldr	r1, [sp, #12]
 801456a:	1a5b      	subs	r3, r3, r1
 801456c:	42ab      	cmp	r3, r5
 801456e:	dcf2      	bgt.n	8014556 <_printf_i+0x216>
 8014570:	e7eb      	b.n	801454a <_printf_i+0x20a>
 8014572:	2500      	movs	r5, #0
 8014574:	f104 0619 	add.w	r6, r4, #25
 8014578:	e7f5      	b.n	8014566 <_printf_i+0x226>
 801457a:	bf00      	nop
 801457c:	0801baae 	.word	0x0801baae
 8014580:	0801babf 	.word	0x0801babf

08014584 <std>:
 8014584:	2300      	movs	r3, #0
 8014586:	b510      	push	{r4, lr}
 8014588:	4604      	mov	r4, r0
 801458a:	e9c0 3300 	strd	r3, r3, [r0]
 801458e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014592:	6083      	str	r3, [r0, #8]
 8014594:	8181      	strh	r1, [r0, #12]
 8014596:	6643      	str	r3, [r0, #100]	; 0x64
 8014598:	81c2      	strh	r2, [r0, #14]
 801459a:	6183      	str	r3, [r0, #24]
 801459c:	4619      	mov	r1, r3
 801459e:	2208      	movs	r2, #8
 80145a0:	305c      	adds	r0, #92	; 0x5c
 80145a2:	f000 f914 	bl	80147ce <memset>
 80145a6:	4b0d      	ldr	r3, [pc, #52]	; (80145dc <std+0x58>)
 80145a8:	6263      	str	r3, [r4, #36]	; 0x24
 80145aa:	4b0d      	ldr	r3, [pc, #52]	; (80145e0 <std+0x5c>)
 80145ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80145ae:	4b0d      	ldr	r3, [pc, #52]	; (80145e4 <std+0x60>)
 80145b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145b2:	4b0d      	ldr	r3, [pc, #52]	; (80145e8 <std+0x64>)
 80145b4:	6323      	str	r3, [r4, #48]	; 0x30
 80145b6:	4b0d      	ldr	r3, [pc, #52]	; (80145ec <std+0x68>)
 80145b8:	6224      	str	r4, [r4, #32]
 80145ba:	429c      	cmp	r4, r3
 80145bc:	d006      	beq.n	80145cc <std+0x48>
 80145be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80145c2:	4294      	cmp	r4, r2
 80145c4:	d002      	beq.n	80145cc <std+0x48>
 80145c6:	33d0      	adds	r3, #208	; 0xd0
 80145c8:	429c      	cmp	r4, r3
 80145ca:	d105      	bne.n	80145d8 <std+0x54>
 80145cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145d4:	f000 b978 	b.w	80148c8 <__retarget_lock_init_recursive>
 80145d8:	bd10      	pop	{r4, pc}
 80145da:	bf00      	nop
 80145dc:	08014749 	.word	0x08014749
 80145e0:	0801476b 	.word	0x0801476b
 80145e4:	080147a3 	.word	0x080147a3
 80145e8:	080147c7 	.word	0x080147c7
 80145ec:	20002cf4 	.word	0x20002cf4

080145f0 <stdio_exit_handler>:
 80145f0:	4a02      	ldr	r2, [pc, #8]	; (80145fc <stdio_exit_handler+0xc>)
 80145f2:	4903      	ldr	r1, [pc, #12]	; (8014600 <stdio_exit_handler+0x10>)
 80145f4:	4803      	ldr	r0, [pc, #12]	; (8014604 <stdio_exit_handler+0x14>)
 80145f6:	f000 b869 	b.w	80146cc <_fwalk_sglue>
 80145fa:	bf00      	nop
 80145fc:	2000031c 	.word	0x2000031c
 8014600:	08016279 	.word	0x08016279
 8014604:	20000328 	.word	0x20000328

08014608 <cleanup_stdio>:
 8014608:	6841      	ldr	r1, [r0, #4]
 801460a:	4b0c      	ldr	r3, [pc, #48]	; (801463c <cleanup_stdio+0x34>)
 801460c:	4299      	cmp	r1, r3
 801460e:	b510      	push	{r4, lr}
 8014610:	4604      	mov	r4, r0
 8014612:	d001      	beq.n	8014618 <cleanup_stdio+0x10>
 8014614:	f001 fe30 	bl	8016278 <_fflush_r>
 8014618:	68a1      	ldr	r1, [r4, #8]
 801461a:	4b09      	ldr	r3, [pc, #36]	; (8014640 <cleanup_stdio+0x38>)
 801461c:	4299      	cmp	r1, r3
 801461e:	d002      	beq.n	8014626 <cleanup_stdio+0x1e>
 8014620:	4620      	mov	r0, r4
 8014622:	f001 fe29 	bl	8016278 <_fflush_r>
 8014626:	68e1      	ldr	r1, [r4, #12]
 8014628:	4b06      	ldr	r3, [pc, #24]	; (8014644 <cleanup_stdio+0x3c>)
 801462a:	4299      	cmp	r1, r3
 801462c:	d004      	beq.n	8014638 <cleanup_stdio+0x30>
 801462e:	4620      	mov	r0, r4
 8014630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014634:	f001 be20 	b.w	8016278 <_fflush_r>
 8014638:	bd10      	pop	{r4, pc}
 801463a:	bf00      	nop
 801463c:	20002cf4 	.word	0x20002cf4
 8014640:	20002d5c 	.word	0x20002d5c
 8014644:	20002dc4 	.word	0x20002dc4

08014648 <global_stdio_init.part.0>:
 8014648:	b510      	push	{r4, lr}
 801464a:	4b0b      	ldr	r3, [pc, #44]	; (8014678 <global_stdio_init.part.0+0x30>)
 801464c:	4c0b      	ldr	r4, [pc, #44]	; (801467c <global_stdio_init.part.0+0x34>)
 801464e:	4a0c      	ldr	r2, [pc, #48]	; (8014680 <global_stdio_init.part.0+0x38>)
 8014650:	601a      	str	r2, [r3, #0]
 8014652:	4620      	mov	r0, r4
 8014654:	2200      	movs	r2, #0
 8014656:	2104      	movs	r1, #4
 8014658:	f7ff ff94 	bl	8014584 <std>
 801465c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014660:	2201      	movs	r2, #1
 8014662:	2109      	movs	r1, #9
 8014664:	f7ff ff8e 	bl	8014584 <std>
 8014668:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801466c:	2202      	movs	r2, #2
 801466e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014672:	2112      	movs	r1, #18
 8014674:	f7ff bf86 	b.w	8014584 <std>
 8014678:	20002e2c 	.word	0x20002e2c
 801467c:	20002cf4 	.word	0x20002cf4
 8014680:	080145f1 	.word	0x080145f1

08014684 <__sfp_lock_acquire>:
 8014684:	4801      	ldr	r0, [pc, #4]	; (801468c <__sfp_lock_acquire+0x8>)
 8014686:	f000 b920 	b.w	80148ca <__retarget_lock_acquire_recursive>
 801468a:	bf00      	nop
 801468c:	20002e35 	.word	0x20002e35

08014690 <__sfp_lock_release>:
 8014690:	4801      	ldr	r0, [pc, #4]	; (8014698 <__sfp_lock_release+0x8>)
 8014692:	f000 b91b 	b.w	80148cc <__retarget_lock_release_recursive>
 8014696:	bf00      	nop
 8014698:	20002e35 	.word	0x20002e35

0801469c <__sinit>:
 801469c:	b510      	push	{r4, lr}
 801469e:	4604      	mov	r4, r0
 80146a0:	f7ff fff0 	bl	8014684 <__sfp_lock_acquire>
 80146a4:	6a23      	ldr	r3, [r4, #32]
 80146a6:	b11b      	cbz	r3, 80146b0 <__sinit+0x14>
 80146a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146ac:	f7ff bff0 	b.w	8014690 <__sfp_lock_release>
 80146b0:	4b04      	ldr	r3, [pc, #16]	; (80146c4 <__sinit+0x28>)
 80146b2:	6223      	str	r3, [r4, #32]
 80146b4:	4b04      	ldr	r3, [pc, #16]	; (80146c8 <__sinit+0x2c>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d1f5      	bne.n	80146a8 <__sinit+0xc>
 80146bc:	f7ff ffc4 	bl	8014648 <global_stdio_init.part.0>
 80146c0:	e7f2      	b.n	80146a8 <__sinit+0xc>
 80146c2:	bf00      	nop
 80146c4:	08014609 	.word	0x08014609
 80146c8:	20002e2c 	.word	0x20002e2c

080146cc <_fwalk_sglue>:
 80146cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146d0:	4607      	mov	r7, r0
 80146d2:	4688      	mov	r8, r1
 80146d4:	4614      	mov	r4, r2
 80146d6:	2600      	movs	r6, #0
 80146d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80146dc:	f1b9 0901 	subs.w	r9, r9, #1
 80146e0:	d505      	bpl.n	80146ee <_fwalk_sglue+0x22>
 80146e2:	6824      	ldr	r4, [r4, #0]
 80146e4:	2c00      	cmp	r4, #0
 80146e6:	d1f7      	bne.n	80146d8 <_fwalk_sglue+0xc>
 80146e8:	4630      	mov	r0, r6
 80146ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146ee:	89ab      	ldrh	r3, [r5, #12]
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d907      	bls.n	8014704 <_fwalk_sglue+0x38>
 80146f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80146f8:	3301      	adds	r3, #1
 80146fa:	d003      	beq.n	8014704 <_fwalk_sglue+0x38>
 80146fc:	4629      	mov	r1, r5
 80146fe:	4638      	mov	r0, r7
 8014700:	47c0      	blx	r8
 8014702:	4306      	orrs	r6, r0
 8014704:	3568      	adds	r5, #104	; 0x68
 8014706:	e7e9      	b.n	80146dc <_fwalk_sglue+0x10>

08014708 <siprintf>:
 8014708:	b40e      	push	{r1, r2, r3}
 801470a:	b500      	push	{lr}
 801470c:	b09c      	sub	sp, #112	; 0x70
 801470e:	ab1d      	add	r3, sp, #116	; 0x74
 8014710:	9002      	str	r0, [sp, #8]
 8014712:	9006      	str	r0, [sp, #24]
 8014714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014718:	4809      	ldr	r0, [pc, #36]	; (8014740 <siprintf+0x38>)
 801471a:	9107      	str	r1, [sp, #28]
 801471c:	9104      	str	r1, [sp, #16]
 801471e:	4909      	ldr	r1, [pc, #36]	; (8014744 <siprintf+0x3c>)
 8014720:	f853 2b04 	ldr.w	r2, [r3], #4
 8014724:	9105      	str	r1, [sp, #20]
 8014726:	6800      	ldr	r0, [r0, #0]
 8014728:	9301      	str	r3, [sp, #4]
 801472a:	a902      	add	r1, sp, #8
 801472c:	f001 fc20 	bl	8015f70 <_svfiprintf_r>
 8014730:	9b02      	ldr	r3, [sp, #8]
 8014732:	2200      	movs	r2, #0
 8014734:	701a      	strb	r2, [r3, #0]
 8014736:	b01c      	add	sp, #112	; 0x70
 8014738:	f85d eb04 	ldr.w	lr, [sp], #4
 801473c:	b003      	add	sp, #12
 801473e:	4770      	bx	lr
 8014740:	20000374 	.word	0x20000374
 8014744:	ffff0208 	.word	0xffff0208

08014748 <__sread>:
 8014748:	b510      	push	{r4, lr}
 801474a:	460c      	mov	r4, r1
 801474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014750:	f000 f86c 	bl	801482c <_read_r>
 8014754:	2800      	cmp	r0, #0
 8014756:	bfab      	itete	ge
 8014758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801475a:	89a3      	ldrhlt	r3, [r4, #12]
 801475c:	181b      	addge	r3, r3, r0
 801475e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014762:	bfac      	ite	ge
 8014764:	6563      	strge	r3, [r4, #84]	; 0x54
 8014766:	81a3      	strhlt	r3, [r4, #12]
 8014768:	bd10      	pop	{r4, pc}

0801476a <__swrite>:
 801476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476e:	461f      	mov	r7, r3
 8014770:	898b      	ldrh	r3, [r1, #12]
 8014772:	05db      	lsls	r3, r3, #23
 8014774:	4605      	mov	r5, r0
 8014776:	460c      	mov	r4, r1
 8014778:	4616      	mov	r6, r2
 801477a:	d505      	bpl.n	8014788 <__swrite+0x1e>
 801477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014780:	2302      	movs	r3, #2
 8014782:	2200      	movs	r2, #0
 8014784:	f000 f840 	bl	8014808 <_lseek_r>
 8014788:	89a3      	ldrh	r3, [r4, #12]
 801478a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801478e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014792:	81a3      	strh	r3, [r4, #12]
 8014794:	4632      	mov	r2, r6
 8014796:	463b      	mov	r3, r7
 8014798:	4628      	mov	r0, r5
 801479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801479e:	f000 b857 	b.w	8014850 <_write_r>

080147a2 <__sseek>:
 80147a2:	b510      	push	{r4, lr}
 80147a4:	460c      	mov	r4, r1
 80147a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147aa:	f000 f82d 	bl	8014808 <_lseek_r>
 80147ae:	1c43      	adds	r3, r0, #1
 80147b0:	89a3      	ldrh	r3, [r4, #12]
 80147b2:	bf15      	itete	ne
 80147b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80147b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80147ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80147be:	81a3      	strheq	r3, [r4, #12]
 80147c0:	bf18      	it	ne
 80147c2:	81a3      	strhne	r3, [r4, #12]
 80147c4:	bd10      	pop	{r4, pc}

080147c6 <__sclose>:
 80147c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ca:	f000 b80d 	b.w	80147e8 <_close_r>

080147ce <memset>:
 80147ce:	4402      	add	r2, r0
 80147d0:	4603      	mov	r3, r0
 80147d2:	4293      	cmp	r3, r2
 80147d4:	d100      	bne.n	80147d8 <memset+0xa>
 80147d6:	4770      	bx	lr
 80147d8:	f803 1b01 	strb.w	r1, [r3], #1
 80147dc:	e7f9      	b.n	80147d2 <memset+0x4>
	...

080147e0 <_localeconv_r>:
 80147e0:	4800      	ldr	r0, [pc, #0]	; (80147e4 <_localeconv_r+0x4>)
 80147e2:	4770      	bx	lr
 80147e4:	20000468 	.word	0x20000468

080147e8 <_close_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4d06      	ldr	r5, [pc, #24]	; (8014804 <_close_r+0x1c>)
 80147ec:	2300      	movs	r3, #0
 80147ee:	4604      	mov	r4, r0
 80147f0:	4608      	mov	r0, r1
 80147f2:	602b      	str	r3, [r5, #0]
 80147f4:	f7ef ffa5 	bl	8004742 <_close>
 80147f8:	1c43      	adds	r3, r0, #1
 80147fa:	d102      	bne.n	8014802 <_close_r+0x1a>
 80147fc:	682b      	ldr	r3, [r5, #0]
 80147fe:	b103      	cbz	r3, 8014802 <_close_r+0x1a>
 8014800:	6023      	str	r3, [r4, #0]
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	20002e30 	.word	0x20002e30

08014808 <_lseek_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4d07      	ldr	r5, [pc, #28]	; (8014828 <_lseek_r+0x20>)
 801480c:	4604      	mov	r4, r0
 801480e:	4608      	mov	r0, r1
 8014810:	4611      	mov	r1, r2
 8014812:	2200      	movs	r2, #0
 8014814:	602a      	str	r2, [r5, #0]
 8014816:	461a      	mov	r2, r3
 8014818:	f7ef ffba 	bl	8004790 <_lseek>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_lseek_r+0x1e>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_lseek_r+0x1e>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	20002e30 	.word	0x20002e30

0801482c <_read_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d07      	ldr	r5, [pc, #28]	; (801484c <_read_r+0x20>)
 8014830:	4604      	mov	r4, r0
 8014832:	4608      	mov	r0, r1
 8014834:	4611      	mov	r1, r2
 8014836:	2200      	movs	r2, #0
 8014838:	602a      	str	r2, [r5, #0]
 801483a:	461a      	mov	r2, r3
 801483c:	f7ef ff48 	bl	80046d0 <_read>
 8014840:	1c43      	adds	r3, r0, #1
 8014842:	d102      	bne.n	801484a <_read_r+0x1e>
 8014844:	682b      	ldr	r3, [r5, #0]
 8014846:	b103      	cbz	r3, 801484a <_read_r+0x1e>
 8014848:	6023      	str	r3, [r4, #0]
 801484a:	bd38      	pop	{r3, r4, r5, pc}
 801484c:	20002e30 	.word	0x20002e30

08014850 <_write_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d07      	ldr	r5, [pc, #28]	; (8014870 <_write_r+0x20>)
 8014854:	4604      	mov	r4, r0
 8014856:	4608      	mov	r0, r1
 8014858:	4611      	mov	r1, r2
 801485a:	2200      	movs	r2, #0
 801485c:	602a      	str	r2, [r5, #0]
 801485e:	461a      	mov	r2, r3
 8014860:	f7ef ff53 	bl	800470a <_write>
 8014864:	1c43      	adds	r3, r0, #1
 8014866:	d102      	bne.n	801486e <_write_r+0x1e>
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	b103      	cbz	r3, 801486e <_write_r+0x1e>
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	bd38      	pop	{r3, r4, r5, pc}
 8014870:	20002e30 	.word	0x20002e30

08014874 <__errno>:
 8014874:	4b01      	ldr	r3, [pc, #4]	; (801487c <__errno+0x8>)
 8014876:	6818      	ldr	r0, [r3, #0]
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	20000374 	.word	0x20000374

08014880 <__libc_init_array>:
 8014880:	b570      	push	{r4, r5, r6, lr}
 8014882:	4d0d      	ldr	r5, [pc, #52]	; (80148b8 <__libc_init_array+0x38>)
 8014884:	4c0d      	ldr	r4, [pc, #52]	; (80148bc <__libc_init_array+0x3c>)
 8014886:	1b64      	subs	r4, r4, r5
 8014888:	10a4      	asrs	r4, r4, #2
 801488a:	2600      	movs	r6, #0
 801488c:	42a6      	cmp	r6, r4
 801488e:	d109      	bne.n	80148a4 <__libc_init_array+0x24>
 8014890:	4d0b      	ldr	r5, [pc, #44]	; (80148c0 <__libc_init_array+0x40>)
 8014892:	4c0c      	ldr	r4, [pc, #48]	; (80148c4 <__libc_init_array+0x44>)
 8014894:	f002 fa18 	bl	8016cc8 <_init>
 8014898:	1b64      	subs	r4, r4, r5
 801489a:	10a4      	asrs	r4, r4, #2
 801489c:	2600      	movs	r6, #0
 801489e:	42a6      	cmp	r6, r4
 80148a0:	d105      	bne.n	80148ae <__libc_init_array+0x2e>
 80148a2:	bd70      	pop	{r4, r5, r6, pc}
 80148a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80148a8:	4798      	blx	r3
 80148aa:	3601      	adds	r6, #1
 80148ac:	e7ee      	b.n	801488c <__libc_init_array+0xc>
 80148ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80148b2:	4798      	blx	r3
 80148b4:	3601      	adds	r6, #1
 80148b6:	e7f2      	b.n	801489e <__libc_init_array+0x1e>
 80148b8:	0801be20 	.word	0x0801be20
 80148bc:	0801be20 	.word	0x0801be20
 80148c0:	0801be20 	.word	0x0801be20
 80148c4:	0801be24 	.word	0x0801be24

080148c8 <__retarget_lock_init_recursive>:
 80148c8:	4770      	bx	lr

080148ca <__retarget_lock_acquire_recursive>:
 80148ca:	4770      	bx	lr

080148cc <__retarget_lock_release_recursive>:
 80148cc:	4770      	bx	lr

080148ce <quorem>:
 80148ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d2:	6903      	ldr	r3, [r0, #16]
 80148d4:	690c      	ldr	r4, [r1, #16]
 80148d6:	42a3      	cmp	r3, r4
 80148d8:	4607      	mov	r7, r0
 80148da:	db7e      	blt.n	80149da <quorem+0x10c>
 80148dc:	3c01      	subs	r4, #1
 80148de:	f101 0814 	add.w	r8, r1, #20
 80148e2:	f100 0514 	add.w	r5, r0, #20
 80148e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80148f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148f4:	3301      	adds	r3, #1
 80148f6:	429a      	cmp	r2, r3
 80148f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80148fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014900:	fbb2 f6f3 	udiv	r6, r2, r3
 8014904:	d331      	bcc.n	801496a <quorem+0x9c>
 8014906:	f04f 0e00 	mov.w	lr, #0
 801490a:	4640      	mov	r0, r8
 801490c:	46ac      	mov	ip, r5
 801490e:	46f2      	mov	sl, lr
 8014910:	f850 2b04 	ldr.w	r2, [r0], #4
 8014914:	b293      	uxth	r3, r2
 8014916:	fb06 e303 	mla	r3, r6, r3, lr
 801491a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801491e:	0c1a      	lsrs	r2, r3, #16
 8014920:	b29b      	uxth	r3, r3
 8014922:	ebaa 0303 	sub.w	r3, sl, r3
 8014926:	f8dc a000 	ldr.w	sl, [ip]
 801492a:	fa13 f38a 	uxtah	r3, r3, sl
 801492e:	fb06 220e 	mla	r2, r6, lr, r2
 8014932:	9300      	str	r3, [sp, #0]
 8014934:	9b00      	ldr	r3, [sp, #0]
 8014936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801493a:	b292      	uxth	r2, r2
 801493c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014944:	f8bd 3000 	ldrh.w	r3, [sp]
 8014948:	4581      	cmp	r9, r0
 801494a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801494e:	f84c 3b04 	str.w	r3, [ip], #4
 8014952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014956:	d2db      	bcs.n	8014910 <quorem+0x42>
 8014958:	f855 300b 	ldr.w	r3, [r5, fp]
 801495c:	b92b      	cbnz	r3, 801496a <quorem+0x9c>
 801495e:	9b01      	ldr	r3, [sp, #4]
 8014960:	3b04      	subs	r3, #4
 8014962:	429d      	cmp	r5, r3
 8014964:	461a      	mov	r2, r3
 8014966:	d32c      	bcc.n	80149c2 <quorem+0xf4>
 8014968:	613c      	str	r4, [r7, #16]
 801496a:	4638      	mov	r0, r7
 801496c:	f001 f9a6 	bl	8015cbc <__mcmp>
 8014970:	2800      	cmp	r0, #0
 8014972:	db22      	blt.n	80149ba <quorem+0xec>
 8014974:	3601      	adds	r6, #1
 8014976:	4629      	mov	r1, r5
 8014978:	2000      	movs	r0, #0
 801497a:	f858 2b04 	ldr.w	r2, [r8], #4
 801497e:	f8d1 c000 	ldr.w	ip, [r1]
 8014982:	b293      	uxth	r3, r2
 8014984:	1ac3      	subs	r3, r0, r3
 8014986:	0c12      	lsrs	r2, r2, #16
 8014988:	fa13 f38c 	uxtah	r3, r3, ip
 801498c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014994:	b29b      	uxth	r3, r3
 8014996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801499a:	45c1      	cmp	r9, r8
 801499c:	f841 3b04 	str.w	r3, [r1], #4
 80149a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80149a4:	d2e9      	bcs.n	801497a <quorem+0xac>
 80149a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80149aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80149ae:	b922      	cbnz	r2, 80149ba <quorem+0xec>
 80149b0:	3b04      	subs	r3, #4
 80149b2:	429d      	cmp	r5, r3
 80149b4:	461a      	mov	r2, r3
 80149b6:	d30a      	bcc.n	80149ce <quorem+0x100>
 80149b8:	613c      	str	r4, [r7, #16]
 80149ba:	4630      	mov	r0, r6
 80149bc:	b003      	add	sp, #12
 80149be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c2:	6812      	ldr	r2, [r2, #0]
 80149c4:	3b04      	subs	r3, #4
 80149c6:	2a00      	cmp	r2, #0
 80149c8:	d1ce      	bne.n	8014968 <quorem+0x9a>
 80149ca:	3c01      	subs	r4, #1
 80149cc:	e7c9      	b.n	8014962 <quorem+0x94>
 80149ce:	6812      	ldr	r2, [r2, #0]
 80149d0:	3b04      	subs	r3, #4
 80149d2:	2a00      	cmp	r2, #0
 80149d4:	d1f0      	bne.n	80149b8 <quorem+0xea>
 80149d6:	3c01      	subs	r4, #1
 80149d8:	e7eb      	b.n	80149b2 <quorem+0xe4>
 80149da:	2000      	movs	r0, #0
 80149dc:	e7ee      	b.n	80149bc <quorem+0xee>
	...

080149e0 <_dtoa_r>:
 80149e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149e4:	ed2d 8b04 	vpush	{d8-d9}
 80149e8:	69c5      	ldr	r5, [r0, #28]
 80149ea:	b093      	sub	sp, #76	; 0x4c
 80149ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80149f0:	ec57 6b10 	vmov	r6, r7, d0
 80149f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80149f8:	9107      	str	r1, [sp, #28]
 80149fa:	4604      	mov	r4, r0
 80149fc:	920a      	str	r2, [sp, #40]	; 0x28
 80149fe:	930d      	str	r3, [sp, #52]	; 0x34
 8014a00:	b975      	cbnz	r5, 8014a20 <_dtoa_r+0x40>
 8014a02:	2010      	movs	r0, #16
 8014a04:	f000 fe2a 	bl	801565c <malloc>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	61e0      	str	r0, [r4, #28]
 8014a0c:	b920      	cbnz	r0, 8014a18 <_dtoa_r+0x38>
 8014a0e:	4bae      	ldr	r3, [pc, #696]	; (8014cc8 <_dtoa_r+0x2e8>)
 8014a10:	21ef      	movs	r1, #239	; 0xef
 8014a12:	48ae      	ldr	r0, [pc, #696]	; (8014ccc <_dtoa_r+0x2ec>)
 8014a14:	f001 fc90 	bl	8016338 <__assert_func>
 8014a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014a1c:	6005      	str	r5, [r0, #0]
 8014a1e:	60c5      	str	r5, [r0, #12]
 8014a20:	69e3      	ldr	r3, [r4, #28]
 8014a22:	6819      	ldr	r1, [r3, #0]
 8014a24:	b151      	cbz	r1, 8014a3c <_dtoa_r+0x5c>
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	604a      	str	r2, [r1, #4]
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	4093      	lsls	r3, r2
 8014a2e:	608b      	str	r3, [r1, #8]
 8014a30:	4620      	mov	r0, r4
 8014a32:	f000 ff07 	bl	8015844 <_Bfree>
 8014a36:	69e3      	ldr	r3, [r4, #28]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	601a      	str	r2, [r3, #0]
 8014a3c:	1e3b      	subs	r3, r7, #0
 8014a3e:	bfbb      	ittet	lt
 8014a40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014a44:	9303      	strlt	r3, [sp, #12]
 8014a46:	2300      	movge	r3, #0
 8014a48:	2201      	movlt	r2, #1
 8014a4a:	bfac      	ite	ge
 8014a4c:	f8c8 3000 	strge.w	r3, [r8]
 8014a50:	f8c8 2000 	strlt.w	r2, [r8]
 8014a54:	4b9e      	ldr	r3, [pc, #632]	; (8014cd0 <_dtoa_r+0x2f0>)
 8014a56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014a5a:	ea33 0308 	bics.w	r3, r3, r8
 8014a5e:	d11b      	bne.n	8014a98 <_dtoa_r+0xb8>
 8014a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8014a66:	6013      	str	r3, [r2, #0]
 8014a68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014a6c:	4333      	orrs	r3, r6
 8014a6e:	f000 8593 	beq.w	8015598 <_dtoa_r+0xbb8>
 8014a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a74:	b963      	cbnz	r3, 8014a90 <_dtoa_r+0xb0>
 8014a76:	4b97      	ldr	r3, [pc, #604]	; (8014cd4 <_dtoa_r+0x2f4>)
 8014a78:	e027      	b.n	8014aca <_dtoa_r+0xea>
 8014a7a:	4b97      	ldr	r3, [pc, #604]	; (8014cd8 <_dtoa_r+0x2f8>)
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	3308      	adds	r3, #8
 8014a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a82:	6013      	str	r3, [r2, #0]
 8014a84:	9800      	ldr	r0, [sp, #0]
 8014a86:	b013      	add	sp, #76	; 0x4c
 8014a88:	ecbd 8b04 	vpop	{d8-d9}
 8014a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a90:	4b90      	ldr	r3, [pc, #576]	; (8014cd4 <_dtoa_r+0x2f4>)
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	3303      	adds	r3, #3
 8014a96:	e7f3      	b.n	8014a80 <_dtoa_r+0xa0>
 8014a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	ec51 0b17 	vmov	r0, r1, d7
 8014aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8014aa6:	eef0 8a67 	vmov.f32	s17, s15
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f7ec f834 	bl	8000b18 <__aeabi_dcmpeq>
 8014ab0:	4681      	mov	r9, r0
 8014ab2:	b160      	cbz	r0, 8014ace <_dtoa_r+0xee>
 8014ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	6013      	str	r3, [r2, #0]
 8014aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 8568 	beq.w	8015592 <_dtoa_r+0xbb2>
 8014ac2:	4b86      	ldr	r3, [pc, #536]	; (8014cdc <_dtoa_r+0x2fc>)
 8014ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ac6:	6013      	str	r3, [r2, #0]
 8014ac8:	3b01      	subs	r3, #1
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	e7da      	b.n	8014a84 <_dtoa_r+0xa4>
 8014ace:	aa10      	add	r2, sp, #64	; 0x40
 8014ad0:	a911      	add	r1, sp, #68	; 0x44
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8014ad8:	eef0 0a68 	vmov.f32	s1, s17
 8014adc:	f001 f994 	bl	8015e08 <__d2b>
 8014ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014ae4:	4682      	mov	sl, r0
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	d07f      	beq.n	8014bea <_dtoa_r+0x20a>
 8014aea:	ee18 3a90 	vmov	r3, s17
 8014aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014af2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014af6:	ec51 0b18 	vmov	r0, r1, d8
 8014afa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014b02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014b06:	4619      	mov	r1, r3
 8014b08:	2200      	movs	r2, #0
 8014b0a:	4b75      	ldr	r3, [pc, #468]	; (8014ce0 <_dtoa_r+0x300>)
 8014b0c:	f7eb fbe4 	bl	80002d8 <__aeabi_dsub>
 8014b10:	a367      	add	r3, pc, #412	; (adr r3, 8014cb0 <_dtoa_r+0x2d0>)
 8014b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b16:	f7eb fd97 	bl	8000648 <__aeabi_dmul>
 8014b1a:	a367      	add	r3, pc, #412	; (adr r3, 8014cb8 <_dtoa_r+0x2d8>)
 8014b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b20:	f7eb fbdc 	bl	80002dc <__adddf3>
 8014b24:	4606      	mov	r6, r0
 8014b26:	4628      	mov	r0, r5
 8014b28:	460f      	mov	r7, r1
 8014b2a:	f7eb fd23 	bl	8000574 <__aeabi_i2d>
 8014b2e:	a364      	add	r3, pc, #400	; (adr r3, 8014cc0 <_dtoa_r+0x2e0>)
 8014b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b34:	f7eb fd88 	bl	8000648 <__aeabi_dmul>
 8014b38:	4602      	mov	r2, r0
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	4639      	mov	r1, r7
 8014b40:	f7eb fbcc 	bl	80002dc <__adddf3>
 8014b44:	4606      	mov	r6, r0
 8014b46:	460f      	mov	r7, r1
 8014b48:	f7ec f82e 	bl	8000ba8 <__aeabi_d2iz>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4683      	mov	fp, r0
 8014b50:	2300      	movs	r3, #0
 8014b52:	4630      	mov	r0, r6
 8014b54:	4639      	mov	r1, r7
 8014b56:	f7eb ffe9 	bl	8000b2c <__aeabi_dcmplt>
 8014b5a:	b148      	cbz	r0, 8014b70 <_dtoa_r+0x190>
 8014b5c:	4658      	mov	r0, fp
 8014b5e:	f7eb fd09 	bl	8000574 <__aeabi_i2d>
 8014b62:	4632      	mov	r2, r6
 8014b64:	463b      	mov	r3, r7
 8014b66:	f7eb ffd7 	bl	8000b18 <__aeabi_dcmpeq>
 8014b6a:	b908      	cbnz	r0, 8014b70 <_dtoa_r+0x190>
 8014b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b70:	f1bb 0f16 	cmp.w	fp, #22
 8014b74:	d857      	bhi.n	8014c26 <_dtoa_r+0x246>
 8014b76:	4b5b      	ldr	r3, [pc, #364]	; (8014ce4 <_dtoa_r+0x304>)
 8014b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b80:	ec51 0b18 	vmov	r0, r1, d8
 8014b84:	f7eb ffd2 	bl	8000b2c <__aeabi_dcmplt>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d04e      	beq.n	8014c2a <_dtoa_r+0x24a>
 8014b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b90:	2300      	movs	r3, #0
 8014b92:	930c      	str	r3, [sp, #48]	; 0x30
 8014b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b96:	1b5b      	subs	r3, r3, r5
 8014b98:	1e5a      	subs	r2, r3, #1
 8014b9a:	bf45      	ittet	mi
 8014b9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8014ba0:	9305      	strmi	r3, [sp, #20]
 8014ba2:	2300      	movpl	r3, #0
 8014ba4:	2300      	movmi	r3, #0
 8014ba6:	9206      	str	r2, [sp, #24]
 8014ba8:	bf54      	ite	pl
 8014baa:	9305      	strpl	r3, [sp, #20]
 8014bac:	9306      	strmi	r3, [sp, #24]
 8014bae:	f1bb 0f00 	cmp.w	fp, #0
 8014bb2:	db3c      	blt.n	8014c2e <_dtoa_r+0x24e>
 8014bb4:	9b06      	ldr	r3, [sp, #24]
 8014bb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014bba:	445b      	add	r3, fp
 8014bbc:	9306      	str	r3, [sp, #24]
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	9308      	str	r3, [sp, #32]
 8014bc2:	9b07      	ldr	r3, [sp, #28]
 8014bc4:	2b09      	cmp	r3, #9
 8014bc6:	d868      	bhi.n	8014c9a <_dtoa_r+0x2ba>
 8014bc8:	2b05      	cmp	r3, #5
 8014bca:	bfc4      	itt	gt
 8014bcc:	3b04      	subgt	r3, #4
 8014bce:	9307      	strgt	r3, [sp, #28]
 8014bd0:	9b07      	ldr	r3, [sp, #28]
 8014bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8014bd6:	bfcc      	ite	gt
 8014bd8:	2500      	movgt	r5, #0
 8014bda:	2501      	movle	r5, #1
 8014bdc:	2b03      	cmp	r3, #3
 8014bde:	f200 8085 	bhi.w	8014cec <_dtoa_r+0x30c>
 8014be2:	e8df f003 	tbb	[pc, r3]
 8014be6:	3b2e      	.short	0x3b2e
 8014be8:	5839      	.short	0x5839
 8014bea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014bee:	441d      	add	r5, r3
 8014bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014bf4:	2b20      	cmp	r3, #32
 8014bf6:	bfc1      	itttt	gt
 8014bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8014c00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014c04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014c08:	bfd6      	itet	le
 8014c0a:	f1c3 0320 	rsble	r3, r3, #32
 8014c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8014c12:	fa06 f003 	lslle.w	r0, r6, r3
 8014c16:	f7eb fc9d 	bl	8000554 <__aeabi_ui2d>
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014c20:	3d01      	subs	r5, #1
 8014c22:	920e      	str	r2, [sp, #56]	; 0x38
 8014c24:	e76f      	b.n	8014b06 <_dtoa_r+0x126>
 8014c26:	2301      	movs	r3, #1
 8014c28:	e7b3      	b.n	8014b92 <_dtoa_r+0x1b2>
 8014c2a:	900c      	str	r0, [sp, #48]	; 0x30
 8014c2c:	e7b2      	b.n	8014b94 <_dtoa_r+0x1b4>
 8014c2e:	9b05      	ldr	r3, [sp, #20]
 8014c30:	eba3 030b 	sub.w	r3, r3, fp
 8014c34:	9305      	str	r3, [sp, #20]
 8014c36:	f1cb 0300 	rsb	r3, fp, #0
 8014c3a:	9308      	str	r3, [sp, #32]
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c40:	e7bf      	b.n	8014bc2 <_dtoa_r+0x1e2>
 8014c42:	2300      	movs	r3, #0
 8014c44:	9309      	str	r3, [sp, #36]	; 0x24
 8014c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	dc52      	bgt.n	8014cf2 <_dtoa_r+0x312>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	9301      	str	r3, [sp, #4]
 8014c50:	9304      	str	r3, [sp, #16]
 8014c52:	461a      	mov	r2, r3
 8014c54:	920a      	str	r2, [sp, #40]	; 0x28
 8014c56:	e00b      	b.n	8014c70 <_dtoa_r+0x290>
 8014c58:	2301      	movs	r3, #1
 8014c5a:	e7f3      	b.n	8014c44 <_dtoa_r+0x264>
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c62:	445b      	add	r3, fp
 8014c64:	9301      	str	r3, [sp, #4]
 8014c66:	3301      	adds	r3, #1
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	9304      	str	r3, [sp, #16]
 8014c6c:	bfb8      	it	lt
 8014c6e:	2301      	movlt	r3, #1
 8014c70:	69e0      	ldr	r0, [r4, #28]
 8014c72:	2100      	movs	r1, #0
 8014c74:	2204      	movs	r2, #4
 8014c76:	f102 0614 	add.w	r6, r2, #20
 8014c7a:	429e      	cmp	r6, r3
 8014c7c:	d93d      	bls.n	8014cfa <_dtoa_r+0x31a>
 8014c7e:	6041      	str	r1, [r0, #4]
 8014c80:	4620      	mov	r0, r4
 8014c82:	f000 fd9f 	bl	80157c4 <_Balloc>
 8014c86:	9000      	str	r0, [sp, #0]
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d139      	bne.n	8014d00 <_dtoa_r+0x320>
 8014c8c:	4b16      	ldr	r3, [pc, #88]	; (8014ce8 <_dtoa_r+0x308>)
 8014c8e:	4602      	mov	r2, r0
 8014c90:	f240 11af 	movw	r1, #431	; 0x1af
 8014c94:	e6bd      	b.n	8014a12 <_dtoa_r+0x32>
 8014c96:	2301      	movs	r3, #1
 8014c98:	e7e1      	b.n	8014c5e <_dtoa_r+0x27e>
 8014c9a:	2501      	movs	r5, #1
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	9307      	str	r3, [sp, #28]
 8014ca0:	9509      	str	r5, [sp, #36]	; 0x24
 8014ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca6:	9301      	str	r3, [sp, #4]
 8014ca8:	9304      	str	r3, [sp, #16]
 8014caa:	2200      	movs	r2, #0
 8014cac:	2312      	movs	r3, #18
 8014cae:	e7d1      	b.n	8014c54 <_dtoa_r+0x274>
 8014cb0:	636f4361 	.word	0x636f4361
 8014cb4:	3fd287a7 	.word	0x3fd287a7
 8014cb8:	8b60c8b3 	.word	0x8b60c8b3
 8014cbc:	3fc68a28 	.word	0x3fc68a28
 8014cc0:	509f79fb 	.word	0x509f79fb
 8014cc4:	3fd34413 	.word	0x3fd34413
 8014cc8:	0801badd 	.word	0x0801badd
 8014ccc:	0801baf4 	.word	0x0801baf4
 8014cd0:	7ff00000 	.word	0x7ff00000
 8014cd4:	0801bad9 	.word	0x0801bad9
 8014cd8:	0801bad0 	.word	0x0801bad0
 8014cdc:	0801baad 	.word	0x0801baad
 8014ce0:	3ff80000 	.word	0x3ff80000
 8014ce4:	0801bbe0 	.word	0x0801bbe0
 8014ce8:	0801bb4c 	.word	0x0801bb4c
 8014cec:	2301      	movs	r3, #1
 8014cee:	9309      	str	r3, [sp, #36]	; 0x24
 8014cf0:	e7d7      	b.n	8014ca2 <_dtoa_r+0x2c2>
 8014cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cf4:	9301      	str	r3, [sp, #4]
 8014cf6:	9304      	str	r3, [sp, #16]
 8014cf8:	e7ba      	b.n	8014c70 <_dtoa_r+0x290>
 8014cfa:	3101      	adds	r1, #1
 8014cfc:	0052      	lsls	r2, r2, #1
 8014cfe:	e7ba      	b.n	8014c76 <_dtoa_r+0x296>
 8014d00:	69e3      	ldr	r3, [r4, #28]
 8014d02:	9a00      	ldr	r2, [sp, #0]
 8014d04:	601a      	str	r2, [r3, #0]
 8014d06:	9b04      	ldr	r3, [sp, #16]
 8014d08:	2b0e      	cmp	r3, #14
 8014d0a:	f200 80a8 	bhi.w	8014e5e <_dtoa_r+0x47e>
 8014d0e:	2d00      	cmp	r5, #0
 8014d10:	f000 80a5 	beq.w	8014e5e <_dtoa_r+0x47e>
 8014d14:	f1bb 0f00 	cmp.w	fp, #0
 8014d18:	dd38      	ble.n	8014d8c <_dtoa_r+0x3ac>
 8014d1a:	4bc0      	ldr	r3, [pc, #768]	; (801501c <_dtoa_r+0x63c>)
 8014d1c:	f00b 020f 	and.w	r2, fp, #15
 8014d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014d28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014d2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014d30:	d019      	beq.n	8014d66 <_dtoa_r+0x386>
 8014d32:	4bbb      	ldr	r3, [pc, #748]	; (8015020 <_dtoa_r+0x640>)
 8014d34:	ec51 0b18 	vmov	r0, r1, d8
 8014d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014d3c:	f7eb fdae 	bl	800089c <__aeabi_ddiv>
 8014d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d44:	f008 080f 	and.w	r8, r8, #15
 8014d48:	2503      	movs	r5, #3
 8014d4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015020 <_dtoa_r+0x640>
 8014d4e:	f1b8 0f00 	cmp.w	r8, #0
 8014d52:	d10a      	bne.n	8014d6a <_dtoa_r+0x38a>
 8014d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d58:	4632      	mov	r2, r6
 8014d5a:	463b      	mov	r3, r7
 8014d5c:	f7eb fd9e 	bl	800089c <__aeabi_ddiv>
 8014d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d64:	e02b      	b.n	8014dbe <_dtoa_r+0x3de>
 8014d66:	2502      	movs	r5, #2
 8014d68:	e7ef      	b.n	8014d4a <_dtoa_r+0x36a>
 8014d6a:	f018 0f01 	tst.w	r8, #1
 8014d6e:	d008      	beq.n	8014d82 <_dtoa_r+0x3a2>
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014d78:	f7eb fc66 	bl	8000648 <__aeabi_dmul>
 8014d7c:	3501      	adds	r5, #1
 8014d7e:	4606      	mov	r6, r0
 8014d80:	460f      	mov	r7, r1
 8014d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014d86:	f109 0908 	add.w	r9, r9, #8
 8014d8a:	e7e0      	b.n	8014d4e <_dtoa_r+0x36e>
 8014d8c:	f000 809f 	beq.w	8014ece <_dtoa_r+0x4ee>
 8014d90:	f1cb 0600 	rsb	r6, fp, #0
 8014d94:	4ba1      	ldr	r3, [pc, #644]	; (801501c <_dtoa_r+0x63c>)
 8014d96:	4fa2      	ldr	r7, [pc, #648]	; (8015020 <_dtoa_r+0x640>)
 8014d98:	f006 020f 	and.w	r2, r6, #15
 8014d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da4:	ec51 0b18 	vmov	r0, r1, d8
 8014da8:	f7eb fc4e 	bl	8000648 <__aeabi_dmul>
 8014dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014db0:	1136      	asrs	r6, r6, #4
 8014db2:	2300      	movs	r3, #0
 8014db4:	2502      	movs	r5, #2
 8014db6:	2e00      	cmp	r6, #0
 8014db8:	d17e      	bne.n	8014eb8 <_dtoa_r+0x4d8>
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d1d0      	bne.n	8014d60 <_dtoa_r+0x380>
 8014dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	f000 8084 	beq.w	8014ed2 <_dtoa_r+0x4f2>
 8014dca:	4b96      	ldr	r3, [pc, #600]	; (8015024 <_dtoa_r+0x644>)
 8014dcc:	2200      	movs	r2, #0
 8014dce:	4640      	mov	r0, r8
 8014dd0:	4649      	mov	r1, r9
 8014dd2:	f7eb feab 	bl	8000b2c <__aeabi_dcmplt>
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	d07b      	beq.n	8014ed2 <_dtoa_r+0x4f2>
 8014dda:	9b04      	ldr	r3, [sp, #16]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d078      	beq.n	8014ed2 <_dtoa_r+0x4f2>
 8014de0:	9b01      	ldr	r3, [sp, #4]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	dd39      	ble.n	8014e5a <_dtoa_r+0x47a>
 8014de6:	4b90      	ldr	r3, [pc, #576]	; (8015028 <_dtoa_r+0x648>)
 8014de8:	2200      	movs	r2, #0
 8014dea:	4640      	mov	r0, r8
 8014dec:	4649      	mov	r1, r9
 8014dee:	f7eb fc2b 	bl	8000648 <__aeabi_dmul>
 8014df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014df6:	9e01      	ldr	r6, [sp, #4]
 8014df8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014dfc:	3501      	adds	r5, #1
 8014dfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014e02:	4628      	mov	r0, r5
 8014e04:	f7eb fbb6 	bl	8000574 <__aeabi_i2d>
 8014e08:	4642      	mov	r2, r8
 8014e0a:	464b      	mov	r3, r9
 8014e0c:	f7eb fc1c 	bl	8000648 <__aeabi_dmul>
 8014e10:	4b86      	ldr	r3, [pc, #536]	; (801502c <_dtoa_r+0x64c>)
 8014e12:	2200      	movs	r2, #0
 8014e14:	f7eb fa62 	bl	80002dc <__adddf3>
 8014e18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014e20:	9303      	str	r3, [sp, #12]
 8014e22:	2e00      	cmp	r6, #0
 8014e24:	d158      	bne.n	8014ed8 <_dtoa_r+0x4f8>
 8014e26:	4b82      	ldr	r3, [pc, #520]	; (8015030 <_dtoa_r+0x650>)
 8014e28:	2200      	movs	r2, #0
 8014e2a:	4640      	mov	r0, r8
 8014e2c:	4649      	mov	r1, r9
 8014e2e:	f7eb fa53 	bl	80002d8 <__aeabi_dsub>
 8014e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e36:	4680      	mov	r8, r0
 8014e38:	4689      	mov	r9, r1
 8014e3a:	f7eb fe95 	bl	8000b68 <__aeabi_dcmpgt>
 8014e3e:	2800      	cmp	r0, #0
 8014e40:	f040 8296 	bne.w	8015370 <_dtoa_r+0x990>
 8014e44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014e48:	4640      	mov	r0, r8
 8014e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e4e:	4649      	mov	r1, r9
 8014e50:	f7eb fe6c 	bl	8000b2c <__aeabi_dcmplt>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	f040 8289 	bne.w	801536c <_dtoa_r+0x98c>
 8014e5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f2c0 814e 	blt.w	8015102 <_dtoa_r+0x722>
 8014e66:	f1bb 0f0e 	cmp.w	fp, #14
 8014e6a:	f300 814a 	bgt.w	8015102 <_dtoa_r+0x722>
 8014e6e:	4b6b      	ldr	r3, [pc, #428]	; (801501c <_dtoa_r+0x63c>)
 8014e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f280 80dc 	bge.w	8015038 <_dtoa_r+0x658>
 8014e80:	9b04      	ldr	r3, [sp, #16]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	f300 80d8 	bgt.w	8015038 <_dtoa_r+0x658>
 8014e88:	f040 826f 	bne.w	801536a <_dtoa_r+0x98a>
 8014e8c:	4b68      	ldr	r3, [pc, #416]	; (8015030 <_dtoa_r+0x650>)
 8014e8e:	2200      	movs	r2, #0
 8014e90:	4640      	mov	r0, r8
 8014e92:	4649      	mov	r1, r9
 8014e94:	f7eb fbd8 	bl	8000648 <__aeabi_dmul>
 8014e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e9c:	f7eb fe5a 	bl	8000b54 <__aeabi_dcmpge>
 8014ea0:	9e04      	ldr	r6, [sp, #16]
 8014ea2:	4637      	mov	r7, r6
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	f040 8245 	bne.w	8015334 <_dtoa_r+0x954>
 8014eaa:	9d00      	ldr	r5, [sp, #0]
 8014eac:	2331      	movs	r3, #49	; 0x31
 8014eae:	f805 3b01 	strb.w	r3, [r5], #1
 8014eb2:	f10b 0b01 	add.w	fp, fp, #1
 8014eb6:	e241      	b.n	801533c <_dtoa_r+0x95c>
 8014eb8:	07f2      	lsls	r2, r6, #31
 8014eba:	d505      	bpl.n	8014ec8 <_dtoa_r+0x4e8>
 8014ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ec0:	f7eb fbc2 	bl	8000648 <__aeabi_dmul>
 8014ec4:	3501      	adds	r5, #1
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	1076      	asrs	r6, r6, #1
 8014eca:	3708      	adds	r7, #8
 8014ecc:	e773      	b.n	8014db6 <_dtoa_r+0x3d6>
 8014ece:	2502      	movs	r5, #2
 8014ed0:	e775      	b.n	8014dbe <_dtoa_r+0x3de>
 8014ed2:	9e04      	ldr	r6, [sp, #16]
 8014ed4:	465f      	mov	r7, fp
 8014ed6:	e792      	b.n	8014dfe <_dtoa_r+0x41e>
 8014ed8:	9900      	ldr	r1, [sp, #0]
 8014eda:	4b50      	ldr	r3, [pc, #320]	; (801501c <_dtoa_r+0x63c>)
 8014edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014ee0:	4431      	add	r1, r6
 8014ee2:	9102      	str	r1, [sp, #8]
 8014ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ee6:	eeb0 9a47 	vmov.f32	s18, s14
 8014eea:	eef0 9a67 	vmov.f32	s19, s15
 8014eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014ef6:	2900      	cmp	r1, #0
 8014ef8:	d044      	beq.n	8014f84 <_dtoa_r+0x5a4>
 8014efa:	494e      	ldr	r1, [pc, #312]	; (8015034 <_dtoa_r+0x654>)
 8014efc:	2000      	movs	r0, #0
 8014efe:	f7eb fccd 	bl	800089c <__aeabi_ddiv>
 8014f02:	ec53 2b19 	vmov	r2, r3, d9
 8014f06:	f7eb f9e7 	bl	80002d8 <__aeabi_dsub>
 8014f0a:	9d00      	ldr	r5, [sp, #0]
 8014f0c:	ec41 0b19 	vmov	d9, r0, r1
 8014f10:	4649      	mov	r1, r9
 8014f12:	4640      	mov	r0, r8
 8014f14:	f7eb fe48 	bl	8000ba8 <__aeabi_d2iz>
 8014f18:	4606      	mov	r6, r0
 8014f1a:	f7eb fb2b 	bl	8000574 <__aeabi_i2d>
 8014f1e:	4602      	mov	r2, r0
 8014f20:	460b      	mov	r3, r1
 8014f22:	4640      	mov	r0, r8
 8014f24:	4649      	mov	r1, r9
 8014f26:	f7eb f9d7 	bl	80002d8 <__aeabi_dsub>
 8014f2a:	3630      	adds	r6, #48	; 0x30
 8014f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8014f30:	ec53 2b19 	vmov	r2, r3, d9
 8014f34:	4680      	mov	r8, r0
 8014f36:	4689      	mov	r9, r1
 8014f38:	f7eb fdf8 	bl	8000b2c <__aeabi_dcmplt>
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d164      	bne.n	801500a <_dtoa_r+0x62a>
 8014f40:	4642      	mov	r2, r8
 8014f42:	464b      	mov	r3, r9
 8014f44:	4937      	ldr	r1, [pc, #220]	; (8015024 <_dtoa_r+0x644>)
 8014f46:	2000      	movs	r0, #0
 8014f48:	f7eb f9c6 	bl	80002d8 <__aeabi_dsub>
 8014f4c:	ec53 2b19 	vmov	r2, r3, d9
 8014f50:	f7eb fdec 	bl	8000b2c <__aeabi_dcmplt>
 8014f54:	2800      	cmp	r0, #0
 8014f56:	f040 80b6 	bne.w	80150c6 <_dtoa_r+0x6e6>
 8014f5a:	9b02      	ldr	r3, [sp, #8]
 8014f5c:	429d      	cmp	r5, r3
 8014f5e:	f43f af7c 	beq.w	8014e5a <_dtoa_r+0x47a>
 8014f62:	4b31      	ldr	r3, [pc, #196]	; (8015028 <_dtoa_r+0x648>)
 8014f64:	ec51 0b19 	vmov	r0, r1, d9
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f7eb fb6d 	bl	8000648 <__aeabi_dmul>
 8014f6e:	4b2e      	ldr	r3, [pc, #184]	; (8015028 <_dtoa_r+0x648>)
 8014f70:	ec41 0b19 	vmov	d9, r0, r1
 8014f74:	2200      	movs	r2, #0
 8014f76:	4640      	mov	r0, r8
 8014f78:	4649      	mov	r1, r9
 8014f7a:	f7eb fb65 	bl	8000648 <__aeabi_dmul>
 8014f7e:	4680      	mov	r8, r0
 8014f80:	4689      	mov	r9, r1
 8014f82:	e7c5      	b.n	8014f10 <_dtoa_r+0x530>
 8014f84:	ec51 0b17 	vmov	r0, r1, d7
 8014f88:	f7eb fb5e 	bl	8000648 <__aeabi_dmul>
 8014f8c:	9b02      	ldr	r3, [sp, #8]
 8014f8e:	9d00      	ldr	r5, [sp, #0]
 8014f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f92:	ec41 0b19 	vmov	d9, r0, r1
 8014f96:	4649      	mov	r1, r9
 8014f98:	4640      	mov	r0, r8
 8014f9a:	f7eb fe05 	bl	8000ba8 <__aeabi_d2iz>
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	f7eb fae8 	bl	8000574 <__aeabi_i2d>
 8014fa4:	3630      	adds	r6, #48	; 0x30
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	460b      	mov	r3, r1
 8014faa:	4640      	mov	r0, r8
 8014fac:	4649      	mov	r1, r9
 8014fae:	f7eb f993 	bl	80002d8 <__aeabi_dsub>
 8014fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8014fb6:	9b02      	ldr	r3, [sp, #8]
 8014fb8:	429d      	cmp	r5, r3
 8014fba:	4680      	mov	r8, r0
 8014fbc:	4689      	mov	r9, r1
 8014fbe:	f04f 0200 	mov.w	r2, #0
 8014fc2:	d124      	bne.n	801500e <_dtoa_r+0x62e>
 8014fc4:	4b1b      	ldr	r3, [pc, #108]	; (8015034 <_dtoa_r+0x654>)
 8014fc6:	ec51 0b19 	vmov	r0, r1, d9
 8014fca:	f7eb f987 	bl	80002dc <__adddf3>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	4640      	mov	r0, r8
 8014fd4:	4649      	mov	r1, r9
 8014fd6:	f7eb fdc7 	bl	8000b68 <__aeabi_dcmpgt>
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	d173      	bne.n	80150c6 <_dtoa_r+0x6e6>
 8014fde:	ec53 2b19 	vmov	r2, r3, d9
 8014fe2:	4914      	ldr	r1, [pc, #80]	; (8015034 <_dtoa_r+0x654>)
 8014fe4:	2000      	movs	r0, #0
 8014fe6:	f7eb f977 	bl	80002d8 <__aeabi_dsub>
 8014fea:	4602      	mov	r2, r0
 8014fec:	460b      	mov	r3, r1
 8014fee:	4640      	mov	r0, r8
 8014ff0:	4649      	mov	r1, r9
 8014ff2:	f7eb fd9b 	bl	8000b2c <__aeabi_dcmplt>
 8014ff6:	2800      	cmp	r0, #0
 8014ff8:	f43f af2f 	beq.w	8014e5a <_dtoa_r+0x47a>
 8014ffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014ffe:	1e6b      	subs	r3, r5, #1
 8015000:	930f      	str	r3, [sp, #60]	; 0x3c
 8015002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015006:	2b30      	cmp	r3, #48	; 0x30
 8015008:	d0f8      	beq.n	8014ffc <_dtoa_r+0x61c>
 801500a:	46bb      	mov	fp, r7
 801500c:	e04a      	b.n	80150a4 <_dtoa_r+0x6c4>
 801500e:	4b06      	ldr	r3, [pc, #24]	; (8015028 <_dtoa_r+0x648>)
 8015010:	f7eb fb1a 	bl	8000648 <__aeabi_dmul>
 8015014:	4680      	mov	r8, r0
 8015016:	4689      	mov	r9, r1
 8015018:	e7bd      	b.n	8014f96 <_dtoa_r+0x5b6>
 801501a:	bf00      	nop
 801501c:	0801bbe0 	.word	0x0801bbe0
 8015020:	0801bbb8 	.word	0x0801bbb8
 8015024:	3ff00000 	.word	0x3ff00000
 8015028:	40240000 	.word	0x40240000
 801502c:	401c0000 	.word	0x401c0000
 8015030:	40140000 	.word	0x40140000
 8015034:	3fe00000 	.word	0x3fe00000
 8015038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801503c:	9d00      	ldr	r5, [sp, #0]
 801503e:	4642      	mov	r2, r8
 8015040:	464b      	mov	r3, r9
 8015042:	4630      	mov	r0, r6
 8015044:	4639      	mov	r1, r7
 8015046:	f7eb fc29 	bl	800089c <__aeabi_ddiv>
 801504a:	f7eb fdad 	bl	8000ba8 <__aeabi_d2iz>
 801504e:	9001      	str	r0, [sp, #4]
 8015050:	f7eb fa90 	bl	8000574 <__aeabi_i2d>
 8015054:	4642      	mov	r2, r8
 8015056:	464b      	mov	r3, r9
 8015058:	f7eb faf6 	bl	8000648 <__aeabi_dmul>
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	4630      	mov	r0, r6
 8015062:	4639      	mov	r1, r7
 8015064:	f7eb f938 	bl	80002d8 <__aeabi_dsub>
 8015068:	9e01      	ldr	r6, [sp, #4]
 801506a:	9f04      	ldr	r7, [sp, #16]
 801506c:	3630      	adds	r6, #48	; 0x30
 801506e:	f805 6b01 	strb.w	r6, [r5], #1
 8015072:	9e00      	ldr	r6, [sp, #0]
 8015074:	1bae      	subs	r6, r5, r6
 8015076:	42b7      	cmp	r7, r6
 8015078:	4602      	mov	r2, r0
 801507a:	460b      	mov	r3, r1
 801507c:	d134      	bne.n	80150e8 <_dtoa_r+0x708>
 801507e:	f7eb f92d 	bl	80002dc <__adddf3>
 8015082:	4642      	mov	r2, r8
 8015084:	464b      	mov	r3, r9
 8015086:	4606      	mov	r6, r0
 8015088:	460f      	mov	r7, r1
 801508a:	f7eb fd6d 	bl	8000b68 <__aeabi_dcmpgt>
 801508e:	b9c8      	cbnz	r0, 80150c4 <_dtoa_r+0x6e4>
 8015090:	4642      	mov	r2, r8
 8015092:	464b      	mov	r3, r9
 8015094:	4630      	mov	r0, r6
 8015096:	4639      	mov	r1, r7
 8015098:	f7eb fd3e 	bl	8000b18 <__aeabi_dcmpeq>
 801509c:	b110      	cbz	r0, 80150a4 <_dtoa_r+0x6c4>
 801509e:	9b01      	ldr	r3, [sp, #4]
 80150a0:	07db      	lsls	r3, r3, #31
 80150a2:	d40f      	bmi.n	80150c4 <_dtoa_r+0x6e4>
 80150a4:	4651      	mov	r1, sl
 80150a6:	4620      	mov	r0, r4
 80150a8:	f000 fbcc 	bl	8015844 <_Bfree>
 80150ac:	2300      	movs	r3, #0
 80150ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150b0:	702b      	strb	r3, [r5, #0]
 80150b2:	f10b 0301 	add.w	r3, fp, #1
 80150b6:	6013      	str	r3, [r2, #0]
 80150b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	f43f ace2 	beq.w	8014a84 <_dtoa_r+0xa4>
 80150c0:	601d      	str	r5, [r3, #0]
 80150c2:	e4df      	b.n	8014a84 <_dtoa_r+0xa4>
 80150c4:	465f      	mov	r7, fp
 80150c6:	462b      	mov	r3, r5
 80150c8:	461d      	mov	r5, r3
 80150ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150ce:	2a39      	cmp	r2, #57	; 0x39
 80150d0:	d106      	bne.n	80150e0 <_dtoa_r+0x700>
 80150d2:	9a00      	ldr	r2, [sp, #0]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d1f7      	bne.n	80150c8 <_dtoa_r+0x6e8>
 80150d8:	9900      	ldr	r1, [sp, #0]
 80150da:	2230      	movs	r2, #48	; 0x30
 80150dc:	3701      	adds	r7, #1
 80150de:	700a      	strb	r2, [r1, #0]
 80150e0:	781a      	ldrb	r2, [r3, #0]
 80150e2:	3201      	adds	r2, #1
 80150e4:	701a      	strb	r2, [r3, #0]
 80150e6:	e790      	b.n	801500a <_dtoa_r+0x62a>
 80150e8:	4ba3      	ldr	r3, [pc, #652]	; (8015378 <_dtoa_r+0x998>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	f7eb faac 	bl	8000648 <__aeabi_dmul>
 80150f0:	2200      	movs	r2, #0
 80150f2:	2300      	movs	r3, #0
 80150f4:	4606      	mov	r6, r0
 80150f6:	460f      	mov	r7, r1
 80150f8:	f7eb fd0e 	bl	8000b18 <__aeabi_dcmpeq>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d09e      	beq.n	801503e <_dtoa_r+0x65e>
 8015100:	e7d0      	b.n	80150a4 <_dtoa_r+0x6c4>
 8015102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015104:	2a00      	cmp	r2, #0
 8015106:	f000 80ca 	beq.w	801529e <_dtoa_r+0x8be>
 801510a:	9a07      	ldr	r2, [sp, #28]
 801510c:	2a01      	cmp	r2, #1
 801510e:	f300 80ad 	bgt.w	801526c <_dtoa_r+0x88c>
 8015112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015114:	2a00      	cmp	r2, #0
 8015116:	f000 80a5 	beq.w	8015264 <_dtoa_r+0x884>
 801511a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801511e:	9e08      	ldr	r6, [sp, #32]
 8015120:	9d05      	ldr	r5, [sp, #20]
 8015122:	9a05      	ldr	r2, [sp, #20]
 8015124:	441a      	add	r2, r3
 8015126:	9205      	str	r2, [sp, #20]
 8015128:	9a06      	ldr	r2, [sp, #24]
 801512a:	2101      	movs	r1, #1
 801512c:	441a      	add	r2, r3
 801512e:	4620      	mov	r0, r4
 8015130:	9206      	str	r2, [sp, #24]
 8015132:	f000 fc3d 	bl	80159b0 <__i2b>
 8015136:	4607      	mov	r7, r0
 8015138:	b165      	cbz	r5, 8015154 <_dtoa_r+0x774>
 801513a:	9b06      	ldr	r3, [sp, #24]
 801513c:	2b00      	cmp	r3, #0
 801513e:	dd09      	ble.n	8015154 <_dtoa_r+0x774>
 8015140:	42ab      	cmp	r3, r5
 8015142:	9a05      	ldr	r2, [sp, #20]
 8015144:	bfa8      	it	ge
 8015146:	462b      	movge	r3, r5
 8015148:	1ad2      	subs	r2, r2, r3
 801514a:	9205      	str	r2, [sp, #20]
 801514c:	9a06      	ldr	r2, [sp, #24]
 801514e:	1aed      	subs	r5, r5, r3
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	9306      	str	r3, [sp, #24]
 8015154:	9b08      	ldr	r3, [sp, #32]
 8015156:	b1f3      	cbz	r3, 8015196 <_dtoa_r+0x7b6>
 8015158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801515a:	2b00      	cmp	r3, #0
 801515c:	f000 80a3 	beq.w	80152a6 <_dtoa_r+0x8c6>
 8015160:	2e00      	cmp	r6, #0
 8015162:	dd10      	ble.n	8015186 <_dtoa_r+0x7a6>
 8015164:	4639      	mov	r1, r7
 8015166:	4632      	mov	r2, r6
 8015168:	4620      	mov	r0, r4
 801516a:	f000 fce1 	bl	8015b30 <__pow5mult>
 801516e:	4652      	mov	r2, sl
 8015170:	4601      	mov	r1, r0
 8015172:	4607      	mov	r7, r0
 8015174:	4620      	mov	r0, r4
 8015176:	f000 fc31 	bl	80159dc <__multiply>
 801517a:	4651      	mov	r1, sl
 801517c:	4680      	mov	r8, r0
 801517e:	4620      	mov	r0, r4
 8015180:	f000 fb60 	bl	8015844 <_Bfree>
 8015184:	46c2      	mov	sl, r8
 8015186:	9b08      	ldr	r3, [sp, #32]
 8015188:	1b9a      	subs	r2, r3, r6
 801518a:	d004      	beq.n	8015196 <_dtoa_r+0x7b6>
 801518c:	4651      	mov	r1, sl
 801518e:	4620      	mov	r0, r4
 8015190:	f000 fcce 	bl	8015b30 <__pow5mult>
 8015194:	4682      	mov	sl, r0
 8015196:	2101      	movs	r1, #1
 8015198:	4620      	mov	r0, r4
 801519a:	f000 fc09 	bl	80159b0 <__i2b>
 801519e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	4606      	mov	r6, r0
 80151a4:	f340 8081 	ble.w	80152aa <_dtoa_r+0x8ca>
 80151a8:	461a      	mov	r2, r3
 80151aa:	4601      	mov	r1, r0
 80151ac:	4620      	mov	r0, r4
 80151ae:	f000 fcbf 	bl	8015b30 <__pow5mult>
 80151b2:	9b07      	ldr	r3, [sp, #28]
 80151b4:	2b01      	cmp	r3, #1
 80151b6:	4606      	mov	r6, r0
 80151b8:	dd7a      	ble.n	80152b0 <_dtoa_r+0x8d0>
 80151ba:	f04f 0800 	mov.w	r8, #0
 80151be:	6933      	ldr	r3, [r6, #16]
 80151c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80151c4:	6918      	ldr	r0, [r3, #16]
 80151c6:	f000 fba5 	bl	8015914 <__hi0bits>
 80151ca:	f1c0 0020 	rsb	r0, r0, #32
 80151ce:	9b06      	ldr	r3, [sp, #24]
 80151d0:	4418      	add	r0, r3
 80151d2:	f010 001f 	ands.w	r0, r0, #31
 80151d6:	f000 8094 	beq.w	8015302 <_dtoa_r+0x922>
 80151da:	f1c0 0320 	rsb	r3, r0, #32
 80151de:	2b04      	cmp	r3, #4
 80151e0:	f340 8085 	ble.w	80152ee <_dtoa_r+0x90e>
 80151e4:	9b05      	ldr	r3, [sp, #20]
 80151e6:	f1c0 001c 	rsb	r0, r0, #28
 80151ea:	4403      	add	r3, r0
 80151ec:	9305      	str	r3, [sp, #20]
 80151ee:	9b06      	ldr	r3, [sp, #24]
 80151f0:	4403      	add	r3, r0
 80151f2:	4405      	add	r5, r0
 80151f4:	9306      	str	r3, [sp, #24]
 80151f6:	9b05      	ldr	r3, [sp, #20]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	dd05      	ble.n	8015208 <_dtoa_r+0x828>
 80151fc:	4651      	mov	r1, sl
 80151fe:	461a      	mov	r2, r3
 8015200:	4620      	mov	r0, r4
 8015202:	f000 fcef 	bl	8015be4 <__lshift>
 8015206:	4682      	mov	sl, r0
 8015208:	9b06      	ldr	r3, [sp, #24]
 801520a:	2b00      	cmp	r3, #0
 801520c:	dd05      	ble.n	801521a <_dtoa_r+0x83a>
 801520e:	4631      	mov	r1, r6
 8015210:	461a      	mov	r2, r3
 8015212:	4620      	mov	r0, r4
 8015214:	f000 fce6 	bl	8015be4 <__lshift>
 8015218:	4606      	mov	r6, r0
 801521a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801521c:	2b00      	cmp	r3, #0
 801521e:	d072      	beq.n	8015306 <_dtoa_r+0x926>
 8015220:	4631      	mov	r1, r6
 8015222:	4650      	mov	r0, sl
 8015224:	f000 fd4a 	bl	8015cbc <__mcmp>
 8015228:	2800      	cmp	r0, #0
 801522a:	da6c      	bge.n	8015306 <_dtoa_r+0x926>
 801522c:	2300      	movs	r3, #0
 801522e:	4651      	mov	r1, sl
 8015230:	220a      	movs	r2, #10
 8015232:	4620      	mov	r0, r4
 8015234:	f000 fb28 	bl	8015888 <__multadd>
 8015238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801523a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801523e:	4682      	mov	sl, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	f000 81b0 	beq.w	80155a6 <_dtoa_r+0xbc6>
 8015246:	2300      	movs	r3, #0
 8015248:	4639      	mov	r1, r7
 801524a:	220a      	movs	r2, #10
 801524c:	4620      	mov	r0, r4
 801524e:	f000 fb1b 	bl	8015888 <__multadd>
 8015252:	9b01      	ldr	r3, [sp, #4]
 8015254:	2b00      	cmp	r3, #0
 8015256:	4607      	mov	r7, r0
 8015258:	f300 8096 	bgt.w	8015388 <_dtoa_r+0x9a8>
 801525c:	9b07      	ldr	r3, [sp, #28]
 801525e:	2b02      	cmp	r3, #2
 8015260:	dc59      	bgt.n	8015316 <_dtoa_r+0x936>
 8015262:	e091      	b.n	8015388 <_dtoa_r+0x9a8>
 8015264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801526a:	e758      	b.n	801511e <_dtoa_r+0x73e>
 801526c:	9b04      	ldr	r3, [sp, #16]
 801526e:	1e5e      	subs	r6, r3, #1
 8015270:	9b08      	ldr	r3, [sp, #32]
 8015272:	42b3      	cmp	r3, r6
 8015274:	bfbf      	itttt	lt
 8015276:	9b08      	ldrlt	r3, [sp, #32]
 8015278:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801527a:	9608      	strlt	r6, [sp, #32]
 801527c:	1af3      	sublt	r3, r6, r3
 801527e:	bfb4      	ite	lt
 8015280:	18d2      	addlt	r2, r2, r3
 8015282:	1b9e      	subge	r6, r3, r6
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	bfbc      	itt	lt
 8015288:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801528a:	2600      	movlt	r6, #0
 801528c:	2b00      	cmp	r3, #0
 801528e:	bfb7      	itett	lt
 8015290:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8015294:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015298:	1a9d      	sublt	r5, r3, r2
 801529a:	2300      	movlt	r3, #0
 801529c:	e741      	b.n	8015122 <_dtoa_r+0x742>
 801529e:	9e08      	ldr	r6, [sp, #32]
 80152a0:	9d05      	ldr	r5, [sp, #20]
 80152a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80152a4:	e748      	b.n	8015138 <_dtoa_r+0x758>
 80152a6:	9a08      	ldr	r2, [sp, #32]
 80152a8:	e770      	b.n	801518c <_dtoa_r+0x7ac>
 80152aa:	9b07      	ldr	r3, [sp, #28]
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	dc19      	bgt.n	80152e4 <_dtoa_r+0x904>
 80152b0:	9b02      	ldr	r3, [sp, #8]
 80152b2:	b9bb      	cbnz	r3, 80152e4 <_dtoa_r+0x904>
 80152b4:	9b03      	ldr	r3, [sp, #12]
 80152b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152ba:	b99b      	cbnz	r3, 80152e4 <_dtoa_r+0x904>
 80152bc:	9b03      	ldr	r3, [sp, #12]
 80152be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152c2:	0d1b      	lsrs	r3, r3, #20
 80152c4:	051b      	lsls	r3, r3, #20
 80152c6:	b183      	cbz	r3, 80152ea <_dtoa_r+0x90a>
 80152c8:	9b05      	ldr	r3, [sp, #20]
 80152ca:	3301      	adds	r3, #1
 80152cc:	9305      	str	r3, [sp, #20]
 80152ce:	9b06      	ldr	r3, [sp, #24]
 80152d0:	3301      	adds	r3, #1
 80152d2:	9306      	str	r3, [sp, #24]
 80152d4:	f04f 0801 	mov.w	r8, #1
 80152d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f47f af6f 	bne.w	80151be <_dtoa_r+0x7de>
 80152e0:	2001      	movs	r0, #1
 80152e2:	e774      	b.n	80151ce <_dtoa_r+0x7ee>
 80152e4:	f04f 0800 	mov.w	r8, #0
 80152e8:	e7f6      	b.n	80152d8 <_dtoa_r+0x8f8>
 80152ea:	4698      	mov	r8, r3
 80152ec:	e7f4      	b.n	80152d8 <_dtoa_r+0x8f8>
 80152ee:	d082      	beq.n	80151f6 <_dtoa_r+0x816>
 80152f0:	9a05      	ldr	r2, [sp, #20]
 80152f2:	331c      	adds	r3, #28
 80152f4:	441a      	add	r2, r3
 80152f6:	9205      	str	r2, [sp, #20]
 80152f8:	9a06      	ldr	r2, [sp, #24]
 80152fa:	441a      	add	r2, r3
 80152fc:	441d      	add	r5, r3
 80152fe:	9206      	str	r2, [sp, #24]
 8015300:	e779      	b.n	80151f6 <_dtoa_r+0x816>
 8015302:	4603      	mov	r3, r0
 8015304:	e7f4      	b.n	80152f0 <_dtoa_r+0x910>
 8015306:	9b04      	ldr	r3, [sp, #16]
 8015308:	2b00      	cmp	r3, #0
 801530a:	dc37      	bgt.n	801537c <_dtoa_r+0x99c>
 801530c:	9b07      	ldr	r3, [sp, #28]
 801530e:	2b02      	cmp	r3, #2
 8015310:	dd34      	ble.n	801537c <_dtoa_r+0x99c>
 8015312:	9b04      	ldr	r3, [sp, #16]
 8015314:	9301      	str	r3, [sp, #4]
 8015316:	9b01      	ldr	r3, [sp, #4]
 8015318:	b963      	cbnz	r3, 8015334 <_dtoa_r+0x954>
 801531a:	4631      	mov	r1, r6
 801531c:	2205      	movs	r2, #5
 801531e:	4620      	mov	r0, r4
 8015320:	f000 fab2 	bl	8015888 <__multadd>
 8015324:	4601      	mov	r1, r0
 8015326:	4606      	mov	r6, r0
 8015328:	4650      	mov	r0, sl
 801532a:	f000 fcc7 	bl	8015cbc <__mcmp>
 801532e:	2800      	cmp	r0, #0
 8015330:	f73f adbb 	bgt.w	8014eaa <_dtoa_r+0x4ca>
 8015334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015336:	9d00      	ldr	r5, [sp, #0]
 8015338:	ea6f 0b03 	mvn.w	fp, r3
 801533c:	f04f 0800 	mov.w	r8, #0
 8015340:	4631      	mov	r1, r6
 8015342:	4620      	mov	r0, r4
 8015344:	f000 fa7e 	bl	8015844 <_Bfree>
 8015348:	2f00      	cmp	r7, #0
 801534a:	f43f aeab 	beq.w	80150a4 <_dtoa_r+0x6c4>
 801534e:	f1b8 0f00 	cmp.w	r8, #0
 8015352:	d005      	beq.n	8015360 <_dtoa_r+0x980>
 8015354:	45b8      	cmp	r8, r7
 8015356:	d003      	beq.n	8015360 <_dtoa_r+0x980>
 8015358:	4641      	mov	r1, r8
 801535a:	4620      	mov	r0, r4
 801535c:	f000 fa72 	bl	8015844 <_Bfree>
 8015360:	4639      	mov	r1, r7
 8015362:	4620      	mov	r0, r4
 8015364:	f000 fa6e 	bl	8015844 <_Bfree>
 8015368:	e69c      	b.n	80150a4 <_dtoa_r+0x6c4>
 801536a:	2600      	movs	r6, #0
 801536c:	4637      	mov	r7, r6
 801536e:	e7e1      	b.n	8015334 <_dtoa_r+0x954>
 8015370:	46bb      	mov	fp, r7
 8015372:	4637      	mov	r7, r6
 8015374:	e599      	b.n	8014eaa <_dtoa_r+0x4ca>
 8015376:	bf00      	nop
 8015378:	40240000 	.word	0x40240000
 801537c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 80c8 	beq.w	8015514 <_dtoa_r+0xb34>
 8015384:	9b04      	ldr	r3, [sp, #16]
 8015386:	9301      	str	r3, [sp, #4]
 8015388:	2d00      	cmp	r5, #0
 801538a:	dd05      	ble.n	8015398 <_dtoa_r+0x9b8>
 801538c:	4639      	mov	r1, r7
 801538e:	462a      	mov	r2, r5
 8015390:	4620      	mov	r0, r4
 8015392:	f000 fc27 	bl	8015be4 <__lshift>
 8015396:	4607      	mov	r7, r0
 8015398:	f1b8 0f00 	cmp.w	r8, #0
 801539c:	d05b      	beq.n	8015456 <_dtoa_r+0xa76>
 801539e:	6879      	ldr	r1, [r7, #4]
 80153a0:	4620      	mov	r0, r4
 80153a2:	f000 fa0f 	bl	80157c4 <_Balloc>
 80153a6:	4605      	mov	r5, r0
 80153a8:	b928      	cbnz	r0, 80153b6 <_dtoa_r+0x9d6>
 80153aa:	4b83      	ldr	r3, [pc, #524]	; (80155b8 <_dtoa_r+0xbd8>)
 80153ac:	4602      	mov	r2, r0
 80153ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80153b2:	f7ff bb2e 	b.w	8014a12 <_dtoa_r+0x32>
 80153b6:	693a      	ldr	r2, [r7, #16]
 80153b8:	3202      	adds	r2, #2
 80153ba:	0092      	lsls	r2, r2, #2
 80153bc:	f107 010c 	add.w	r1, r7, #12
 80153c0:	300c      	adds	r0, #12
 80153c2:	f000 ffab 	bl	801631c <memcpy>
 80153c6:	2201      	movs	r2, #1
 80153c8:	4629      	mov	r1, r5
 80153ca:	4620      	mov	r0, r4
 80153cc:	f000 fc0a 	bl	8015be4 <__lshift>
 80153d0:	9b00      	ldr	r3, [sp, #0]
 80153d2:	3301      	adds	r3, #1
 80153d4:	9304      	str	r3, [sp, #16]
 80153d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153da:	4413      	add	r3, r2
 80153dc:	9308      	str	r3, [sp, #32]
 80153de:	9b02      	ldr	r3, [sp, #8]
 80153e0:	f003 0301 	and.w	r3, r3, #1
 80153e4:	46b8      	mov	r8, r7
 80153e6:	9306      	str	r3, [sp, #24]
 80153e8:	4607      	mov	r7, r0
 80153ea:	9b04      	ldr	r3, [sp, #16]
 80153ec:	4631      	mov	r1, r6
 80153ee:	3b01      	subs	r3, #1
 80153f0:	4650      	mov	r0, sl
 80153f2:	9301      	str	r3, [sp, #4]
 80153f4:	f7ff fa6b 	bl	80148ce <quorem>
 80153f8:	4641      	mov	r1, r8
 80153fa:	9002      	str	r0, [sp, #8]
 80153fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015400:	4650      	mov	r0, sl
 8015402:	f000 fc5b 	bl	8015cbc <__mcmp>
 8015406:	463a      	mov	r2, r7
 8015408:	9005      	str	r0, [sp, #20]
 801540a:	4631      	mov	r1, r6
 801540c:	4620      	mov	r0, r4
 801540e:	f000 fc71 	bl	8015cf4 <__mdiff>
 8015412:	68c2      	ldr	r2, [r0, #12]
 8015414:	4605      	mov	r5, r0
 8015416:	bb02      	cbnz	r2, 801545a <_dtoa_r+0xa7a>
 8015418:	4601      	mov	r1, r0
 801541a:	4650      	mov	r0, sl
 801541c:	f000 fc4e 	bl	8015cbc <__mcmp>
 8015420:	4602      	mov	r2, r0
 8015422:	4629      	mov	r1, r5
 8015424:	4620      	mov	r0, r4
 8015426:	9209      	str	r2, [sp, #36]	; 0x24
 8015428:	f000 fa0c 	bl	8015844 <_Bfree>
 801542c:	9b07      	ldr	r3, [sp, #28]
 801542e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015430:	9d04      	ldr	r5, [sp, #16]
 8015432:	ea43 0102 	orr.w	r1, r3, r2
 8015436:	9b06      	ldr	r3, [sp, #24]
 8015438:	4319      	orrs	r1, r3
 801543a:	d110      	bne.n	801545e <_dtoa_r+0xa7e>
 801543c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015440:	d029      	beq.n	8015496 <_dtoa_r+0xab6>
 8015442:	9b05      	ldr	r3, [sp, #20]
 8015444:	2b00      	cmp	r3, #0
 8015446:	dd02      	ble.n	801544e <_dtoa_r+0xa6e>
 8015448:	9b02      	ldr	r3, [sp, #8]
 801544a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	f883 9000 	strb.w	r9, [r3]
 8015454:	e774      	b.n	8015340 <_dtoa_r+0x960>
 8015456:	4638      	mov	r0, r7
 8015458:	e7ba      	b.n	80153d0 <_dtoa_r+0x9f0>
 801545a:	2201      	movs	r2, #1
 801545c:	e7e1      	b.n	8015422 <_dtoa_r+0xa42>
 801545e:	9b05      	ldr	r3, [sp, #20]
 8015460:	2b00      	cmp	r3, #0
 8015462:	db04      	blt.n	801546e <_dtoa_r+0xa8e>
 8015464:	9907      	ldr	r1, [sp, #28]
 8015466:	430b      	orrs	r3, r1
 8015468:	9906      	ldr	r1, [sp, #24]
 801546a:	430b      	orrs	r3, r1
 801546c:	d120      	bne.n	80154b0 <_dtoa_r+0xad0>
 801546e:	2a00      	cmp	r2, #0
 8015470:	dded      	ble.n	801544e <_dtoa_r+0xa6e>
 8015472:	4651      	mov	r1, sl
 8015474:	2201      	movs	r2, #1
 8015476:	4620      	mov	r0, r4
 8015478:	f000 fbb4 	bl	8015be4 <__lshift>
 801547c:	4631      	mov	r1, r6
 801547e:	4682      	mov	sl, r0
 8015480:	f000 fc1c 	bl	8015cbc <__mcmp>
 8015484:	2800      	cmp	r0, #0
 8015486:	dc03      	bgt.n	8015490 <_dtoa_r+0xab0>
 8015488:	d1e1      	bne.n	801544e <_dtoa_r+0xa6e>
 801548a:	f019 0f01 	tst.w	r9, #1
 801548e:	d0de      	beq.n	801544e <_dtoa_r+0xa6e>
 8015490:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015494:	d1d8      	bne.n	8015448 <_dtoa_r+0xa68>
 8015496:	9a01      	ldr	r2, [sp, #4]
 8015498:	2339      	movs	r3, #57	; 0x39
 801549a:	7013      	strb	r3, [r2, #0]
 801549c:	462b      	mov	r3, r5
 801549e:	461d      	mov	r5, r3
 80154a0:	3b01      	subs	r3, #1
 80154a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80154a6:	2a39      	cmp	r2, #57	; 0x39
 80154a8:	d06c      	beq.n	8015584 <_dtoa_r+0xba4>
 80154aa:	3201      	adds	r2, #1
 80154ac:	701a      	strb	r2, [r3, #0]
 80154ae:	e747      	b.n	8015340 <_dtoa_r+0x960>
 80154b0:	2a00      	cmp	r2, #0
 80154b2:	dd07      	ble.n	80154c4 <_dtoa_r+0xae4>
 80154b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80154b8:	d0ed      	beq.n	8015496 <_dtoa_r+0xab6>
 80154ba:	9a01      	ldr	r2, [sp, #4]
 80154bc:	f109 0301 	add.w	r3, r9, #1
 80154c0:	7013      	strb	r3, [r2, #0]
 80154c2:	e73d      	b.n	8015340 <_dtoa_r+0x960>
 80154c4:	9b04      	ldr	r3, [sp, #16]
 80154c6:	9a08      	ldr	r2, [sp, #32]
 80154c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80154cc:	4293      	cmp	r3, r2
 80154ce:	d043      	beq.n	8015558 <_dtoa_r+0xb78>
 80154d0:	4651      	mov	r1, sl
 80154d2:	2300      	movs	r3, #0
 80154d4:	220a      	movs	r2, #10
 80154d6:	4620      	mov	r0, r4
 80154d8:	f000 f9d6 	bl	8015888 <__multadd>
 80154dc:	45b8      	cmp	r8, r7
 80154de:	4682      	mov	sl, r0
 80154e0:	f04f 0300 	mov.w	r3, #0
 80154e4:	f04f 020a 	mov.w	r2, #10
 80154e8:	4641      	mov	r1, r8
 80154ea:	4620      	mov	r0, r4
 80154ec:	d107      	bne.n	80154fe <_dtoa_r+0xb1e>
 80154ee:	f000 f9cb 	bl	8015888 <__multadd>
 80154f2:	4680      	mov	r8, r0
 80154f4:	4607      	mov	r7, r0
 80154f6:	9b04      	ldr	r3, [sp, #16]
 80154f8:	3301      	adds	r3, #1
 80154fa:	9304      	str	r3, [sp, #16]
 80154fc:	e775      	b.n	80153ea <_dtoa_r+0xa0a>
 80154fe:	f000 f9c3 	bl	8015888 <__multadd>
 8015502:	4639      	mov	r1, r7
 8015504:	4680      	mov	r8, r0
 8015506:	2300      	movs	r3, #0
 8015508:	220a      	movs	r2, #10
 801550a:	4620      	mov	r0, r4
 801550c:	f000 f9bc 	bl	8015888 <__multadd>
 8015510:	4607      	mov	r7, r0
 8015512:	e7f0      	b.n	80154f6 <_dtoa_r+0xb16>
 8015514:	9b04      	ldr	r3, [sp, #16]
 8015516:	9301      	str	r3, [sp, #4]
 8015518:	9d00      	ldr	r5, [sp, #0]
 801551a:	4631      	mov	r1, r6
 801551c:	4650      	mov	r0, sl
 801551e:	f7ff f9d6 	bl	80148ce <quorem>
 8015522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015526:	9b00      	ldr	r3, [sp, #0]
 8015528:	f805 9b01 	strb.w	r9, [r5], #1
 801552c:	1aea      	subs	r2, r5, r3
 801552e:	9b01      	ldr	r3, [sp, #4]
 8015530:	4293      	cmp	r3, r2
 8015532:	dd07      	ble.n	8015544 <_dtoa_r+0xb64>
 8015534:	4651      	mov	r1, sl
 8015536:	2300      	movs	r3, #0
 8015538:	220a      	movs	r2, #10
 801553a:	4620      	mov	r0, r4
 801553c:	f000 f9a4 	bl	8015888 <__multadd>
 8015540:	4682      	mov	sl, r0
 8015542:	e7ea      	b.n	801551a <_dtoa_r+0xb3a>
 8015544:	9b01      	ldr	r3, [sp, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	bfc8      	it	gt
 801554a:	461d      	movgt	r5, r3
 801554c:	9b00      	ldr	r3, [sp, #0]
 801554e:	bfd8      	it	le
 8015550:	2501      	movle	r5, #1
 8015552:	441d      	add	r5, r3
 8015554:	f04f 0800 	mov.w	r8, #0
 8015558:	4651      	mov	r1, sl
 801555a:	2201      	movs	r2, #1
 801555c:	4620      	mov	r0, r4
 801555e:	f000 fb41 	bl	8015be4 <__lshift>
 8015562:	4631      	mov	r1, r6
 8015564:	4682      	mov	sl, r0
 8015566:	f000 fba9 	bl	8015cbc <__mcmp>
 801556a:	2800      	cmp	r0, #0
 801556c:	dc96      	bgt.n	801549c <_dtoa_r+0xabc>
 801556e:	d102      	bne.n	8015576 <_dtoa_r+0xb96>
 8015570:	f019 0f01 	tst.w	r9, #1
 8015574:	d192      	bne.n	801549c <_dtoa_r+0xabc>
 8015576:	462b      	mov	r3, r5
 8015578:	461d      	mov	r5, r3
 801557a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801557e:	2a30      	cmp	r2, #48	; 0x30
 8015580:	d0fa      	beq.n	8015578 <_dtoa_r+0xb98>
 8015582:	e6dd      	b.n	8015340 <_dtoa_r+0x960>
 8015584:	9a00      	ldr	r2, [sp, #0]
 8015586:	429a      	cmp	r2, r3
 8015588:	d189      	bne.n	801549e <_dtoa_r+0xabe>
 801558a:	f10b 0b01 	add.w	fp, fp, #1
 801558e:	2331      	movs	r3, #49	; 0x31
 8015590:	e796      	b.n	80154c0 <_dtoa_r+0xae0>
 8015592:	4b0a      	ldr	r3, [pc, #40]	; (80155bc <_dtoa_r+0xbdc>)
 8015594:	f7ff ba99 	b.w	8014aca <_dtoa_r+0xea>
 8015598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801559a:	2b00      	cmp	r3, #0
 801559c:	f47f aa6d 	bne.w	8014a7a <_dtoa_r+0x9a>
 80155a0:	4b07      	ldr	r3, [pc, #28]	; (80155c0 <_dtoa_r+0xbe0>)
 80155a2:	f7ff ba92 	b.w	8014aca <_dtoa_r+0xea>
 80155a6:	9b01      	ldr	r3, [sp, #4]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	dcb5      	bgt.n	8015518 <_dtoa_r+0xb38>
 80155ac:	9b07      	ldr	r3, [sp, #28]
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	f73f aeb1 	bgt.w	8015316 <_dtoa_r+0x936>
 80155b4:	e7b0      	b.n	8015518 <_dtoa_r+0xb38>
 80155b6:	bf00      	nop
 80155b8:	0801bb4c 	.word	0x0801bb4c
 80155bc:	0801baac 	.word	0x0801baac
 80155c0:	0801bad0 	.word	0x0801bad0

080155c4 <_free_r>:
 80155c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155c6:	2900      	cmp	r1, #0
 80155c8:	d044      	beq.n	8015654 <_free_r+0x90>
 80155ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80155ce:	9001      	str	r0, [sp, #4]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	f1a1 0404 	sub.w	r4, r1, #4
 80155d6:	bfb8      	it	lt
 80155d8:	18e4      	addlt	r4, r4, r3
 80155da:	f000 f8e7 	bl	80157ac <__malloc_lock>
 80155de:	4a1e      	ldr	r2, [pc, #120]	; (8015658 <_free_r+0x94>)
 80155e0:	9801      	ldr	r0, [sp, #4]
 80155e2:	6813      	ldr	r3, [r2, #0]
 80155e4:	b933      	cbnz	r3, 80155f4 <_free_r+0x30>
 80155e6:	6063      	str	r3, [r4, #4]
 80155e8:	6014      	str	r4, [r2, #0]
 80155ea:	b003      	add	sp, #12
 80155ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155f0:	f000 b8e2 	b.w	80157b8 <__malloc_unlock>
 80155f4:	42a3      	cmp	r3, r4
 80155f6:	d908      	bls.n	801560a <_free_r+0x46>
 80155f8:	6825      	ldr	r5, [r4, #0]
 80155fa:	1961      	adds	r1, r4, r5
 80155fc:	428b      	cmp	r3, r1
 80155fe:	bf01      	itttt	eq
 8015600:	6819      	ldreq	r1, [r3, #0]
 8015602:	685b      	ldreq	r3, [r3, #4]
 8015604:	1949      	addeq	r1, r1, r5
 8015606:	6021      	streq	r1, [r4, #0]
 8015608:	e7ed      	b.n	80155e6 <_free_r+0x22>
 801560a:	461a      	mov	r2, r3
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	b10b      	cbz	r3, 8015614 <_free_r+0x50>
 8015610:	42a3      	cmp	r3, r4
 8015612:	d9fa      	bls.n	801560a <_free_r+0x46>
 8015614:	6811      	ldr	r1, [r2, #0]
 8015616:	1855      	adds	r5, r2, r1
 8015618:	42a5      	cmp	r5, r4
 801561a:	d10b      	bne.n	8015634 <_free_r+0x70>
 801561c:	6824      	ldr	r4, [r4, #0]
 801561e:	4421      	add	r1, r4
 8015620:	1854      	adds	r4, r2, r1
 8015622:	42a3      	cmp	r3, r4
 8015624:	6011      	str	r1, [r2, #0]
 8015626:	d1e0      	bne.n	80155ea <_free_r+0x26>
 8015628:	681c      	ldr	r4, [r3, #0]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	6053      	str	r3, [r2, #4]
 801562e:	440c      	add	r4, r1
 8015630:	6014      	str	r4, [r2, #0]
 8015632:	e7da      	b.n	80155ea <_free_r+0x26>
 8015634:	d902      	bls.n	801563c <_free_r+0x78>
 8015636:	230c      	movs	r3, #12
 8015638:	6003      	str	r3, [r0, #0]
 801563a:	e7d6      	b.n	80155ea <_free_r+0x26>
 801563c:	6825      	ldr	r5, [r4, #0]
 801563e:	1961      	adds	r1, r4, r5
 8015640:	428b      	cmp	r3, r1
 8015642:	bf04      	itt	eq
 8015644:	6819      	ldreq	r1, [r3, #0]
 8015646:	685b      	ldreq	r3, [r3, #4]
 8015648:	6063      	str	r3, [r4, #4]
 801564a:	bf04      	itt	eq
 801564c:	1949      	addeq	r1, r1, r5
 801564e:	6021      	streq	r1, [r4, #0]
 8015650:	6054      	str	r4, [r2, #4]
 8015652:	e7ca      	b.n	80155ea <_free_r+0x26>
 8015654:	b003      	add	sp, #12
 8015656:	bd30      	pop	{r4, r5, pc}
 8015658:	20002e38 	.word	0x20002e38

0801565c <malloc>:
 801565c:	4b02      	ldr	r3, [pc, #8]	; (8015668 <malloc+0xc>)
 801565e:	4601      	mov	r1, r0
 8015660:	6818      	ldr	r0, [r3, #0]
 8015662:	f000 b823 	b.w	80156ac <_malloc_r>
 8015666:	bf00      	nop
 8015668:	20000374 	.word	0x20000374

0801566c <sbrk_aligned>:
 801566c:	b570      	push	{r4, r5, r6, lr}
 801566e:	4e0e      	ldr	r6, [pc, #56]	; (80156a8 <sbrk_aligned+0x3c>)
 8015670:	460c      	mov	r4, r1
 8015672:	6831      	ldr	r1, [r6, #0]
 8015674:	4605      	mov	r5, r0
 8015676:	b911      	cbnz	r1, 801567e <sbrk_aligned+0x12>
 8015678:	f000 fe40 	bl	80162fc <_sbrk_r>
 801567c:	6030      	str	r0, [r6, #0]
 801567e:	4621      	mov	r1, r4
 8015680:	4628      	mov	r0, r5
 8015682:	f000 fe3b 	bl	80162fc <_sbrk_r>
 8015686:	1c43      	adds	r3, r0, #1
 8015688:	d00a      	beq.n	80156a0 <sbrk_aligned+0x34>
 801568a:	1cc4      	adds	r4, r0, #3
 801568c:	f024 0403 	bic.w	r4, r4, #3
 8015690:	42a0      	cmp	r0, r4
 8015692:	d007      	beq.n	80156a4 <sbrk_aligned+0x38>
 8015694:	1a21      	subs	r1, r4, r0
 8015696:	4628      	mov	r0, r5
 8015698:	f000 fe30 	bl	80162fc <_sbrk_r>
 801569c:	3001      	adds	r0, #1
 801569e:	d101      	bne.n	80156a4 <sbrk_aligned+0x38>
 80156a0:	f04f 34ff 	mov.w	r4, #4294967295
 80156a4:	4620      	mov	r0, r4
 80156a6:	bd70      	pop	{r4, r5, r6, pc}
 80156a8:	20002e3c 	.word	0x20002e3c

080156ac <_malloc_r>:
 80156ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156b0:	1ccd      	adds	r5, r1, #3
 80156b2:	f025 0503 	bic.w	r5, r5, #3
 80156b6:	3508      	adds	r5, #8
 80156b8:	2d0c      	cmp	r5, #12
 80156ba:	bf38      	it	cc
 80156bc:	250c      	movcc	r5, #12
 80156be:	2d00      	cmp	r5, #0
 80156c0:	4607      	mov	r7, r0
 80156c2:	db01      	blt.n	80156c8 <_malloc_r+0x1c>
 80156c4:	42a9      	cmp	r1, r5
 80156c6:	d905      	bls.n	80156d4 <_malloc_r+0x28>
 80156c8:	230c      	movs	r3, #12
 80156ca:	603b      	str	r3, [r7, #0]
 80156cc:	2600      	movs	r6, #0
 80156ce:	4630      	mov	r0, r6
 80156d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80157a8 <_malloc_r+0xfc>
 80156d8:	f000 f868 	bl	80157ac <__malloc_lock>
 80156dc:	f8d8 3000 	ldr.w	r3, [r8]
 80156e0:	461c      	mov	r4, r3
 80156e2:	bb5c      	cbnz	r4, 801573c <_malloc_r+0x90>
 80156e4:	4629      	mov	r1, r5
 80156e6:	4638      	mov	r0, r7
 80156e8:	f7ff ffc0 	bl	801566c <sbrk_aligned>
 80156ec:	1c43      	adds	r3, r0, #1
 80156ee:	4604      	mov	r4, r0
 80156f0:	d155      	bne.n	801579e <_malloc_r+0xf2>
 80156f2:	f8d8 4000 	ldr.w	r4, [r8]
 80156f6:	4626      	mov	r6, r4
 80156f8:	2e00      	cmp	r6, #0
 80156fa:	d145      	bne.n	8015788 <_malloc_r+0xdc>
 80156fc:	2c00      	cmp	r4, #0
 80156fe:	d048      	beq.n	8015792 <_malloc_r+0xe6>
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	4631      	mov	r1, r6
 8015704:	4638      	mov	r0, r7
 8015706:	eb04 0903 	add.w	r9, r4, r3
 801570a:	f000 fdf7 	bl	80162fc <_sbrk_r>
 801570e:	4581      	cmp	r9, r0
 8015710:	d13f      	bne.n	8015792 <_malloc_r+0xe6>
 8015712:	6821      	ldr	r1, [r4, #0]
 8015714:	1a6d      	subs	r5, r5, r1
 8015716:	4629      	mov	r1, r5
 8015718:	4638      	mov	r0, r7
 801571a:	f7ff ffa7 	bl	801566c <sbrk_aligned>
 801571e:	3001      	adds	r0, #1
 8015720:	d037      	beq.n	8015792 <_malloc_r+0xe6>
 8015722:	6823      	ldr	r3, [r4, #0]
 8015724:	442b      	add	r3, r5
 8015726:	6023      	str	r3, [r4, #0]
 8015728:	f8d8 3000 	ldr.w	r3, [r8]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d038      	beq.n	80157a2 <_malloc_r+0xf6>
 8015730:	685a      	ldr	r2, [r3, #4]
 8015732:	42a2      	cmp	r2, r4
 8015734:	d12b      	bne.n	801578e <_malloc_r+0xe2>
 8015736:	2200      	movs	r2, #0
 8015738:	605a      	str	r2, [r3, #4]
 801573a:	e00f      	b.n	801575c <_malloc_r+0xb0>
 801573c:	6822      	ldr	r2, [r4, #0]
 801573e:	1b52      	subs	r2, r2, r5
 8015740:	d41f      	bmi.n	8015782 <_malloc_r+0xd6>
 8015742:	2a0b      	cmp	r2, #11
 8015744:	d917      	bls.n	8015776 <_malloc_r+0xca>
 8015746:	1961      	adds	r1, r4, r5
 8015748:	42a3      	cmp	r3, r4
 801574a:	6025      	str	r5, [r4, #0]
 801574c:	bf18      	it	ne
 801574e:	6059      	strne	r1, [r3, #4]
 8015750:	6863      	ldr	r3, [r4, #4]
 8015752:	bf08      	it	eq
 8015754:	f8c8 1000 	streq.w	r1, [r8]
 8015758:	5162      	str	r2, [r4, r5]
 801575a:	604b      	str	r3, [r1, #4]
 801575c:	4638      	mov	r0, r7
 801575e:	f104 060b 	add.w	r6, r4, #11
 8015762:	f000 f829 	bl	80157b8 <__malloc_unlock>
 8015766:	f026 0607 	bic.w	r6, r6, #7
 801576a:	1d23      	adds	r3, r4, #4
 801576c:	1af2      	subs	r2, r6, r3
 801576e:	d0ae      	beq.n	80156ce <_malloc_r+0x22>
 8015770:	1b9b      	subs	r3, r3, r6
 8015772:	50a3      	str	r3, [r4, r2]
 8015774:	e7ab      	b.n	80156ce <_malloc_r+0x22>
 8015776:	42a3      	cmp	r3, r4
 8015778:	6862      	ldr	r2, [r4, #4]
 801577a:	d1dd      	bne.n	8015738 <_malloc_r+0x8c>
 801577c:	f8c8 2000 	str.w	r2, [r8]
 8015780:	e7ec      	b.n	801575c <_malloc_r+0xb0>
 8015782:	4623      	mov	r3, r4
 8015784:	6864      	ldr	r4, [r4, #4]
 8015786:	e7ac      	b.n	80156e2 <_malloc_r+0x36>
 8015788:	4634      	mov	r4, r6
 801578a:	6876      	ldr	r6, [r6, #4]
 801578c:	e7b4      	b.n	80156f8 <_malloc_r+0x4c>
 801578e:	4613      	mov	r3, r2
 8015790:	e7cc      	b.n	801572c <_malloc_r+0x80>
 8015792:	230c      	movs	r3, #12
 8015794:	603b      	str	r3, [r7, #0]
 8015796:	4638      	mov	r0, r7
 8015798:	f000 f80e 	bl	80157b8 <__malloc_unlock>
 801579c:	e797      	b.n	80156ce <_malloc_r+0x22>
 801579e:	6025      	str	r5, [r4, #0]
 80157a0:	e7dc      	b.n	801575c <_malloc_r+0xb0>
 80157a2:	605b      	str	r3, [r3, #4]
 80157a4:	deff      	udf	#255	; 0xff
 80157a6:	bf00      	nop
 80157a8:	20002e38 	.word	0x20002e38

080157ac <__malloc_lock>:
 80157ac:	4801      	ldr	r0, [pc, #4]	; (80157b4 <__malloc_lock+0x8>)
 80157ae:	f7ff b88c 	b.w	80148ca <__retarget_lock_acquire_recursive>
 80157b2:	bf00      	nop
 80157b4:	20002e34 	.word	0x20002e34

080157b8 <__malloc_unlock>:
 80157b8:	4801      	ldr	r0, [pc, #4]	; (80157c0 <__malloc_unlock+0x8>)
 80157ba:	f7ff b887 	b.w	80148cc <__retarget_lock_release_recursive>
 80157be:	bf00      	nop
 80157c0:	20002e34 	.word	0x20002e34

080157c4 <_Balloc>:
 80157c4:	b570      	push	{r4, r5, r6, lr}
 80157c6:	69c6      	ldr	r6, [r0, #28]
 80157c8:	4604      	mov	r4, r0
 80157ca:	460d      	mov	r5, r1
 80157cc:	b976      	cbnz	r6, 80157ec <_Balloc+0x28>
 80157ce:	2010      	movs	r0, #16
 80157d0:	f7ff ff44 	bl	801565c <malloc>
 80157d4:	4602      	mov	r2, r0
 80157d6:	61e0      	str	r0, [r4, #28]
 80157d8:	b920      	cbnz	r0, 80157e4 <_Balloc+0x20>
 80157da:	4b18      	ldr	r3, [pc, #96]	; (801583c <_Balloc+0x78>)
 80157dc:	4818      	ldr	r0, [pc, #96]	; (8015840 <_Balloc+0x7c>)
 80157de:	216b      	movs	r1, #107	; 0x6b
 80157e0:	f000 fdaa 	bl	8016338 <__assert_func>
 80157e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157e8:	6006      	str	r6, [r0, #0]
 80157ea:	60c6      	str	r6, [r0, #12]
 80157ec:	69e6      	ldr	r6, [r4, #28]
 80157ee:	68f3      	ldr	r3, [r6, #12]
 80157f0:	b183      	cbz	r3, 8015814 <_Balloc+0x50>
 80157f2:	69e3      	ldr	r3, [r4, #28]
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157fa:	b9b8      	cbnz	r0, 801582c <_Balloc+0x68>
 80157fc:	2101      	movs	r1, #1
 80157fe:	fa01 f605 	lsl.w	r6, r1, r5
 8015802:	1d72      	adds	r2, r6, #5
 8015804:	0092      	lsls	r2, r2, #2
 8015806:	4620      	mov	r0, r4
 8015808:	f000 fdb4 	bl	8016374 <_calloc_r>
 801580c:	b160      	cbz	r0, 8015828 <_Balloc+0x64>
 801580e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015812:	e00e      	b.n	8015832 <_Balloc+0x6e>
 8015814:	2221      	movs	r2, #33	; 0x21
 8015816:	2104      	movs	r1, #4
 8015818:	4620      	mov	r0, r4
 801581a:	f000 fdab 	bl	8016374 <_calloc_r>
 801581e:	69e3      	ldr	r3, [r4, #28]
 8015820:	60f0      	str	r0, [r6, #12]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1e4      	bne.n	80157f2 <_Balloc+0x2e>
 8015828:	2000      	movs	r0, #0
 801582a:	bd70      	pop	{r4, r5, r6, pc}
 801582c:	6802      	ldr	r2, [r0, #0]
 801582e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015832:	2300      	movs	r3, #0
 8015834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015838:	e7f7      	b.n	801582a <_Balloc+0x66>
 801583a:	bf00      	nop
 801583c:	0801badd 	.word	0x0801badd
 8015840:	0801bb5d 	.word	0x0801bb5d

08015844 <_Bfree>:
 8015844:	b570      	push	{r4, r5, r6, lr}
 8015846:	69c6      	ldr	r6, [r0, #28]
 8015848:	4605      	mov	r5, r0
 801584a:	460c      	mov	r4, r1
 801584c:	b976      	cbnz	r6, 801586c <_Bfree+0x28>
 801584e:	2010      	movs	r0, #16
 8015850:	f7ff ff04 	bl	801565c <malloc>
 8015854:	4602      	mov	r2, r0
 8015856:	61e8      	str	r0, [r5, #28]
 8015858:	b920      	cbnz	r0, 8015864 <_Bfree+0x20>
 801585a:	4b09      	ldr	r3, [pc, #36]	; (8015880 <_Bfree+0x3c>)
 801585c:	4809      	ldr	r0, [pc, #36]	; (8015884 <_Bfree+0x40>)
 801585e:	218f      	movs	r1, #143	; 0x8f
 8015860:	f000 fd6a 	bl	8016338 <__assert_func>
 8015864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015868:	6006      	str	r6, [r0, #0]
 801586a:	60c6      	str	r6, [r0, #12]
 801586c:	b13c      	cbz	r4, 801587e <_Bfree+0x3a>
 801586e:	69eb      	ldr	r3, [r5, #28]
 8015870:	6862      	ldr	r2, [r4, #4]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015878:	6021      	str	r1, [r4, #0]
 801587a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801587e:	bd70      	pop	{r4, r5, r6, pc}
 8015880:	0801badd 	.word	0x0801badd
 8015884:	0801bb5d 	.word	0x0801bb5d

08015888 <__multadd>:
 8015888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801588c:	690d      	ldr	r5, [r1, #16]
 801588e:	4607      	mov	r7, r0
 8015890:	460c      	mov	r4, r1
 8015892:	461e      	mov	r6, r3
 8015894:	f101 0c14 	add.w	ip, r1, #20
 8015898:	2000      	movs	r0, #0
 801589a:	f8dc 3000 	ldr.w	r3, [ip]
 801589e:	b299      	uxth	r1, r3
 80158a0:	fb02 6101 	mla	r1, r2, r1, r6
 80158a4:	0c1e      	lsrs	r6, r3, #16
 80158a6:	0c0b      	lsrs	r3, r1, #16
 80158a8:	fb02 3306 	mla	r3, r2, r6, r3
 80158ac:	b289      	uxth	r1, r1
 80158ae:	3001      	adds	r0, #1
 80158b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80158b4:	4285      	cmp	r5, r0
 80158b6:	f84c 1b04 	str.w	r1, [ip], #4
 80158ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80158be:	dcec      	bgt.n	801589a <__multadd+0x12>
 80158c0:	b30e      	cbz	r6, 8015906 <__multadd+0x7e>
 80158c2:	68a3      	ldr	r3, [r4, #8]
 80158c4:	42ab      	cmp	r3, r5
 80158c6:	dc19      	bgt.n	80158fc <__multadd+0x74>
 80158c8:	6861      	ldr	r1, [r4, #4]
 80158ca:	4638      	mov	r0, r7
 80158cc:	3101      	adds	r1, #1
 80158ce:	f7ff ff79 	bl	80157c4 <_Balloc>
 80158d2:	4680      	mov	r8, r0
 80158d4:	b928      	cbnz	r0, 80158e2 <__multadd+0x5a>
 80158d6:	4602      	mov	r2, r0
 80158d8:	4b0c      	ldr	r3, [pc, #48]	; (801590c <__multadd+0x84>)
 80158da:	480d      	ldr	r0, [pc, #52]	; (8015910 <__multadd+0x88>)
 80158dc:	21ba      	movs	r1, #186	; 0xba
 80158de:	f000 fd2b 	bl	8016338 <__assert_func>
 80158e2:	6922      	ldr	r2, [r4, #16]
 80158e4:	3202      	adds	r2, #2
 80158e6:	f104 010c 	add.w	r1, r4, #12
 80158ea:	0092      	lsls	r2, r2, #2
 80158ec:	300c      	adds	r0, #12
 80158ee:	f000 fd15 	bl	801631c <memcpy>
 80158f2:	4621      	mov	r1, r4
 80158f4:	4638      	mov	r0, r7
 80158f6:	f7ff ffa5 	bl	8015844 <_Bfree>
 80158fa:	4644      	mov	r4, r8
 80158fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015900:	3501      	adds	r5, #1
 8015902:	615e      	str	r6, [r3, #20]
 8015904:	6125      	str	r5, [r4, #16]
 8015906:	4620      	mov	r0, r4
 8015908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801590c:	0801bb4c 	.word	0x0801bb4c
 8015910:	0801bb5d 	.word	0x0801bb5d

08015914 <__hi0bits>:
 8015914:	0c03      	lsrs	r3, r0, #16
 8015916:	041b      	lsls	r3, r3, #16
 8015918:	b9d3      	cbnz	r3, 8015950 <__hi0bits+0x3c>
 801591a:	0400      	lsls	r0, r0, #16
 801591c:	2310      	movs	r3, #16
 801591e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015922:	bf04      	itt	eq
 8015924:	0200      	lsleq	r0, r0, #8
 8015926:	3308      	addeq	r3, #8
 8015928:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801592c:	bf04      	itt	eq
 801592e:	0100      	lsleq	r0, r0, #4
 8015930:	3304      	addeq	r3, #4
 8015932:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015936:	bf04      	itt	eq
 8015938:	0080      	lsleq	r0, r0, #2
 801593a:	3302      	addeq	r3, #2
 801593c:	2800      	cmp	r0, #0
 801593e:	db05      	blt.n	801594c <__hi0bits+0x38>
 8015940:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015944:	f103 0301 	add.w	r3, r3, #1
 8015948:	bf08      	it	eq
 801594a:	2320      	moveq	r3, #32
 801594c:	4618      	mov	r0, r3
 801594e:	4770      	bx	lr
 8015950:	2300      	movs	r3, #0
 8015952:	e7e4      	b.n	801591e <__hi0bits+0xa>

08015954 <__lo0bits>:
 8015954:	6803      	ldr	r3, [r0, #0]
 8015956:	f013 0207 	ands.w	r2, r3, #7
 801595a:	d00c      	beq.n	8015976 <__lo0bits+0x22>
 801595c:	07d9      	lsls	r1, r3, #31
 801595e:	d422      	bmi.n	80159a6 <__lo0bits+0x52>
 8015960:	079a      	lsls	r2, r3, #30
 8015962:	bf49      	itett	mi
 8015964:	085b      	lsrmi	r3, r3, #1
 8015966:	089b      	lsrpl	r3, r3, #2
 8015968:	6003      	strmi	r3, [r0, #0]
 801596a:	2201      	movmi	r2, #1
 801596c:	bf5c      	itt	pl
 801596e:	6003      	strpl	r3, [r0, #0]
 8015970:	2202      	movpl	r2, #2
 8015972:	4610      	mov	r0, r2
 8015974:	4770      	bx	lr
 8015976:	b299      	uxth	r1, r3
 8015978:	b909      	cbnz	r1, 801597e <__lo0bits+0x2a>
 801597a:	0c1b      	lsrs	r3, r3, #16
 801597c:	2210      	movs	r2, #16
 801597e:	b2d9      	uxtb	r1, r3
 8015980:	b909      	cbnz	r1, 8015986 <__lo0bits+0x32>
 8015982:	3208      	adds	r2, #8
 8015984:	0a1b      	lsrs	r3, r3, #8
 8015986:	0719      	lsls	r1, r3, #28
 8015988:	bf04      	itt	eq
 801598a:	091b      	lsreq	r3, r3, #4
 801598c:	3204      	addeq	r2, #4
 801598e:	0799      	lsls	r1, r3, #30
 8015990:	bf04      	itt	eq
 8015992:	089b      	lsreq	r3, r3, #2
 8015994:	3202      	addeq	r2, #2
 8015996:	07d9      	lsls	r1, r3, #31
 8015998:	d403      	bmi.n	80159a2 <__lo0bits+0x4e>
 801599a:	085b      	lsrs	r3, r3, #1
 801599c:	f102 0201 	add.w	r2, r2, #1
 80159a0:	d003      	beq.n	80159aa <__lo0bits+0x56>
 80159a2:	6003      	str	r3, [r0, #0]
 80159a4:	e7e5      	b.n	8015972 <__lo0bits+0x1e>
 80159a6:	2200      	movs	r2, #0
 80159a8:	e7e3      	b.n	8015972 <__lo0bits+0x1e>
 80159aa:	2220      	movs	r2, #32
 80159ac:	e7e1      	b.n	8015972 <__lo0bits+0x1e>
	...

080159b0 <__i2b>:
 80159b0:	b510      	push	{r4, lr}
 80159b2:	460c      	mov	r4, r1
 80159b4:	2101      	movs	r1, #1
 80159b6:	f7ff ff05 	bl	80157c4 <_Balloc>
 80159ba:	4602      	mov	r2, r0
 80159bc:	b928      	cbnz	r0, 80159ca <__i2b+0x1a>
 80159be:	4b05      	ldr	r3, [pc, #20]	; (80159d4 <__i2b+0x24>)
 80159c0:	4805      	ldr	r0, [pc, #20]	; (80159d8 <__i2b+0x28>)
 80159c2:	f240 1145 	movw	r1, #325	; 0x145
 80159c6:	f000 fcb7 	bl	8016338 <__assert_func>
 80159ca:	2301      	movs	r3, #1
 80159cc:	6144      	str	r4, [r0, #20]
 80159ce:	6103      	str	r3, [r0, #16]
 80159d0:	bd10      	pop	{r4, pc}
 80159d2:	bf00      	nop
 80159d4:	0801bb4c 	.word	0x0801bb4c
 80159d8:	0801bb5d 	.word	0x0801bb5d

080159dc <__multiply>:
 80159dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e0:	4691      	mov	r9, r2
 80159e2:	690a      	ldr	r2, [r1, #16]
 80159e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159e8:	429a      	cmp	r2, r3
 80159ea:	bfb8      	it	lt
 80159ec:	460b      	movlt	r3, r1
 80159ee:	460c      	mov	r4, r1
 80159f0:	bfbc      	itt	lt
 80159f2:	464c      	movlt	r4, r9
 80159f4:	4699      	movlt	r9, r3
 80159f6:	6927      	ldr	r7, [r4, #16]
 80159f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80159fc:	68a3      	ldr	r3, [r4, #8]
 80159fe:	6861      	ldr	r1, [r4, #4]
 8015a00:	eb07 060a 	add.w	r6, r7, sl
 8015a04:	42b3      	cmp	r3, r6
 8015a06:	b085      	sub	sp, #20
 8015a08:	bfb8      	it	lt
 8015a0a:	3101      	addlt	r1, #1
 8015a0c:	f7ff feda 	bl	80157c4 <_Balloc>
 8015a10:	b930      	cbnz	r0, 8015a20 <__multiply+0x44>
 8015a12:	4602      	mov	r2, r0
 8015a14:	4b44      	ldr	r3, [pc, #272]	; (8015b28 <__multiply+0x14c>)
 8015a16:	4845      	ldr	r0, [pc, #276]	; (8015b2c <__multiply+0x150>)
 8015a18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015a1c:	f000 fc8c 	bl	8016338 <__assert_func>
 8015a20:	f100 0514 	add.w	r5, r0, #20
 8015a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015a28:	462b      	mov	r3, r5
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	4543      	cmp	r3, r8
 8015a2e:	d321      	bcc.n	8015a74 <__multiply+0x98>
 8015a30:	f104 0314 	add.w	r3, r4, #20
 8015a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015a38:	f109 0314 	add.w	r3, r9, #20
 8015a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015a40:	9202      	str	r2, [sp, #8]
 8015a42:	1b3a      	subs	r2, r7, r4
 8015a44:	3a15      	subs	r2, #21
 8015a46:	f022 0203 	bic.w	r2, r2, #3
 8015a4a:	3204      	adds	r2, #4
 8015a4c:	f104 0115 	add.w	r1, r4, #21
 8015a50:	428f      	cmp	r7, r1
 8015a52:	bf38      	it	cc
 8015a54:	2204      	movcc	r2, #4
 8015a56:	9201      	str	r2, [sp, #4]
 8015a58:	9a02      	ldr	r2, [sp, #8]
 8015a5a:	9303      	str	r3, [sp, #12]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d80c      	bhi.n	8015a7a <__multiply+0x9e>
 8015a60:	2e00      	cmp	r6, #0
 8015a62:	dd03      	ble.n	8015a6c <__multiply+0x90>
 8015a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d05b      	beq.n	8015b24 <__multiply+0x148>
 8015a6c:	6106      	str	r6, [r0, #16]
 8015a6e:	b005      	add	sp, #20
 8015a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a74:	f843 2b04 	str.w	r2, [r3], #4
 8015a78:	e7d8      	b.n	8015a2c <__multiply+0x50>
 8015a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015a7e:	f1ba 0f00 	cmp.w	sl, #0
 8015a82:	d024      	beq.n	8015ace <__multiply+0xf2>
 8015a84:	f104 0e14 	add.w	lr, r4, #20
 8015a88:	46a9      	mov	r9, r5
 8015a8a:	f04f 0c00 	mov.w	ip, #0
 8015a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015a92:	f8d9 1000 	ldr.w	r1, [r9]
 8015a96:	fa1f fb82 	uxth.w	fp, r2
 8015a9a:	b289      	uxth	r1, r1
 8015a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8015aa8:	4461      	add	r1, ip
 8015aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8015ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015ab6:	b289      	uxth	r1, r1
 8015ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015abc:	4577      	cmp	r7, lr
 8015abe:	f849 1b04 	str.w	r1, [r9], #4
 8015ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015ac6:	d8e2      	bhi.n	8015a8e <__multiply+0xb2>
 8015ac8:	9a01      	ldr	r2, [sp, #4]
 8015aca:	f845 c002 	str.w	ip, [r5, r2]
 8015ace:	9a03      	ldr	r2, [sp, #12]
 8015ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	f1b9 0f00 	cmp.w	r9, #0
 8015ada:	d021      	beq.n	8015b20 <__multiply+0x144>
 8015adc:	6829      	ldr	r1, [r5, #0]
 8015ade:	f104 0c14 	add.w	ip, r4, #20
 8015ae2:	46ae      	mov	lr, r5
 8015ae4:	f04f 0a00 	mov.w	sl, #0
 8015ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8015aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015af0:	fb09 220b 	mla	r2, r9, fp, r2
 8015af4:	4452      	add	r2, sl
 8015af6:	b289      	uxth	r1, r1
 8015af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015afc:	f84e 1b04 	str.w	r1, [lr], #4
 8015b00:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015b04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015b08:	f8be 1000 	ldrh.w	r1, [lr]
 8015b0c:	fb09 110a 	mla	r1, r9, sl, r1
 8015b10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015b14:	4567      	cmp	r7, ip
 8015b16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015b1a:	d8e5      	bhi.n	8015ae8 <__multiply+0x10c>
 8015b1c:	9a01      	ldr	r2, [sp, #4]
 8015b1e:	50a9      	str	r1, [r5, r2]
 8015b20:	3504      	adds	r5, #4
 8015b22:	e799      	b.n	8015a58 <__multiply+0x7c>
 8015b24:	3e01      	subs	r6, #1
 8015b26:	e79b      	b.n	8015a60 <__multiply+0x84>
 8015b28:	0801bb4c 	.word	0x0801bb4c
 8015b2c:	0801bb5d 	.word	0x0801bb5d

08015b30 <__pow5mult>:
 8015b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b34:	4615      	mov	r5, r2
 8015b36:	f012 0203 	ands.w	r2, r2, #3
 8015b3a:	4606      	mov	r6, r0
 8015b3c:	460f      	mov	r7, r1
 8015b3e:	d007      	beq.n	8015b50 <__pow5mult+0x20>
 8015b40:	4c25      	ldr	r4, [pc, #148]	; (8015bd8 <__pow5mult+0xa8>)
 8015b42:	3a01      	subs	r2, #1
 8015b44:	2300      	movs	r3, #0
 8015b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b4a:	f7ff fe9d 	bl	8015888 <__multadd>
 8015b4e:	4607      	mov	r7, r0
 8015b50:	10ad      	asrs	r5, r5, #2
 8015b52:	d03d      	beq.n	8015bd0 <__pow5mult+0xa0>
 8015b54:	69f4      	ldr	r4, [r6, #28]
 8015b56:	b97c      	cbnz	r4, 8015b78 <__pow5mult+0x48>
 8015b58:	2010      	movs	r0, #16
 8015b5a:	f7ff fd7f 	bl	801565c <malloc>
 8015b5e:	4602      	mov	r2, r0
 8015b60:	61f0      	str	r0, [r6, #28]
 8015b62:	b928      	cbnz	r0, 8015b70 <__pow5mult+0x40>
 8015b64:	4b1d      	ldr	r3, [pc, #116]	; (8015bdc <__pow5mult+0xac>)
 8015b66:	481e      	ldr	r0, [pc, #120]	; (8015be0 <__pow5mult+0xb0>)
 8015b68:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015b6c:	f000 fbe4 	bl	8016338 <__assert_func>
 8015b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b74:	6004      	str	r4, [r0, #0]
 8015b76:	60c4      	str	r4, [r0, #12]
 8015b78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b80:	b94c      	cbnz	r4, 8015b96 <__pow5mult+0x66>
 8015b82:	f240 2171 	movw	r1, #625	; 0x271
 8015b86:	4630      	mov	r0, r6
 8015b88:	f7ff ff12 	bl	80159b0 <__i2b>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b92:	4604      	mov	r4, r0
 8015b94:	6003      	str	r3, [r0, #0]
 8015b96:	f04f 0900 	mov.w	r9, #0
 8015b9a:	07eb      	lsls	r3, r5, #31
 8015b9c:	d50a      	bpl.n	8015bb4 <__pow5mult+0x84>
 8015b9e:	4639      	mov	r1, r7
 8015ba0:	4622      	mov	r2, r4
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	f7ff ff1a 	bl	80159dc <__multiply>
 8015ba8:	4639      	mov	r1, r7
 8015baa:	4680      	mov	r8, r0
 8015bac:	4630      	mov	r0, r6
 8015bae:	f7ff fe49 	bl	8015844 <_Bfree>
 8015bb2:	4647      	mov	r7, r8
 8015bb4:	106d      	asrs	r5, r5, #1
 8015bb6:	d00b      	beq.n	8015bd0 <__pow5mult+0xa0>
 8015bb8:	6820      	ldr	r0, [r4, #0]
 8015bba:	b938      	cbnz	r0, 8015bcc <__pow5mult+0x9c>
 8015bbc:	4622      	mov	r2, r4
 8015bbe:	4621      	mov	r1, r4
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f7ff ff0b 	bl	80159dc <__multiply>
 8015bc6:	6020      	str	r0, [r4, #0]
 8015bc8:	f8c0 9000 	str.w	r9, [r0]
 8015bcc:	4604      	mov	r4, r0
 8015bce:	e7e4      	b.n	8015b9a <__pow5mult+0x6a>
 8015bd0:	4638      	mov	r0, r7
 8015bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bd6:	bf00      	nop
 8015bd8:	0801bca8 	.word	0x0801bca8
 8015bdc:	0801badd 	.word	0x0801badd
 8015be0:	0801bb5d 	.word	0x0801bb5d

08015be4 <__lshift>:
 8015be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be8:	460c      	mov	r4, r1
 8015bea:	6849      	ldr	r1, [r1, #4]
 8015bec:	6923      	ldr	r3, [r4, #16]
 8015bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015bf2:	68a3      	ldr	r3, [r4, #8]
 8015bf4:	4607      	mov	r7, r0
 8015bf6:	4691      	mov	r9, r2
 8015bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015bfc:	f108 0601 	add.w	r6, r8, #1
 8015c00:	42b3      	cmp	r3, r6
 8015c02:	db0b      	blt.n	8015c1c <__lshift+0x38>
 8015c04:	4638      	mov	r0, r7
 8015c06:	f7ff fddd 	bl	80157c4 <_Balloc>
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	b948      	cbnz	r0, 8015c22 <__lshift+0x3e>
 8015c0e:	4602      	mov	r2, r0
 8015c10:	4b28      	ldr	r3, [pc, #160]	; (8015cb4 <__lshift+0xd0>)
 8015c12:	4829      	ldr	r0, [pc, #164]	; (8015cb8 <__lshift+0xd4>)
 8015c14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015c18:	f000 fb8e 	bl	8016338 <__assert_func>
 8015c1c:	3101      	adds	r1, #1
 8015c1e:	005b      	lsls	r3, r3, #1
 8015c20:	e7ee      	b.n	8015c00 <__lshift+0x1c>
 8015c22:	2300      	movs	r3, #0
 8015c24:	f100 0114 	add.w	r1, r0, #20
 8015c28:	f100 0210 	add.w	r2, r0, #16
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	4553      	cmp	r3, sl
 8015c30:	db33      	blt.n	8015c9a <__lshift+0xb6>
 8015c32:	6920      	ldr	r0, [r4, #16]
 8015c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c38:	f104 0314 	add.w	r3, r4, #20
 8015c3c:	f019 091f 	ands.w	r9, r9, #31
 8015c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c48:	d02b      	beq.n	8015ca2 <__lshift+0xbe>
 8015c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8015c4e:	468a      	mov	sl, r1
 8015c50:	2200      	movs	r2, #0
 8015c52:	6818      	ldr	r0, [r3, #0]
 8015c54:	fa00 f009 	lsl.w	r0, r0, r9
 8015c58:	4310      	orrs	r0, r2
 8015c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8015c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c62:	459c      	cmp	ip, r3
 8015c64:	fa22 f20e 	lsr.w	r2, r2, lr
 8015c68:	d8f3      	bhi.n	8015c52 <__lshift+0x6e>
 8015c6a:	ebac 0304 	sub.w	r3, ip, r4
 8015c6e:	3b15      	subs	r3, #21
 8015c70:	f023 0303 	bic.w	r3, r3, #3
 8015c74:	3304      	adds	r3, #4
 8015c76:	f104 0015 	add.w	r0, r4, #21
 8015c7a:	4584      	cmp	ip, r0
 8015c7c:	bf38      	it	cc
 8015c7e:	2304      	movcc	r3, #4
 8015c80:	50ca      	str	r2, [r1, r3]
 8015c82:	b10a      	cbz	r2, 8015c88 <__lshift+0xa4>
 8015c84:	f108 0602 	add.w	r6, r8, #2
 8015c88:	3e01      	subs	r6, #1
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	612e      	str	r6, [r5, #16]
 8015c8e:	4621      	mov	r1, r4
 8015c90:	f7ff fdd8 	bl	8015844 <_Bfree>
 8015c94:	4628      	mov	r0, r5
 8015c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	e7c5      	b.n	8015c2e <__lshift+0x4a>
 8015ca2:	3904      	subs	r1, #4
 8015ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ca8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015cac:	459c      	cmp	ip, r3
 8015cae:	d8f9      	bhi.n	8015ca4 <__lshift+0xc0>
 8015cb0:	e7ea      	b.n	8015c88 <__lshift+0xa4>
 8015cb2:	bf00      	nop
 8015cb4:	0801bb4c 	.word	0x0801bb4c
 8015cb8:	0801bb5d 	.word	0x0801bb5d

08015cbc <__mcmp>:
 8015cbc:	b530      	push	{r4, r5, lr}
 8015cbe:	6902      	ldr	r2, [r0, #16]
 8015cc0:	690c      	ldr	r4, [r1, #16]
 8015cc2:	1b12      	subs	r2, r2, r4
 8015cc4:	d10e      	bne.n	8015ce4 <__mcmp+0x28>
 8015cc6:	f100 0314 	add.w	r3, r0, #20
 8015cca:	3114      	adds	r1, #20
 8015ccc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015cd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015cd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015cd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015cdc:	42a5      	cmp	r5, r4
 8015cde:	d003      	beq.n	8015ce8 <__mcmp+0x2c>
 8015ce0:	d305      	bcc.n	8015cee <__mcmp+0x32>
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	4610      	mov	r0, r2
 8015ce6:	bd30      	pop	{r4, r5, pc}
 8015ce8:	4283      	cmp	r3, r0
 8015cea:	d3f3      	bcc.n	8015cd4 <__mcmp+0x18>
 8015cec:	e7fa      	b.n	8015ce4 <__mcmp+0x28>
 8015cee:	f04f 32ff 	mov.w	r2, #4294967295
 8015cf2:	e7f7      	b.n	8015ce4 <__mcmp+0x28>

08015cf4 <__mdiff>:
 8015cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	4606      	mov	r6, r0
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	4620      	mov	r0, r4
 8015d00:	4690      	mov	r8, r2
 8015d02:	f7ff ffdb 	bl	8015cbc <__mcmp>
 8015d06:	1e05      	subs	r5, r0, #0
 8015d08:	d110      	bne.n	8015d2c <__mdiff+0x38>
 8015d0a:	4629      	mov	r1, r5
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	f7ff fd59 	bl	80157c4 <_Balloc>
 8015d12:	b930      	cbnz	r0, 8015d22 <__mdiff+0x2e>
 8015d14:	4b3a      	ldr	r3, [pc, #232]	; (8015e00 <__mdiff+0x10c>)
 8015d16:	4602      	mov	r2, r0
 8015d18:	f240 2137 	movw	r1, #567	; 0x237
 8015d1c:	4839      	ldr	r0, [pc, #228]	; (8015e04 <__mdiff+0x110>)
 8015d1e:	f000 fb0b 	bl	8016338 <__assert_func>
 8015d22:	2301      	movs	r3, #1
 8015d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2c:	bfa4      	itt	ge
 8015d2e:	4643      	movge	r3, r8
 8015d30:	46a0      	movge	r8, r4
 8015d32:	4630      	mov	r0, r6
 8015d34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015d38:	bfa6      	itte	ge
 8015d3a:	461c      	movge	r4, r3
 8015d3c:	2500      	movge	r5, #0
 8015d3e:	2501      	movlt	r5, #1
 8015d40:	f7ff fd40 	bl	80157c4 <_Balloc>
 8015d44:	b920      	cbnz	r0, 8015d50 <__mdiff+0x5c>
 8015d46:	4b2e      	ldr	r3, [pc, #184]	; (8015e00 <__mdiff+0x10c>)
 8015d48:	4602      	mov	r2, r0
 8015d4a:	f240 2145 	movw	r1, #581	; 0x245
 8015d4e:	e7e5      	b.n	8015d1c <__mdiff+0x28>
 8015d50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015d54:	6926      	ldr	r6, [r4, #16]
 8015d56:	60c5      	str	r5, [r0, #12]
 8015d58:	f104 0914 	add.w	r9, r4, #20
 8015d5c:	f108 0514 	add.w	r5, r8, #20
 8015d60:	f100 0e14 	add.w	lr, r0, #20
 8015d64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015d68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015d6c:	f108 0210 	add.w	r2, r8, #16
 8015d70:	46f2      	mov	sl, lr
 8015d72:	2100      	movs	r1, #0
 8015d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015d7c:	fa11 f88b 	uxtah	r8, r1, fp
 8015d80:	b299      	uxth	r1, r3
 8015d82:	0c1b      	lsrs	r3, r3, #16
 8015d84:	eba8 0801 	sub.w	r8, r8, r1
 8015d88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015d8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015d90:	fa1f f888 	uxth.w	r8, r8
 8015d94:	1419      	asrs	r1, r3, #16
 8015d96:	454e      	cmp	r6, r9
 8015d98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015d9c:	f84a 3b04 	str.w	r3, [sl], #4
 8015da0:	d8e8      	bhi.n	8015d74 <__mdiff+0x80>
 8015da2:	1b33      	subs	r3, r6, r4
 8015da4:	3b15      	subs	r3, #21
 8015da6:	f023 0303 	bic.w	r3, r3, #3
 8015daa:	3304      	adds	r3, #4
 8015dac:	3415      	adds	r4, #21
 8015dae:	42a6      	cmp	r6, r4
 8015db0:	bf38      	it	cc
 8015db2:	2304      	movcc	r3, #4
 8015db4:	441d      	add	r5, r3
 8015db6:	4473      	add	r3, lr
 8015db8:	469e      	mov	lr, r3
 8015dba:	462e      	mov	r6, r5
 8015dbc:	4566      	cmp	r6, ip
 8015dbe:	d30e      	bcc.n	8015dde <__mdiff+0xea>
 8015dc0:	f10c 0203 	add.w	r2, ip, #3
 8015dc4:	1b52      	subs	r2, r2, r5
 8015dc6:	f022 0203 	bic.w	r2, r2, #3
 8015dca:	3d03      	subs	r5, #3
 8015dcc:	45ac      	cmp	ip, r5
 8015dce:	bf38      	it	cc
 8015dd0:	2200      	movcc	r2, #0
 8015dd2:	4413      	add	r3, r2
 8015dd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015dd8:	b17a      	cbz	r2, 8015dfa <__mdiff+0x106>
 8015dda:	6107      	str	r7, [r0, #16]
 8015ddc:	e7a4      	b.n	8015d28 <__mdiff+0x34>
 8015dde:	f856 8b04 	ldr.w	r8, [r6], #4
 8015de2:	fa11 f288 	uxtah	r2, r1, r8
 8015de6:	1414      	asrs	r4, r2, #16
 8015de8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015dec:	b292      	uxth	r2, r2
 8015dee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015df2:	f84e 2b04 	str.w	r2, [lr], #4
 8015df6:	1421      	asrs	r1, r4, #16
 8015df8:	e7e0      	b.n	8015dbc <__mdiff+0xc8>
 8015dfa:	3f01      	subs	r7, #1
 8015dfc:	e7ea      	b.n	8015dd4 <__mdiff+0xe0>
 8015dfe:	bf00      	nop
 8015e00:	0801bb4c 	.word	0x0801bb4c
 8015e04:	0801bb5d 	.word	0x0801bb5d

08015e08 <__d2b>:
 8015e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015e0c:	460f      	mov	r7, r1
 8015e0e:	2101      	movs	r1, #1
 8015e10:	ec59 8b10 	vmov	r8, r9, d0
 8015e14:	4616      	mov	r6, r2
 8015e16:	f7ff fcd5 	bl	80157c4 <_Balloc>
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	b930      	cbnz	r0, 8015e2c <__d2b+0x24>
 8015e1e:	4602      	mov	r2, r0
 8015e20:	4b24      	ldr	r3, [pc, #144]	; (8015eb4 <__d2b+0xac>)
 8015e22:	4825      	ldr	r0, [pc, #148]	; (8015eb8 <__d2b+0xb0>)
 8015e24:	f240 310f 	movw	r1, #783	; 0x30f
 8015e28:	f000 fa86 	bl	8016338 <__assert_func>
 8015e2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015e30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e34:	bb2d      	cbnz	r5, 8015e82 <__d2b+0x7a>
 8015e36:	9301      	str	r3, [sp, #4]
 8015e38:	f1b8 0300 	subs.w	r3, r8, #0
 8015e3c:	d026      	beq.n	8015e8c <__d2b+0x84>
 8015e3e:	4668      	mov	r0, sp
 8015e40:	9300      	str	r3, [sp, #0]
 8015e42:	f7ff fd87 	bl	8015954 <__lo0bits>
 8015e46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015e4a:	b1e8      	cbz	r0, 8015e88 <__d2b+0x80>
 8015e4c:	f1c0 0320 	rsb	r3, r0, #32
 8015e50:	fa02 f303 	lsl.w	r3, r2, r3
 8015e54:	430b      	orrs	r3, r1
 8015e56:	40c2      	lsrs	r2, r0
 8015e58:	6163      	str	r3, [r4, #20]
 8015e5a:	9201      	str	r2, [sp, #4]
 8015e5c:	9b01      	ldr	r3, [sp, #4]
 8015e5e:	61a3      	str	r3, [r4, #24]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	bf14      	ite	ne
 8015e64:	2202      	movne	r2, #2
 8015e66:	2201      	moveq	r2, #1
 8015e68:	6122      	str	r2, [r4, #16]
 8015e6a:	b1bd      	cbz	r5, 8015e9c <__d2b+0x94>
 8015e6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015e70:	4405      	add	r5, r0
 8015e72:	603d      	str	r5, [r7, #0]
 8015e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015e78:	6030      	str	r0, [r6, #0]
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	b003      	add	sp, #12
 8015e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e86:	e7d6      	b.n	8015e36 <__d2b+0x2e>
 8015e88:	6161      	str	r1, [r4, #20]
 8015e8a:	e7e7      	b.n	8015e5c <__d2b+0x54>
 8015e8c:	a801      	add	r0, sp, #4
 8015e8e:	f7ff fd61 	bl	8015954 <__lo0bits>
 8015e92:	9b01      	ldr	r3, [sp, #4]
 8015e94:	6163      	str	r3, [r4, #20]
 8015e96:	3020      	adds	r0, #32
 8015e98:	2201      	movs	r2, #1
 8015e9a:	e7e5      	b.n	8015e68 <__d2b+0x60>
 8015e9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ea0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015ea4:	6038      	str	r0, [r7, #0]
 8015ea6:	6918      	ldr	r0, [r3, #16]
 8015ea8:	f7ff fd34 	bl	8015914 <__hi0bits>
 8015eac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015eb0:	e7e2      	b.n	8015e78 <__d2b+0x70>
 8015eb2:	bf00      	nop
 8015eb4:	0801bb4c 	.word	0x0801bb4c
 8015eb8:	0801bb5d 	.word	0x0801bb5d

08015ebc <__ssputs_r>:
 8015ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec0:	688e      	ldr	r6, [r1, #8]
 8015ec2:	461f      	mov	r7, r3
 8015ec4:	42be      	cmp	r6, r7
 8015ec6:	680b      	ldr	r3, [r1, #0]
 8015ec8:	4682      	mov	sl, r0
 8015eca:	460c      	mov	r4, r1
 8015ecc:	4690      	mov	r8, r2
 8015ece:	d82c      	bhi.n	8015f2a <__ssputs_r+0x6e>
 8015ed0:	898a      	ldrh	r2, [r1, #12]
 8015ed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015ed6:	d026      	beq.n	8015f26 <__ssputs_r+0x6a>
 8015ed8:	6965      	ldr	r5, [r4, #20]
 8015eda:	6909      	ldr	r1, [r1, #16]
 8015edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ee0:	eba3 0901 	sub.w	r9, r3, r1
 8015ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ee8:	1c7b      	adds	r3, r7, #1
 8015eea:	444b      	add	r3, r9
 8015eec:	106d      	asrs	r5, r5, #1
 8015eee:	429d      	cmp	r5, r3
 8015ef0:	bf38      	it	cc
 8015ef2:	461d      	movcc	r5, r3
 8015ef4:	0553      	lsls	r3, r2, #21
 8015ef6:	d527      	bpl.n	8015f48 <__ssputs_r+0x8c>
 8015ef8:	4629      	mov	r1, r5
 8015efa:	f7ff fbd7 	bl	80156ac <_malloc_r>
 8015efe:	4606      	mov	r6, r0
 8015f00:	b360      	cbz	r0, 8015f5c <__ssputs_r+0xa0>
 8015f02:	6921      	ldr	r1, [r4, #16]
 8015f04:	464a      	mov	r2, r9
 8015f06:	f000 fa09 	bl	801631c <memcpy>
 8015f0a:	89a3      	ldrh	r3, [r4, #12]
 8015f0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f14:	81a3      	strh	r3, [r4, #12]
 8015f16:	6126      	str	r6, [r4, #16]
 8015f18:	6165      	str	r5, [r4, #20]
 8015f1a:	444e      	add	r6, r9
 8015f1c:	eba5 0509 	sub.w	r5, r5, r9
 8015f20:	6026      	str	r6, [r4, #0]
 8015f22:	60a5      	str	r5, [r4, #8]
 8015f24:	463e      	mov	r6, r7
 8015f26:	42be      	cmp	r6, r7
 8015f28:	d900      	bls.n	8015f2c <__ssputs_r+0x70>
 8015f2a:	463e      	mov	r6, r7
 8015f2c:	6820      	ldr	r0, [r4, #0]
 8015f2e:	4632      	mov	r2, r6
 8015f30:	4641      	mov	r1, r8
 8015f32:	f000 f9c9 	bl	80162c8 <memmove>
 8015f36:	68a3      	ldr	r3, [r4, #8]
 8015f38:	1b9b      	subs	r3, r3, r6
 8015f3a:	60a3      	str	r3, [r4, #8]
 8015f3c:	6823      	ldr	r3, [r4, #0]
 8015f3e:	4433      	add	r3, r6
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	2000      	movs	r0, #0
 8015f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f48:	462a      	mov	r2, r5
 8015f4a:	f000 fa3b 	bl	80163c4 <_realloc_r>
 8015f4e:	4606      	mov	r6, r0
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d1e0      	bne.n	8015f16 <__ssputs_r+0x5a>
 8015f54:	6921      	ldr	r1, [r4, #16]
 8015f56:	4650      	mov	r0, sl
 8015f58:	f7ff fb34 	bl	80155c4 <_free_r>
 8015f5c:	230c      	movs	r3, #12
 8015f5e:	f8ca 3000 	str.w	r3, [sl]
 8015f62:	89a3      	ldrh	r3, [r4, #12]
 8015f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f68:	81a3      	strh	r3, [r4, #12]
 8015f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f6e:	e7e9      	b.n	8015f44 <__ssputs_r+0x88>

08015f70 <_svfiprintf_r>:
 8015f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f74:	4698      	mov	r8, r3
 8015f76:	898b      	ldrh	r3, [r1, #12]
 8015f78:	061b      	lsls	r3, r3, #24
 8015f7a:	b09d      	sub	sp, #116	; 0x74
 8015f7c:	4607      	mov	r7, r0
 8015f7e:	460d      	mov	r5, r1
 8015f80:	4614      	mov	r4, r2
 8015f82:	d50e      	bpl.n	8015fa2 <_svfiprintf_r+0x32>
 8015f84:	690b      	ldr	r3, [r1, #16]
 8015f86:	b963      	cbnz	r3, 8015fa2 <_svfiprintf_r+0x32>
 8015f88:	2140      	movs	r1, #64	; 0x40
 8015f8a:	f7ff fb8f 	bl	80156ac <_malloc_r>
 8015f8e:	6028      	str	r0, [r5, #0]
 8015f90:	6128      	str	r0, [r5, #16]
 8015f92:	b920      	cbnz	r0, 8015f9e <_svfiprintf_r+0x2e>
 8015f94:	230c      	movs	r3, #12
 8015f96:	603b      	str	r3, [r7, #0]
 8015f98:	f04f 30ff 	mov.w	r0, #4294967295
 8015f9c:	e0d0      	b.n	8016140 <_svfiprintf_r+0x1d0>
 8015f9e:	2340      	movs	r3, #64	; 0x40
 8015fa0:	616b      	str	r3, [r5, #20]
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8015fa6:	2320      	movs	r3, #32
 8015fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fb0:	2330      	movs	r3, #48	; 0x30
 8015fb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016158 <_svfiprintf_r+0x1e8>
 8015fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015fba:	f04f 0901 	mov.w	r9, #1
 8015fbe:	4623      	mov	r3, r4
 8015fc0:	469a      	mov	sl, r3
 8015fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fc6:	b10a      	cbz	r2, 8015fcc <_svfiprintf_r+0x5c>
 8015fc8:	2a25      	cmp	r2, #37	; 0x25
 8015fca:	d1f9      	bne.n	8015fc0 <_svfiprintf_r+0x50>
 8015fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8015fd0:	d00b      	beq.n	8015fea <_svfiprintf_r+0x7a>
 8015fd2:	465b      	mov	r3, fp
 8015fd4:	4622      	mov	r2, r4
 8015fd6:	4629      	mov	r1, r5
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f7ff ff6f 	bl	8015ebc <__ssputs_r>
 8015fde:	3001      	adds	r0, #1
 8015fe0:	f000 80a9 	beq.w	8016136 <_svfiprintf_r+0x1c6>
 8015fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fe6:	445a      	add	r2, fp
 8015fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8015fea:	f89a 3000 	ldrb.w	r3, [sl]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f000 80a1 	beq.w	8016136 <_svfiprintf_r+0x1c6>
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8015ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ffe:	f10a 0a01 	add.w	sl, sl, #1
 8016002:	9304      	str	r3, [sp, #16]
 8016004:	9307      	str	r3, [sp, #28]
 8016006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801600a:	931a      	str	r3, [sp, #104]	; 0x68
 801600c:	4654      	mov	r4, sl
 801600e:	2205      	movs	r2, #5
 8016010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016014:	4850      	ldr	r0, [pc, #320]	; (8016158 <_svfiprintf_r+0x1e8>)
 8016016:	f7ea f903 	bl	8000220 <memchr>
 801601a:	9a04      	ldr	r2, [sp, #16]
 801601c:	b9d8      	cbnz	r0, 8016056 <_svfiprintf_r+0xe6>
 801601e:	06d0      	lsls	r0, r2, #27
 8016020:	bf44      	itt	mi
 8016022:	2320      	movmi	r3, #32
 8016024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016028:	0711      	lsls	r1, r2, #28
 801602a:	bf44      	itt	mi
 801602c:	232b      	movmi	r3, #43	; 0x2b
 801602e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016032:	f89a 3000 	ldrb.w	r3, [sl]
 8016036:	2b2a      	cmp	r3, #42	; 0x2a
 8016038:	d015      	beq.n	8016066 <_svfiprintf_r+0xf6>
 801603a:	9a07      	ldr	r2, [sp, #28]
 801603c:	4654      	mov	r4, sl
 801603e:	2000      	movs	r0, #0
 8016040:	f04f 0c0a 	mov.w	ip, #10
 8016044:	4621      	mov	r1, r4
 8016046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801604a:	3b30      	subs	r3, #48	; 0x30
 801604c:	2b09      	cmp	r3, #9
 801604e:	d94d      	bls.n	80160ec <_svfiprintf_r+0x17c>
 8016050:	b1b0      	cbz	r0, 8016080 <_svfiprintf_r+0x110>
 8016052:	9207      	str	r2, [sp, #28]
 8016054:	e014      	b.n	8016080 <_svfiprintf_r+0x110>
 8016056:	eba0 0308 	sub.w	r3, r0, r8
 801605a:	fa09 f303 	lsl.w	r3, r9, r3
 801605e:	4313      	orrs	r3, r2
 8016060:	9304      	str	r3, [sp, #16]
 8016062:	46a2      	mov	sl, r4
 8016064:	e7d2      	b.n	801600c <_svfiprintf_r+0x9c>
 8016066:	9b03      	ldr	r3, [sp, #12]
 8016068:	1d19      	adds	r1, r3, #4
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	9103      	str	r1, [sp, #12]
 801606e:	2b00      	cmp	r3, #0
 8016070:	bfbb      	ittet	lt
 8016072:	425b      	neglt	r3, r3
 8016074:	f042 0202 	orrlt.w	r2, r2, #2
 8016078:	9307      	strge	r3, [sp, #28]
 801607a:	9307      	strlt	r3, [sp, #28]
 801607c:	bfb8      	it	lt
 801607e:	9204      	strlt	r2, [sp, #16]
 8016080:	7823      	ldrb	r3, [r4, #0]
 8016082:	2b2e      	cmp	r3, #46	; 0x2e
 8016084:	d10c      	bne.n	80160a0 <_svfiprintf_r+0x130>
 8016086:	7863      	ldrb	r3, [r4, #1]
 8016088:	2b2a      	cmp	r3, #42	; 0x2a
 801608a:	d134      	bne.n	80160f6 <_svfiprintf_r+0x186>
 801608c:	9b03      	ldr	r3, [sp, #12]
 801608e:	1d1a      	adds	r2, r3, #4
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	9203      	str	r2, [sp, #12]
 8016094:	2b00      	cmp	r3, #0
 8016096:	bfb8      	it	lt
 8016098:	f04f 33ff 	movlt.w	r3, #4294967295
 801609c:	3402      	adds	r4, #2
 801609e:	9305      	str	r3, [sp, #20]
 80160a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016168 <_svfiprintf_r+0x1f8>
 80160a4:	7821      	ldrb	r1, [r4, #0]
 80160a6:	2203      	movs	r2, #3
 80160a8:	4650      	mov	r0, sl
 80160aa:	f7ea f8b9 	bl	8000220 <memchr>
 80160ae:	b138      	cbz	r0, 80160c0 <_svfiprintf_r+0x150>
 80160b0:	9b04      	ldr	r3, [sp, #16]
 80160b2:	eba0 000a 	sub.w	r0, r0, sl
 80160b6:	2240      	movs	r2, #64	; 0x40
 80160b8:	4082      	lsls	r2, r0
 80160ba:	4313      	orrs	r3, r2
 80160bc:	3401      	adds	r4, #1
 80160be:	9304      	str	r3, [sp, #16]
 80160c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160c4:	4825      	ldr	r0, [pc, #148]	; (801615c <_svfiprintf_r+0x1ec>)
 80160c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80160ca:	2206      	movs	r2, #6
 80160cc:	f7ea f8a8 	bl	8000220 <memchr>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d038      	beq.n	8016146 <_svfiprintf_r+0x1d6>
 80160d4:	4b22      	ldr	r3, [pc, #136]	; (8016160 <_svfiprintf_r+0x1f0>)
 80160d6:	bb1b      	cbnz	r3, 8016120 <_svfiprintf_r+0x1b0>
 80160d8:	9b03      	ldr	r3, [sp, #12]
 80160da:	3307      	adds	r3, #7
 80160dc:	f023 0307 	bic.w	r3, r3, #7
 80160e0:	3308      	adds	r3, #8
 80160e2:	9303      	str	r3, [sp, #12]
 80160e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160e6:	4433      	add	r3, r6
 80160e8:	9309      	str	r3, [sp, #36]	; 0x24
 80160ea:	e768      	b.n	8015fbe <_svfiprintf_r+0x4e>
 80160ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80160f0:	460c      	mov	r4, r1
 80160f2:	2001      	movs	r0, #1
 80160f4:	e7a6      	b.n	8016044 <_svfiprintf_r+0xd4>
 80160f6:	2300      	movs	r3, #0
 80160f8:	3401      	adds	r4, #1
 80160fa:	9305      	str	r3, [sp, #20]
 80160fc:	4619      	mov	r1, r3
 80160fe:	f04f 0c0a 	mov.w	ip, #10
 8016102:	4620      	mov	r0, r4
 8016104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016108:	3a30      	subs	r2, #48	; 0x30
 801610a:	2a09      	cmp	r2, #9
 801610c:	d903      	bls.n	8016116 <_svfiprintf_r+0x1a6>
 801610e:	2b00      	cmp	r3, #0
 8016110:	d0c6      	beq.n	80160a0 <_svfiprintf_r+0x130>
 8016112:	9105      	str	r1, [sp, #20]
 8016114:	e7c4      	b.n	80160a0 <_svfiprintf_r+0x130>
 8016116:	fb0c 2101 	mla	r1, ip, r1, r2
 801611a:	4604      	mov	r4, r0
 801611c:	2301      	movs	r3, #1
 801611e:	e7f0      	b.n	8016102 <_svfiprintf_r+0x192>
 8016120:	ab03      	add	r3, sp, #12
 8016122:	9300      	str	r3, [sp, #0]
 8016124:	462a      	mov	r2, r5
 8016126:	4b0f      	ldr	r3, [pc, #60]	; (8016164 <_svfiprintf_r+0x1f4>)
 8016128:	a904      	add	r1, sp, #16
 801612a:	4638      	mov	r0, r7
 801612c:	f7fd fe64 	bl	8013df8 <_printf_float>
 8016130:	1c42      	adds	r2, r0, #1
 8016132:	4606      	mov	r6, r0
 8016134:	d1d6      	bne.n	80160e4 <_svfiprintf_r+0x174>
 8016136:	89ab      	ldrh	r3, [r5, #12]
 8016138:	065b      	lsls	r3, r3, #25
 801613a:	f53f af2d 	bmi.w	8015f98 <_svfiprintf_r+0x28>
 801613e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016140:	b01d      	add	sp, #116	; 0x74
 8016142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016146:	ab03      	add	r3, sp, #12
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	462a      	mov	r2, r5
 801614c:	4b05      	ldr	r3, [pc, #20]	; (8016164 <_svfiprintf_r+0x1f4>)
 801614e:	a904      	add	r1, sp, #16
 8016150:	4638      	mov	r0, r7
 8016152:	f7fe f8f5 	bl	8014340 <_printf_i>
 8016156:	e7eb      	b.n	8016130 <_svfiprintf_r+0x1c0>
 8016158:	0801bcb4 	.word	0x0801bcb4
 801615c:	0801bcbe 	.word	0x0801bcbe
 8016160:	08013df9 	.word	0x08013df9
 8016164:	08015ebd 	.word	0x08015ebd
 8016168:	0801bcba 	.word	0x0801bcba

0801616c <__sflush_r>:
 801616c:	898a      	ldrh	r2, [r1, #12]
 801616e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016172:	4605      	mov	r5, r0
 8016174:	0710      	lsls	r0, r2, #28
 8016176:	460c      	mov	r4, r1
 8016178:	d458      	bmi.n	801622c <__sflush_r+0xc0>
 801617a:	684b      	ldr	r3, [r1, #4]
 801617c:	2b00      	cmp	r3, #0
 801617e:	dc05      	bgt.n	801618c <__sflush_r+0x20>
 8016180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016182:	2b00      	cmp	r3, #0
 8016184:	dc02      	bgt.n	801618c <__sflush_r+0x20>
 8016186:	2000      	movs	r0, #0
 8016188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801618c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801618e:	2e00      	cmp	r6, #0
 8016190:	d0f9      	beq.n	8016186 <__sflush_r+0x1a>
 8016192:	2300      	movs	r3, #0
 8016194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016198:	682f      	ldr	r7, [r5, #0]
 801619a:	6a21      	ldr	r1, [r4, #32]
 801619c:	602b      	str	r3, [r5, #0]
 801619e:	d032      	beq.n	8016206 <__sflush_r+0x9a>
 80161a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161a2:	89a3      	ldrh	r3, [r4, #12]
 80161a4:	075a      	lsls	r2, r3, #29
 80161a6:	d505      	bpl.n	80161b4 <__sflush_r+0x48>
 80161a8:	6863      	ldr	r3, [r4, #4]
 80161aa:	1ac0      	subs	r0, r0, r3
 80161ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161ae:	b10b      	cbz	r3, 80161b4 <__sflush_r+0x48>
 80161b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161b2:	1ac0      	subs	r0, r0, r3
 80161b4:	2300      	movs	r3, #0
 80161b6:	4602      	mov	r2, r0
 80161b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161ba:	6a21      	ldr	r1, [r4, #32]
 80161bc:	4628      	mov	r0, r5
 80161be:	47b0      	blx	r6
 80161c0:	1c43      	adds	r3, r0, #1
 80161c2:	89a3      	ldrh	r3, [r4, #12]
 80161c4:	d106      	bne.n	80161d4 <__sflush_r+0x68>
 80161c6:	6829      	ldr	r1, [r5, #0]
 80161c8:	291d      	cmp	r1, #29
 80161ca:	d82b      	bhi.n	8016224 <__sflush_r+0xb8>
 80161cc:	4a29      	ldr	r2, [pc, #164]	; (8016274 <__sflush_r+0x108>)
 80161ce:	410a      	asrs	r2, r1
 80161d0:	07d6      	lsls	r6, r2, #31
 80161d2:	d427      	bmi.n	8016224 <__sflush_r+0xb8>
 80161d4:	2200      	movs	r2, #0
 80161d6:	6062      	str	r2, [r4, #4]
 80161d8:	04d9      	lsls	r1, r3, #19
 80161da:	6922      	ldr	r2, [r4, #16]
 80161dc:	6022      	str	r2, [r4, #0]
 80161de:	d504      	bpl.n	80161ea <__sflush_r+0x7e>
 80161e0:	1c42      	adds	r2, r0, #1
 80161e2:	d101      	bne.n	80161e8 <__sflush_r+0x7c>
 80161e4:	682b      	ldr	r3, [r5, #0]
 80161e6:	b903      	cbnz	r3, 80161ea <__sflush_r+0x7e>
 80161e8:	6560      	str	r0, [r4, #84]	; 0x54
 80161ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161ec:	602f      	str	r7, [r5, #0]
 80161ee:	2900      	cmp	r1, #0
 80161f0:	d0c9      	beq.n	8016186 <__sflush_r+0x1a>
 80161f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161f6:	4299      	cmp	r1, r3
 80161f8:	d002      	beq.n	8016200 <__sflush_r+0x94>
 80161fa:	4628      	mov	r0, r5
 80161fc:	f7ff f9e2 	bl	80155c4 <_free_r>
 8016200:	2000      	movs	r0, #0
 8016202:	6360      	str	r0, [r4, #52]	; 0x34
 8016204:	e7c0      	b.n	8016188 <__sflush_r+0x1c>
 8016206:	2301      	movs	r3, #1
 8016208:	4628      	mov	r0, r5
 801620a:	47b0      	blx	r6
 801620c:	1c41      	adds	r1, r0, #1
 801620e:	d1c8      	bne.n	80161a2 <__sflush_r+0x36>
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d0c5      	beq.n	80161a2 <__sflush_r+0x36>
 8016216:	2b1d      	cmp	r3, #29
 8016218:	d001      	beq.n	801621e <__sflush_r+0xb2>
 801621a:	2b16      	cmp	r3, #22
 801621c:	d101      	bne.n	8016222 <__sflush_r+0xb6>
 801621e:	602f      	str	r7, [r5, #0]
 8016220:	e7b1      	b.n	8016186 <__sflush_r+0x1a>
 8016222:	89a3      	ldrh	r3, [r4, #12]
 8016224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016228:	81a3      	strh	r3, [r4, #12]
 801622a:	e7ad      	b.n	8016188 <__sflush_r+0x1c>
 801622c:	690f      	ldr	r7, [r1, #16]
 801622e:	2f00      	cmp	r7, #0
 8016230:	d0a9      	beq.n	8016186 <__sflush_r+0x1a>
 8016232:	0793      	lsls	r3, r2, #30
 8016234:	680e      	ldr	r6, [r1, #0]
 8016236:	bf08      	it	eq
 8016238:	694b      	ldreq	r3, [r1, #20]
 801623a:	600f      	str	r7, [r1, #0]
 801623c:	bf18      	it	ne
 801623e:	2300      	movne	r3, #0
 8016240:	eba6 0807 	sub.w	r8, r6, r7
 8016244:	608b      	str	r3, [r1, #8]
 8016246:	f1b8 0f00 	cmp.w	r8, #0
 801624a:	dd9c      	ble.n	8016186 <__sflush_r+0x1a>
 801624c:	6a21      	ldr	r1, [r4, #32]
 801624e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016250:	4643      	mov	r3, r8
 8016252:	463a      	mov	r2, r7
 8016254:	4628      	mov	r0, r5
 8016256:	47b0      	blx	r6
 8016258:	2800      	cmp	r0, #0
 801625a:	dc06      	bgt.n	801626a <__sflush_r+0xfe>
 801625c:	89a3      	ldrh	r3, [r4, #12]
 801625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016262:	81a3      	strh	r3, [r4, #12]
 8016264:	f04f 30ff 	mov.w	r0, #4294967295
 8016268:	e78e      	b.n	8016188 <__sflush_r+0x1c>
 801626a:	4407      	add	r7, r0
 801626c:	eba8 0800 	sub.w	r8, r8, r0
 8016270:	e7e9      	b.n	8016246 <__sflush_r+0xda>
 8016272:	bf00      	nop
 8016274:	dfbffffe 	.word	0xdfbffffe

08016278 <_fflush_r>:
 8016278:	b538      	push	{r3, r4, r5, lr}
 801627a:	690b      	ldr	r3, [r1, #16]
 801627c:	4605      	mov	r5, r0
 801627e:	460c      	mov	r4, r1
 8016280:	b913      	cbnz	r3, 8016288 <_fflush_r+0x10>
 8016282:	2500      	movs	r5, #0
 8016284:	4628      	mov	r0, r5
 8016286:	bd38      	pop	{r3, r4, r5, pc}
 8016288:	b118      	cbz	r0, 8016292 <_fflush_r+0x1a>
 801628a:	6a03      	ldr	r3, [r0, #32]
 801628c:	b90b      	cbnz	r3, 8016292 <_fflush_r+0x1a>
 801628e:	f7fe fa05 	bl	801469c <__sinit>
 8016292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d0f3      	beq.n	8016282 <_fflush_r+0xa>
 801629a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801629c:	07d0      	lsls	r0, r2, #31
 801629e:	d404      	bmi.n	80162aa <_fflush_r+0x32>
 80162a0:	0599      	lsls	r1, r3, #22
 80162a2:	d402      	bmi.n	80162aa <_fflush_r+0x32>
 80162a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162a6:	f7fe fb10 	bl	80148ca <__retarget_lock_acquire_recursive>
 80162aa:	4628      	mov	r0, r5
 80162ac:	4621      	mov	r1, r4
 80162ae:	f7ff ff5d 	bl	801616c <__sflush_r>
 80162b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162b4:	07da      	lsls	r2, r3, #31
 80162b6:	4605      	mov	r5, r0
 80162b8:	d4e4      	bmi.n	8016284 <_fflush_r+0xc>
 80162ba:	89a3      	ldrh	r3, [r4, #12]
 80162bc:	059b      	lsls	r3, r3, #22
 80162be:	d4e1      	bmi.n	8016284 <_fflush_r+0xc>
 80162c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162c2:	f7fe fb03 	bl	80148cc <__retarget_lock_release_recursive>
 80162c6:	e7dd      	b.n	8016284 <_fflush_r+0xc>

080162c8 <memmove>:
 80162c8:	4288      	cmp	r0, r1
 80162ca:	b510      	push	{r4, lr}
 80162cc:	eb01 0402 	add.w	r4, r1, r2
 80162d0:	d902      	bls.n	80162d8 <memmove+0x10>
 80162d2:	4284      	cmp	r4, r0
 80162d4:	4623      	mov	r3, r4
 80162d6:	d807      	bhi.n	80162e8 <memmove+0x20>
 80162d8:	1e43      	subs	r3, r0, #1
 80162da:	42a1      	cmp	r1, r4
 80162dc:	d008      	beq.n	80162f0 <memmove+0x28>
 80162de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80162e6:	e7f8      	b.n	80162da <memmove+0x12>
 80162e8:	4402      	add	r2, r0
 80162ea:	4601      	mov	r1, r0
 80162ec:	428a      	cmp	r2, r1
 80162ee:	d100      	bne.n	80162f2 <memmove+0x2a>
 80162f0:	bd10      	pop	{r4, pc}
 80162f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80162f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80162fa:	e7f7      	b.n	80162ec <memmove+0x24>

080162fc <_sbrk_r>:
 80162fc:	b538      	push	{r3, r4, r5, lr}
 80162fe:	4d06      	ldr	r5, [pc, #24]	; (8016318 <_sbrk_r+0x1c>)
 8016300:	2300      	movs	r3, #0
 8016302:	4604      	mov	r4, r0
 8016304:	4608      	mov	r0, r1
 8016306:	602b      	str	r3, [r5, #0]
 8016308:	f7ee fa50 	bl	80047ac <_sbrk>
 801630c:	1c43      	adds	r3, r0, #1
 801630e:	d102      	bne.n	8016316 <_sbrk_r+0x1a>
 8016310:	682b      	ldr	r3, [r5, #0]
 8016312:	b103      	cbz	r3, 8016316 <_sbrk_r+0x1a>
 8016314:	6023      	str	r3, [r4, #0]
 8016316:	bd38      	pop	{r3, r4, r5, pc}
 8016318:	20002e30 	.word	0x20002e30

0801631c <memcpy>:
 801631c:	440a      	add	r2, r1
 801631e:	4291      	cmp	r1, r2
 8016320:	f100 33ff 	add.w	r3, r0, #4294967295
 8016324:	d100      	bne.n	8016328 <memcpy+0xc>
 8016326:	4770      	bx	lr
 8016328:	b510      	push	{r4, lr}
 801632a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801632e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016332:	4291      	cmp	r1, r2
 8016334:	d1f9      	bne.n	801632a <memcpy+0xe>
 8016336:	bd10      	pop	{r4, pc}

08016338 <__assert_func>:
 8016338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801633a:	4614      	mov	r4, r2
 801633c:	461a      	mov	r2, r3
 801633e:	4b09      	ldr	r3, [pc, #36]	; (8016364 <__assert_func+0x2c>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	4605      	mov	r5, r0
 8016344:	68d8      	ldr	r0, [r3, #12]
 8016346:	b14c      	cbz	r4, 801635c <__assert_func+0x24>
 8016348:	4b07      	ldr	r3, [pc, #28]	; (8016368 <__assert_func+0x30>)
 801634a:	9100      	str	r1, [sp, #0]
 801634c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016350:	4906      	ldr	r1, [pc, #24]	; (801636c <__assert_func+0x34>)
 8016352:	462b      	mov	r3, r5
 8016354:	f000 f872 	bl	801643c <fiprintf>
 8016358:	f000 f882 	bl	8016460 <abort>
 801635c:	4b04      	ldr	r3, [pc, #16]	; (8016370 <__assert_func+0x38>)
 801635e:	461c      	mov	r4, r3
 8016360:	e7f3      	b.n	801634a <__assert_func+0x12>
 8016362:	bf00      	nop
 8016364:	20000374 	.word	0x20000374
 8016368:	0801bccf 	.word	0x0801bccf
 801636c:	0801bcdc 	.word	0x0801bcdc
 8016370:	0801bd0a 	.word	0x0801bd0a

08016374 <_calloc_r>:
 8016374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016376:	fba1 2402 	umull	r2, r4, r1, r2
 801637a:	b94c      	cbnz	r4, 8016390 <_calloc_r+0x1c>
 801637c:	4611      	mov	r1, r2
 801637e:	9201      	str	r2, [sp, #4]
 8016380:	f7ff f994 	bl	80156ac <_malloc_r>
 8016384:	9a01      	ldr	r2, [sp, #4]
 8016386:	4605      	mov	r5, r0
 8016388:	b930      	cbnz	r0, 8016398 <_calloc_r+0x24>
 801638a:	4628      	mov	r0, r5
 801638c:	b003      	add	sp, #12
 801638e:	bd30      	pop	{r4, r5, pc}
 8016390:	220c      	movs	r2, #12
 8016392:	6002      	str	r2, [r0, #0]
 8016394:	2500      	movs	r5, #0
 8016396:	e7f8      	b.n	801638a <_calloc_r+0x16>
 8016398:	4621      	mov	r1, r4
 801639a:	f7fe fa18 	bl	80147ce <memset>
 801639e:	e7f4      	b.n	801638a <_calloc_r+0x16>

080163a0 <__ascii_mbtowc>:
 80163a0:	b082      	sub	sp, #8
 80163a2:	b901      	cbnz	r1, 80163a6 <__ascii_mbtowc+0x6>
 80163a4:	a901      	add	r1, sp, #4
 80163a6:	b142      	cbz	r2, 80163ba <__ascii_mbtowc+0x1a>
 80163a8:	b14b      	cbz	r3, 80163be <__ascii_mbtowc+0x1e>
 80163aa:	7813      	ldrb	r3, [r2, #0]
 80163ac:	600b      	str	r3, [r1, #0]
 80163ae:	7812      	ldrb	r2, [r2, #0]
 80163b0:	1e10      	subs	r0, r2, #0
 80163b2:	bf18      	it	ne
 80163b4:	2001      	movne	r0, #1
 80163b6:	b002      	add	sp, #8
 80163b8:	4770      	bx	lr
 80163ba:	4610      	mov	r0, r2
 80163bc:	e7fb      	b.n	80163b6 <__ascii_mbtowc+0x16>
 80163be:	f06f 0001 	mvn.w	r0, #1
 80163c2:	e7f8      	b.n	80163b6 <__ascii_mbtowc+0x16>

080163c4 <_realloc_r>:
 80163c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c8:	4680      	mov	r8, r0
 80163ca:	4614      	mov	r4, r2
 80163cc:	460e      	mov	r6, r1
 80163ce:	b921      	cbnz	r1, 80163da <_realloc_r+0x16>
 80163d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	4611      	mov	r1, r2
 80163d6:	f7ff b969 	b.w	80156ac <_malloc_r>
 80163da:	b92a      	cbnz	r2, 80163e8 <_realloc_r+0x24>
 80163dc:	f7ff f8f2 	bl	80155c4 <_free_r>
 80163e0:	4625      	mov	r5, r4
 80163e2:	4628      	mov	r0, r5
 80163e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163e8:	f000 f841 	bl	801646e <_malloc_usable_size_r>
 80163ec:	4284      	cmp	r4, r0
 80163ee:	4607      	mov	r7, r0
 80163f0:	d802      	bhi.n	80163f8 <_realloc_r+0x34>
 80163f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80163f6:	d812      	bhi.n	801641e <_realloc_r+0x5a>
 80163f8:	4621      	mov	r1, r4
 80163fa:	4640      	mov	r0, r8
 80163fc:	f7ff f956 	bl	80156ac <_malloc_r>
 8016400:	4605      	mov	r5, r0
 8016402:	2800      	cmp	r0, #0
 8016404:	d0ed      	beq.n	80163e2 <_realloc_r+0x1e>
 8016406:	42bc      	cmp	r4, r7
 8016408:	4622      	mov	r2, r4
 801640a:	4631      	mov	r1, r6
 801640c:	bf28      	it	cs
 801640e:	463a      	movcs	r2, r7
 8016410:	f7ff ff84 	bl	801631c <memcpy>
 8016414:	4631      	mov	r1, r6
 8016416:	4640      	mov	r0, r8
 8016418:	f7ff f8d4 	bl	80155c4 <_free_r>
 801641c:	e7e1      	b.n	80163e2 <_realloc_r+0x1e>
 801641e:	4635      	mov	r5, r6
 8016420:	e7df      	b.n	80163e2 <_realloc_r+0x1e>

08016422 <__ascii_wctomb>:
 8016422:	b149      	cbz	r1, 8016438 <__ascii_wctomb+0x16>
 8016424:	2aff      	cmp	r2, #255	; 0xff
 8016426:	bf85      	ittet	hi
 8016428:	238a      	movhi	r3, #138	; 0x8a
 801642a:	6003      	strhi	r3, [r0, #0]
 801642c:	700a      	strbls	r2, [r1, #0]
 801642e:	f04f 30ff 	movhi.w	r0, #4294967295
 8016432:	bf98      	it	ls
 8016434:	2001      	movls	r0, #1
 8016436:	4770      	bx	lr
 8016438:	4608      	mov	r0, r1
 801643a:	4770      	bx	lr

0801643c <fiprintf>:
 801643c:	b40e      	push	{r1, r2, r3}
 801643e:	b503      	push	{r0, r1, lr}
 8016440:	4601      	mov	r1, r0
 8016442:	ab03      	add	r3, sp, #12
 8016444:	4805      	ldr	r0, [pc, #20]	; (801645c <fiprintf+0x20>)
 8016446:	f853 2b04 	ldr.w	r2, [r3], #4
 801644a:	6800      	ldr	r0, [r0, #0]
 801644c:	9301      	str	r3, [sp, #4]
 801644e:	f000 f83f 	bl	80164d0 <_vfiprintf_r>
 8016452:	b002      	add	sp, #8
 8016454:	f85d eb04 	ldr.w	lr, [sp], #4
 8016458:	b003      	add	sp, #12
 801645a:	4770      	bx	lr
 801645c:	20000374 	.word	0x20000374

08016460 <abort>:
 8016460:	b508      	push	{r3, lr}
 8016462:	2006      	movs	r0, #6
 8016464:	f000 fa0c 	bl	8016880 <raise>
 8016468:	2001      	movs	r0, #1
 801646a:	f7ee f927 	bl	80046bc <_exit>

0801646e <_malloc_usable_size_r>:
 801646e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016472:	1f18      	subs	r0, r3, #4
 8016474:	2b00      	cmp	r3, #0
 8016476:	bfbc      	itt	lt
 8016478:	580b      	ldrlt	r3, [r1, r0]
 801647a:	18c0      	addlt	r0, r0, r3
 801647c:	4770      	bx	lr

0801647e <__sfputc_r>:
 801647e:	6893      	ldr	r3, [r2, #8]
 8016480:	3b01      	subs	r3, #1
 8016482:	2b00      	cmp	r3, #0
 8016484:	b410      	push	{r4}
 8016486:	6093      	str	r3, [r2, #8]
 8016488:	da08      	bge.n	801649c <__sfputc_r+0x1e>
 801648a:	6994      	ldr	r4, [r2, #24]
 801648c:	42a3      	cmp	r3, r4
 801648e:	db01      	blt.n	8016494 <__sfputc_r+0x16>
 8016490:	290a      	cmp	r1, #10
 8016492:	d103      	bne.n	801649c <__sfputc_r+0x1e>
 8016494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016498:	f000 b934 	b.w	8016704 <__swbuf_r>
 801649c:	6813      	ldr	r3, [r2, #0]
 801649e:	1c58      	adds	r0, r3, #1
 80164a0:	6010      	str	r0, [r2, #0]
 80164a2:	7019      	strb	r1, [r3, #0]
 80164a4:	4608      	mov	r0, r1
 80164a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164aa:	4770      	bx	lr

080164ac <__sfputs_r>:
 80164ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ae:	4606      	mov	r6, r0
 80164b0:	460f      	mov	r7, r1
 80164b2:	4614      	mov	r4, r2
 80164b4:	18d5      	adds	r5, r2, r3
 80164b6:	42ac      	cmp	r4, r5
 80164b8:	d101      	bne.n	80164be <__sfputs_r+0x12>
 80164ba:	2000      	movs	r0, #0
 80164bc:	e007      	b.n	80164ce <__sfputs_r+0x22>
 80164be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c2:	463a      	mov	r2, r7
 80164c4:	4630      	mov	r0, r6
 80164c6:	f7ff ffda 	bl	801647e <__sfputc_r>
 80164ca:	1c43      	adds	r3, r0, #1
 80164cc:	d1f3      	bne.n	80164b6 <__sfputs_r+0xa>
 80164ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080164d0 <_vfiprintf_r>:
 80164d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d4:	460d      	mov	r5, r1
 80164d6:	b09d      	sub	sp, #116	; 0x74
 80164d8:	4614      	mov	r4, r2
 80164da:	4698      	mov	r8, r3
 80164dc:	4606      	mov	r6, r0
 80164de:	b118      	cbz	r0, 80164e8 <_vfiprintf_r+0x18>
 80164e0:	6a03      	ldr	r3, [r0, #32]
 80164e2:	b90b      	cbnz	r3, 80164e8 <_vfiprintf_r+0x18>
 80164e4:	f7fe f8da 	bl	801469c <__sinit>
 80164e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164ea:	07d9      	lsls	r1, r3, #31
 80164ec:	d405      	bmi.n	80164fa <_vfiprintf_r+0x2a>
 80164ee:	89ab      	ldrh	r3, [r5, #12]
 80164f0:	059a      	lsls	r2, r3, #22
 80164f2:	d402      	bmi.n	80164fa <_vfiprintf_r+0x2a>
 80164f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80164f6:	f7fe f9e8 	bl	80148ca <__retarget_lock_acquire_recursive>
 80164fa:	89ab      	ldrh	r3, [r5, #12]
 80164fc:	071b      	lsls	r3, r3, #28
 80164fe:	d501      	bpl.n	8016504 <_vfiprintf_r+0x34>
 8016500:	692b      	ldr	r3, [r5, #16]
 8016502:	b99b      	cbnz	r3, 801652c <_vfiprintf_r+0x5c>
 8016504:	4629      	mov	r1, r5
 8016506:	4630      	mov	r0, r6
 8016508:	f000 f93a 	bl	8016780 <__swsetup_r>
 801650c:	b170      	cbz	r0, 801652c <_vfiprintf_r+0x5c>
 801650e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016510:	07dc      	lsls	r4, r3, #31
 8016512:	d504      	bpl.n	801651e <_vfiprintf_r+0x4e>
 8016514:	f04f 30ff 	mov.w	r0, #4294967295
 8016518:	b01d      	add	sp, #116	; 0x74
 801651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651e:	89ab      	ldrh	r3, [r5, #12]
 8016520:	0598      	lsls	r0, r3, #22
 8016522:	d4f7      	bmi.n	8016514 <_vfiprintf_r+0x44>
 8016524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016526:	f7fe f9d1 	bl	80148cc <__retarget_lock_release_recursive>
 801652a:	e7f3      	b.n	8016514 <_vfiprintf_r+0x44>
 801652c:	2300      	movs	r3, #0
 801652e:	9309      	str	r3, [sp, #36]	; 0x24
 8016530:	2320      	movs	r3, #32
 8016532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016536:	f8cd 800c 	str.w	r8, [sp, #12]
 801653a:	2330      	movs	r3, #48	; 0x30
 801653c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80166f0 <_vfiprintf_r+0x220>
 8016540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016544:	f04f 0901 	mov.w	r9, #1
 8016548:	4623      	mov	r3, r4
 801654a:	469a      	mov	sl, r3
 801654c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016550:	b10a      	cbz	r2, 8016556 <_vfiprintf_r+0x86>
 8016552:	2a25      	cmp	r2, #37	; 0x25
 8016554:	d1f9      	bne.n	801654a <_vfiprintf_r+0x7a>
 8016556:	ebba 0b04 	subs.w	fp, sl, r4
 801655a:	d00b      	beq.n	8016574 <_vfiprintf_r+0xa4>
 801655c:	465b      	mov	r3, fp
 801655e:	4622      	mov	r2, r4
 8016560:	4629      	mov	r1, r5
 8016562:	4630      	mov	r0, r6
 8016564:	f7ff ffa2 	bl	80164ac <__sfputs_r>
 8016568:	3001      	adds	r0, #1
 801656a:	f000 80a9 	beq.w	80166c0 <_vfiprintf_r+0x1f0>
 801656e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016570:	445a      	add	r2, fp
 8016572:	9209      	str	r2, [sp, #36]	; 0x24
 8016574:	f89a 3000 	ldrb.w	r3, [sl]
 8016578:	2b00      	cmp	r3, #0
 801657a:	f000 80a1 	beq.w	80166c0 <_vfiprintf_r+0x1f0>
 801657e:	2300      	movs	r3, #0
 8016580:	f04f 32ff 	mov.w	r2, #4294967295
 8016584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016588:	f10a 0a01 	add.w	sl, sl, #1
 801658c:	9304      	str	r3, [sp, #16]
 801658e:	9307      	str	r3, [sp, #28]
 8016590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016594:	931a      	str	r3, [sp, #104]	; 0x68
 8016596:	4654      	mov	r4, sl
 8016598:	2205      	movs	r2, #5
 801659a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801659e:	4854      	ldr	r0, [pc, #336]	; (80166f0 <_vfiprintf_r+0x220>)
 80165a0:	f7e9 fe3e 	bl	8000220 <memchr>
 80165a4:	9a04      	ldr	r2, [sp, #16]
 80165a6:	b9d8      	cbnz	r0, 80165e0 <_vfiprintf_r+0x110>
 80165a8:	06d1      	lsls	r1, r2, #27
 80165aa:	bf44      	itt	mi
 80165ac:	2320      	movmi	r3, #32
 80165ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165b2:	0713      	lsls	r3, r2, #28
 80165b4:	bf44      	itt	mi
 80165b6:	232b      	movmi	r3, #43	; 0x2b
 80165b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165bc:	f89a 3000 	ldrb.w	r3, [sl]
 80165c0:	2b2a      	cmp	r3, #42	; 0x2a
 80165c2:	d015      	beq.n	80165f0 <_vfiprintf_r+0x120>
 80165c4:	9a07      	ldr	r2, [sp, #28]
 80165c6:	4654      	mov	r4, sl
 80165c8:	2000      	movs	r0, #0
 80165ca:	f04f 0c0a 	mov.w	ip, #10
 80165ce:	4621      	mov	r1, r4
 80165d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165d4:	3b30      	subs	r3, #48	; 0x30
 80165d6:	2b09      	cmp	r3, #9
 80165d8:	d94d      	bls.n	8016676 <_vfiprintf_r+0x1a6>
 80165da:	b1b0      	cbz	r0, 801660a <_vfiprintf_r+0x13a>
 80165dc:	9207      	str	r2, [sp, #28]
 80165de:	e014      	b.n	801660a <_vfiprintf_r+0x13a>
 80165e0:	eba0 0308 	sub.w	r3, r0, r8
 80165e4:	fa09 f303 	lsl.w	r3, r9, r3
 80165e8:	4313      	orrs	r3, r2
 80165ea:	9304      	str	r3, [sp, #16]
 80165ec:	46a2      	mov	sl, r4
 80165ee:	e7d2      	b.n	8016596 <_vfiprintf_r+0xc6>
 80165f0:	9b03      	ldr	r3, [sp, #12]
 80165f2:	1d19      	adds	r1, r3, #4
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	9103      	str	r1, [sp, #12]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	bfbb      	ittet	lt
 80165fc:	425b      	neglt	r3, r3
 80165fe:	f042 0202 	orrlt.w	r2, r2, #2
 8016602:	9307      	strge	r3, [sp, #28]
 8016604:	9307      	strlt	r3, [sp, #28]
 8016606:	bfb8      	it	lt
 8016608:	9204      	strlt	r2, [sp, #16]
 801660a:	7823      	ldrb	r3, [r4, #0]
 801660c:	2b2e      	cmp	r3, #46	; 0x2e
 801660e:	d10c      	bne.n	801662a <_vfiprintf_r+0x15a>
 8016610:	7863      	ldrb	r3, [r4, #1]
 8016612:	2b2a      	cmp	r3, #42	; 0x2a
 8016614:	d134      	bne.n	8016680 <_vfiprintf_r+0x1b0>
 8016616:	9b03      	ldr	r3, [sp, #12]
 8016618:	1d1a      	adds	r2, r3, #4
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	9203      	str	r2, [sp, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	bfb8      	it	lt
 8016622:	f04f 33ff 	movlt.w	r3, #4294967295
 8016626:	3402      	adds	r4, #2
 8016628:	9305      	str	r3, [sp, #20]
 801662a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016700 <_vfiprintf_r+0x230>
 801662e:	7821      	ldrb	r1, [r4, #0]
 8016630:	2203      	movs	r2, #3
 8016632:	4650      	mov	r0, sl
 8016634:	f7e9 fdf4 	bl	8000220 <memchr>
 8016638:	b138      	cbz	r0, 801664a <_vfiprintf_r+0x17a>
 801663a:	9b04      	ldr	r3, [sp, #16]
 801663c:	eba0 000a 	sub.w	r0, r0, sl
 8016640:	2240      	movs	r2, #64	; 0x40
 8016642:	4082      	lsls	r2, r0
 8016644:	4313      	orrs	r3, r2
 8016646:	3401      	adds	r4, #1
 8016648:	9304      	str	r3, [sp, #16]
 801664a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801664e:	4829      	ldr	r0, [pc, #164]	; (80166f4 <_vfiprintf_r+0x224>)
 8016650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016654:	2206      	movs	r2, #6
 8016656:	f7e9 fde3 	bl	8000220 <memchr>
 801665a:	2800      	cmp	r0, #0
 801665c:	d03f      	beq.n	80166de <_vfiprintf_r+0x20e>
 801665e:	4b26      	ldr	r3, [pc, #152]	; (80166f8 <_vfiprintf_r+0x228>)
 8016660:	bb1b      	cbnz	r3, 80166aa <_vfiprintf_r+0x1da>
 8016662:	9b03      	ldr	r3, [sp, #12]
 8016664:	3307      	adds	r3, #7
 8016666:	f023 0307 	bic.w	r3, r3, #7
 801666a:	3308      	adds	r3, #8
 801666c:	9303      	str	r3, [sp, #12]
 801666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016670:	443b      	add	r3, r7
 8016672:	9309      	str	r3, [sp, #36]	; 0x24
 8016674:	e768      	b.n	8016548 <_vfiprintf_r+0x78>
 8016676:	fb0c 3202 	mla	r2, ip, r2, r3
 801667a:	460c      	mov	r4, r1
 801667c:	2001      	movs	r0, #1
 801667e:	e7a6      	b.n	80165ce <_vfiprintf_r+0xfe>
 8016680:	2300      	movs	r3, #0
 8016682:	3401      	adds	r4, #1
 8016684:	9305      	str	r3, [sp, #20]
 8016686:	4619      	mov	r1, r3
 8016688:	f04f 0c0a 	mov.w	ip, #10
 801668c:	4620      	mov	r0, r4
 801668e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016692:	3a30      	subs	r2, #48	; 0x30
 8016694:	2a09      	cmp	r2, #9
 8016696:	d903      	bls.n	80166a0 <_vfiprintf_r+0x1d0>
 8016698:	2b00      	cmp	r3, #0
 801669a:	d0c6      	beq.n	801662a <_vfiprintf_r+0x15a>
 801669c:	9105      	str	r1, [sp, #20]
 801669e:	e7c4      	b.n	801662a <_vfiprintf_r+0x15a>
 80166a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80166a4:	4604      	mov	r4, r0
 80166a6:	2301      	movs	r3, #1
 80166a8:	e7f0      	b.n	801668c <_vfiprintf_r+0x1bc>
 80166aa:	ab03      	add	r3, sp, #12
 80166ac:	9300      	str	r3, [sp, #0]
 80166ae:	462a      	mov	r2, r5
 80166b0:	4b12      	ldr	r3, [pc, #72]	; (80166fc <_vfiprintf_r+0x22c>)
 80166b2:	a904      	add	r1, sp, #16
 80166b4:	4630      	mov	r0, r6
 80166b6:	f7fd fb9f 	bl	8013df8 <_printf_float>
 80166ba:	4607      	mov	r7, r0
 80166bc:	1c78      	adds	r0, r7, #1
 80166be:	d1d6      	bne.n	801666e <_vfiprintf_r+0x19e>
 80166c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166c2:	07d9      	lsls	r1, r3, #31
 80166c4:	d405      	bmi.n	80166d2 <_vfiprintf_r+0x202>
 80166c6:	89ab      	ldrh	r3, [r5, #12]
 80166c8:	059a      	lsls	r2, r3, #22
 80166ca:	d402      	bmi.n	80166d2 <_vfiprintf_r+0x202>
 80166cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166ce:	f7fe f8fd 	bl	80148cc <__retarget_lock_release_recursive>
 80166d2:	89ab      	ldrh	r3, [r5, #12]
 80166d4:	065b      	lsls	r3, r3, #25
 80166d6:	f53f af1d 	bmi.w	8016514 <_vfiprintf_r+0x44>
 80166da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166dc:	e71c      	b.n	8016518 <_vfiprintf_r+0x48>
 80166de:	ab03      	add	r3, sp, #12
 80166e0:	9300      	str	r3, [sp, #0]
 80166e2:	462a      	mov	r2, r5
 80166e4:	4b05      	ldr	r3, [pc, #20]	; (80166fc <_vfiprintf_r+0x22c>)
 80166e6:	a904      	add	r1, sp, #16
 80166e8:	4630      	mov	r0, r6
 80166ea:	f7fd fe29 	bl	8014340 <_printf_i>
 80166ee:	e7e4      	b.n	80166ba <_vfiprintf_r+0x1ea>
 80166f0:	0801bcb4 	.word	0x0801bcb4
 80166f4:	0801bcbe 	.word	0x0801bcbe
 80166f8:	08013df9 	.word	0x08013df9
 80166fc:	080164ad 	.word	0x080164ad
 8016700:	0801bcba 	.word	0x0801bcba

08016704 <__swbuf_r>:
 8016704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016706:	460e      	mov	r6, r1
 8016708:	4614      	mov	r4, r2
 801670a:	4605      	mov	r5, r0
 801670c:	b118      	cbz	r0, 8016716 <__swbuf_r+0x12>
 801670e:	6a03      	ldr	r3, [r0, #32]
 8016710:	b90b      	cbnz	r3, 8016716 <__swbuf_r+0x12>
 8016712:	f7fd ffc3 	bl	801469c <__sinit>
 8016716:	69a3      	ldr	r3, [r4, #24]
 8016718:	60a3      	str	r3, [r4, #8]
 801671a:	89a3      	ldrh	r3, [r4, #12]
 801671c:	071a      	lsls	r2, r3, #28
 801671e:	d525      	bpl.n	801676c <__swbuf_r+0x68>
 8016720:	6923      	ldr	r3, [r4, #16]
 8016722:	b31b      	cbz	r3, 801676c <__swbuf_r+0x68>
 8016724:	6823      	ldr	r3, [r4, #0]
 8016726:	6922      	ldr	r2, [r4, #16]
 8016728:	1a98      	subs	r0, r3, r2
 801672a:	6963      	ldr	r3, [r4, #20]
 801672c:	b2f6      	uxtb	r6, r6
 801672e:	4283      	cmp	r3, r0
 8016730:	4637      	mov	r7, r6
 8016732:	dc04      	bgt.n	801673e <__swbuf_r+0x3a>
 8016734:	4621      	mov	r1, r4
 8016736:	4628      	mov	r0, r5
 8016738:	f7ff fd9e 	bl	8016278 <_fflush_r>
 801673c:	b9e0      	cbnz	r0, 8016778 <__swbuf_r+0x74>
 801673e:	68a3      	ldr	r3, [r4, #8]
 8016740:	3b01      	subs	r3, #1
 8016742:	60a3      	str	r3, [r4, #8]
 8016744:	6823      	ldr	r3, [r4, #0]
 8016746:	1c5a      	adds	r2, r3, #1
 8016748:	6022      	str	r2, [r4, #0]
 801674a:	701e      	strb	r6, [r3, #0]
 801674c:	6962      	ldr	r2, [r4, #20]
 801674e:	1c43      	adds	r3, r0, #1
 8016750:	429a      	cmp	r2, r3
 8016752:	d004      	beq.n	801675e <__swbuf_r+0x5a>
 8016754:	89a3      	ldrh	r3, [r4, #12]
 8016756:	07db      	lsls	r3, r3, #31
 8016758:	d506      	bpl.n	8016768 <__swbuf_r+0x64>
 801675a:	2e0a      	cmp	r6, #10
 801675c:	d104      	bne.n	8016768 <__swbuf_r+0x64>
 801675e:	4621      	mov	r1, r4
 8016760:	4628      	mov	r0, r5
 8016762:	f7ff fd89 	bl	8016278 <_fflush_r>
 8016766:	b938      	cbnz	r0, 8016778 <__swbuf_r+0x74>
 8016768:	4638      	mov	r0, r7
 801676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801676c:	4621      	mov	r1, r4
 801676e:	4628      	mov	r0, r5
 8016770:	f000 f806 	bl	8016780 <__swsetup_r>
 8016774:	2800      	cmp	r0, #0
 8016776:	d0d5      	beq.n	8016724 <__swbuf_r+0x20>
 8016778:	f04f 37ff 	mov.w	r7, #4294967295
 801677c:	e7f4      	b.n	8016768 <__swbuf_r+0x64>
	...

08016780 <__swsetup_r>:
 8016780:	b538      	push	{r3, r4, r5, lr}
 8016782:	4b2a      	ldr	r3, [pc, #168]	; (801682c <__swsetup_r+0xac>)
 8016784:	4605      	mov	r5, r0
 8016786:	6818      	ldr	r0, [r3, #0]
 8016788:	460c      	mov	r4, r1
 801678a:	b118      	cbz	r0, 8016794 <__swsetup_r+0x14>
 801678c:	6a03      	ldr	r3, [r0, #32]
 801678e:	b90b      	cbnz	r3, 8016794 <__swsetup_r+0x14>
 8016790:	f7fd ff84 	bl	801469c <__sinit>
 8016794:	89a3      	ldrh	r3, [r4, #12]
 8016796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801679a:	0718      	lsls	r0, r3, #28
 801679c:	d422      	bmi.n	80167e4 <__swsetup_r+0x64>
 801679e:	06d9      	lsls	r1, r3, #27
 80167a0:	d407      	bmi.n	80167b2 <__swsetup_r+0x32>
 80167a2:	2309      	movs	r3, #9
 80167a4:	602b      	str	r3, [r5, #0]
 80167a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80167aa:	81a3      	strh	r3, [r4, #12]
 80167ac:	f04f 30ff 	mov.w	r0, #4294967295
 80167b0:	e034      	b.n	801681c <__swsetup_r+0x9c>
 80167b2:	0758      	lsls	r0, r3, #29
 80167b4:	d512      	bpl.n	80167dc <__swsetup_r+0x5c>
 80167b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167b8:	b141      	cbz	r1, 80167cc <__swsetup_r+0x4c>
 80167ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167be:	4299      	cmp	r1, r3
 80167c0:	d002      	beq.n	80167c8 <__swsetup_r+0x48>
 80167c2:	4628      	mov	r0, r5
 80167c4:	f7fe fefe 	bl	80155c4 <_free_r>
 80167c8:	2300      	movs	r3, #0
 80167ca:	6363      	str	r3, [r4, #52]	; 0x34
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167d2:	81a3      	strh	r3, [r4, #12]
 80167d4:	2300      	movs	r3, #0
 80167d6:	6063      	str	r3, [r4, #4]
 80167d8:	6923      	ldr	r3, [r4, #16]
 80167da:	6023      	str	r3, [r4, #0]
 80167dc:	89a3      	ldrh	r3, [r4, #12]
 80167de:	f043 0308 	orr.w	r3, r3, #8
 80167e2:	81a3      	strh	r3, [r4, #12]
 80167e4:	6923      	ldr	r3, [r4, #16]
 80167e6:	b94b      	cbnz	r3, 80167fc <__swsetup_r+0x7c>
 80167e8:	89a3      	ldrh	r3, [r4, #12]
 80167ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167f2:	d003      	beq.n	80167fc <__swsetup_r+0x7c>
 80167f4:	4621      	mov	r1, r4
 80167f6:	4628      	mov	r0, r5
 80167f8:	f000 f884 	bl	8016904 <__smakebuf_r>
 80167fc:	89a0      	ldrh	r0, [r4, #12]
 80167fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016802:	f010 0301 	ands.w	r3, r0, #1
 8016806:	d00a      	beq.n	801681e <__swsetup_r+0x9e>
 8016808:	2300      	movs	r3, #0
 801680a:	60a3      	str	r3, [r4, #8]
 801680c:	6963      	ldr	r3, [r4, #20]
 801680e:	425b      	negs	r3, r3
 8016810:	61a3      	str	r3, [r4, #24]
 8016812:	6923      	ldr	r3, [r4, #16]
 8016814:	b943      	cbnz	r3, 8016828 <__swsetup_r+0xa8>
 8016816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801681a:	d1c4      	bne.n	80167a6 <__swsetup_r+0x26>
 801681c:	bd38      	pop	{r3, r4, r5, pc}
 801681e:	0781      	lsls	r1, r0, #30
 8016820:	bf58      	it	pl
 8016822:	6963      	ldrpl	r3, [r4, #20]
 8016824:	60a3      	str	r3, [r4, #8]
 8016826:	e7f4      	b.n	8016812 <__swsetup_r+0x92>
 8016828:	2000      	movs	r0, #0
 801682a:	e7f7      	b.n	801681c <__swsetup_r+0x9c>
 801682c:	20000374 	.word	0x20000374

08016830 <_raise_r>:
 8016830:	291f      	cmp	r1, #31
 8016832:	b538      	push	{r3, r4, r5, lr}
 8016834:	4604      	mov	r4, r0
 8016836:	460d      	mov	r5, r1
 8016838:	d904      	bls.n	8016844 <_raise_r+0x14>
 801683a:	2316      	movs	r3, #22
 801683c:	6003      	str	r3, [r0, #0]
 801683e:	f04f 30ff 	mov.w	r0, #4294967295
 8016842:	bd38      	pop	{r3, r4, r5, pc}
 8016844:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016846:	b112      	cbz	r2, 801684e <_raise_r+0x1e>
 8016848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801684c:	b94b      	cbnz	r3, 8016862 <_raise_r+0x32>
 801684e:	4620      	mov	r0, r4
 8016850:	f000 f830 	bl	80168b4 <_getpid_r>
 8016854:	462a      	mov	r2, r5
 8016856:	4601      	mov	r1, r0
 8016858:	4620      	mov	r0, r4
 801685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801685e:	f000 b817 	b.w	8016890 <_kill_r>
 8016862:	2b01      	cmp	r3, #1
 8016864:	d00a      	beq.n	801687c <_raise_r+0x4c>
 8016866:	1c59      	adds	r1, r3, #1
 8016868:	d103      	bne.n	8016872 <_raise_r+0x42>
 801686a:	2316      	movs	r3, #22
 801686c:	6003      	str	r3, [r0, #0]
 801686e:	2001      	movs	r0, #1
 8016870:	e7e7      	b.n	8016842 <_raise_r+0x12>
 8016872:	2400      	movs	r4, #0
 8016874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016878:	4628      	mov	r0, r5
 801687a:	4798      	blx	r3
 801687c:	2000      	movs	r0, #0
 801687e:	e7e0      	b.n	8016842 <_raise_r+0x12>

08016880 <raise>:
 8016880:	4b02      	ldr	r3, [pc, #8]	; (801688c <raise+0xc>)
 8016882:	4601      	mov	r1, r0
 8016884:	6818      	ldr	r0, [r3, #0]
 8016886:	f7ff bfd3 	b.w	8016830 <_raise_r>
 801688a:	bf00      	nop
 801688c:	20000374 	.word	0x20000374

08016890 <_kill_r>:
 8016890:	b538      	push	{r3, r4, r5, lr}
 8016892:	4d07      	ldr	r5, [pc, #28]	; (80168b0 <_kill_r+0x20>)
 8016894:	2300      	movs	r3, #0
 8016896:	4604      	mov	r4, r0
 8016898:	4608      	mov	r0, r1
 801689a:	4611      	mov	r1, r2
 801689c:	602b      	str	r3, [r5, #0]
 801689e:	f7ed fefd 	bl	800469c <_kill>
 80168a2:	1c43      	adds	r3, r0, #1
 80168a4:	d102      	bne.n	80168ac <_kill_r+0x1c>
 80168a6:	682b      	ldr	r3, [r5, #0]
 80168a8:	b103      	cbz	r3, 80168ac <_kill_r+0x1c>
 80168aa:	6023      	str	r3, [r4, #0]
 80168ac:	bd38      	pop	{r3, r4, r5, pc}
 80168ae:	bf00      	nop
 80168b0:	20002e30 	.word	0x20002e30

080168b4 <_getpid_r>:
 80168b4:	f7ed beea 	b.w	800468c <_getpid>

080168b8 <__swhatbuf_r>:
 80168b8:	b570      	push	{r4, r5, r6, lr}
 80168ba:	460c      	mov	r4, r1
 80168bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168c0:	2900      	cmp	r1, #0
 80168c2:	b096      	sub	sp, #88	; 0x58
 80168c4:	4615      	mov	r5, r2
 80168c6:	461e      	mov	r6, r3
 80168c8:	da0d      	bge.n	80168e6 <__swhatbuf_r+0x2e>
 80168ca:	89a3      	ldrh	r3, [r4, #12]
 80168cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80168d0:	f04f 0100 	mov.w	r1, #0
 80168d4:	bf0c      	ite	eq
 80168d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80168da:	2340      	movne	r3, #64	; 0x40
 80168dc:	2000      	movs	r0, #0
 80168de:	6031      	str	r1, [r6, #0]
 80168e0:	602b      	str	r3, [r5, #0]
 80168e2:	b016      	add	sp, #88	; 0x58
 80168e4:	bd70      	pop	{r4, r5, r6, pc}
 80168e6:	466a      	mov	r2, sp
 80168e8:	f000 f848 	bl	801697c <_fstat_r>
 80168ec:	2800      	cmp	r0, #0
 80168ee:	dbec      	blt.n	80168ca <__swhatbuf_r+0x12>
 80168f0:	9901      	ldr	r1, [sp, #4]
 80168f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80168f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80168fa:	4259      	negs	r1, r3
 80168fc:	4159      	adcs	r1, r3
 80168fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016902:	e7eb      	b.n	80168dc <__swhatbuf_r+0x24>

08016904 <__smakebuf_r>:
 8016904:	898b      	ldrh	r3, [r1, #12]
 8016906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016908:	079d      	lsls	r5, r3, #30
 801690a:	4606      	mov	r6, r0
 801690c:	460c      	mov	r4, r1
 801690e:	d507      	bpl.n	8016920 <__smakebuf_r+0x1c>
 8016910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016914:	6023      	str	r3, [r4, #0]
 8016916:	6123      	str	r3, [r4, #16]
 8016918:	2301      	movs	r3, #1
 801691a:	6163      	str	r3, [r4, #20]
 801691c:	b002      	add	sp, #8
 801691e:	bd70      	pop	{r4, r5, r6, pc}
 8016920:	ab01      	add	r3, sp, #4
 8016922:	466a      	mov	r2, sp
 8016924:	f7ff ffc8 	bl	80168b8 <__swhatbuf_r>
 8016928:	9900      	ldr	r1, [sp, #0]
 801692a:	4605      	mov	r5, r0
 801692c:	4630      	mov	r0, r6
 801692e:	f7fe febd 	bl	80156ac <_malloc_r>
 8016932:	b948      	cbnz	r0, 8016948 <__smakebuf_r+0x44>
 8016934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016938:	059a      	lsls	r2, r3, #22
 801693a:	d4ef      	bmi.n	801691c <__smakebuf_r+0x18>
 801693c:	f023 0303 	bic.w	r3, r3, #3
 8016940:	f043 0302 	orr.w	r3, r3, #2
 8016944:	81a3      	strh	r3, [r4, #12]
 8016946:	e7e3      	b.n	8016910 <__smakebuf_r+0xc>
 8016948:	89a3      	ldrh	r3, [r4, #12]
 801694a:	6020      	str	r0, [r4, #0]
 801694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016950:	81a3      	strh	r3, [r4, #12]
 8016952:	9b00      	ldr	r3, [sp, #0]
 8016954:	6163      	str	r3, [r4, #20]
 8016956:	9b01      	ldr	r3, [sp, #4]
 8016958:	6120      	str	r0, [r4, #16]
 801695a:	b15b      	cbz	r3, 8016974 <__smakebuf_r+0x70>
 801695c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016960:	4630      	mov	r0, r6
 8016962:	f000 f81d 	bl	80169a0 <_isatty_r>
 8016966:	b128      	cbz	r0, 8016974 <__smakebuf_r+0x70>
 8016968:	89a3      	ldrh	r3, [r4, #12]
 801696a:	f023 0303 	bic.w	r3, r3, #3
 801696e:	f043 0301 	orr.w	r3, r3, #1
 8016972:	81a3      	strh	r3, [r4, #12]
 8016974:	89a3      	ldrh	r3, [r4, #12]
 8016976:	431d      	orrs	r5, r3
 8016978:	81a5      	strh	r5, [r4, #12]
 801697a:	e7cf      	b.n	801691c <__smakebuf_r+0x18>

0801697c <_fstat_r>:
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	4d07      	ldr	r5, [pc, #28]	; (801699c <_fstat_r+0x20>)
 8016980:	2300      	movs	r3, #0
 8016982:	4604      	mov	r4, r0
 8016984:	4608      	mov	r0, r1
 8016986:	4611      	mov	r1, r2
 8016988:	602b      	str	r3, [r5, #0]
 801698a:	f7ed fee6 	bl	800475a <_fstat>
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	d102      	bne.n	8016998 <_fstat_r+0x1c>
 8016992:	682b      	ldr	r3, [r5, #0]
 8016994:	b103      	cbz	r3, 8016998 <_fstat_r+0x1c>
 8016996:	6023      	str	r3, [r4, #0]
 8016998:	bd38      	pop	{r3, r4, r5, pc}
 801699a:	bf00      	nop
 801699c:	20002e30 	.word	0x20002e30

080169a0 <_isatty_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4d06      	ldr	r5, [pc, #24]	; (80169bc <_isatty_r+0x1c>)
 80169a4:	2300      	movs	r3, #0
 80169a6:	4604      	mov	r4, r0
 80169a8:	4608      	mov	r0, r1
 80169aa:	602b      	str	r3, [r5, #0]
 80169ac:	f7ed fee5 	bl	800477a <_isatty>
 80169b0:	1c43      	adds	r3, r0, #1
 80169b2:	d102      	bne.n	80169ba <_isatty_r+0x1a>
 80169b4:	682b      	ldr	r3, [r5, #0]
 80169b6:	b103      	cbz	r3, 80169ba <_isatty_r+0x1a>
 80169b8:	6023      	str	r3, [r4, #0]
 80169ba:	bd38      	pop	{r3, r4, r5, pc}
 80169bc:	20002e30 	.word	0x20002e30

080169c0 <fmod>:
 80169c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c2:	ed2d 8b02 	vpush	{d8}
 80169c6:	ec57 6b10 	vmov	r6, r7, d0
 80169ca:	ec55 4b11 	vmov	r4, r5, d1
 80169ce:	f000 f86d 	bl	8016aac <__ieee754_fmod>
 80169d2:	4622      	mov	r2, r4
 80169d4:	462b      	mov	r3, r5
 80169d6:	4630      	mov	r0, r6
 80169d8:	4639      	mov	r1, r7
 80169da:	eeb0 8a40 	vmov.f32	s16, s0
 80169de:	eef0 8a60 	vmov.f32	s17, s1
 80169e2:	f7ea f8cb 	bl	8000b7c <__aeabi_dcmpun>
 80169e6:	b990      	cbnz	r0, 8016a0e <fmod+0x4e>
 80169e8:	2200      	movs	r2, #0
 80169ea:	2300      	movs	r3, #0
 80169ec:	4620      	mov	r0, r4
 80169ee:	4629      	mov	r1, r5
 80169f0:	f7ea f892 	bl	8000b18 <__aeabi_dcmpeq>
 80169f4:	b158      	cbz	r0, 8016a0e <fmod+0x4e>
 80169f6:	f7fd ff3d 	bl	8014874 <__errno>
 80169fa:	2321      	movs	r3, #33	; 0x21
 80169fc:	6003      	str	r3, [r0, #0]
 80169fe:	2200      	movs	r2, #0
 8016a00:	2300      	movs	r3, #0
 8016a02:	4610      	mov	r0, r2
 8016a04:	4619      	mov	r1, r3
 8016a06:	f7e9 ff49 	bl	800089c <__aeabi_ddiv>
 8016a0a:	ec41 0b18 	vmov	d8, r0, r1
 8016a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8016a12:	eef0 0a68 	vmov.f32	s1, s17
 8016a16:	ecbd 8b02 	vpop	{d8}
 8016a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a1c <round>:
 8016a1c:	ec53 2b10 	vmov	r2, r3, d0
 8016a20:	b570      	push	{r4, r5, r6, lr}
 8016a22:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8016a26:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8016a2a:	2813      	cmp	r0, #19
 8016a2c:	ee10 5a10 	vmov	r5, s0
 8016a30:	4619      	mov	r1, r3
 8016a32:	dc18      	bgt.n	8016a66 <round+0x4a>
 8016a34:	2800      	cmp	r0, #0
 8016a36:	da09      	bge.n	8016a4c <round+0x30>
 8016a38:	3001      	adds	r0, #1
 8016a3a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8016a3e:	d103      	bne.n	8016a48 <round+0x2c>
 8016a40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8016a44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8016a48:	2300      	movs	r3, #0
 8016a4a:	e02a      	b.n	8016aa2 <round+0x86>
 8016a4c:	4c16      	ldr	r4, [pc, #88]	; (8016aa8 <round+0x8c>)
 8016a4e:	4104      	asrs	r4, r0
 8016a50:	ea03 0604 	and.w	r6, r3, r4
 8016a54:	4316      	orrs	r6, r2
 8016a56:	d011      	beq.n	8016a7c <round+0x60>
 8016a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016a5c:	4103      	asrs	r3, r0
 8016a5e:	440b      	add	r3, r1
 8016a60:	ea23 0104 	bic.w	r1, r3, r4
 8016a64:	e7f0      	b.n	8016a48 <round+0x2c>
 8016a66:	2833      	cmp	r0, #51	; 0x33
 8016a68:	dd0b      	ble.n	8016a82 <round+0x66>
 8016a6a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016a6e:	d105      	bne.n	8016a7c <round+0x60>
 8016a70:	ee10 0a10 	vmov	r0, s0
 8016a74:	f7e9 fc32 	bl	80002dc <__adddf3>
 8016a78:	4602      	mov	r2, r0
 8016a7a:	460b      	mov	r3, r1
 8016a7c:	ec43 2b10 	vmov	d0, r2, r3
 8016a80:	bd70      	pop	{r4, r5, r6, pc}
 8016a82:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8016a86:	f04f 34ff 	mov.w	r4, #4294967295
 8016a8a:	40f4      	lsrs	r4, r6
 8016a8c:	4214      	tst	r4, r2
 8016a8e:	d0f5      	beq.n	8016a7c <round+0x60>
 8016a90:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8016a94:	2301      	movs	r3, #1
 8016a96:	4083      	lsls	r3, r0
 8016a98:	195b      	adds	r3, r3, r5
 8016a9a:	bf28      	it	cs
 8016a9c:	3101      	addcs	r1, #1
 8016a9e:	ea23 0304 	bic.w	r3, r3, r4
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	e7e9      	b.n	8016a7c <round+0x60>
 8016aa8:	000fffff 	.word	0x000fffff

08016aac <__ieee754_fmod>:
 8016aac:	ec53 2b11 	vmov	r2, r3, d1
 8016ab0:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8016ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ab8:	ea5c 0402 	orrs.w	r4, ip, r2
 8016abc:	ec51 0b10 	vmov	r0, r1, d0
 8016ac0:	ee11 7a10 	vmov	r7, s2
 8016ac4:	ee11 ea10 	vmov	lr, s2
 8016ac8:	461e      	mov	r6, r3
 8016aca:	d00c      	beq.n	8016ae6 <__ieee754_fmod+0x3a>
 8016acc:	4c78      	ldr	r4, [pc, #480]	; (8016cb0 <__ieee754_fmod+0x204>)
 8016ace:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016ad2:	45a0      	cmp	r8, r4
 8016ad4:	4689      	mov	r9, r1
 8016ad6:	dc06      	bgt.n	8016ae6 <__ieee754_fmod+0x3a>
 8016ad8:	4254      	negs	r4, r2
 8016ada:	4d76      	ldr	r5, [pc, #472]	; (8016cb4 <__ieee754_fmod+0x208>)
 8016adc:	4314      	orrs	r4, r2
 8016ade:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8016ae2:	42ac      	cmp	r4, r5
 8016ae4:	d909      	bls.n	8016afa <__ieee754_fmod+0x4e>
 8016ae6:	f7e9 fdaf 	bl	8000648 <__aeabi_dmul>
 8016aea:	4602      	mov	r2, r0
 8016aec:	460b      	mov	r3, r1
 8016aee:	f7e9 fed5 	bl	800089c <__aeabi_ddiv>
 8016af2:	ec41 0b10 	vmov	d0, r0, r1
 8016af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016afa:	45e0      	cmp	r8, ip
 8016afc:	ee10 aa10 	vmov	sl, s0
 8016b00:	ee10 4a10 	vmov	r4, s0
 8016b04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8016b08:	dc09      	bgt.n	8016b1e <__ieee754_fmod+0x72>
 8016b0a:	dbf2      	blt.n	8016af2 <__ieee754_fmod+0x46>
 8016b0c:	4290      	cmp	r0, r2
 8016b0e:	d3f0      	bcc.n	8016af2 <__ieee754_fmod+0x46>
 8016b10:	d105      	bne.n	8016b1e <__ieee754_fmod+0x72>
 8016b12:	4b69      	ldr	r3, [pc, #420]	; (8016cb8 <__ieee754_fmod+0x20c>)
 8016b14:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8016b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016b1c:	e7e9      	b.n	8016af2 <__ieee754_fmod+0x46>
 8016b1e:	4a65      	ldr	r2, [pc, #404]	; (8016cb4 <__ieee754_fmod+0x208>)
 8016b20:	ea19 0f02 	tst.w	r9, r2
 8016b24:	d148      	bne.n	8016bb8 <__ieee754_fmod+0x10c>
 8016b26:	f1b8 0f00 	cmp.w	r8, #0
 8016b2a:	d13d      	bne.n	8016ba8 <__ieee754_fmod+0xfc>
 8016b2c:	4963      	ldr	r1, [pc, #396]	; (8016cbc <__ieee754_fmod+0x210>)
 8016b2e:	4653      	mov	r3, sl
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	dc36      	bgt.n	8016ba2 <__ieee754_fmod+0xf6>
 8016b34:	4216      	tst	r6, r2
 8016b36:	d14f      	bne.n	8016bd8 <__ieee754_fmod+0x12c>
 8016b38:	f1bc 0f00 	cmp.w	ip, #0
 8016b3c:	d144      	bne.n	8016bc8 <__ieee754_fmod+0x11c>
 8016b3e:	4a5f      	ldr	r2, [pc, #380]	; (8016cbc <__ieee754_fmod+0x210>)
 8016b40:	463b      	mov	r3, r7
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	dc3d      	bgt.n	8016bc2 <__ieee754_fmod+0x116>
 8016b46:	485e      	ldr	r0, [pc, #376]	; (8016cc0 <__ieee754_fmod+0x214>)
 8016b48:	4281      	cmp	r1, r0
 8016b4a:	db4a      	blt.n	8016be2 <__ieee754_fmod+0x136>
 8016b4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b54:	485a      	ldr	r0, [pc, #360]	; (8016cc0 <__ieee754_fmod+0x214>)
 8016b56:	4282      	cmp	r2, r0
 8016b58:	db57      	blt.n	8016c0a <__ieee754_fmod+0x15e>
 8016b5a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8016b5e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8016b62:	1a89      	subs	r1, r1, r2
 8016b64:	1b98      	subs	r0, r3, r6
 8016b66:	eba4 070e 	sub.w	r7, r4, lr
 8016b6a:	2900      	cmp	r1, #0
 8016b6c:	d162      	bne.n	8016c34 <__ieee754_fmod+0x188>
 8016b6e:	4574      	cmp	r4, lr
 8016b70:	bf38      	it	cc
 8016b72:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016b76:	2800      	cmp	r0, #0
 8016b78:	bfa4      	itt	ge
 8016b7a:	463c      	movge	r4, r7
 8016b7c:	4603      	movge	r3, r0
 8016b7e:	ea53 0104 	orrs.w	r1, r3, r4
 8016b82:	d0c6      	beq.n	8016b12 <__ieee754_fmod+0x66>
 8016b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016b88:	db69      	blt.n	8016c5e <__ieee754_fmod+0x1b2>
 8016b8a:	494d      	ldr	r1, [pc, #308]	; (8016cc0 <__ieee754_fmod+0x214>)
 8016b8c:	428a      	cmp	r2, r1
 8016b8e:	db6c      	blt.n	8016c6a <__ieee754_fmod+0x1be>
 8016b90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016b94:	432b      	orrs	r3, r5
 8016b96:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8016b9a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	e7a7      	b.n	8016af2 <__ieee754_fmod+0x46>
 8016ba2:	3901      	subs	r1, #1
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	e7c3      	b.n	8016b30 <__ieee754_fmod+0x84>
 8016ba8:	4945      	ldr	r1, [pc, #276]	; (8016cc0 <__ieee754_fmod+0x214>)
 8016baa:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	ddc0      	ble.n	8016b34 <__ieee754_fmod+0x88>
 8016bb2:	3901      	subs	r1, #1
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	e7fa      	b.n	8016bae <__ieee754_fmod+0x102>
 8016bb8:	ea4f 5128 	mov.w	r1, r8, asr #20
 8016bbc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016bc0:	e7b8      	b.n	8016b34 <__ieee754_fmod+0x88>
 8016bc2:	3a01      	subs	r2, #1
 8016bc4:	005b      	lsls	r3, r3, #1
 8016bc6:	e7bc      	b.n	8016b42 <__ieee754_fmod+0x96>
 8016bc8:	4a3d      	ldr	r2, [pc, #244]	; (8016cc0 <__ieee754_fmod+0x214>)
 8016bca:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	ddb9      	ble.n	8016b46 <__ieee754_fmod+0x9a>
 8016bd2:	3a01      	subs	r2, #1
 8016bd4:	005b      	lsls	r3, r3, #1
 8016bd6:	e7fa      	b.n	8016bce <__ieee754_fmod+0x122>
 8016bd8:	ea4f 522c 	mov.w	r2, ip, asr #20
 8016bdc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016be0:	e7b1      	b.n	8016b46 <__ieee754_fmod+0x9a>
 8016be2:	1a40      	subs	r0, r0, r1
 8016be4:	281f      	cmp	r0, #31
 8016be6:	dc0a      	bgt.n	8016bfe <__ieee754_fmod+0x152>
 8016be8:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8016bec:	fa08 f800 	lsl.w	r8, r8, r0
 8016bf0:	fa2a f303 	lsr.w	r3, sl, r3
 8016bf4:	ea43 0308 	orr.w	r3, r3, r8
 8016bf8:	fa0a f400 	lsl.w	r4, sl, r0
 8016bfc:	e7aa      	b.n	8016b54 <__ieee754_fmod+0xa8>
 8016bfe:	4b31      	ldr	r3, [pc, #196]	; (8016cc4 <__ieee754_fmod+0x218>)
 8016c00:	1a5b      	subs	r3, r3, r1
 8016c02:	fa0a f303 	lsl.w	r3, sl, r3
 8016c06:	2400      	movs	r4, #0
 8016c08:	e7a4      	b.n	8016b54 <__ieee754_fmod+0xa8>
 8016c0a:	1a80      	subs	r0, r0, r2
 8016c0c:	281f      	cmp	r0, #31
 8016c0e:	dc0a      	bgt.n	8016c26 <__ieee754_fmod+0x17a>
 8016c10:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8016c14:	fa0c fc00 	lsl.w	ip, ip, r0
 8016c18:	fa27 f606 	lsr.w	r6, r7, r6
 8016c1c:	ea46 060c 	orr.w	r6, r6, ip
 8016c20:	fa07 fe00 	lsl.w	lr, r7, r0
 8016c24:	e79d      	b.n	8016b62 <__ieee754_fmod+0xb6>
 8016c26:	4e27      	ldr	r6, [pc, #156]	; (8016cc4 <__ieee754_fmod+0x218>)
 8016c28:	1ab6      	subs	r6, r6, r2
 8016c2a:	fa07 f606 	lsl.w	r6, r7, r6
 8016c2e:	f04f 0e00 	mov.w	lr, #0
 8016c32:	e796      	b.n	8016b62 <__ieee754_fmod+0xb6>
 8016c34:	4574      	cmp	r4, lr
 8016c36:	bf38      	it	cc
 8016c38:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	da05      	bge.n	8016c4c <__ieee754_fmod+0x1a0>
 8016c40:	0fe0      	lsrs	r0, r4, #31
 8016c42:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016c46:	0064      	lsls	r4, r4, #1
 8016c48:	3901      	subs	r1, #1
 8016c4a:	e78b      	b.n	8016b64 <__ieee754_fmod+0xb8>
 8016c4c:	ea50 0307 	orrs.w	r3, r0, r7
 8016c50:	f43f af5f 	beq.w	8016b12 <__ieee754_fmod+0x66>
 8016c54:	0ffb      	lsrs	r3, r7, #31
 8016c56:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016c5a:	007c      	lsls	r4, r7, #1
 8016c5c:	e7f4      	b.n	8016c48 <__ieee754_fmod+0x19c>
 8016c5e:	0fe1      	lsrs	r1, r4, #31
 8016c60:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016c64:	0064      	lsls	r4, r4, #1
 8016c66:	3a01      	subs	r2, #1
 8016c68:	e78c      	b.n	8016b84 <__ieee754_fmod+0xd8>
 8016c6a:	1a89      	subs	r1, r1, r2
 8016c6c:	2914      	cmp	r1, #20
 8016c6e:	dc0a      	bgt.n	8016c86 <__ieee754_fmod+0x1da>
 8016c70:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016c74:	fa03 f202 	lsl.w	r2, r3, r2
 8016c78:	40cc      	lsrs	r4, r1
 8016c7a:	4322      	orrs	r2, r4
 8016c7c:	410b      	asrs	r3, r1
 8016c7e:	ea43 0105 	orr.w	r1, r3, r5
 8016c82:	4610      	mov	r0, r2
 8016c84:	e735      	b.n	8016af2 <__ieee754_fmod+0x46>
 8016c86:	291f      	cmp	r1, #31
 8016c88:	dc07      	bgt.n	8016c9a <__ieee754_fmod+0x1ee>
 8016c8a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8016c8e:	40cc      	lsrs	r4, r1
 8016c90:	fa03 f202 	lsl.w	r2, r3, r2
 8016c94:	4322      	orrs	r2, r4
 8016c96:	462b      	mov	r3, r5
 8016c98:	e7f1      	b.n	8016c7e <__ieee754_fmod+0x1d2>
 8016c9a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8016c9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016ca2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8016ca6:	32e2      	adds	r2, #226	; 0xe2
 8016ca8:	fa43 f202 	asr.w	r2, r3, r2
 8016cac:	e7f3      	b.n	8016c96 <__ieee754_fmod+0x1ea>
 8016cae:	bf00      	nop
 8016cb0:	7fefffff 	.word	0x7fefffff
 8016cb4:	7ff00000 	.word	0x7ff00000
 8016cb8:	0801be10 	.word	0x0801be10
 8016cbc:	fffffbed 	.word	0xfffffbed
 8016cc0:	fffffc02 	.word	0xfffffc02
 8016cc4:	fffffbe2 	.word	0xfffffbe2

08016cc8 <_init>:
 8016cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cca:	bf00      	nop
 8016ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cce:	bc08      	pop	{r3}
 8016cd0:	469e      	mov	lr, r3
 8016cd2:	4770      	bx	lr

08016cd4 <_fini>:
 8016cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd6:	bf00      	nop
 8016cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cda:	bc08      	pop	{r3}
 8016cdc:	469e      	mov	lr, r3
 8016cde:	4770      	bx	lr
