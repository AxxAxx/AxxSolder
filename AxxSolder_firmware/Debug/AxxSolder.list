
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015388  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002df0  08015568  08015568  00025568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018358  08018358  000303dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018358  08018358  00028358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018360  08018360  000303dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018360  08018360  00028360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018364  08018364  00028364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  20000000  08018368  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe8  200003e0  08018744  000303e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200023c8  08018744  000323c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003040c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025da2  00000000  00000000  0003044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b55  00000000  00000000  000561f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002340  00000000  00000000  0005ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b37  00000000  00000000  0005d088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254d9  00000000  00000000  0005ebbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b05a  00000000  00000000  00084098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e98d8  00000000  00000000  000af0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ad50  00000000  00000000  001989cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001a371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003e0 	.word	0x200003e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015550 	.word	0x08015550

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003e4 	.word	0x200003e4
 800021c:	08015550 	.word	0x08015550

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f008 f8f6 	bl	8009284 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001d28 	.word	0x20001d28

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000400 	.word	0x20000400
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	461a      	mov	r2, r3
 800118e:	f010 fca2 	bl	8011ad6 <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000400 	.word	0x20000400

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2350      	movs	r3, #80	; 0x50
 80011e8:	461a      	mov	r2, r3
 80011ea:	f010 fc74 	bl	8011ad6 <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f008 f844 	bl	8009284 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 fd24 	bl	8009c54 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 fdec 	bl	8009e2c <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f008 fc63 	bl	8009b7c <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f008 fc4e 	bl	8009b7c <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 fcd7 	bl	8009c98 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 fcca 	bl	8009c98 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	200003fc 	.word	0x200003fc
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000400 	.word	0x20000400
 8001320:	20000000 	.word	0x20000000
 8001324:	20001d28 	.word	0x20001d28
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	20000450 	.word	0x20000450

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200004d0 	.word	0x200004d0
 8001408:	200004d4 	.word	0x200004d4
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fbc5 	bl	8004c10 <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	200008e8 	.word	0x200008e8
 80014bc:	20000030 	.word	0x20000030
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 ff39 	bl	800a3a8 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 ff33 	bl	800a3a8 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000030 	.word	0x20000030
 8001554:	20000550 	.word	0x20000550
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <debugPrint>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
	/* Set transmission flag: transfer complete */
	tx_done = 1;
}

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    tx_done = 0;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <debugPrint+0x38>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7fe fea5 	bl	80002c0 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f00c fb78 	bl	800dc74 <HAL_UART_Transmit_IT>
	while(!tx_done);
 8001584:	bf00      	nop
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <debugPrint+0x38>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0fb      	beq.n	8001586 <debugPrint+0x26>
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000001e 	.word	0x2000001e
 800159c:	00000000 	.word	0x00000000

080015a0 <get_bus_voltage>:

void get_bus_voltage(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fef5 	bl	8001394 <get_mean_ADC_reading_indexed>
 80015aa:	ec53 2b10 	vmov	r2, r3, d0
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fb21 	bl	8000bf8 <__aeabi_d2uiz>
 80015b6:	4603      	mov	r3, r0
 80015b8:	490d      	ldr	r1, [pc, #52]	; (80015f0 <get_bus_voltage+0x50>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fb28 	bl	8004c10 <Moving_Average_Compute>
 80015c0:	ec51 0b10 	vmov	r0, r1, d0
 80015c4:	a308      	add	r3, pc, #32	; (adr r3, 80015e8 <get_bus_voltage+0x48>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7ff f83d 	bl	8000648 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f7ff fb2f 	bl	8000c38 <__aeabi_d2f>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <get_bus_voltage+0x54>)
 80015de:	6113      	str	r3, [r2, #16]
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	ada68bd9 	.word	0xada68bd9
 80015ec:	3f813656 	.word	0x3f813656
 80015f0:	20000c14 	.word	0x20000c14
 80015f4:	20000030 	.word	0x20000030

080015f8 <get_heater_current>:

void get_heater_current(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <get_heater_current+0x40>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <get_heater_current+0x44>)
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fb04 	bl	8004c10 <Moving_Average_Compute>
 8001608:	ec51 0b10 	vmov	r0, r1, d0
 800160c:	a308      	add	r3, pc, #32	; (adr r3, 8001630 <get_heater_current+0x38>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f819 	bl	8000648 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fb0b 	bl	8000c38 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <get_heater_current+0x48>)
 8001626:	6153      	str	r3, [r2, #20]
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f3af 8000 	nop.w
 8001630:	9999999a 	.word	0x9999999a
 8001634:	3fb99999 	.word	0x3fb99999
 8001638:	20000546 	.word	0x20000546
 800163c:	20000f40 	.word	0x20000f40
 8001640:	20000030 	.word	0x20000030
 8001644:	00000000 	.word	0x00000000

08001648 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fea0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001654:	ec53 2b10 	vmov	r2, r3, d0
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff facc 	bl	8000bf8 <__aeabi_d2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	4977      	ldr	r1, [pc, #476]	; (8001840 <get_thermocouple_temperature+0x1f8>)
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fad3 	bl	8004c10 <Moving_Average_Compute>
 800166a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <get_thermocouple_temperature+0x1fc>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d12e      	bne.n	80016d4 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800167a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167e:	f7fe ffe3 	bl	8000648 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	a357      	add	r3, pc, #348	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1a0>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe ffda 	bl	8000648 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4614      	mov	r4, r2
 800169a:	461d      	mov	r5, r3
 800169c:	a354      	add	r3, pc, #336	; (adr r3, 80017f0 <get_thermocouple_temperature+0x1a8>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a6:	f7fe ffcf 	bl	8000648 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe fe13 	bl	80002dc <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	a34e      	add	r3, pc, #312	; (adr r3, 80017f8 <get_thermocouple_temperature+0x1b0>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fe0a 	bl	80002dc <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	495e      	ldr	r1, [pc, #376]	; (8001848 <get_thermocouple_temperature+0x200>)
 80016ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016d2:	e064      	b.n	800179e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 80016d4:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <get_thermocouple_temperature+0x1fc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d12e      	bne.n	800173a <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80016dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e4:	f7fe ffb0 	bl	8000648 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	a343      	add	r3, pc, #268	; (adr r3, 8001800 <get_thermocouple_temperature+0x1b8>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7fe ffa7 	bl	8000648 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4614      	mov	r4, r2
 8001700:	461d      	mov	r5, r3
 8001702:	a341      	add	r3, pc, #260	; (adr r3, 8001808 <get_thermocouple_temperature+0x1c0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170c:	f7fe ff9c 	bl	8000648 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7fe fde0 	bl	80002dc <__adddf3>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	a33a      	add	r3, pc, #232	; (adr r3, 8001810 <get_thermocouple_temperature+0x1c8>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fdd7 	bl	80002dc <__adddf3>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4945      	ldr	r1, [pc, #276]	; (8001848 <get_thermocouple_temperature+0x200>)
 8001734:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001738:	e031      	b.n	800179e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <get_thermocouple_temperature+0x1fc>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d12d      	bne.n	800179e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174a:	f7fe ff7d 	bl	8000648 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	a330      	add	r3, pc, #192	; (adr r3, 8001818 <get_thermocouple_temperature+0x1d0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	a32d      	add	r3, pc, #180	; (adr r3, 8001820 <get_thermocouple_temperature+0x1d8>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001772:	f7fe ff69 	bl	8000648 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4620      	mov	r0, r4
 800177c:	4629      	mov	r1, r5
 800177e:	f7fe fdad 	bl	80002dc <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	a327      	add	r3, pc, #156	; (adr r3, 8001828 <get_thermocouple_temperature+0x1e0>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fda4 	bl	80002dc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	492b      	ldr	r1, [pc, #172]	; (8001848 <get_thermocouple_temperature+0x200>)
 800179a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <get_thermocouple_temperature+0x200>)
 80017a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <get_thermocouple_temperature+0x204>)
 80017a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017aa:	f7fe fd97 	bl	80002dc <__adddf3>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4925      	ldr	r1, [pc, #148]	; (8001848 <get_thermocouple_temperature+0x200>)
 80017b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <get_thermocouple_temperature+0x200>)
 80017ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80017be:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001830 <get_thermocouple_temperature+0x1e8>
 80017c2:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001838 <get_thermocouple_temperature+0x1f0>
 80017c6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ca:	eef0 0a67 	vmov.f32	s1, s15
 80017ce:	f7ff fdb1 	bl	8001334 <clamp>
 80017d2:	eeb0 7a40 	vmov.f32	s14, s0
 80017d6:	eef0 7a60 	vmov.f32	s15, s1
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <get_thermocouple_temperature+0x200>)
 80017dc:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	82211f02 	.word	0x82211f02
 80017ec:	3ed1b769 	.word	0x3ed1b769
 80017f0:	7d232337 	.word	0x7d232337
 80017f4:	3fd46490 	.word	0x3fd46490
 80017f8:	11588fd7 	.word	0x11588fd7
 80017fc:	4034f7d1 	.word	0x4034f7d1
 8001800:	a66d5482 	.word	0xa66d5482
 8001804:	be9fc6dc 	.word	0xbe9fc6dc
 8001808:	56fa2c99 	.word	0x56fa2c99
 800180c:	3fbe8eac 	.word	0x3fbe8eac
 8001810:	aef84767 	.word	0xaef84767
 8001814:	4037c703 	.word	0x4037c703
 8001818:	e0057d0c 	.word	0xe0057d0c
 800181c:	3f0ac0ae 	.word	0x3f0ac0ae
 8001820:	859db92b 	.word	0x859db92b
 8001824:	3fdae99a 	.word	0x3fdae99a
 8001828:	027d19fb 	.word	0x027d19fb
 800182c:	40342538 	.word	0x40342538
 8001830:	00000000 	.word	0x00000000
 8001834:	408f3800 	.word	0x408f3800
	...
 8001840:	200005bc 	.word	0x200005bc
 8001844:	20000460 	.word	0x20000460
 8001848:	20000030 	.word	0x20000030
 800184c:	20000550 	.word	0x20000550

08001850 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <set_heater_duty+0x48>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	88fa      	ldrh	r2, [r7, #6]
 8001860:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe85 	bl	8000574 <__aeabi_i2d>
 800186a:	a309      	add	r3, pc, #36	; (adr r3, 8001890 <set_heater_duty+0x40>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe feea 	bl	8000648 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <set_heater_duty+0x48>)
 800187a:	680c      	ldr	r4, [r1, #0]
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ba 	bl	8000bf8 <__aeabi_d2uiz>
 8001884:	4603      	mov	r3, r0
 8001886:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	33333333 	.word	0x33333333
 8001894:	3fd33333 	.word	0x3fd33333
 8001898:	20001e64 	.word	0x20001e64
 800189c:	00000000 	.word	0x00000000

080018a0 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 80018a0:	b5b0      	push	{r4, r5, r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <heater_on+0xa0>)
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe75 	bl	8000598 <__aeabi_f2d>
 80018ae:	a31e      	add	r3, pc, #120	; (adr r3, 8001928 <heater_on+0x88>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fec8 	bl	8000648 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <heater_on+0xa0>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe67 	bl	8000598 <__aeabi_f2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4620      	mov	r0, r4
 80018d0:	4629      	mov	r1, r5
 80018d2:	f7fe ffe3 	bl	800089c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <heater_on+0xa4>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe feb0 	bl	8000648 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <heater_on+0xa8>)
 80018ee:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <heater_on+0xa8>)
 80018f4:	ed93 7b00 	vldr	d7, [r3]
 80018f8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001930 <heater_on+0x90>
 80018fc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8001938 <heater_on+0x98>
 8001900:	eeb0 0a47 	vmov.f32	s0, s14
 8001904:	eef0 0a67 	vmov.f32	s1, s15
 8001908:	f7ff fd14 	bl	8001334 <clamp>
 800190c:	ec53 2b10 	vmov	r2, r3, d0
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f970 	bl	8000bf8 <__aeabi_d2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff97 	bl	8001850 <set_heater_duty>
}
 8001922:	bf00      	nop
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	a5e353f8 	.word	0xa5e353f8
 800192c:	3fc0c49b 	.word	0x3fc0c49b
 8001930:	00000000 	.word	0x00000000
 8001934:	407f4000 	.word	0x407f4000
	...
 8001940:	20000030 	.word	0x20000030
 8001944:	200005a0 	.word	0x200005a0
 8001948:	200005b0 	.word	0x200005b0

0800194c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff ff7d 	bl	8001850 <set_heater_duty>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	0000      	movs	r0, r0
 800195c:	0000      	movs	r0, r0
	...

08001960 <settings_menue>:

void settings_menue(){
 8001960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001964:	b08d      	sub	sp, #52	; 0x34
 8001966:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001968:	2120      	movs	r1, #32
 800196a:	48c7      	ldr	r0, [pc, #796]	; (8001c88 <settings_menue+0x328>)
 800196c:	f008 fd04 	bl	800a378 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	2b01      	cmp	r3, #1
 8001974:	f040 831c 	bne.w	8001fb0 <settings_menue+0x650>
		if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001978:	4bc4      	ldr	r3, [pc, #784]	; (8001c8c <settings_menue+0x32c>)
 800197a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f7ff f8c7 	bl	8000b18 <__aeabi_dcmpeq>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10b      	bne.n	80019a8 <settings_menue+0x48>
 8001990:	4bbe      	ldr	r3, [pc, #760]	; (8001c8c <settings_menue+0x32c>)
 8001992:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199e:	f7ff f8bb 	bl	8000b18 <__aeabi_dcmpeq>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d026      	beq.n	80019f6 <settings_menue+0x96>
			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019ac:	f7ff fd8c 	bl	80014c8 <RGB_to_BRG>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461c      	mov	r4, r3
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fd87 	bl	80014c8 <RGB_to_BRG>
 80019ba:	4603      	mov	r3, r0
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9400      	str	r4, [sp, #0]
 80019c0:	4bb3      	ldr	r3, [pc, #716]	; (8001c90 <settings_menue+0x330>)
 80019c2:	4ab4      	ldr	r2, [pc, #720]	; (8001c94 <settings_menue+0x334>)
 80019c4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019c8:	2000      	movs	r0, #0
 80019ca:	f004 fe85 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019ce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019d2:	f7ff fd79 	bl	80014c8 <RGB_to_BRG>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fd74 	bl	80014c8 <RGB_to_BRG>
 80019e0:	4603      	mov	r3, r0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	9400      	str	r4, [sp, #0]
 80019e6:	4baa      	ldr	r3, [pc, #680]	; (8001c90 <settings_menue+0x330>)
 80019e8:	4aab      	ldr	r2, [pc, #684]	; (8001c98 <settings_menue+0x338>)
 80019ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ee:	2096      	movs	r0, #150	; 0x96
 80019f0:	f004 fe72 	bl	80066d8 <LCD_PutStr>
 80019f4:	e023      	b.n	8001a3e <settings_menue+0xde>
		}
		else{
			LCD_PutStr(0, 215, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019f6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019fa:	f7ff fd65 	bl	80014c8 <RGB_to_BRG>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461c      	mov	r4, r3
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff fd60 	bl	80014c8 <RGB_to_BRG>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	9400      	str	r4, [sp, #0]
 8001a0e:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <settings_menue+0x330>)
 8001a10:	4aa0      	ldr	r2, [pc, #640]	; (8001c94 <settings_menue+0x334>)
 8001a12:	21d7      	movs	r1, #215	; 0xd7
 8001a14:	2000      	movs	r0, #0
 8001a16:	f004 fe5f 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(150, 215, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001a1a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a1e:	f7ff fd53 	bl	80014c8 <RGB_to_BRG>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461c      	mov	r4, r3
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fd4e 	bl	80014c8 <RGB_to_BRG>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	9400      	str	r4, [sp, #0]
 8001a32:	4b97      	ldr	r3, [pc, #604]	; (8001c90 <settings_menue+0x330>)
 8001a34:	4a98      	ldr	r2, [pc, #608]	; (8001c98 <settings_menue+0x338>)
 8001a36:	21d7      	movs	r1, #215	; 0xd7
 8001a38:	2096      	movs	r0, #150	; 0x96
 8001a3a:	f004 fe4d 	bl	80066d8 <LCD_PutStr>
		}


		TIM2->CNT = 1000;
 8001a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001a62:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a66:	f7ff fd2f 	bl	80014c8 <RGB_to_BRG>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461c      	mov	r4, r3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fd2a 	bl	80014c8 <RGB_to_BRG>
 8001a74:	4603      	mov	r3, r0
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	9400      	str	r4, [sp, #0]
 8001a7a:	4b85      	ldr	r3, [pc, #532]	; (8001c90 <settings_menue+0x330>)
 8001a7c:	4a87      	ldr	r2, [pc, #540]	; (8001c9c <settings_menue+0x33c>)
 8001a7e:	210c      	movs	r1, #12
 8001a80:	203c      	movs	r0, #60	; 0x3c
 8001a82:	f004 fe29 	bl	80066d8 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a86:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a8a:	f7ff fd1d 	bl	80014c8 <RGB_to_BRG>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2328      	movs	r3, #40	; 0x28
 8001a94:	22f0      	movs	r2, #240	; 0xf0
 8001a96:	2128      	movs	r1, #40	; 0x28
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f004 fddf 	bl	800665c <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a9e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001aa2:	f7ff fd11 	bl	80014c8 <RGB_to_BRG>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2329      	movs	r3, #41	; 0x29
 8001aac:	22f0      	movs	r2, #240	; 0xf0
 8001aae:	2129      	movs	r1, #41	; 0x29
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f004 fdd3 	bl	800665c <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001ab6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001aba:	f7ff fd05 	bl	80014c8 <RGB_to_BRG>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	232a      	movs	r3, #42	; 0x2a
 8001ac4:	22f0      	movs	r2, #240	; 0xf0
 8001ac6:	212a      	movs	r1, #42	; 0x2a
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f004 fdc7 	bl	800665c <LCD_DrawLine>

		HAL_Delay(500);
 8001ace:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad2:	f004 ff1b 	bl	800690c <HAL_Delay>
		while(menu_active == 1){
 8001ad6:	e267      	b.n	8001fa8 <settings_menue+0x648>
			if(menue_level == 0){
 8001ad8:	8c3b      	ldrh	r3, [r7, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d120      	bne.n	8001b20 <settings_menue+0x1c0>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd35 	bl	8000554 <__aeabi_ui2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001c70 <settings_menue+0x310>
 8001af2:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8001c78 <settings_menue+0x318>
 8001af6:	ec43 2b10 	vmov	d0, r2, r3
 8001afa:	f7ff fc1b 	bl	8001334 <clamp>
 8001afe:	ec53 2b10 	vmov	r2, r3, d0
 8001b02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f875 	bl	8000bf8 <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001b20:	8c3b      	ldrh	r3, [r7, #32]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 8091 	bne.w	8001c4a <settings_menue+0x2ea>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001b28:	69b8      	ldr	r0, [r7, #24]
 8001b2a:	f7fe fd35 	bl	8000598 <__aeabi_f2d>
 8001b2e:	4604      	mov	r4, r0
 8001b30:	460d      	mov	r5, r1
 8001b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fd0b 	bl	8000554 <__aeabi_ui2d>
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <settings_menue+0x340>)
 8001b44:	f7fe fbc8 	bl	80002d8 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f872 	bl	8000c38 <__aeabi_d2f>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd1e 	bl	8000598 <__aeabi_f2d>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b64:	f7fe fe9a 	bl	800089c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4690      	mov	r8, r2
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b86:	ee17 0a90 	vmov	r0, s15
 8001b8a:	f7fe fd05 	bl	8000598 <__aeabi_f2d>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b94:	00c9      	lsls	r1, r1, #3
 8001b96:	483d      	ldr	r0, [pc, #244]	; (8001c8c <settings_menue+0x32c>)
 8001b98:	180c      	adds	r4, r1, r0
 8001b9a:	4640      	mov	r0, r8
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	f7fe fb9b 	bl	80002d8 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001baa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d002      	beq.n	8001bb6 <settings_menue+0x256>
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d12c      	bne.n	8001c10 <settings_menue+0x2b0>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4a34      	ldr	r2, [pc, #208]	; (8001c8c <settings_menue+0x32c>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ffef 	bl	8000ba8 <__aeabi_d2iz>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfb8      	it	lt
 8001bd0:	425b      	neglt	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcce 	bl	8000574 <__aeabi_i2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c80 <settings_menue+0x320>
 8001be0:	ec43 2b10 	vmov	d0, r2, r3
 8001be4:	f013 fb30 	bl	8015248 <fmod>
 8001be8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bec:	eef0 7a60 	vmov.f32	s15, s1
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <settings_menue+0x32c>)
 8001bf6:	189c      	adds	r4, r3, r2
 8001bf8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfc:	eef0 0a67 	vmov.f32	s1, s15
 8001c00:	f013 fb50 	bl	80152a4 <round>
 8001c04:	eeb0 7a40 	vmov.f32	s14, s0
 8001c08:	eef0 7a60 	vmov.f32	s15, s1
 8001c0c:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d019      	beq.n	8001c4a <settings_menue+0x2ea>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001c16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <settings_menue+0x32c>)
 8001c1c:	4413      	add	r3, r2
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ffbf 	bl	8000ba8 <__aeabi_d2iz>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c30:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4914      	ldr	r1, [pc, #80]	; (8001c8c <settings_menue+0x32c>)
 8001c3a:	185c      	adds	r4, r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7fe fc99 	bl	8000574 <__aeabi_i2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c4c:	2b0c      	cmp	r3, #12
 8001c4e:	d906      	bls.n	8001c5e <settings_menue+0x2fe>
							menu_cursor_position = menu_length-1;
 8001c50:	230c      	movs	r3, #12
 8001c52:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 6){
 8001c5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d91f      	bls.n	8001ca4 <settings_menue+0x344>
				menue_start = menu_cursor_position-6;
 8001c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c66:	3b06      	subs	r3, #6
 8001c68:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c6a:	e01d      	b.n	8001ca8 <settings_menue+0x348>
 8001c6c:	f3af 8000 	nop.w
 8001c70:	00000000 	.word	0x00000000
 8001c74:	412e8480 	.word	0x412e8480
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	408f4000 	.word	0x408f4000
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40000000 	.word	0x40000000
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	20000550 	.word	0x20000550
 8001c90:	08016748 	.word	0x08016748
 8001c94:	08015568 	.word	0x08015568
 8001c98:	08015574 	.word	0x08015574
 8001c9c:	0801557c 	.word	0x0801557c
 8001ca0:	408f4000 	.word	0x408f4000
			}
			else{
				menue_start = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001ca8:	2120      	movs	r1, #32
 8001caa:	4891      	ldr	r0, [pc, #580]	; (8001ef0 <settings_menue+0x590>)
 8001cac:	f008 fb64 	bl	800a378 <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d127      	bne.n	8001d06 <settings_menue+0x3a6>
 8001cb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d824      	bhi.n	8001d06 <settings_menue+0x3a6>
				if(menue_level == 0){
 8001cbc:	8c3b      	ldrh	r3, [r7, #32]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <settings_menue+0x37e>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001cc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4a8b      	ldr	r2, [pc, #556]	; (8001ef4 <settings_menue+0x594>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe ffb1 	bl	8000c38 <__aeabi_d2f>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001cda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001cde:	8c3b      	ldrh	r3, [r7, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <settings_menue+0x392>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001cea:	005a      	lsls	r2, r3, #1
 8001cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001cf2:	8c3b      	ldrh	r3, [r7, #32]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bfb8      	it	lt
 8001cfa:	425b      	neglt	r3, r3
 8001cfc:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001cfe:	20c8      	movs	r0, #200	; 0xc8
 8001d00:	f004 fe04 	bl	800690c <HAL_Delay>
 8001d04:	e02e      	b.n	8001d64 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001d06:	2120      	movs	r1, #32
 8001d08:	4879      	ldr	r0, [pc, #484]	; (8001ef0 <settings_menue+0x590>)
 8001d0a:	f008 fb35 	bl	800a378 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <settings_menue+0x3c0>
 8001d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d102      	bne.n	8001d20 <settings_menue+0x3c0>
				menu_active = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	83fb      	strh	r3, [r7, #30]
 8001d1e:	e021      	b.n	8001d64 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001d20:	2120      	movs	r1, #32
 8001d22:	4873      	ldr	r0, [pc, #460]	; (8001ef0 <settings_menue+0x590>)
 8001d24:	f008 fb28 	bl	800a378 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <settings_menue+0x3e0>
 8001d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d30:	2b0b      	cmp	r3, #11
 8001d32:	d105      	bne.n	8001d40 <settings_menue+0x3e0>
				menu_active = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001d38:	486e      	ldr	r0, [pc, #440]	; (8001ef4 <settings_menue+0x594>)
 8001d3a:	f7ff fa33 	bl	80011a4 <FlashWrite>
 8001d3e:	e011      	b.n	8001d64 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d40:	2120      	movs	r1, #32
 8001d42:	486b      	ldr	r0, [pc, #428]	; (8001ef0 <settings_menue+0x590>)
 8001d44:	f008 fb18 	bl	800a378 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d10a      	bne.n	8001d64 <settings_menue+0x404>
 8001d4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d50:	2b0a      	cmp	r3, #10
 8001d52:	d107      	bne.n	8001d64 <settings_menue+0x404>
				flash_values = default_flash_values;
 8001d54:	4a67      	ldr	r2, [pc, #412]	; (8001ef4 <settings_menue+0x594>)
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <settings_menue+0x598>)
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2350      	movs	r3, #80	; 0x50
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f00f feb9 	bl	8011ad6 <memcpy>
			}

			for(int i = menue_start;i<=menue_start+6;i++){
 8001d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e118      	b.n	8001f9c <settings_menue+0x63c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d12b      	bne.n	8001dca <settings_menue+0x46a>
 8001d72:	8c3b      	ldrh	r3, [r7, #32]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d128      	bne.n	8001dca <settings_menue+0x46a>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	0091      	lsls	r1, r2, #2
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	332d      	adds	r3, #45	; 0x2d
 8001d94:	b29c      	uxth	r4, r3
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4a56      	ldr	r2, [pc, #344]	; (8001efc <settings_menue+0x59c>)
 8001da2:	189d      	adds	r5, r3, r2
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fb8f 	bl	80014c8 <RGB_to_BRG>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461e      	mov	r6, r3
 8001dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001db2:	f7ff fb89 	bl	80014c8 <RGB_to_BRG>
 8001db6:	4603      	mov	r3, r0
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	9600      	str	r6, [sp, #0]
 8001dbc:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <settings_menue+0x5a0>)
 8001dbe:	462a      	mov	r2, r5
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	2005      	movs	r0, #5
 8001dc4:	f004 fc88 	bl	80066d8 <LCD_PutStr>
 8001dc8:	e027      	b.n	8001e1a <settings_menue+0x4ba>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	0091      	lsls	r1, r2, #2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	460b      	mov	r3, r1
 8001de0:	4413      	add	r3, r2
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	332d      	adds	r3, #45	; 0x2d
 8001de6:	b29c      	uxth	r4, r3
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4a42      	ldr	r2, [pc, #264]	; (8001efc <settings_menue+0x59c>)
 8001df4:	189d      	adds	r5, r3, r2
 8001df6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dfa:	f7ff fb65 	bl	80014c8 <RGB_to_BRG>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461e      	mov	r6, r3
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fb60 	bl	80014c8 <RGB_to_BRG>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	9600      	str	r6, [sp, #0]
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <settings_menue+0x5a0>)
 8001e10:	462a      	mov	r2, r5
 8001e12:	4621      	mov	r1, r4
 8001e14:	2005      	movs	r0, #5
 8001e16:	f004 fc5f 	bl	80066d8 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2214      	movs	r2, #20
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00f fdd8 	bl	80119d6 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <settings_menue+0x594>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4638      	mov	r0, r7
 8001e34:	4933      	ldr	r1, [pc, #204]	; (8001f04 <settings_menue+0x5a4>)
 8001e36:	f00f fd6b 	bl	8011910 <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <settings_menue+0x594>)
 8001e40:	4413      	add	r3, r2
 8001e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <settings_menue+0x5a8>)
 8001e4c:	f7fe fe6e 	bl	8000b2c <__aeabi_dcmplt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <settings_menue+0x508>
					str[1] = 32;
 8001e56:	2320      	movs	r3, #32
 8001e58:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001e62:	2320      	movs	r3, #32
 8001e64:	713b      	strb	r3, [r7, #4]
 8001e66:	e011      	b.n	8001e8c <settings_menue+0x52c>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <settings_menue+0x594>)
 8001e6e:	4413      	add	r3, r2
 8001e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e74:	a31c      	add	r3, pc, #112	; (adr r3, 8001ee8 <settings_menue+0x588>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fe57 	bl	8000b2c <__aeabi_dcmplt>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <settings_menue+0x52c>
					str[2] = 32;
 8001e84:	2320      	movs	r3, #32
 8001e86:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b09      	cmp	r3, #9
 8001e90:	dc5d      	bgt.n	8001f4e <settings_menue+0x5ee>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d138      	bne.n	8001f0c <settings_menue+0x5ac>
 8001e9a:	8c3b      	ldrh	r3, [r7, #32]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d135      	bne.n	8001f0c <settings_menue+0x5ac>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001ea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	0091      	lsls	r1, r2, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	332d      	adds	r3, #45	; 0x2d
 8001ebc:	b29c      	uxth	r4, r3
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fb02 	bl	80014c8 <RGB_to_BRG>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ecc:	f7ff fafc 	bl	80014c8 <RGB_to_BRG>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	463a      	mov	r2, r7
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	9500      	str	r5, [sp, #0]
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <settings_menue+0x5a0>)
 8001eda:	4621      	mov	r1, r4
 8001edc:	20c8      	movs	r0, #200	; 0xc8
 8001ede:	f004 fbfb 	bl	80066d8 <LCD_PutStr>
 8001ee2:	e034      	b.n	8001f4e <settings_menue+0x5ee>
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	00000000 	.word	0x00000000
 8001eec:	4058e000 	.word	0x4058e000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	20000550 	.word	0x20000550
 8001ef8:	20000080 	.word	0x20000080
 8001efc:	200000d0 	.word	0x200000d0
 8001f00:	08016748 	.word	0x08016748
 8001f04:	08015588 	.word	0x08015588
 8001f08:	40230000 	.word	0x40230000
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	0091      	lsls	r1, r2, #2
 8001f1e:	461a      	mov	r2, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	4413      	add	r3, r2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	332d      	adds	r3, #45	; 0x2d
 8001f28:	b29c      	uxth	r4, r3
 8001f2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f2e:	f7ff facb 	bl	80014c8 <RGB_to_BRG>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461d      	mov	r5, r3
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fac6 	bl	80014c8 <RGB_to_BRG>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	463a      	mov	r2, r7
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	9500      	str	r5, [sp, #0]
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <settings_menue+0x65c>)
 8001f46:	4621      	mov	r1, r4
 8001f48:	20c8      	movs	r0, #200	; 0xc8
 8001f4a:	f004 fbc5 	bl	80066d8 <LCD_PutStr>
					}
				}
				if(i >= menu_length-3){
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	dd20      	ble.n	8001f96 <settings_menue+0x636>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	461a      	mov	r2, r3
 8001f64:	0091      	lsls	r1, r2, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	332d      	adds	r3, #45	; 0x2d
 8001f70:	b29c      	uxth	r4, r3
 8001f72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f76:	f7ff faa7 	bl	80014c8 <RGB_to_BRG>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff faa2 	bl	80014c8 <RGB_to_BRG>
 8001f84:	4603      	mov	r3, r0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	9500      	str	r5, [sp, #0]
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <settings_menue+0x65c>)
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <settings_menue+0x660>)
 8001f8e:	4621      	mov	r1, r4
 8001f90:	20c8      	movs	r0, #200	; 0xc8
 8001f92:	f004 fba1 	bl	80066d8 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+6;i++){
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f9e:	3306      	adds	r3, #6
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f77f aee1 	ble.w	8001d6a <settings_menue+0x40a>
		while(menu_active == 1){
 8001fa8:	8bfb      	ldrh	r3, [r7, #30]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f43f ad94 	beq.w	8001ad8 <settings_menue+0x178>
				}

			}
		}
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	372c      	adds	r7, #44	; 0x2c
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fba:	bf00      	nop
 8001fbc:	08016748 	.word	0x08016748
 8001fc0:	08015590 	.word	0x08015590
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <update_display>:

void update_display(){
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001fce:	4b86      	ldr	r3, [pc, #536]	; (80021e8 <update_display+0x220>)
 8001fd0:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f7fe fd9c 	bl	8000b18 <__aeabi_dcmpeq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <update_display+0x38>
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <update_display+0x220>)
 8001fe8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ff4:	f7fe fd90 	bl	8000b18 <__aeabi_dcmpeq>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 82f0 	beq.w	80025e0 <update_display+0x618>
		memset(&buffer, '\0', sizeof(buffer));
 8002000:	2228      	movs	r2, #40	; 0x28
 8002002:	2100      	movs	r1, #0
 8002004:	4879      	ldr	r0, [pc, #484]	; (80021ec <update_display+0x224>)
 8002006:	f00f fce6 	bl	80119d6 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 800200a:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <update_display+0x228>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	4978      	ldr	r1, [pc, #480]	; (80021f4 <update_display+0x22c>)
 8002012:	4876      	ldr	r0, [pc, #472]	; (80021ec <update_display+0x224>)
 8002014:	f00f fc7c 	bl	8011910 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8002018:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <update_display+0x228>)
 800201a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201e:	a370      	add	r3, pc, #448	; (adr r3, 80021e0 <update_display+0x218>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fd82 	bl	8000b2c <__aeabi_dcmplt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <update_display+0x72>
			buffer[2] = 32;
 800202e:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <update_display+0x224>)
 8002030:	2220      	movs	r2, #32
 8002032:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8002034:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <update_display+0x224>)
 8002036:	2220      	movs	r2, #32
 8002038:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800203a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800203e:	f7ff fa43 	bl	80014c8 <RGB_to_BRG>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff fa3e 	bl	80014c8 <RGB_to_BRG>
 800204c:	4603      	mov	r3, r0
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	9400      	str	r4, [sp, #0]
 8002052:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <update_display+0x230>)
 8002054:	4a65      	ldr	r2, [pc, #404]	; (80021ec <update_display+0x224>)
 8002056:	214b      	movs	r1, #75	; 0x4b
 8002058:	200e      	movs	r0, #14
 800205a:	f004 fb3d 	bl	80066d8 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <update_display+0x228>)
 8002060:	edd3 7a05 	vldr	s15, [r3, #20]
 8002064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d512      	bpl.n	8002098 <update_display+0xd0>
			LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002072:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002076:	f7ff fa27 	bl	80014c8 <RGB_to_BRG>
 800207a:	4603      	mov	r3, r0
 800207c:	461c      	mov	r4, r3
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fa22 	bl	80014c8 <RGB_to_BRG>
 8002084:	4603      	mov	r3, r0
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	9400      	str	r4, [sp, #0]
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <update_display+0x230>)
 800208c:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <update_display+0x234>)
 800208e:	21a5      	movs	r1, #165	; 0xa5
 8002090:	200a      	movs	r0, #10
 8002092:	f004 fb21 	bl	80066d8 <LCD_PutStr>
 8002096:	e02e      	b.n	80020f6 <update_display+0x12e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002098:	2228      	movs	r2, #40	; 0x28
 800209a:	2100      	movs	r1, #0
 800209c:	4853      	ldr	r0, [pc, #332]	; (80021ec <update_display+0x224>)
 800209e:	f00f fc9a 	bl	80119d6 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 80020a2:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <update_display+0x228>)
 80020a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020a8:	4952      	ldr	r1, [pc, #328]	; (80021f4 <update_display+0x22c>)
 80020aa:	4850      	ldr	r0, [pc, #320]	; (80021ec <update_display+0x224>)
 80020ac:	f00f fc30 	bl	8011910 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 80020b0:	4b4f      	ldr	r3, [pc, #316]	; (80021f0 <update_display+0x228>)
 80020b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020b6:	a34a      	add	r3, pc, #296	; (adr r3, 80021e0 <update_display+0x218>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fd36 	bl	8000b2c <__aeabi_dcmplt>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <update_display+0x10a>
				buffer[2] = 32;
 80020c6:	4b49      	ldr	r3, [pc, #292]	; (80021ec <update_display+0x224>)
 80020c8:	2220      	movs	r2, #32
 80020ca:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <update_display+0x224>)
 80020ce:	2220      	movs	r2, #32
 80020d0:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020d6:	f7ff f9f7 	bl	80014c8 <RGB_to_BRG>
 80020da:	4603      	mov	r3, r0
 80020dc:	461c      	mov	r4, r3
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff f9f2 	bl	80014c8 <RGB_to_BRG>
 80020e4:	4603      	mov	r3, r0
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	9400      	str	r4, [sp, #0]
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <update_display+0x230>)
 80020ec:	4a3f      	ldr	r2, [pc, #252]	; (80021ec <update_display+0x224>)
 80020ee:	21a5      	movs	r1, #165	; 0xa5
 80020f0:	200e      	movs	r0, #14
 80020f2:	f004 faf1 	bl	80066d8 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 80020f6:	2228      	movs	r2, #40	; 0x28
 80020f8:	2100      	movs	r1, #0
 80020fa:	483c      	ldr	r0, [pc, #240]	; (80021ec <update_display+0x224>)
 80020fc:	f00f fc6b 	bl	80119d6 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <update_display+0x228>)
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa47 	bl	8000598 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	493c      	ldr	r1, [pc, #240]	; (8002200 <update_display+0x238>)
 8002110:	4836      	ldr	r0, [pc, #216]	; (80021ec <update_display+0x224>)
 8002112:	f00f fbfd 	bl	8011910 <siprintf>
		LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002116:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211a:	f7ff f9d5 	bl	80014c8 <RGB_to_BRG>
 800211e:	4603      	mov	r3, r0
 8002120:	461c      	mov	r4, r3
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff f9d0 	bl	80014c8 <RGB_to_BRG>
 8002128:	4603      	mov	r3, r0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	9400      	str	r4, [sp, #0]
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <update_display+0x23c>)
 8002130:	4a2e      	ldr	r2, [pc, #184]	; (80021ec <update_display+0x224>)
 8002132:	21ff      	movs	r1, #255	; 0xff
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	f004 facf 	bl	80066d8 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 800213a:	2228      	movs	r2, #40	; 0x28
 800213c:	2100      	movs	r1, #0
 800213e:	482b      	ldr	r0, [pc, #172]	; (80021ec <update_display+0x224>)
 8002140:	f00f fc49 	bl	80119d6 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <update_display+0x228>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa25 	bl	8000598 <__aeabi_f2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	492b      	ldr	r1, [pc, #172]	; (8002200 <update_display+0x238>)
 8002154:	4825      	ldr	r0, [pc, #148]	; (80021ec <update_display+0x224>)
 8002156:	f00f fbdb 	bl	8011910 <siprintf>
		LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800215a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800215e:	f7ff f9b3 	bl	80014c8 <RGB_to_BRG>
 8002162:	4603      	mov	r3, r0
 8002164:	461c      	mov	r4, r3
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff f9ae 	bl	80014c8 <RGB_to_BRG>
 800216c:	4603      	mov	r3, r0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	9400      	str	r4, [sp, #0]
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <update_display+0x23c>)
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <update_display+0x224>)
 8002176:	f240 1113 	movw	r1, #275	; 0x113
 800217a:	2064      	movs	r0, #100	; 0x64
 800217c:	f004 faac 	bl	80066d8 <LCD_PutStr>

		if(handle == T210){
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <update_display+0x240>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d112      	bne.n	80021ae <update_display+0x1e6>
			LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002188:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800218c:	f7ff f99c 	bl	80014c8 <RGB_to_BRG>
 8002190:	4603      	mov	r3, r0
 8002192:	461c      	mov	r4, r3
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff f997 	bl	80014c8 <RGB_to_BRG>
 800219a:	4603      	mov	r3, r0
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	9400      	str	r4, [sp, #0]
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <update_display+0x23c>)
 80021a2:	4a1a      	ldr	r2, [pc, #104]	; (800220c <update_display+0x244>)
 80021a4:	21eb      	movs	r1, #235	; 0xeb
 80021a6:	2064      	movs	r0, #100	; 0x64
 80021a8:	f004 fa96 	bl	80066d8 <LCD_PutStr>
 80021ac:	e048      	b.n	8002240 <update_display+0x278>
		}
		else if(handle == T245){
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <update_display+0x240>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d12e      	bne.n	8002214 <update_display+0x24c>
			LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021ba:	f7ff f985 	bl	80014c8 <RGB_to_BRG>
 80021be:	4603      	mov	r3, r0
 80021c0:	461c      	mov	r4, r3
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff f980 	bl	80014c8 <RGB_to_BRG>
 80021c8:	4603      	mov	r3, r0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	9400      	str	r4, [sp, #0]
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <update_display+0x23c>)
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <update_display+0x248>)
 80021d2:	21eb      	movs	r1, #235	; 0xeb
 80021d4:	2064      	movs	r0, #100	; 0x64
 80021d6:	f004 fa7f 	bl	80066d8 <LCD_PutStr>
 80021da:	e031      	b.n	8002240 <update_display+0x278>
 80021dc:	f3af 8000 	nop.w
 80021e0:	00000000 	.word	0x00000000
 80021e4:	4058e000 	.word	0x4058e000
 80021e8:	20000550 	.word	0x20000550
 80021ec:	200004a8 	.word	0x200004a8
 80021f0:	20000030 	.word	0x20000030
 80021f4:	08015598 	.word	0x08015598
 80021f8:	08017738 	.word	0x08017738
 80021fc:	0801559c 	.word	0x0801559c
 8002200:	080155a4 	.word	0x080155a4
 8002204:	08015778 	.word	0x08015778
 8002208:	20000460 	.word	0x20000460
 800220c:	080155ac 	.word	0x080155ac
 8002210:	080155b4 	.word	0x080155b4
		}
		else if(handle == NT115){
 8002214:	4bab      	ldr	r3, [pc, #684]	; (80024c4 <update_display+0x4fc>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <update_display+0x278>
			LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800221c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002220:	f7ff f952 	bl	80014c8 <RGB_to_BRG>
 8002224:	4603      	mov	r3, r0
 8002226:	461c      	mov	r4, r3
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff f94d 	bl	80014c8 <RGB_to_BRG>
 800222e:	4603      	mov	r3, r0
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9400      	str	r4, [sp, #0]
 8002234:	4ba4      	ldr	r3, [pc, #656]	; (80024c8 <update_display+0x500>)
 8002236:	4aa5      	ldr	r2, [pc, #660]	; (80024cc <update_display+0x504>)
 8002238:	21eb      	movs	r1, #235	; 0xeb
 800223a:	2064      	movs	r0, #100	; 0x64
 800223c:	f004 fa4c 	bl	80066d8 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002240:	4ba3      	ldr	r3, [pc, #652]	; (80024d0 <update_display+0x508>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <update_display+0x292>
 8002248:	4ba1      	ldr	r3, [pc, #644]	; (80024d0 <update_display+0x508>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d004      	beq.n	800225a <update_display+0x292>
 8002250:	4b9f      	ldr	r3, [pc, #636]	; (80024d0 <update_display+0x508>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b04      	cmp	r3, #4
 8002256:	f040 8098 	bne.w	800238a <update_display+0x3c2>
 800225a:	4b9e      	ldr	r3, [pc, #632]	; (80024d4 <update_display+0x50c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 8093 	bne.w	800238a <update_display+0x3c2>
			UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8002264:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002268:	f7ff f92e 	bl	80014c8 <RGB_to_BRG>
 800226c:	4603      	mov	r3, r0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002274:	22e6      	movs	r2, #230	; 0xe6
 8002276:	2137      	movs	r1, #55	; 0x37
 8002278:	20d2      	movs	r0, #210	; 0xd2
 800227a:	f00c fe05 	bl	800ee88 <UG_FillFrame>
			LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff f922 	bl	80014c8 <RGB_to_BRG>
 8002284:	4603      	mov	r3, r0
 8002286:	461c      	mov	r4, r3
 8002288:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800228c:	f7ff f91c 	bl	80014c8 <RGB_to_BRG>
 8002290:	4603      	mov	r3, r0
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9400      	str	r4, [sp, #0]
 8002296:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <update_display+0x510>)
 8002298:	4a90      	ldr	r2, [pc, #576]	; (80024dc <update_display+0x514>)
 800229a:	213a      	movs	r1, #58	; 0x3a
 800229c:	20d6      	movs	r0, #214	; 0xd6
 800229e:	f004 fa1b 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff f910 	bl	80014c8 <RGB_to_BRG>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461c      	mov	r4, r3
 80022ac:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b0:	f7ff f90a 	bl	80014c8 <RGB_to_BRG>
 80022b4:	4603      	mov	r3, r0
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	9400      	str	r4, [sp, #0]
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <update_display+0x510>)
 80022bc:	4a88      	ldr	r2, [pc, #544]	; (80024e0 <update_display+0x518>)
 80022be:	215c      	movs	r1, #92	; 0x5c
 80022c0:	20d8      	movs	r0, #216	; 0xd8
 80022c2:	f004 fa09 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff f8fe 	bl	80014c8 <RGB_to_BRG>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461c      	mov	r4, r3
 80022d0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022d4:	f7ff f8f8 	bl	80014c8 <RGB_to_BRG>
 80022d8:	4603      	mov	r3, r0
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9400      	str	r4, [sp, #0]
 80022de:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <update_display+0x510>)
 80022e0:	4a7e      	ldr	r2, [pc, #504]	; (80024dc <update_display+0x514>)
 80022e2:	217e      	movs	r1, #126	; 0x7e
 80022e4:	20d6      	movs	r0, #214	; 0xd6
 80022e6:	f004 f9f7 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff f8ec 	bl	80014c8 <RGB_to_BRG>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461c      	mov	r4, r3
 80022f4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022f8:	f7ff f8e6 	bl	80014c8 <RGB_to_BRG>
 80022fc:	4603      	mov	r3, r0
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	9400      	str	r4, [sp, #0]
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <update_display+0x510>)
 8002304:	4a76      	ldr	r2, [pc, #472]	; (80024e0 <update_display+0x518>)
 8002306:	21a1      	movs	r1, #161	; 0xa1
 8002308:	20d8      	movs	r0, #216	; 0xd8
 800230a:	f004 f9e5 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff f8da 	bl	80014c8 <RGB_to_BRG>
 8002314:	4603      	mov	r3, r0
 8002316:	461c      	mov	r4, r3
 8002318:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800231c:	f7ff f8d4 	bl	80014c8 <RGB_to_BRG>
 8002320:	4603      	mov	r3, r0
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	9400      	str	r4, [sp, #0]
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <update_display+0x510>)
 8002328:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <update_display+0x514>)
 800232a:	21c2      	movs	r1, #194	; 0xc2
 800232c:	20d6      	movs	r0, #214	; 0xd6
 800232e:	f004 f9d3 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff f8c8 	bl	80014c8 <RGB_to_BRG>
 8002338:	4603      	mov	r3, r0
 800233a:	461c      	mov	r4, r3
 800233c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002340:	f7ff f8c2 	bl	80014c8 <RGB_to_BRG>
 8002344:	4603      	mov	r3, r0
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9400      	str	r4, [sp, #0]
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <update_display+0x510>)
 800234c:	4a64      	ldr	r2, [pc, #400]	; (80024e0 <update_display+0x518>)
 800234e:	21e4      	movs	r1, #228	; 0xe4
 8002350:	20d8      	movs	r0, #216	; 0xd8
 8002352:	f004 f9c1 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff f8b6 	bl	80014c8 <RGB_to_BRG>
 800235c:	4603      	mov	r3, r0
 800235e:	461c      	mov	r4, r3
 8002360:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002364:	f7ff f8b0 	bl	80014c8 <RGB_to_BRG>
 8002368:	4603      	mov	r3, r0
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	9400      	str	r4, [sp, #0]
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <update_display+0x510>)
 8002370:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <update_display+0x514>)
 8002372:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002376:	20d6      	movs	r0, #214	; 0xd6
 8002378:	f004 f9ae 	bl	80066d8 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800237c:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <update_display+0x50c>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002382:	4b58      	ldr	r3, [pc, #352]	; (80024e4 <update_display+0x51c>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e129      	b.n	80025de <update_display+0x616>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <update_display+0x508>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 80b8 	bne.w	8002504 <update_display+0x53c>
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <update_display+0x51c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 80b3 	bne.w	8002504 <update_display+0x53c>
			UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800239e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023a2:	f7ff f891 	bl	80014c8 <RGB_to_BRG>
 80023a6:	4603      	mov	r3, r0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80023ae:	22e6      	movs	r2, #230	; 0xe6
 80023b0:	2137      	movs	r1, #55	; 0x37
 80023b2:	20d2      	movs	r0, #210	; 0xd2
 80023b4:	f00c fd68 	bl	800ee88 <UG_FillFrame>
			LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff f885 	bl	80014c8 <RGB_to_BRG>
 80023be:	4603      	mov	r3, r0
 80023c0:	461c      	mov	r4, r3
 80023c2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023c6:	f7ff f87f 	bl	80014c8 <RGB_to_BRG>
 80023ca:	4603      	mov	r3, r0
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	9400      	str	r4, [sp, #0]
 80023d0:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <update_display+0x510>)
 80023d2:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <update_display+0x520>)
 80023d4:	213a      	movs	r1, #58	; 0x3a
 80023d6:	20d6      	movs	r0, #214	; 0xd6
 80023d8:	f004 f97e 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff f873 	bl	80014c8 <RGB_to_BRG>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461c      	mov	r4, r3
 80023e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ea:	f7ff f86d 	bl	80014c8 <RGB_to_BRG>
 80023ee:	4603      	mov	r3, r0
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	9400      	str	r4, [sp, #0]
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <update_display+0x510>)
 80023f6:	4a3d      	ldr	r2, [pc, #244]	; (80024ec <update_display+0x524>)
 80023f8:	215c      	movs	r1, #92	; 0x5c
 80023fa:	20d6      	movs	r0, #214	; 0xd6
 80023fc:	f004 f96c 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff f861 	bl	80014c8 <RGB_to_BRG>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800240e:	f7ff f85b 	bl	80014c8 <RGB_to_BRG>
 8002412:	4603      	mov	r3, r0
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	9400      	str	r4, [sp, #0]
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <update_display+0x510>)
 800241a:	4a35      	ldr	r2, [pc, #212]	; (80024f0 <update_display+0x528>)
 800241c:	217e      	movs	r1, #126	; 0x7e
 800241e:	20d6      	movs	r0, #214	; 0xd6
 8002420:	f004 f95a 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff f84f 	bl	80014c8 <RGB_to_BRG>
 800242a:	4603      	mov	r3, r0
 800242c:	461c      	mov	r4, r3
 800242e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002432:	f7ff f849 	bl	80014c8 <RGB_to_BRG>
 8002436:	4603      	mov	r3, r0
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	9400      	str	r4, [sp, #0]
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <update_display+0x510>)
 800243e:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <update_display+0x52c>)
 8002440:	21a1      	movs	r1, #161	; 0xa1
 8002442:	20d6      	movs	r0, #214	; 0xd6
 8002444:	f004 f948 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff f83d 	bl	80014c8 <RGB_to_BRG>
 800244e:	4603      	mov	r3, r0
 8002450:	461c      	mov	r4, r3
 8002452:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002456:	f7ff f837 	bl	80014c8 <RGB_to_BRG>
 800245a:	4603      	mov	r3, r0
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9400      	str	r4, [sp, #0]
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <update_display+0x510>)
 8002462:	4a25      	ldr	r2, [pc, #148]	; (80024f8 <update_display+0x530>)
 8002464:	21c2      	movs	r1, #194	; 0xc2
 8002466:	20d6      	movs	r0, #214	; 0xd6
 8002468:	f004 f936 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff f82b 	bl	80014c8 <RGB_to_BRG>
 8002472:	4603      	mov	r3, r0
 8002474:	461c      	mov	r4, r3
 8002476:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800247a:	f7ff f825 	bl	80014c8 <RGB_to_BRG>
 800247e:	4603      	mov	r3, r0
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	9400      	str	r4, [sp, #0]
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <update_display+0x510>)
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <update_display+0x534>)
 8002488:	21e4      	movs	r1, #228	; 0xe4
 800248a:	20d6      	movs	r0, #214	; 0xd6
 800248c:	f004 f924 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff f819 	bl	80014c8 <RGB_to_BRG>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800249e:	f7ff f813 	bl	80014c8 <RGB_to_BRG>
 80024a2:	4603      	mov	r3, r0
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9400      	str	r4, [sp, #0]
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <update_display+0x510>)
 80024aa:	4a15      	ldr	r2, [pc, #84]	; (8002500 <update_display+0x538>)
 80024ac:	f44f 7183 	mov.w	r1, #262	; 0x106
 80024b0:	20d6      	movs	r0, #214	; 0xd6
 80024b2:	f004 f911 	bl	80066d8 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <update_display+0x51c>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <update_display+0x50c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e08c      	b.n	80025de <update_display+0x616>
 80024c4:	20000460 	.word	0x20000460
 80024c8:	08015778 	.word	0x08015778
 80024cc:	080155bc 	.word	0x080155bc
 80024d0:	2000001d 	.word	0x2000001d
 80024d4:	20000487 	.word	0x20000487
 80024d8:	08016748 	.word	0x08016748
 80024dc:	080155c4 	.word	0x080155c4
 80024e0:	080155c8 	.word	0x080155c8
 80024e4:	20000488 	.word	0x20000488
 80024e8:	080155cc 	.word	0x080155cc
 80024ec:	080155d0 	.word	0x080155d0
 80024f0:	080155d4 	.word	0x080155d4
 80024f4:	080155d8 	.word	0x080155d8
 80024f8:	080155dc 	.word	0x080155dc
 80024fc:	080155e0 	.word	0x080155e0
 8002500:	080155e4 	.word	0x080155e4
		}
		else if(active_state == RUN){
 8002504:	4bb4      	ldr	r3, [pc, #720]	; (80027d8 <update_display+0x810>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 836a 	bne.w	8002be2 <update_display+0xc1a>
			UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 800250e:	4bb3      	ldr	r3, [pc, #716]	; (80027dc <update_display+0x814>)
 8002510:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	4bb1      	ldr	r3, [pc, #708]	; (80027e0 <update_display+0x818>)
 800251a:	f7fe f9bf 	bl	800089c <__aeabi_ddiv>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4bae      	ldr	r3, [pc, #696]	; (80027e4 <update_display+0x81c>)
 800252c:	f7fe f88c 	bl	8000648 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	a1a2      	add	r1, pc, #648	; (adr r1, 80027c0 <update_display+0x7f8>)
 8002536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253a:	f7fd fecd 	bl	80002d8 <__aeabi_dsub>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fb2f 	bl	8000ba8 <__aeabi_d2iz>
 800254a:	4603      	mov	r3, r0
 800254c:	b21c      	sxth	r4, r3
 800254e:	f248 607e 	movw	r0, #34430	; 0x867e
 8002552:	f7fe ffb9 	bl	80014c8 <RGB_to_BRG>
 8002556:	4603      	mov	r3, r0
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f240 131f 	movw	r3, #287	; 0x11f
 800255e:	22e6      	movs	r2, #230	; 0xe6
 8002560:	4621      	mov	r1, r4
 8002562:	20d2      	movs	r0, #210	; 0xd2
 8002564:	f00c fc90 	bl	800ee88 <UG_FillFrame>
			UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002568:	4b9c      	ldr	r3, [pc, #624]	; (80027dc <update_display+0x814>)
 800256a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b9b      	ldr	r3, [pc, #620]	; (80027e0 <update_display+0x818>)
 8002574:	f7fe f992 	bl	800089c <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	a391      	add	r3, pc, #580	; (adr r3, 80027c8 <update_display+0x800>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe f85f 	bl	8000648 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	a18c      	add	r1, pc, #560	; (adr r1, 80027c0 <update_display+0x7f8>)
 8002590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002594:	f7fd fea0 	bl	80002d8 <__aeabi_dsub>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b90      	ldr	r3, [pc, #576]	; (80027e8 <update_display+0x820>)
 80025a6:	f7fd fe97 	bl	80002d8 <__aeabi_dsub>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7fe faf9 	bl	8000ba8 <__aeabi_d2iz>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b21c      	sxth	r4, r3
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe ff84 	bl	80014c8 <RGB_to_BRG>
 80025c0:	4603      	mov	r3, r0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4623      	mov	r3, r4
 80025c6:	22e6      	movs	r2, #230	; 0xe6
 80025c8:	2137      	movs	r1, #55	; 0x37
 80025ca:	20d2      	movs	r0, #210	; 0xd2
 80025cc:	f00c fc5c 	bl	800ee88 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 80025d0:	4b86      	ldr	r3, [pc, #536]	; (80027ec <update_display+0x824>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 80025d6:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <update_display+0x828>)
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 80025dc:	e301      	b.n	8002be2 <update_display+0xc1a>
 80025de:	e300      	b.n	8002be2 <update_display+0xc1a>
		}
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 80025e0:	2228      	movs	r2, #40	; 0x28
 80025e2:	2100      	movs	r1, #0
 80025e4:	4883      	ldr	r0, [pc, #524]	; (80027f4 <update_display+0x82c>)
 80025e6:	f00f f9f6 	bl	80119d6 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 80025ea:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <update_display+0x830>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	4982      	ldr	r1, [pc, #520]	; (80027fc <update_display+0x834>)
 80025f2:	4880      	ldr	r0, [pc, #512]	; (80027f4 <update_display+0x82c>)
 80025f4:	f00f f98c 	bl	8011910 <siprintf>
		if(sensor_values.set_temperature < 99.5){
 80025f8:	4b7f      	ldr	r3, [pc, #508]	; (80027f8 <update_display+0x830>)
 80025fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025fe:	a374      	add	r3, pc, #464	; (adr r3, 80027d0 <update_display+0x808>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fe fa92 	bl	8000b2c <__aeabi_dcmplt>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <update_display+0x652>
			buffer[2] = 32;
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <update_display+0x82c>)
 8002610:	2220      	movs	r2, #32
 8002612:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8002614:	4b77      	ldr	r3, [pc, #476]	; (80027f4 <update_display+0x82c>)
 8002616:	2220      	movs	r2, #32
 8002618:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 30, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800261a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800261e:	f7fe ff53 	bl	80014c8 <RGB_to_BRG>
 8002622:	4603      	mov	r3, r0
 8002624:	461c      	mov	r4, r3
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe ff4e 	bl	80014c8 <RGB_to_BRG>
 800262c:	4603      	mov	r3, r0
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9400      	str	r4, [sp, #0]
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <update_display+0x838>)
 8002634:	4a6f      	ldr	r2, [pc, #444]	; (80027f4 <update_display+0x82c>)
 8002636:	211e      	movs	r1, #30
 8002638:	200e      	movs	r0, #14
 800263a:	f004 f84d 	bl	80066d8 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 800263e:	4b6e      	ldr	r3, [pc, #440]	; (80027f8 <update_display+0x830>)
 8002640:	edd3 7a05 	vldr	s15, [r3, #20]
 8002644:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d512      	bpl.n	8002678 <update_display+0x6b0>
			LCD_PutStr(10, 120, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002652:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002656:	f7fe ff37 	bl	80014c8 <RGB_to_BRG>
 800265a:	4603      	mov	r3, r0
 800265c:	461c      	mov	r4, r3
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe ff32 	bl	80014c8 <RGB_to_BRG>
 8002664:	4603      	mov	r3, r0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	9400      	str	r4, [sp, #0]
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <update_display+0x838>)
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <update_display+0x83c>)
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	200a      	movs	r0, #10
 8002672:	f004 f831 	bl	80066d8 <LCD_PutStr>
 8002676:	e02e      	b.n	80026d6 <update_display+0x70e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002678:	2228      	movs	r2, #40	; 0x28
 800267a:	2100      	movs	r1, #0
 800267c:	485d      	ldr	r0, [pc, #372]	; (80027f4 <update_display+0x82c>)
 800267e:	f00f f9aa 	bl	80119d6 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <update_display+0x830>)
 8002684:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002688:	495c      	ldr	r1, [pc, #368]	; (80027fc <update_display+0x834>)
 800268a:	485a      	ldr	r0, [pc, #360]	; (80027f4 <update_display+0x82c>)
 800268c:	f00f f940 	bl	8011910 <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <update_display+0x830>)
 8002692:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002696:	a34e      	add	r3, pc, #312	; (adr r3, 80027d0 <update_display+0x808>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fe fa46 	bl	8000b2c <__aeabi_dcmplt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <update_display+0x6ea>
				buffer[2] = 32;
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <update_display+0x82c>)
 80026a8:	2220      	movs	r2, #32
 80026aa:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 80026ac:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <update_display+0x82c>)
 80026ae:	2220      	movs	r2, #32
 80026b0:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 120, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026b6:	f7fe ff07 	bl	80014c8 <RGB_to_BRG>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461c      	mov	r4, r3
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe ff02 	bl	80014c8 <RGB_to_BRG>
 80026c4:	4603      	mov	r3, r0
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	9400      	str	r4, [sp, #0]
 80026ca:	4b4d      	ldr	r3, [pc, #308]	; (8002800 <update_display+0x838>)
 80026cc:	4a49      	ldr	r2, [pc, #292]	; (80027f4 <update_display+0x82c>)
 80026ce:	2178      	movs	r1, #120	; 0x78
 80026d0:	200e      	movs	r0, #14
 80026d2:	f004 f801 	bl	80066d8 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 80026d6:	2228      	movs	r2, #40	; 0x28
 80026d8:	2100      	movs	r1, #0
 80026da:	4846      	ldr	r0, [pc, #280]	; (80027f4 <update_display+0x82c>)
 80026dc:	f00f f97b 	bl	80119d6 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80026e0:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <update_display+0x830>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff57 	bl	8000598 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4946      	ldr	r1, [pc, #280]	; (8002808 <update_display+0x840>)
 80026f0:	4840      	ldr	r0, [pc, #256]	; (80027f4 <update_display+0x82c>)
 80026f2:	f00f f90d 	bl	8011910 <siprintf>
		LCD_PutStr(100, 195, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026fa:	f7fe fee5 	bl	80014c8 <RGB_to_BRG>
 80026fe:	4603      	mov	r3, r0
 8002700:	461c      	mov	r4, r3
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fee0 	bl	80014c8 <RGB_to_BRG>
 8002708:	4603      	mov	r3, r0
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	9400      	str	r4, [sp, #0]
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <update_display+0x844>)
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <update_display+0x82c>)
 8002712:	21c3      	movs	r1, #195	; 0xc3
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f003 ffdf 	bl	80066d8 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 800271a:	2228      	movs	r2, #40	; 0x28
 800271c:	2100      	movs	r1, #0
 800271e:	4835      	ldr	r0, [pc, #212]	; (80027f4 <update_display+0x82c>)
 8002720:	f00f f959 	bl	80119d6 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <update_display+0x830>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fd ff35 	bl	8000598 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4935      	ldr	r1, [pc, #212]	; (8002808 <update_display+0x840>)
 8002734:	482f      	ldr	r0, [pc, #188]	; (80027f4 <update_display+0x82c>)
 8002736:	f00f f8eb 	bl	8011910 <siprintf>
		LCD_PutStr(100, 210, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800273a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800273e:	f7fe fec3 	bl	80014c8 <RGB_to_BRG>
 8002742:	4603      	mov	r3, r0
 8002744:	461c      	mov	r4, r3
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe febe 	bl	80014c8 <RGB_to_BRG>
 800274c:	4603      	mov	r3, r0
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	9400      	str	r4, [sp, #0]
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <update_display+0x844>)
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <update_display+0x82c>)
 8002756:	21d2      	movs	r1, #210	; 0xd2
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f003 ffbd 	bl	80066d8 <LCD_PutStr>

		if(handle == T210){
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <update_display+0x848>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d112      	bne.n	800278c <update_display+0x7c4>
			LCD_PutStr(100, 180, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002766:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800276a:	f7fe fead 	bl	80014c8 <RGB_to_BRG>
 800276e:	4603      	mov	r3, r0
 8002770:	461c      	mov	r4, r3
 8002772:	2000      	movs	r0, #0
 8002774:	f7fe fea8 	bl	80014c8 <RGB_to_BRG>
 8002778:	4603      	mov	r3, r0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	9400      	str	r4, [sp, #0]
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <update_display+0x844>)
 8002780:	4a24      	ldr	r2, [pc, #144]	; (8002814 <update_display+0x84c>)
 8002782:	21b4      	movs	r1, #180	; 0xb4
 8002784:	2064      	movs	r0, #100	; 0x64
 8002786:	f003 ffa7 	bl	80066d8 <LCD_PutStr>
 800278a:	e05d      	b.n	8002848 <update_display+0x880>
		}
		else if(handle == T245){
 800278c:	4b20      	ldr	r3, [pc, #128]	; (8002810 <update_display+0x848>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d143      	bne.n	800281c <update_display+0x854>
			LCD_PutStr(100, 180, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002794:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002798:	f7fe fe96 	bl	80014c8 <RGB_to_BRG>
 800279c:	4603      	mov	r3, r0
 800279e:	461c      	mov	r4, r3
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fe91 	bl	80014c8 <RGB_to_BRG>
 80027a6:	4603      	mov	r3, r0
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	9400      	str	r4, [sp, #0]
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <update_display+0x844>)
 80027ae:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <update_display+0x850>)
 80027b0:	21b4      	movs	r1, #180	; 0xb4
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f003 ff90 	bl	80066d8 <LCD_PutStr>
 80027b8:	e046      	b.n	8002848 <update_display+0x880>
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w
 80027c0:	00000000 	.word	0x00000000
 80027c4:	4071f000 	.word	0x4071f000
 80027c8:	00000000 	.word	0x00000000
 80027cc:	406ce000 	.word	0x406ce000
 80027d0:	00000000 	.word	0x00000000
 80027d4:	4058e000 	.word	0x4058e000
 80027d8:	2000001d 	.word	0x2000001d
 80027dc:	200005a0 	.word	0x200005a0
 80027e0:	407f4000 	.word	0x407f4000
 80027e4:	406d0000 	.word	0x406d0000
 80027e8:	3ff00000 	.word	0x3ff00000
 80027ec:	20000488 	.word	0x20000488
 80027f0:	20000487 	.word	0x20000487
 80027f4:	200004a8 	.word	0x200004a8
 80027f8:	20000030 	.word	0x20000030
 80027fc:	08015598 	.word	0x08015598
 8002800:	08017738 	.word	0x08017738
 8002804:	0801559c 	.word	0x0801559c
 8002808:	080155a4 	.word	0x080155a4
 800280c:	08015778 	.word	0x08015778
 8002810:	20000460 	.word	0x20000460
 8002814:	080155ac 	.word	0x080155ac
 8002818:	080155b4 	.word	0x080155b4
		}
		else if(handle == NT115){
 800281c:	4ba9      	ldr	r3, [pc, #676]	; (8002ac4 <update_display+0xafc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <update_display+0x880>
			LCD_PutStr(100, 180, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002824:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002828:	f7fe fe4e 	bl	80014c8 <RGB_to_BRG>
 800282c:	4603      	mov	r3, r0
 800282e:	461c      	mov	r4, r3
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe fe49 	bl	80014c8 <RGB_to_BRG>
 8002836:	4603      	mov	r3, r0
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	9400      	str	r4, [sp, #0]
 800283c:	4ba2      	ldr	r3, [pc, #648]	; (8002ac8 <update_display+0xb00>)
 800283e:	4aa3      	ldr	r2, [pc, #652]	; (8002acc <update_display+0xb04>)
 8002840:	21b4      	movs	r1, #180	; 0xb4
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f003 ff48 	bl	80066d8 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002848:	4ba1      	ldr	r3, [pc, #644]	; (8002ad0 <update_display+0xb08>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d008      	beq.n	8002862 <update_display+0x89a>
 8002850:	4b9f      	ldr	r3, [pc, #636]	; (8002ad0 <update_display+0xb08>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d004      	beq.n	8002862 <update_display+0x89a>
 8002858:	4b9d      	ldr	r3, [pc, #628]	; (8002ad0 <update_display+0xb08>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b04      	cmp	r3, #4
 800285e:	f040 808c 	bne.w	800297a <update_display+0x9b2>
 8002862:	4b9c      	ldr	r3, [pc, #624]	; (8002ad4 <update_display+0xb0c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8087 	bne.w	800297a <update_display+0x9b2>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800286c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002870:	f7fe fe2a 	bl	80014c8 <RGB_to_BRG>
 8002874:	4603      	mov	r3, r0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	23e2      	movs	r3, #226	; 0xe2
 800287a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800287e:	2105      	movs	r1, #5
 8002880:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002884:	f00c fb00 	bl	800ee88 <UG_FillFrame>

			LCD_PutStr(294, 3,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe fe1d 	bl	80014c8 <RGB_to_BRG>
 800288e:	4603      	mov	r3, r0
 8002890:	461c      	mov	r4, r3
 8002892:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002896:	f7fe fe17 	bl	80014c8 <RGB_to_BRG>
 800289a:	4603      	mov	r3, r0
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	9400      	str	r4, [sp, #0]
 80028a0:	4b8d      	ldr	r3, [pc, #564]	; (8002ad8 <update_display+0xb10>)
 80028a2:	4a8e      	ldr	r2, [pc, #568]	; (8002adc <update_display+0xb14>)
 80028a4:	2103      	movs	r1, #3
 80028a6:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028aa:	f003 ff15 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(296, 38, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe fe0a 	bl	80014c8 <RGB_to_BRG>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461c      	mov	r4, r3
 80028b8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028bc:	f7fe fe04 	bl	80014c8 <RGB_to_BRG>
 80028c0:	4603      	mov	r3, r0
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	9400      	str	r4, [sp, #0]
 80028c6:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <update_display+0xb10>)
 80028c8:	4a85      	ldr	r2, [pc, #532]	; (8002ae0 <update_display+0xb18>)
 80028ca:	2126      	movs	r1, #38	; 0x26
 80028cc:	f44f 7094 	mov.w	r0, #296	; 0x128
 80028d0:	f003 ff02 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 73, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7fe fdf7 	bl	80014c8 <RGB_to_BRG>
 80028da:	4603      	mov	r3, r0
 80028dc:	461c      	mov	r4, r3
 80028de:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028e2:	f7fe fdf1 	bl	80014c8 <RGB_to_BRG>
 80028e6:	4603      	mov	r3, r0
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	9400      	str	r4, [sp, #0]
 80028ec:	4b7a      	ldr	r3, [pc, #488]	; (8002ad8 <update_display+0xb10>)
 80028ee:	4a7b      	ldr	r2, [pc, #492]	; (8002adc <update_display+0xb14>)
 80028f0:	2149      	movs	r1, #73	; 0x49
 80028f2:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028f6:	f003 feef 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(296, 108, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fde4 	bl	80014c8 <RGB_to_BRG>
 8002900:	4603      	mov	r3, r0
 8002902:	461c      	mov	r4, r3
 8002904:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002908:	f7fe fdde 	bl	80014c8 <RGB_to_BRG>
 800290c:	4603      	mov	r3, r0
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	9400      	str	r4, [sp, #0]
 8002912:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <update_display+0xb10>)
 8002914:	4a72      	ldr	r2, [pc, #456]	; (8002ae0 <update_display+0xb18>)
 8002916:	216c      	movs	r1, #108	; 0x6c
 8002918:	f44f 7094 	mov.w	r0, #296	; 0x128
 800291c:	f003 fedc 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 143, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe fdd1 	bl	80014c8 <RGB_to_BRG>
 8002926:	4603      	mov	r3, r0
 8002928:	461c      	mov	r4, r3
 800292a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800292e:	f7fe fdcb 	bl	80014c8 <RGB_to_BRG>
 8002932:	4603      	mov	r3, r0
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	9400      	str	r4, [sp, #0]
 8002938:	4b67      	ldr	r3, [pc, #412]	; (8002ad8 <update_display+0xb10>)
 800293a:	4a68      	ldr	r2, [pc, #416]	; (8002adc <update_display+0xb14>)
 800293c:	218f      	movs	r1, #143	; 0x8f
 800293e:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002942:	f003 fec9 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(296, 178, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe fdbe 	bl	80014c8 <RGB_to_BRG>
 800294c:	4603      	mov	r3, r0
 800294e:	461c      	mov	r4, r3
 8002950:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002954:	f7fe fdb8 	bl	80014c8 <RGB_to_BRG>
 8002958:	4603      	mov	r3, r0
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	9400      	str	r4, [sp, #0]
 800295e:	4b5e      	ldr	r3, [pc, #376]	; (8002ad8 <update_display+0xb10>)
 8002960:	4a5f      	ldr	r2, [pc, #380]	; (8002ae0 <update_display+0xb18>)
 8002962:	21b2      	movs	r1, #178	; 0xb2
 8002964:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002968:	f003 feb6 	bl	80066d8 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <update_display+0xb0c>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <update_display+0xb1c>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e134      	b.n	8002be4 <update_display+0xc1c>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800297a:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <update_display+0xb08>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	f040 80c0 	bne.w	8002b04 <update_display+0xb3c>
 8002984:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <update_display+0xb1c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 80bb 	bne.w	8002b04 <update_display+0xb3c>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800298e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002992:	f7fe fd99 	bl	80014c8 <RGB_to_BRG>
 8002996:	4603      	mov	r3, r0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	23e2      	movs	r3, #226	; 0xe2
 800299c:	f44f 729b 	mov.w	r2, #310	; 0x136
 80029a0:	2105      	movs	r1, #5
 80029a2:	f44f 7091 	mov.w	r0, #290	; 0x122
 80029a6:	f00c fa6f 	bl	800ee88 <UG_FillFrame>
			LCD_PutStr(294, 3,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe fd8c 	bl	80014c8 <RGB_to_BRG>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461c      	mov	r4, r3
 80029b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029b8:	f7fe fd86 	bl	80014c8 <RGB_to_BRG>
 80029bc:	4603      	mov	r3, r0
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	9400      	str	r4, [sp, #0]
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <update_display+0xb10>)
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <update_display+0xb20>)
 80029c6:	2103      	movs	r1, #3
 80029c8:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029cc:	f003 fe84 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 32,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe fd79 	bl	80014c8 <RGB_to_BRG>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461c      	mov	r4, r3
 80029da:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029de:	f7fe fd73 	bl	80014c8 <RGB_to_BRG>
 80029e2:	4603      	mov	r3, r0
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	9400      	str	r4, [sp, #0]
 80029e8:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <update_display+0xb10>)
 80029ea:	4a40      	ldr	r2, [pc, #256]	; (8002aec <update_display+0xb24>)
 80029ec:	2120      	movs	r1, #32
 80029ee:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029f2:	f003 fe71 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 61, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe fd66 	bl	80014c8 <RGB_to_BRG>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461c      	mov	r4, r3
 8002a00:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a04:	f7fe fd60 	bl	80014c8 <RGB_to_BRG>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	9400      	str	r4, [sp, #0]
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <update_display+0xb10>)
 8002a10:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <update_display+0xb28>)
 8002a12:	213d      	movs	r1, #61	; 0x3d
 8002a14:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a18:	f003 fe5e 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 90, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe fd53 	bl	80014c8 <RGB_to_BRG>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461c      	mov	r4, r3
 8002a26:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a2a:	f7fe fd4d 	bl	80014c8 <RGB_to_BRG>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	9400      	str	r4, [sp, #0]
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <update_display+0xb10>)
 8002a36:	4a2f      	ldr	r2, [pc, #188]	; (8002af4 <update_display+0xb2c>)
 8002a38:	215a      	movs	r1, #90	; 0x5a
 8002a3a:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a3e:	f003 fe4b 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 119, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fe fd40 	bl	80014c8 <RGB_to_BRG>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461c      	mov	r4, r3
 8002a4c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a50:	f7fe fd3a 	bl	80014c8 <RGB_to_BRG>
 8002a54:	4603      	mov	r3, r0
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	9400      	str	r4, [sp, #0]
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <update_display+0xb10>)
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <update_display+0xb30>)
 8002a5e:	2177      	movs	r1, #119	; 0x77
 8002a60:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a64:	f003 fe38 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 148, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fd2d 	bl	80014c8 <RGB_to_BRG>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461c      	mov	r4, r3
 8002a72:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a76:	f7fe fd27 	bl	80014c8 <RGB_to_BRG>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	9400      	str	r4, [sp, #0]
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <update_display+0xb10>)
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <update_display+0xb34>)
 8002a84:	2194      	movs	r1, #148	; 0x94
 8002a86:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a8a:	f003 fe25 	bl	80066d8 <LCD_PutStr>
			LCD_PutStr(294, 177, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fd1a 	bl	80014c8 <RGB_to_BRG>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461c      	mov	r4, r3
 8002a98:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a9c:	f7fe fd14 	bl	80014c8 <RGB_to_BRG>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	9400      	str	r4, [sp, #0]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <update_display+0xb10>)
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <update_display+0xb38>)
 8002aaa:	21b1      	movs	r1, #177	; 0xb1
 8002aac:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002ab0:	f003 fe12 	bl	80066d8 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <update_display+0xb1c>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <update_display+0xb0c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e090      	b.n	8002be4 <update_display+0xc1c>
 8002ac2:	bf00      	nop
 8002ac4:	20000460 	.word	0x20000460
 8002ac8:	08015778 	.word	0x08015778
 8002acc:	080155bc 	.word	0x080155bc
 8002ad0:	2000001d 	.word	0x2000001d
 8002ad4:	20000487 	.word	0x20000487
 8002ad8:	08016748 	.word	0x08016748
 8002adc:	080155c4 	.word	0x080155c4
 8002ae0:	080155c8 	.word	0x080155c8
 8002ae4:	20000488 	.word	0x20000488
 8002ae8:	080155cc 	.word	0x080155cc
 8002aec:	080155d0 	.word	0x080155d0
 8002af0:	080155d4 	.word	0x080155d4
 8002af4:	080155d8 	.word	0x080155d8
 8002af8:	080155dc 	.word	0x080155dc
 8002afc:	080155e0 	.word	0x080155e0
 8002b00:	080155e4 	.word	0x080155e4
		}
		else if(active_state == RUN){
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <update_display+0xc38>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d16b      	bne.n	8002be4 <update_display+0xc1c>
			UG_FillFrame(290, 226-(PID_output/PID_MAX_OUTPUT)*221, 	310, 	226, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <update_display+0xc3c>)
 8002b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <update_display+0xc40>)
 8002b18:	f7fd fec0 	bl	800089c <__aeabi_ddiv>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4610      	mov	r0, r2
 8002b22:	4619      	mov	r1, r3
 8002b24:	a332      	add	r3, pc, #200	; (adr r3, 8002bf0 <update_display+0xc28>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fd8d 	bl	8000648 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	4935      	ldr	r1, [pc, #212]	; (8002c0c <update_display+0xc44>)
 8002b38:	f7fd fbce 	bl	80002d8 <__aeabi_dsub>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fe f830 	bl	8000ba8 <__aeabi_d2iz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b21c      	sxth	r4, r3
 8002b4c:	f248 607e 	movw	r0, #34430	; 0x867e
 8002b50:	f7fe fcba 	bl	80014c8 <RGB_to_BRG>
 8002b54:	4603      	mov	r3, r0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	23e2      	movs	r3, #226	; 0xe2
 8002b5a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b5e:	4621      	mov	r1, r4
 8002b60:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b64:	f00c f990 	bl	800ee88 <UG_FillFrame>
			UG_FillFrame(290, 5, 									310, 	226-(PID_output/PID_MAX_OUTPUT)*211-1, RGB_to_BRG(C_BLACK));
 8002b68:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <update_display+0xc3c>)
 8002b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <update_display+0xc40>)
 8002b74:	f7fd fe92 	bl	800089c <__aeabi_ddiv>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	a31d      	add	r3, pc, #116	; (adr r3, 8002bf8 <update_display+0xc30>)
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f7fd fd5f 	bl	8000648 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	f04f 0000 	mov.w	r0, #0
 8002b92:	491e      	ldr	r1, [pc, #120]	; (8002c0c <update_display+0xc44>)
 8002b94:	f7fd fba0 	bl	80002d8 <__aeabi_dsub>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <update_display+0xc48>)
 8002ba6:	f7fd fb97 	bl	80002d8 <__aeabi_dsub>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd fff9 	bl	8000ba8 <__aeabi_d2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b21c      	sxth	r4, r3
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fc84 	bl	80014c8 <RGB_to_BRG>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002bca:	2105      	movs	r1, #5
 8002bcc:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002bd0:	f00c f95a 	bl	800ee88 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <update_display+0xc4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002bda:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <update_display+0xc50>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002be0:	e000      	b.n	8002be4 <update_display+0xc1c>
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002be2:	bf00      	nop
}
 8002be4:	bf00      	nop
 8002be6:	3704      	adds	r7, #4
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	f3af 8000 	nop.w
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	406ba000 	.word	0x406ba000
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	406a6000 	.word	0x406a6000
 8002c00:	2000001d 	.word	0x2000001d
 8002c04:	200005a0 	.word	0x200005a0
 8002c08:	407f4000 	.word	0x407f4000
 8002c0c:	406c4000 	.word	0x406c4000
 8002c10:	3ff00000 	.word	0x3ff00000
 8002c14:	20000488 	.word	0x20000488
 8002c18:	20000487 	.word	0x20000487

08002c1c <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002c22:	4bd8      	ldr	r3, [pc, #864]	; (8002f84 <LCD_draw_main_screen+0x368>)
 8002c24:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	f7fd ff72 	bl	8000b18 <__aeabi_dcmpeq>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <LCD_draw_main_screen+0x38>
 8002c3a:	4bd2      	ldr	r3, [pc, #840]	; (8002f84 <LCD_draw_main_screen+0x368>)
 8002c3c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c48:	f7fd ff66 	bl	8000b18 <__aeabi_dcmpeq>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 81b6 	beq.w	8002fc0 <LCD_draw_main_screen+0x3a4>
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fe fc37 	bl	80014c8 <RGB_to_BRG>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f00c f8ef 	bl	800ee40 <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002c62:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c66:	f7fe fc2f 	bl	80014c8 <RGB_to_BRG>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe fc2a 	bl	80014c8 <RGB_to_BRG>
 8002c74:	4603      	mov	r3, r0
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	9400      	str	r4, [sp, #0]
 8002c7a:	4bc3      	ldr	r3, [pc, #780]	; (8002f88 <LCD_draw_main_screen+0x36c>)
 8002c7c:	4ac3      	ldr	r2, [pc, #780]	; (8002f8c <LCD_draw_main_screen+0x370>)
 8002c7e:	210c      	movs	r1, #12
 8002c80:	2035      	movs	r0, #53	; 0x35
 8002c82:	f003 fd29 	bl	80066d8 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002c86:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c8a:	f7fe fc1d 	bl	80014c8 <RGB_to_BRG>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2328      	movs	r3, #40	; 0x28
 8002c94:	22f0      	movs	r2, #240	; 0xf0
 8002c96:	2128      	movs	r1, #40	; 0x28
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f003 fcdf 	bl	800665c <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002c9e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002ca2:	f7fe fc11 	bl	80014c8 <RGB_to_BRG>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2329      	movs	r3, #41	; 0x29
 8002cac:	22f0      	movs	r2, #240	; 0xf0
 8002cae:	2129      	movs	r1, #41	; 0x29
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f003 fcd3 	bl	800665c <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002cb6:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002cba:	f7fe fc05 	bl	80014c8 <RGB_to_BRG>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	232a      	movs	r3, #42	; 0x2a
 8002cc4:	22f0      	movs	r2, #240	; 0xf0
 8002cc6:	212a      	movs	r1, #42	; 0x2a
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f003 fcc7 	bl	800665c <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002cce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cd2:	f7fe fbf9 	bl	80014c8 <RGB_to_BRG>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe fbf4 	bl	80014c8 <RGB_to_BRG>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	4baa      	ldr	r3, [pc, #680]	; (8002f90 <LCD_draw_main_screen+0x374>)
 8002ce8:	4aaa      	ldr	r2, [pc, #680]	; (8002f94 <LCD_draw_main_screen+0x378>)
 8002cea:	2132      	movs	r1, #50	; 0x32
 8002cec:	200e      	movs	r0, #14
 8002cee:	f003 fcf3 	bl	80066d8 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002cf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf6:	f7fe fbe7 	bl	80014c8 <RGB_to_BRG>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	2155      	movs	r1, #85	; 0x55
 8002d00:	2078      	movs	r0, #120	; 0x78
 8002d02:	f00c f97b 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002d06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d0a:	f7fe fbdd 	bl	80014c8 <RGB_to_BRG>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2204      	movs	r2, #4
 8002d12:	2155      	movs	r1, #85	; 0x55
 8002d14:	2078      	movs	r0, #120	; 0x78
 8002d16:	f00c f971 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002d1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d1e:	f7fe fbd3 	bl	80014c8 <RGB_to_BRG>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2203      	movs	r2, #3
 8002d26:	2155      	movs	r1, #85	; 0x55
 8002d28:	2078      	movs	r0, #120	; 0x78
 8002d2a:	f00c f967 	bl	800effc <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d32:	f7fe fbc9 	bl	80014c8 <RGB_to_BRG>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461c      	mov	r4, r3
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fe fbc4 	bl	80014c8 <RGB_to_BRG>
 8002d40:	4603      	mov	r3, r0
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	9400      	str	r4, [sp, #0]
 8002d46:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <LCD_draw_main_screen+0x37c>)
 8002d48:	4a94      	ldr	r2, [pc, #592]	; (8002f9c <LCD_draw_main_screen+0x380>)
 8002d4a:	214b      	movs	r1, #75	; 0x4b
 8002d4c:	2082      	movs	r0, #130	; 0x82
 8002d4e:	f003 fcc3 	bl	80066d8 <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d56:	f7fe fbb7 	bl	80014c8 <RGB_to_BRG>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fbb2 	bl	80014c8 <RGB_to_BRG>
 8002d64:	4603      	mov	r3, r0
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	9400      	str	r4, [sp, #0]
 8002d6a:	4b89      	ldr	r3, [pc, #548]	; (8002f90 <LCD_draw_main_screen+0x374>)
 8002d6c:	4a8c      	ldr	r2, [pc, #560]	; (8002fa0 <LCD_draw_main_screen+0x384>)
 8002d6e:	218c      	movs	r1, #140	; 0x8c
 8002d70:	200e      	movs	r0, #14
 8002d72:	f003 fcb1 	bl	80066d8 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002d76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d7a:	f7fe fba5 	bl	80014c8 <RGB_to_BRG>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2205      	movs	r2, #5
 8002d82:	21af      	movs	r1, #175	; 0xaf
 8002d84:	2078      	movs	r0, #120	; 0x78
 8002d86:	f00c f939 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002d8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d8e:	f7fe fb9b 	bl	80014c8 <RGB_to_BRG>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2204      	movs	r2, #4
 8002d96:	21af      	movs	r1, #175	; 0xaf
 8002d98:	2078      	movs	r0, #120	; 0x78
 8002d9a:	f00c f92f 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002d9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002da2:	f7fe fb91 	bl	80014c8 <RGB_to_BRG>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2203      	movs	r2, #3
 8002daa:	21af      	movs	r1, #175	; 0xaf
 8002dac:	2078      	movs	r0, #120	; 0x78
 8002dae:	f00c f925 	bl	800effc <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002db2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002db6:	f7fe fb87 	bl	80014c8 <RGB_to_BRG>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461c      	mov	r4, r3
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fe fb82 	bl	80014c8 <RGB_to_BRG>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	9400      	str	r4, [sp, #0]
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <LCD_draw_main_screen+0x37c>)
 8002dcc:	4a73      	ldr	r2, [pc, #460]	; (8002f9c <LCD_draw_main_screen+0x380>)
 8002dce:	21a5      	movs	r1, #165	; 0xa5
 8002dd0:	2082      	movs	r0, #130	; 0x82
 8002dd2:	f003 fc81 	bl	80066d8 <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002dd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dda:	f7fe fb75 	bl	80014c8 <RGB_to_BRG>
 8002dde:	4603      	mov	r3, r0
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	23dc      	movs	r3, #220	; 0xdc
 8002de4:	22b6      	movs	r2, #182	; 0xb6
 8002de6:	2186      	movs	r1, #134	; 0x86
 8002de8:	2006      	movs	r0, #6
 8002dea:	f00c f8bf 	bl	800ef6c <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002dee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002df2:	f7fe fb69 	bl	80014c8 <RGB_to_BRG>
 8002df6:	4603      	mov	r3, r0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	23dd      	movs	r3, #221	; 0xdd
 8002dfc:	22b7      	movs	r2, #183	; 0xb7
 8002dfe:	2185      	movs	r1, #133	; 0x85
 8002e00:	2005      	movs	r0, #5
 8002e02:	f00c f8b3 	bl	800ef6c <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e0a:	f7fe fb5d 	bl	80014c8 <RGB_to_BRG>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe fb58 	bl	80014c8 <RGB_to_BRG>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	9400      	str	r4, [sp, #0]
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <LCD_draw_main_screen+0x388>)
 8002e20:	4a61      	ldr	r2, [pc, #388]	; (8002fa8 <LCD_draw_main_screen+0x38c>)
 8002e22:	21eb      	movs	r1, #235	; 0xeb
 8002e24:	2006      	movs	r0, #6
 8002e26:	f003 fc57 	bl	80066d8 <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e2e:	f7fe fb4b 	bl	80014c8 <RGB_to_BRG>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461c      	mov	r4, r3
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe fb46 	bl	80014c8 <RGB_to_BRG>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	9400      	str	r4, [sp, #0]
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <LCD_draw_main_screen+0x388>)
 8002e44:	4a59      	ldr	r2, [pc, #356]	; (8002fac <LCD_draw_main_screen+0x390>)
 8002e46:	21ff      	movs	r1, #255	; 0xff
 8002e48:	2006      	movs	r0, #6
 8002e4a:	f003 fc45 	bl	80066d8 <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e52:	f7fe fb39 	bl	80014c8 <RGB_to_BRG>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461c      	mov	r4, r3
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe fb34 	bl	80014c8 <RGB_to_BRG>
 8002e60:	4603      	mov	r3, r0
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	9400      	str	r4, [sp, #0]
 8002e66:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <LCD_draw_main_screen+0x388>)
 8002e68:	4a51      	ldr	r2, [pc, #324]	; (8002fb0 <LCD_draw_main_screen+0x394>)
 8002e6a:	f240 1113 	movw	r1, #275	; 0x113
 8002e6e:	2006      	movs	r0, #6
 8002e70:	f003 fc32 	bl	80066d8 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e74:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e78:	f7fe fb26 	bl	80014c8 <RGB_to_BRG>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002e84:	22f0      	movs	r2, #240	; 0xf0
 8002e86:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f00c f99c 	bl	800f1c8 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e90:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e94:	f7fe fb18 	bl	80014c8 <RGB_to_BRG>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f240 1329 	movw	r3, #297	; 0x129
 8002ea0:	22f0      	movs	r2, #240	; 0xf0
 8002ea2:	f240 1129 	movw	r1, #297	; 0x129
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	f00c f98e 	bl	800f1c8 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002eac:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eb0:	f7fe fb0a 	bl	80014c8 <RGB_to_BRG>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fb05 	bl	80014c8 <RGB_to_BRG>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	9400      	str	r4, [sp, #0]
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <LCD_draw_main_screen+0x374>)
 8002ec6:	4a3b      	ldr	r2, [pc, #236]	; (8002fb4 <LCD_draw_main_screen+0x398>)
 8002ec8:	f240 112d 	movw	r1, #301	; 0x12d
 8002ecc:	2006      	movs	r0, #6
 8002ece:	f003 fc03 	bl	80066d8 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002ed2:	2228      	movs	r2, #40	; 0x28
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4838      	ldr	r0, [pc, #224]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002ed8:	f00e fd7d 	bl	80119d6 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <LCD_draw_main_screen+0x368>)
 8002ede:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ee2:	4936      	ldr	r1, [pc, #216]	; (8002fbc <LCD_draw_main_screen+0x3a0>)
 8002ee4:	4834      	ldr	r0, [pc, #208]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002ee6:	f00e fd13 	bl	8011910 <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002eea:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eee:	f7fe faeb 	bl	80014c8 <RGB_to_BRG>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461c      	mov	r4, r3
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe fae6 	bl	80014c8 <RGB_to_BRG>
 8002efc:	4603      	mov	r3, r0
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	9400      	str	r4, [sp, #0]
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <LCD_draw_main_screen+0x374>)
 8002f04:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002f06:	f240 112d 	movw	r1, #301	; 0x12d
 8002f0a:	2082      	movs	r0, #130	; 0x82
 8002f0c:	f003 fbe4 	bl	80066d8 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002f10:	2228      	movs	r2, #40	; 0x28
 8002f12:	2100      	movs	r1, #0
 8002f14:	4828      	ldr	r0, [pc, #160]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002f16:	f00e fd5e 	bl	80119d6 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <LCD_draw_main_screen+0x368>)
 8002f1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f20:	4926      	ldr	r1, [pc, #152]	; (8002fbc <LCD_draw_main_screen+0x3a0>)
 8002f22:	4825      	ldr	r0, [pc, #148]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002f24:	f00e fcf4 	bl	8011910 <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002f28:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002f2c:	f7fe facc 	bl	80014c8 <RGB_to_BRG>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461c      	mov	r4, r3
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fe fac7 	bl	80014c8 <RGB_to_BRG>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	9400      	str	r4, [sp, #0]
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <LCD_draw_main_screen+0x374>)
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <LCD_draw_main_screen+0x39c>)
 8002f44:	f240 112d 	movw	r1, #301	; 0x12d
 8002f48:	20be      	movs	r0, #190	; 0xbe
 8002f4a:	f003 fbc5 	bl	80066d8 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002f4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f52:	f7fe fab9 	bl	80014c8 <RGB_to_BRG>
 8002f56:	4603      	mov	r3, r0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f240 1321 	movw	r3, #289	; 0x121
 8002f5e:	22e8      	movs	r2, #232	; 0xe8
 8002f60:	2135      	movs	r1, #53	; 0x35
 8002f62:	20d0      	movs	r0, #208	; 0xd0
 8002f64:	f00c f802 	bl	800ef6c <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002f68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f6c:	f7fe faac 	bl	80014c8 <RGB_to_BRG>
 8002f70:	4603      	mov	r3, r0
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002f78:	22e7      	movs	r2, #231	; 0xe7
 8002f7a:	2136      	movs	r1, #54	; 0x36
 8002f7c:	20d1      	movs	r0, #209	; 0xd1
 8002f7e:	f00b fff5 	bl	800ef6c <UG_DrawFrame>
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002f82:	e113      	b.n	80031ac <LCD_draw_main_screen+0x590>
 8002f84:	20000550 	.word	0x20000550
 8002f88:	08016514 	.word	0x08016514
 8002f8c:	080155e8 	.word	0x080155e8
 8002f90:	08016748 	.word	0x08016748
 8002f94:	080155f4 	.word	0x080155f4
 8002f98:	08017658 	.word	0x08017658
 8002f9c:	08015600 	.word	0x08015600
 8002fa0:	08015604 	.word	0x08015604
 8002fa4:	08015778 	.word	0x08015778
 8002fa8:	08015610 	.word	0x08015610
 8002fac:	08015620 	.word	0x08015620
 8002fb0:	0801563c 	.word	0x0801563c
 8002fb4:	0801565c 	.word	0x0801565c
 8002fb8:	200004a8 	.word	0x200004a8
 8002fbc:	08015588 	.word	0x08015588
	}
	else{
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe fa81 	bl	80014c8 <RGB_to_BRG>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f00b ff39 	bl	800ee40 <UG_FillScreen>

		LCD_PutStr(14, 5, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002fce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fd2:	f7fe fa79 	bl	80014c8 <RGB_to_BRG>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461c      	mov	r4, r3
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fe fa74 	bl	80014c8 <RGB_to_BRG>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	9400      	str	r4, [sp, #0]
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <LCD_draw_main_screen+0x598>)
 8002fe8:	4a73      	ldr	r2, [pc, #460]	; (80031b8 <LCD_draw_main_screen+0x59c>)
 8002fea:	2105      	movs	r1, #5
 8002fec:	200e      	movs	r0, #14
 8002fee:	f003 fb73 	bl	80066d8 <LCD_PutStr>
		UG_DrawCircle(120, 40, 5, RGB_to_BRG(C_WHITE));
 8002ff2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ff6:	f7fe fa67 	bl	80014c8 <RGB_to_BRG>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2205      	movs	r2, #5
 8002ffe:	2128      	movs	r1, #40	; 0x28
 8003000:	2078      	movs	r0, #120	; 0x78
 8003002:	f00b fffb 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 40, 4, RGB_to_BRG(C_WHITE));
 8003006:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800300a:	f7fe fa5d 	bl	80014c8 <RGB_to_BRG>
 800300e:	4603      	mov	r3, r0
 8003010:	2204      	movs	r2, #4
 8003012:	2128      	movs	r1, #40	; 0x28
 8003014:	2078      	movs	r0, #120	; 0x78
 8003016:	f00b fff1 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 40, 3, RGB_to_BRG(C_WHITE));
 800301a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800301e:	f7fe fa53 	bl	80014c8 <RGB_to_BRG>
 8003022:	4603      	mov	r3, r0
 8003024:	2203      	movs	r2, #3
 8003026:	2128      	movs	r1, #40	; 0x28
 8003028:	2078      	movs	r0, #120	; 0x78
 800302a:	f00b ffe7 	bl	800effc <UG_DrawCircle>
		LCD_PutStr(130, 30, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800302e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003032:	f7fe fa49 	bl	80014c8 <RGB_to_BRG>
 8003036:	4603      	mov	r3, r0
 8003038:	461c      	mov	r4, r3
 800303a:	2000      	movs	r0, #0
 800303c:	f7fe fa44 	bl	80014c8 <RGB_to_BRG>
 8003040:	4603      	mov	r3, r0
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	9400      	str	r4, [sp, #0]
 8003046:	4b5d      	ldr	r3, [pc, #372]	; (80031bc <LCD_draw_main_screen+0x5a0>)
 8003048:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <LCD_draw_main_screen+0x5a4>)
 800304a:	211e      	movs	r1, #30
 800304c:	2082      	movs	r0, #130	; 0x82
 800304e:	f003 fb43 	bl	80066d8 <LCD_PutStr>


		LCD_PutStr(14, 95, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003052:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003056:	f7fe fa37 	bl	80014c8 <RGB_to_BRG>
 800305a:	4603      	mov	r3, r0
 800305c:	461c      	mov	r4, r3
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe fa32 	bl	80014c8 <RGB_to_BRG>
 8003064:	4603      	mov	r3, r0
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	9400      	str	r4, [sp, #0]
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <LCD_draw_main_screen+0x598>)
 800306c:	4a55      	ldr	r2, [pc, #340]	; (80031c4 <LCD_draw_main_screen+0x5a8>)
 800306e:	215f      	movs	r1, #95	; 0x5f
 8003070:	200e      	movs	r0, #14
 8003072:	f003 fb31 	bl	80066d8 <LCD_PutStr>
		UG_DrawCircle(120, 130, 5, RGB_to_BRG(C_WHITE));
 8003076:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800307a:	f7fe fa25 	bl	80014c8 <RGB_to_BRG>
 800307e:	4603      	mov	r3, r0
 8003080:	2205      	movs	r2, #5
 8003082:	2182      	movs	r1, #130	; 0x82
 8003084:	2078      	movs	r0, #120	; 0x78
 8003086:	f00b ffb9 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 130, 4, RGB_to_BRG(C_WHITE));
 800308a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800308e:	f7fe fa1b 	bl	80014c8 <RGB_to_BRG>
 8003092:	4603      	mov	r3, r0
 8003094:	2204      	movs	r2, #4
 8003096:	2182      	movs	r1, #130	; 0x82
 8003098:	2078      	movs	r0, #120	; 0x78
 800309a:	f00b ffaf 	bl	800effc <UG_DrawCircle>
		UG_DrawCircle(120, 130, 3, RGB_to_BRG(C_WHITE));
 800309e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030a2:	f7fe fa11 	bl	80014c8 <RGB_to_BRG>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2203      	movs	r2, #3
 80030aa:	2182      	movs	r1, #130	; 0x82
 80030ac:	2078      	movs	r0, #120	; 0x78
 80030ae:	f00b ffa5 	bl	800effc <UG_DrawCircle>
		LCD_PutStr(130, 120, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030b6:	f7fe fa07 	bl	80014c8 <RGB_to_BRG>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461c      	mov	r4, r3
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe fa02 	bl	80014c8 <RGB_to_BRG>
 80030c4:	4603      	mov	r3, r0
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	9400      	str	r4, [sp, #0]
 80030ca:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <LCD_draw_main_screen+0x5a0>)
 80030cc:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <LCD_draw_main_screen+0x5a4>)
 80030ce:	2178      	movs	r1, #120	; 0x78
 80030d0:	2082      	movs	r0, #130	; 0x82
 80030d2:	f003 fb01 	bl	80066d8 <LCD_PutStr>

		UG_DrawFrame(6, 89, 182,175, RGB_to_BRG(C_WHITE));
 80030d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030da:	f7fe f9f5 	bl	80014c8 <RGB_to_BRG>
 80030de:	4603      	mov	r3, r0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	23af      	movs	r3, #175	; 0xaf
 80030e4:	22b6      	movs	r2, #182	; 0xb6
 80030e6:	2159      	movs	r1, #89	; 0x59
 80030e8:	2006      	movs	r0, #6
 80030ea:	f00b ff3f 	bl	800ef6c <UG_DrawFrame>
		UG_DrawFrame(5, 88, 183, 176, RGB_to_BRG(C_WHITE));
 80030ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030f2:	f7fe f9e9 	bl	80014c8 <RGB_to_BRG>
 80030f6:	4603      	mov	r3, r0
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	23b0      	movs	r3, #176	; 0xb0
 80030fc:	22b7      	movs	r2, #183	; 0xb7
 80030fe:	2158      	movs	r1, #88	; 0x58
 8003100:	2005      	movs	r0, #5
 8003102:	f00b ff33 	bl	800ef6c <UG_DrawFrame>

		LCD_PutStr(6, 180, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003106:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800310a:	f7fe f9dd 	bl	80014c8 <RGB_to_BRG>
 800310e:	4603      	mov	r3, r0
 8003110:	461c      	mov	r4, r3
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe f9d8 	bl	80014c8 <RGB_to_BRG>
 8003118:	4603      	mov	r3, r0
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	9400      	str	r4, [sp, #0]
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <LCD_draw_main_screen+0x5ac>)
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <LCD_draw_main_screen+0x5b0>)
 8003122:	21b4      	movs	r1, #180	; 0xb4
 8003124:	2006      	movs	r0, #6
 8003126:	f003 fad7 	bl	80066d8 <LCD_PutStr>
		LCD_PutStr(6, 195, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800312a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800312e:	f7fe f9cb 	bl	80014c8 <RGB_to_BRG>
 8003132:	4603      	mov	r3, r0
 8003134:	461c      	mov	r4, r3
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe f9c6 	bl	80014c8 <RGB_to_BRG>
 800313c:	4603      	mov	r3, r0
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	9400      	str	r4, [sp, #0]
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <LCD_draw_main_screen+0x5ac>)
 8003144:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <LCD_draw_main_screen+0x5b4>)
 8003146:	21c3      	movs	r1, #195	; 0xc3
 8003148:	2006      	movs	r0, #6
 800314a:	f003 fac5 	bl	80066d8 <LCD_PutStr>
		LCD_PutStr(6, 210, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800314e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003152:	f7fe f9b9 	bl	80014c8 <RGB_to_BRG>
 8003156:	4603      	mov	r3, r0
 8003158:	461c      	mov	r4, r3
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe f9b4 	bl	80014c8 <RGB_to_BRG>
 8003160:	4603      	mov	r3, r0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	9400      	str	r4, [sp, #0]
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <LCD_draw_main_screen+0x5ac>)
 8003168:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <LCD_draw_main_screen+0x5b8>)
 800316a:	21d2      	movs	r1, #210	; 0xd2
 800316c:	2006      	movs	r0, #6
 800316e:	f003 fab3 	bl	80066d8 <LCD_PutStr>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		memset(&buffer, '\0', sizeof(buffer));
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
		LCD_PutStr(190, 271, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
*/
		UG_DrawFrame(288, 3, 312, 228, RGB_to_BRG(C_WHITE));
 8003172:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003176:	f7fe f9a7 	bl	80014c8 <RGB_to_BRG>
 800317a:	4603      	mov	r3, r0
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	23e4      	movs	r3, #228	; 0xe4
 8003180:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003184:	2103      	movs	r1, #3
 8003186:	f44f 7090 	mov.w	r0, #288	; 0x120
 800318a:	f00b feef 	bl	800ef6c <UG_DrawFrame>
		UG_DrawFrame(289, 4, 311, 227, RGB_to_BRG(C_WHITE));
 800318e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003192:	f7fe f999 	bl	80014c8 <RGB_to_BRG>
 8003196:	4603      	mov	r3, r0
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	23e3      	movs	r3, #227	; 0xe3
 800319c:	f240 1237 	movw	r2, #311	; 0x137
 80031a0:	2104      	movs	r1, #4
 80031a2:	f240 1021 	movw	r0, #289	; 0x121
 80031a6:	f00b fee1 	bl	800ef6c <UG_DrawFrame>

	}
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	3704      	adds	r7, #4
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	08016748 	.word	0x08016748
 80031b8:	080155f4 	.word	0x080155f4
 80031bc:	08017658 	.word	0x08017658
 80031c0:	08015600 	.word	0x08015600
 80031c4:	08015604 	.word	0x08015604
 80031c8:	08015778 	.word	0x08015778
 80031cc:	08015610 	.word	0x08015610
 80031d0:	08015620 	.word	0x08015620
 80031d4:	0801563c 	.word	0x0801563c

080031d8 <show_popup>:

void show_popup(char * text[20]){
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b085      	sub	sp, #20
 80031dc:	af02      	add	r7, sp, #8
 80031de:	6078      	str	r0, [r7, #4]
	UG_FillFrame(10, 150, 225, 205, RGB_to_BRG(C_ORANGE));
 80031e0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031e4:	f7fe f970 	bl	80014c8 <RGB_to_BRG>
 80031e8:	4603      	mov	r3, r0
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	23cd      	movs	r3, #205	; 0xcd
 80031ee:	22e1      	movs	r2, #225	; 0xe1
 80031f0:	2196      	movs	r1, #150	; 0x96
 80031f2:	200a      	movs	r0, #10
 80031f4:	f00b fe48 	bl	800ee88 <UG_FillFrame>
	UG_FillFrame(15, 155, 220, 200, RGB_to_BRG(C_WHITE));
 80031f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031fc:	f7fe f964 	bl	80014c8 <RGB_to_BRG>
 8003200:	4603      	mov	r3, r0
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	23c8      	movs	r3, #200	; 0xc8
 8003206:	22dc      	movs	r2, #220	; 0xdc
 8003208:	219b      	movs	r1, #155	; 0x9b
 800320a:	200f      	movs	r0, #15
 800320c:	f00b fe3c 	bl	800ee88 <UG_FillFrame>
	LCD_PutStr(20, 150, text, FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003210:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003214:	f7fe f958 	bl	80014c8 <RGB_to_BRG>
 8003218:	4603      	mov	r3, r0
 800321a:	461c      	mov	r4, r3
 800321c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003220:	f7fe f952 	bl	80014c8 <RGB_to_BRG>
 8003224:	4603      	mov	r3, r0
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	9400      	str	r4, [sp, #0]
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <show_popup+0x80>)
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	2196      	movs	r1, #150	; 0x96
 8003230:	2014      	movs	r0, #20
 8003232:	f003 fa51 	bl	80066d8 <LCD_PutStr>
	HAL_Delay(2000);
 8003236:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800323a:	f003 fb67 	bl	800690c <HAL_Delay>
	LCD_draw_main_screen();
 800323e:	f7ff fced 	bl	8002c1c <LCD_draw_main_screen>
	standby_state_written_to_LCD = 0;
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <show_popup+0x84>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
	sleep_state_written_to_LCD = 0;
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <show_popup+0x88>)
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop
 8003258:	08016748 	.word	0x08016748
 800325c:	20000488 	.word	0x20000488
 8003260:	20000487 	.word	0x20000487

08003264 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af02      	add	r7, sp, #8
	heater_off();
 800326a:	f7fe fb6f 	bl	800194c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 800326e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003272:	f7fe f929 	bl	80014c8 <RGB_to_BRG>
 8003276:	4603      	mov	r3, r0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	23cd      	movs	r3, #205	; 0xcd
 800327c:	22cd      	movs	r2, #205	; 0xcd
 800327e:	2132      	movs	r1, #50	; 0x32
 8003280:	200a      	movs	r0, #10
 8003282:	f00b fe01 	bl	800ee88 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 8003286:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800328a:	f7fe f91d 	bl	80014c8 <RGB_to_BRG>
 800328e:	4603      	mov	r3, r0
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	23c8      	movs	r3, #200	; 0xc8
 8003294:	22c8      	movs	r2, #200	; 0xc8
 8003296:	2137      	movs	r1, #55	; 0x37
 8003298:	200f      	movs	r0, #15
 800329a:	f00b fdf5 	bl	800ee88 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800329e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032a2:	f7fe f911 	bl	80014c8 <RGB_to_BRG>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461c      	mov	r4, r3
 80032aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032ae:	f7fe f90b 	bl	80014c8 <RGB_to_BRG>
 80032b2:	4603      	mov	r3, r0
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	9400      	str	r4, [sp, #0]
 80032b8:	4b2b      	ldr	r3, [pc, #172]	; (8003368 <LCD_draw_earth_fault_popup+0x104>)
 80032ba:	4a2c      	ldr	r2, [pc, #176]	; (800336c <LCD_draw_earth_fault_popup+0x108>)
 80032bc:	213c      	movs	r1, #60	; 0x3c
 80032be:	2014      	movs	r0, #20
 80032c0:	f003 fa0a 	bl	80066d8 <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032c4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032c8:	f7fe f8fe 	bl	80014c8 <RGB_to_BRG>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461c      	mov	r4, r3
 80032d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032d4:	f7fe f8f8 	bl	80014c8 <RGB_to_BRG>
 80032d8:	4603      	mov	r3, r0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	9400      	str	r4, [sp, #0]
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <LCD_draw_earth_fault_popup+0x104>)
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <LCD_draw_earth_fault_popup+0x10c>)
 80032e2:	2150      	movs	r1, #80	; 0x50
 80032e4:	2014      	movs	r0, #20
 80032e6:	f003 f9f7 	bl	80066d8 <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80032ea:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80032ee:	f7fe f8eb 	bl	80014c8 <RGB_to_BRG>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461c      	mov	r4, r3
 80032f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032fa:	f7fe f8e5 	bl	80014c8 <RGB_to_BRG>
 80032fe:	4603      	mov	r3, r0
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9400      	str	r4, [sp, #0]
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <LCD_draw_earth_fault_popup+0x104>)
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <LCD_draw_earth_fault_popup+0x110>)
 8003308:	2178      	movs	r1, #120	; 0x78
 800330a:	2014      	movs	r0, #20
 800330c:	f003 f9e4 	bl	80066d8 <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003310:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003314:	f7fe f8d8 	bl	80014c8 <RGB_to_BRG>
 8003318:	4603      	mov	r3, r0
 800331a:	461c      	mov	r4, r3
 800331c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003320:	f7fe f8d2 	bl	80014c8 <RGB_to_BRG>
 8003324:	4603      	mov	r3, r0
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	9400      	str	r4, [sp, #0]
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <LCD_draw_earth_fault_popup+0x104>)
 800332c:	4a12      	ldr	r2, [pc, #72]	; (8003378 <LCD_draw_earth_fault_popup+0x114>)
 800332e:	218c      	movs	r1, #140	; 0x8c
 8003330:	2014      	movs	r0, #20
 8003332:	f003 f9d1 	bl	80066d8 <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003336:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800333a:	f7fe f8c5 	bl	80014c8 <RGB_to_BRG>
 800333e:	4603      	mov	r3, r0
 8003340:	461c      	mov	r4, r3
 8003342:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003346:	f7fe f8bf 	bl	80014c8 <RGB_to_BRG>
 800334a:	4603      	mov	r3, r0
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	9400      	str	r4, [sp, #0]
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <LCD_draw_earth_fault_popup+0x104>)
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <LCD_draw_earth_fault_popup+0x118>)
 8003354:	21a0      	movs	r1, #160	; 0xa0
 8003356:	2014      	movs	r0, #20
 8003358:	f003 f9be 	bl	80066d8 <LCD_PutStr>

	Error_Handler();
 800335c:	f001 fc22 	bl	8004ba4 <Error_Handler>
}
 8003360:	bf00      	nop
 8003362:	3704      	adds	r7, #4
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}
 8003368:	08016748 	.word	0x08016748
 800336c:	08015664 	.word	0x08015664
 8003370:	08015670 	.word	0x08015670
 8003374:	08015678 	.word	0x08015678
 8003378:	08015680 	.word	0x08015680
 800337c:	0801568c 	.word	0x0801568c

08003380 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8003380:	b598      	push	{r3, r4, r7, lr}
 8003382:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <get_set_temperature+0x70>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d12f      	bne.n	80033ec <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 800338c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd f8de 	bl	8000554 <__aeabi_ui2d>
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <get_set_temperature+0x74>)
 800339a:	ed93 7b00 	vldr	d7, [r3]
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <get_set_temperature+0x78>)
 80033a0:	ed93 6b00 	vldr	d6, [r3]
 80033a4:	eeb0 2a46 	vmov.f32	s4, s12
 80033a8:	eef0 2a66 	vmov.f32	s5, s13
 80033ac:	eeb0 1a47 	vmov.f32	s2, s14
 80033b0:	eef0 1a67 	vmov.f32	s3, s15
 80033b4:	ec41 0b10 	vmov	d0, r0, r1
 80033b8:	f7fd ffbc 	bl	8001334 <clamp>
 80033bc:	ec53 2b10 	vmov	r2, r3, d0
 80033c0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80033c4:	4610      	mov	r0, r2
 80033c6:	4619      	mov	r1, r3
 80033c8:	f7fd fc16 	bl	8000bf8 <__aeabi_d2uiz>
 80033cc:	4603      	mov	r3, r0
 80033ce:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 80033d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	b29b      	uxth	r3, r3
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8c9 	bl	8000574 <__aeabi_i2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4905      	ldr	r1, [pc, #20]	; (80033fc <get_set_temperature+0x7c>)
 80033e8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80033ec:	bf00      	nop
 80033ee:	bd98      	pop	{r3, r4, r7, pc}
 80033f0:	20000548 	.word	0x20000548
 80033f4:	20000020 	.word	0x20000020
 80033f8:	20000028 	.word	0x20000028
 80033fc:	20000030 	.word	0x20000030

08003400 <beep>:

/* Beep the beeper */
void beep(){
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <beep+0x30>)
 8003406:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <beep+0x34>)
 8003410:	f7fd fb82 	bl	8000b18 <__aeabi_dcmpeq>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d100      	bne.n	800341c <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 800341a:	e006      	b.n	800342a <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 800341c:	2104      	movs	r1, #4
 800341e:	4806      	ldr	r0, [pc, #24]	; (8003438 <beep+0x38>)
 8003420:	f008 ff52 	bl	800c2c8 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8003424:	4805      	ldr	r0, [pc, #20]	; (800343c <beep+0x3c>)
 8003426:	f008 fe5f 	bl	800c0e8 <HAL_TIM_Base_Start_IT>
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000550 	.word	0x20000550
 8003434:	3ff00000 	.word	0x3ff00000
 8003438:	20001efc 	.word	0x20001efc
 800343c:	20002078 	.word	0x20002078

08003440 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8003444:	4b38      	ldr	r3, [pc, #224]	; (8003528 <handle_emergency_shutdown+0xe8>)
 8003446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <handle_emergency_shutdown+0x20>
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <handle_emergency_shutdown+0xec>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8003456:	f003 fa4d 	bl	80068f4 <HAL_GetTick>
 800345a:	4603      	mov	r3, r0
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <handle_emergency_shutdown+0xf0>)
 800345e:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8003460:	4b31      	ldr	r3, [pc, #196]	; (8003528 <handle_emergency_shutdown+0xe8>)
 8003462:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	f7fd fb53 	bl	8000b18 <__aeabi_dcmpeq>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d024      	beq.n	80034c2 <handle_emergency_shutdown+0x82>
 8003478:	f003 fa3c 	bl	80068f4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <handle_emergency_shutdown+0xf0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd f865 	bl	8000554 <__aeabi_ui2d>
 800348a:	4604      	mov	r4, r0
 800348c:	460d      	mov	r5, r1
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <handle_emergency_shutdown+0xf4>)
 8003490:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003494:	a322      	add	r3, pc, #136	; (adr r3, 8003520 <handle_emergency_shutdown+0xe0>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fd f8d5 	bl	8000648 <__aeabi_dmul>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fd fb55 	bl	8000b54 <__aeabi_dcmpge>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <handle_emergency_shutdown+0x82>
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <handle_emergency_shutdown+0xec>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 80034b8:	2003      	movs	r0, #3
 80034ba:	f7fe f81b 	bl	80014f4 <change_state>
		beep();
 80034be:	f7ff ff9f 	bl	8003400 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80034c2:	4b19      	ldr	r3, [pc, #100]	; (8003528 <handle_emergency_shutdown+0xe8>)
 80034c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <handle_emergency_shutdown+0xf8>)
 80034ce:	f7fd fb4b 	bl	8000b68 <__aeabi_dcmpgt>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <handle_emergency_shutdown+0xac>
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <handle_emergency_shutdown+0xec>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <handle_emergency_shutdown+0xac>
		show_popup("\n\n  NO tip detected");
 80034e0:	4816      	ldr	r0, [pc, #88]	; (800353c <handle_emergency_shutdown+0xfc>)
 80034e2:	f7ff fe79 	bl	80031d8 <show_popup>
		change_state(EMERGENCY_SLEEP);
 80034e6:	2003      	movs	r0, #3
 80034e8:	f7fe f804 	bl	80014f4 <change_state>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <handle_emergency_shutdown+0xe8>)
 80034ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80034f2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d900      	bls.n	8003502 <handle_emergency_shutdown+0xc2>
		show_popup("\n\n  Too Low voltage");
		change_state(EMERGENCY_SLEEP);
	}
}
 8003500:	e009      	b.n	8003516 <handle_emergency_shutdown+0xd6>
	if((sensor_values.bus_voltage <= MIN_BUSVOLTAGE) && (active_state == RUN)){
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <handle_emergency_shutdown+0xec>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <handle_emergency_shutdown+0xd6>
		show_popup("\n\n  Too Low voltage");
 800350a:	480d      	ldr	r0, [pc, #52]	; (8003540 <handle_emergency_shutdown+0x100>)
 800350c:	f7ff fe64 	bl	80031d8 <show_popup>
		change_state(EMERGENCY_SLEEP);
 8003510:	2003      	movs	r0, #3
 8003512:	f7fd ffef 	bl	80014f4 <change_state>
}
 8003516:	bf00      	nop
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	bf00      	nop
 800351c:	f3af 8000 	nop.w
 8003520:	00000000 	.word	0x00000000
 8003524:	40ed4c00 	.word	0x40ed4c00
 8003528:	20000030 	.word	0x20000030
 800352c:	2000001d 	.word	0x2000001d
 8003530:	20000470 	.word	0x20000470
 8003534:	20000550 	.word	0x20000550
 8003538:	407e0000 	.word	0x407e0000
 800353c:	08015698 	.word	0x08015698
 8003540:	080156ac 	.word	0x080156ac

08003544 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8003544:	b598      	push	{r3, r4, r7, lr}
 8003546:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <handle_button_status+0x98>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11e      	bne.n	800358e <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <handle_button_status+0x98>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <handle_button_status+0x9c>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <handle_button_status+0x22>
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <handle_button_status+0x9c>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d103      	bne.n	800356e <handle_button_status+0x2a>
			change_state(HALTED);
 8003566:	2004      	movs	r0, #4
 8003568:	f7fd ffc4 	bl	80014f4 <change_state>
 800356c:	e00a      	b.n	8003584 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <handle_button_status+0x9c>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d003      	beq.n	800357e <handle_button_status+0x3a>
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <handle_button_status+0x9c>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d102      	bne.n	8003584 <handle_button_status+0x40>
			change_state(RUN);
 800357e:	2000      	movs	r0, #0
 8003580:	f7fd ffb8 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8003584:	f003 f9b6 	bl	80068f4 <HAL_GetTick>
 8003588:	4603      	mov	r3, r0
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <handle_button_status+0xa0>)
 800358c:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 800358e:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <handle_button_status+0xa4>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10d      	bne.n	80035b2 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <handle_button_status+0xa4>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <handle_button_status+0xa8>)
 800359e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035a2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb25 	bl	8000bf8 <__aeabi_d2uiz>
 80035ae:	4603      	mov	r3, r0
 80035b0:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <handle_button_status+0xac>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10d      	bne.n	80035d6 <handle_button_status+0x92>
		SW_3_pressed = 0;
 80035ba:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <handle_button_status+0xac>)
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <handle_button_status+0xa8>)
 80035c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80035c6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fb13 	bl	8000bf8 <__aeabi_d2uiz>
 80035d2:	4603      	mov	r3, r0
 80035d4:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 80035d6:	bf00      	nop
 80035d8:	bd98      	pop	{r3, r4, r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000484 	.word	0x20000484
 80035e0:	2000001d 	.word	0x2000001d
 80035e4:	2000046c 	.word	0x2000046c
 80035e8:	20000485 	.word	0x20000485
 80035ec:	20000550 	.word	0x20000550
 80035f0:	20000486 	.word	0x20000486
 80035f4:	00000000 	.word	0x00000000

080035f8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003604:	f006 feb8 	bl	800a378 <HAL_GPIO_ReadPin>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <get_stand_status+0x1c>
		stand_status = 1;
 800360e:	2301      	movs	r3, #1
 8003610:	71fb      	strb	r3, [r7, #7]
 8003612:	e001      	b.n	8003618 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	493b      	ldr	r1, [pc, #236]	; (8003708 <get_stand_status+0x110>)
 800361c:	4618      	mov	r0, r3
 800361e:	f001 faf7 	bl	8004c10 <Moving_Average_Compute>
 8003622:	eeb0 7a40 	vmov.f32	s14, s0
 8003626:	eef0 7a60 	vmov.f32	s15, s1
 800362a:	4b38      	ldr	r3, [pc, #224]	; (800370c <get_stand_status+0x114>)
 800362c:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8003630:	4b36      	ldr	r3, [pc, #216]	; (800370c <get_stand_status+0x114>)
 8003632:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003636:	a330      	add	r3, pc, #192	; (adr r3, 80036f8 <get_stand_status+0x100>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fd fa8a 	bl	8000b54 <__aeabi_dcmpge>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d039      	beq.n	80036ba <get_stand_status+0xc2>
		if(active_state == RUN){
 8003646:	4b32      	ldr	r3, [pc, #200]	; (8003710 <get_stand_status+0x118>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d107      	bne.n	800365e <get_stand_status+0x66>
			change_state(STANDBY);
 800364e:	2001      	movs	r0, #1
 8003650:	f7fd ff50 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8003654:	f003 f94e 	bl	80068f4 <HAL_GetTick>
 8003658:	4603      	mov	r3, r0
 800365a:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <get_stand_status+0x11c>)
 800365c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 800365e:	f003 f949 	bl	80068f4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	4b2b      	ldr	r3, [pc, #172]	; (8003714 <get_stand_status+0x11c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff72 	bl	8000554 <__aeabi_ui2d>
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <get_stand_status+0x120>)
 8003676:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800367a:	a321      	add	r3, pc, #132	; (adr r3, 8003700 <get_stand_status+0x108>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ffe2 	bl	8000648 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fd fa62 	bl	8000b54 <__aeabi_dcmpge>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <get_stand_status+0xac>
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <get_stand_status+0x118>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <get_stand_status+0xac>
			change_state(SLEEP);
 800369e:	2002      	movs	r0, #2
 80036a0:	f7fd ff28 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <get_stand_status+0x118>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d003      	beq.n	80036b4 <get_stand_status+0xbc>
 80036ac:	4b18      	ldr	r3, [pc, #96]	; (8003710 <get_stand_status+0x118>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d102      	bne.n	80036ba <get_stand_status+0xc2>
			change_state(SLEEP);
 80036b4:	2002      	movs	r0, #2
 80036b6:	f7fd ff1d 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 80036ba:	4b14      	ldr	r3, [pc, #80]	; (800370c <get_stand_status+0x114>)
 80036bc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80036c0:	a30d      	add	r3, pc, #52	; (adr r3, 80036f8 <get_stand_status+0x100>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fd fa31 	bl	8000b2c <__aeabi_dcmplt>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d100      	bne.n	80036d2 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 80036d0:	e00e      	b.n	80036f0 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <get_stand_status+0x118>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d007      	beq.n	80036ea <get_stand_status+0xf2>
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <get_stand_status+0x118>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d003      	beq.n	80036ea <get_stand_status+0xf2>
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <get_stand_status+0x118>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <get_stand_status+0xf8>
			change_state(RUN);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7fd ff02 	bl	80014f4 <change_state>
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	9999999a 	.word	0x9999999a
 80036fc:	3fc99999 	.word	0x3fc99999
 8003700:	00000000 	.word	0x00000000
 8003704:	40ed4c00 	.word	0x40ed4c00
 8003708:	2000126c 	.word	0x2000126c
 800370c:	20000030 	.word	0x20000030
 8003710:	2000001d 	.word	0x2000001d
 8003714:	20000474 	.word	0x20000474
 8003718:	20000550 	.word	0x20000550

0800371c <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8003722:	2110      	movs	r1, #16
 8003724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003728:	f006 fe26 	bl	800a378 <HAL_GPIO_ReadPin>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <get_handle_type+0x1c>
		handle_status = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	71fb      	strb	r3, [r7, #7]
 8003736:	e001      	b.n	800373c <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 8003738:	2301      	movs	r3, #1
 800373a:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	495b      	ldr	r1, [pc, #364]	; (80038ac <get_handle_type+0x190>)
 8003740:	4618      	mov	r0, r3
 8003742:	f001 fa65 	bl	8004c10 <Moving_Average_Compute>
 8003746:	eeb0 7a40 	vmov.f32	s14, s0
 800374a:	eef0 7a60 	vmov.f32	s15, s1
 800374e:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <get_handle_type+0x194>)
 8003750:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8003754:	2120      	movs	r1, #32
 8003756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375a:	f006 fe0d 	bl	800a378 <HAL_GPIO_ReadPin>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <get_handle_type+0x4e>
		handle_status = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	71fb      	strb	r3, [r7, #7]
 8003768:	e001      	b.n	800376e <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	4950      	ldr	r1, [pc, #320]	; (80038b4 <get_handle_type+0x198>)
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fa4c 	bl	8004c10 <Moving_Average_Compute>
 8003778:	eeb0 7a40 	vmov.f32	s14, s0
 800377c:	eef0 7a60 	vmov.f32	s15, s1
 8003780:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <get_handle_type+0x194>)
 8003782:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <get_handle_type+0x194>)
 8003788:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <get_handle_type+0x19c>)
 8003792:	f7fd f9df 	bl	8000b54 <__aeabi_dcmpge>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <get_handle_type+0xc8>
 800379c:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <get_handle_type+0x194>)
 800379e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <get_handle_type+0x19c>)
 80037a8:	f7fd f9c0 	bl	8000b2c <__aeabi_dcmplt>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <get_handle_type+0xc8>
		handle = NT115;
 80037b2:	4b42      	ldr	r3, [pc, #264]	; (80038bc <get_handle_type+0x1a0>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 80037b8:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <get_handle_type+0x194>)
 80037ba:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <get_handle_type+0x1a4>)
 80037bc:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 80037be:	4941      	ldr	r1, [pc, #260]	; (80038c4 <get_handle_type+0x1a8>)
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <get_handle_type+0x1ac>)
 80037c6:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 80037ca:	4940      	ldr	r1, [pc, #256]	; (80038cc <get_handle_type+0x1b0>)
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <get_handle_type+0x1b4>)
 80037d2:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 80037d6:	493f      	ldr	r1, [pc, #252]	; (80038d4 <get_handle_type+0x1b8>)
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	4b3e      	ldr	r3, [pc, #248]	; (80038d8 <get_handle_type+0x1bc>)
 80037de:	e9c1 2300 	strd	r2, r3, [r1]
 80037e2:	e046      	b.n	8003872 <get_handle_type+0x156>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 80037e4:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <get_handle_type+0x194>)
 80037e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <get_handle_type+0x19c>)
 80037f0:	f7fd f99c 	bl	8000b2c <__aeabi_dcmplt>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d023      	beq.n	8003842 <get_handle_type+0x126>
 80037fa:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <get_handle_type+0x194>)
 80037fc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <get_handle_type+0x19c>)
 8003806:	f7fd f9a5 	bl	8000b54 <__aeabi_dcmpge>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <get_handle_type+0x126>
		handle = T210;
 8003810:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <get_handle_type+0x1a0>)
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <get_handle_type+0x194>)
 8003818:	4a30      	ldr	r2, [pc, #192]	; (80038dc <get_handle_type+0x1c0>)
 800381a:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 6;
 800381c:	4929      	ldr	r1, [pc, #164]	; (80038c4 <get_handle_type+0x1a8>)
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <get_handle_type+0x1c4>)
 8003824:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8003828:	4928      	ldr	r1, [pc, #160]	; (80038cc <get_handle_type+0x1b0>)
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <get_handle_type+0x1c8>)
 8003830:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003834:	4927      	ldr	r1, [pc, #156]	; (80038d4 <get_handle_type+0x1b8>)
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <get_handle_type+0x19c>)
 800383c:	e9c1 2300 	strd	r2, r3, [r1]
 8003840:	e017      	b.n	8003872 <get_handle_type+0x156>
	}
	else{
		handle = T245;
 8003842:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <get_handle_type+0x1a0>)
 8003844:	2202      	movs	r2, #2
 8003846:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <get_handle_type+0x194>)
 800384a:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <get_handle_type+0x1cc>)
 800384c:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 800384e:	491d      	ldr	r1, [pc, #116]	; (80038c4 <get_handle_type+0x1a8>)
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <get_handle_type+0x1d0>)
 8003856:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 800385a:	491c      	ldr	r1, [pc, #112]	; (80038cc <get_handle_type+0x1b0>)
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <get_handle_type+0x1ac>)
 8003862:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003866:	491b      	ldr	r1, [pc, #108]	; (80038d4 <get_handle_type+0x1b8>)
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <get_handle_type+0x19c>)
 800386e:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8003872:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <get_handle_type+0x1a8>)
 8003874:	ed93 7b00 	vldr	d7, [r3]
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <get_handle_type+0x1b0>)
 800387a:	ed93 6b00 	vldr	d6, [r3]
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <get_handle_type+0x1b8>)
 8003880:	ed93 5b00 	vldr	d5, [r3]
 8003884:	eeb0 2a45 	vmov.f32	s4, s10
 8003888:	eef0 2a65 	vmov.f32	s5, s11
 800388c:	eeb0 1a46 	vmov.f32	s2, s12
 8003890:	eef0 1a66 	vmov.f32	s3, s13
 8003894:	eeb0 0a47 	vmov.f32	s0, s14
 8003898:	eef0 0a67 	vmov.f32	s1, s15
 800389c:	4814      	ldr	r0, [pc, #80]	; (80038f0 <get_handle_type+0x1d4>)
 800389e:	f001 fc6e 	bl	800517e <PID_SetTunings>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20001598 	.word	0x20001598
 80038b0:	20000030 	.word	0x20000030
 80038b4:	200018c4 	.word	0x200018c4
 80038b8:	3fe00000 	.word	0x3fe00000
 80038bc:	20000460 	.word	0x20000460
 80038c0:	41a00000 	.word	0x41a00000
 80038c4:	20000490 	.word	0x20000490
 80038c8:	40080000 	.word	0x40080000
 80038cc:	20000498 	.word	0x20000498
 80038d0:	3ff00000 	.word	0x3ff00000
 80038d4:	200004a0 	.word	0x200004a0
 80038d8:	3fd00000 	.word	0x3fd00000
 80038dc:	42700000 	.word	0x42700000
 80038e0:	40180000 	.word	0x40180000
 80038e4:	40140000 	.word	0x40140000
 80038e8:	42f00000 	.word	0x42f00000
 80038ec:	40200000 	.word	0x40200000
 80038f0:	20002158 	.word	0x20002158

080038f4 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b20      	cmp	r3, #32
 8003902:	d006      	beq.n	8003912 <HAL_GPIO_EXTI_Callback+0x1e>
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_EXTI_Callback+0x1e>
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003910:	d109      	bne.n	8003926 <HAL_GPIO_EXTI_Callback+0x32>
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 800391a:	4806      	ldr	r0, [pc, #24]	; (8003934 <HAL_GPIO_EXTI_Callback+0x40>)
 800391c:	f008 fbe4 	bl	800c0e8 <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
    }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000001c 	.word	0x2000001c
 8003934:	2000202c 	.word	0x2000202c

08003938 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7f1b      	ldrb	r3, [r3, #28]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d003      	beq.n	8003950 <HAL_TIM_IC_CaptureCallback+0x18>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7f1b      	ldrb	r3, [r3, #28]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d101      	bne.n	8003954 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8003950:	f7ff fd56 	bl	8003400 <beep>
	}
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d110      	bne.n	800398e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7f1b      	ldrb	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10c      	bne.n	800398e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8003988:	4806      	ldr	r0, [pc, #24]	; (80039a4 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800398a:	f003 fccb 	bl	8007324 <HAL_ADC_Start_IT>
	}
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20001e64 	.word	0x20001e64
 800399c:	200005b8 	.word	0x200005b8
 80039a0:	200001d4 	.word	0x200001d4
 80039a4:	20001c5c 	.word	0x20001c5c

080039a8 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10c      	bne.n	80039d2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 80039b8:	f7fd ffc8 	bl	800194c <heater_off>
		thermocouple_measurement_done = 0;
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d104      	bne.n	80039e4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 80039da:	2239      	movs	r2, #57	; 0x39
 80039dc:	492d      	ldr	r1, [pc, #180]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80039de:	482e      	ldr	r0, [pc, #184]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80039e0:	f003 fdd0 	bl	8007584 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d106      	bne.n	80039fa <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 80039ec:	482b      	ldr	r0, [pc, #172]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80039ee:	f008 fbe5 	bl	800c1bc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 80039f2:	2104      	movs	r1, #4
 80039f4:	482a      	ldr	r0, [pc, #168]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80039f6:	f008 fdb3 	bl	800c560 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d13d      	bne.n	8003a7e <HAL_TIM_PeriodElapsedCallback+0xd6>
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d139      	bne.n	8003a7e <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003a0a:	2120      	movs	r1, #32
 8003a0c:	4827      	ldr	r0, [pc, #156]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a0e:	f006 fcb3 	bl	800a378 <HAL_GPIO_ReadPin>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10b      	bne.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
			beep();
 8003a24:	f7ff fcec 	bl	8003400 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a28:	481e      	ldr	r0, [pc, #120]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a2a:	f008 fbc7 	bl	800c1bc <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 8003a2e:	e026      	b.n	8003a7e <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a36:	f006 fc9f 	bl	800a378 <HAL_GPIO_ReadPin>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10b      	bne.n	8003a58 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
			beep();
 8003a4c:	f7ff fcd8 	bl	8003400 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a50:	4814      	ldr	r0, [pc, #80]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a52:	f008 fbb3 	bl	800c1bc <HAL_TIM_Base_Stop_IT>
}
 8003a56:	e012      	b.n	8003a7e <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8003a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a5c:	4813      	ldr	r0, [pc, #76]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x104>)
 8003a5e:	f006 fc8b 	bl	800a378 <HAL_GPIO_ReadPin>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10a      	bne.n	8003a7e <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
			beep();
 8003a74:	f7ff fcc4 	bl	8003400 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 8003a78:	480a      	ldr	r0, [pc, #40]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003a7a:	f008 fb9f 	bl	800c1bc <HAL_TIM_Base_Stop_IT>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20001f48 	.word	0x20001f48
 8003a8c:	200001d5 	.word	0x200001d5
 8003a90:	20001f94 	.word	0x20001f94
 8003a94:	200004d4 	.word	0x200004d4
 8003a98:	20001bf0 	.word	0x20001bf0
 8003a9c:	20002078 	.word	0x20002078
 8003aa0:	20001efc 	.word	0x20001efc
 8003aa4:	2000202c 	.word	0x2000202c
 8003aa8:	2000001c 	.word	0x2000001c
 8003aac:	48000400 	.word	0x48000400
 8003ab0:	20000484 	.word	0x20000484
 8003ab4:	20000485 	.word	0x20000485
 8003ab8:	20000486 	.word	0x20000486

08003abc <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003acc:	d110      	bne.n	8003af0 <HAL_ADC_ConvCpltCallback+0x34>
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_ADC_ConvCpltCallback+0x74>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8003ad6:	f7fd fdb7 	bl	8001648 <get_thermocouple_temperature>
		heater_on();
 8003ada:	f7fd fee1 	bl	80018a0 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8003ade:	4815      	ldr	r0, [pc, #84]	; (8003b34 <HAL_ADC_ConvCpltCallback+0x78>)
 8003ae0:	f001 f976 	bl	8004dd0 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8003ae4:	4814      	ldr	r0, [pc, #80]	; (8003b38 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003ae6:	f003 fe01 	bl	80076ec <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_ADC_ConvCpltCallback+0x74>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <HAL_ADC_ConvCpltCallback+0x80>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d116      	bne.n	8003b28 <HAL_ADC_ConvCpltCallback+0x6c>
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_ADC_ConvCpltCallback+0x84>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d112      	bne.n	8003b28 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 8003b02:	4810      	ldr	r0, [pc, #64]	; (8003b44 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b04:	f003 fe53 	bl	80077ae <HAL_ADC_GetValue>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003b0e:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 8003b10:	480c      	ldr	r0, [pc, #48]	; (8003b44 <HAL_ADC_ConvCpltCallback+0x88>)
 8003b12:	f003 fe4c 	bl	80077ae <HAL_ADC_GetValue>
 8003b16:	4603      	mov	r3, r0
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_ADC_ConvCpltCallback+0x90>)
 8003b1c:	801a      	strh	r2, [r3, #0]
		heater_on();
 8003b1e:	f7fd febf 	bl	80018a0 <heater_on>
		current_measurement_done = 1;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <HAL_ADC_ConvCpltCallback+0x84>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
	}
}
 8003b28:	bf00      	nop
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200001d5 	.word	0x200001d5
 8003b34:	20002158 	.word	0x20002158
 8003b38:	20001bf0 	.word	0x20001bf0
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	200001d4 	.word	0x200001d4
 8003b44:	20001c5c 	.word	0x20001c5c
 8003b48:	20000030 	.word	0x20000030
 8003b4c:	20000546 	.word	0x20000546

08003b50 <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003b58:	f7ff fb84 	bl	8003264 <LCD_draw_earth_fault_popup>
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	0000      	movs	r0, r0
	...

08003b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	ed2d 8b06 	vpush	{d8-d10}
 8003b70:	b08e      	sub	sp, #56	; 0x38
 8003b72:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b74:	f002 fe5a 	bl	800682c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b78:	f000 fa68 	bl	800404c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b7c:	f000 ff62 	bl	8004a44 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b80:	f000 ff2e 	bl	80049e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8003b84:	f000 faae 	bl	80040e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003b88:	f000 fb44 	bl	8004214 <MX_ADC2_Init>
  MX_CRC_Init();
 8003b8c:	f000 fbe0 	bl	8004350 <MX_CRC_Init>
  MX_TIM1_Init();
 8003b90:	f000 fc7e 	bl	8004490 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003b94:	f000 fd1c 	bl	80045d0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003b98:	f000 fd6e 	bl	8004678 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003b9c:	f000 fc3a 	bl	8004414 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003ba0:	f000 fbf8 	bl	8004394 <MX_I2C1_Init>
  MX_TIM17_Init();
 8003ba4:	f000 fea0 	bl	80048e8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003ba8:	f000 fece 	bl	8004948 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003bac:	f000 fdf4 	bl	8004798 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003bb0:	f000 fe32 	bl	8004818 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003bb4:	f000 fdba 	bl	800472c <MX_TIM6_Init>
  MX_TIM16_Init();
 8003bb8:	f000 fe6e 	bl	8004898 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f7fd fe47 	bl	8001850 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003bc2:	2108      	movs	r1, #8
 8003bc4:	4896      	ldr	r0, [pc, #600]	; (8003e20 <main+0x2b8>)
 8003bc6:	f009 fd83 	bl	800d6d0 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003bca:	213c      	movs	r1, #60	; 0x3c
 8003bcc:	4895      	ldr	r0, [pc, #596]	; (8003e24 <main+0x2bc>)
 8003bce:	f008 fea1 	bl	800c914 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4892      	ldr	r0, [pc, #584]	; (8003e20 <main+0x2b8>)
 8003bd6:	f008 fb77 	bl	800c2c8 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003bda:	4b93      	ldr	r3, [pc, #588]	; (8003e28 <main+0x2c0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2205      	movs	r2, #5
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8003be2:	4892      	ldr	r0, [pc, #584]	; (8003e2c <main+0x2c4>)
 8003be4:	f008 fa80 	bl	800c0e8 <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8003be8:	4b91      	ldr	r3, [pc, #580]	; (8003e30 <main+0x2c8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	4b90      	ldr	r3, [pc, #576]	; (8003e30 <main+0x2c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003bf8:	217f      	movs	r1, #127	; 0x7f
 8003bfa:	488e      	ldr	r0, [pc, #568]	; (8003e34 <main+0x2cc>)
 8003bfc:	f005 f896 	bl	8008d2c <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003c00:	217f      	movs	r1, #127	; 0x7f
 8003c02:	488d      	ldr	r0, [pc, #564]	; (8003e38 <main+0x2d0>)
 8003c04:	f005 f892 	bl	8008d2c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003c08:	2239      	movs	r2, #57	; 0x39
 8003c0a:	498c      	ldr	r1, [pc, #560]	; (8003e3c <main+0x2d4>)
 8003c0c:	488a      	ldr	r0, [pc, #552]	; (8003e38 <main+0x2d0>)
 8003c0e:	f003 fcb9 	bl	8007584 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 8003c12:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003c16:	488a      	ldr	r0, [pc, #552]	; (8003e40 <main+0x2d8>)
 8003c18:	f000 ffc9 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003c1c:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003e44 <main+0x2dc>
 8003c20:	4889      	ldr	r0, [pc, #548]	; (8003e48 <main+0x2e0>)
 8003c22:	f000 ffc4 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003c26:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003c2a:	4888      	ldr	r0, [pc, #544]	; (8003e4c <main+0x2e4>)
 8003c2c:	f000 ffbf 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 8003c30:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003c34:	4886      	ldr	r0, [pc, #536]	; (8003e50 <main+0x2e8>)
 8003c36:	f000 ffba 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003c3a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c3e:	4885      	ldr	r0, [pc, #532]	; (8003e54 <main+0x2ec>)
 8003c40:	f000 ffb5 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003c44:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c48:	4883      	ldr	r0, [pc, #524]	; (8003e58 <main+0x2f0>)
 8003c4a:	f000 ffb0 	bl	8004bae <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003c4e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003c52:	4882      	ldr	r0, [pc, #520]	; (8003e5c <main+0x2f4>)
 8003c54:	f000 ffab 	bl	8004bae <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003c58:	20c8      	movs	r0, #200	; 0xc8
 8003c5a:	f002 fe57 	bl	800690c <HAL_Delay>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003c5e:	f7fd f9fd 	bl	800105c <FlashCheckCRC>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f083 0301 	eor.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <main+0x10c>
  	    	FlashWrite(&default_flash_values);
 8003c6e:	487c      	ldr	r0, [pc, #496]	; (8003e60 <main+0x2f8>)
 8003c70:	f7fd fa98 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003c74:	487b      	ldr	r0, [pc, #492]	; (8003e64 <main+0x2fc>)
 8003c76:	f7fd fa7b 	bl	8001170 <FlashRead>

  	    /* Set screen rotation */
  	    if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8003c7a:	4b7a      	ldr	r3, [pc, #488]	; (8003e64 <main+0x2fc>)
 8003c7c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f7fc ff46 	bl	8000b18 <__aeabi_dcmpeq>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
  	    }
  	    if((flash_values.screen_rotation == 1) || (flash_values.screen_rotation == 3)){
 8003c90:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <main+0x2fc>)
 8003c92:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	4b73      	ldr	r3, [pc, #460]	; (8003e68 <main+0x300>)
 8003c9c:	f7fc ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
		}

  	    LCD_init();
 8003ca4:	f002 fd56 	bl	8006754 <LCD_init>
  	  	LCD_SetRotation(flash_values.screen_rotation);
 8003ca8:	4b6e      	ldr	r3, [pc, #440]	; (8003e64 <main+0x2fc>)
 8003caa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7fc ffa1 	bl	8000bf8 <__aeabi_d2uiz>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 faf8 	bl	80062b0 <LCD_SetRotation>

  		/* Set startup state */
  	    change_state(HALTED);
 8003cc0:	2004      	movs	r0, #4
 8003cc2:	f7fd fc17 	bl	80014f4 <change_state>

  		settings_menue();
 8003cc6:	f7fd fe4b 	bl	8001960 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <main+0x2fc>)
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	f7fc ff8e 	bl	8000bf8 <__aeabi_d2uiz>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_CD_DIRECT);
 8003ce0:	4b62      	ldr	r3, [pc, #392]	; (8003e6c <main+0x304>)
 8003ce2:	ed93 7b00 	vldr	d7, [r3]
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <main+0x308>)
 8003ce8:	ed93 6b00 	vldr	d6, [r3]
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <main+0x30c>)
 8003cee:	ed93 5b00 	vldr	d5, [r3]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	eeb0 2a45 	vmov.f32	s4, s10
 8003cfa:	eef0 2a65 	vmov.f32	s5, s11
 8003cfe:	eeb0 1a46 	vmov.f32	s2, s12
 8003d02:	eef0 1a66 	vmov.f32	s3, s13
 8003d06:	eeb0 0a47 	vmov.f32	s0, s14
 8003d0a:	eef0 0a67 	vmov.f32	s1, s15
 8003d0e:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <main+0x310>)
 8003d10:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <main+0x314>)
 8003d12:	495b      	ldr	r1, [pc, #364]	; (8003e80 <main+0x318>)
 8003d14:	485b      	ldr	r0, [pc, #364]	; (8003e84 <main+0x31c>)
 8003d16:	f001 f813 	bl	8004d40 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4859      	ldr	r0, [pc, #356]	; (8003e84 <main+0x31c>)
 8003d1e:	f001 f9a2 	bl	8005066 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <main+0x320>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4856      	ldr	r0, [pc, #344]	; (8003e84 <main+0x31c>)
 8003d2c:	f001 fb16 	bl	800535c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8003d30:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8003e10 <main+0x2a8>
 8003d34:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8003e18 <main+0x2b0>
 8003d38:	4852      	ldr	r0, [pc, #328]	; (8003e84 <main+0x31c>)
 8003d3a:	f001 f9b2 	bl	80050a2 <PID_SetOutputLimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003d3e:	f7fe ff6d 	bl	8002c1c <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003d42:	2300      	movs	r3, #0
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	e010      	b.n	8003d6a <main+0x202>
  			get_bus_voltage();
 8003d48:	f7fd fc2a 	bl	80015a0 <get_bus_voltage>
  			get_heater_current();
 8003d4c:	f7fd fc54 	bl	80015f8 <get_heater_current>
  			get_mcu_temp();
 8003d50:	f7fd fb5e 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003d54:	f7fd fc78 	bl	8001648 <get_thermocouple_temperature>
  			get_handle_type();
 8003d58:	f7ff fce0 	bl	800371c <get_handle_type>
  			get_stand_status();
 8003d5c:	f7ff fc4c 	bl	80035f8 <get_stand_status>
  			handle_button_status();
 8003d60:	f7ff fbf0 	bl	8003544 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3301      	adds	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2bc7      	cmp	r3, #199	; 0xc7
 8003d6e:	ddeb      	ble.n	8003d48 <main+0x1e0>
  		}

  		/* Start-up beep */
  		beep();
 8003d70:	f7ff fb46 	bl	8003400 <beep>
  		HAL_Delay(100);
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	f002 fdc9 	bl	800690c <HAL_Delay>
  		beep();
 8003d7a:	f7ff fb41 	bl	8003400 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003d7e:	f002 fdb9 	bl	80068f4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <main+0x324>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1ad2      	subs	r2, r2, r3
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <main+0x328>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d30e      	bcc.n	8003db0 <main+0x248>
  				get_stand_status();
 8003d92:	f7ff fc31 	bl	80035f8 <get_stand_status>
  				get_handle_type();
 8003d96:	f7ff fcc1 	bl	800371c <get_handle_type>
  				get_set_temperature();
 8003d9a:	f7ff faf1 	bl	8003380 <get_set_temperature>
  				handle_button_status();
 8003d9e:	f7ff fbd1 	bl	8003544 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003da2:	f7ff fb4d 	bl	8003440 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003da6:	f002 fda5 	bl	80068f4 <HAL_GetTick>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <main+0x324>)
 8003dae:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003db0:	f002 fda0 	bl	80068f4 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <main+0x32c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	1ad2      	subs	r2, r2, r3
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <main+0x330>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d30a      	bcc.n	8003dda <main+0x272>
  				get_bus_voltage();
 8003dc4:	f7fd fbec 	bl	80015a0 <get_bus_voltage>
  				get_heater_current();
 8003dc8:	f7fd fc16 	bl	80015f8 <get_heater_current>
  				get_mcu_temp();
 8003dcc:	f7fd fb20 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003dd0:	f002 fd90 	bl	80068f4 <HAL_GetTick>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <main+0x32c>)
 8003dd8:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <main+0x334>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	dc68      	bgt.n	8003eb4 <main+0x34c>
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	da5e      	bge.n	8003ea4 <main+0x33c>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <main+0x288>
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d007      	beq.n	8003dfe <main+0x296>
 8003dee:	e061      	b.n	8003eb4 <main+0x34c>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <main+0x338>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	4920      	ldr	r1, [pc, #128]	; (8003e78 <main+0x310>)
 8003df8:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003dfc:	e05a      	b.n	8003eb4 <main+0x34c>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8003dfe:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <main+0x2fc>)
 8003e00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e04:	491c      	ldr	r1, [pc, #112]	; (8003e78 <main+0x310>)
 8003e06:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e0a:	e053      	b.n	8003eb4 <main+0x34c>
 8003e0c:	f3af 8000 	nop.w
 8003e10:	00000000 	.word	0x00000000
 8003e14:	407f4000 	.word	0x407f4000
	...
 8003e20:	20001e64 	.word	0x20001e64
 8003e24:	20001eb0 	.word	0x20001eb0
 8003e28:	20001efc 	.word	0x20001efc
 8003e2c:	20001f48 	.word	0x20001f48
 8003e30:	20001f94 	.word	0x20001f94
 8003e34:	20001c5c 	.word	0x20001c5c
 8003e38:	20001bf0 	.word	0x20001bf0
 8003e3c:	200004d4 	.word	0x200004d4
 8003e40:	200005bc 	.word	0x200005bc
 8003e44:	42c80000 	.word	0x42c80000
 8003e48:	200008e8 	.word	0x200008e8
 8003e4c:	20000c14 	.word	0x20000c14
 8003e50:	20000f40 	.word	0x20000f40
 8003e54:	2000126c 	.word	0x2000126c
 8003e58:	20001598 	.word	0x20001598
 8003e5c:	200018c4 	.word	0x200018c4
 8003e60:	20000080 	.word	0x20000080
 8003e64:	20000550 	.word	0x20000550
 8003e68:	3ff00000 	.word	0x3ff00000
 8003e6c:	20000490 	.word	0x20000490
 8003e70:	20000498 	.word	0x20000498
 8003e74:	200004a0 	.word	0x200004a0
 8003e78:	200005a8 	.word	0x200005a8
 8003e7c:	200005a0 	.word	0x200005a0
 8003e80:	20000038 	.word	0x20000038
 8003e84:	20002158 	.word	0x20002158
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	2000047c 	.word	0x2000047c
 8003e90:	20000014 	.word	0x20000014
 8003e94:	20000480 	.word	0x20000480
 8003e98:	20000018 	.word	0x20000018
 8003e9c:	2000001d 	.word	0x2000001d
 8003ea0:	20000030 	.word	0x20000030
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003ea4:	4956      	ldr	r1, [pc, #344]	; (8004000 <main+0x498>)
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003eb2:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003eb4:	f002 fd1e 	bl	80068f4 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b52      	ldr	r3, [pc, #328]	; (8004004 <main+0x49c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	4b51      	ldr	r3, [pc, #324]	; (8004008 <main+0x4a0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d36b      	bcc.n	8003fa0 <main+0x438>
  				memset(&buffer, '\0', sizeof(buffer));
 8003ec8:	2228      	movs	r2, #40	; 0x28
 8003eca:	2100      	movs	r1, #0
 8003ecc:	484f      	ldr	r0, [pc, #316]	; (800400c <main+0x4a4>)
 8003ece:	f00d fd82 	bl	80119d6 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <main+0x4a8>)
 8003ed4:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003ed8:	4b49      	ldr	r3, [pc, #292]	; (8004000 <main+0x498>)
 8003eda:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, PID_setpoint,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003ede:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <main+0x4ac>)
 8003ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <main+0x4b0>)
 8003eea:	f7fc fcd7 	bl	800089c <__aeabi_ddiv>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b48      	ldr	r3, [pc, #288]	; (800401c <main+0x4b4>)
 8003efc:	f7fc fba4 	bl	8000648 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f08:	4845      	ldr	r0, [pc, #276]	; (8004020 <main+0x4b8>)
 8003f0a:	f001 fa6b 	bl	80053e4 <PID_GetPpart>
 8003f0e:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <main+0x4bc>)
 8003f18:	f7fc fcc0 	bl	800089c <__aeabi_ddiv>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f24:	483e      	ldr	r0, [pc, #248]	; (8004020 <main+0x4b8>)
 8003f26:	f001 fa6f 	bl	8005408 <PID_GetIpart>
 8003f2a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <main+0x4bc>)
 8003f34:	f7fc fcb2 	bl	800089c <__aeabi_ddiv>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f40:	4837      	ldr	r0, [pc, #220]	; (8004020 <main+0x4b8>)
 8003f42:	f001 fa73 	bl	800542c <PID_GetDpart>
 8003f46:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	4b35      	ldr	r3, [pc, #212]	; (8004024 <main+0x4bc>)
 8003f50:	f7fc fca4 	bl	800089c <__aeabi_ddiv>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <main+0x4a8>)
 8003f5e:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f6e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003f72:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f76:	ed8d ab04 	vstr	d10, [sp, #16]
 8003f7a:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003f7e:	e9cd 8900 	strd	r8, r9, [sp]
 8003f82:	4652      	mov	r2, sl
 8003f84:	465b      	mov	r3, fp
 8003f86:	4928      	ldr	r1, [pc, #160]	; (8004028 <main+0x4c0>)
 8003f88:	4820      	ldr	r0, [pc, #128]	; (800400c <main+0x4a4>)
 8003f8a:	f00d fcc1 	bl	8011910 <siprintf>
  				//CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
  				debugPrint(&huart1,buffer);
 8003f8e:	491f      	ldr	r1, [pc, #124]	; (800400c <main+0x4a4>)
 8003f90:	4826      	ldr	r0, [pc, #152]	; (800402c <main+0x4c4>)
 8003f92:	f7fd fae5 	bl	8001560 <debugPrint>
  				previous_millis_debug = HAL_GetTick();
 8003f96:	f002 fcad 	bl	80068f4 <HAL_GetTick>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <main+0x49c>)
 8003f9e:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003fa0:	f002 fca8 	bl	80068f4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <main+0x4c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <main+0x4cc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d311      	bcc.n	8003fd8 <main+0x470>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8003fb4:	4b20      	ldr	r3, [pc, #128]	; (8004038 <main+0x4d0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10d      	bne.n	8003fd8 <main+0x470>
						current_measurement_done = 0;
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <main+0x4d4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003fc2:	20fa      	movs	r0, #250	; 0xfa
 8003fc4:	f7fd fc44 	bl	8001850 <set_heater_duty>
						current_measurement_requested = 1;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <main+0x4d8>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 8003fce:	f002 fc91 	bl	80068f4 <HAL_GetTick>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <main+0x4c8>)
 8003fd6:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8003fd8:	f002 fc8c 	bl	80068f4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b19      	ldr	r3, [pc, #100]	; (8004044 <main+0x4dc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	1ad2      	subs	r2, r2, r3
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <main+0x4e0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	f4ff aec8 	bcc.w	8003d7e <main+0x216>
  				update_display();
 8003fee:	f7fd ffeb 	bl	8001fc8 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003ff2:	f002 fc7f 	bl	80068f4 <HAL_GetTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <main+0x4dc>)
 8003ffa:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003ffc:	e6bf      	b.n	8003d7e <main+0x216>
 8003ffe:	bf00      	nop
 8004000:	200005a8 	.word	0x200005a8
 8004004:	20000468 	.word	0x20000468
 8004008:	20000008 	.word	0x20000008
 800400c:	200004a8 	.word	0x200004a8
 8004010:	20000030 	.word	0x20000030
 8004014:	200005a0 	.word	0x200005a0
 8004018:	407f4000 	.word	0x407f4000
 800401c:	40590000 	.word	0x40590000
 8004020:	20002158 	.word	0x20002158
 8004024:	40240000 	.word	0x40240000
 8004028:	080156c0 	.word	0x080156c0
 800402c:	200020c4 	.word	0x200020c4
 8004030:	20000478 	.word	0x20000478
 8004034:	20000010 	.word	0x20000010
 8004038:	200001d5 	.word	0x200001d5
 800403c:	200001d4 	.word	0x200001d4
 8004040:	200005b8 	.word	0x200005b8
 8004044:	20000464 	.word	0x20000464
 8004048:	20000004 	.word	0x20000004

0800404c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b094      	sub	sp, #80	; 0x50
 8004050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004052:	f107 0318 	add.w	r3, r7, #24
 8004056:	2238      	movs	r2, #56	; 0x38
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f00d fcbb 	bl	80119d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	609a      	str	r2, [r3, #8]
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800406e:	2000      	movs	r0, #0
 8004070:	f006 fafc 	bl	800a66c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004082:	2302      	movs	r3, #2
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004086:	2302      	movs	r3, #2
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800408a:	2304      	movs	r3, #4
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800408e:	2355      	movs	r3, #85	; 0x55
 8004090:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004092:	2302      	movs	r3, #2
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004096:	2302      	movs	r3, #2
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800409a:	2302      	movs	r3, #2
 800409c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800409e:	f107 0318 	add.w	r3, r7, #24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f006 fb96 	bl	800a7d4 <HAL_RCC_OscConfig>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80040ae:	f000 fd79 	bl	8004ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b2:	230f      	movs	r3, #15
 80040b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040b6:	2303      	movs	r3, #3
 80040b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	2104      	movs	r1, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f006 fe94 	bl	800adf8 <HAL_RCC_ClockConfig>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80040d6:	f000 fd65 	bl	8004ba4 <Error_Handler>
  }
}
 80040da:	bf00      	nop
 80040dc:	3750      	adds	r7, #80	; 0x50
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	; 0x30
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80040ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	2220      	movs	r2, #32
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f00d fc6a 	bl	80119d6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004102:	4b40      	ldr	r3, [pc, #256]	; (8004204 <MX_ADC1_Init+0x120>)
 8004104:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <MX_ADC1_Init+0x120>)
 800410c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004110:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <MX_ADC1_Init+0x120>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004118:	4b3a      	ldr	r3, [pc, #232]	; (8004204 <MX_ADC1_Init+0x120>)
 800411a:	2200      	movs	r2, #0
 800411c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <MX_ADC1_Init+0x120>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004124:	4b37      	ldr	r3, [pc, #220]	; (8004204 <MX_ADC1_Init+0x120>)
 8004126:	2201      	movs	r2, #1
 8004128:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <MX_ADC1_Init+0x120>)
 800412c:	2204      	movs	r2, #4
 800412e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <MX_ADC1_Init+0x120>)
 8004132:	2200      	movs	r2, #0
 8004134:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <MX_ADC1_Init+0x120>)
 8004138:	2201      	movs	r2, #1
 800413a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800413c:	4b31      	ldr	r3, [pc, #196]	; (8004204 <MX_ADC1_Init+0x120>)
 800413e:	2203      	movs	r2, #3
 8004140:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <MX_ADC1_Init+0x120>)
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <MX_ADC1_Init+0x120>)
 800414c:	2200      	movs	r2, #0
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <MX_ADC1_Init+0x120>)
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004156:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <MX_ADC1_Init+0x120>)
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <MX_ADC1_Init+0x120>)
 8004160:	2200      	movs	r2, #0
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004164:	4b27      	ldr	r3, [pc, #156]	; (8004204 <MX_ADC1_Init+0x120>)
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800416c:	4825      	ldr	r0, [pc, #148]	; (8004204 <MX_ADC1_Init+0x120>)
 800416e:	f002 ff55 	bl	800701c <HAL_ADC_Init>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004178:	f000 fd14 	bl	8004ba4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4619      	mov	r1, r3
 8004186:	481f      	ldr	r0, [pc, #124]	; (8004204 <MX_ADC1_Init+0x120>)
 8004188:	f004 fe64 	bl	8008e54 <HAL_ADCEx_MultiModeConfigChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004192:	f000 fd07 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <MX_ADC1_Init+0x124>)
 8004198:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800419a:	2306      	movs	r3, #6
 800419c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800419e:	2306      	movs	r3, #6
 80041a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041a2:	237f      	movs	r3, #127	; 0x7f
 80041a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041a6:	2304      	movs	r3, #4
 80041a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4814      	ldr	r0, [pc, #80]	; (8004204 <MX_ADC1_Init+0x120>)
 80041b4:	f003 fd36 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80041be:	f000 fcf1 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <MX_ADC1_Init+0x128>)
 80041c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80041c6:	230c      	movs	r3, #12
 80041c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	480d      	ldr	r0, [pc, #52]	; (8004204 <MX_ADC1_Init+0x120>)
 80041d0:	f003 fd28 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80041da:	f000 fce3 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <MX_ADC1_Init+0x12c>)
 80041e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80041e2:	2312      	movs	r3, #18
 80041e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4806      	ldr	r0, [pc, #24]	; (8004204 <MX_ADC1_Init+0x120>)
 80041ec:	f003 fd1a 	bl	8007c24 <HAL_ADC_ConfigChannel>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80041f6:	f000 fcd5 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041fa:	bf00      	nop
 80041fc:	3730      	adds	r7, #48	; 0x30
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20001bf0 	.word	0x20001bf0
 8004208:	0c900008 	.word	0x0c900008
 800420c:	10c00010 	.word	0x10c00010
 8004210:	c3210000 	.word	0xc3210000

08004214 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b090      	sub	sp, #64	; 0x40
 8004218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800421a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	615a      	str	r2, [r3, #20]
 800422c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	2220      	movs	r2, #32
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f00d fbce 	bl	80119d6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800423a:	4b40      	ldr	r3, [pc, #256]	; (800433c <MX_ADC2_Init+0x128>)
 800423c:	4a40      	ldr	r2, [pc, #256]	; (8004340 <MX_ADC2_Init+0x12c>)
 800423e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8004240:	4b3e      	ldr	r3, [pc, #248]	; (800433c <MX_ADC2_Init+0x128>)
 8004242:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004246:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004248:	4b3c      	ldr	r3, [pc, #240]	; (800433c <MX_ADC2_Init+0x128>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <MX_ADC2_Init+0x128>)
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004254:	4b39      	ldr	r3, [pc, #228]	; (800433c <MX_ADC2_Init+0x128>)
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <MX_ADC2_Init+0x128>)
 800425c:	2201      	movs	r2, #1
 800425e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004260:	4b36      	ldr	r3, [pc, #216]	; (800433c <MX_ADC2_Init+0x128>)
 8004262:	2204      	movs	r2, #4
 8004264:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <MX_ADC2_Init+0x128>)
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800426c:	4b33      	ldr	r3, [pc, #204]	; (800433c <MX_ADC2_Init+0x128>)
 800426e:	2200      	movs	r2, #0
 8004270:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8004272:	4b32      	ldr	r3, [pc, #200]	; (800433c <MX_ADC2_Init+0x128>)
 8004274:	2202      	movs	r2, #2
 8004276:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004278:	4b30      	ldr	r3, [pc, #192]	; (800433c <MX_ADC2_Init+0x128>)
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004280:	4b2e      	ldr	r3, [pc, #184]	; (800433c <MX_ADC2_Init+0x128>)
 8004282:	2200      	movs	r2, #0
 8004284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004286:	4b2d      	ldr	r3, [pc, #180]	; (800433c <MX_ADC2_Init+0x128>)
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800428c:	4b2b      	ldr	r3, [pc, #172]	; (800433c <MX_ADC2_Init+0x128>)
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <MX_ADC2_Init+0x128>)
 8004296:	2200      	movs	r2, #0
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800429a:	4b28      	ldr	r3, [pc, #160]	; (800433c <MX_ADC2_Init+0x128>)
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80042a2:	4826      	ldr	r0, [pc, #152]	; (800433c <MX_ADC2_Init+0x128>)
 80042a4:	f002 feba 	bl	800701c <HAL_ADC_Init>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80042ae:	f000 fc79 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <MX_ADC2_Init+0x130>)
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80042b6:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80042bc:	4b22      	ldr	r3, [pc, #136]	; (8004348 <MX_ADC2_Init+0x134>)
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 80042c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80042ca:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80042d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d8:	4619      	mov	r1, r3
 80042da:	4818      	ldr	r0, [pc, #96]	; (800433c <MX_ADC2_Init+0x128>)
 80042dc:	f004 f892 	bl	8008404 <HAL_ADC_AnalogWDGConfig>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80042e6:	f000 fc5d 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <MX_ADC2_Init+0x134>)
 80042ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042ee:	2306      	movs	r3, #6
 80042f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042f6:	237f      	movs	r3, #127	; 0x7f
 80042f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042fa:	2304      	movs	r3, #4
 80042fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	4619      	mov	r1, r3
 8004306:	480d      	ldr	r0, [pc, #52]	; (800433c <MX_ADC2_Init+0x128>)
 8004308:	f003 fc8c 	bl	8007c24 <HAL_ADC_ConfigChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8004312:	f000 fc47 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <MX_ADC2_Init+0x138>)
 8004318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800431a:	230c      	movs	r3, #12
 800431c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800431e:	1d3b      	adds	r3, r7, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4806      	ldr	r0, [pc, #24]	; (800433c <MX_ADC2_Init+0x128>)
 8004324:	f003 fc7e 	bl	8007c24 <HAL_ADC_ConfigChannel>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 800432e:	f000 fc39 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004332:	bf00      	nop
 8004334:	3740      	adds	r7, #64	; 0x40
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20001c5c 	.word	0x20001c5c
 8004340:	50000100 	.word	0x50000100
 8004344:	7dc00000 	.word	0x7dc00000
 8004348:	08600004 	.word	0x08600004
 800434c:	2a000400 	.word	0x2a000400

08004350 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004354:	4b0d      	ldr	r3, [pc, #52]	; (800438c <MX_CRC_Init+0x3c>)
 8004356:	4a0e      	ldr	r2, [pc, #56]	; (8004390 <MX_CRC_Init+0x40>)
 8004358:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <MX_CRC_Init+0x3c>)
 800435c:	2200      	movs	r2, #0
 800435e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <MX_CRC_Init+0x3c>)
 8004362:	2200      	movs	r2, #0
 8004364:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <MX_CRC_Init+0x3c>)
 8004368:	2200      	movs	r2, #0
 800436a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <MX_CRC_Init+0x3c>)
 800436e:	2200      	movs	r2, #0
 8004370:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <MX_CRC_Init+0x3c>)
 8004374:	2201      	movs	r2, #1
 8004376:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004378:	4804      	ldr	r0, [pc, #16]	; (800438c <MX_CRC_Init+0x3c>)
 800437a:	f004 ff1f 	bl	80091bc <HAL_CRC_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004384:	f000 fc0e 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20001d28 	.word	0x20001d28
 8004390:	40023000 	.word	0x40023000

08004394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <MX_I2C1_Init+0x74>)
 800439a:	4a1c      	ldr	r2, [pc, #112]	; (800440c <MX_I2C1_Init+0x78>)
 800439c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800439e:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <MX_I2C1_Init+0x74>)
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <MX_I2C1_Init+0x7c>)
 80043a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <MX_I2C1_Init+0x74>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043aa:	4b17      	ldr	r3, [pc, #92]	; (8004408 <MX_I2C1_Init+0x74>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <MX_I2C1_Init+0x74>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <MX_I2C1_Init+0x74>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043bc:	4b12      	ldr	r3, [pc, #72]	; (8004408 <MX_I2C1_Init+0x74>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <MX_I2C1_Init+0x74>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <MX_I2C1_Init+0x74>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043ce:	480e      	ldr	r0, [pc, #56]	; (8004408 <MX_I2C1_Init+0x74>)
 80043d0:	f006 f81a 	bl	800a408 <HAL_I2C_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80043da:	f000 fbe3 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043de:	2100      	movs	r1, #0
 80043e0:	4809      	ldr	r0, [pc, #36]	; (8004408 <MX_I2C1_Init+0x74>)
 80043e2:	f006 f8ac 	bl	800a53e <HAL_I2CEx_ConfigAnalogFilter>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80043ec:	f000 fbda 	bl	8004ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043f0:	2100      	movs	r1, #0
 80043f2:	4805      	ldr	r0, [pc, #20]	; (8004408 <MX_I2C1_Init+0x74>)
 80043f4:	f006 f8ee 	bl	800a5d4 <HAL_I2CEx_ConfigDigitalFilter>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80043fe:	f000 fbd1 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20001d4c 	.word	0x20001d4c
 800440c:	40005400 	.word	0x40005400
 8004410:	30a0a7fb 	.word	0x30a0a7fb

08004414 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <MX_SPI2_Init+0x74>)
 800441a:	4a1c      	ldr	r2, [pc, #112]	; (800448c <MX_SPI2_Init+0x78>)
 800441c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <MX_SPI2_Init+0x74>)
 8004420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004424:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <MX_SPI2_Init+0x74>)
 8004428:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800442c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <MX_SPI2_Init+0x74>)
 8004430:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004434:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_SPI2_Init+0x74>)
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_SPI2_Init+0x74>)
 800443e:	2200      	movs	r2, #0
 8004440:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_SPI2_Init+0x74>)
 8004444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004448:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_SPI2_Init+0x74>)
 800444c:	2210      	movs	r2, #16
 800444e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <MX_SPI2_Init+0x74>)
 8004452:	2200      	movs	r2, #0
 8004454:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_SPI2_Init+0x74>)
 8004458:	2200      	movs	r2, #0
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <MX_SPI2_Init+0x74>)
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_SPI2_Init+0x74>)
 8004464:	2207      	movs	r2, #7
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <MX_SPI2_Init+0x74>)
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_SPI2_Init+0x74>)
 8004470:	2208      	movs	r2, #8
 8004472:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004474:	4804      	ldr	r0, [pc, #16]	; (8004488 <MX_SPI2_Init+0x74>)
 8004476:	f007 f8cb 	bl	800b610 <HAL_SPI_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004480:	f000 fb90 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20001da0 	.word	0x20001da0
 800448c:	40003800 	.word	0x40003800

08004490 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b098      	sub	sp, #96	; 0x60
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004496:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	611a      	str	r2, [r3, #16]
 80044b2:	615a      	str	r2, [r3, #20]
 80044b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2234      	movs	r2, #52	; 0x34
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f00d fa8a 	bl	80119d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80044c2:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044c4:	4a41      	ldr	r2, [pc, #260]	; (80045cc <MX_TIM1_Init+0x13c>)
 80044c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 80044c8:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044ca:	2213      	movs	r2, #19
 80044cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80044d4:	4b3c      	ldr	r3, [pc, #240]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044dc:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80044e2:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044ee:	4836      	ldr	r0, [pc, #216]	; (80045c8 <MX_TIM1_Init+0x138>)
 80044f0:	f007 fe93 	bl	800c21a <HAL_TIM_PWM_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80044fa:	f000 fb53 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004506:	2300      	movs	r3, #0
 8004508:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800450a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800450e:	4619      	mov	r1, r3
 8004510:	482d      	ldr	r0, [pc, #180]	; (80045c8 <MX_TIM1_Init+0x138>)
 8004512:	f009 f9e5 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800451c:	f000 fb42 	bl	8004ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004520:	2360      	movs	r3, #96	; 0x60
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004528:	2300      	movs	r3, #0
 800452a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800452c:	2300      	movs	r3, #0
 800452e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004538:	2300      	movs	r3, #0
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800453c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004540:	2200      	movs	r2, #0
 8004542:	4619      	mov	r1, r3
 8004544:	4820      	ldr	r0, [pc, #128]	; (80045c8 <MX_TIM1_Init+0x138>)
 8004546:	f008 fbe3 	bl	800cd10 <HAL_TIM_PWM_ConfigChannel>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004550:	f000 fb28 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004558:	2208      	movs	r2, #8
 800455a:	4619      	mov	r1, r3
 800455c:	481a      	ldr	r0, [pc, #104]	; (80045c8 <MX_TIM1_Init+0x138>)
 800455e:	f008 fbd7 	bl	800cd10 <HAL_TIM_PWM_ConfigChannel>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8004568:	f000 fb1c 	bl	8004ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004584:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800458e:	2300      	movs	r3, #0
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800459c:	2300      	movs	r3, #0
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	4619      	mov	r1, r3
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM1_Init+0x138>)
 80045aa:	f009 fa1b 	bl	800d9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80045b4:	f000 faf6 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM1_Init+0x138>)
 80045ba:	f001 fabf 	bl	8005b3c <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3760      	adds	r7, #96	; 0x60
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20001e64 	.word	0x20001e64
 80045cc:	40012c00 	.word	0x40012c00

080045d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f00d f9f9 	bl	80119d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045e4:	463b      	mov	r3, r7
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <MX_TIM2_Init+0xa4>)
 80045f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045f6:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <MX_TIM2_Init+0xa4>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045fc:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <MX_TIM2_Init+0xa4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8004602:	4b1c      	ldr	r3, [pc, #112]	; (8004674 <MX_TIM2_Init+0xa4>)
 8004604:	f04f 32ff 	mov.w	r2, #4294967295
 8004608:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <MX_TIM2_Init+0xa4>)
 800460c:	2200      	movs	r2, #0
 800460e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <MX_TIM2_Init+0xa4>)
 8004612:	2200      	movs	r2, #0
 8004614:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004616:	2303      	movs	r3, #3
 8004618:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800461a:	2302      	movs	r3, #2
 800461c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800461e:	2301      	movs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800462e:	2301      	movs	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004632:	2300      	movs	r3, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	4619      	mov	r1, r3
 8004640:	480c      	ldr	r0, [pc, #48]	; (8004674 <MX_TIM2_Init+0xa4>)
 8004642:	f008 f8c1 	bl	800c7c8 <HAL_TIM_Encoder_Init>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800464c:	f000 faaa 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004650:	2300      	movs	r3, #0
 8004652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004658:	463b      	mov	r3, r7
 800465a:	4619      	mov	r1, r3
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <MX_TIM2_Init+0xa4>)
 800465e:	f009 f93f 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004668:	f000 fa9c 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800466c:	bf00      	nop
 800466e:	3730      	adds	r7, #48	; 0x30
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20001eb0 	.word	0x20001eb0

08004678 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467e:	f107 031c 	add.w	r3, r7, #28
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800468a:	463b      	mov	r3, r7
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
 8004698:	615a      	str	r2, [r3, #20]
 800469a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800469c:	4b21      	ldr	r3, [pc, #132]	; (8004724 <MX_TIM4_Init+0xac>)
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <MX_TIM4_Init+0xb0>)
 80046a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 80046a2:	4b20      	ldr	r3, [pc, #128]	; (8004724 <MX_TIM4_Init+0xac>)
 80046a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80046a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <MX_TIM4_Init+0xac>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 80046b0:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <MX_TIM4_Init+0xac>)
 80046b2:	220a      	movs	r2, #10
 80046b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <MX_TIM4_Init+0xac>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <MX_TIM4_Init+0xac>)
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80046c2:	4818      	ldr	r0, [pc, #96]	; (8004724 <MX_TIM4_Init+0xac>)
 80046c4:	f007 fda9 	bl	800c21a <HAL_TIM_PWM_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80046ce:	f000 fa69 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046da:	f107 031c 	add.w	r3, r7, #28
 80046de:	4619      	mov	r1, r3
 80046e0:	4810      	ldr	r0, [pc, #64]	; (8004724 <MX_TIM4_Init+0xac>)
 80046e2:	f009 f8fd 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80046ec:	f000 fa5a 	bl	8004ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046f0:	2360      	movs	r3, #96	; 0x60
 80046f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004700:	463b      	mov	r3, r7
 8004702:	2204      	movs	r2, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4807      	ldr	r0, [pc, #28]	; (8004724 <MX_TIM4_Init+0xac>)
 8004708:	f008 fb02 	bl	800cd10 <HAL_TIM_PWM_ConfigChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8004712:	f000 fa47 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004716:	4803      	ldr	r0, [pc, #12]	; (8004724 <MX_TIM4_Init+0xac>)
 8004718:	f001 fa10 	bl	8005b3c <HAL_TIM_MspPostInit>

}
 800471c:	bf00      	nop
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20001efc 	.word	0x20001efc
 8004728:	40000800 	.word	0x40000800

0800472c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <MX_TIM6_Init+0x64>)
 800473e:	4a15      	ldr	r2, [pc, #84]	; (8004794 <MX_TIM6_Init+0x68>)
 8004740:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <MX_TIM6_Init+0x64>)
 8004744:	f244 2267 	movw	r2, #16999	; 0x4267
 8004748:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <MX_TIM6_Init+0x64>)
 800474c:	2200      	movs	r2, #0
 800474e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <MX_TIM6_Init+0x64>)
 8004752:	22fa      	movs	r2, #250	; 0xfa
 8004754:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <MX_TIM6_Init+0x64>)
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800475c:	480c      	ldr	r0, [pc, #48]	; (8004790 <MX_TIM6_Init+0x64>)
 800475e:	f007 fc6b 	bl	800c038 <HAL_TIM_Base_Init>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004768:	f000 fa1c 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4805      	ldr	r0, [pc, #20]	; (8004790 <MX_TIM6_Init+0x64>)
 800477a:	f009 f8b1 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004784:	f000 fa0e 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20001f48 	.word	0x20001f48
 8004794:	40001000 	.word	0x40001000

08004798 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <MX_TIM7_Init+0x78>)
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <MX_TIM7_Init+0x7c>)
 80047ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <MX_TIM7_Init+0x78>)
 80047b0:	f242 1233 	movw	r2, #8499	; 0x2133
 80047b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b6:	4b16      	ldr	r3, [pc, #88]	; (8004810 <MX_TIM7_Init+0x78>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80047bc:	4b14      	ldr	r3, [pc, #80]	; (8004810 <MX_TIM7_Init+0x78>)
 80047be:	2209      	movs	r2, #9
 80047c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <MX_TIM7_Init+0x78>)
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80047c8:	4811      	ldr	r0, [pc, #68]	; (8004810 <MX_TIM7_Init+0x78>)
 80047ca:	f007 fc35 	bl	800c038 <HAL_TIM_Base_Init>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80047d4:	f000 f9e6 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 80047d8:	2108      	movs	r1, #8
 80047da:	480d      	ldr	r0, [pc, #52]	; (8004810 <MX_TIM7_Init+0x78>)
 80047dc:	f007 ffa4 	bl	800c728 <HAL_TIM_OnePulse_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 80047e6:	f000 f9dd 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80047ea:	2320      	movs	r3, #32
 80047ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4806      	ldr	r0, [pc, #24]	; (8004810 <MX_TIM7_Init+0x78>)
 80047f8:	f009 f872 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8004802:	f000 f9cf 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20001f94 	.word	0x20001f94
 8004814:	40001400 	.word	0x40001400

08004818 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <MX_TIM8_Init+0x78>)
 800482a:	4a1a      	ldr	r2, [pc, #104]	; (8004894 <MX_TIM8_Init+0x7c>)
 800482c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800482e:	4b18      	ldr	r3, [pc, #96]	; (8004890 <MX_TIM8_Init+0x78>)
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <MX_TIM8_Init+0x78>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <MX_TIM8_Init+0x78>)
 800483c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004840:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004842:	4b13      	ldr	r3, [pc, #76]	; (8004890 <MX_TIM8_Init+0x78>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004848:	4b11      	ldr	r3, [pc, #68]	; (8004890 <MX_TIM8_Init+0x78>)
 800484a:	2200      	movs	r2, #0
 800484c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <MX_TIM8_Init+0x78>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8004854:	2108      	movs	r1, #8
 8004856:	480e      	ldr	r0, [pc, #56]	; (8004890 <MX_TIM8_Init+0x78>)
 8004858:	f007 ff66 	bl	800c728 <HAL_TIM_OnePulse_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8004862:	f000 f99f 	bl	8004ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4806      	ldr	r0, [pc, #24]	; (8004890 <MX_TIM8_Init+0x78>)
 8004878:	f009 f832 	bl	800d8e0 <HAL_TIMEx_MasterConfigSynchronization>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8004882:	f000 f98f 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20001fe0 	.word	0x20001fe0
 8004894:	40013400 	.word	0x40013400

08004898 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800489c:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <MX_TIM16_Init+0x48>)
 800489e:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <MX_TIM16_Init+0x4c>)
 80048a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048a4:	f244 2267 	movw	r2, #16999	; 0x4267
 80048a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048b2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80048b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_TIM16_Init+0x48>)
 80048cc:	f007 fbb4 	bl	800c038 <HAL_TIM_Base_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80048d6:	f000 f965 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000202c 	.word	0x2000202c
 80048e4:	40014400 	.word	0x40014400

080048e8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <MX_TIM17_Init+0x58>)
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <MX_TIM17_Init+0x5c>)
 80048f0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <MX_TIM17_Init+0x58>)
 80048f4:	f244 2267 	movw	r2, #16999	; 0x4267
 80048f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <MX_TIM17_Init+0x58>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <MX_TIM17_Init+0x58>)
 8004902:	2231      	movs	r2, #49	; 0x31
 8004904:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <MX_TIM17_Init+0x58>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <MX_TIM17_Init+0x58>)
 800490e:	2200      	movs	r2, #0
 8004910:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <MX_TIM17_Init+0x58>)
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004918:	4809      	ldr	r0, [pc, #36]	; (8004940 <MX_TIM17_Init+0x58>)
 800491a:	f007 fb8d 	bl	800c038 <HAL_TIM_Base_Init>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004924:	f000 f93e 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8004928:	2108      	movs	r1, #8
 800492a:	4805      	ldr	r0, [pc, #20]	; (8004940 <MX_TIM17_Init+0x58>)
 800492c:	f007 fefc 	bl	800c728 <HAL_TIM_OnePulse_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8004936:	f000 f935 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800493a:	bf00      	nop
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20002078 	.word	0x20002078
 8004944:	40014800 	.word	0x40014800

08004948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800494c:	4b22      	ldr	r3, [pc, #136]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <MX_USART1_UART_Init+0x94>)
 8004950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800495a:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 800495c:	2200      	movs	r2, #0
 800495e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004962:	2200      	movs	r2, #0
 8004964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 800496e:	220c      	movs	r2, #12
 8004970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004974:	2200      	movs	r2, #0
 8004976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 800497a:	2200      	movs	r2, #0
 800497c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004980:	2200      	movs	r2, #0
 8004982:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004984:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800498a:	4b13      	ldr	r3, [pc, #76]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 800498c:	2200      	movs	r2, #0
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004990:	4811      	ldr	r0, [pc, #68]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 8004992:	f009 f91e 	bl	800dbd2 <HAL_UART_Init>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800499c:	f000 f902 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049a0:	2100      	movs	r1, #0
 80049a2:	480d      	ldr	r0, [pc, #52]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 80049a4:	f00a f8c0 	bl	800eb28 <HAL_UARTEx_SetTxFifoThreshold>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80049ae:	f000 f8f9 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049b2:	2100      	movs	r1, #0
 80049b4:	4808      	ldr	r0, [pc, #32]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 80049b6:	f00a f8f5 	bl	800eba4 <HAL_UARTEx_SetRxFifoThreshold>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80049c0:	f000 f8f0 	bl	8004ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80049c4:	4804      	ldr	r0, [pc, #16]	; (80049d8 <MX_USART1_UART_Init+0x90>)
 80049c6:	f00a f876 	bl	800eab6 <HAL_UARTEx_DisableFifoMode>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80049d0:	f000 f8e8 	bl	8004ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	200020c4 	.word	0x200020c4
 80049dc:	40013800 	.word	0x40013800

080049e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80049e6:	4b16      	ldr	r3, [pc, #88]	; (8004a40 <MX_DMA_Init+0x60>)
 80049e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ea:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <MX_DMA_Init+0x60>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	6493      	str	r3, [r2, #72]	; 0x48
 80049f2:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <MX_DMA_Init+0x60>)
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <MX_DMA_Init+0x60>)
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	4a0f      	ldr	r2, [pc, #60]	; (8004a40 <MX_DMA_Init+0x60>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6493      	str	r3, [r2, #72]	; 0x48
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <MX_DMA_Init+0x60>)
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	200b      	movs	r0, #11
 8004a1c:	f004 fb99 	bl	8009152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004a20:	200b      	movs	r0, #11
 8004a22:	f004 fbb0 	bl	8009186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	2100      	movs	r1, #0
 8004a2a:	200d      	movs	r0, #13
 8004a2c:	f004 fb91 	bl	8009152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004a30:	200d      	movs	r0, #13
 8004a32:	f004 fba8 	bl	8009186 <HAL_NVIC_EnableIRQ>

}
 8004a36:	bf00      	nop
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000

08004a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4a:	f107 0314 	add.w	r3, r7, #20
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	4a4e      	ldr	r2, [pc, #312]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a66:	4b4c      	ldr	r3, [pc, #304]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a72:	4b49      	ldr	r3, [pc, #292]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	4a48      	ldr	r2, [pc, #288]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7e:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	4a42      	ldr	r2, [pc, #264]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a96:	4b40      	ldr	r3, [pc, #256]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	4a3c      	ldr	r2, [pc, #240]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004aa8:	f043 0302 	orr.w	r3, r3, #2
 8004aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <MX_GPIO_Init+0x154>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004aba:	2200      	movs	r2, #0
 8004abc:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004ac0:	4836      	ldr	r0, [pc, #216]	; (8004b9c <MX_GPIO_Init+0x158>)
 8004ac2:	f005 fc71 	bl	800a3a8 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad0:	f005 fc6a 	bl	800a3a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004ad4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	482d      	ldr	r0, [pc, #180]	; (8004ba0 <MX_GPIO_Init+0x15c>)
 8004aea:	f005 fac3 	bl	800a074 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8004aee:	2370      	movs	r3, #112	; 0x70
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afa:	f107 0314 	add.w	r3, r7, #20
 8004afe:	4619      	mov	r1, r3
 8004b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b04:	f005 fab6 	bl	800a074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8004b16:	f107 0314 	add.w	r3, r7, #20
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b20:	f005 faa8 	bl	800a074 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004b24:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004b28:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4817      	ldr	r0, [pc, #92]	; (8004b9c <MX_GPIO_Init+0x158>)
 8004b3e:	f005 fa99 	bl	800a074 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b5e:	f005 fa89 	bl	800a074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004b62:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	4808      	ldr	r0, [pc, #32]	; (8004b9c <MX_GPIO_Init+0x158>)
 8004b7a:	f005 fa7b 	bl	800a074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	2017      	movs	r0, #23
 8004b84:	f004 fae5 	bl	8009152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b88:	2017      	movs	r0, #23
 8004b8a:	f004 fafc 	bl	8009186 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b8e:	bf00      	nop
 8004b90:	3728      	adds	r7, #40	; 0x28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800

08004ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba8:	b672      	cpsid	i
}
 8004baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bac:	e7fe      	b.n	8004bac <Error_Handler+0x8>

08004bae <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e008      	b.n	8004be8 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d4e9      	bmi.n	8004bd6 <Moving_Average_Init+0x28>
	}
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	441a      	add	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	edd3 7a00 	vldr	s15, [r3]
 8004c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d507      	bpl.n	8004c8c <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004c8a:	e003      	b.n	8004c94 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	edd3 7a00 	vldr	s15, [r3]
 8004ca8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004cac:	ee16 0a90 	vmov	r0, s13
 8004cb0:	f7fb fc72 	bl	8000598 <__aeabi_f2d>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8004cc0:	eef0 0a67 	vmov.f32	s1, s15
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <PID_Init>:
#include "pid.h"

/* Initialize */
void PID_Init(PID_TypeDef *uPID)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
	/* Set parameters */
	uPID->OutputSum = *uPID->MyOutput;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004cfa:	f7fb ff35 	bl	8000b68 <__aeabi_dcmpgt>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
}
 8004d10:	e011      	b.n	8004d36 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004d1e:	f7fb ff05 	bl	8000b2c <__aeabi_dcmplt>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d100      	bne.n	8004d2a <PID_Init+0x60>
}
 8004d28:	e005      	b.n	8004d36 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6278      	str	r0, [r7, #36]	; 0x24
 8004d48:	6239      	str	r1, [r7, #32]
 8004d4a:	61fa      	str	r2, [r7, #28]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d52:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d56:	ed87 2b00 	vstr	d2, [r7]
	/* Set parameters */
	uPID->MyOutput   = Output;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	6a3a      	ldr	r2, [r7, #32]
 8004d64:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004d72:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004dc0 <PID+0x80>
 8004d76:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8004dc8 <PID+0x88>
 8004d7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d7c:	f000 f991 	bl	80050a2 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	2264      	movs	r2, #100	; 0x64
 8004d84:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004d86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8e:	f000 faa5 	bl	80052dc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd);
 8004d92:	ed97 2b00 	vldr	d2, [r7]
 8004d96:	ed97 1b02 	vldr	d1, [r7, #8]
 8004d9a:	ed97 0b04 	vldr	d0, [r7, #16]
 8004d9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da0:	f000 fa04 	bl	80051ac <PID_SetTunings2>

	uPID->LastTime = HAL_GetTick() - uPID->SampleTime;
 8004da4:	f001 fda6 	bl	80068f4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	1ad2      	subs	r2, r2, r3
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	605a      	str	r2, [r3, #4]
}
 8004db4:	bf00      	nop
 8004db6:	3728      	adds	r7, #40	; 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	00000000 	.word	0x00000000
 8004dc4:	40590000 	.word	0x40590000
	...

08004dd0 <PID_Compute>:
{
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, ControllerDirection);
}

/* Compute  */
uint8_t PID_Compute(PID_TypeDef *uPID){
 8004dd0:	b5b0      	push	{r4, r5, r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* Check PID mode */
	if (!uPID->InAuto)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <PID_Compute+0x14>
	{
		return _FALSE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e13c      	b.n	800505e <PID_Compute+0x28e>
	}

	/* Calculate time */
	now        = HAL_GetTick();
 8004de4:	f001 fd86 	bl	80068f4 <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d204      	bcs.n	8004e08 <PID_Compute+0x38>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 812a 	beq.w	800505c <PID_Compute+0x28c>
	{
		/* Compute all the working error variables */
		input   = *uPID->MyInput;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e20:	f7fb fa5a 	bl	80002d8 <__aeabi_dsub>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004e32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004e36:	f7fb fa4f 	bl	80002d8 <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9c7 2302 	strd	r2, r3, [r7, #8]


		/* Calculate Proportional on Error */
		output = uPID->Kp * error;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e4c:	f7fb fbfc 	bl	8000648 <__aeabi_dmul>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		uPID->DispKp_part = output;
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

		/* ..... Calculate Derivative term and sum */
		output -= uPID->Kd * dInput;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e6c:	f7fb fbec 	bl	8000648 <__aeabi_dmul>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004e78:	f7fb fa2e 	bl	80002d8 <__aeabi_dsub>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb fbd6 	bl	8000648 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* Conditional integration as anti-windup (clamping) */
		if((((output + uPID->Ki * error) > uPID->OutMax || (output + uPID->Ki * error) < uPID->OutMin)) && (error*(output + uPID->OutputSum + uPID->Ki * error) > 0)){
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004eac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eb0:	f7fb fbca 	bl	8000648 <__aeabi_dmul>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ec0:	f7fb fa0c 	bl	80002dc <__adddf3>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004ed2:	f7fb fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d11a      	bne.n	8004f12 <PID_Compute+0x142>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004ee2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ee6:	f7fb fbaf 	bl	8000648 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ef6:	f7fb f9f1 	bl	80002dc <__adddf3>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004f08:	f7fb fe10 	bl	8000b2c <__aeabi_dcmplt>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d03b      	beq.n	8004f8a <PID_Compute+0x1ba>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f1c:	f7fb f9de 	bl	80002dc <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f32:	f7fb fb89 	bl	8000648 <__aeabi_dmul>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	f7fb f9cd 	bl	80002dc <__adddf3>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f4e:	f7fb fb7b 	bl	8000648 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	f7fb fe01 	bl	8000b68 <__aeabi_dcmpgt>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00e      	beq.n	8004f8a <PID_Compute+0x1ba>
			uPID->OutputSum     += 0;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	f7fb f9af 	bl	80002dc <__adddf3>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004f88:	e014      	b.n	8004fb4 <PID_Compute+0x1e4>
		}
		else{
			uPID->OutputSum     += (uPID->Ki * error);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f9a:	f7fb fb55 	bl	8000648 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7fb f999 	bl	80002dc <__adddf3>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		/* If Setpoint is set to 0, zero integral part */
		if(*uPID->MySetpoint == 0){
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	f7fb fda8 	bl	8000b18 <__aeabi_dcmpeq>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <PID_Compute+0x20c>
			uPID->OutputSum = 0;
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		uPID->DispKi_part = uPID->OutputSum;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

		/* Final summation */
		output += uPID->OutputSum;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004fee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ff2:	f7fb f973 	bl	80002dc <__adddf3>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		/* Clamp output */
		if (output > uPID->OutMax){
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005004:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005008:	f7fb fdae 	bl	8000b68 <__aeabi_dcmpgt>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d005      	beq.n	800501e <PID_Compute+0x24e>
			output = uPID->OutMax;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005018:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800501c:	e00e      	b.n	800503c <PID_Compute+0x26c>
		}
		else if (output < uPID->OutMin){
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005024:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005028:	f7fb fd80 	bl	8000b2c <__aeabi_dcmplt>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <PID_Compute+0x26c>
			output = uPID->OutMin;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005038:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		*uPID->MyOutput = output;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005044:	e9c1 2300 	strd	r2, r3, [r1]


		/* Remember some variables for next time */
		uPID->LastInput = input;
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800504e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <PID_Compute+0x28e>

	}
	else
	{
		return _FALSE;
 800505c:	2300      	movs	r3, #0
	}

}
 800505e:	4618      	mov	r0, r3
 8005060:	3730      	adds	r7, #48	; 0x30
 8005062:	46bd      	mov	sp, r7
 8005064:	bdb0      	pop	{r4, r5, r7, pc}

08005066 <PID_SetMode>:

/* PID Mode */
void PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode){
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	70fb      	strb	r3, [r7, #3]
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	2b01      	cmp	r3, #1
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	73fb      	strb	r3, [r7, #15]

	/* Initialize the PID */
	if (newAuto && !uPID->InAuto){
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <PID_SetMode+0x2e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <PID_SetMode+0x2e>
		PID_Init(uPID);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff fe1b 	bl	8004cca <PID_Init>
	}
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	701a      	strb	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <PID_SetOutputLimits>:
PIDMode_TypeDef PID_GetMode(PID_TypeDef *uPID){
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* PID Limits */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max){
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6178      	str	r0, [r7, #20]
 80050aa:	ed87 0b02 	vstr	d0, [r7, #8]
 80050ae:	ed87 1b00 	vstr	d1, [r7]
	/* Check value */
	if (Min >= Max){
 80050b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ba:	f7fb fd4b 	bl	8000b54 <__aeabi_dcmpge>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d158      	bne.n	8005176 <PID_SetOutputLimits+0xd4>
		return;
	}

	uPID->OutMin = Min;
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ca:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* Check PID Mode */
	if (uPID->InAuto){
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d04b      	beq.n	8005178 <PID_SetOutputLimits+0xd6>

		/* Check value */
		if (*uPID->MyOutput > uPID->OutMax){
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050ee:	f7fb fd3b 	bl	8000b68 <__aeabi_dcmpgt>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <PID_SetOutputLimits+0x66>
			*uPID->MyOutput = uPID->OutMax;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8005102:	e9c1 2300 	strd	r2, r3, [r1]
 8005106:	e012      	b.n	800512e <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin){
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8005116:	f7fb fd09 	bl	8000b2c <__aeabi_dcmplt>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d006      	beq.n	800512e <PID_SetOutputLimits+0x8c>
			*uPID->MyOutput = uPID->OutMin;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800512a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* Check out value */
		if (uPID->OutputSum > uPID->OutMax){
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800513a:	f7fb fd15 	bl	8000b68 <__aeabi_dcmpgt>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <PID_SetOutputLimits+0xb0>
			uPID->OutputSum = uPID->OutMax;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005150:	e012      	b.n	8005178 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin){
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800515e:	f7fb fce5 	bl	8000b2c <__aeabi_dcmplt>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <PID_SetOutputLimits+0xd6>
			uPID->OutputSum = uPID->OutMin;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005174:	e000      	b.n	8005178 <PID_SetOutputLimits+0xd6>
		return;
 8005176:	bf00      	nop
		}
		else { }
	}
}
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <PID_SetTunings>:

/* PID Tunings */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd){
 800517e:	b580      	push	{r7, lr}
 8005180:	b088      	sub	sp, #32
 8005182:	af00      	add	r7, sp, #0
 8005184:	61f8      	str	r0, [r7, #28]
 8005186:	ed87 0b04 	vstr	d0, [r7, #16]
 800518a:	ed87 1b02 	vstr	d1, [r7, #8]
 800518e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd);
 8005192:	ed97 2b00 	vldr	d2, [r7]
 8005196:	ed97 1b02 	vldr	d1, [r7, #8]
 800519a:	ed97 0b04 	vldr	d0, [r7, #16]
 800519e:	69f8      	ldr	r0, [r7, #28]
 80051a0:	f000 f804 	bl	80051ac <PID_SetTunings2>
}
 80051a4:	bf00      	nop
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <PID_SetTunings2>:

void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	61f8      	str	r0, [r7, #28]
 80051b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80051b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80051bc:	ed87 2b00 	vstr	d2, [r7]
	double SampleTimeInSec;

	/* Check value */
	if (Kp < 0 || Ki < 0 || Kd < 0){
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051cc:	f7fb fcae 	bl	8000b2c <__aeabi_dcmplt>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d17c      	bne.n	80052d0 <PID_SetTunings2+0x124>
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051e2:	f7fb fca3 	bl	8000b2c <__aeabi_dcmplt>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d171      	bne.n	80052d0 <PID_SetTunings2+0x124>
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051f8:	f7fb fc98 	bl	8000b2c <__aeabi_dcmplt>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d166      	bne.n	80052d0 <PID_SetTunings2+0x124>
		return;
	}

	uPID->DispKp = Kp;
 8005202:	69f9      	ldr	r1, [r7, #28]
 8005204:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005208:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005212:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8005216:	69f9      	ldr	r1, [r7, #28]
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* Calculate time */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fb f995 	bl	8000554 <__aeabi_ui2d>
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <PID_SetTunings2+0x12c>)
 8005230:	f7fb fb34 	bl	800089c <__aeabi_ddiv>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005242:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8005246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800524a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800524e:	f7fb f9fb 	bl	8000648 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	69f9      	ldr	r1, [r7, #28]
 8005258:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800525c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005264:	f7fb fb1a 	bl	800089c <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* Check direction */
	if (uPID->ControllerDirection == _PID_CD_REVERSE){
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d12b      	bne.n	80052d2 <PID_SetTunings2+0x126>

		uPID->Kp = (0 - uPID->Kp);
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	f7fb f826 	bl	80002d8 <__aeabi_dsub>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	69f9      	ldr	r1, [r7, #28]
 8005292:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	f7fb f818 	bl	80002d8 <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	69f9      	ldr	r1, [r7, #28]
 80052ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80052b8:	f04f 0000 	mov.w	r0, #0
 80052bc:	f04f 0100 	mov.w	r1, #0
 80052c0:	f7fb f80a 	bl	80002d8 <__aeabi_dsub>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	69f9      	ldr	r1, [r7, #28]
 80052ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80052ce:	e000      	b.n	80052d2 <PID_SetTunings2+0x126>
		return;
 80052d0:	bf00      	nop
	}
}
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	408f4000 	.word	0x408f4000

080052dc <PID_SetControllerDirection>:

/* PID Direction */
void PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
	/* Check parameters */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection)){
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02e      	beq.n	800534e <PID_SetControllerDirection+0x72>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d029      	beq.n	800534e <PID_SetControllerDirection+0x72>
		uPID->Kp = (0 - uPID->Kp);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005300:	f04f 0000 	mov.w	r0, #0
 8005304:	f04f 0100 	mov.w	r1, #0
 8005308:	f7fa ffe6 	bl	80002d8 <__aeabi_dsub>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800531c:	f04f 0000 	mov.w	r0, #0
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	f7fa ffd8 	bl	80002d8 <__aeabi_dsub>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005338:	f04f 0000 	mov.w	r0, #0
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	f7fa ffca 	bl	80002d8 <__aeabi_dsub>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	}

	uPID->ControllerDirection = Direction;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	705a      	strb	r2, [r3, #1]
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <PID_SetSampleTime>:
PIDCD_TypeDef PID_GetDirection(PID_TypeDef *uPID){
	return uPID->ControllerDirection;
}

/* PID Sampling */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall){
 800535c:	b5b0      	push	{r4, r5, r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd01      	ble.n	8005372 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 800536e:	2301      	movs	r3, #1
 8005370:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	60da      	str	r2, [r3, #12]
	double ratio;

	/* Check value */
	if (NewSampleTime > 0){
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dd2e      	ble.n	80053dc <PID_SetSampleTime+0x80>

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800537e:	68b8      	ldr	r0, [r7, #8]
 8005380:	f7fb f8f8 	bl	8000574 <__aeabi_i2d>
 8005384:	4604      	mov	r4, r0
 8005386:	460d      	mov	r5, r1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb f8e1 	bl	8000554 <__aeabi_ui2d>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fb fa7f 	bl	800089c <__aeabi_ddiv>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80053ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053b0:	f7fb f94a 	bl	8000648 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80053c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053c8:	f7fb fa68 	bl	800089c <__aeabi_ddiv>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]
	}
}
 80053dc:	bf00      	nop
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bdb0      	pop	{r4, r5, r7, pc}

080053e4 <PID_GetPpart>:
double PID_GetKd(PID_TypeDef *uPID){
	return uPID->DispKd;
}

/* Get current contributions*/
double PID_GetPpart(PID_TypeDef *uPID){
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80053f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053f6:	eeb0 0a47 	vmov.f32	s0, s14
 80053fa:	eef0 0a67 	vmov.f32	s1, s15
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID){
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8005416:	ec43 2b17 	vmov	d7, r2, r3
}
 800541a:	eeb0 0a47 	vmov.f32	s0, s14
 800541e:	eef0 0a67 	vmov.f32	s1, s15
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID){
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800543a:	ec43 2b17 	vmov	d7, r2, r3
}
 800543e:	eeb0 0a47 	vmov.f32	s0, s14
 8005442:	eef0 0a67 	vmov.f32	s1, s15
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005456:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <HAL_MspInit+0x44>)
 8005458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545a:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <HAL_MspInit+0x44>)
 800545c:	f043 0301 	orr.w	r3, r3, #1
 8005460:	6613      	str	r3, [r2, #96]	; 0x60
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_MspInit+0x44>)
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	607b      	str	r3, [r7, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <HAL_MspInit+0x44>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	4a08      	ldr	r2, [pc, #32]	; (8005494 <HAL_MspInit+0x44>)
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6593      	str	r3, [r2, #88]	; 0x58
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_MspInit+0x44>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005486:	f005 f995 	bl	800a7b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800548a:	bf00      	nop
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b09e      	sub	sp, #120	; 0x78
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054b0:	f107 0320 	add.w	r3, r7, #32
 80054b4:	2244      	movs	r2, #68	; 0x44
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f00c fa8c 	bl	80119d6 <memset>
  if(hadc->Instance==ADC1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054c6:	d171      	bne.n	80055ac <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80054c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80054ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80054d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054d4:	f107 0320 	add.w	r3, r7, #32
 80054d8:	4618      	mov	r0, r3
 80054da:	f005 fea9 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80054e4:	f7ff fb5e 	bl	8004ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054e8:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3301      	adds	r3, #1
 80054ee:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80054f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054f2:	4b62      	ldr	r3, [pc, #392]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10b      	bne.n	8005512 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80054fa:	4b61      	ldr	r3, [pc, #388]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	4a60      	ldr	r2, [pc, #384]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005506:	4b5e      	ldr	r3, [pc, #376]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005512:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a5a      	ldr	r2, [pc, #360]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551e:	4b58      	ldr	r3, [pc, #352]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 800552a:	230c      	movs	r3, #12
 800552c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800552e:	2303      	movs	r3, #3
 8005530:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005536:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800553a:	4619      	mov	r1, r3
 800553c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005540:	f004 fd98 	bl	800a074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8005544:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005546:	4a50      	ldr	r2, [pc, #320]	; (8005688 <HAL_ADC_MspInit+0x1f0>)
 8005548:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800554a:	4b4e      	ldr	r3, [pc, #312]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 800554c:	2205      	movs	r2, #5
 800554e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005550:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005556:	4b4b      	ldr	r3, [pc, #300]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800555c:	4b49      	ldr	r3, [pc, #292]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005568:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800556a:	4b46      	ldr	r3, [pc, #280]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 800556c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005572:	4b44      	ldr	r3, [pc, #272]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005574:	2220      	movs	r2, #32
 8005576:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 800557a:	2200      	movs	r2, #0
 800557c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800557e:	4841      	ldr	r0, [pc, #260]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005580:	f004 f822 	bl	80095c8 <HAL_DMA_Init>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800558a:	f7ff fb0b 	bl	8004ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
 8005594:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <HAL_ADC_MspInit+0x1ec>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800559a:	2200      	movs	r2, #0
 800559c:	210a      	movs	r1, #10
 800559e:	2012      	movs	r0, #18
 80055a0:	f003 fdd7 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80055a4:	2012      	movs	r0, #18
 80055a6:	f003 fdee 	bl	8009186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80055aa:	e062      	b.n	8005672 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_ADC_MspInit+0x1f4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d15d      	bne.n	8005672 <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80055bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80055c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055c2:	f107 0320 	add.w	r3, r7, #32
 80055c6:	4618      	mov	r0, r3
 80055c8:	f005 fe32 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80055d2:	f7ff fae7 	bl	8004ba4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	4a27      	ldr	r2, [pc, #156]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80055de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_ADC_MspInit+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d10b      	bne.n	8005600 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 80055ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055f4:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005606:	f043 0320 	orr.w	r3, r3, #32
 800560a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800560c:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 800560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005618:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005624:	4b16      	ldr	r3, [pc, #88]	; (8005680 <HAL_ADC_MspInit+0x1e8>)
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8005630:	2302      	movs	r3, #2
 8005632:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005634:	2303      	movs	r3, #3
 8005636:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 800563c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005640:	4619      	mov	r1, r3
 8005642:	4813      	ldr	r0, [pc, #76]	; (8005690 <HAL_ADC_MspInit+0x1f8>)
 8005644:	f004 fd16 	bl	800a074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8005648:	2302      	movs	r3, #2
 800564a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800564c:	2303      	movs	r3, #3
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	2300      	movs	r3, #0
 8005652:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 8005654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005658:	4619      	mov	r1, r3
 800565a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800565e:	f004 fd09 	bl	800a074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8005662:	2200      	movs	r2, #0
 8005664:	210a      	movs	r1, #10
 8005666:	2012      	movs	r0, #18
 8005668:	f003 fd73 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800566c:	2012      	movs	r0, #18
 800566e:	f003 fd8a 	bl	8009186 <HAL_NVIC_EnableIRQ>
}
 8005672:	bf00      	nop
 8005674:	3778      	adds	r7, #120	; 0x78
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	200021e0 	.word	0x200021e0
 8005680:	40021000 	.word	0x40021000
 8005684:	20001cc8 	.word	0x20001cc8
 8005688:	40020030 	.word	0x40020030
 800568c:	50000100 	.word	0x50000100
 8005690:	48001400 	.word	0x48001400

08005694 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <HAL_CRC_MspInit+0x38>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d10b      	bne.n	80056be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_CRC_MspInit+0x3c>)
 80056a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <HAL_CRC_MspInit+0x3c>)
 80056ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056b0:	6493      	str	r3, [r2, #72]	; 0x48
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_CRC_MspInit+0x3c>)
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40023000 	.word	0x40023000
 80056d0:	40021000 	.word	0x40021000

080056d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b09c      	sub	sp, #112	; 0x70
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056ec:	f107 0318 	add.w	r3, r7, #24
 80056f0:	2244      	movs	r2, #68	; 0x44
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f00c f96e 	bl	80119d6 <memset>
  if(hi2c->Instance==I2C1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2e      	ldr	r2, [pc, #184]	; (80057b8 <HAL_I2C_MspInit+0xe4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d154      	bne.n	80057ae <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005708:	2300      	movs	r3, #0
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800570c:	f107 0318 	add.w	r3, r7, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f005 fd8d 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800571c:	f7ff fa42 	bl	8004ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 8005722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005724:	4a25      	ldr	r2, [pc, #148]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005738:	4b20      	ldr	r3, [pc, #128]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005744:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005754:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005756:	2312      	movs	r3, #18
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800575e:	2300      	movs	r3, #0
 8005760:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005762:	2304      	movs	r3, #4
 8005764:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005766:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800576a:	4619      	mov	r1, r3
 800576c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005770:	f004 fc80 	bl	800a074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005778:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800577a:	2312      	movs	r3, #18
 800577c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005782:	2300      	movs	r3, #0
 8005784:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005786:	2304      	movs	r3, #4
 8005788:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800578e:	4619      	mov	r1, r3
 8005790:	480b      	ldr	r0, [pc, #44]	; (80057c0 <HAL_I2C_MspInit+0xec>)
 8005792:	f004 fc6f 	bl	800a074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005796:	4b09      	ldr	r3, [pc, #36]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	4a08      	ldr	r2, [pc, #32]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 800579c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057a0:	6593      	str	r3, [r2, #88]	; 0x58
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <HAL_I2C_MspInit+0xe8>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80057ae:	bf00      	nop
 80057b0:	3770      	adds	r7, #112	; 0x70
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40005400 	.word	0x40005400
 80057bc:	40021000 	.word	0x40021000
 80057c0:	48000400 	.word	0x48000400

080057c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057cc:	f107 0314 	add.w	r3, r7, #20
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	60da      	str	r2, [r3, #12]
 80057da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <HAL_SPI_MspInit+0xd0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d151      	bne.n	800588a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057e6:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 80057ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f0:	6593      	str	r3, [r2, #88]	; 0x58
 80057f2:	4b29      	ldr	r3, [pc, #164]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 8005800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005802:	4a25      	ldr	r2, [pc, #148]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 8005804:	f043 0302 	orr.w	r3, r3, #2
 8005808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <HAL_SPI_MspInit+0xd4>)
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005816:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800581a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581c:	2302      	movs	r3, #2
 800581e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005820:	2300      	movs	r3, #0
 8005822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005824:	2300      	movs	r3, #0
 8005826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005828:	2305      	movs	r3, #5
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	4619      	mov	r1, r3
 8005832:	481a      	ldr	r0, [pc, #104]	; (800589c <HAL_SPI_MspInit+0xd8>)
 8005834:	f004 fc1e 	bl	800a074 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 800583a:	4a1a      	ldr	r2, [pc, #104]	; (80058a4 <HAL_SPI_MspInit+0xe0>)
 800583c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005840:	220d      	movs	r2, #13
 8005842:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005844:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005846:	2210      	movs	r2, #16
 8005848:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 800584c:	2200      	movs	r2, #0
 800584e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005852:	2280      	movs	r2, #128	; 0x80
 8005854:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005858:	2200      	movs	r2, #0
 800585a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800585c:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005864:	2200      	movs	r2, #0
 8005866:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 800586a:	2200      	movs	r2, #0
 800586c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800586e:	480c      	ldr	r0, [pc, #48]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005870:	f003 feaa 	bl	80095c8 <HAL_DMA_Init>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800587a:	f7ff f993 	bl	8004ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a07      	ldr	r2, [pc, #28]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
 8005884:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <HAL_SPI_MspInit+0xdc>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800588a:	bf00      	nop
 800588c:	3728      	adds	r7, #40	; 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40003800 	.word	0x40003800
 8005898:	40021000 	.word	0x40021000
 800589c:	48000400 	.word	0x48000400
 80058a0:	20001e04 	.word	0x20001e04
 80058a4:	40020008 	.word	0x40020008

080058a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_TIM_PWM_MspInit+0x98>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d12c      	bne.n	8005914 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 80058bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058be:	4a21      	ldr	r2, [pc, #132]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 80058c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058c4:	6613      	str	r3, [r2, #96]	; 0x60
 80058c6:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 80058c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	2018      	movs	r0, #24
 80058d8:	f003 fc3b 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80058dc:	2018      	movs	r0, #24
 80058de:	f003 fc52 	bl	8009186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058e2:	2200      	movs	r2, #0
 80058e4:	2100      	movs	r1, #0
 80058e6:	2019      	movs	r0, #25
 80058e8:	f003 fc33 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80058ec:	2019      	movs	r0, #25
 80058ee:	f003 fc4a 	bl	8009186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80058f2:	2200      	movs	r2, #0
 80058f4:	2100      	movs	r1, #0
 80058f6:	201a      	movs	r0, #26
 80058f8:	f003 fc2b 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80058fc:	201a      	movs	r0, #26
 80058fe:	f003 fc42 	bl	8009186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005902:	2200      	movs	r2, #0
 8005904:	2100      	movs	r1, #0
 8005906:	201b      	movs	r0, #27
 8005908:	f003 fc23 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800590c:	201b      	movs	r0, #27
 800590e:	f003 fc3a 	bl	8009186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005912:	e010      	b.n	8005936 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <HAL_TIM_PWM_MspInit+0xa0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10b      	bne.n	8005936 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6593      	str	r3, [r2, #88]	; 0x58
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <HAL_TIM_PWM_MspInit+0x9c>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40021000 	.word	0x40021000
 8005948:	40000800 	.word	0x40000800

0800594c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005954:	f107 0314 	add.w	r3, r7, #20
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596c:	d144      	bne.n	80059f8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	6593      	str	r3, [r2, #88]	; 0x58
 800597a:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005992:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059a4:	f043 0302 	orr.w	r3, r3, #2
 80059a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ba:	2302      	movs	r3, #2
 80059bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c2:	2300      	movs	r3, #0
 80059c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059c6:	2301      	movs	r3, #1
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4619      	mov	r1, r3
 80059d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059d4:	f004 fb4e 	bl	800a074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 80059d8:	2308      	movs	r3, #8
 80059da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059dc:	2302      	movs	r3, #2
 80059de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e4:	2300      	movs	r3, #0
 80059e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059e8:	2301      	movs	r3, #1
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80059ec:	f107 0314 	add.w	r3, r7, #20
 80059f0:	4619      	mov	r1, r3
 80059f2:	4804      	ldr	r0, [pc, #16]	; (8005a04 <HAL_TIM_Encoder_MspInit+0xb8>)
 80059f4:	f004 fb3e 	bl	800a074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80059f8:	bf00      	nop
 80059fa:	3728      	adds	r7, #40	; 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	48000400 	.word	0x48000400

08005a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <HAL_TIM_Base_MspInit+0xe0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d114      	bne.n	8005a44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005a1a:	4b34      	ldr	r3, [pc, #208]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	4a33      	ldr	r2, [pc, #204]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a20:	f043 0310 	orr.w	r3, r3, #16
 8005a24:	6593      	str	r3, [r2, #88]	; 0x58
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a32:	2200      	movs	r2, #0
 8005a34:	2100      	movs	r1, #0
 8005a36:	2036      	movs	r0, #54	; 0x36
 8005a38:	f003 fb8b 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a3c:	2036      	movs	r0, #54	; 0x36
 8005a3e:	f003 fba2 	bl	8009186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005a42:	e04c      	b.n	8005ade <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <HAL_TIM_Base_MspInit+0xe8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d114      	bne.n	8005a78 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a4e:	4b27      	ldr	r3, [pc, #156]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	4a26      	ldr	r2, [pc, #152]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a54:	f043 0320 	orr.w	r3, r3, #32
 8005a58:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005a66:	2200      	movs	r2, #0
 8005a68:	2100      	movs	r1, #0
 8005a6a:	2037      	movs	r0, #55	; 0x37
 8005a6c:	f003 fb71 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a70:	2037      	movs	r0, #55	; 0x37
 8005a72:	f003 fb88 	bl	8009186 <HAL_NVIC_EnableIRQ>
}
 8005a76:	e032      	b.n	8005ade <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIM_Base_MspInit+0xec>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d114      	bne.n	8005aac <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a82:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a86:	4a19      	ldr	r2, [pc, #100]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8005a8e:	4b17      	ldr	r3, [pc, #92]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2019      	movs	r0, #25
 8005aa0:	f003 fb57 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005aa4:	2019      	movs	r0, #25
 8005aa6:	f003 fb6e 	bl	8009186 <HAL_NVIC_EnableIRQ>
}
 8005aaa:	e018      	b.n	8005ade <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a11      	ldr	r2, [pc, #68]	; (8005af8 <HAL_TIM_Base_MspInit+0xf0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d113      	bne.n	8005ade <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <HAL_TIM_Base_MspInit+0xe4>)
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005ace:	2200      	movs	r2, #0
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	201a      	movs	r0, #26
 8005ad4:	f003 fb3d 	bl	8009152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005ad8:	201a      	movs	r0, #26
 8005ada:	f003 fb54 	bl	8009186 <HAL_NVIC_EnableIRQ>
}
 8005ade:	bf00      	nop
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40001000 	.word	0x40001000
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40001400 	.word	0x40001400
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <HAL_TIM_OnePulse_MspInit+0x38>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10b      	bne.n	8005b26 <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b18:	6613      	str	r3, [r2, #96]	; 0x60
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40021000 	.word	0x40021000

08005b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a22      	ldr	r2, [pc, #136]	; (8005be4 <HAL_TIM_MspPostInit+0xa8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d11c      	bne.n	8005b98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b62:	4a21      	ldr	r2, [pc, #132]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b82:	2300      	movs	r3, #0
 8005b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005b86:	2306      	movs	r3, #6
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8005b8a:	f107 0314 	add.w	r3, r7, #20
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4816      	ldr	r0, [pc, #88]	; (8005bec <HAL_TIM_MspPostInit+0xb0>)
 8005b92:	f004 fa6f 	bl	800a074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005b96:	e020      	b.n	8005bda <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <HAL_TIM_MspPostInit+0xb4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d11b      	bne.n	8005bda <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ba2:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <HAL_TIM_MspPostInit+0xac>)
 8005bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4807      	ldr	r0, [pc, #28]	; (8005bf4 <HAL_TIM_MspPostInit+0xb8>)
 8005bd6:	f004 fa4d 	bl	800a074 <HAL_GPIO_Init>
}
 8005bda:	bf00      	nop
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40021000 	.word	0x40021000
 8005bec:	48001400 	.word	0x48001400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	48000400 	.word	0x48000400

08005bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b09a      	sub	sp, #104	; 0x68
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c10:	f107 0310 	add.w	r3, r7, #16
 8005c14:	2244      	movs	r2, #68	; 0x44
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f00b fedc 	bl	80119d6 <memset>
  if(huart->Instance==USART1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <HAL_UART_MspInit+0xa8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d137      	bne.n	8005c98 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c30:	f107 0310 	add.w	r3, r7, #16
 8005c34:	4618      	mov	r0, r3
 8005c36:	f005 fafb 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c40:	f7fe ffb0 	bl	8004ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c48:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c5c:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c60:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c62:	f043 0301 	orr.w	r3, r3, #1
 8005c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <HAL_UART_MspInit+0xac>)
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005c74:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c78:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c82:	2300      	movs	r3, #0
 8005c84:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c86:	2307      	movs	r3, #7
 8005c88:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c94:	f004 f9ee 	bl	800a074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c98:	bf00      	nop
 8005c9a:	3768      	adds	r7, #104	; 0x68
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005cac:	e7fe      	b.n	8005cac <NMI_Handler+0x4>

08005cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cb2:	e7fe      	b.n	8005cb2 <HardFault_Handler+0x4>

08005cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cb8:	e7fe      	b.n	8005cb8 <MemManage_Handler+0x4>

08005cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cbe:	e7fe      	b.n	8005cbe <BusFault_Handler+0x4>

08005cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <UsageFault_Handler+0x4>

08005cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cca:	bf00      	nop
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cd8:	bf00      	nop
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cf4:	f000 fdec 	bl	80068d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cf8:	bf00      	nop
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005d00:	4802      	ldr	r0, [pc, #8]	; (8005d0c <DMA1_Channel1_IRQHandler+0x10>)
 8005d02:	f003 fddd 	bl	80098c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20001e04 	.word	0x20001e04

08005d10 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <DMA1_Channel3_IRQHandler+0x10>)
 8005d16:	f003 fdd3 	bl	80098c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20001cc8 	.word	0x20001cc8

08005d24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d28:	4803      	ldr	r0, [pc, #12]	; (8005d38 <ADC1_2_IRQHandler+0x14>)
 8005d2a:	f001 fd4d 	bl	80077c8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005d2e:	4803      	ldr	r0, [pc, #12]	; (8005d3c <ADC1_2_IRQHandler+0x18>)
 8005d30:	f001 fd4a 	bl	80077c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20001bf0 	.word	0x20001bf0
 8005d3c:	20001c5c 	.word	0x20001c5c

08005d40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005d44:	2020      	movs	r0, #32
 8005d46:	f004 fb47 	bl	800a3d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005d4a:	2080      	movs	r0, #128	; 0x80
 8005d4c:	f004 fb44 	bl	800a3d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005d50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d54:	f004 fb40 	bl	800a3d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d58:	bf00      	nop
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d60:	4802      	ldr	r0, [pc, #8]	; (8005d6c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005d62:	f006 fe85 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005d66:	bf00      	nop
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001e64 	.word	0x20001e64

08005d70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d74:	4803      	ldr	r0, [pc, #12]	; (8005d84 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005d76:	f006 fe7b 	bl	800ca70 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005d7a:	4803      	ldr	r0, [pc, #12]	; (8005d88 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005d7c:	f006 fe78 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d80:	bf00      	nop
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20001e64 	.word	0x20001e64
 8005d88:	2000202c 	.word	0x2000202c

08005d8c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d90:	4803      	ldr	r0, [pc, #12]	; (8005da0 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005d92:	f006 fe6d 	bl	800ca70 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005d96:	4803      	ldr	r0, [pc, #12]	; (8005da4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005d98:	f006 fe6a 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20001e64 	.word	0x20001e64
 8005da4:	20002078 	.word	0x20002078

08005da8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dac:	4802      	ldr	r0, [pc, #8]	; (8005db8 <TIM1_CC_IRQHandler+0x10>)
 8005dae:	f006 fe5f 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	20001e64 	.word	0x20001e64

08005dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005dc0:	4802      	ldr	r0, [pc, #8]	; (8005dcc <TIM6_DAC_IRQHandler+0x10>)
 8005dc2:	f006 fe55 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20001f48 	.word	0x20001f48

08005dd0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005dd4:	4802      	ldr	r0, [pc, #8]	; (8005de0 <TIM7_IRQHandler+0x10>)
 8005dd6:	f006 fe4b 	bl	800ca70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005dda:	bf00      	nop
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20001f94 	.word	0x20001f94

08005de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return 1;
 8005de8:	2301      	movs	r3, #1
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <_kill>:

int _kill(int pid, int sig)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005dfe:	f00b fe3d 	bl	8011a7c <__errno>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2216      	movs	r2, #22
 8005e06:	601a      	str	r2, [r3, #0]
  return -1;
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <_exit>:

void _exit (int status)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff ffe7 	bl	8005df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e26:	e7fe      	b.n	8005e26 <_exit+0x12>

08005e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e00a      	b.n	8005e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e3a:	f3af 8000 	nop.w
 8005e3e:	4601      	mov	r1, r0
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	60ba      	str	r2, [r7, #8]
 8005e46:	b2ca      	uxtb	r2, r1
 8005e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	dbf0      	blt.n	8005e3a <_read+0x12>
  }

  return len;
 8005e58:	687b      	ldr	r3, [r7, #4]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e009      	b.n	8005e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	60ba      	str	r2, [r7, #8]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3301      	adds	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	dbf1      	blt.n	8005e74 <_write+0x12>
  }
  return len;
 8005e90:	687b      	ldr	r3, [r7, #4]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <_close>:

int _close(int file)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <_isatty>:

int _isatty(int file)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f0c:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <_sbrk+0x5c>)
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <_sbrk+0x60>)
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f18:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <_sbrk+0x64>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <_sbrk+0x64>)
 8005f22:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <_sbrk+0x68>)
 8005f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <_sbrk+0x64>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d207      	bcs.n	8005f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f34:	f00b fda2 	bl	8011a7c <__errno>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	220c      	movs	r2, #12
 8005f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f42:	e009      	b.n	8005f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f44:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <_sbrk+0x64>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <_sbrk+0x64>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <_sbrk+0x64>)
 8005f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f56:	68fb      	ldr	r3, [r7, #12]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20008000 	.word	0x20008000
 8005f64:	00000400 	.word	0x00000400
 8005f68:	200021e4 	.word	0x200021e4
 8005f6c:	200023c8 	.word	0x200023c8

08005f70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <SystemInit+0x20>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7a:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <SystemInit+0x20>)
 8005f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f94:	480d      	ldr	r0, [pc, #52]	; (8005fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f98:	f7ff ffea 	bl	8005f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8005f9c:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f9e:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fa0:	4a0d      	ldr	r2, [pc, #52]	; (8005fd8 <LoopForever+0xe>)
  movs r3, #0
 8005fa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005fa4:	e002      	b.n	8005fac <LoopCopyDataInit>

08005fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005faa:	3304      	adds	r3, #4

08005fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fb0:	d3f9      	bcc.n	8005fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fb4:	4c0a      	ldr	r4, [pc, #40]	; (8005fe0 <LoopForever+0x16>)
  movs r3, #0
 8005fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fb8:	e001      	b.n	8005fbe <LoopFillZerobss>

08005fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fbc:	3204      	adds	r2, #4

08005fbe <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fc0:	d3fb      	bcc.n	8005fba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005fc2:	f00b fd61 	bl	8011a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005fc6:	f7fd fdcf 	bl	8003b68 <main>

08005fca <LoopForever>:

LoopForever:
    b LoopForever
 8005fca:	e7fe      	b.n	8005fca <LoopForever>
  ldr   r0, =_estack
 8005fcc:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8005fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fd4:	200003dc 	.word	0x200003dc
  ldr r2, =_sidata
 8005fd8:	08018368 	.word	0x08018368
  ldr r2, =_sbss
 8005fdc:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8005fe0:	200023c8 	.word	0x200023c8

08005fe4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005fe4:	e7fe      	b.n	8005fe4 <COMP1_2_3_IRQHandler>
	...

08005fe8 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <setSPI_Size+0x54>)
 8005ff4:	f993 3000 	ldrsb.w	r3, [r3]
 8005ff8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d017      	beq.n	8006030 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <setSPI_Size+0x58>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <setSPI_Size+0x58>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600e:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <setSPI_Size+0x54>)
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8006016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d104      	bne.n	8006028 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <setSPI_Size+0x58>)
 8006020:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006024:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8006026:	e003      	b.n	8006030 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <setSPI_Size+0x58>)
 800602a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800602e:	60da      	str	r2, [r3, #12]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	200001dc 	.word	0x200001dc
 8006040:	20001da0 	.word	0x20001da0

08006044 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	460a      	mov	r2, r1
 800604e:	71fb      	strb	r3, [r7, #7]
 8006050:	4613      	mov	r3, r2
 8006052:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8006054:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ffc5 	bl	8005fe8 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800605e:	4b3c      	ldr	r3, [pc, #240]	; (8006150 <setDMAMemMode+0x10c>)
 8006060:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006064:	461a      	mov	r2, r3
 8006066:	79bb      	ldrb	r3, [r7, #6]
 8006068:	429a      	cmp	r2, r3
 800606a:	d106      	bne.n	800607a <setDMAMemMode+0x36>
 800606c:	4b38      	ldr	r3, [pc, #224]	; (8006150 <setDMAMemMode+0x10c>)
 800606e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006072:	461a      	mov	r2, r3
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	429a      	cmp	r2, r3
 8006078:	d066      	beq.n	8006148 <setDMAMemMode+0x104>
    config.dma_sz =size;
 800607a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800607e:	4b34      	ldr	r3, [pc, #208]	; (8006150 <setDMAMemMode+0x10c>)
 8006080:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8006082:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006086:	4b32      	ldr	r3, [pc, #200]	; (8006150 <setDMAMemMode+0x10c>)
 8006088:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 800608a:	4b32      	ldr	r3, [pc, #200]	; (8006154 <setDMAMemMode+0x110>)
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b30      	ldr	r3, [pc, #192]	; (8006154 <setDMAMemMode+0x110>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 800609e:	bf00      	nop
 80060a0:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <setDMAMemMode+0x110>)
 80060a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f7      	bne.n	80060a0 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10e      	bne.n	80060d4 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <setDMAMemMode+0x110>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80060be:	4b25      	ldr	r3, [pc, #148]	; (8006154 <setDMAMemMode+0x110>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b23      	ldr	r3, [pc, #140]	; (8006154 <setDMAMemMode+0x110>)
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	e00d      	b.n	80060f0 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <setDMAMemMode+0x110>)
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	2200      	movs	r2, #0
 80060da:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80060dc:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <setDMAMemMode+0x110>)
 80060de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <setDMAMemMode+0x110>)
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ee:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80060f0:	79bb      	ldrb	r3, [r7, #6]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d116      	bne.n	8006124 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80060f6:	4b17      	ldr	r3, [pc, #92]	; (8006154 <setDMAMemMode+0x110>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060fe:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <setDMAMemMode+0x110>)
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006108:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <setDMAMemMode+0x110>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <setDMAMemMode+0x110>)
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8006120:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8006122:	e011      	b.n	8006148 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <setDMAMemMode+0x110>)
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	2200      	movs	r2, #0
 800612a:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <setDMAMemMode+0x110>)
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	2200      	movs	r2, #0
 8006132:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8006134:	4b07      	ldr	r3, [pc, #28]	; (8006154 <setDMAMemMode+0x110>)
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <setDMAMemMode+0x110>)
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006146:	601a      	str	r2, [r3, #0]
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	200001dc 	.word	0x200001dc
 8006154:	20001da0 	.word	0x20001da0

08006158 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8006164:	2000      	movs	r0, #0
 8006166:	f7ff ff3f 	bl	8005fe8 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 800616a:	2200      	movs	r2, #0
 800616c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006170:	4815      	ldr	r0, [pc, #84]	; (80061c8 <LCD_WriteCommand+0x70>)
 8006172:	f004 f919 	bl	800a3a8 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006176:	2200      	movs	r2, #0
 8006178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800617c:	4812      	ldr	r0, [pc, #72]	; (80061c8 <LCD_WriteCommand+0x70>)
 800617e:	f004 f913 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	2201      	movs	r2, #1
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4810      	ldr	r0, [pc, #64]	; (80061cc <LCD_WriteCommand+0x74>)
 800618c:	f005 faeb 	bl	800b766 <HAL_SPI_Transmit>
  if(argc){
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006196:	2201      	movs	r2, #1
 8006198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800619c:	480a      	ldr	r0, [pc, #40]	; (80061c8 <LCD_WriteCommand+0x70>)
 800619e:	f004 f903 	bl	800a3a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	f04f 33ff 	mov.w	r3, #4294967295
 80061ae:	4807      	ldr	r0, [pc, #28]	; (80061cc <LCD_WriteCommand+0x74>)
 80061b0:	f005 fad9 	bl	800b766 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80061b4:	2201      	movs	r2, #1
 80061b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061ba:	4803      	ldr	r0, [pc, #12]	; (80061c8 <LCD_WriteCommand+0x70>)
 80061bc:	f004 f8f4 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	48000400 	.word	0x48000400
 80061cc:	20001da0 	.word	0x20001da0

080061d0 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80061da:	2201      	movs	r2, #1
 80061dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061e0:	4830      	ldr	r0, [pc, #192]	; (80062a4 <LCD_WriteData+0xd4>)
 80061e2:	f004 f8e1 	bl	800a3a8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80061e6:	2200      	movs	r2, #0
 80061e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061ec:	482d      	ldr	r0, [pc, #180]	; (80062a4 <LCD_WriteData+0xd4>)
 80061ee:	f004 f8db 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80061f2:	e049      	b.n	8006288 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061fa:	4293      	cmp	r3, r2
 80061fc:	bf28      	it	cs
 80061fe:	4613      	movcs	r3, r2
 8006200:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b20      	cmp	r3, #32
 8006206:	d924      	bls.n	8006252 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8006208:	89fb      	ldrh	r3, [r7, #14]
 800620a:	461a      	mov	r2, r3
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4826      	ldr	r0, [pc, #152]	; (80062a8 <LCD_WriteData+0xd8>)
 8006210:	f005 fc1e 	bl	800ba50 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8006214:	bf00      	nop
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <LCD_WriteData+0xd8>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	4618      	mov	r0, r3
 800621c:	f003 fbff 	bl	8009a1e <HAL_DMA_GetState>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d1f7      	bne.n	8006216 <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 8006226:	4b21      	ldr	r3, [pc, #132]	; (80062ac <LCD_WriteData+0xdc>)
 8006228:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d127      	bne.n	8006280 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <LCD_WriteData+0xdc>)
 8006232:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d104      	bne.n	8006244 <LCD_WriteData+0x74>
          buff += chunk_size;
 800623a:	89fb      	ldrh	r3, [r7, #14]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	e01d      	b.n	8006280 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8006244:	89fb      	ldrh	r3, [r7, #14]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e016      	b.n	8006280 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8006252:	89fa      	ldrh	r2, [r7, #14]
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4813      	ldr	r0, [pc, #76]	; (80062a8 <LCD_WriteData+0xd8>)
 800625c:	f005 fa83 	bl	800b766 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <LCD_WriteData+0xdc>)
 8006262:	f993 3000 	ldrsb.w	r3, [r3]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d104      	bne.n	8006274 <LCD_WriteData+0xa4>
        buff += chunk_size;
 800626a:	89fb      	ldrh	r3, [r7, #14]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e005      	b.n	8006280 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8006280:	89fb      	ldrh	r3, [r7, #14]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1b2      	bne.n	80061f4 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800628e:	2201      	movs	r2, #1
 8006290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006294:	4803      	ldr	r0, [pc, #12]	; (80062a4 <LCD_WriteData+0xd4>)
 8006296:	f004 f887 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif
}
 800629a:	bf00      	nop
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	48000400 	.word	0x48000400
 80062a8:	20001da0 	.word	0x20001da0
 80062ac:	200001dc 	.word	0x200001dc

080062b0 <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7735.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { CMD_MADCTL, 0};
 80062ba:	2336      	movs	r3, #54	; 0x36
 80062bc:	81bb      	strh	r3, [r7, #12]

  m = m % 4; // can't be higher than 3
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	f003 0303 	and.w	r3, r3, #3
 80062c4:	71fb      	strb	r3, [r7, #7]

  switch (m)
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d817      	bhi.n	80062fc <LCD_SetRotation+0x4c>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <LCD_SetRotation+0x24>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062eb 	.word	0x080062eb
 80062dc:	080062f1 	.word	0x080062f1
 80062e0:	080062f7 	.word	0x080062f7
  {
  case 0:
#if LCD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_RGB;
 80062e4:	23c0      	movs	r3, #192	; 0xc0
 80062e6:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062e8:	e008      	b.n	80062fc <LCD_SetRotation+0x4c>
  case 1:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80062ea:	23a0      	movs	r3, #160	; 0xa0
 80062ec:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062ee:	e005      	b.n	80062fc <LCD_SetRotation+0x4c>
  case 2:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_RGB;
 80062f0:	2300      	movs	r3, #0
 80062f2:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062f4:	e002      	b.n	80062fc <LCD_SetRotation+0x4c>
  case 3:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 80062f6:	2360      	movs	r3, #96	; 0x60
 80062f8:	737b      	strb	r3, [r7, #13]
#endif
    break;
 80062fa:	bf00      	nop
  }
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80062fc:	f107 030c 	add.w	r3, r7, #12
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ff28 	bl	8006158 <LCD_WriteCommand>
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b08b      	sub	sp, #44	; 0x2c
 8006314:	af00      	add	r7, sp, #0
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4623      	mov	r3, r4
 8006320:	80fb      	strh	r3, [r7, #6]
 8006322:	4603      	mov	r3, r0
 8006324:	80bb      	strh	r3, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	807b      	strh	r3, [r7, #2]
 800632a:	4613      	mov	r3, r2
 800632c:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006332:	887b      	ldrh	r3, [r7, #2]
 8006334:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8006336:	88bb      	ldrh	r3, [r7, #4]
 8006338:	847b      	strh	r3, [r7, #34]	; 0x22
 800633a:	883b      	ldrh	r3, [r7, #0]
 800633c:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800633e:	232a      	movs	r3, #42	; 0x2a
 8006340:	763b      	strb	r3, [r7, #24]
 8006342:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006346:	121b      	asrs	r3, r3, #8
 8006348:	b21b      	sxth	r3, r3
 800634a:	b2db      	uxtb	r3, r3
 800634c:	767b      	strb	r3, [r7, #25]
 800634e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006350:	b2db      	uxtb	r3, r3
 8006352:	76bb      	strb	r3, [r7, #26]
 8006354:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006358:	121b      	asrs	r3, r3, #8
 800635a:	b21b      	sxth	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	76fb      	strb	r3, [r7, #27]
 8006360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006362:	b2db      	uxtb	r3, r3
 8006364:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006366:	f107 0318 	add.w	r3, r7, #24
 800636a:	2104      	movs	r1, #4
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fef3 	bl	8006158 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8006372:	232b      	movs	r3, #43	; 0x2b
 8006374:	743b      	strb	r3, [r7, #16]
 8006376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800637a:	121b      	asrs	r3, r3, #8
 800637c:	b21b      	sxth	r3, r3
 800637e:	b2db      	uxtb	r3, r3
 8006380:	747b      	strb	r3, [r7, #17]
 8006382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006384:	b2db      	uxtb	r3, r3
 8006386:	74bb      	strb	r3, [r7, #18]
 8006388:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800638c:	121b      	asrs	r3, r3, #8
 800638e:	b21b      	sxth	r3, r3
 8006390:	b2db      	uxtb	r3, r3
 8006392:	74fb      	strb	r3, [r7, #19]
 8006394:	8c3b      	ldrh	r3, [r7, #32]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800639a:	f107 0310 	add.w	r3, r7, #16
 800639e:	2104      	movs	r1, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fed9 	bl	8006158 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80063a6:	232c      	movs	r3, #44	; 0x2c
 80063a8:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063aa:	f107 030c 	add.w	r3, r7, #12
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fed1 	bl	8006158 <LCD_WriteCommand>
  }
}
 80063b6:	bf00      	nop
 80063b8:	372c      	adds	r7, #44	; 0x2c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}
	...

080063c0 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	460b      	mov	r3, r1
 80063cc:	80bb      	strh	r3, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80063d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	db39      	blt.n	800644e <LCD_DrawPixel+0x8e>
 80063da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063de:	2bef      	cmp	r3, #239	; 0xef
 80063e0:	dc35      	bgt.n	800644e <LCD_DrawPixel+0x8e>
 80063e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	db31      	blt.n	800644e <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 80063ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80063ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80063f2:	da2c      	bge.n	800644e <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80063f4:	887b      	ldrh	r3, [r7, #2]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	733b      	strb	r3, [r7, #12]
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8006404:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006408:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800640c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006410:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006414:	f7ff ff7c 	bl	8006310 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006418:	2201      	movs	r2, #1
 800641a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800641e:	480e      	ldr	r0, [pc, #56]	; (8006458 <LCD_DrawPixel+0x98>)
 8006420:	f003 ffc2 	bl	800a3a8 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800642a:	480b      	ldr	r0, [pc, #44]	; (8006458 <LCD_DrawPixel+0x98>)
 800642c:	f003 ffbc 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8006430:	f107 010c 	add.w	r1, r7, #12
 8006434:	f04f 33ff 	mov.w	r3, #4294967295
 8006438:	2202      	movs	r2, #2
 800643a:	4808      	ldr	r0, [pc, #32]	; (800645c <LCD_DrawPixel+0x9c>)
 800643c:	f005 f993 	bl	800b766 <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006440:	2201      	movs	r2, #1
 8006442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006446:	4804      	ldr	r0, [pc, #16]	; (8006458 <LCD_DrawPixel+0x98>)
 8006448:	f003 ffae 	bl	800a3a8 <HAL_GPIO_WritePin>
 800644c:	e000      	b.n	8006450 <LCD_DrawPixel+0x90>
    return;
 800644e:	bf00      	nop
#endif
}
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	48000400 	.word	0x48000400
 800645c:	20001da0 	.word	0x20001da0

08006460 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8006460:	b580      	push	{r7, lr}
 8006462:	b094      	sub	sp, #80	; 0x50
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b20      	cmp	r3, #32
 8006470:	d905      	bls.n	800647e <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8006472:	1cbb      	adds	r3, r7, #2
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff feaa 	bl	80061d0 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 800647c:	e026      	b.n	80064cc <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800647e:	2300      	movs	r3, #0
 8006480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006482:	e009      	b.n	8006498 <LCD_FillPixels+0x38>
      fill[t]=color;
 8006484:	887a      	ldrh	r2, [r7, #2]
 8006486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	3350      	adds	r3, #80	; 0x50
 800648c:	443b      	add	r3, r7
 800648e:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8006492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006494:	3301      	adds	r3, #1
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b20      	cmp	r3, #32
 800649c:	bf28      	it	cs
 800649e:	2320      	movcs	r3, #32
 80064a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d3ee      	bcc.n	8006484 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 80064a6:	e00e      	b.n	80064c6 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	bf28      	it	cs
 80064ae:	2320      	movcs	r3, #32
 80064b0:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fe89 	bl	80061d0 <LCD_WriteData>
      pixels-=sz;
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ed      	bne.n	80064a8 <LCD_FillPixels+0x48>
}
 80064cc:	bf00      	nop
 80064ce:	3750      	adds	r7, #80	; 0x50
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	461a      	mov	r2, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	80fb      	strh	r3, [r7, #6]
 80064e6:	4603      	mov	r3, r0
 80064e8:	80bb      	strh	r3, [r7, #4]
 80064ea:	460b      	mov	r3, r1
 80064ec:	807b      	strh	r3, [r7, #2]
 80064ee:	4613      	mov	r3, r2
 80064f0:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80064f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	d105      	bne.n	8006508 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80064fc:	2100      	movs	r1, #0
 80064fe:	2001      	movs	r0, #1
 8006500:	f7ff fda0 	bl	8006044 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	e014      	b.n	8006532 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8006508:	f9b7 3000 	ldrsh.w	r3, [r7]
 800650c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006510:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006514:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006518:	f7ff fefa 	bl	8006310 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800651c:	2101      	movs	r1, #1
 800651e:	2000      	movs	r0, #0
 8006520:	f7ff fd90 	bl	8006044 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006524:	2201      	movs	r2, #1
 8006526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800652a:	4804      	ldr	r0, [pc, #16]	; (800653c <LCD_FillArea+0x68>)
 800652c:	f003 ff3c 	bl	800a3a8 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8006530:	4b03      	ldr	r3, [pc, #12]	; (8006540 <LCD_FillArea+0x6c>)
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}
 800653a:	bf00      	nop
 800653c:	48000400 	.word	0x48000400
 8006540:	08006461 	.word	0x08006461

08006544 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	4604      	mov	r4, r0
 800654c:	4608      	mov	r0, r1
 800654e:	4611      	mov	r1, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4623      	mov	r3, r4
 8006554:	80fb      	strh	r3, [r7, #6]
 8006556:	4603      	mov	r3, r0
 8006558:	80bb      	strh	r3, [r7, #4]
 800655a:	460b      	mov	r3, r1
 800655c:	807b      	strh	r3, [r7, #2]
 800655e:	4613      	mov	r3, r2
 8006560:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	3301      	adds	r3, #1
 800656a:	4619      	mov	r1, r3
 800656c:	883a      	ldrh	r2, [r7, #0]
 800656e:	88bb      	ldrh	r3, [r7, #4]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	3301      	adds	r3, #1
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800657a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800657e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006582:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006586:	f9b7 3000 	ldrsh.w	r3, [r7]
 800658a:	f7ff fec1 	bl	8006310 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800658e:	2101      	movs	r1, #1
 8006590:	2000      	movs	r0, #0
 8006592:	f7ff fd57 	bl	8006044 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8006596:	8c3b      	ldrh	r3, [r7, #32]
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff60 	bl	8006460 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80065a0:	2100      	movs	r1, #0
 80065a2:	2001      	movs	r0, #1
 80065a4:	f7ff fd4e 	bl	8006044 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd90      	pop	{r4, r7, pc}

080065b2 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80065b2:	b590      	push	{r4, r7, lr}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	4603      	mov	r3, r0
 80065ba:	603a      	str	r2, [r7, #0]
 80065bc:	80fb      	strh	r3, [r7, #6]
 80065be:	460b      	mov	r3, r1
 80065c0:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	889b      	ldrh	r3, [r3, #4]
 80065c6:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	88db      	ldrh	r3, [r3, #6]
 80065cc:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	2bef      	cmp	r3, #239	; 0xef
 80065d2:	d839      	bhi.n	8006648 <LCD_DrawImage+0x96>
 80065d4:	88bb      	ldrh	r3, [r7, #4]
 80065d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80065da:	d235      	bcs.n	8006648 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	4413      	add	r3, r2
 80065e2:	2bf0      	cmp	r3, #240	; 0xf0
 80065e4:	dc32      	bgt.n	800664c <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80065e6:	88ba      	ldrh	r2, [r7, #4]
 80065e8:	89bb      	ldrh	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80065f0:	dc2e      	bgt.n	8006650 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	7a1b      	ldrb	r3, [r3, #8]
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d12c      	bne.n	8006654 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80065fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	89fb      	ldrh	r3, [r7, #14]
 8006606:	4413      	add	r3, r2
 8006608:	b29b      	uxth	r3, r3
 800660a:	3b01      	subs	r3, #1
 800660c:	b29b      	uxth	r3, r3
 800660e:	b21c      	sxth	r4, r3
 8006610:	88ba      	ldrh	r2, [r7, #4]
 8006612:	89bb      	ldrh	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	b21b      	sxth	r3, r3
 800661e:	4622      	mov	r2, r4
 8006620:	f7ff fe76 	bl	8006310 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006624:	2101      	movs	r1, #1
 8006626:	2001      	movs	r0, #1
 8006628:	f7ff fd0c 	bl	8006044 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	89ba      	ldrh	r2, [r7, #12]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
 8006638:	4619      	mov	r1, r3
 800663a:	f7ff fdc9 	bl	80061d0 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800663e:	2100      	movs	r1, #0
 8006640:	2001      	movs	r0, #1
 8006642:	f7ff fcff 	bl	8006044 <setDMAMemMode>
 8006646:	e006      	b.n	8006656 <LCD_DrawImage+0xa4>
    return;
 8006648:	bf00      	nop
 800664a:	e004      	b.n	8006656 <LCD_DrawImage+0xa4>
    return;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <LCD_DrawImage+0xa4>
    return;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <LCD_DrawImage+0xa4>
    return;
 8006654:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bd90      	pop	{r4, r7, pc}

0800665c <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b087      	sub	sp, #28
 8006660:	af02      	add	r7, sp, #8
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4623      	mov	r3, r4
 800666c:	80fb      	strh	r3, [r7, #6]
 800666e:	4603      	mov	r3, r0
 8006670:	80bb      	strh	r3, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	807b      	strh	r3, [r7, #2]
 8006676:	4613      	mov	r3, r2
 8006678:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	887b      	ldrh	r3, [r7, #2]
 800667e:	429a      	cmp	r2, r3
 8006680:	d10a      	bne.n	8006698 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 8006682:	88ba      	ldrh	r2, [r7, #4]
 8006684:	883b      	ldrh	r3, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d918      	bls.n	80066bc <LCD_DrawLine+0x60>
 800668a:	88bb      	ldrh	r3, [r7, #4]
 800668c:	81bb      	strh	r3, [r7, #12]
 800668e:	883b      	ldrh	r3, [r7, #0]
 8006690:	80bb      	strh	r3, [r7, #4]
 8006692:	89bb      	ldrh	r3, [r7, #12]
 8006694:	803b      	strh	r3, [r7, #0]
 8006696:	e011      	b.n	80066bc <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8006698:	88ba      	ldrh	r2, [r7, #4]
 800669a:	883b      	ldrh	r3, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d10a      	bne.n	80066b6 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80066a0:	88fa      	ldrh	r2, [r7, #6]
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d909      	bls.n	80066bc <LCD_DrawLine+0x60>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	81fb      	strh	r3, [r7, #14]
 80066ac:	887b      	ldrh	r3, [r7, #2]
 80066ae:	80fb      	strh	r3, [r7, #6]
 80066b0:	89fb      	ldrh	r3, [r7, #14]
 80066b2:	807b      	strh	r3, [r7, #2]
 80066b4:	e002      	b.n	80066bc <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	e009      	b.n	80066d0 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80066bc:	883c      	ldrh	r4, [r7, #0]
 80066be:	887a      	ldrh	r2, [r7, #2]
 80066c0:	88b9      	ldrh	r1, [r7, #4]
 80066c2:	88f8      	ldrh	r0, [r7, #6]
 80066c4:	8c3b      	ldrh	r3, [r7, #32]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	4623      	mov	r3, r4
 80066ca:	f7ff ff3b 	bl	8006544 <LCD_Fill>
  return UG_RESULT_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd90      	pop	{r4, r7, pc}

080066d8 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60ba      	str	r2, [r7, #8]
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	4603      	mov	r3, r0
 80066e4:	81fb      	strh	r3, [r7, #14]
 80066e6:	460b      	mov	r3, r1
 80066e8:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f008 fb98 	bl	800ee20 <UG_FontSelect>
  UG_SetForecolor(color);
 80066f0:	8b3b      	ldrh	r3, [r7, #24]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f008 fee0 	bl	800f4b8 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80066f8:	8bbb      	ldrh	r3, [r7, #28]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f008 feee 	bl	800f4dc <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8006700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006704:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f008 fe3c 	bl	800f388 <UG_PutString>
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <LCD_setPower+0x14>
 8006728:	2329      	movs	r3, #41	; 0x29
 800672a:	e000      	b.n	800672e <LCD_setPower+0x16>
 800672c:	2328      	movs	r3, #40	; 0x28
 800672e:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fd0e 	bl	8006158 <LCD_WriteCommand>
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <LCD_Update>:

static void LCD_Update(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006748:	2100      	movs	r1, #0
 800674a:	2001      	movs	r0, #1
 800674c:	f7ff fc7a 	bl	8006044 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8006750:	bf00      	nop
 8006752:	bd80      	pop	{r7, pc}

08006754 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800675a:	2201      	movs	r2, #1
 800675c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006760:	482a      	ldr	r0, [pc, #168]	; (800680c <LCD_init+0xb8>)
 8006762:	f003 fe21 	bl	800a3a8 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8006766:	2200      	movs	r2, #0
 8006768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800676c:	4827      	ldr	r0, [pc, #156]	; (800680c <LCD_init+0xb8>)
 800676e:	f003 fe1b 	bl	800a3a8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006772:	2001      	movs	r0, #1
 8006774:	f000 f8ca 	bl	800690c <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8006778:	2201      	movs	r2, #1
 800677a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800677e:	4823      	ldr	r0, [pc, #140]	; (800680c <LCD_init+0xb8>)
 8006780:	f003 fe12 	bl	800a3a8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8006784:	20c8      	movs	r0, #200	; 0xc8
 8006786:	f000 f8c1 	bl	800690c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800678a:	4921      	ldr	r1, [pc, #132]	; (8006810 <LCD_init+0xbc>)
 800678c:	4821      	ldr	r0, [pc, #132]	; (8006814 <LCD_init+0xc0>)
 800678e:	f008 faad 	bl	800ecec <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8006792:	4921      	ldr	r1, [pc, #132]	; (8006818 <LCD_init+0xc4>)
 8006794:	2000      	movs	r0, #0
 8006796:	f009 ff37 	bl	8010608 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 800679a:	4920      	ldr	r1, [pc, #128]	; (800681c <LCD_init+0xc8>)
 800679c:	2001      	movs	r0, #1
 800679e:	f009 ff33 	bl	8010608 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80067a2:	491f      	ldr	r1, [pc, #124]	; (8006820 <LCD_init+0xcc>)
 80067a4:	2002      	movs	r0, #2
 80067a6:	f009 ff2f 	bl	8010608 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 80067aa:	491e      	ldr	r1, [pc, #120]	; (8006824 <LCD_init+0xd0>)
 80067ac:	2003      	movs	r0, #3
 80067ae:	f009 ff2b 	bl	8010608 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80067b2:	2000      	movs	r0, #0
 80067b4:	f008 fea4 	bl	800f500 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80067b8:	2000      	movs	r0, #0
 80067ba:	f008 feb5 	bl	800f528 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80067be:	2300      	movs	r3, #0
 80067c0:	80fb      	strh	r3, [r7, #6]
 80067c2:	e013      	b.n	80067ec <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	3301      	adds	r3, #1
 80067c8:	4a17      	ldr	r2, [pc, #92]	; (8006828 <LCD_init+0xd4>)
 80067ca:	441a      	add	r2, r3
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	4916      	ldr	r1, [pc, #88]	; (8006828 <LCD_init+0xd4>)
 80067d0:	5ccb      	ldrb	r3, [r1, r3]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7ff fcbf 	bl	8006158 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	4a12      	ldr	r2, [pc, #72]	; (8006828 <LCD_init+0xd4>)
 80067de:	5cd3      	ldrb	r3, [r2, r3]
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	4413      	add	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3302      	adds	r3, #2
 80067ea:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b4b      	cmp	r3, #75	; 0x4b
 80067f0:	d9e8      	bls.n	80067c4 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80067f2:	2000      	movs	r0, #0
 80067f4:	f008 fb24 	bl	800ee40 <UG_FillScreen>
  LCD_setPower(ENABLE);
 80067f8:	2001      	movs	r0, #1
 80067fa:	f7ff ff8d 	bl	8006718 <LCD_setPower>
  UG_Update();
 80067fe:	f009 ff25 	bl	801064c <UG_Update>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	48000400 	.word	0x48000400
 8006810:	200001e0 	.word	0x200001e0
 8006814:	200021e8 	.word	0x200021e8
 8006818:	0800665d 	.word	0x0800665d
 800681c:	08006545 	.word	0x08006545
 8006820:	080064d5 	.word	0x080064d5
 8006824:	080065b3 	.word	0x080065b3
 8006828:	08015704 	.word	0x08015704

0800682c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006836:	2003      	movs	r0, #3
 8006838:	f002 fc80 	bl	800913c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800683c:	200f      	movs	r0, #15
 800683e:	f000 f80d 	bl	800685c <HAL_InitTick>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	71fb      	strb	r3, [r7, #7]
 800684c:	e001      	b.n	8006852 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800684e:	f7fe fdff 	bl	8005450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006852:	79fb      	ldrb	r3, [r7, #7]

}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006868:	4b16      	ldr	r3, [pc, #88]	; (80068c4 <HAL_InitTick+0x68>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d022      	beq.n	80068b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_InitTick+0x6c>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <HAL_InitTick+0x68>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800687c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	4618      	mov	r0, r3
 8006886:	f002 fc8c 	bl	80091a2 <HAL_SYSTICK_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10f      	bne.n	80068b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b0f      	cmp	r3, #15
 8006894:	d809      	bhi.n	80068aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006896:	2200      	movs	r2, #0
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	f002 fc58 	bl	8009152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80068a2:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <HAL_InitTick+0x70>)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e007      	b.n	80068ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	e004      	b.n	80068ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
 80068b4:	e001      	b.n	80068ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	200001f0 	.word	0x200001f0
 80068c8:	200001d8 	.word	0x200001d8
 80068cc:	200001ec 	.word	0x200001ec

080068d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068d4:	4b05      	ldr	r3, [pc, #20]	; (80068ec <HAL_IncTick+0x1c>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_IncTick+0x20>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4413      	add	r3, r2
 80068de:	4a03      	ldr	r2, [pc, #12]	; (80068ec <HAL_IncTick+0x1c>)
 80068e0:	6013      	str	r3, [r2, #0]
}
 80068e2:	bf00      	nop
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	2000225c 	.word	0x2000225c
 80068f0:	200001f0 	.word	0x200001f0

080068f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return uwTick;
 80068f8:	4b03      	ldr	r3, [pc, #12]	; (8006908 <HAL_GetTick+0x14>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	2000225c 	.word	0x2000225c

0800690c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006914:	f7ff ffee 	bl	80068f4 <HAL_GetTick>
 8006918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d004      	beq.n	8006930 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006926:	4b09      	ldr	r3, [pc, #36]	; (800694c <HAL_Delay+0x40>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006930:	bf00      	nop
 8006932:	f7ff ffdf 	bl	80068f4 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	429a      	cmp	r2, r3
 8006940:	d8f7      	bhi.n	8006932 <HAL_Delay+0x26>
  {
  }
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	200001f0 	.word	0x200001f0

08006950 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	609a      	str	r2, [r3, #8]
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3360      	adds	r3, #96	; 0x60
 80069ca:	461a      	mov	r2, r3
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4b08      	ldr	r3, [pc, #32]	; (80069fc <LL_ADC_SetOffset+0x44>)
 80069da:	4013      	ands	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	03fff000 	.word	0x03fff000

08006a00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3360      	adds	r3, #96	; 0x60
 8006a0e:	461a      	mov	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3360      	adds	r3, #96	; 0x60
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b087      	sub	sp, #28
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3360      	adds	r3, #96	; 0x60
 8006a72:	461a      	mov	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3360      	adds	r3, #96	; 0x60
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	615a      	str	r2, [r3, #20]
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3330      	adds	r3, #48	; 0x30
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f003 030c 	and.w	r3, r3, #12
 8006b36:	4413      	add	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	211f      	movs	r1, #31
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	401a      	ands	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0e9b      	lsrs	r3, r3, #26
 8006b52:	f003 011f 	and.w	r1, r3, #31
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b60:	431a      	orrs	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	0e5b      	lsrs	r3, r3, #25
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	4413      	add	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	0d1b      	lsrs	r3, r3, #20
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2107      	movs	r1, #7
 8006bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	401a      	ands	r2, r3
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	0d1b      	lsrs	r3, r3, #20
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	401a      	ands	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f003 0318 	and.w	r3, r3, #24
 8006c12:	4908      	ldr	r1, [pc, #32]	; (8006c34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c14:	40d9      	lsrs	r1, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	400b      	ands	r3, r1
 8006c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	0007ffff 	.word	0x0007ffff

08006c38 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	330c      	adds	r3, #12
 8006c48:	4618      	mov	r0, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	f003 0103 	and.w	r1, r3, #3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f003 0201 	and.w	r2, r3, #1
 8006c58:	4613      	mov	r3, r2
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4403      	add	r3, r0
 8006c66:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006c72:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006c76:	43db      	mvns	r3, r3
 8006c78:	401a      	ands	r2, r3
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	400b      	ands	r3, r1
 8006c80:	431a      	orrs	r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3320      	adds	r3, #32
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0d1b      	lsrs	r3, r3, #20
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f003 030c 	and.w	r3, r3, #12
 8006cb0:	4413      	add	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0419      	lsls	r1, r3, #16
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 031f 	and.w	r3, r3, #31
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6093      	str	r3, [r2, #8]
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d46:	d101      	bne.n	8006d4c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d96:	d101      	bne.n	8006d9c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006de6:	f043 0202 	orr.w	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <LL_ADC_IsEnabled+0x18>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <LL_ADC_IsEnabled+0x1a>
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d101      	bne.n	8006e38 <LL_ADC_IsDisableOngoing+0x18>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <LL_ADC_IsDisableOngoing+0x1a>
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e5a:	f043 0204 	orr.w	r2, r3, #4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e82:	f043 0210 	orr.w	r2, r3, #16
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0304 	and.w	r3, r3, #4
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d101      	bne.n	8006eae <LL_ADC_REG_IsConversionOngoing+0x18>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d101      	bne.n	8006efc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e000      	b.n	8006efe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2280      	movs	r2, #128	; 0x80
 8006f16:	601a      	str	r2, [r3, #0]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	605a      	str	r2, [r3, #4]
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	605a      	str	r2, [r3, #4]
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e167      	b.n	8007306 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007040:	2b00      	cmp	r3, #0
 8007042:	d109      	bne.n	8007058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe fa27 	bl	8005498 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fe68 	bl	8006d32 <LL_ADC_IsDeepPowerDownEnabled>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fe4e 	bl	8006d0e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fe83 	bl	8006d82 <LL_ADC_IsInternalRegulatorEnabled>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d115      	bne.n	80070ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fe67 	bl	8006d5a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800708c:	4ba0      	ldr	r3, [pc, #640]	; (8007310 <HAL_ADC_Init+0x2f4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	099b      	lsrs	r3, r3, #6
 8007092:	4aa0      	ldr	r2, [pc, #640]	; (8007314 <HAL_ADC_Init+0x2f8>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	099b      	lsrs	r3, r3, #6
 800709a:	3301      	adds	r3, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80070a0:	e002      	b.n	80070a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f9      	bne.n	80070a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fe65 	bl	8006d82 <LL_ADC_IsInternalRegulatorEnabled>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10d      	bne.n	80070da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	f043 0210 	orr.w	r2, r3, #16
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ce:	f043 0201 	orr.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fed9 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 80070e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	f040 8100 	bne.w	80072f4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f040 80fc 	bne.w	80072f4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007100:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007104:	f043 0202 	orr.w	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fe72 	bl	8006dfa <LL_ADC_IsEnabled>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d111      	bne.n	8007140 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800711c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007120:	f7ff fe6b 	bl	8006dfa <LL_ADC_IsEnabled>
 8007124:	4604      	mov	r4, r0
 8007126:	487c      	ldr	r0, [pc, #496]	; (8007318 <HAL_ADC_Init+0x2fc>)
 8007128:	f7ff fe67 	bl	8006dfa <LL_ADC_IsEnabled>
 800712c:	4603      	mov	r3, r0
 800712e:	4323      	orrs	r3, r4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	4619      	mov	r1, r3
 800713a:	4878      	ldr	r0, [pc, #480]	; (800731c <HAL_ADC_Init+0x300>)
 800713c:	f7ff fc08 	bl	8006950 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7f5b      	ldrb	r3, [r3, #29]
 8007144:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800714a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8007150:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007156:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800715e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007160:	4313      	orrs	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800716a:	2b01      	cmp	r3, #1
 800716c:	d106      	bne.n	800717c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	3b01      	subs	r3, #1
 8007174:	045b      	lsls	r3, r3, #17
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4313      	orrs	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	4313      	orrs	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	4b60      	ldr	r3, [pc, #384]	; (8007320 <HAL_ADC_Init+0x304>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	69b9      	ldr	r1, [r7, #24]
 80071a8:	430b      	orrs	r3, r1
 80071aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fe8c 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 80071cc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d16d      	bne.n	80072b0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d16a      	bne.n	80072b0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80071de:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80071e6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071f6:	f023 0302 	bic.w	r3, r3, #2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	69b9      	ldr	r1, [r7, #24]
 8007200:	430b      	orrs	r3, r1
 8007202:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d017      	beq.n	800723c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800721a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007224:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6911      	ldr	r1, [r2, #16]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	430b      	orrs	r3, r1
 8007236:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800723a:	e013      	b.n	8007264 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800724a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800725c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007260:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726a:	2b01      	cmp	r3, #1
 800726c:	d118      	bne.n	80072a0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007284:	4311      	orrs	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800728a:	4311      	orrs	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007290:	430a      	orrs	r2, r1
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	611a      	str	r2, [r3, #16]
 800729e:	e007      	b.n	80072b0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10c      	bne.n	80072d2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	f023 010f 	bic.w	r1, r3, #15
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
 80072d0:	e007      	b.n	80072e2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 020f 	bic.w	r2, r2, #15
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e6:	f023 0303 	bic.w	r3, r3, #3
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80072f2:	e007      	b.n	8007304 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	f043 0210 	orr.w	r2, r3, #16
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007304:	7ffb      	ldrb	r3, [r7, #31]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3724      	adds	r7, #36	; 0x24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd90      	pop	{r4, r7, pc}
 800730e:	bf00      	nop
 8007310:	200001d8 	.word	0x200001d8
 8007314:	053e2d63 	.word	0x053e2d63
 8007318:	50000100 	.word	0x50000100
 800731c:	50000300 	.word	0x50000300
 8007320:	fff04007 	.word	0xfff04007

08007324 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800732c:	4893      	ldr	r0, [pc, #588]	; (800757c <HAL_ADC_Start_IT+0x258>)
 800732e:	f7ff fcd2 	bl	8006cd6 <LL_ADC_GetMultimode>
 8007332:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fdac 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 8113 	bne.w	800756c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_ADC_Start_IT+0x30>
 8007350:	2302      	movs	r3, #2
 8007352:	e10e      	b.n	8007572 <HAL_ADC_Start_IT+0x24e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fb19 	bl	8008994 <ADC_Enable>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b00      	cmp	r3, #0
 800736a:	f040 80fa 	bne.w	8007562 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007372:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a7e      	ldr	r2, [pc, #504]	; (8007580 <HAL_ADC_Start_IT+0x25c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d002      	beq.n	8007392 <HAL_ADC_Start_IT+0x6e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	e001      	b.n	8007396 <HAL_ADC_Start_IT+0x72>
 8007392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6812      	ldr	r2, [r2, #0]
 800739a:	4293      	cmp	r3, r2
 800739c:	d002      	beq.n	80073a4 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d105      	bne.n	80073b0 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c0:	f023 0206 	bic.w	r2, r3, #6
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	661a      	str	r2, [r3, #96]	; 0x60
 80073c8:	e002      	b.n	80073d0 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	221c      	movs	r2, #28
 80073d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 021c 	bic.w	r2, r2, #28
 80073ee:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	2b08      	cmp	r3, #8
 80073f6:	d108      	bne.n	800740a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0208 	orr.w	r2, r2, #8
 8007406:	605a      	str	r2, [r3, #4]
          break;
 8007408:	e008      	b.n	800741c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0204 	orr.w	r2, r2, #4
 8007418:	605a      	str	r2, [r3, #4]
          break;
 800741a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d107      	bne.n	8007434 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0210 	orr.w	r2, r2, #16
 8007432:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a51      	ldr	r2, [pc, #324]	; (8007580 <HAL_ADC_Start_IT+0x25c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d002      	beq.n	8007444 <HAL_ADC_Start_IT+0x120>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	e001      	b.n	8007448 <HAL_ADC_Start_IT+0x124>
 8007444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	4293      	cmp	r3, r2
 800744e:	d008      	beq.n	8007462 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b05      	cmp	r3, #5
 800745a:	d002      	beq.n	8007462 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b09      	cmp	r3, #9
 8007460:	d13a      	bne.n	80074d8 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02d      	beq.n	80074cc <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007474:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007478:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d110      	bne.n	80074aa <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0220 	bic.w	r2, r2, #32
 8007496:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a6:	605a      	str	r2, [r3, #4]
              break;
 80074a8:	e010      	b.n	80074cc <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0220 	orr.w	r2, r2, #32
 80074c8:	605a      	str	r2, [r3, #4]
              break;
 80074ca:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fcb8 	bl	8006e46 <LL_ADC_REG_StartConversion>
 80074d6:	e04b      	b.n	8007570 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a25      	ldr	r2, [pc, #148]	; (8007580 <HAL_ADC_Start_IT+0x25c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d002      	beq.n	80074f4 <HAL_ADC_Start_IT+0x1d0>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	e001      	b.n	80074f8 <HAL_ADC_Start_IT+0x1d4>
 80074f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074f8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d034      	beq.n	8007570 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800750e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	2b08      	cmp	r3, #8
 800751c:	d110      	bne.n	8007540 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0220 	bic.w	r2, r2, #32
 800752c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800753c:	605a      	str	r2, [r3, #4]
              break;
 800753e:	e017      	b.n	8007570 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800754e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0220 	orr.w	r2, r2, #32
 800755e:	605a      	str	r2, [r3, #4]
              break;
 8007560:	e006      	b.n	8007570 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800756a:	e001      	b.n	8007570 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800756c:	2302      	movs	r3, #2
 800756e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	50000300 	.word	0x50000300
 8007580:	50000100 	.word	0x50000100

08007584 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007590:	4851      	ldr	r0, [pc, #324]	; (80076d8 <HAL_ADC_Start_DMA+0x154>)
 8007592:	f7ff fba0 	bl	8006cd6 <LL_ADC_GetMultimode>
 8007596:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fc7a 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 808f 	bne.w	80076c8 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_ADC_Start_DMA+0x34>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e08a      	b.n	80076ce <HAL_ADC_Start_DMA+0x14a>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	2b05      	cmp	r3, #5
 80075ca:	d002      	beq.n	80075d2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d173      	bne.n	80076ba <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f001 f9de 	bl	8008994 <ADC_Enable>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d166      	bne.n	80076b0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075ea:	f023 0301 	bic.w	r3, r3, #1
 80075ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a38      	ldr	r2, [pc, #224]	; (80076dc <HAL_ADC_Start_DMA+0x158>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d002      	beq.n	8007606 <HAL_ADC_Start_DMA+0x82>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	e001      	b.n	800760a <HAL_ADC_Start_DMA+0x86>
 8007606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	4293      	cmp	r3, r2
 8007610:	d002      	beq.n	8007618 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d105      	bne.n	8007624 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007634:	f023 0206 	bic.w	r2, r3, #6
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	661a      	str	r2, [r3, #96]	; 0x60
 800763c:	e002      	b.n	8007644 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007648:	4a25      	ldr	r2, [pc, #148]	; (80076e0 <HAL_ADC_Start_DMA+0x15c>)
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <HAL_ADC_Start_DMA+0x160>)
 8007652:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_ADC_Start_DMA+0x164>)
 800765a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	221c      	movs	r2, #28
 8007662:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0210 	orr.w	r2, r2, #16
 800767a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3340      	adds	r3, #64	; 0x40
 8007696:	4619      	mov	r1, r3
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f002 f83c 	bl	8009718 <HAL_DMA_Start_IT>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fbcc 	bl	8006e46 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80076ae:	e00d      	b.n	80076cc <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80076b8:	e008      	b.n	80076cc <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80076c6:	e001      	b.n	80076cc <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
 80076ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	50000300 	.word	0x50000300
 80076dc:	50000100 	.word	0x50000100
 80076e0:	08008b5f 	.word	0x08008b5f
 80076e4:	08008c37 	.word	0x08008c37
 80076e8:	08008c53 	.word	0x08008c53

080076ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_ADC_Stop_DMA+0x16>
 80076fe:	2302      	movs	r3, #2
 8007700:	e051      	b.n	80077a6 <HAL_ADC_Stop_DMA+0xba>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800770a:	2103      	movs	r1, #3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f885 	bl	800881c <ADC_ConversionStop>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d13f      	bne.n	800779c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d10f      	bne.n	800775a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773e:	4618      	mov	r0, r3
 8007740:	f002 f865 	bl	800980e <HAL_DMA_Abort>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0210 	bic.w	r2, r2, #16
 8007768:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f995 	bl	8008aa0 <ADC_Disable>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
 800777a:	e002      	b.n	8007782 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 f98f 	bl	8008aa0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d109      	bne.n	800779c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007790:	f023 0301 	bic.w	r3, r3, #1
 8007794:	f043 0201 	orr.w	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80077d0:	2300      	movs	r3, #0
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80077e4:	4883      	ldr	r0, [pc, #524]	; (80079f4 <HAL_ADC_IRQHandler+0x22c>)
 80077e6:	f7ff fa76 	bl	8006cd6 <LL_ADC_GetMultimode>
 80077ea:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d017      	beq.n	8007826 <HAL_ADC_IRQHandler+0x5e>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d012      	beq.n	8007826 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007810:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fb11 	bl	8008e40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2202      	movs	r2, #2
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <HAL_ADC_IRQHandler+0x72>
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8085 	beq.w	8007950 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d07f      	beq.n	8007950 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d105      	bne.n	8007868 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007860:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff f941 	bl	8006af4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d064      	beq.n	8007942 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a5e      	ldr	r2, [pc, #376]	; (80079f8 <HAL_ADC_IRQHandler+0x230>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d002      	beq.n	8007888 <HAL_ADC_IRQHandler+0xc0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	e001      	b.n	800788c <HAL_ADC_IRQHandler+0xc4>
 8007888:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	4293      	cmp	r3, r2
 8007892:	d008      	beq.n	80078a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2b05      	cmp	r3, #5
 800789e:	d002      	beq.n	80078a6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	2b09      	cmp	r3, #9
 80078a4:	d104      	bne.n	80078b0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	623b      	str	r3, [r7, #32]
 80078ae:	e00d      	b.n	80078cc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a50      	ldr	r2, [pc, #320]	; (80079f8 <HAL_ADC_IRQHandler+0x230>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d002      	beq.n	80078c0 <HAL_ADC_IRQHandler+0xf8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	e001      	b.n	80078c4 <HAL_ADC_IRQHandler+0xfc>
 80078c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078c4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d135      	bne.n	8007942 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d12e      	bne.n	8007942 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff fad4 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11a      	bne.n	800792a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 020c 	bic.w	r2, r2, #12
 8007902:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d112      	bne.n	8007942 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	65da      	str	r2, [r3, #92]	; 0x5c
 8007928:	e00b      	b.n	8007942 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	f043 0210 	orr.w	r2, r3, #16
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793a:	f043 0201 	orr.w	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fc f8ba 	bl	8003abc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	220c      	movs	r2, #12
 800794e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <HAL_ADC_IRQHandler+0x19c>
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	f003 0320 	and.w	r3, r3, #32
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 809e 	beq.w	8007aac <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8098 	beq.w	8007aac <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d105      	bne.n	8007994 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f8ea 	bl	8006b72 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800799e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff f8a5 	bl	8006af4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80079aa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a11      	ldr	r2, [pc, #68]	; (80079f8 <HAL_ADC_IRQHandler+0x230>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d002      	beq.n	80079bc <HAL_ADC_IRQHandler+0x1f4>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	e001      	b.n	80079c0 <HAL_ADC_IRQHandler+0x1f8>
 80079bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d008      	beq.n	80079da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b06      	cmp	r3, #6
 80079d2:	d002      	beq.n	80079da <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b07      	cmp	r3, #7
 80079d8:	d104      	bne.n	80079e4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	623b      	str	r3, [r7, #32]
 80079e2:	e011      	b.n	8007a08 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a03      	ldr	r2, [pc, #12]	; (80079f8 <HAL_ADC_IRQHandler+0x230>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d006      	beq.n	80079fc <HAL_ADC_IRQHandler+0x234>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	e005      	b.n	8007a00 <HAL_ADC_IRQHandler+0x238>
 80079f4:	50000300 	.word	0x50000300
 80079f8:	50000100 	.word	0x50000100
 80079fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a00:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d047      	beq.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <HAL_ADC_IRQHandler+0x260>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d03f      	beq.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d13a      	bne.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a32:	2b40      	cmp	r3, #64	; 0x40
 8007a34:	d133      	bne.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d12e      	bne.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff fa4d 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11a      	bne.n	8007a86 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a5e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d112      	bne.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a7c:	f043 0201 	orr.w	r2, r3, #1
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a84:	e00b      	b.n	8007a9e <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8a:	f043 0210 	orr.w	r2, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a96:	f043 0201 	orr.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 f9a6 	bl	8008df0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2260      	movs	r2, #96	; 0x60
 8007aaa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d011      	beq.n	8007ada <HAL_ADC_IRQHandler+0x312>
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00c      	beq.n	8007ada <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fc f83f 	bl	8003b50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2280      	movs	r2, #128	; 0x80
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d012      	beq.n	8007b0a <HAL_ADC_IRQHandler+0x342>
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f98c 	bl	8008e18 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <HAL_ADC_IRQHandler+0x372>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f97e 	bl	8008e2c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d036      	beq.n	8007bb2 <HAL_ADC_IRQHandler+0x3ea>
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f003 0310 	and.w	r3, r3, #16
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d031      	beq.n	8007bb2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007b56:	2301      	movs	r3, #1
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5a:	e014      	b.n	8007b86 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007b62:	4825      	ldr	r0, [pc, #148]	; (8007bf8 <HAL_ADC_IRQHandler+0x430>)
 8007b64:	f7ff f8c5 	bl	8006cf2 <LL_ADC_GetMultiDMATransfer>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
 8007b72:	e008      	b.n	8007b86 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10e      	bne.n	8007baa <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b9c:	f043 0202 	orr.w	r2, r3, #2
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f833 	bl	8007c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2210      	movs	r2, #16
 8007bb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d018      	beq.n	8007bee <HAL_ADC_IRQHandler+0x426>
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd6:	f043 0208 	orr.w	r2, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007be6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f90b 	bl	8008e04 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007bee:	bf00      	nop
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	50000300 	.word	0x50000300

08007bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b0b6      	sub	sp, #216	; 0xd8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_ADC_ConfigChannel+0x22>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e3c8      	b.n	80083d8 <HAL_ADC_ConfigChannel+0x7b4>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff f91f 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 83ad 	bne.w	80083ba <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	6859      	ldr	r1, [r3, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	f7fe ff54 	bl	8006b1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f90d 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 8007c7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff f92d 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 8007c8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 81d9 	bne.w	800804a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 81d4 	bne.w	800804a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007caa:	d10f      	bne.n	8007ccc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6818      	ldr	r0, [r3, #0]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	f7fe ff6e 	bl	8006b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fe ff02 	bl	8006ace <LL_ADC_SetSamplingTimeCommonConfig>
 8007cca:	e00e      	b.n	8007cea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	6819      	ldr	r1, [r3, #0]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f7fe ff5d 	bl	8006b98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fef2 	bl	8006ace <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	695a      	ldr	r2, [r3, #20]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	08db      	lsrs	r3, r3, #3
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d022      	beq.n	8007d52 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	6919      	ldr	r1, [r3, #16]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d1c:	f7fe fe4c 	bl	80069b8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	6919      	ldr	r1, [r3, #16]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f7fe fe98 	bl	8006a62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <HAL_ADC_ConfigChannel+0x124>
 8007d42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d46:	e000      	b.n	8007d4a <HAL_ADC_ConfigChannel+0x126>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f7fe fea4 	bl	8006a98 <LL_ADC_SetOffsetSaturation>
 8007d50:	e17b      	b.n	800804a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe51 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10a      	bne.n	8007d7e <HAL_ADC_ConfigChannel+0x15a>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fe46 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007d74:	4603      	mov	r3, r0
 8007d76:	0e9b      	lsrs	r3, r3, #26
 8007d78:	f003 021f 	and.w	r2, r3, #31
 8007d7c:	e01e      	b.n	8007dbc <HAL_ADC_ConfigChannel+0x198>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fe3b 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d94:	fa93 f3a3 	rbit	r3, r3
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007dac:	2320      	movs	r3, #32
 8007dae:	e004      	b.n	8007dba <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d105      	bne.n	8007dd4 <HAL_ADC_ConfigChannel+0x1b0>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	0e9b      	lsrs	r3, r3, #26
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	e018      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x1e2>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007de0:	fa93 f3a3 	rbit	r3, r3
 8007de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007df8:	2320      	movs	r3, #32
 8007dfa:	e004      	b.n	8007e06 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e00:	fab3 f383 	clz	r3, r3
 8007e04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d106      	bne.n	8007e18 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe fe0a 	bl	8006a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fdee 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <HAL_ADC_ConfigChannel+0x220>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2101      	movs	r1, #1
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fde3 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	0e9b      	lsrs	r3, r3, #26
 8007e3e:	f003 021f 	and.w	r2, r3, #31
 8007e42:	e01e      	b.n	8007e82 <HAL_ADC_ConfigChannel+0x25e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fdd8 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e5a:	fa93 f3a3 	rbit	r3, r3
 8007e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007e72:	2320      	movs	r3, #32
 8007e74:	e004      	b.n	8007e80 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e7a:	fab3 f383 	clz	r3, r3
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_ADC_ConfigChannel+0x276>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	0e9b      	lsrs	r3, r3, #26
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	e018      	b.n	8007ecc <HAL_ADC_ConfigChannel+0x2a8>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea6:	fa93 f3a3 	rbit	r3, r3
 8007eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007ebe:	2320      	movs	r3, #32
 8007ec0:	e004      	b.n	8007ecc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ec6:	fab3 f383 	clz	r3, r3
 8007eca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d106      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe fda7 	bl	8006a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe fd8b 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <HAL_ADC_ConfigChannel+0x2e6>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fd80 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007f00:	4603      	mov	r3, r0
 8007f02:	0e9b      	lsrs	r3, r3, #26
 8007f04:	f003 021f 	and.w	r2, r3, #31
 8007f08:	e01e      	b.n	8007f48 <HAL_ADC_ConfigChannel+0x324>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fd75 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f20:	fa93 f3a3 	rbit	r3, r3
 8007f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007f38:	2320      	movs	r3, #32
 8007f3a:	e004      	b.n	8007f46 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f40:	fab3 f383 	clz	r3, r3
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <HAL_ADC_ConfigChannel+0x33c>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	0e9b      	lsrs	r3, r3, #26
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	e016      	b.n	8007f8e <HAL_ADC_ConfigChannel+0x36a>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f6c:	fa93 f3a3 	rbit	r3, r3
 8007f70:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007f80:	2320      	movs	r3, #32
 8007f82:	e004      	b.n	8007f8e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f88:	fab3 f383 	clz	r3, r3
 8007f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d106      	bne.n	8007fa0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fd46 	bl	8006a2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2103      	movs	r1, #3
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fd2a 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <HAL_ADC_ConfigChannel+0x3a8>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2103      	movs	r1, #3
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fd1f 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	0e9b      	lsrs	r3, r3, #26
 8007fc6:	f003 021f 	and.w	r2, r3, #31
 8007fca:	e017      	b.n	8007ffc <HAL_ADC_ConfigChannel+0x3d8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2103      	movs	r1, #3
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fd14 	bl	8006a00 <LL_ADC_GetOffsetChannel>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fde:	fa93 f3a3 	rbit	r3, r3
 8007fe2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fe6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8007fee:	2320      	movs	r3, #32
 8007ff0:	e003      	b.n	8007ffa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8007ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff4:	fab3 f383 	clz	r3, r3
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_ADC_ConfigChannel+0x3f0>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	0e9b      	lsrs	r3, r3, #26
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	e011      	b.n	8008038 <HAL_ADC_ConfigChannel+0x414>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800801a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800801c:	fa93 f3a3 	rbit	r3, r3
 8008020:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008024:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800802c:	2320      	movs	r3, #32
 800802e:	e003      	b.n	8008038 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	fab3 f383 	clz	r3, r3
 8008036:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008038:	429a      	cmp	r2, r3
 800803a:	d106      	bne.n	800804a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2200      	movs	r2, #0
 8008042:	2103      	movs	r1, #3
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fcf1 	bl	8006a2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fed3 	bl	8006dfa <LL_ADC_IsEnabled>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 8140 	bne.w	80082dc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6819      	ldr	r1, [r3, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	461a      	mov	r2, r3
 800806a:	f7fe fdc1 	bl	8006bf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	4a8f      	ldr	r2, [pc, #572]	; (80082b0 <HAL_ADC_ConfigChannel+0x68c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	f040 8131 	bne.w	80082dc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <HAL_ADC_ConfigChannel+0x47e>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	0e9b      	lsrs	r3, r3, #26
 8008090:	3301      	adds	r3, #1
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2b09      	cmp	r3, #9
 8008098:	bf94      	ite	ls
 800809a:	2301      	movls	r3, #1
 800809c:	2300      	movhi	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	e019      	b.n	80080d6 <HAL_ADC_ConfigChannel+0x4b2>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080aa:	fa93 f3a3 	rbit	r3, r3
 80080ae:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80080b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80080b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80080ba:	2320      	movs	r3, #32
 80080bc:	e003      	b.n	80080c6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80080be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080c0:	fab3 f383 	clz	r3, r3
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	3301      	adds	r3, #1
 80080c8:	f003 031f 	and.w	r3, r3, #31
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	bf94      	ite	ls
 80080d0:	2301      	movls	r3, #1
 80080d2:	2300      	movhi	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d079      	beq.n	80081ce <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d107      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x4d2>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	0e9b      	lsrs	r3, r3, #26
 80080ec:	3301      	adds	r3, #1
 80080ee:	069b      	lsls	r3, r3, #26
 80080f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080f4:	e015      	b.n	8008122 <HAL_ADC_ConfigChannel+0x4fe>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fe:	fa93 f3a3 	rbit	r3, r3
 8008102:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800810e:	2320      	movs	r3, #32
 8008110:	e003      	b.n	800811a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008114:	fab3 f383 	clz	r3, r3
 8008118:	b2db      	uxtb	r3, r3
 800811a:	3301      	adds	r3, #1
 800811c:	069b      	lsls	r3, r3, #26
 800811e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <HAL_ADC_ConfigChannel+0x51e>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	0e9b      	lsrs	r3, r3, #26
 8008134:	3301      	adds	r3, #1
 8008136:	f003 031f 	and.w	r3, r3, #31
 800813a:	2101      	movs	r1, #1
 800813c:	fa01 f303 	lsl.w	r3, r1, r3
 8008140:	e017      	b.n	8008172 <HAL_ADC_ConfigChannel+0x54e>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800814a:	fa93 f3a3 	rbit	r3, r3
 800814e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800815a:	2320      	movs	r3, #32
 800815c:	e003      	b.n	8008166 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800815e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008160:	fab3 f383 	clz	r3, r3
 8008164:	b2db      	uxtb	r3, r3
 8008166:	3301      	adds	r3, #1
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f303 	lsl.w	r3, r1, r3
 8008172:	ea42 0103 	orr.w	r1, r2, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <HAL_ADC_ConfigChannel+0x574>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	0e9b      	lsrs	r3, r3, #26
 8008188:	3301      	adds	r3, #1
 800818a:	f003 021f 	and.w	r2, r3, #31
 800818e:	4613      	mov	r3, r2
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	4413      	add	r3, r2
 8008194:	051b      	lsls	r3, r3, #20
 8008196:	e018      	b.n	80081ca <HAL_ADC_ConfigChannel+0x5a6>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	fa93 f3a3 	rbit	r3, r3
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80081aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80081b0:	2320      	movs	r3, #32
 80081b2:	e003      	b.n	80081bc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80081b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b6:	fab3 f383 	clz	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	3301      	adds	r3, #1
 80081be:	f003 021f 	and.w	r2, r3, #31
 80081c2:	4613      	mov	r3, r2
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	4413      	add	r3, r2
 80081c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081ca:	430b      	orrs	r3, r1
 80081cc:	e081      	b.n	80082d2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d107      	bne.n	80081ea <HAL_ADC_ConfigChannel+0x5c6>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	0e9b      	lsrs	r3, r3, #26
 80081e0:	3301      	adds	r3, #1
 80081e2:	069b      	lsls	r3, r3, #26
 80081e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081e8:	e015      	b.n	8008216 <HAL_ADC_ConfigChannel+0x5f2>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	fa93 f3a3 	rbit	r3, r3
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8008202:	2320      	movs	r3, #32
 8008204:	e003      	b.n	800820e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	fab3 f383 	clz	r3, r3
 800820c:	b2db      	uxtb	r3, r3
 800820e:	3301      	adds	r3, #1
 8008210:	069b      	lsls	r3, r3, #26
 8008212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x612>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	0e9b      	lsrs	r3, r3, #26
 8008228:	3301      	adds	r3, #1
 800822a:	f003 031f 	and.w	r3, r3, #31
 800822e:	2101      	movs	r1, #1
 8008230:	fa01 f303 	lsl.w	r3, r1, r3
 8008234:	e017      	b.n	8008266 <HAL_ADC_ConfigChannel+0x642>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	fa93 f3a3 	rbit	r3, r3
 8008242:	61fb      	str	r3, [r7, #28]
  return result;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800824e:	2320      	movs	r3, #32
 8008250:	e003      	b.n	800825a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	fab3 f383 	clz	r3, r3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	3301      	adds	r3, #1
 800825c:	f003 031f 	and.w	r3, r3, #31
 8008260:	2101      	movs	r1, #1
 8008262:	fa01 f303 	lsl.w	r3, r1, r3
 8008266:	ea42 0103 	orr.w	r1, r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10d      	bne.n	8008292 <HAL_ADC_ConfigChannel+0x66e>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	0e9b      	lsrs	r3, r3, #26
 800827c:	3301      	adds	r3, #1
 800827e:	f003 021f 	and.w	r2, r3, #31
 8008282:	4613      	mov	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
 8008288:	3b1e      	subs	r3, #30
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008290:	e01e      	b.n	80082d0 <HAL_ADC_ConfigChannel+0x6ac>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	fa93 f3a3 	rbit	r3, r3
 800829e:	613b      	str	r3, [r7, #16]
  return result;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d104      	bne.n	80082b4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80082aa:	2320      	movs	r3, #32
 80082ac:	e006      	b.n	80082bc <HAL_ADC_ConfigChannel+0x698>
 80082ae:	bf00      	nop
 80082b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	fab3 f383 	clz	r3, r3
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	3301      	adds	r3, #1
 80082be:	f003 021f 	and.w	r2, r3, #31
 80082c2:	4613      	mov	r3, r2
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	3b1e      	subs	r3, #30
 80082ca:	051b      	lsls	r3, r3, #20
 80082cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082d6:	4619      	mov	r1, r3
 80082d8:	f7fe fc5e 	bl	8006b98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d071      	beq.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80082e8:	483e      	ldr	r0, [pc, #248]	; (80083e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80082ea:	f7fe fb57 	bl	800699c <LL_ADC_GetCommonPathInternalCh>
 80082ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a3c      	ldr	r2, [pc, #240]	; (80083e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_ADC_ConfigChannel+0x6e2>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a3a      	ldr	r2, [pc, #232]	; (80083ec <HAL_ADC_ConfigChannel+0x7c8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d127      	bne.n	8008356 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800830a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d121      	bne.n	8008356 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800831a:	d157      	bne.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800831c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008324:	4619      	mov	r1, r3
 8008326:	482f      	ldr	r0, [pc, #188]	; (80083e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8008328:	f7fe fb25 	bl	8006976 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800832c:	4b30      	ldr	r3, [pc, #192]	; (80083f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	099b      	lsrs	r3, r3, #6
 8008332:	4a30      	ldr	r2, [pc, #192]	; (80083f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8008334:	fba2 2303 	umull	r2, r3, r2, r3
 8008338:	099b      	lsrs	r3, r3, #6
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	4613      	mov	r3, r2
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008346:	e002      	b.n	800834e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3b01      	subs	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f9      	bne.n	8008348 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008354:	e03a      	b.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a27      	ldr	r2, [pc, #156]	; (80083f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d113      	bne.n	8008388 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a22      	ldr	r2, [pc, #136]	; (80083fc <HAL_ADC_ConfigChannel+0x7d8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d02a      	beq.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800837a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800837e:	4619      	mov	r1, r3
 8008380:	4818      	ldr	r0, [pc, #96]	; (80083e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8008382:	f7fe faf8 	bl	8006976 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008386:	e021      	b.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <HAL_ADC_ConfigChannel+0x7dc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d11c      	bne.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008392:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d116      	bne.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a16      	ldr	r2, [pc, #88]	; (80083fc <HAL_ADC_ConfigChannel+0x7d8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d011      	beq.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083b0:	4619      	mov	r1, r3
 80083b2:	480c      	ldr	r0, [pc, #48]	; (80083e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80083b4:	f7fe fadf 	bl	8006976 <LL_ADC_SetCommonPathInternalCh>
 80083b8:	e008      	b.n	80083cc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80083d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80083d8:	4618      	mov	r0, r3
 80083da:	37d8      	adds	r7, #216	; 0xd8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	80080000 	.word	0x80080000
 80083e4:	50000300 	.word	0x50000300
 80083e8:	c3210000 	.word	0xc3210000
 80083ec:	90c00010 	.word	0x90c00010
 80083f0:	200001d8 	.word	0x200001d8
 80083f4:	053e2d63 	.word	0x053e2d63
 80083f8:	c7520000 	.word	0xc7520000
 80083fc:	50000100 	.word	0x50000100
 8008400:	cb840000 	.word	0xcb840000

08008404 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800841c:	d003      	beq.n	8008426 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008422:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_ADC_AnalogWDGConfig+0x30>
 8008430:	2302      	movs	r3, #2
 8008432:	e1ea      	b.n	800880a <HAL_ADC_AnalogWDGConfig+0x406>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fd28 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 8008446:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fd49 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 8008452:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8175 	bne.w	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	f040 8171 	bne.w	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a90      	ldr	r2, [pc, #576]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	f040 808d 	bne.w	800858a <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008478:	d034      	beq.n	80084e4 <HAL_ADC_AnalogWDGConfig+0xe0>
 800847a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800847e:	d856      	bhi.n	800852e <HAL_ADC_AnalogWDGConfig+0x12a>
 8008480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008484:	d04b      	beq.n	800851e <HAL_ADC_AnalogWDGConfig+0x11a>
 8008486:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800848a:	d850      	bhi.n	800852e <HAL_ADC_AnalogWDGConfig+0x12a>
 800848c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008490:	d01b      	beq.n	80084ca <HAL_ADC_AnalogWDGConfig+0xc6>
 8008492:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008496:	d84a      	bhi.n	800852e <HAL_ADC_AnalogWDGConfig+0x12a>
 8008498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800849c:	d037      	beq.n	800850e <HAL_ADC_AnalogWDGConfig+0x10a>
 800849e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084a2:	d844      	bhi.n	800852e <HAL_ADC_AnalogWDGConfig+0x12a>
 80084a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084a8:	d029      	beq.n	80084fe <HAL_ADC_AnalogWDGConfig+0xfa>
 80084aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084ae:	d13e      	bne.n	800852e <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084bc:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80084c0:	461a      	mov	r2, r3
 80084c2:	497a      	ldr	r1, [pc, #488]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084c4:	f7fe fbb8 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80084c8:	e039      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084d6:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 80084da:	461a      	mov	r2, r3
 80084dc:	4973      	ldr	r1, [pc, #460]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084de:	f7fe fbab 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 80084e2:	e02c      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084f0:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 80084f4:	461a      	mov	r2, r3
 80084f6:	496d      	ldr	r1, [pc, #436]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084f8:	f7fe fb9e 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80084fc:	e01f      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a6b      	ldr	r2, [pc, #428]	; (80086b0 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008504:	4969      	ldr	r1, [pc, #420]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe fb96 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800850c:	e017      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a68      	ldr	r2, [pc, #416]	; (80086b4 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008514:	4965      	ldr	r1, [pc, #404]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe fb8e 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800851c:	e00f      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a65      	ldr	r2, [pc, #404]	; (80086b8 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008524:	4961      	ldr	r1, [pc, #388]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe fb86 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800852c:	e007      	b.n	800853e <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	495d      	ldr	r1, [pc, #372]	; (80086ac <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fb7e 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800853c:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fcd0 	bl	8006f0a <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	7b1b      	ldrb	r3, [r3, #12]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d105      	bne.n	800857e <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fcf0 	bl	8006f5c <LL_ADC_EnableIT_AWD1>
 800857c:	e0e3      	b.n	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fd1a 	bl	8006fbc <LL_ADC_DisableIT_AWD1>
 8008588:	e0dd      	b.n	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008592:	d01d      	beq.n	80085d0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8008594:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8008598:	f200 8092 	bhi.w	80086c0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800859c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085a0:	d07b      	beq.n	800869a <HAL_ADC_AnalogWDGConfig+0x296>
 80085a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085a6:	f200 808b 	bhi.w	80086c0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085ae:	d00f      	beq.n	80085d0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80085b0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085b4:	f200 8084 	bhi.w	80086c0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085bc:	d06d      	beq.n	800869a <HAL_ADC_AnalogWDGConfig+0x296>
 80085be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085c2:	d87d      	bhi.n	80086c0 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085c8:	d067      	beq.n	800869a <HAL_ADC_AnalogWDGConfig+0x296>
 80085ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085ce:	d177      	bne.n	80086c0 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a39      	ldr	r2, [pc, #228]	; (80086bc <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d12f      	bne.n	800863a <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d108      	bne.n	80085f8 <HAL_ADC_AnalogWDGConfig+0x1f4>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	0e9b      	lsrs	r3, r3, #26
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2201      	movs	r2, #1
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	e016      	b.n	8008626 <HAL_ADC_AnalogWDGConfig+0x222>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	fa93 f3a3 	rbit	r3, r3
 8008604:	61bb      	str	r3, [r7, #24]
  return result;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8008610:	2320      	movs	r3, #32
 8008612:	e003      	b.n	800861c <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	fab3 f383 	clz	r3, r3
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 031f 	and.w	r3, r3, #31
 8008620:	2201      	movs	r2, #1
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6812      	ldr	r2, [r2, #0]
 8008632:	430b      	orrs	r3, r1
 8008634:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8008638:	e04b      	b.n	80086d2 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008642:	2b00      	cmp	r3, #0
 8008644:	d108      	bne.n	8008658 <HAL_ADC_AnalogWDGConfig+0x254>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	0e9b      	lsrs	r3, r3, #26
 800864c:	f003 031f 	and.w	r3, r3, #31
 8008650:	2201      	movs	r2, #1
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	e016      	b.n	8008686 <HAL_ADC_AnalogWDGConfig+0x282>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	fa93 f3a3 	rbit	r3, r3
 8008664:	60fb      	str	r3, [r7, #12]
  return result;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8008670:	2320      	movs	r3, #32
 8008672:	e003      	b.n	800867c <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	fab3 f383 	clz	r3, r3
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2201      	movs	r2, #1
 8008682:	fa02 f303 	lsl.w	r3, r2, r3
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	430b      	orrs	r3, r1
 8008694:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8008698:	e01b      	b.n	80086d2 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80086a2:	4a05      	ldr	r2, [pc, #20]	; (80086b8 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80086a4:	4619      	mov	r1, r3
 80086a6:	f7fe fac7 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80086aa:	e012      	b.n	80086d2 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80086ac:	7dc00000 	.word	0x7dc00000
 80086b0:	0087ffff 	.word	0x0087ffff
 80086b4:	0107ffff 	.word	0x0107ffff
 80086b8:	0187ffff 	.word	0x0187ffff
 80086bc:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2200      	movs	r2, #0
 80086ca:	4619      	mov	r1, r3
 80086cc:	f7fe fab4 	bl	8006c38 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80086d0:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a4f      	ldr	r2, [pc, #316]	; (8008814 <HAL_ADC_AnalogWDGConfig+0x410>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d11a      	bne.n	8008712 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fc19 	bl	8006f24 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	7b1b      	ldrb	r3, [r3, #12]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d105      	bne.n	8008706 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fc3c 	bl	8006f7c <LL_ADC_EnableIT_AWD2>
 8008704:	e01f      	b.n	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fc66 	bl	8006fdc <LL_ADC_DisableIT_AWD2>
 8008710:	e019      	b.n	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fc0c 	bl	8006f40 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7b1b      	ldrb	r3, [r3, #12]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d105      	bne.n	800873c <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fc31 	bl	8006f9c <LL_ADC_EnableIT_AWD3>
 800873a:	e004      	b.n	8008746 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fc5b 	bl	8006ffc <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a33      	ldr	r2, [pc, #204]	; (8008818 <HAL_ADC_AnalogWDGConfig+0x414>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d118      	bne.n	8008782 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	08db      	lsrs	r3, r3, #3
 800875c:	f003 0303 	and.w	r3, r3, #3
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	08db      	lsrs	r3, r3, #3
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
 8008780:	e035      	b.n	80087ee <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0318 	and.w	r3, r3, #24
 800878c:	2b18      	cmp	r3, #24
 800878e:	d00f      	beq.n	80087b0 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	08db      	lsrs	r3, r3, #3
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	f1c3 0302 	rsb	r3, r3, #2
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	f003 031e 	and.w	r3, r3, #30
 80087aa:	fa22 f303 	lsr.w	r3, r2, r3
 80087ae:	e002      	b.n	80087b6 <HAL_ADC_AnalogWDGConfig+0x3b2>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f003 0318 	and.w	r3, r3, #24
 80087c2:	2b18      	cmp	r3, #24
 80087c4:	d00f      	beq.n	80087e6 <HAL_ADC_AnalogWDGConfig+0x3e2>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	08db      	lsrs	r3, r3, #3
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	f1c3 0302 	rsb	r3, r3, #2
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	f003 031e 	and.w	r3, r3, #30
 80087e0:	fa22 f303 	lsr.w	r3, r2, r3
 80087e4:	e002      	b.n	80087ec <HAL_ADC_AnalogWDGConfig+0x3e8>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087fa:	f7fe fa4a 	bl	8006c92 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800880a:	4618      	mov	r0, r3
 800880c:	3738      	adds	r7, #56	; 0x38
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	0017ffff 	.word	0x0017ffff
 8008818:	7dc00000 	.word	0x7dc00000

0800881c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f7fe fb2f 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 8008838:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fb50 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 8008844:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 8098 	beq.w	8008984 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d02a      	beq.n	80088b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	7f5b      	ldrb	r3, [r3, #29]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d126      	bne.n	80088b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7f1b      	ldrb	r3, [r3, #28]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d122      	bne.n	80088b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8008872:	2301      	movs	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8008876:	e014      	b.n	80088a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4a45      	ldr	r2, [pc, #276]	; (8008990 <ADC_ConversionStop+0x174>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d90d      	bls.n	800889c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008884:	f043 0210 	orr.w	r2, r3, #16
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008890:	f043 0201 	orr.w	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e074      	b.n	8008986 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3301      	adds	r3, #1
 80088a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d1e3      	bne.n	8008878 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2240      	movs	r2, #64	; 0x40
 80088b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d014      	beq.n	80088e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fae7 	bl	8006e96 <LL_ADC_REG_IsConversionOngoing>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe faa4 	bl	8006e20 <LL_ADC_IsDisableOngoing>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fac3 	bl	8006e6e <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d014      	beq.n	8008918 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe faf6 	bl	8006ee4 <LL_ADC_INJ_IsConversionOngoing>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00c      	beq.n	8008918 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fa8c 	bl	8006e20 <LL_ADC_IsDisableOngoing>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fad2 	bl	8006ebc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d005      	beq.n	800892a <ADC_ConversionStop+0x10e>
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d105      	bne.n	8008930 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008924:	230c      	movs	r3, #12
 8008926:	617b      	str	r3, [r7, #20]
        break;
 8008928:	e005      	b.n	8008936 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800892a:	2308      	movs	r3, #8
 800892c:	617b      	str	r3, [r7, #20]
        break;
 800892e:	e002      	b.n	8008936 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8008930:	2304      	movs	r3, #4
 8008932:	617b      	str	r3, [r7, #20]
        break;
 8008934:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008936:	f7fd ffdd 	bl	80068f4 <HAL_GetTick>
 800893a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800893c:	e01b      	b.n	8008976 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800893e:	f7fd ffd9 	bl	80068f4 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b05      	cmp	r3, #5
 800894a:	d914      	bls.n	8008976 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4013      	ands	r3, r2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895e:	f043 0210 	orr.w	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800896a:	f043 0201 	orr.w	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e007      	b.n	8008986 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689a      	ldr	r2, [r3, #8]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1dc      	bne.n	800893e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	a33fffff 	.word	0xa33fffff

08008994 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800899c:	2300      	movs	r3, #0
 800899e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fa28 	bl	8006dfa <LL_ADC_IsEnabled>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d169      	bne.n	8008a84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <ADC_Enable+0xfc>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c2:	f043 0210 	orr.w	r2, r3, #16
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ce:	f043 0201 	orr.w	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e055      	b.n	8008a86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe f9e3 	bl	8006daa <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80089e4:	482b      	ldr	r0, [pc, #172]	; (8008a94 <ADC_Enable+0x100>)
 80089e6:	f7fd ffd9 	bl	800699c <LL_ADC_GetCommonPathInternalCh>
 80089ea:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80089ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d013      	beq.n	8008a1c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80089f4:	4b28      	ldr	r3, [pc, #160]	; (8008a98 <ADC_Enable+0x104>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	099b      	lsrs	r3, r3, #6
 80089fa:	4a28      	ldr	r2, [pc, #160]	; (8008a9c <ADC_Enable+0x108>)
 80089fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008a00:	099b      	lsrs	r3, r3, #6
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	4613      	mov	r3, r2
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a0e:	e002      	b.n	8008a16 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f9      	bne.n	8008a10 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008a1c:	f7fd ff6a 	bl	80068f4 <HAL_GetTick>
 8008a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a22:	e028      	b.n	8008a76 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe f9e6 	bl	8006dfa <LL_ADC_IsEnabled>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d104      	bne.n	8008a3e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe f9b6 	bl	8006daa <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008a3e:	f7fd ff59 	bl	80068f4 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d914      	bls.n	8008a76 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d00d      	beq.n	8008a76 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5e:	f043 0210 	orr.w	r2, r3, #16
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6a:	f043 0201 	orr.w	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e007      	b.n	8008a86 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d1cf      	bne.n	8008a24 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	8000003f 	.word	0x8000003f
 8008a94:	50000300 	.word	0x50000300
 8008a98:	200001d8 	.word	0x200001d8
 8008a9c:	053e2d63 	.word	0x053e2d63

08008aa0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe f9b7 	bl	8006e20 <LL_ADC_IsDisableOngoing>
 8008ab2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe f99e 	bl	8006dfa <LL_ADC_IsEnabled>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d047      	beq.n	8008b54 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d144      	bne.n	8008b54 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 030d 	and.w	r3, r3, #13
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d10c      	bne.n	8008af2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe f978 	bl	8006dd2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008aea:	f7fd ff03 	bl	80068f4 <HAL_GetTick>
 8008aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008af0:	e029      	b.n	8008b46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af6:	f043 0210 	orr.w	r2, r3, #16
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b02:	f043 0201 	orr.w	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e023      	b.n	8008b56 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008b0e:	f7fd fef1 	bl	80068f4 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d914      	bls.n	8008b46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00d      	beq.n	8008b46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b2e:	f043 0210 	orr.w	r2, r3, #16
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3a:	f043 0201 	orr.w	r2, r3, #1
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e007      	b.n	8008b56 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1dc      	bne.n	8008b0e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d14b      	bne.n	8008c10 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0308 	and.w	r3, r3, #8
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d021      	beq.n	8008bd6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fd ffac 	bl	8006af4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d032      	beq.n	8008c08 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d12b      	bne.n	8008c08 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11f      	bne.n	8008c08 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bcc:	f043 0201 	orr.w	r2, r3, #1
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bd4:	e018      	b.n	8008c08 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d111      	bne.n	8008c08 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c00:	f043 0201 	orr.w	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f7fa ff57 	bl	8003abc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008c0e:	e00e      	b.n	8008c2e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c14:	f003 0310 	and.w	r3, r3, #16
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7fe fff7 	bl	8007c10 <HAL_ADC_ErrorCallback>
}
 8008c22:	e004      	b.n	8008c2e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7fe ffd9 	bl	8007bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c70:	f043 0204 	orr.w	r2, r3, #4
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7fe ffc9 	bl	8007c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <LL_ADC_IsEnabled>:
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d101      	bne.n	8008c9e <LL_ADC_IsEnabled+0x18>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <LL_ADC_IsEnabled+0x1a>
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <LL_ADC_StartCalibration>:
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008cbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	609a      	str	r2, [r3, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <LL_ADC_IsCalibrationOnGoing>:
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf2:	d101      	bne.n	8008cf8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e000      	b.n	8008cfa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <LL_ADC_REG_IsConversionOngoing>:
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d101      	bne.n	8008d1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_ADCEx_Calibration_Start+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e04d      	b.n	8008de4 <HAL_ADCEx_Calibration_Start+0xb8>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff fea5 	bl	8008aa0 <ADC_Disable>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d136      	bne.n	8008dce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d68:	f023 0302 	bic.w	r3, r3, #2
 8008d6c:	f043 0202 	orr.w	r2, r3, #2
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff ff96 	bl	8008cac <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d80:	e014      	b.n	8008dac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	4a18      	ldr	r2, [pc, #96]	; (8008dec <HAL_ADCEx_Calibration_Start+0xc0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d90d      	bls.n	8008dac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d94:	f023 0312 	bic.w	r3, r3, #18
 8008d98:	f043 0210 	orr.w	r2, r3, #16
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e01b      	b.n	8008de4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff ff94 	bl	8008cde <LL_ADC_IsCalibrationOnGoing>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e2      	bne.n	8008d82 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	f043 0201 	orr.w	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8008dcc:	e005      	b.n	8008dda <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd2:	f043 0210 	orr.w	r2, r3, #16
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	0004de01 	.word	0x0004de01

08008df0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008e54:	b590      	push	{r4, r7, lr}
 8008e56:	b0a1      	sub	sp, #132	; 0x84
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e08b      	b.n	8008f8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008e7e:	2300      	movs	r3, #0
 8008e80:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e8a:	d102      	bne.n	8008e92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008e8c:	4b41      	ldr	r3, [pc, #260]	; (8008f94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	e001      	b.n	8008e96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008e92:	2300      	movs	r3, #0
 8008e94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10b      	bne.n	8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea0:	f043 0220 	orr.w	r2, r3, #32
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e06a      	b.n	8008f8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff ff25 	bl	8008d06 <LL_ADC_REG_IsConversionOngoing>
 8008ebc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff ff1f 	bl	8008d06 <LL_ADC_REG_IsConversionOngoing>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d14c      	bne.n	8008f68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d149      	bne.n	8008f68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008ed4:	4b30      	ldr	r3, [pc, #192]	; (8008f98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008ed6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d028      	beq.n	8008f32 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ef2:	035b      	lsls	r3, r3, #13
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008efa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008efc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f00:	f7ff fec1 	bl	8008c86 <LL_ADC_IsEnabled>
 8008f04:	4604      	mov	r4, r0
 8008f06:	4823      	ldr	r0, [pc, #140]	; (8008f94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f08:	f7ff febd 	bl	8008c86 <LL_ADC_IsEnabled>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	4323      	orrs	r3, r4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d133      	bne.n	8008f7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f1c:	f023 030f 	bic.w	r3, r3, #15
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	6811      	ldr	r1, [r2, #0]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	6892      	ldr	r2, [r2, #8]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f30:	e024      	b.n	8008f7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f3e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f42:	f7ff fea0 	bl	8008c86 <LL_ADC_IsEnabled>
 8008f46:	4604      	mov	r4, r0
 8008f48:	4812      	ldr	r0, [pc, #72]	; (8008f94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f4a:	f7ff fe9c 	bl	8008c86 <LL_ADC_IsEnabled>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4323      	orrs	r3, r4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d112      	bne.n	8008f7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f5e:	f023 030f 	bic.w	r3, r3, #15
 8008f62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f66:	e009      	b.n	8008f7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6c:	f043 0220 	orr.w	r2, r3, #32
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008f7a:	e000      	b.n	8008f7e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008f86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3784      	adds	r7, #132	; 0x84
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd90      	pop	{r4, r7, pc}
 8008f92:	bf00      	nop
 8008f94:	50000100 	.word	0x50000100
 8008f98:	50000300 	.word	0x50000300

08008f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fb8:	4013      	ands	r3, r2
 8008fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fce:	4a04      	ldr	r2, [pc, #16]	; (8008fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	60d3      	str	r3, [r2, #12]
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	e000ed00 	.word	0xe000ed00

08008fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <__NVIC_GetPriorityGrouping+0x18>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	f003 0307 	and.w	r3, r3, #7
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	e000ed00 	.word	0xe000ed00

08009000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800900a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	db0b      	blt.n	800902a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	f003 021f 	and.w	r2, r3, #31
 8009018:	4907      	ldr	r1, [pc, #28]	; (8009038 <__NVIC_EnableIRQ+0x38>)
 800901a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	2001      	movs	r0, #1
 8009022:	fa00 f202 	lsl.w	r2, r0, r2
 8009026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	e000e100 	.word	0xe000e100

0800903c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904c:	2b00      	cmp	r3, #0
 800904e:	db0a      	blt.n	8009066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	490c      	ldr	r1, [pc, #48]	; (8009088 <__NVIC_SetPriority+0x4c>)
 8009056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800905a:	0112      	lsls	r2, r2, #4
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	440b      	add	r3, r1
 8009060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009064:	e00a      	b.n	800907c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <__NVIC_SetPriority+0x50>)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	3b04      	subs	r3, #4
 8009074:	0112      	lsls	r2, r2, #4
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	440b      	add	r3, r1
 800907a:	761a      	strb	r2, [r3, #24]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	e000e100 	.word	0xe000e100
 800908c:	e000ed00 	.word	0xe000ed00

08009090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f1c3 0307 	rsb	r3, r3, #7
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	bf28      	it	cs
 80090ae:	2304      	movcs	r3, #4
 80090b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d902      	bls.n	80090c0 <NVIC_EncodePriority+0x30>
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3b03      	subs	r3, #3
 80090be:	e000      	b.n	80090c2 <NVIC_EncodePriority+0x32>
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	43da      	mvns	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	401a      	ands	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090d8:	f04f 31ff 	mov.w	r1, #4294967295
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	fa01 f303 	lsl.w	r3, r1, r3
 80090e2:	43d9      	mvns	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090e8:	4313      	orrs	r3, r2
         );
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3724      	adds	r7, #36	; 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009108:	d301      	bcc.n	800910e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800910a:	2301      	movs	r3, #1
 800910c:	e00f      	b.n	800912e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800910e:	4a0a      	ldr	r2, [pc, #40]	; (8009138 <SysTick_Config+0x40>)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3b01      	subs	r3, #1
 8009114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009116:	210f      	movs	r1, #15
 8009118:	f04f 30ff 	mov.w	r0, #4294967295
 800911c:	f7ff ff8e 	bl	800903c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <SysTick_Config+0x40>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <SysTick_Config+0x40>)
 8009128:	2207      	movs	r2, #7
 800912a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	e000e010 	.word	0xe000e010

0800913c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff29 	bl	8008f9c <__NVIC_SetPriorityGrouping>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	4603      	mov	r3, r0
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009160:	f7ff ff40 	bl	8008fe4 <__NVIC_GetPriorityGrouping>
 8009164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff ff90 	bl	8009090 <NVIC_EncodePriority>
 8009170:	4602      	mov	r2, r0
 8009172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff5f 	bl	800903c <__NVIC_SetPriority>
}
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	4603      	mov	r3, r0
 800918e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff ff33 	bl	8009000 <__NVIC_EnableIRQ>
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff ffa4 	bl	80090f8 <SysTick_Config>
 80091b0:	4603      	mov	r3, r0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e054      	b.n	8009278 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7f5b      	ldrb	r3, [r3, #29]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d105      	bne.n	80091e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7fc fa58 	bl	8005694 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a22      	ldr	r2, [pc, #136]	; (8009280 <HAL_CRC_Init+0xc4>)
 80091f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0218 	bic.w	r2, r2, #24
 8009208:	609a      	str	r2, [r3, #8]
 800920a:	e00c      	b.n	8009226 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6899      	ldr	r1, [r3, #8]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	461a      	mov	r2, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f948 	bl	80094ac <HAL_CRCEx_Polynomial_Set>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e028      	b.n	8009278 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	795b      	ldrb	r3, [r3, #5]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d105      	bne.n	800923a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f04f 32ff 	mov.w	r2, #4294967295
 8009236:	611a      	str	r2, [r3, #16]
 8009238:	e004      	b.n	8009244 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6912      	ldr	r2, [r2, #16]
 8009242:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695a      	ldr	r2, [r3, #20]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699a      	ldr	r2, [r3, #24]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	04c11db7 	.word	0x04c11db7

08009284 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009290:	2300      	movs	r3, #0
 8009292:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2202      	movs	r2, #2
 8009298:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f042 0201 	orr.w	r2, r2, #1
 80092a8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d006      	beq.n	80092c0 <HAL_CRC_Calculate+0x3c>
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d829      	bhi.n	800930a <HAL_CRC_Calculate+0x86>
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d019      	beq.n	80092ee <HAL_CRC_Calculate+0x6a>
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d01e      	beq.n	80092fc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80092be:	e024      	b.n	800930a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e00a      	b.n	80092dc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	3301      	adds	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3f0      	bcc.n	80092c6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]
      break;
 80092ec:	e00e      	b.n	800930c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 f812 	bl	800931c <CRC_Handle_8>
 80092f8:	6138      	str	r0, [r7, #16]
      break;
 80092fa:	e007      	b.n	800930c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f899 	bl	8009438 <CRC_Handle_16>
 8009306:	6138      	str	r0, [r7, #16]
      break;
 8009308:	e000      	b.n	800930c <HAL_CRC_Calculate+0x88>
      break;
 800930a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009312:	693b      	ldr	r3, [r7, #16]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800931c:	b480      	push	{r7}
 800931e:	b089      	sub	sp, #36	; 0x24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
 800932c:	e023      	b.n	8009376 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4413      	add	r3, r2
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	3301      	adds	r3, #1
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	440b      	add	r3, r1
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009348:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3302      	adds	r3, #2
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	440b      	add	r3, r1
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009358:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	3303      	adds	r3, #3
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	440b      	add	r3, r1
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800936c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800936e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	3301      	adds	r3, #1
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	089b      	lsrs	r3, r3, #2
 800937a:	69fa      	ldr	r2, [r7, #28]
 800937c:	429a      	cmp	r2, r3
 800937e:	d3d6      	bcc.n	800932e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f003 0303 	and.w	r3, r3, #3
 8009386:	2b00      	cmp	r3, #0
 8009388:	d04d      	beq.n	8009426 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	2b01      	cmp	r3, #1
 8009392:	d107      	bne.n	80093a4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	4413      	add	r3, r2
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	6812      	ldr	r2, [r2, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d116      	bne.n	80093dc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	4413      	add	r3, r2
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	b21a      	sxth	r2, r3
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	3301      	adds	r3, #1
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	440b      	add	r3, r1
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	b21b      	sxth	r3, r3
 80093ca:	4313      	orrs	r3, r2
 80093cc:	b21b      	sxth	r3, r3
 80093ce:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	8b7a      	ldrh	r2, [r7, #26]
 80093da:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f003 0303 	and.w	r3, r3, #3
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d11f      	bne.n	8009426 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4413      	add	r3, r2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	3301      	adds	r3, #1
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	440b      	add	r3, r1
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	b21b      	sxth	r3, r3
 8009402:	4313      	orrs	r3, r2
 8009404:	b21b      	sxth	r3, r3
 8009406:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	8b7a      	ldrh	r2, [r7, #26]
 8009412:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	3302      	adds	r3, #2
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4413      	add	r3, r2
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	6812      	ldr	r2, [r2, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3724      	adds	r7, #36	; 0x24
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	e013      	b.n	8009472 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	4413      	add	r3, r2
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	041a      	lsls	r2, r3, #16
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	3302      	adds	r3, #2
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	440b      	add	r3, r1
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	3301      	adds	r3, #1
 8009470:	617b      	str	r3, [r7, #20]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d3e6      	bcc.n	800944a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	4413      	add	r3, r2
 8009494:	881a      	ldrh	r2, [r3, #0]
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80094bc:	231f      	movs	r3, #31
 80094be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
 80094ce:	e063      	b.n	8009598 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80094d0:	bf00      	nop
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	613a      	str	r2, [r7, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d009      	beq.n	80094f0 <HAL_CRCEx_Polynomial_Set+0x44>
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0f0      	beq.n	80094d2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b18      	cmp	r3, #24
 80094f4:	d846      	bhi.n	8009584 <HAL_CRCEx_Polynomial_Set+0xd8>
 80094f6:	a201      	add	r2, pc, #4	; (adr r2, 80094fc <HAL_CRCEx_Polynomial_Set+0x50>)
 80094f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fc:	0800958b 	.word	0x0800958b
 8009500:	08009585 	.word	0x08009585
 8009504:	08009585 	.word	0x08009585
 8009508:	08009585 	.word	0x08009585
 800950c:	08009585 	.word	0x08009585
 8009510:	08009585 	.word	0x08009585
 8009514:	08009585 	.word	0x08009585
 8009518:	08009585 	.word	0x08009585
 800951c:	08009579 	.word	0x08009579
 8009520:	08009585 	.word	0x08009585
 8009524:	08009585 	.word	0x08009585
 8009528:	08009585 	.word	0x08009585
 800952c:	08009585 	.word	0x08009585
 8009530:	08009585 	.word	0x08009585
 8009534:	08009585 	.word	0x08009585
 8009538:	08009585 	.word	0x08009585
 800953c:	0800956d 	.word	0x0800956d
 8009540:	08009585 	.word	0x08009585
 8009544:	08009585 	.word	0x08009585
 8009548:	08009585 	.word	0x08009585
 800954c:	08009585 	.word	0x08009585
 8009550:	08009585 	.word	0x08009585
 8009554:	08009585 	.word	0x08009585
 8009558:	08009585 	.word	0x08009585
 800955c:	08009561 	.word	0x08009561
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b06      	cmp	r3, #6
 8009564:	d913      	bls.n	800958e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800956a:	e010      	b.n	800958e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b07      	cmp	r3, #7
 8009570:	d90f      	bls.n	8009592 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009576:	e00c      	b.n	8009592 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b0f      	cmp	r3, #15
 800957c:	d90b      	bls.n	8009596 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009582:	e008      	b.n	8009596 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
        break;
 8009588:	e006      	b.n	8009598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800958a:	bf00      	nop
 800958c:	e004      	b.n	8009598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800958e:	bf00      	nop
 8009590:	e002      	b.n	8009598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009592:	bf00      	nop
 8009594:	e000      	b.n	8009598 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009596:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10d      	bne.n	80095ba <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f023 0118 	bic.w	r1, r3, #24
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e08d      	b.n	80096f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	4b47      	ldr	r3, [pc, #284]	; (8009700 <HAL_DMA_Init+0x138>)
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d80f      	bhi.n	8009606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	461a      	mov	r2, r3
 80095ec:	4b45      	ldr	r3, [pc, #276]	; (8009704 <HAL_DMA_Init+0x13c>)
 80095ee:	4413      	add	r3, r2
 80095f0:	4a45      	ldr	r2, [pc, #276]	; (8009708 <HAL_DMA_Init+0x140>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	009a      	lsls	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a42      	ldr	r2, [pc, #264]	; (800970c <HAL_DMA_Init+0x144>)
 8009602:	641a      	str	r2, [r3, #64]	; 0x40
 8009604:	e00e      	b.n	8009624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	4b40      	ldr	r3, [pc, #256]	; (8009710 <HAL_DMA_Init+0x148>)
 800960e:	4413      	add	r3, r2
 8009610:	4a3d      	ldr	r2, [pc, #244]	; (8009708 <HAL_DMA_Init+0x140>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	009a      	lsls	r2, r3, #2
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a3c      	ldr	r2, [pc, #240]	; (8009714 <HAL_DMA_Init+0x14c>)
 8009622:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800963a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa1e 	bl	8009ab8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009684:	d102      	bne.n	800968c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80096a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d010      	beq.n	80096cc <HAL_DMA_Init+0x104>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d80c      	bhi.n	80096cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa3e 	bl	8009b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096bc:	2200      	movs	r2, #0
 80096be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	e008      	b.n	80096de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	40020407 	.word	0x40020407
 8009704:	bffdfff8 	.word	0xbffdfff8
 8009708:	cccccccd 	.word	0xcccccccd
 800970c:	40020000 	.word	0x40020000
 8009710:	bffdfbf8 	.word	0xbffdfbf8
 8009714:	40020400 	.word	0x40020400

08009718 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_DMA_Start_IT+0x20>
 8009734:	2302      	movs	r3, #2
 8009736:	e066      	b.n	8009806 <HAL_DMA_Start_IT+0xee>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b01      	cmp	r3, #1
 800974a:	d155      	bne.n	80097f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0201 	bic.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f962 	bl	8009a3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	2b00      	cmp	r3, #0
 800977c:	d008      	beq.n	8009790 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f042 020e 	orr.w	r2, r2, #14
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e00f      	b.n	80097b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0204 	bic.w	r2, r2, #4
 800979e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 020a 	orr.w	r2, r2, #10
 80097ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d007      	beq.n	80097e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0201 	orr.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e005      	b.n	8009804 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009800:	2302      	movs	r3, #2
 8009802:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009804:	7dfb      	ldrb	r3, [r7, #23]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800980e:	b480      	push	{r7}
 8009810:	b085      	sub	sp, #20
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d005      	beq.n	8009832 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2204      	movs	r2, #4
 800982a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
 8009830:	e037      	b.n	80098a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 020e 	bic.w	r2, r2, #14
 8009840:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009850:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009866:	f003 021f 	and.w	r2, r3, #31
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	2101      	movs	r1, #1
 8009870:	fa01 f202 	lsl.w	r2, r1, r2
 8009874:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800987e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00c      	beq.n	80098a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009896:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80098a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	2204      	movs	r2, #4
 80098e2:	409a      	lsls	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d026      	beq.n	800993a <HAL_DMA_IRQHandler+0x7a>
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d021      	beq.n	800993a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b00      	cmp	r3, #0
 8009902:	d107      	bne.n	8009914 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0204 	bic.w	r2, r2, #4
 8009912:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009918:	f003 021f 	and.w	r2, r3, #31
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009920:	2104      	movs	r1, #4
 8009922:	fa01 f202 	lsl.w	r2, r1, r2
 8009926:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	2b00      	cmp	r3, #0
 800992e:	d071      	beq.n	8009a14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009938:	e06c      	b.n	8009a14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2202      	movs	r2, #2
 8009944:	409a      	lsls	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4013      	ands	r3, r2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d02e      	beq.n	80099ac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	2b00      	cmp	r3, #0
 8009956:	d029      	beq.n	80099ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10b      	bne.n	800997e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 020a 	bic.w	r2, r2, #10
 8009974:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009982:	f003 021f 	and.w	r2, r3, #31
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998a:	2102      	movs	r1, #2
 800998c:	fa01 f202 	lsl.w	r2, r1, r2
 8009990:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d038      	beq.n	8009a14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80099aa:	e033      	b.n	8009a14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b0:	f003 031f 	and.w	r3, r3, #31
 80099b4:	2208      	movs	r2, #8
 80099b6:	409a      	lsls	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4013      	ands	r3, r2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d02a      	beq.n	8009a16 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d025      	beq.n	8009a16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 020e 	bic.w	r2, r2, #14
 80099d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099de:	f003 021f 	and.w	r2, r3, #31
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	2101      	movs	r1, #1
 80099e8:	fa01 f202 	lsl.w	r2, r1, r2
 80099ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
}
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a2c:	b2db      	uxtb	r3, r3
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a50:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d004      	beq.n	8009a64 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a62:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a68:	f003 021f 	and.w	r2, r3, #31
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	2101      	movs	r1, #1
 8009a72:	fa01 f202 	lsl.w	r2, r1, r2
 8009a76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d108      	bne.n	8009a9a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009a98:	e007      	b.n	8009aaa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	60da      	str	r2, [r3, #12]
}
 8009aaa:	bf00      	nop
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
	...

08009ab8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d802      	bhi.n	8009ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009acc:	4b15      	ldr	r3, [pc, #84]	; (8009b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e001      	b.n	8009ad6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009ad2:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009ad4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	3b08      	subs	r3, #8
 8009ae2:	4a12      	ldr	r2, [pc, #72]	; (8009b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae8:	091b      	lsrs	r3, r3, #4
 8009aea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af0:	089b      	lsrs	r3, r3, #2
 8009af2:	009a      	lsls	r2, r3, #2
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	4413      	add	r3, r2
 8009af8:	461a      	mov	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009b02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f003 031f 	and.w	r3, r3, #31
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	409a      	lsls	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40020407 	.word	0x40020407
 8009b24:	40020800 	.word	0x40020800
 8009b28:	40020820 	.word	0x40020820
 8009b2c:	cccccccd 	.word	0xcccccccd
 8009b30:	40020880 	.word	0x40020880

08009b34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a08      	ldr	r2, [pc, #32]	; (8009b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009b56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	f003 031f 	and.w	r3, r3, #31
 8009b60:	2201      	movs	r2, #1
 8009b62:	409a      	lsls	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009b68:	bf00      	nop
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	1000823f 	.word	0x1000823f
 8009b78:	40020940 	.word	0x40020940

08009b7c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009b8e:	4b2f      	ldr	r3, [pc, #188]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <HAL_FLASH_Program+0x1e>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e053      	b.n	8009c42 <HAL_FLASH_Program+0xc6>
 8009b9a:	4b2c      	ldr	r3, [pc, #176]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ba4:	f000 f892 	bl	8009ccc <FLASH_WaitForLastOperation>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d143      	bne.n	8009c3a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009bb2:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009bb8:	4b25      	ldr	r3, [pc, #148]	; (8009c50 <HAL_FLASH_Program+0xd4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009bc4:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <HAL_FLASH_Program+0xd4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a21      	ldr	r2, [pc, #132]	; (8009c50 <HAL_FLASH_Program+0xd4>)
 8009bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bce:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009bd0:	4b1e      	ldr	r3, [pc, #120]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	771a      	strb	r2, [r3, #28]
 8009bd6:	e002      	b.n	8009bde <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009bd8:	4b1c      	ldr	r3, [pc, #112]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d107      	bne.n	8009bf4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f000 f8c3 	bl	8009d74 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	e010      	b.n	8009c16 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d002      	beq.n	8009c00 <HAL_FLASH_Program+0x84>
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d10a      	bne.n	8009c16 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	4619      	mov	r1, r3
 8009c04:	68b8      	ldr	r0, [r7, #8]
 8009c06:	f000 f8db 	bl	8009dc0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d102      	bne.n	8009c16 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009c10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c14:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c1a:	f000 f857 	bl	8009ccc <FLASH_WaitForLastOperation>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d006      	beq.n	8009c36 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <HAL_FLASH_Program+0xd4>)
 8009c2a:	695a      	ldr	r2, [r3, #20]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	43db      	mvns	r3, r3
 8009c30:	4907      	ldr	r1, [pc, #28]	; (8009c50 <HAL_FLASH_Program+0xd4>)
 8009c32:	4013      	ands	r3, r2
 8009c34:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009c36:	f000 f9d3 	bl	8009fe0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009c3a:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <HAL_FLASH_Program+0xd0>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	200001f4 	.word	0x200001f4
 8009c50:	40022000 	.word	0x40022000

08009c54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <HAL_FLASH_Unlock+0x38>)
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	da0b      	bge.n	8009c7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <HAL_FLASH_Unlock+0x38>)
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <HAL_FLASH_Unlock+0x3c>)
 8009c6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <HAL_FLASH_Unlock+0x38>)
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <HAL_FLASH_Unlock+0x40>)
 8009c70:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009c72:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <HAL_FLASH_Unlock+0x38>)
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da01      	bge.n	8009c7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	40022000 	.word	0x40022000
 8009c90:	45670123 	.word	0x45670123
 8009c94:	cdef89ab 	.word	0xcdef89ab

08009c98 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <HAL_FLASH_Lock+0x30>)
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	4a08      	ldr	r2, [pc, #32]	; (8009cc8 <HAL_FLASH_Lock+0x30>)
 8009ca8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cac:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_FLASH_Lock+0x30>)
 8009cb0:	695b      	ldr	r3, [r3, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da01      	bge.n	8009cba <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009cba:	79fb      	ldrb	r3, [r7, #7]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40022000 	.word	0x40022000

08009ccc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009cd4:	f7fc fe0e 	bl	80068f4 <HAL_GetTick>
 8009cd8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009cda:	e009      	b.n	8009cf0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009cdc:	f7fc fe0a 	bl	80068f4 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d201      	bcs.n	8009cf0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e038      	b.n	8009d62 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009cf0:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfc:	d0ee      	beq.n	8009cdc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009cfe:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d00:	691a      	ldr	r2, [r3, #16]
 8009d02:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009d06:	4013      	ands	r3, r2
 8009d08:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d01e      	beq.n	8009d4e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009d10:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <FLASH_WaitForLastOperation+0xa4>)
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <FLASH_WaitForLastOperation+0xa4>)
 8009d1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d007      	beq.n	8009d36 <FLASH_WaitForLastOperation+0x6a>
 8009d26:	4b11      	ldr	r3, [pc, #68]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d30:	490e      	ldr	r1, [pc, #56]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	618b      	str	r3, [r1, #24]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d004      	beq.n	8009d4a <FLASH_WaitForLastOperation+0x7e>
 8009d40:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d48:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e009      	b.n	8009d62 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009d4e:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d102      	bne.n	8009d60 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009d5a:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <FLASH_WaitForLastOperation+0xa0>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	40022000 	.word	0x40022000
 8009d70:	200001f4 	.word	0x200001f4

08009d74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <FLASH_Program_DoubleWord+0x48>)
 8009d82:	695b      	ldr	r3, [r3, #20]
 8009d84:	4a0d      	ldr	r2, [pc, #52]	; (8009dbc <FLASH_Program_DoubleWord+0x48>)
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009d92:	f3bf 8f6f 	isb	sy
}
 8009d96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	000a      	movs	r2, r1
 8009da6:	2300      	movs	r3, #0
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	3104      	adds	r1, #4
 8009dac:	4613      	mov	r3, r2
 8009dae:	600b      	str	r3, [r1, #0]
}
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	40022000 	.word	0x40022000

08009dc0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b089      	sub	sp, #36	; 0x24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009dca:	2340      	movs	r3, #64	; 0x40
 8009dcc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <FLASH_Program_Fast+0x68>)
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	4a13      	ldr	r2, [pc, #76]	; (8009e28 <FLASH_Program_Fast+0x68>)
 8009ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de2:	f3ef 8310 	mrs	r3, PRIMASK
 8009de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009de8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dec:	b672      	cpsid	i
}
 8009dee:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	3304      	adds	r3, #4
 8009e02:	617b      	str	r3, [r7, #20]
    row_index--;
 8009e04:	7ffb      	ldrb	r3, [r7, #31]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009e0a:	7ffb      	ldrb	r3, [r7, #31]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1ef      	bne.n	8009df0 <FLASH_Program_Fast+0x30>
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f383 8810 	msr	PRIMASK, r3
}
 8009e1a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009e1c:	bf00      	nop
 8009e1e:	3724      	adds	r7, #36	; 0x24
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	40022000 	.word	0x40022000

08009e2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009e36:	4b47      	ldr	r3, [pc, #284]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_FLASHEx_Erase+0x16>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e083      	b.n	8009f4a <HAL_FLASHEx_Erase+0x11e>
 8009e42:	4b44      	ldr	r3, [pc, #272]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e4c:	f7ff ff3e 	bl	8009ccc <FLASH_WaitForLastOperation>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d173      	bne.n	8009f42 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009e5a:	4b3e      	ldr	r3, [pc, #248]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009e60:	4b3d      	ldr	r3, [pc, #244]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d013      	beq.n	8009e94 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009e6c:	4b3a      	ldr	r3, [pc, #232]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d009      	beq.n	8009e8c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009e78:	4b37      	ldr	r3, [pc, #220]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a36      	ldr	r2, [pc, #216]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e82:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009e84:	4b33      	ldr	r3, [pc, #204]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009e86:	2203      	movs	r2, #3
 8009e88:	771a      	strb	r2, [r3, #28]
 8009e8a:	e016      	b.n	8009eba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009e8c:	4b31      	ldr	r3, [pc, #196]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	771a      	strb	r2, [r3, #28]
 8009e92:	e012      	b.n	8009eba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009e94:	4b30      	ldr	r3, [pc, #192]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009ea0:	4b2d      	ldr	r3, [pc, #180]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a2c      	ldr	r2, [pc, #176]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eaa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009eac:	4b29      	ldr	r3, [pc, #164]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009eae:	2202      	movs	r2, #2
 8009eb0:	771a      	strb	r2, [r3, #28]
 8009eb2:	e002      	b.n	8009eba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009eb4:	4b27      	ldr	r3, [pc, #156]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d111      	bne.n	8009ee6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f848 	bl	8009f5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009ed0:	f7ff fefc 	bl	8009ccc <FLASH_WaitForLastOperation>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009ed8:	4b1f      	ldr	r3, [pc, #124]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	4a1e      	ldr	r2, [pc, #120]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009ede:	f023 0304 	bic.w	r3, r3, #4
 8009ee2:	6153      	str	r3, [r2, #20]
 8009ee4:	e02b      	b.n	8009f3e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8009eec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	60bb      	str	r3, [r7, #8]
 8009ef4:	e01b      	b.n	8009f2e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4619      	mov	r1, r3
 8009efc:	68b8      	ldr	r0, [r7, #8]
 8009efe:	f000 f84b 	bl	8009f98 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f06:	f7ff fee1 	bl	8009ccc <FLASH_WaitForLastOperation>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009f0e:	4b12      	ldr	r3, [pc, #72]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <HAL_FLASHEx_Erase+0x12c>)
 8009f14:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009f18:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	601a      	str	r2, [r3, #0]
          break;
 8009f26:	e00a      	b.n	8009f3e <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d3db      	bcc.n	8009ef6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009f3e:	f000 f84f 	bl	8009fe0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f42:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <HAL_FLASHEx_Erase+0x128>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]

  return status;
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200001f4 	.word	0x200001f4
 8009f58:	40022000 	.word	0x40022000

08009f5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d005      	beq.n	8009f7a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009f6e:	4b09      	ldr	r3, [pc, #36]	; (8009f94 <FLASH_MassErase+0x38>)
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	4a08      	ldr	r2, [pc, #32]	; (8009f94 <FLASH_MassErase+0x38>)
 8009f74:	f043 0304 	orr.w	r3, r3, #4
 8009f78:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009f7a:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <FLASH_MassErase+0x38>)
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	4a05      	ldr	r2, [pc, #20]	; (8009f94 <FLASH_MassErase+0x38>)
 8009f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f84:	6153      	str	r3, [r2, #20]
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	40022000 	.word	0x40022000

08009f98 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009fb2:	490a      	ldr	r1, [pc, #40]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	4a04      	ldr	r2, [pc, #16]	; (8009fdc <FLASH_PageErase+0x44>)
 8009fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fce:	6153      	str	r3, [r2, #20]
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	40022000 	.word	0x40022000

08009fe0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8009fe6:	4b21      	ldr	r3, [pc, #132]	; (800a06c <FLASH_FlushCaches+0x8c>)
 8009fe8:	7f1b      	ldrb	r3, [r3, #28]
 8009fea:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d002      	beq.n	8009ff8 <FLASH_FlushCaches+0x18>
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d117      	bne.n	800a028 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009ff8:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <FLASH_FlushCaches+0x90>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1c      	ldr	r2, [pc, #112]	; (800a070 <FLASH_FlushCaches+0x90>)
 8009ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a002:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a004:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a19      	ldr	r2, [pc, #100]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a00a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	4b17      	ldr	r3, [pc, #92]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a16      	ldr	r2, [pc, #88]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a01a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a01c:	4b14      	ldr	r3, [pc, #80]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a13      	ldr	r2, [pc, #76]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a026:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d002      	beq.n	800a034 <FLASH_FlushCaches+0x54>
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d111      	bne.n	800a058 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a034:	4b0e      	ldr	r3, [pc, #56]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a0d      	ldr	r2, [pc, #52]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a03a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a0a      	ldr	r2, [pc, #40]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a04a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a07      	ldr	r2, [pc, #28]	; (800a070 <FLASH_FlushCaches+0x90>)
 800a052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a056:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a058:	4b04      	ldr	r3, [pc, #16]	; (800a06c <FLASH_FlushCaches+0x8c>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	771a      	strb	r2, [r3, #28]
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	200001f4 	.word	0x200001f4
 800a070:	40022000 	.word	0x40022000

0800a074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a082:	e15a      	b.n	800a33a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	2101      	movs	r1, #1
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	fa01 f303 	lsl.w	r3, r1, r3
 800a090:	4013      	ands	r3, r2
 800a092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 814c 	beq.w	800a334 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d005      	beq.n	800a0b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d130      	bne.n	800a116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	2203      	movs	r2, #3
 800a0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c4:	43db      	mvns	r3, r3
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f2:	43db      	mvns	r3, r3
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	091b      	lsrs	r3, r3, #4
 800a100:	f003 0201 	and.w	r2, r3, #1
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	fa02 f303 	lsl.w	r3, r2, r3
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4313      	orrs	r3, r2
 800a10e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f003 0303 	and.w	r3, r3, #3
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d017      	beq.n	800a152 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	2203      	movs	r2, #3
 800a12e:	fa02 f303 	lsl.w	r3, r2, r3
 800a132:	43db      	mvns	r3, r3
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4013      	ands	r3, r2
 800a138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4313      	orrs	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d123      	bne.n	800a1a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	08da      	lsrs	r2, r3, #3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3208      	adds	r2, #8
 800a166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	220f      	movs	r2, #15
 800a176:	fa02 f303 	lsl.w	r3, r2, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	4013      	ands	r3, r2
 800a180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	691a      	ldr	r2, [r3, #16]
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f003 0307 	and.w	r3, r3, #7
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	fa02 f303 	lsl.w	r3, r2, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	4313      	orrs	r3, r2
 800a196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	08da      	lsrs	r2, r3, #3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3208      	adds	r2, #8
 800a1a0:	6939      	ldr	r1, [r7, #16]
 800a1a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	005b      	lsls	r3, r3, #1
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43db      	mvns	r3, r3
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f003 0203 	and.w	r2, r3, #3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	005b      	lsls	r3, r3, #1
 800a1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 80a6 	beq.w	800a334 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1e8:	4b5b      	ldr	r3, [pc, #364]	; (800a358 <HAL_GPIO_Init+0x2e4>)
 800a1ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ec:	4a5a      	ldr	r2, [pc, #360]	; (800a358 <HAL_GPIO_Init+0x2e4>)
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	6613      	str	r3, [r2, #96]	; 0x60
 800a1f4:	4b58      	ldr	r3, [pc, #352]	; (800a358 <HAL_GPIO_Init+0x2e4>)
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	60bb      	str	r3, [r7, #8]
 800a1fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a200:	4a56      	ldr	r2, [pc, #344]	; (800a35c <HAL_GPIO_Init+0x2e8>)
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	089b      	lsrs	r3, r3, #2
 800a206:	3302      	adds	r3, #2
 800a208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a20c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f003 0303 	and.w	r3, r3, #3
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	220f      	movs	r2, #15
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	43db      	mvns	r3, r3
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	4013      	ands	r3, r2
 800a222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a22a:	d01f      	beq.n	800a26c <HAL_GPIO_Init+0x1f8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a4c      	ldr	r2, [pc, #304]	; (800a360 <HAL_GPIO_Init+0x2ec>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d019      	beq.n	800a268 <HAL_GPIO_Init+0x1f4>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a4b      	ldr	r2, [pc, #300]	; (800a364 <HAL_GPIO_Init+0x2f0>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d013      	beq.n	800a264 <HAL_GPIO_Init+0x1f0>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a4a      	ldr	r2, [pc, #296]	; (800a368 <HAL_GPIO_Init+0x2f4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00d      	beq.n	800a260 <HAL_GPIO_Init+0x1ec>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a49      	ldr	r2, [pc, #292]	; (800a36c <HAL_GPIO_Init+0x2f8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d007      	beq.n	800a25c <HAL_GPIO_Init+0x1e8>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a48      	ldr	r2, [pc, #288]	; (800a370 <HAL_GPIO_Init+0x2fc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d101      	bne.n	800a258 <HAL_GPIO_Init+0x1e4>
 800a254:	2305      	movs	r3, #5
 800a256:	e00a      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a258:	2306      	movs	r3, #6
 800a25a:	e008      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a25c:	2304      	movs	r3, #4
 800a25e:	e006      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a260:	2303      	movs	r3, #3
 800a262:	e004      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a264:	2302      	movs	r3, #2
 800a266:	e002      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <HAL_GPIO_Init+0x1fa>
 800a26c:	2300      	movs	r3, #0
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	f002 0203 	and.w	r2, r2, #3
 800a274:	0092      	lsls	r2, r2, #2
 800a276:	4093      	lsls	r3, r2
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a27e:	4937      	ldr	r1, [pc, #220]	; (800a35c <HAL_GPIO_Init+0x2e8>)
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	089b      	lsrs	r3, r3, #2
 800a284:	3302      	adds	r3, #2
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a28c:	4b39      	ldr	r3, [pc, #228]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	43db      	mvns	r3, r3
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4013      	ands	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a2b0:	4a30      	ldr	r2, [pc, #192]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a2b6:	4b2f      	ldr	r3, [pc, #188]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	43db      	mvns	r3, r3
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a2da:	4a26      	ldr	r2, [pc, #152]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a2e0:	4b24      	ldr	r3, [pc, #144]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a304:	4a1b      	ldr	r2, [pc, #108]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a30a:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	43db      	mvns	r3, r3
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4013      	ands	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a32e:	4a11      	ldr	r2, [pc, #68]	; (800a374 <HAL_GPIO_Init+0x300>)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	3301      	adds	r3, #1
 800a338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	f47f ae9d 	bne.w	800a084 <HAL_GPIO_Init+0x10>
  }
}
 800a34a:	bf00      	nop
 800a34c:	bf00      	nop
 800a34e:	371c      	adds	r7, #28
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	40021000 	.word	0x40021000
 800a35c:	40010000 	.word	0x40010000
 800a360:	48000400 	.word	0x48000400
 800a364:	48000800 	.word	0x48000800
 800a368:	48000c00 	.word	0x48000c00
 800a36c:	48001000 	.word	0x48001000
 800a370:	48001400 	.word	0x48001400
 800a374:	40010400 	.word	0x40010400

0800a378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	691a      	ldr	r2, [r3, #16]
 800a388:	887b      	ldrh	r3, [r7, #2]
 800a38a:	4013      	ands	r3, r2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a390:	2301      	movs	r3, #1
 800a392:	73fb      	strb	r3, [r7, #15]
 800a394:	e001      	b.n	800a39a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	807b      	strh	r3, [r7, #2]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3b8:	787b      	ldrb	r3, [r7, #1]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3be:	887a      	ldrh	r2, [r7, #2]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3c4:	e002      	b.n	800a3cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3c6:	887a      	ldrh	r2, [r7, #2]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	88fb      	ldrh	r3, [r7, #6]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d006      	beq.n	800a3fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a3ee:	4a05      	ldr	r2, [pc, #20]	; (800a404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a3f0:	88fb      	ldrh	r3, [r7, #6]
 800a3f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a3f4:	88fb      	ldrh	r3, [r7, #6]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7f9 fa7c 	bl	80038f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40010400 	.word	0x40010400

0800a408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e08d      	b.n	800a536 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7fb f950 	bl	80056d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2224      	movs	r2, #36	; 0x24
 800a438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f022 0201 	bic.w	r2, r2, #1
 800a44a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d107      	bne.n	800a482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689a      	ldr	r2, [r3, #8]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a47e:	609a      	str	r2, [r3, #8]
 800a480:	e006      	b.n	800a490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a48e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d108      	bne.n	800a4aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4a6:	605a      	str	r2, [r3, #4]
 800a4a8:	e007      	b.n	800a4ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6812      	ldr	r2, [r2, #0]
 800a4c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68da      	ldr	r2, [r3, #12]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a4dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691a      	ldr	r2, [r3, #16]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69d9      	ldr	r1, [r3, #28]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1a      	ldr	r2, [r3, #32]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0201 	orr.w	r2, r2, #1
 800a516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b20      	cmp	r3, #32
 800a552:	d138      	bne.n	800a5c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a55e:	2302      	movs	r3, #2
 800a560:	e032      	b.n	800a5c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2224      	movs	r2, #36	; 0x24
 800a56e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a590:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	6819      	ldr	r1, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	430a      	orrs	r2, r1
 800a5a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0201 	orr.w	r2, r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	e000      	b.n	800a5c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a5c6:	2302      	movs	r3, #2
  }
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d139      	bne.n	800a65e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e033      	b.n	800a660 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2224      	movs	r2, #36	; 0x24
 800a604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0201 	bic.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a626:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	021b      	lsls	r3, r3, #8
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f042 0201 	orr.w	r2, r2, #1
 800a648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2220      	movs	r2, #32
 800a64e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a65e:	2302      	movs	r3, #2
  }
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d141      	bne.n	800a6fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a67a:	4b4b      	ldr	r3, [pc, #300]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a686:	d131      	bne.n	800a6ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a688:	4b47      	ldr	r3, [pc, #284]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a68e:	4a46      	ldr	r2, [pc, #280]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a698:	4b43      	ldr	r3, [pc, #268]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a6a0:	4a41      	ldr	r2, [pc, #260]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a6a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a6a8:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2232      	movs	r2, #50	; 0x32
 800a6ae:	fb02 f303 	mul.w	r3, r2, r3
 800a6b2:	4a3f      	ldr	r2, [pc, #252]	; (800a7b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b8:	0c9b      	lsrs	r3, r3, #18
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6be:	e002      	b.n	800a6c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a6c6:	4b38      	ldr	r3, [pc, #224]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6d2:	d102      	bne.n	800a6da <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1f2      	bne.n	800a6c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a6da:	4b33      	ldr	r3, [pc, #204]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6e6:	d158      	bne.n	800a79a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e057      	b.n	800a79c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a6ec:	4b2e      	ldr	r3, [pc, #184]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f2:	4a2d      	ldr	r2, [pc, #180]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a6f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a6fc:	e04d      	b.n	800a79a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a704:	d141      	bne.n	800a78a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a706:	4b28      	ldr	r3, [pc, #160]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a712:	d131      	bne.n	800a778 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a714:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a71a:	4a23      	ldr	r2, [pc, #140]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a724:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a72c:	4a1e      	ldr	r2, [pc, #120]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a72e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a732:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a734:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2232      	movs	r2, #50	; 0x32
 800a73a:	fb02 f303 	mul.w	r3, r2, r3
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a740:	fba2 2303 	umull	r2, r3, r2, r3
 800a744:	0c9b      	lsrs	r3, r3, #18
 800a746:	3301      	adds	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a74a:	e002      	b.n	800a752 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3b01      	subs	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a75a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a75e:	d102      	bne.n	800a766 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1f2      	bne.n	800a74c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a766:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a772:	d112      	bne.n	800a79a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e011      	b.n	800a79c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a778:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a77e:	4a0a      	ldr	r2, [pc, #40]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a784:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a788:	e007      	b.n	800a79a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a78a:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a792:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a798:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr
 800a7a8:	40007000 	.word	0x40007000
 800a7ac:	200001d8 	.word	0x200001d8
 800a7b0:	431bde83 	.word	0x431bde83

0800a7b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a7b8:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	4a04      	ldr	r2, [pc, #16]	; (800a7d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a7be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7c2:	6093      	str	r3, [r2, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	40007000 	.word	0x40007000

0800a7d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e2fe      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d075      	beq.n	800a8de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7f2:	4b97      	ldr	r3, [pc, #604]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f003 030c 	and.w	r3, r3, #12
 800a7fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7fc:	4b94      	ldr	r3, [pc, #592]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f003 0303 	and.w	r3, r3, #3
 800a804:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	2b0c      	cmp	r3, #12
 800a80a:	d102      	bne.n	800a812 <HAL_RCC_OscConfig+0x3e>
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d002      	beq.n	800a818 <HAL_RCC_OscConfig+0x44>
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2b08      	cmp	r3, #8
 800a816:	d10b      	bne.n	800a830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a818:	4b8d      	ldr	r3, [pc, #564]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d05b      	beq.n	800a8dc <HAL_RCC_OscConfig+0x108>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d157      	bne.n	800a8dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e2d9      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a838:	d106      	bne.n	800a848 <HAL_RCC_OscConfig+0x74>
 800a83a:	4b85      	ldr	r3, [pc, #532]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a84      	ldr	r2, [pc, #528]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	e01d      	b.n	800a884 <HAL_RCC_OscConfig+0xb0>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a850:	d10c      	bne.n	800a86c <HAL_RCC_OscConfig+0x98>
 800a852:	4b7f      	ldr	r3, [pc, #508]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a7e      	ldr	r2, [pc, #504]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a85c:	6013      	str	r3, [r2, #0]
 800a85e:	4b7c      	ldr	r3, [pc, #496]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a7b      	ldr	r2, [pc, #492]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	e00b      	b.n	800a884 <HAL_RCC_OscConfig+0xb0>
 800a86c:	4b78      	ldr	r3, [pc, #480]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a77      	ldr	r2, [pc, #476]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	4b75      	ldr	r3, [pc, #468]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a74      	ldr	r2, [pc, #464]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a87e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d013      	beq.n	800a8b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88c:	f7fc f832 	bl	80068f4 <HAL_GetTick>
 800a890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a892:	e008      	b.n	800a8a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a894:	f7fc f82e 	bl	80068f4 <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	2b64      	cmp	r3, #100	; 0x64
 800a8a0:	d901      	bls.n	800a8a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e29e      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8a6:	4b6a      	ldr	r3, [pc, #424]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d0f0      	beq.n	800a894 <HAL_RCC_OscConfig+0xc0>
 800a8b2:	e014      	b.n	800a8de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b4:	f7fc f81e 	bl	80068f4 <HAL_GetTick>
 800a8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a8ba:	e008      	b.n	800a8ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8bc:	f7fc f81a 	bl	80068f4 <HAL_GetTick>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	2b64      	cmp	r3, #100	; 0x64
 800a8c8:	d901      	bls.n	800a8ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	e28a      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a8ce:	4b60      	ldr	r3, [pc, #384]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f0      	bne.n	800a8bc <HAL_RCC_OscConfig+0xe8>
 800a8da:	e000      	b.n	800a8de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d075      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ea:	4b59      	ldr	r3, [pc, #356]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	f003 030c 	and.w	r3, r3, #12
 800a8f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8f4:	4b56      	ldr	r3, [pc, #344]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f003 0303 	and.w	r3, r3, #3
 800a8fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b0c      	cmp	r3, #12
 800a902:	d102      	bne.n	800a90a <HAL_RCC_OscConfig+0x136>
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2b02      	cmp	r3, #2
 800a908:	d002      	beq.n	800a910 <HAL_RCC_OscConfig+0x13c>
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d11f      	bne.n	800a950 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a910:	4b4f      	ldr	r3, [pc, #316]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d005      	beq.n	800a928 <HAL_RCC_OscConfig+0x154>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e25d      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a928:	4b49      	ldr	r3, [pc, #292]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	061b      	lsls	r3, r3, #24
 800a936:	4946      	ldr	r1, [pc, #280]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a93c:	4b45      	ldr	r3, [pc, #276]	; (800aa54 <HAL_RCC_OscConfig+0x280>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4618      	mov	r0, r3
 800a942:	f7fb ff8b 	bl	800685c <HAL_InitTick>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d043      	beq.n	800a9d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e249      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d023      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a958:	4b3d      	ldr	r3, [pc, #244]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a3c      	ldr	r2, [pc, #240]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a95e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a964:	f7fb ffc6 	bl	80068f4 <HAL_GetTick>
 800a968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a96a:	e008      	b.n	800a97e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a96c:	f7fb ffc2 	bl	80068f4 <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d901      	bls.n	800a97e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e232      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a97e:	4b34      	ldr	r3, [pc, #208]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a986:	2b00      	cmp	r3, #0
 800a988:	d0f0      	beq.n	800a96c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a98a:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	061b      	lsls	r3, r3, #24
 800a998:	492d      	ldr	r1, [pc, #180]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	604b      	str	r3, [r1, #4]
 800a99e:	e01a      	b.n	800a9d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9a0:	4b2b      	ldr	r3, [pc, #172]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a2a      	ldr	r2, [pc, #168]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a9a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ac:	f7fb ffa2 	bl	80068f4 <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9b4:	f7fb ff9e 	bl	80068f4 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e20e      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a9c6:	4b22      	ldr	r3, [pc, #136]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1f0      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x1e0>
 800a9d2:	e000      	b.n	800a9d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0308 	and.w	r3, r3, #8
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d041      	beq.n	800aa66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d01c      	beq.n	800aa24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9ea:	4b19      	ldr	r3, [pc, #100]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9f0:	4a17      	ldr	r2, [pc, #92]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9fa:	f7fb ff7b 	bl	80068f4 <HAL_GetTick>
 800a9fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa00:	e008      	b.n	800aa14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa02:	f7fb ff77 	bl	80068f4 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	d901      	bls.n	800aa14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e1e7      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa14:	4b0e      	ldr	r3, [pc, #56]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800aa16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0ef      	beq.n	800aa02 <HAL_RCC_OscConfig+0x22e>
 800aa22:	e020      	b.n	800aa66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800aa26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa2a:	4a09      	ldr	r2, [pc, #36]	; (800aa50 <HAL_RCC_OscConfig+0x27c>)
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa34:	f7fb ff5e 	bl	80068f4 <HAL_GetTick>
 800aa38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa3a:	e00d      	b.n	800aa58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa3c:	f7fb ff5a 	bl	80068f4 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d906      	bls.n	800aa58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e1ca      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
 800aa4e:	bf00      	nop
 800aa50:	40021000 	.word	0x40021000
 800aa54:	200001ec 	.word	0x200001ec
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa58:	4b8c      	ldr	r3, [pc, #560]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aa5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1ea      	bne.n	800aa3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 80a6 	beq.w	800abc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa74:	2300      	movs	r3, #0
 800aa76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aa78:	4b84      	ldr	r3, [pc, #528]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aa7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_RCC_OscConfig+0x2b4>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e000      	b.n	800aa8a <HAL_RCC_OscConfig+0x2b6>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00d      	beq.n	800aaaa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa8e:	4b7f      	ldr	r3, [pc, #508]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aa90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa92:	4a7e      	ldr	r2, [pc, #504]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aa94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa98:	6593      	str	r3, [r2, #88]	; 0x58
 800aa9a:	4b7c      	ldr	r3, [pc, #496]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aa9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaaa:	4b79      	ldr	r3, [pc, #484]	; (800ac90 <HAL_RCC_OscConfig+0x4bc>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d118      	bne.n	800aae8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aab6:	4b76      	ldr	r3, [pc, #472]	; (800ac90 <HAL_RCC_OscConfig+0x4bc>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a75      	ldr	r2, [pc, #468]	; (800ac90 <HAL_RCC_OscConfig+0x4bc>)
 800aabc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aac2:	f7fb ff17 	bl	80068f4 <HAL_GetTick>
 800aac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aac8:	e008      	b.n	800aadc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aaca:	f7fb ff13 	bl	80068f4 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d901      	bls.n	800aadc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e183      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aadc:	4b6c      	ldr	r3, [pc, #432]	; (800ac90 <HAL_RCC_OscConfig+0x4bc>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0f0      	beq.n	800aaca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d108      	bne.n	800ab02 <HAL_RCC_OscConfig+0x32e>
 800aaf0:	4b66      	ldr	r3, [pc, #408]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf6:	4a65      	ldr	r2, [pc, #404]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aaf8:	f043 0301 	orr.w	r3, r3, #1
 800aafc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab00:	e024      	b.n	800ab4c <HAL_RCC_OscConfig+0x378>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d110      	bne.n	800ab2c <HAL_RCC_OscConfig+0x358>
 800ab0a:	4b60      	ldr	r3, [pc, #384]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab10:	4a5e      	ldr	r2, [pc, #376]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab12:	f043 0304 	orr.w	r3, r3, #4
 800ab16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab1a:	4b5c      	ldr	r3, [pc, #368]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab20:	4a5a      	ldr	r2, [pc, #360]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab2a:	e00f      	b.n	800ab4c <HAL_RCC_OscConfig+0x378>
 800ab2c:	4b57      	ldr	r3, [pc, #348]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab32:	4a56      	ldr	r2, [pc, #344]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab3c:	4b53      	ldr	r3, [pc, #332]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab42:	4a52      	ldr	r2, [pc, #328]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab44:	f023 0304 	bic.w	r3, r3, #4
 800ab48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d016      	beq.n	800ab82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab54:	f7fb fece 	bl	80068f4 <HAL_GetTick>
 800ab58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab5a:	e00a      	b.n	800ab72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab5c:	f7fb feca 	bl	80068f4 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d901      	bls.n	800ab72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e138      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab72:	4b46      	ldr	r3, [pc, #280]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab78:	f003 0302 	and.w	r3, r3, #2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0ed      	beq.n	800ab5c <HAL_RCC_OscConfig+0x388>
 800ab80:	e015      	b.n	800abae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab82:	f7fb feb7 	bl	80068f4 <HAL_GetTick>
 800ab86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab88:	e00a      	b.n	800aba0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8a:	f7fb feb3 	bl	80068f4 <HAL_GetTick>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	1ad3      	subs	r3, r2, r3
 800ab94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d901      	bls.n	800aba0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e121      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aba0:	4b3a      	ldr	r3, [pc, #232]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800aba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ed      	bne.n	800ab8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800abae:	7ffb      	ldrb	r3, [r7, #31]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d105      	bne.n	800abc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abb4:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800abb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800abba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d03c      	beq.n	800ac46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01c      	beq.n	800ac0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800abd4:	4b2d      	ldr	r3, [pc, #180]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800abd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abda:	4a2c      	ldr	r2, [pc, #176]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800abdc:	f043 0301 	orr.w	r3, r3, #1
 800abe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe4:	f7fb fe86 	bl	80068f4 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800abec:	f7fb fe82 	bl	80068f4 <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e0f2      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800abfe:	4b23      	ldr	r3, [pc, #140]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0ef      	beq.n	800abec <HAL_RCC_OscConfig+0x418>
 800ac0c:	e01b      	b.n	800ac46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac0e:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac14:	4a1d      	ldr	r2, [pc, #116]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac16:	f023 0301 	bic.w	r3, r3, #1
 800ac1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1e:	f7fb fe69 	bl	80068f4 <HAL_GetTick>
 800ac22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ac24:	e008      	b.n	800ac38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac26:	f7fb fe65 	bl	80068f4 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d901      	bls.n	800ac38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e0d5      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1ef      	bne.n	800ac26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	69db      	ldr	r3, [r3, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80c9 	beq.w	800ade2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f003 030c 	and.w	r3, r3, #12
 800ac58:	2b0c      	cmp	r3, #12
 800ac5a:	f000 8083 	beq.w	800ad64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d15e      	bne.n	800ad24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac66:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <HAL_RCC_OscConfig+0x4b8>)
 800ac6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac72:	f7fb fe3f 	bl	80068f4 <HAL_GetTick>
 800ac76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac78:	e00c      	b.n	800ac94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac7a:	f7fb fe3b 	bl	80068f4 <HAL_GetTick>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d905      	bls.n	800ac94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e0ab      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac94:	4b55      	ldr	r3, [pc, #340]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1ec      	bne.n	800ac7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aca0:	4b52      	ldr	r3, [pc, #328]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800aca2:	68da      	ldr	r2, [r3, #12]
 800aca4:	4b52      	ldr	r3, [pc, #328]	; (800adf0 <HAL_RCC_OscConfig+0x61c>)
 800aca6:	4013      	ands	r3, r2
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6a11      	ldr	r1, [r2, #32]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acb0:	3a01      	subs	r2, #1
 800acb2:	0112      	lsls	r2, r2, #4
 800acb4:	4311      	orrs	r1, r2
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800acba:	0212      	lsls	r2, r2, #8
 800acbc:	4311      	orrs	r1, r2
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800acc2:	0852      	lsrs	r2, r2, #1
 800acc4:	3a01      	subs	r2, #1
 800acc6:	0552      	lsls	r2, r2, #21
 800acc8:	4311      	orrs	r1, r2
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800acce:	0852      	lsrs	r2, r2, #1
 800acd0:	3a01      	subs	r2, #1
 800acd2:	0652      	lsls	r2, r2, #25
 800acd4:	4311      	orrs	r1, r2
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acda:	06d2      	lsls	r2, r2, #27
 800acdc:	430a      	orrs	r2, r1
 800acde:	4943      	ldr	r1, [pc, #268]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ace4:	4b41      	ldr	r3, [pc, #260]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a40      	ldr	r2, [pc, #256]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800acea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acf0:	4b3e      	ldr	r3, [pc, #248]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	4a3d      	ldr	r2, [pc, #244]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800acf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acfc:	f7fb fdfa 	bl	80068f4 <HAL_GetTick>
 800ad00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad02:	e008      	b.n	800ad16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad04:	f7fb fdf6 	bl	80068f4 <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d901      	bls.n	800ad16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e066      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad16:	4b35      	ldr	r3, [pc, #212]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d0f0      	beq.n	800ad04 <HAL_RCC_OscConfig+0x530>
 800ad22:	e05e      	b.n	800ade2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad24:	4b31      	ldr	r3, [pc, #196]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a30      	ldr	r2, [pc, #192]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad30:	f7fb fde0 	bl	80068f4 <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad36:	e008      	b.n	800ad4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad38:	f7fb fddc 	bl	80068f4 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d901      	bls.n	800ad4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e04c      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad4a:	4b28      	ldr	r3, [pc, #160]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1f0      	bne.n	800ad38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ad56:	4b25      	ldr	r3, [pc, #148]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad58:	68da      	ldr	r2, [r3, #12]
 800ad5a:	4924      	ldr	r1, [pc, #144]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad5c:	4b25      	ldr	r3, [pc, #148]	; (800adf4 <HAL_RCC_OscConfig+0x620>)
 800ad5e:	4013      	ands	r3, r2
 800ad60:	60cb      	str	r3, [r1, #12]
 800ad62:	e03e      	b.n	800ade2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d101      	bne.n	800ad70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e039      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ad70:	4b1e      	ldr	r3, [pc, #120]	; (800adec <HAL_RCC_OscConfig+0x618>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f003 0203 	and.w	r2, r3, #3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d12c      	bne.n	800adde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d123      	bne.n	800adde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d11b      	bne.n	800adde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d113      	bne.n	800adde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	085b      	lsrs	r3, r3, #1
 800adc2:	3b01      	subs	r3, #1
 800adc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d109      	bne.n	800adde <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	3b01      	subs	r3, #1
 800add8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800adda:	429a      	cmp	r2, r3
 800addc:	d001      	beq.n	800ade2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3720      	adds	r7, #32
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	40021000 	.word	0x40021000
 800adf0:	019f800c 	.word	0x019f800c
 800adf4:	feeefffc 	.word	0xfeeefffc

0800adf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ae02:	2300      	movs	r3, #0
 800ae04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e11e      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae10:	4b91      	ldr	r3, [pc, #580]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 030f 	and.w	r3, r3, #15
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d910      	bls.n	800ae40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae1e:	4b8e      	ldr	r3, [pc, #568]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f023 020f 	bic.w	r2, r3, #15
 800ae26:	498c      	ldr	r1, [pc, #560]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae2e:	4b8a      	ldr	r3, [pc, #552]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d001      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e106      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d073      	beq.n	800af34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d129      	bne.n	800aea8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae54:	4b81      	ldr	r3, [pc, #516]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e0f4      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ae64:	f000 f99e 	bl	800b1a4 <RCC_GetSysClockFreqFromPLLSource>
 800ae68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4a7c      	ldr	r2, [pc, #496]	; (800b060 <HAL_RCC_ClockConfig+0x268>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d93f      	bls.n	800aef2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae72:	4b7a      	ldr	r3, [pc, #488]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d033      	beq.n	800aef2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d12f      	bne.n	800aef2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ae92:	4b72      	ldr	r3, [pc, #456]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae9a:	4a70      	ldr	r2, [pc, #448]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800ae9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aea2:	2380      	movs	r3, #128	; 0x80
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e024      	b.n	800aef2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d107      	bne.n	800aec0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aeb0:	4b6a      	ldr	r3, [pc, #424]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e0c6      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aec0:	4b66      	ldr	r3, [pc, #408]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0be      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800aed0:	f000 f8ce 	bl	800b070 <HAL_RCC_GetSysClockFreq>
 800aed4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	4a61      	ldr	r2, [pc, #388]	; (800b060 <HAL_RCC_ClockConfig+0x268>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d909      	bls.n	800aef2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aede:	4b5f      	ldr	r3, [pc, #380]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aee6:	4a5d      	ldr	r2, [pc, #372]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800aeee:	2380      	movs	r3, #128	; 0x80
 800aef0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aef2:	4b5a      	ldr	r3, [pc, #360]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f023 0203 	bic.w	r2, r3, #3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4957      	ldr	r1, [pc, #348]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af00:	4313      	orrs	r3, r2
 800af02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af04:	f7fb fcf6 	bl	80068f4 <HAL_GetTick>
 800af08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af0a:	e00a      	b.n	800af22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af0c:	f7fb fcf2 	bl	80068f4 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e095      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af22:	4b4e      	ldr	r3, [pc, #312]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 020c 	and.w	r2, r3, #12
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	429a      	cmp	r2, r3
 800af32:	d1eb      	bne.n	800af0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0302 	and.w	r3, r3, #2
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d023      	beq.n	800af88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af4c:	4b43      	ldr	r3, [pc, #268]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	4a42      	ldr	r2, [pc, #264]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d007      	beq.n	800af74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800af64:	4b3d      	ldr	r3, [pc, #244]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800af6c:	4a3b      	ldr	r2, [pc, #236]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800af72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af74:	4b39      	ldr	r3, [pc, #228]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	4936      	ldr	r1, [pc, #216]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af82:	4313      	orrs	r3, r2
 800af84:	608b      	str	r3, [r1, #8]
 800af86:	e008      	b.n	800af9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b80      	cmp	r3, #128	; 0x80
 800af8c:	d105      	bne.n	800af9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800af8e:	4b33      	ldr	r3, [pc, #204]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	4a32      	ldr	r2, [pc, #200]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800af94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af9a:	4b2f      	ldr	r3, [pc, #188]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 030f 	and.w	r3, r3, #15
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d21d      	bcs.n	800afe4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afa8:	4b2b      	ldr	r3, [pc, #172]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f023 020f 	bic.w	r2, r3, #15
 800afb0:	4929      	ldr	r1, [pc, #164]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800afb8:	f7fb fc9c 	bl	80068f4 <HAL_GetTick>
 800afbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afbe:	e00a      	b.n	800afd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afc0:	f7fb fc98 	bl	80068f4 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	f241 3288 	movw	r2, #5000	; 0x1388
 800afce:	4293      	cmp	r3, r2
 800afd0:	d901      	bls.n	800afd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e03b      	b.n	800b04e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afd6:	4b20      	ldr	r3, [pc, #128]	; (800b058 <HAL_RCC_ClockConfig+0x260>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d1ed      	bne.n	800afc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aff0:	4b1a      	ldr	r3, [pc, #104]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	4917      	ldr	r1, [pc, #92]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800affe:	4313      	orrs	r3, r2
 800b000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d009      	beq.n	800b022 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b00e:	4b13      	ldr	r3, [pc, #76]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	490f      	ldr	r1, [pc, #60]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b022:	f000 f825 	bl	800b070 <HAL_RCC_GetSysClockFreq>
 800b026:	4602      	mov	r2, r0
 800b028:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <HAL_RCC_ClockConfig+0x264>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	091b      	lsrs	r3, r3, #4
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	490c      	ldr	r1, [pc, #48]	; (800b064 <HAL_RCC_ClockConfig+0x26c>)
 800b034:	5ccb      	ldrb	r3, [r1, r3]
 800b036:	f003 031f 	and.w	r3, r3, #31
 800b03a:	fa22 f303 	lsr.w	r3, r2, r3
 800b03e:	4a0a      	ldr	r2, [pc, #40]	; (800b068 <HAL_RCC_ClockConfig+0x270>)
 800b040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b042:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <HAL_RCC_ClockConfig+0x274>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f7fb fc08 	bl	800685c <HAL_InitTick>
 800b04c:	4603      	mov	r3, r0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	40022000 	.word	0x40022000
 800b05c:	40021000 	.word	0x40021000
 800b060:	04c4b400 	.word	0x04c4b400
 800b064:	080156ec 	.word	0x080156ec
 800b068:	200001d8 	.word	0x200001d8
 800b06c:	200001ec 	.word	0x200001ec

0800b070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b070:	b480      	push	{r7}
 800b072:	b087      	sub	sp, #28
 800b074:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b076:	4b2c      	ldr	r3, [pc, #176]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	f003 030c 	and.w	r3, r3, #12
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d102      	bne.n	800b088 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b082:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b084:	613b      	str	r3, [r7, #16]
 800b086:	e047      	b.n	800b118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b088:	4b27      	ldr	r3, [pc, #156]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f003 030c 	and.w	r3, r3, #12
 800b090:	2b08      	cmp	r3, #8
 800b092:	d102      	bne.n	800b09a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b094:	4b26      	ldr	r3, [pc, #152]	; (800b130 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b096:	613b      	str	r3, [r7, #16]
 800b098:	e03e      	b.n	800b118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b09a:	4b23      	ldr	r3, [pc, #140]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	f003 030c 	and.w	r3, r3, #12
 800b0a2:	2b0c      	cmp	r3, #12
 800b0a4:	d136      	bne.n	800b114 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b0a6:	4b20      	ldr	r3, [pc, #128]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0b0:	4b1d      	ldr	r3, [pc, #116]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	091b      	lsrs	r3, r3, #4
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d10c      	bne.n	800b0de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0c4:	4a1a      	ldr	r2, [pc, #104]	; (800b130 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0cc:	4a16      	ldr	r2, [pc, #88]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0ce:	68d2      	ldr	r2, [r2, #12]
 800b0d0:	0a12      	lsrs	r2, r2, #8
 800b0d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	617b      	str	r3, [r7, #20]
      break;
 800b0dc:	e00c      	b.n	800b0f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0de:	4a13      	ldr	r2, [pc, #76]	; (800b12c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	4a10      	ldr	r2, [pc, #64]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0e8:	68d2      	ldr	r2, [r2, #12]
 800b0ea:	0a12      	lsrs	r2, r2, #8
 800b0ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0f0:	fb02 f303 	mul.w	r3, r2, r3
 800b0f4:	617b      	str	r3, [r7, #20]
      break;
 800b0f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b0f8:	4b0b      	ldr	r3, [pc, #44]	; (800b128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	0e5b      	lsrs	r3, r3, #25
 800b0fe:	f003 0303 	and.w	r3, r3, #3
 800b102:	3301      	adds	r3, #1
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b108:	697a      	ldr	r2, [r7, #20]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b110:	613b      	str	r3, [r7, #16]
 800b112:	e001      	b.n	800b118 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b118:	693b      	ldr	r3, [r7, #16]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40021000 	.word	0x40021000
 800b12c:	00f42400 	.word	0x00f42400
 800b130:	007a1200 	.word	0x007a1200

0800b134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b134:	b480      	push	{r7}
 800b136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b138:	4b03      	ldr	r3, [pc, #12]	; (800b148 <HAL_RCC_GetHCLKFreq+0x14>)
 800b13a:	681b      	ldr	r3, [r3, #0]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	200001d8 	.word	0x200001d8

0800b14c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b150:	f7ff fff0 	bl	800b134 <HAL_RCC_GetHCLKFreq>
 800b154:	4602      	mov	r2, r0
 800b156:	4b06      	ldr	r3, [pc, #24]	; (800b170 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	f003 0307 	and.w	r3, r3, #7
 800b160:	4904      	ldr	r1, [pc, #16]	; (800b174 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b162:	5ccb      	ldrb	r3, [r1, r3]
 800b164:	f003 031f 	and.w	r3, r3, #31
 800b168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	40021000 	.word	0x40021000
 800b174:	080156fc 	.word	0x080156fc

0800b178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b17c:	f7ff ffda 	bl	800b134 <HAL_RCC_GetHCLKFreq>
 800b180:	4602      	mov	r2, r0
 800b182:	4b06      	ldr	r3, [pc, #24]	; (800b19c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	0adb      	lsrs	r3, r3, #11
 800b188:	f003 0307 	and.w	r3, r3, #7
 800b18c:	4904      	ldr	r1, [pc, #16]	; (800b1a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b18e:	5ccb      	ldrb	r3, [r1, r3]
 800b190:	f003 031f 	and.w	r3, r3, #31
 800b194:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b198:	4618      	mov	r0, r3
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	40021000 	.word	0x40021000
 800b1a0:	080156fc 	.word	0x080156fc

0800b1a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b1aa:	4b1e      	ldr	r3, [pc, #120]	; (800b224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	; (800b224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	091b      	lsrs	r3, r3, #4
 800b1ba:	f003 030f 	and.w	r3, r3, #15
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d10c      	bne.n	800b1e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b1c8:	4a17      	ldr	r2, [pc, #92]	; (800b228 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d0:	4a14      	ldr	r2, [pc, #80]	; (800b224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b1d2:	68d2      	ldr	r2, [r2, #12]
 800b1d4:	0a12      	lsrs	r2, r2, #8
 800b1d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b1da:	fb02 f303 	mul.w	r3, r2, r3
 800b1de:	617b      	str	r3, [r7, #20]
    break;
 800b1e0:	e00c      	b.n	800b1fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b1e2:	4a12      	ldr	r2, [pc, #72]	; (800b22c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ea:	4a0e      	ldr	r2, [pc, #56]	; (800b224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b1ec:	68d2      	ldr	r2, [r2, #12]
 800b1ee:	0a12      	lsrs	r2, r2, #8
 800b1f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	617b      	str	r3, [r7, #20]
    break;
 800b1fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b1fc:	4b09      	ldr	r3, [pc, #36]	; (800b224 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	0e5b      	lsrs	r3, r3, #25
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	3301      	adds	r3, #1
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	fbb2 f3f3 	udiv	r3, r2, r3
 800b214:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b216:	687b      	ldr	r3, [r7, #4]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	40021000 	.word	0x40021000
 800b228:	007a1200 	.word	0x007a1200
 800b22c:	00f42400 	.word	0x00f42400

0800b230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b238:	2300      	movs	r3, #0
 800b23a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b23c:	2300      	movs	r3, #0
 800b23e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 8098 	beq.w	800b37e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b24e:	2300      	movs	r3, #0
 800b250:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b252:	4b43      	ldr	r3, [pc, #268]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10d      	bne.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b25e:	4b40      	ldr	r3, [pc, #256]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b262:	4a3f      	ldr	r2, [pc, #252]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b268:	6593      	str	r3, [r2, #88]	; 0x58
 800b26a:	4b3d      	ldr	r3, [pc, #244]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b272:	60bb      	str	r3, [r7, #8]
 800b274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b276:	2301      	movs	r3, #1
 800b278:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b27a:	4b3a      	ldr	r3, [pc, #232]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a39      	ldr	r2, [pc, #228]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b286:	f7fb fb35 	bl	80068f4 <HAL_GetTick>
 800b28a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b28c:	e009      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b28e:	f7fb fb31 	bl	80068f4 <HAL_GetTick>
 800b292:	4602      	mov	r2, r0
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d902      	bls.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	74fb      	strb	r3, [r7, #19]
        break;
 800b2a0:	e005      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2a2:	4b30      	ldr	r3, [pc, #192]	; (800b364 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0ef      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b2ae:	7cfb      	ldrb	r3, [r7, #19]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d159      	bne.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b2b4:	4b2a      	ldr	r3, [pc, #168]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01e      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	697a      	ldr	r2, [r7, #20]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d019      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b2d0:	4b23      	ldr	r3, [pc, #140]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2dc:	4b20      	ldr	r3, [pc, #128]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2e2:	4a1f      	ldr	r2, [pc, #124]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2ec:	4b1c      	ldr	r3, [pc, #112]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b2fc:	4a18      	ldr	r2, [pc, #96]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d016      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b30e:	f7fb faf1 	bl	80068f4 <HAL_GetTick>
 800b312:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b314:	e00b      	b.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b316:	f7fb faed 	bl	80068f4 <HAL_GetTick>
 800b31a:	4602      	mov	r2, r0
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	f241 3288 	movw	r2, #5000	; 0x1388
 800b324:	4293      	cmp	r3, r2
 800b326:	d902      	bls.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	74fb      	strb	r3, [r7, #19]
            break;
 800b32c:	e006      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b32e:	4b0c      	ldr	r3, [pc, #48]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b334:	f003 0302 	and.w	r3, r3, #2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0ec      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b33c:	7cfb      	ldrb	r3, [r7, #19]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b342:	4b07      	ldr	r3, [pc, #28]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b350:	4903      	ldr	r1, [pc, #12]	; (800b360 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b352:	4313      	orrs	r3, r2
 800b354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b358:	e008      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b35a:	7cfb      	ldrb	r3, [r7, #19]
 800b35c:	74bb      	strb	r3, [r7, #18]
 800b35e:	e005      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b360:	40021000 	.word	0x40021000
 800b364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b368:	7cfb      	ldrb	r3, [r7, #19]
 800b36a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b36c:	7c7b      	ldrb	r3, [r7, #17]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d105      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b372:	4ba6      	ldr	r3, [pc, #664]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b376:	4aa5      	ldr	r2, [pc, #660]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b37c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b38a:	4ba0      	ldr	r3, [pc, #640]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b390:	f023 0203 	bic.w	r2, r3, #3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	499c      	ldr	r1, [pc, #624]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00a      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b3ac:	4b97      	ldr	r3, [pc, #604]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b2:	f023 020c 	bic.w	r2, r3, #12
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	4994      	ldr	r1, [pc, #592]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00a      	beq.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b3ce:	4b8f      	ldr	r3, [pc, #572]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	498b      	ldr	r1, [pc, #556]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f003 0308 	and.w	r3, r3, #8
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00a      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b3f0:	4b86      	ldr	r3, [pc, #536]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	4983      	ldr	r1, [pc, #524]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b400:	4313      	orrs	r3, r2
 800b402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b412:	4b7e      	ldr	r3, [pc, #504]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b418:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	497a      	ldr	r1, [pc, #488]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b422:	4313      	orrs	r3, r2
 800b424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b434:	4b75      	ldr	r3, [pc, #468]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	4972      	ldr	r1, [pc, #456]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b444:	4313      	orrs	r3, r2
 800b446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b456:	4b6d      	ldr	r3, [pc, #436]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b45c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	4969      	ldr	r1, [pc, #420]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b466:	4313      	orrs	r3, r2
 800b468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00a      	beq.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b478:	4b64      	ldr	r3, [pc, #400]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	4961      	ldr	r1, [pc, #388]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00a      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b49a:	4b5c      	ldr	r3, [pc, #368]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	4958      	ldr	r1, [pc, #352]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d015      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4bc:	4b53      	ldr	r3, [pc, #332]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	4950      	ldr	r1, [pc, #320]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4da:	d105      	bne.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4dc:	4b4b      	ldr	r3, [pc, #300]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	4a4a      	ldr	r2, [pc, #296]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d015      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b4f4:	4b45      	ldr	r3, [pc, #276]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	4942      	ldr	r1, [pc, #264]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b504:	4313      	orrs	r3, r2
 800b506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b512:	d105      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b514:	4b3d      	ldr	r3, [pc, #244]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	4a3c      	ldr	r2, [pc, #240]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b51a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b51e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d015      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b52c:	4b37      	ldr	r3, [pc, #220]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b52e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b532:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53a:	4934      	ldr	r1, [pc, #208]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b54a:	d105      	bne.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b54c:	4b2f      	ldr	r3, [pc, #188]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	4a2e      	ldr	r2, [pc, #184]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b556:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d015      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b564:	4b29      	ldr	r3, [pc, #164]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b572:	4926      	ldr	r1, [pc, #152]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b582:	d105      	bne.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b584:	4b21      	ldr	r3, [pc, #132]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4a20      	ldr	r2, [pc, #128]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b58a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b58e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d015      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b59c:	4b1b      	ldr	r3, [pc, #108]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	4918      	ldr	r1, [pc, #96]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5ba:	d105      	bne.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5bc:	4b13      	ldr	r3, [pc, #76]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	4a12      	ldr	r2, [pc, #72]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d015      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e2:	490a      	ldr	r1, [pc, #40]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5f2:	d105      	bne.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b5f4:	4b05      	ldr	r3, [pc, #20]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	4a04      	ldr	r2, [pc, #16]	; (800b60c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b600:	7cbb      	ldrb	r3, [r7, #18]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	40021000 	.word	0x40021000

0800b610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e09d      	b.n	800b75e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	2b00      	cmp	r3, #0
 800b628:	d108      	bne.n	800b63c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b632:	d009      	beq.n	800b648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	61da      	str	r2, [r3, #28]
 800b63a:	e005      	b.n	800b648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fa f8ae 	bl	80057c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2202      	movs	r2, #2
 800b66c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b67e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b688:	d902      	bls.n	800b690 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	e002      	b.n	800b696 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b694:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b69e:	d007      	beq.n	800b6b0 <HAL_SPI_Init+0xa0>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b6a8:	d002      	beq.n	800b6b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	69db      	ldr	r3, [r3, #28]
 800b6e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f2:	ea42 0103 	orr.w	r1, r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	f003 0204 	and.w	r2, r3, #4
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	f003 0310 	and.w	r3, r3, #16
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71e:	f003 0308 	and.w	r3, r3, #8
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b72c:	ea42 0103 	orr.w	r1, r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	430a      	orrs	r2, r1
 800b73c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69da      	ldr	r2, [r3, #28]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b74c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	603b      	str	r3, [r7, #0]
 800b772:	4613      	mov	r3, r2
 800b774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_SPI_Transmit+0x22>
 800b784:	2302      	movs	r3, #2
 800b786:	e15f      	b.n	800ba48 <HAL_SPI_Transmit+0x2e2>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b790:	f7fb f8b0 	bl	80068f4 <HAL_GetTick>
 800b794:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d002      	beq.n	800b7ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7aa:	e148      	b.n	800ba3e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <HAL_SPI_Transmit+0x52>
 800b7b2:	88fb      	ldrh	r3, [r7, #6]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d102      	bne.n	800b7be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b7bc:	e13f      	b.n	800ba3e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2203      	movs	r2, #3
 800b7c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	88fa      	ldrh	r2, [r7, #6]
 800b7d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	88fa      	ldrh	r2, [r7, #6]
 800b7dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b808:	d10f      	bne.n	800b82a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b834:	2b40      	cmp	r3, #64	; 0x40
 800b836:	d007      	beq.n	800b848 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b850:	d94f      	bls.n	800b8f2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <HAL_SPI_Transmit+0xfa>
 800b85a:	8afb      	ldrh	r3, [r7, #22]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d142      	bne.n	800b8e6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	881a      	ldrh	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	1c9a      	adds	r2, r3, #2
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	3b01      	subs	r3, #1
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b884:	e02f      	b.n	800b8e6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b02      	cmp	r3, #2
 800b892:	d112      	bne.n	800b8ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b898:	881a      	ldrh	r2, [r3, #0]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a4:	1c9a      	adds	r2, r3, #2
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b8b8:	e015      	b.n	800b8e6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8ba:	f7fb f81b 	bl	80068f4 <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d803      	bhi.n	800b8d2 <HAL_SPI_Transmit+0x16c>
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d0:	d102      	bne.n	800b8d8 <HAL_SPI_Transmit+0x172>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d106      	bne.n	800b8e6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b8e4:	e0ab      	b.n	800ba3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1ca      	bne.n	800b886 <HAL_SPI_Transmit+0x120>
 800b8f0:	e080      	b.n	800b9f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <HAL_SPI_Transmit+0x19a>
 800b8fa:	8afb      	ldrh	r3, [r7, #22]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d174      	bne.n	800b9ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b904:	b29b      	uxth	r3, r3
 800b906:	2b01      	cmp	r3, #1
 800b908:	d912      	bls.n	800b930 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90e:	881a      	ldrh	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	1c9a      	adds	r2, r3, #2
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b924:	b29b      	uxth	r3, r3
 800b926:	3b02      	subs	r3, #2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b92e:	e05c      	b.n	800b9ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	330c      	adds	r3, #12
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	3b01      	subs	r3, #1
 800b950:	b29a      	uxth	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b956:	e048      	b.n	800b9ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b02      	cmp	r3, #2
 800b964:	d12b      	bne.n	800b9be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d912      	bls.n	800b996 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b974:	881a      	ldrh	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b980:	1c9a      	adds	r2, r3, #2
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	3b02      	subs	r3, #2
 800b98e:	b29a      	uxth	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b994:	e029      	b.n	800b9ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	330c      	adds	r3, #12
 800b9a0:	7812      	ldrb	r2, [r2, #0]
 800b9a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b9bc:	e015      	b.n	800b9ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9be:	f7fa ff99 	bl	80068f4 <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d803      	bhi.n	800b9d6 <HAL_SPI_Transmit+0x270>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d4:	d102      	bne.n	800b9dc <HAL_SPI_Transmit+0x276>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800b9e8:	e029      	b.n	800ba3e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1b1      	bne.n	800b958 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 fad7 	bl	800bfac <SPI_EndRxTxTransaction>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2220      	movs	r2, #32
 800ba08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba12:	2300      	movs	r3, #0
 800ba14:	613b      	str	r3, [r7, #16]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	613b      	str	r3, [r7, #16]
 800ba26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d002      	beq.n	800ba36 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	77fb      	strb	r3, [r7, #31]
 800ba34:	e003      	b.n	800ba3e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ba46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3720      	adds	r7, #32
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d101      	bne.n	800ba70 <HAL_SPI_Transmit_DMA+0x20>
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	e0d4      	b.n	800bc1a <HAL_SPI_Transmit_DMA+0x1ca>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d002      	beq.n	800ba8a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ba84:	2302      	movs	r3, #2
 800ba86:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba88:	e0c2      	b.n	800bc10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <HAL_SPI_Transmit_DMA+0x46>
 800ba90:	88fb      	ldrh	r3, [r7, #6]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d102      	bne.n	800ba9c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ba9a:	e0b9      	b.n	800bc10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	88fa      	ldrh	r2, [r7, #6]
 800bab4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	88fa      	ldrh	r2, [r7, #6]
 800baba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bae6:	d10f      	bne.n	800bb08 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb0c:	4a45      	ldr	r2, [pc, #276]	; (800bc24 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bb0e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb14:	4a44      	ldr	r2, [pc, #272]	; (800bc28 <HAL_SPI_Transmit_DMA+0x1d8>)
 800bb16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb1c:	4a43      	ldr	r2, [pc, #268]	; (800bc2c <HAL_SPI_Transmit_DMA+0x1dc>)
 800bb1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb24:	2200      	movs	r2, #0
 800bb26:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685a      	ldr	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb36:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb40:	d82d      	bhi.n	800bb9e <HAL_SPI_Transmit_DMA+0x14e>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb4c:	d127      	bne.n	800bb9e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10f      	bne.n	800bb7c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bb6a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	085b      	lsrs	r3, r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb7a:	e010      	b.n	800bb9e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	085b      	lsrs	r3, r3, #1
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	3301      	adds	r3, #1
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	4619      	mov	r1, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	330c      	adds	r3, #12
 800bbae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbb4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bbb6:	f7fd fdaf 	bl	8009718 <HAL_DMA_Start_IT>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d008      	beq.n	800bbd2 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbc4:	f043 0210 	orr.w	r2, r3, #16
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bbd0:	e01e      	b.n	800bc10 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbdc:	2b40      	cmp	r3, #64	; 0x40
 800bbde:	d007      	beq.n	800bbf0 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbee:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f042 0220 	orr.w	r2, r2, #32
 800bbfe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f042 0202 	orr.w	r2, r2, #2
 800bc0e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3718      	adds	r7, #24
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0800bd13 	.word	0x0800bd13
 800bc28:	0800bc6d 	.word	0x0800bc6d
 800bc2c:	0800bd2f 	.word	0x0800bd2f

0800bc30 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc7a:	f7fa fe3b 	bl	80068f4 <HAL_GetTick>
 800bc7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0320 	and.w	r3, r3, #32
 800bc8a:	2b20      	cmp	r3, #32
 800bc8c:	d03b      	beq.n	800bd06 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f022 0220 	bic.w	r2, r2, #32
 800bc9c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 0202 	bic.w	r2, r2, #2
 800bcac:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	2164      	movs	r1, #100	; 0x64
 800bcb2:	6978      	ldr	r0, [r7, #20]
 800bcb4:	f000 f97a 	bl	800bfac <SPI_EndRxTxTransaction>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d005      	beq.n	800bcca <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcc2:	f043 0220 	orr.w	r2, r3, #32
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2200      	movs	r2, #0
 800bcec:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d003      	beq.n	800bd06 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bcfe:	6978      	ldr	r0, [r7, #20]
 800bd00:	f7ff ffaa 	bl	800bc58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bd04:	e002      	b.n	800bd0c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800bd06:	6978      	ldr	r0, [r7, #20]
 800bd08:	f7ff ff92 	bl	800bc30 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b084      	sub	sp, #16
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff ff8f 	bl	800bc44 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd26:	bf00      	nop
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b084      	sub	sp, #16
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0203 	bic.w	r2, r2, #3
 800bd4a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd50:	f043 0210 	orr.w	r2, r3, #16
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f7ff ff79 	bl	800bc58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	603b      	str	r3, [r7, #0]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bd80:	f7fa fdb8 	bl	80068f4 <HAL_GetTick>
 800bd84:	4602      	mov	r2, r0
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	1a9b      	subs	r3, r3, r2
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bd90:	f7fa fdb0 	bl	80068f4 <HAL_GetTick>
 800bd94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd96:	4b39      	ldr	r3, [pc, #228]	; (800be7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	015b      	lsls	r3, r3, #5
 800bd9c:	0d1b      	lsrs	r3, r3, #20
 800bd9e:	69fa      	ldr	r2, [r7, #28]
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bda6:	e054      	b.n	800be52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdae:	d050      	beq.n	800be52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bdb0:	f7fa fda0 	bl	80068f4 <HAL_GetTick>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d902      	bls.n	800bdc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d13d      	bne.n	800be42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	685a      	ldr	r2, [r3, #4]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bdd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdde:	d111      	bne.n	800be04 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bde8:	d004      	beq.n	800bdf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdf2:	d107      	bne.n	800be04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be0c:	d10f      	bne.n	800be2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e017      	b.n	800be72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be48:	2300      	movs	r3, #0
 800be4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	3b01      	subs	r3, #1
 800be50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4013      	ands	r3, r2
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	429a      	cmp	r2, r3
 800be60:	bf0c      	ite	eq
 800be62:	2301      	moveq	r3, #1
 800be64:	2300      	movne	r3, #0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d19b      	bne.n	800bda8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	200001d8 	.word	0x200001d8

0800be80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800be92:	f7fa fd2f 	bl	80068f4 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	1a9b      	subs	r3, r3, r2
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4413      	add	r3, r2
 800bea0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bea2:	f7fa fd27 	bl	80068f4 <HAL_GetTick>
 800bea6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	330c      	adds	r3, #12
 800beae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800beb0:	4b3d      	ldr	r3, [pc, #244]	; (800bfa8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	00da      	lsls	r2, r3, #3
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	0d1b      	lsrs	r3, r3, #20
 800bec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec2:	fb02 f303 	mul.w	r3, r2, r3
 800bec6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bec8:	e060      	b.n	800bf8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bed0:	d107      	bne.n	800bee2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d104      	bne.n	800bee2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bee0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee8:	d050      	beq.n	800bf8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800beea:	f7fa fd03 	bl	80068f4 <HAL_GetTick>
 800beee:	4602      	mov	r2, r0
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d902      	bls.n	800bf00 <SPI_WaitFifoStateUntilTimeout+0x80>
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d13d      	bne.n	800bf7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf18:	d111      	bne.n	800bf3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf22:	d004      	beq.n	800bf2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf2c:	d107      	bne.n	800bf3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf46:	d10f      	bne.n	800bf68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf78:	2303      	movs	r3, #3
 800bf7a:	e010      	b.n	800bf9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800bf82:	2300      	movs	r3, #0
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	689a      	ldr	r2, [r3, #8]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	4013      	ands	r3, r2
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d196      	bne.n	800beca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3728      	adds	r7, #40	; 0x28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	200001d8 	.word	0x200001d8

0800bfac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff ff5b 	bl	800be80 <SPI_WaitFifoStateUntilTimeout>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd4:	f043 0220 	orr.w	r2, r3, #32
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e027      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2180      	movs	r1, #128	; 0x80
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff fec0 	bl	800bd70 <SPI_WaitFlagStateUntilTimeout>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bffa:	f043 0220 	orr.w	r2, r3, #32
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e014      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff ff34 	bl	800be80 <SPI_WaitFifoStateUntilTimeout>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d007      	beq.n	800c02e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c022:	f043 0220 	orr.w	r2, r3, #32
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e000      	b.n	800c030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e049      	b.n	800c0de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d106      	bne.n	800c064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f9 fcd2 	bl	8005a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3304      	adds	r3, #4
 800c074:	4619      	mov	r1, r3
 800c076:	4610      	mov	r0, r2
 800c078:	f000 ff72 	bl	800cf60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2201      	movs	r2, #1
 800c098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d001      	beq.n	800c100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e04a      	b.n	800c196 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2202      	movs	r2, #2
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a21      	ldr	r2, [pc, #132]	; (800c1a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d018      	beq.n	800c154 <HAL_TIM_Base_Start_IT+0x6c>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12a:	d013      	beq.n	800c154 <HAL_TIM_Base_Start_IT+0x6c>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a1d      	ldr	r2, [pc, #116]	; (800c1a8 <HAL_TIM_Base_Start_IT+0xc0>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d00e      	beq.n	800c154 <HAL_TIM_Base_Start_IT+0x6c>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1c      	ldr	r2, [pc, #112]	; (800c1ac <HAL_TIM_Base_Start_IT+0xc4>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d009      	beq.n	800c154 <HAL_TIM_Base_Start_IT+0x6c>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1a      	ldr	r2, [pc, #104]	; (800c1b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d004      	beq.n	800c154 <HAL_TIM_Base_Start_IT+0x6c>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a19      	ldr	r2, [pc, #100]	; (800c1b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d115      	bne.n	800c180 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689a      	ldr	r2, [r3, #8]
 800c15a:	4b17      	ldr	r3, [pc, #92]	; (800c1b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2b06      	cmp	r3, #6
 800c164:	d015      	beq.n	800c192 <HAL_TIM_Base_Start_IT+0xaa>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c16c:	d011      	beq.n	800c192 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f042 0201 	orr.w	r2, r2, #1
 800c17c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c17e:	e008      	b.n	800c192 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f042 0201 	orr.w	r2, r2, #1
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	e000      	b.n	800c194 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	40012c00 	.word	0x40012c00
 800c1a8:	40000400 	.word	0x40000400
 800c1ac:	40000800 	.word	0x40000800
 800c1b0:	40013400 	.word	0x40013400
 800c1b4:	40014000 	.word	0x40014000
 800c1b8:	00010007 	.word	0x00010007

0800c1bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68da      	ldr	r2, [r3, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 0201 	bic.w	r2, r2, #1
 800c1d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6a1a      	ldr	r2, [r3, #32]
 800c1da:	f241 1311 	movw	r3, #4369	; 0x1111
 800c1de:	4013      	ands	r3, r2
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10f      	bne.n	800c204 <HAL_TIM_Base_Stop_IT+0x48>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6a1a      	ldr	r2, [r3, #32]
 800c1ea:	f244 4344 	movw	r3, #17476	; 0x4444
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d107      	bne.n	800c204 <HAL_TIM_Base_Stop_IT+0x48>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0201 	bic.w	r2, r2, #1
 800c202:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr

0800c21a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c21a:	b580      	push	{r7, lr}
 800c21c:	b082      	sub	sp, #8
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d101      	bne.n	800c22c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e049      	b.n	800c2c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c232:	b2db      	uxtb	r3, r3
 800c234:	2b00      	cmp	r3, #0
 800c236:	d106      	bne.n	800c246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7f9 fb31 	bl	80058a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2202      	movs	r2, #2
 800c24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3304      	adds	r3, #4
 800c256:	4619      	mov	r1, r3
 800c258:	4610      	mov	r0, r2
 800c25a:	f000 fe81 	bl	800cf60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d109      	bne.n	800c2f0 <HAL_TIM_PWM_Start_IT+0x28>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	e03c      	b.n	800c36a <HAL_TIM_PWM_Start_IT+0xa2>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d109      	bne.n	800c30a <HAL_TIM_PWM_Start_IT+0x42>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	bf14      	ite	ne
 800c302:	2301      	movne	r3, #1
 800c304:	2300      	moveq	r3, #0
 800c306:	b2db      	uxtb	r3, r3
 800c308:	e02f      	b.n	800c36a <HAL_TIM_PWM_Start_IT+0xa2>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	d109      	bne.n	800c324 <HAL_TIM_PWM_Start_IT+0x5c>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b01      	cmp	r3, #1
 800c31a:	bf14      	ite	ne
 800c31c:	2301      	movne	r3, #1
 800c31e:	2300      	moveq	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	e022      	b.n	800c36a <HAL_TIM_PWM_Start_IT+0xa2>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b0c      	cmp	r3, #12
 800c328:	d109      	bne.n	800c33e <HAL_TIM_PWM_Start_IT+0x76>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b01      	cmp	r3, #1
 800c334:	bf14      	ite	ne
 800c336:	2301      	movne	r3, #1
 800c338:	2300      	moveq	r3, #0
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	e015      	b.n	800c36a <HAL_TIM_PWM_Start_IT+0xa2>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	2b10      	cmp	r3, #16
 800c342:	d109      	bne.n	800c358 <HAL_TIM_PWM_Start_IT+0x90>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	bf14      	ite	ne
 800c350:	2301      	movne	r3, #1
 800c352:	2300      	moveq	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	e008      	b.n	800c36a <HAL_TIM_PWM_Start_IT+0xa2>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b01      	cmp	r3, #1
 800c362:	bf14      	ite	ne
 800c364:	2301      	movne	r3, #1
 800c366:	2300      	moveq	r3, #0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d001      	beq.n	800c372 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e0e2      	b.n	800c538 <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d104      	bne.n	800c382 <HAL_TIM_PWM_Start_IT+0xba>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2202      	movs	r2, #2
 800c37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c380:	e023      	b.n	800c3ca <HAL_TIM_PWM_Start_IT+0x102>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b04      	cmp	r3, #4
 800c386:	d104      	bne.n	800c392 <HAL_TIM_PWM_Start_IT+0xca>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2202      	movs	r2, #2
 800c38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c390:	e01b      	b.n	800c3ca <HAL_TIM_PWM_Start_IT+0x102>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b08      	cmp	r3, #8
 800c396:	d104      	bne.n	800c3a2 <HAL_TIM_PWM_Start_IT+0xda>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3a0:	e013      	b.n	800c3ca <HAL_TIM_PWM_Start_IT+0x102>
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b0c      	cmp	r3, #12
 800c3a6:	d104      	bne.n	800c3b2 <HAL_TIM_PWM_Start_IT+0xea>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3b0:	e00b      	b.n	800c3ca <HAL_TIM_PWM_Start_IT+0x102>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b10      	cmp	r3, #16
 800c3b6:	d104      	bne.n	800c3c2 <HAL_TIM_PWM_Start_IT+0xfa>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2202      	movs	r2, #2
 800c3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3c0:	e003      	b.n	800c3ca <HAL_TIM_PWM_Start_IT+0x102>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b0c      	cmp	r3, #12
 800c3ce:	d841      	bhi.n	800c454 <HAL_TIM_PWM_Start_IT+0x18c>
 800c3d0:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <HAL_TIM_PWM_Start_IT+0x110>)
 800c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d6:	bf00      	nop
 800c3d8:	0800c40d 	.word	0x0800c40d
 800c3dc:	0800c455 	.word	0x0800c455
 800c3e0:	0800c455 	.word	0x0800c455
 800c3e4:	0800c455 	.word	0x0800c455
 800c3e8:	0800c41f 	.word	0x0800c41f
 800c3ec:	0800c455 	.word	0x0800c455
 800c3f0:	0800c455 	.word	0x0800c455
 800c3f4:	0800c455 	.word	0x0800c455
 800c3f8:	0800c431 	.word	0x0800c431
 800c3fc:	0800c455 	.word	0x0800c455
 800c400:	0800c455 	.word	0x0800c455
 800c404:	0800c455 	.word	0x0800c455
 800c408:	0800c443 	.word	0x0800c443
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68da      	ldr	r2, [r3, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0202 	orr.w	r2, r2, #2
 800c41a:	60da      	str	r2, [r3, #12]
      break;
 800c41c:	e01d      	b.n	800c45a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68da      	ldr	r2, [r3, #12]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f042 0204 	orr.w	r2, r2, #4
 800c42c:	60da      	str	r2, [r3, #12]
      break;
 800c42e:	e014      	b.n	800c45a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68da      	ldr	r2, [r3, #12]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0208 	orr.w	r2, r2, #8
 800c43e:	60da      	str	r2, [r3, #12]
      break;
 800c440:	e00b      	b.n	800c45a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f042 0210 	orr.w	r2, r2, #16
 800c450:	60da      	str	r2, [r3, #12]
      break;
 800c452:	e002      	b.n	800c45a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	73fb      	strb	r3, [r7, #15]
      break;
 800c458:	bf00      	nop
  }

  if (status == HAL_OK)
 800c45a:	7bfb      	ldrb	r3, [r7, #15]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d16a      	bne.n	800c536 <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2201      	movs	r2, #1
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 f90b 	bl	800d684 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a33      	ldr	r2, [pc, #204]	; (800c540 <HAL_TIM_PWM_Start_IT+0x278>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d013      	beq.n	800c4a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a31      	ldr	r2, [pc, #196]	; (800c544 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d00e      	beq.n	800c4a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a30      	ldr	r2, [pc, #192]	; (800c548 <HAL_TIM_PWM_Start_IT+0x280>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d009      	beq.n	800c4a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a2e      	ldr	r2, [pc, #184]	; (800c54c <HAL_TIM_PWM_Start_IT+0x284>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d004      	beq.n	800c4a0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a2d      	ldr	r2, [pc, #180]	; (800c550 <HAL_TIM_PWM_Start_IT+0x288>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d101      	bne.n	800c4a4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e000      	b.n	800c4a6 <HAL_TIM_PWM_Start_IT+0x1de>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a20      	ldr	r2, [pc, #128]	; (800c540 <HAL_TIM_PWM_Start_IT+0x278>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d018      	beq.n	800c4f6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4cc:	d013      	beq.n	800c4f6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a20      	ldr	r2, [pc, #128]	; (800c554 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d00e      	beq.n	800c4f6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1e      	ldr	r2, [pc, #120]	; (800c558 <HAL_TIM_PWM_Start_IT+0x290>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d009      	beq.n	800c4f6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a17      	ldr	r2, [pc, #92]	; (800c544 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d004      	beq.n	800c4f6 <HAL_TIM_PWM_Start_IT+0x22e>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a15      	ldr	r2, [pc, #84]	; (800c548 <HAL_TIM_PWM_Start_IT+0x280>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d115      	bne.n	800c522 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	4b17      	ldr	r3, [pc, #92]	; (800c55c <HAL_TIM_PWM_Start_IT+0x294>)
 800c4fe:	4013      	ands	r3, r2
 800c500:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b06      	cmp	r3, #6
 800c506:	d015      	beq.n	800c534 <HAL_TIM_PWM_Start_IT+0x26c>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c50e:	d011      	beq.n	800c534 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f042 0201 	orr.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c520:	e008      	b.n	800c534 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f042 0201 	orr.w	r2, r2, #1
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	e000      	b.n	800c536 <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c534:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c536:	7bfb      	ldrb	r3, [r7, #15]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	40012c00 	.word	0x40012c00
 800c544:	40013400 	.word	0x40013400
 800c548:	40014000 	.word	0x40014000
 800c54c:	40014400 	.word	0x40014400
 800c550:	40014800 	.word	0x40014800
 800c554:	40000400 	.word	0x40000400
 800c558:	40000800 	.word	0x40000800
 800c55c:	00010007 	.word	0x00010007

0800c560 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b0c      	cmp	r3, #12
 800c572:	d841      	bhi.n	800c5f8 <HAL_TIM_PWM_Stop_IT+0x98>
 800c574:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <HAL_TIM_PWM_Stop_IT+0x1c>)
 800c576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57a:	bf00      	nop
 800c57c:	0800c5b1 	.word	0x0800c5b1
 800c580:	0800c5f9 	.word	0x0800c5f9
 800c584:	0800c5f9 	.word	0x0800c5f9
 800c588:	0800c5f9 	.word	0x0800c5f9
 800c58c:	0800c5c3 	.word	0x0800c5c3
 800c590:	0800c5f9 	.word	0x0800c5f9
 800c594:	0800c5f9 	.word	0x0800c5f9
 800c598:	0800c5f9 	.word	0x0800c5f9
 800c59c:	0800c5d5 	.word	0x0800c5d5
 800c5a0:	0800c5f9 	.word	0x0800c5f9
 800c5a4:	0800c5f9 	.word	0x0800c5f9
 800c5a8:	0800c5f9 	.word	0x0800c5f9
 800c5ac:	0800c5e7 	.word	0x0800c5e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68da      	ldr	r2, [r3, #12]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0202 	bic.w	r2, r2, #2
 800c5be:	60da      	str	r2, [r3, #12]
      break;
 800c5c0:	e01d      	b.n	800c5fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68da      	ldr	r2, [r3, #12]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0204 	bic.w	r2, r2, #4
 800c5d0:	60da      	str	r2, [r3, #12]
      break;
 800c5d2:	e014      	b.n	800c5fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 0208 	bic.w	r2, r2, #8
 800c5e2:	60da      	str	r2, [r3, #12]
      break;
 800c5e4:	e00b      	b.n	800c5fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f022 0210 	bic.w	r2, r2, #16
 800c5f4:	60da      	str	r2, [r3, #12]
      break;
 800c5f6:	e002      	b.n	800c5fe <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5fc:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f040 8081 	bne.w	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2200      	movs	r2, #0
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	4618      	mov	r0, r3
 800c610:	f001 f838 	bl	800d684 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a3e      	ldr	r2, [pc, #248]	; (800c714 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d013      	beq.n	800c646 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a3d      	ldr	r2, [pc, #244]	; (800c718 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00e      	beq.n	800c646 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a3b      	ldr	r2, [pc, #236]	; (800c71c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d009      	beq.n	800c646 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a3a      	ldr	r2, [pc, #232]	; (800c720 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d004      	beq.n	800c646 <HAL_TIM_PWM_Stop_IT+0xe6>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a38      	ldr	r2, [pc, #224]	; (800c724 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d101      	bne.n	800c64a <HAL_TIM_PWM_Stop_IT+0xea>
 800c646:	2301      	movs	r3, #1
 800c648:	e000      	b.n	800c64c <HAL_TIM_PWM_Stop_IT+0xec>
 800c64a:	2300      	movs	r3, #0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d017      	beq.n	800c680 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6a1a      	ldr	r2, [r3, #32]
 800c656:	f241 1311 	movw	r3, #4369	; 0x1111
 800c65a:	4013      	ands	r3, r2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10f      	bne.n	800c680 <HAL_TIM_PWM_Stop_IT+0x120>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6a1a      	ldr	r2, [r3, #32]
 800c666:	f244 4344 	movw	r3, #17476	; 0x4444
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d107      	bne.n	800c680 <HAL_TIM_PWM_Stop_IT+0x120>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c67e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	f241 1311 	movw	r3, #4369	; 0x1111
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10f      	bne.n	800c6b0 <HAL_TIM_PWM_Stop_IT+0x150>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6a1a      	ldr	r2, [r3, #32]
 800c696:	f244 4344 	movw	r3, #17476	; 0x4444
 800c69a:	4013      	ands	r3, r2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d107      	bne.n	800c6b0 <HAL_TIM_PWM_Stop_IT+0x150>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0201 	bic.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d104      	bne.n	800c6c0 <HAL_TIM_PWM_Stop_IT+0x160>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6be:	e023      	b.n	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d104      	bne.n	800c6d0 <HAL_TIM_PWM_Stop_IT+0x170>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6ce:	e01b      	b.n	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2b08      	cmp	r3, #8
 800c6d4:	d104      	bne.n	800c6e0 <HAL_TIM_PWM_Stop_IT+0x180>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6de:	e013      	b.n	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b0c      	cmp	r3, #12
 800c6e4:	d104      	bne.n	800c6f0 <HAL_TIM_PWM_Stop_IT+0x190>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ee:	e00b      	b.n	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b10      	cmp	r3, #16
 800c6f4:	d104      	bne.n	800c700 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6fe:	e003      	b.n	800c708 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	40012c00 	.word	0x40012c00
 800c718:	40013400 	.word	0x40013400
 800c71c:	40014000 	.word	0x40014000
 800c720:	40014400 	.word	0x40014400
 800c724:	40014800 	.word	0x40014800

0800c728 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e041      	b.n	800c7c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d106      	bne.n	800c756 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7f9 f9d3 	bl	8005afc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2202      	movs	r2, #2
 800c75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3304      	adds	r3, #4
 800c766:	4619      	mov	r1, r3
 800c768:	4610      	mov	r0, r2
 800c76a:	f000 fbf9 	bl	800cf60 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f022 0208 	bic.w	r2, r2, #8
 800c77c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6819      	ldr	r1, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2201      	movs	r2, #1
 800c792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7be:	2300      	movs	r3, #0
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e097      	b.n	800c90c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7f9 f8ab 	bl	800594c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	6812      	ldr	r2, [r2, #0]
 800c808:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c80c:	f023 0307 	bic.w	r3, r3, #7
 800c810:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f000 fb9f 	bl	800cf60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4313      	orrs	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84a:	f023 0303 	bic.w	r3, r3, #3
 800c84e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	689a      	ldr	r2, [r3, #8]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	4313      	orrs	r3, r2
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	4313      	orrs	r3, r2
 800c860:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c868:	f023 030c 	bic.w	r3, r3, #12
 800c86c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	4313      	orrs	r3, r2
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	4313      	orrs	r3, r2
 800c88a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	011a      	lsls	r2, r3, #4
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	031b      	lsls	r3, r3, #12
 800c898:	4313      	orrs	r3, r2
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c8a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c8ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	011b      	lsls	r3, r3, #4
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c924:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c92c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c934:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c93c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d110      	bne.n	800c966 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d102      	bne.n	800c950 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c94a:	7b7b      	ldrb	r3, [r7, #13]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d001      	beq.n	800c954 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e089      	b.n	800ca68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c964:	e031      	b.n	800c9ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d110      	bne.n	800c98e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d102      	bne.n	800c978 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c972:	7b3b      	ldrb	r3, [r7, #12]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d001      	beq.n	800c97c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c978:	2301      	movs	r3, #1
 800c97a:	e075      	b.n	800ca68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2202      	movs	r2, #2
 800c988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c98c:	e01d      	b.n	800c9ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d108      	bne.n	800c9a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c994:	7bbb      	ldrb	r3, [r7, #14]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d105      	bne.n	800c9a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c99a:	7b7b      	ldrb	r3, [r7, #13]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d102      	bne.n	800c9a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c9a0:	7b3b      	ldrb	r3, [r7, #12]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d001      	beq.n	800c9aa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e05e      	b.n	800ca68 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2202      	movs	r2, #2
 800c9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d003      	beq.n	800c9d8 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b04      	cmp	r3, #4
 800c9d4:	d010      	beq.n	800c9f8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c9d6:	e01f      	b.n	800ca18 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	2100      	movs	r1, #0
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fe4f 	bl	800d684 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68da      	ldr	r2, [r3, #12]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f042 0202 	orr.w	r2, r2, #2
 800c9f4:	60da      	str	r2, [r3, #12]
      break;
 800c9f6:	e02e      	b.n	800ca56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	2104      	movs	r1, #4
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fe3f 	bl	800d684 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	68da      	ldr	r2, [r3, #12]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f042 0204 	orr.w	r2, r2, #4
 800ca14:	60da      	str	r2, [r3, #12]
      break;
 800ca16:	e01e      	b.n	800ca56 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	2100      	movs	r1, #0
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 fe2f 	bl	800d684 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	2104      	movs	r1, #4
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fe28 	bl	800d684 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68da      	ldr	r2, [r3, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f042 0202 	orr.w	r2, r2, #2
 800ca42:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68da      	ldr	r2, [r3, #12]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f042 0204 	orr.w	r2, r2, #4
 800ca52:	60da      	str	r2, [r3, #12]
      break;
 800ca54:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f042 0201 	orr.w	r2, r2, #1
 800ca64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d020      	beq.n	800cad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f003 0302 	and.w	r3, r3, #2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d01b      	beq.n	800cad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f06f 0202 	mvn.w	r2, #2
 800caa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	f003 0303 	and.w	r3, r3, #3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d003      	beq.n	800cac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7f6 ff3c 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800cac0:	e005      	b.n	800cace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa38 	bl	800cf38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7f6 ff47 	bl	800395c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f003 0304 	and.w	r3, r3, #4
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d020      	beq.n	800cb20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d01b      	beq.n	800cb20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f06f 0204 	mvn.w	r2, #4
 800caf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2202      	movs	r2, #2
 800caf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d003      	beq.n	800cb0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7f6 ff16 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800cb0c:	e005      	b.n	800cb1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa12 	bl	800cf38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7f6 ff21 	bl	800395c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f003 0308 	and.w	r3, r3, #8
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d020      	beq.n	800cb6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f003 0308 	and.w	r3, r3, #8
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01b      	beq.n	800cb6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f06f 0208 	mvn.w	r2, #8
 800cb3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2204      	movs	r2, #4
 800cb42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	69db      	ldr	r3, [r3, #28]
 800cb4a:	f003 0303 	and.w	r3, r3, #3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d003      	beq.n	800cb5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7f6 fef0 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800cb58:	e005      	b.n	800cb66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f9ec 	bl	800cf38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7f6 fefb 	bl	800395c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f003 0310 	and.w	r3, r3, #16
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d020      	beq.n	800cbb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f003 0310 	and.w	r3, r3, #16
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01b      	beq.n	800cbb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f06f 0210 	mvn.w	r2, #16
 800cb88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2208      	movs	r2, #8
 800cb8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7f6 feca 	bl	8003938 <HAL_TIM_IC_CaptureCallback>
 800cba4:	e005      	b.n	800cbb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f9c6 	bl	800cf38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7f6 fed5 	bl	800395c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00c      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f003 0301 	and.w	r3, r3, #1
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d007      	beq.n	800cbdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f06f 0201 	mvn.w	r2, #1
 800cbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7f6 fee6 	bl	80039a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d104      	bne.n	800cbf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00c      	beq.n	800cc0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d007      	beq.n	800cc0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800cc02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 ff83 	bl	800db10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00c      	beq.n	800cc2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d007      	beq.n	800cc2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 ff7b 	bl	800db24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00c      	beq.n	800cc52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d007      	beq.n	800cc52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cc4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f97d 	bl	800cf4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	f003 0320 	and.w	r3, r3, #32
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00c      	beq.n	800cc76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f003 0320 	and.w	r3, r3, #32
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d007      	beq.n	800cc76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f06f 0220 	mvn.w	r2, #32
 800cc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 ff43 	bl	800dafc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00c      	beq.n	800cc9a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d007      	beq.n	800cc9a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cc92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 ff4f 	bl	800db38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00c      	beq.n	800ccbe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d007      	beq.n	800ccbe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ccb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 ff47 	bl	800db4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00c      	beq.n	800cce2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d007      	beq.n	800cce2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ccda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 ff3f 	bl	800db60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00c      	beq.n	800cd06 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d007      	beq.n	800cd06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ccfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 ff37 	bl	800db74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd06:	bf00      	nop
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
	...

0800cd10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d101      	bne.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	e0ff      	b.n	800cf2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b14      	cmp	r3, #20
 800cd3a:	f200 80f0 	bhi.w	800cf1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd3e:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd44:	0800cd99 	.word	0x0800cd99
 800cd48:	0800cf1f 	.word	0x0800cf1f
 800cd4c:	0800cf1f 	.word	0x0800cf1f
 800cd50:	0800cf1f 	.word	0x0800cf1f
 800cd54:	0800cdd9 	.word	0x0800cdd9
 800cd58:	0800cf1f 	.word	0x0800cf1f
 800cd5c:	0800cf1f 	.word	0x0800cf1f
 800cd60:	0800cf1f 	.word	0x0800cf1f
 800cd64:	0800ce1b 	.word	0x0800ce1b
 800cd68:	0800cf1f 	.word	0x0800cf1f
 800cd6c:	0800cf1f 	.word	0x0800cf1f
 800cd70:	0800cf1f 	.word	0x0800cf1f
 800cd74:	0800ce5b 	.word	0x0800ce5b
 800cd78:	0800cf1f 	.word	0x0800cf1f
 800cd7c:	0800cf1f 	.word	0x0800cf1f
 800cd80:	0800cf1f 	.word	0x0800cf1f
 800cd84:	0800ce9d 	.word	0x0800ce9d
 800cd88:	0800cf1f 	.word	0x0800cf1f
 800cd8c:	0800cf1f 	.word	0x0800cf1f
 800cd90:	0800cf1f 	.word	0x0800cf1f
 800cd94:	0800cedd 	.word	0x0800cedd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68b9      	ldr	r1, [r7, #8]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f97a 	bl	800d098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	699a      	ldr	r2, [r3, #24]
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0208 	orr.w	r2, r2, #8
 800cdb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	699a      	ldr	r2, [r3, #24]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0204 	bic.w	r2, r2, #4
 800cdc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6999      	ldr	r1, [r3, #24]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	691a      	ldr	r2, [r3, #16]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	430a      	orrs	r2, r1
 800cdd4:	619a      	str	r2, [r3, #24]
      break;
 800cdd6:	e0a5      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 f9ea 	bl	800d1b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	699a      	ldr	r2, [r3, #24]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	699a      	ldr	r2, [r3, #24]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6999      	ldr	r1, [r3, #24]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	021a      	lsls	r2, r3, #8
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	430a      	orrs	r2, r1
 800ce16:	619a      	str	r2, [r3, #24]
      break;
 800ce18:	e084      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fa53 	bl	800d2cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	69da      	ldr	r2, [r3, #28]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f042 0208 	orr.w	r2, r2, #8
 800ce34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69da      	ldr	r2, [r3, #28]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 0204 	bic.w	r2, r2, #4
 800ce44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69d9      	ldr	r1, [r3, #28]
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	691a      	ldr	r2, [r3, #16]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	61da      	str	r2, [r3, #28]
      break;
 800ce58:	e064      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fabb 	bl	800d3dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	69da      	ldr	r2, [r3, #28]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	69da      	ldr	r2, [r3, #28]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	69d9      	ldr	r1, [r3, #28]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	021a      	lsls	r2, r3, #8
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	61da      	str	r2, [r3, #28]
      break;
 800ce9a:	e043      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68b9      	ldr	r1, [r7, #8]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fb24 	bl	800d4f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f042 0208 	orr.w	r2, r2, #8
 800ceb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f022 0204 	bic.w	r2, r2, #4
 800cec6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	691a      	ldr	r2, [r3, #16]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ceda:	e023      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	68b9      	ldr	r1, [r7, #8]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 fb68 	bl	800d5b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	691b      	ldr	r3, [r3, #16]
 800cf12:	021a      	lsls	r2, r3, #8
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	430a      	orrs	r2, r1
 800cf1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cf1c:	e002      	b.n	800cf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	75fb      	strb	r3, [r7, #23]
      break;
 800cf22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop

0800cf38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4a42      	ldr	r2, [pc, #264]	; (800d07c <TIM_Base_SetConfig+0x11c>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d00f      	beq.n	800cf98 <TIM_Base_SetConfig+0x38>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf7e:	d00b      	beq.n	800cf98 <TIM_Base_SetConfig+0x38>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	4a3f      	ldr	r2, [pc, #252]	; (800d080 <TIM_Base_SetConfig+0x120>)
 800cf84:	4293      	cmp	r3, r2
 800cf86:	d007      	beq.n	800cf98 <TIM_Base_SetConfig+0x38>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a3e      	ldr	r2, [pc, #248]	; (800d084 <TIM_Base_SetConfig+0x124>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d003      	beq.n	800cf98 <TIM_Base_SetConfig+0x38>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a3d      	ldr	r2, [pc, #244]	; (800d088 <TIM_Base_SetConfig+0x128>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d108      	bne.n	800cfaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a33      	ldr	r2, [pc, #204]	; (800d07c <TIM_Base_SetConfig+0x11c>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d01b      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfb8:	d017      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a30      	ldr	r2, [pc, #192]	; (800d080 <TIM_Base_SetConfig+0x120>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d013      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	4a2f      	ldr	r2, [pc, #188]	; (800d084 <TIM_Base_SetConfig+0x124>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d00f      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a2e      	ldr	r2, [pc, #184]	; (800d088 <TIM_Base_SetConfig+0x128>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d00b      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a2d      	ldr	r2, [pc, #180]	; (800d08c <TIM_Base_SetConfig+0x12c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d007      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a2c      	ldr	r2, [pc, #176]	; (800d090 <TIM_Base_SetConfig+0x130>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d003      	beq.n	800cfea <TIM_Base_SetConfig+0x8a>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a2b      	ldr	r2, [pc, #172]	; (800d094 <TIM_Base_SetConfig+0x134>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d108      	bne.n	800cffc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	4313      	orrs	r3, r2
 800d008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	689a      	ldr	r2, [r3, #8]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a16      	ldr	r2, [pc, #88]	; (800d07c <TIM_Base_SetConfig+0x11c>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d00f      	beq.n	800d048 <TIM_Base_SetConfig+0xe8>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a17      	ldr	r2, [pc, #92]	; (800d088 <TIM_Base_SetConfig+0x128>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d00b      	beq.n	800d048 <TIM_Base_SetConfig+0xe8>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a16      	ldr	r2, [pc, #88]	; (800d08c <TIM_Base_SetConfig+0x12c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d007      	beq.n	800d048 <TIM_Base_SetConfig+0xe8>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a15      	ldr	r2, [pc, #84]	; (800d090 <TIM_Base_SetConfig+0x130>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d003      	beq.n	800d048 <TIM_Base_SetConfig+0xe8>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a14      	ldr	r2, [pc, #80]	; (800d094 <TIM_Base_SetConfig+0x134>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d103      	bne.n	800d050 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	691a      	ldr	r2, [r3, #16]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d105      	bne.n	800d06e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	691b      	ldr	r3, [r3, #16]
 800d066:	f023 0201 	bic.w	r2, r3, #1
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	611a      	str	r2, [r3, #16]
  }
}
 800d06e:	bf00      	nop
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	40012c00 	.word	0x40012c00
 800d080:	40000400 	.word	0x40000400
 800d084:	40000800 	.word	0x40000800
 800d088:	40013400 	.word	0x40013400
 800d08c:	40014000 	.word	0x40014000
 800d090:	40014400 	.word	0x40014400
 800d094:	40014800 	.word	0x40014800

0800d098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d098:	b480      	push	{r7}
 800d09a:	b087      	sub	sp, #28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a1b      	ldr	r3, [r3, #32]
 800d0ac:	f023 0201 	bic.w	r2, r3, #1
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f023 0303 	bic.w	r3, r3, #3
 800d0d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	f023 0302 	bic.w	r3, r3, #2
 800d0e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a2c      	ldr	r2, [pc, #176]	; (800d1a4 <TIM_OC1_SetConfig+0x10c>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d00f      	beq.n	800d118 <TIM_OC1_SetConfig+0x80>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4a2b      	ldr	r2, [pc, #172]	; (800d1a8 <TIM_OC1_SetConfig+0x110>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d00b      	beq.n	800d118 <TIM_OC1_SetConfig+0x80>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a2a      	ldr	r2, [pc, #168]	; (800d1ac <TIM_OC1_SetConfig+0x114>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d007      	beq.n	800d118 <TIM_OC1_SetConfig+0x80>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a29      	ldr	r2, [pc, #164]	; (800d1b0 <TIM_OC1_SetConfig+0x118>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d003      	beq.n	800d118 <TIM_OC1_SetConfig+0x80>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a28      	ldr	r2, [pc, #160]	; (800d1b4 <TIM_OC1_SetConfig+0x11c>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d10c      	bne.n	800d132 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	f023 0308 	bic.w	r3, r3, #8
 800d11e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	4313      	orrs	r3, r2
 800d128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f023 0304 	bic.w	r3, r3, #4
 800d130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a1b      	ldr	r2, [pc, #108]	; (800d1a4 <TIM_OC1_SetConfig+0x10c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d00f      	beq.n	800d15a <TIM_OC1_SetConfig+0xc2>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a1a      	ldr	r2, [pc, #104]	; (800d1a8 <TIM_OC1_SetConfig+0x110>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00b      	beq.n	800d15a <TIM_OC1_SetConfig+0xc2>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a19      	ldr	r2, [pc, #100]	; (800d1ac <TIM_OC1_SetConfig+0x114>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d007      	beq.n	800d15a <TIM_OC1_SetConfig+0xc2>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a18      	ldr	r2, [pc, #96]	; (800d1b0 <TIM_OC1_SetConfig+0x118>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d003      	beq.n	800d15a <TIM_OC1_SetConfig+0xc2>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a17      	ldr	r2, [pc, #92]	; (800d1b4 <TIM_OC1_SetConfig+0x11c>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d111      	bne.n	800d17e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	4313      	orrs	r3, r2
 800d172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	693a      	ldr	r2, [r7, #16]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	693a      	ldr	r2, [r7, #16]
 800d182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	697a      	ldr	r2, [r7, #20]
 800d196:	621a      	str	r2, [r3, #32]
}
 800d198:	bf00      	nop
 800d19a:	371c      	adds	r7, #28
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	40012c00 	.word	0x40012c00
 800d1a8:	40013400 	.word	0x40013400
 800d1ac:	40014000 	.word	0x40014000
 800d1b0:	40014400 	.word	0x40014400
 800d1b4:	40014800 	.word	0x40014800

0800d1b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	f023 0210 	bic.w	r2, r3, #16
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	021b      	lsls	r3, r3, #8
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0320 	bic.w	r3, r3, #32
 800d206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4313      	orrs	r3, r2
 800d212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a28      	ldr	r2, [pc, #160]	; (800d2b8 <TIM_OC2_SetConfig+0x100>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d003      	beq.n	800d224 <TIM_OC2_SetConfig+0x6c>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a27      	ldr	r2, [pc, #156]	; (800d2bc <TIM_OC2_SetConfig+0x104>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d10d      	bne.n	800d240 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d22a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	011b      	lsls	r3, r3, #4
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	4313      	orrs	r3, r2
 800d236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d23e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a1d      	ldr	r2, [pc, #116]	; (800d2b8 <TIM_OC2_SetConfig+0x100>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d00f      	beq.n	800d268 <TIM_OC2_SetConfig+0xb0>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a1c      	ldr	r2, [pc, #112]	; (800d2bc <TIM_OC2_SetConfig+0x104>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d00b      	beq.n	800d268 <TIM_OC2_SetConfig+0xb0>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	4a1b      	ldr	r2, [pc, #108]	; (800d2c0 <TIM_OC2_SetConfig+0x108>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d007      	beq.n	800d268 <TIM_OC2_SetConfig+0xb0>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a1a      	ldr	r2, [pc, #104]	; (800d2c4 <TIM_OC2_SetConfig+0x10c>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d003      	beq.n	800d268 <TIM_OC2_SetConfig+0xb0>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a19      	ldr	r2, [pc, #100]	; (800d2c8 <TIM_OC2_SetConfig+0x110>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d113      	bne.n	800d290 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d26e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	695b      	ldr	r3, [r3, #20]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	693a      	ldr	r2, [r7, #16]
 800d280:	4313      	orrs	r3, r2
 800d282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	697a      	ldr	r2, [r7, #20]
 800d2a8:	621a      	str	r2, [r3, #32]
}
 800d2aa:	bf00      	nop
 800d2ac:	371c      	adds	r7, #28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	40012c00 	.word	0x40012c00
 800d2bc:	40013400 	.word	0x40013400
 800d2c0:	40014000 	.word	0x40014000
 800d2c4:	40014400 	.word	0x40014400
 800d2c8:	40014800 	.word	0x40014800

0800d2cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	69db      	ldr	r3, [r3, #28]
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f023 0303 	bic.w	r3, r3, #3
 800d306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	4313      	orrs	r3, r2
 800d310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	021b      	lsls	r3, r3, #8
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	4313      	orrs	r3, r2
 800d324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a27      	ldr	r2, [pc, #156]	; (800d3c8 <TIM_OC3_SetConfig+0xfc>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d003      	beq.n	800d336 <TIM_OC3_SetConfig+0x6a>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a26      	ldr	r2, [pc, #152]	; (800d3cc <TIM_OC3_SetConfig+0x100>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d10d      	bne.n	800d352 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d33c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	021b      	lsls	r3, r3, #8
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	4313      	orrs	r3, r2
 800d348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a1c      	ldr	r2, [pc, #112]	; (800d3c8 <TIM_OC3_SetConfig+0xfc>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d00f      	beq.n	800d37a <TIM_OC3_SetConfig+0xae>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a1b      	ldr	r2, [pc, #108]	; (800d3cc <TIM_OC3_SetConfig+0x100>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d00b      	beq.n	800d37a <TIM_OC3_SetConfig+0xae>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a1a      	ldr	r2, [pc, #104]	; (800d3d0 <TIM_OC3_SetConfig+0x104>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d007      	beq.n	800d37a <TIM_OC3_SetConfig+0xae>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a19      	ldr	r2, [pc, #100]	; (800d3d4 <TIM_OC3_SetConfig+0x108>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d003      	beq.n	800d37a <TIM_OC3_SetConfig+0xae>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a18      	ldr	r2, [pc, #96]	; (800d3d8 <TIM_OC3_SetConfig+0x10c>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d113      	bne.n	800d3a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	695b      	ldr	r3, [r3, #20]
 800d38e:	011b      	lsls	r3, r3, #4
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	011b      	lsls	r3, r3, #4
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	697a      	ldr	r2, [r7, #20]
 800d3ba:	621a      	str	r2, [r3, #32]
}
 800d3bc:	bf00      	nop
 800d3be:	371c      	adds	r7, #28
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	40012c00 	.word	0x40012c00
 800d3cc:	40013400 	.word	0x40013400
 800d3d0:	40014000 	.word	0x40014000
 800d3d4:	40014400 	.word	0x40014400
 800d3d8:	40014800 	.word	0x40014800

0800d3dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a1b      	ldr	r3, [r3, #32]
 800d3f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	685b      	ldr	r3, [r3, #4]
 800d3fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	69db      	ldr	r3, [r3, #28]
 800d402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d40a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	021b      	lsls	r3, r3, #8
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	4313      	orrs	r3, r2
 800d422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d42a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	031b      	lsls	r3, r3, #12
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4313      	orrs	r3, r2
 800d436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a28      	ldr	r2, [pc, #160]	; (800d4dc <TIM_OC4_SetConfig+0x100>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d003      	beq.n	800d448 <TIM_OC4_SetConfig+0x6c>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a27      	ldr	r2, [pc, #156]	; (800d4e0 <TIM_OC4_SetConfig+0x104>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d10d      	bne.n	800d464 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d44e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	031b      	lsls	r3, r3, #12
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	4313      	orrs	r3, r2
 800d45a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a1d      	ldr	r2, [pc, #116]	; (800d4dc <TIM_OC4_SetConfig+0x100>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d00f      	beq.n	800d48c <TIM_OC4_SetConfig+0xb0>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a1c      	ldr	r2, [pc, #112]	; (800d4e0 <TIM_OC4_SetConfig+0x104>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d00b      	beq.n	800d48c <TIM_OC4_SetConfig+0xb0>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a1b      	ldr	r2, [pc, #108]	; (800d4e4 <TIM_OC4_SetConfig+0x108>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d007      	beq.n	800d48c <TIM_OC4_SetConfig+0xb0>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a1a      	ldr	r2, [pc, #104]	; (800d4e8 <TIM_OC4_SetConfig+0x10c>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d003      	beq.n	800d48c <TIM_OC4_SetConfig+0xb0>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a19      	ldr	r2, [pc, #100]	; (800d4ec <TIM_OC4_SetConfig+0x110>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d113      	bne.n	800d4b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d492:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d49a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	019b      	lsls	r3, r3, #6
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	019b      	lsls	r3, r3, #6
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	693a      	ldr	r2, [r7, #16]
 800d4b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	621a      	str	r2, [r3, #32]
}
 800d4ce:	bf00      	nop
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	40012c00 	.word	0x40012c00
 800d4e0:	40013400 	.word	0x40013400
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	40014400 	.word	0x40014400
 800d4ec:	40014800 	.word	0x40014800

0800d4f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6a1b      	ldr	r3, [r3, #32]
 800d504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	041b      	lsls	r3, r3, #16
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	4313      	orrs	r3, r2
 800d540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a17      	ldr	r2, [pc, #92]	; (800d5a4 <TIM_OC5_SetConfig+0xb4>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d00f      	beq.n	800d56a <TIM_OC5_SetConfig+0x7a>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a16      	ldr	r2, [pc, #88]	; (800d5a8 <TIM_OC5_SetConfig+0xb8>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00b      	beq.n	800d56a <TIM_OC5_SetConfig+0x7a>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a15      	ldr	r2, [pc, #84]	; (800d5ac <TIM_OC5_SetConfig+0xbc>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d007      	beq.n	800d56a <TIM_OC5_SetConfig+0x7a>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a14      	ldr	r2, [pc, #80]	; (800d5b0 <TIM_OC5_SetConfig+0xc0>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d003      	beq.n	800d56a <TIM_OC5_SetConfig+0x7a>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a13      	ldr	r2, [pc, #76]	; (800d5b4 <TIM_OC5_SetConfig+0xc4>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d109      	bne.n	800d57e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	697a      	ldr	r2, [r7, #20]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	697a      	ldr	r2, [r7, #20]
 800d582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	693a      	ldr	r2, [r7, #16]
 800d596:	621a      	str	r2, [r3, #32]
}
 800d598:	bf00      	nop
 800d59a:	371c      	adds	r7, #28
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr
 800d5a4:	40012c00 	.word	0x40012c00
 800d5a8:	40013400 	.word	0x40013400
 800d5ac:	40014000 	.word	0x40014000
 800d5b0:	40014400 	.word	0x40014400
 800d5b4:	40014800 	.word	0x40014800

0800d5b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a1b      	ldr	r3, [r3, #32]
 800d5cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d5e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	68fa      	ldr	r2, [r7, #12]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	051b      	lsls	r3, r3, #20
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	4313      	orrs	r3, r2
 800d60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a18      	ldr	r2, [pc, #96]	; (800d670 <TIM_OC6_SetConfig+0xb8>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d00f      	beq.n	800d634 <TIM_OC6_SetConfig+0x7c>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a17      	ldr	r2, [pc, #92]	; (800d674 <TIM_OC6_SetConfig+0xbc>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d00b      	beq.n	800d634 <TIM_OC6_SetConfig+0x7c>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a16      	ldr	r2, [pc, #88]	; (800d678 <TIM_OC6_SetConfig+0xc0>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d007      	beq.n	800d634 <TIM_OC6_SetConfig+0x7c>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a15      	ldr	r2, [pc, #84]	; (800d67c <TIM_OC6_SetConfig+0xc4>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d003      	beq.n	800d634 <TIM_OC6_SetConfig+0x7c>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a14      	ldr	r2, [pc, #80]	; (800d680 <TIM_OC6_SetConfig+0xc8>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d109      	bne.n	800d648 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d63a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	695b      	ldr	r3, [r3, #20]
 800d640:	029b      	lsls	r3, r3, #10
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	4313      	orrs	r3, r2
 800d646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	621a      	str	r2, [r3, #32]
}
 800d662:	bf00      	nop
 800d664:	371c      	adds	r7, #28
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	40012c00 	.word	0x40012c00
 800d674:	40013400 	.word	0x40013400
 800d678:	40014000 	.word	0x40014000
 800d67c:	40014400 	.word	0x40014400
 800d680:	40014800 	.word	0x40014800

0800d684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	f003 031f 	and.w	r3, r3, #31
 800d696:	2201      	movs	r2, #1
 800d698:	fa02 f303 	lsl.w	r3, r2, r3
 800d69c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6a1a      	ldr	r2, [r3, #32]
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	43db      	mvns	r3, r3
 800d6a6:	401a      	ands	r2, r3
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6a1a      	ldr	r2, [r3, #32]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	f003 031f 	and.w	r3, r3, #31
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	621a      	str	r2, [r3, #32]
}
 800d6c2:	bf00      	nop
 800d6c4:	371c      	adds	r7, #28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr
	...

0800d6d0 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d109      	bne.n	800d6f8 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	bf14      	ite	ne
 800d6f0:	2301      	movne	r3, #1
 800d6f2:	2300      	moveq	r3, #0
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	e022      	b.n	800d73e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	d109      	bne.n	800d712 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b01      	cmp	r3, #1
 800d708:	bf14      	ite	ne
 800d70a:	2301      	movne	r3, #1
 800d70c:	2300      	moveq	r3, #0
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	e015      	b.n	800d73e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b08      	cmp	r3, #8
 800d716:	d109      	bne.n	800d72c <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b01      	cmp	r3, #1
 800d722:	bf14      	ite	ne
 800d724:	2301      	movne	r3, #1
 800d726:	2300      	moveq	r3, #0
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	e008      	b.n	800d73e <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b01      	cmp	r3, #1
 800d736:	bf14      	ite	ne
 800d738:	2301      	movne	r3, #1
 800d73a:	2300      	moveq	r3, #0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	e0bc      	b.n	800d8c0 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d104      	bne.n	800d756 <HAL_TIMEx_PWMN_Start_IT+0x86>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2202      	movs	r2, #2
 800d750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d754:	e013      	b.n	800d77e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b04      	cmp	r3, #4
 800d75a:	d104      	bne.n	800d766 <HAL_TIMEx_PWMN_Start_IT+0x96>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d764:	e00b      	b.n	800d77e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b08      	cmp	r3, #8
 800d76a:	d104      	bne.n	800d776 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d774:	e003      	b.n	800d77e <HAL_TIMEx_PWMN_Start_IT+0xae>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2202      	movs	r2, #2
 800d77a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b0c      	cmp	r3, #12
 800d782:	d841      	bhi.n	800d808 <HAL_TIMEx_PWMN_Start_IT+0x138>
 800d784:	a201      	add	r2, pc, #4	; (adr r2, 800d78c <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800d786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78a:	bf00      	nop
 800d78c:	0800d7c1 	.word	0x0800d7c1
 800d790:	0800d809 	.word	0x0800d809
 800d794:	0800d809 	.word	0x0800d809
 800d798:	0800d809 	.word	0x0800d809
 800d79c:	0800d7d3 	.word	0x0800d7d3
 800d7a0:	0800d809 	.word	0x0800d809
 800d7a4:	0800d809 	.word	0x0800d809
 800d7a8:	0800d809 	.word	0x0800d809
 800d7ac:	0800d7e5 	.word	0x0800d7e5
 800d7b0:	0800d809 	.word	0x0800d809
 800d7b4:	0800d809 	.word	0x0800d809
 800d7b8:	0800d809 	.word	0x0800d809
 800d7bc:	0800d7f7 	.word	0x0800d7f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f042 0202 	orr.w	r2, r2, #2
 800d7ce:	60da      	str	r2, [r3, #12]
      break;
 800d7d0:	e01d      	b.n	800d80e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68da      	ldr	r2, [r3, #12]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0204 	orr.w	r2, r2, #4
 800d7e0:	60da      	str	r2, [r3, #12]
      break;
 800d7e2:	e014      	b.n	800d80e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0208 	orr.w	r2, r2, #8
 800d7f2:	60da      	str	r2, [r3, #12]
      break;
 800d7f4:	e00b      	b.n	800d80e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	68da      	ldr	r2, [r3, #12]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f042 0210 	orr.w	r2, r2, #16
 800d804:	60da      	str	r2, [r3, #12]
      break;
 800d806:	e002      	b.n	800d80e <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800d808:	2301      	movs	r3, #1
 800d80a:	73fb      	strb	r3, [r7, #15]
      break;
 800d80c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d154      	bne.n	800d8be <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68da      	ldr	r2, [r3, #12]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d822:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2204      	movs	r2, #4
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 f9ab 	bl	800db88 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a20      	ldr	r2, [pc, #128]	; (800d8c8 <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d018      	beq.n	800d87e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d854:	d013      	beq.n	800d87e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a1c      	ldr	r2, [pc, #112]	; (800d8cc <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d00e      	beq.n	800d87e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a1a      	ldr	r2, [pc, #104]	; (800d8d0 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d009      	beq.n	800d87e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a19      	ldr	r2, [pc, #100]	; (800d8d4 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d004      	beq.n	800d87e <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a17      	ldr	r2, [pc, #92]	; (800d8d8 <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d115      	bne.n	800d8aa <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	689a      	ldr	r2, [r3, #8]
 800d884:	4b15      	ldr	r3, [pc, #84]	; (800d8dc <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800d886:	4013      	ands	r3, r2
 800d888:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2b06      	cmp	r3, #6
 800d88e:	d015      	beq.n	800d8bc <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d896:	d011      	beq.n	800d8bc <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f042 0201 	orr.w	r2, r2, #1
 800d8a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8a8:	e008      	b.n	800d8bc <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f042 0201 	orr.w	r2, r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
 800d8ba:	e000      	b.n	800d8be <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	40012c00 	.word	0x40012c00
 800d8cc:	40000400 	.word	0x40000400
 800d8d0:	40000800 	.word	0x40000800
 800d8d4:	40013400 	.word	0x40013400
 800d8d8:	40014000 	.word	0x40014000
 800d8dc:	00010007 	.word	0x00010007

0800d8e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d101      	bne.n	800d8f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e065      	b.n	800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2202      	movs	r2, #2
 800d904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4a2c      	ldr	r2, [pc, #176]	; (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d91e:	4293      	cmp	r3, r2
 800d920:	d004      	beq.n	800d92c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a2b      	ldr	r2, [pc, #172]	; (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d108      	bne.n	800d93e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	4313      	orrs	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1b      	ldr	r2, [pc, #108]	; (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d018      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d96e:	d013      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d00e      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a17      	ldr	r2, [pc, #92]	; (800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d009      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a12      	ldr	r2, [pc, #72]	; (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d004      	beq.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a13      	ldr	r2, [pc, #76]	; (800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d10c      	bne.n	800d9b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	40012c00 	.word	0x40012c00
 800d9d4:	40013400 	.word	0x40013400
 800d9d8:	40000400 	.word	0x40000400
 800d9dc:	40000800 	.word	0x40000800
 800d9e0:	40014000 	.word	0x40014000

0800d9e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d101      	bne.n	800da00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	e073      	b.n	800dae8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	4313      	orrs	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	4313      	orrs	r3, r2
 800da22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da66:	4313      	orrs	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	041b      	lsls	r3, r3, #16
 800da76:	4313      	orrs	r3, r2
 800da78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	4313      	orrs	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a19      	ldr	r2, [pc, #100]	; (800daf4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d004      	beq.n	800da9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a18      	ldr	r2, [pc, #96]	; (800daf8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d11c      	bne.n	800dad6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa6:	051b      	lsls	r3, r3, #20
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac4:	4313      	orrs	r3, r2
 800dac6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad2:	4313      	orrs	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	40012c00 	.word	0x40012c00
 800daf8:	40013400 	.word	0x40013400

0800dafc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db18:	bf00      	nop
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	f003 030f 	and.w	r3, r3, #15
 800db9a:	2204      	movs	r2, #4
 800db9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dba0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6a1a      	ldr	r2, [r3, #32]
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	401a      	ands	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1a      	ldr	r2, [r3, #32]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f003 030f 	and.w	r3, r3, #15
 800dbba:	6879      	ldr	r1, [r7, #4]
 800dbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	621a      	str	r2, [r3, #32]
}
 800dbc6:	bf00      	nop
 800dbc8:	371c      	adds	r7, #28
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b082      	sub	sp, #8
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e042      	b.n	800dc6a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7f7 fffe 	bl	8005bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2224      	movs	r2, #36	; 0x24
 800dc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f022 0201 	bic.w	r2, r2, #1
 800dc12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fb89 	bl	800e334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f8ba 	bl	800dd9c <UART_SetConfig>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e01b      	b.n	800dc6a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689a      	ldr	r2, [r3, #8]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f042 0201 	orr.w	r2, r2, #1
 800dc60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fc08 	bl	800e478 <UART_CheckIdleState>
 800dc68:	4603      	mov	r3, r0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
	...

0800dc74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b091      	sub	sp, #68	; 0x44
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc88:	2b20      	cmp	r3, #32
 800dc8a:	d178      	bne.n	800dd7e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d002      	beq.n	800dc98 <HAL_UART_Transmit_IT+0x24>
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d101      	bne.n	800dc9c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	e071      	b.n	800dd80 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	88fa      	ldrh	r2, [r7, #6]
 800dca6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	88fa      	ldrh	r2, [r7, #6]
 800dcae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2221      	movs	r2, #33	; 0x21
 800dcc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcd0:	d12a      	bne.n	800dd28 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcda:	d107      	bne.n	800dcec <HAL_UART_Transmit_IT+0x78>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d103      	bne.n	800dcec <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4a29      	ldr	r2, [pc, #164]	; (800dd8c <HAL_UART_Transmit_IT+0x118>)
 800dce8:	679a      	str	r2, [r3, #120]	; 0x78
 800dcea:	e002      	b.n	800dcf2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	4a28      	ldr	r2, [pc, #160]	; (800dd90 <HAL_UART_Transmit_IT+0x11c>)
 800dcf0:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dd08:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd12:	637a      	str	r2, [r7, #52]	; 0x34
 800dd14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e5      	bne.n	800dcf2 <HAL_UART_Transmit_IT+0x7e>
 800dd26:	e028      	b.n	800dd7a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd30:	d107      	bne.n	800dd42 <HAL_UART_Transmit_IT+0xce>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	691b      	ldr	r3, [r3, #16]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d103      	bne.n	800dd42 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	4a15      	ldr	r2, [pc, #84]	; (800dd94 <HAL_UART_Transmit_IT+0x120>)
 800dd3e:	679a      	str	r2, [r3, #120]	; 0x78
 800dd40:	e002      	b.n	800dd48 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4a14      	ldr	r2, [pc, #80]	; (800dd98 <HAL_UART_Transmit_IT+0x124>)
 800dd46:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	e853 3f00 	ldrex	r3, [r3]
 800dd54:	613b      	str	r3, [r7, #16]
   return(result);
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	461a      	mov	r2, r3
 800dd64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd66:	623b      	str	r3, [r7, #32]
 800dd68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6a:	69f9      	ldr	r1, [r7, #28]
 800dd6c:	6a3a      	ldr	r2, [r7, #32]
 800dd6e:	e841 2300 	strex	r3, r2, [r1]
 800dd72:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1e6      	bne.n	800dd48 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e000      	b.n	800dd80 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800dd7e:	2302      	movs	r3, #2
  }
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3744      	adds	r7, #68	; 0x44
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	0800e9cd 	.word	0x0800e9cd
 800dd90:	0800e8ed 	.word	0x0800e8ed
 800dd94:	0800e82b 	.word	0x0800e82b
 800dd98:	0800e773 	.word	0x0800e773

0800dd9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dda0:	b08c      	sub	sp, #48	; 0x30
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	689a      	ldr	r2, [r3, #8]
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	4bab      	ldr	r3, [pc, #684]	; (800e078 <UART_SetConfig+0x2dc>)
 800ddcc:	4013      	ands	r3, r2
 800ddce:	697a      	ldr	r2, [r7, #20]
 800ddd0:	6812      	ldr	r2, [r2, #0]
 800ddd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddd4:	430b      	orrs	r3, r1
 800ddd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	430a      	orrs	r2, r1
 800ddec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4aa0      	ldr	r2, [pc, #640]	; (800e07c <UART_SetConfig+0x2e0>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d004      	beq.n	800de08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de04:	4313      	orrs	r3, r2
 800de06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800de12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	6812      	ldr	r2, [r2, #0]
 800de1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de1c:	430b      	orrs	r3, r1
 800de1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	f023 010f 	bic.w	r1, r3, #15
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a91      	ldr	r2, [pc, #580]	; (800e080 <UART_SetConfig+0x2e4>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d125      	bne.n	800de8c <UART_SetConfig+0xf0>
 800de40:	4b90      	ldr	r3, [pc, #576]	; (800e084 <UART_SetConfig+0x2e8>)
 800de42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de46:	f003 0303 	and.w	r3, r3, #3
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d81a      	bhi.n	800de84 <UART_SetConfig+0xe8>
 800de4e:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <UART_SetConfig+0xb8>)
 800de50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de54:	0800de65 	.word	0x0800de65
 800de58:	0800de75 	.word	0x0800de75
 800de5c:	0800de6d 	.word	0x0800de6d
 800de60:	0800de7d 	.word	0x0800de7d
 800de64:	2301      	movs	r3, #1
 800de66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de6a:	e0d6      	b.n	800e01a <UART_SetConfig+0x27e>
 800de6c:	2302      	movs	r3, #2
 800de6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de72:	e0d2      	b.n	800e01a <UART_SetConfig+0x27e>
 800de74:	2304      	movs	r3, #4
 800de76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de7a:	e0ce      	b.n	800e01a <UART_SetConfig+0x27e>
 800de7c:	2308      	movs	r3, #8
 800de7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de82:	e0ca      	b.n	800e01a <UART_SetConfig+0x27e>
 800de84:	2310      	movs	r3, #16
 800de86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de8a:	e0c6      	b.n	800e01a <UART_SetConfig+0x27e>
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a7d      	ldr	r2, [pc, #500]	; (800e088 <UART_SetConfig+0x2ec>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d138      	bne.n	800df08 <UART_SetConfig+0x16c>
 800de96:	4b7b      	ldr	r3, [pc, #492]	; (800e084 <UART_SetConfig+0x2e8>)
 800de98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de9c:	f003 030c 	and.w	r3, r3, #12
 800dea0:	2b0c      	cmp	r3, #12
 800dea2:	d82d      	bhi.n	800df00 <UART_SetConfig+0x164>
 800dea4:	a201      	add	r2, pc, #4	; (adr r2, 800deac <UART_SetConfig+0x110>)
 800dea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deaa:	bf00      	nop
 800deac:	0800dee1 	.word	0x0800dee1
 800deb0:	0800df01 	.word	0x0800df01
 800deb4:	0800df01 	.word	0x0800df01
 800deb8:	0800df01 	.word	0x0800df01
 800debc:	0800def1 	.word	0x0800def1
 800dec0:	0800df01 	.word	0x0800df01
 800dec4:	0800df01 	.word	0x0800df01
 800dec8:	0800df01 	.word	0x0800df01
 800decc:	0800dee9 	.word	0x0800dee9
 800ded0:	0800df01 	.word	0x0800df01
 800ded4:	0800df01 	.word	0x0800df01
 800ded8:	0800df01 	.word	0x0800df01
 800dedc:	0800def9 	.word	0x0800def9
 800dee0:	2300      	movs	r3, #0
 800dee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dee6:	e098      	b.n	800e01a <UART_SetConfig+0x27e>
 800dee8:	2302      	movs	r3, #2
 800deea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800deee:	e094      	b.n	800e01a <UART_SetConfig+0x27e>
 800def0:	2304      	movs	r3, #4
 800def2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800def6:	e090      	b.n	800e01a <UART_SetConfig+0x27e>
 800def8:	2308      	movs	r3, #8
 800defa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800defe:	e08c      	b.n	800e01a <UART_SetConfig+0x27e>
 800df00:	2310      	movs	r3, #16
 800df02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df06:	e088      	b.n	800e01a <UART_SetConfig+0x27e>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a5f      	ldr	r2, [pc, #380]	; (800e08c <UART_SetConfig+0x2f0>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d125      	bne.n	800df5e <UART_SetConfig+0x1c2>
 800df12:	4b5c      	ldr	r3, [pc, #368]	; (800e084 <UART_SetConfig+0x2e8>)
 800df14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800df1c:	2b30      	cmp	r3, #48	; 0x30
 800df1e:	d016      	beq.n	800df4e <UART_SetConfig+0x1b2>
 800df20:	2b30      	cmp	r3, #48	; 0x30
 800df22:	d818      	bhi.n	800df56 <UART_SetConfig+0x1ba>
 800df24:	2b20      	cmp	r3, #32
 800df26:	d00a      	beq.n	800df3e <UART_SetConfig+0x1a2>
 800df28:	2b20      	cmp	r3, #32
 800df2a:	d814      	bhi.n	800df56 <UART_SetConfig+0x1ba>
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <UART_SetConfig+0x19a>
 800df30:	2b10      	cmp	r3, #16
 800df32:	d008      	beq.n	800df46 <UART_SetConfig+0x1aa>
 800df34:	e00f      	b.n	800df56 <UART_SetConfig+0x1ba>
 800df36:	2300      	movs	r3, #0
 800df38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df3c:	e06d      	b.n	800e01a <UART_SetConfig+0x27e>
 800df3e:	2302      	movs	r3, #2
 800df40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df44:	e069      	b.n	800e01a <UART_SetConfig+0x27e>
 800df46:	2304      	movs	r3, #4
 800df48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df4c:	e065      	b.n	800e01a <UART_SetConfig+0x27e>
 800df4e:	2308      	movs	r3, #8
 800df50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df54:	e061      	b.n	800e01a <UART_SetConfig+0x27e>
 800df56:	2310      	movs	r3, #16
 800df58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df5c:	e05d      	b.n	800e01a <UART_SetConfig+0x27e>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a4b      	ldr	r2, [pc, #300]	; (800e090 <UART_SetConfig+0x2f4>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d125      	bne.n	800dfb4 <UART_SetConfig+0x218>
 800df68:	4b46      	ldr	r3, [pc, #280]	; (800e084 <UART_SetConfig+0x2e8>)
 800df6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800df72:	2bc0      	cmp	r3, #192	; 0xc0
 800df74:	d016      	beq.n	800dfa4 <UART_SetConfig+0x208>
 800df76:	2bc0      	cmp	r3, #192	; 0xc0
 800df78:	d818      	bhi.n	800dfac <UART_SetConfig+0x210>
 800df7a:	2b80      	cmp	r3, #128	; 0x80
 800df7c:	d00a      	beq.n	800df94 <UART_SetConfig+0x1f8>
 800df7e:	2b80      	cmp	r3, #128	; 0x80
 800df80:	d814      	bhi.n	800dfac <UART_SetConfig+0x210>
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <UART_SetConfig+0x1f0>
 800df86:	2b40      	cmp	r3, #64	; 0x40
 800df88:	d008      	beq.n	800df9c <UART_SetConfig+0x200>
 800df8a:	e00f      	b.n	800dfac <UART_SetConfig+0x210>
 800df8c:	2300      	movs	r3, #0
 800df8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df92:	e042      	b.n	800e01a <UART_SetConfig+0x27e>
 800df94:	2302      	movs	r3, #2
 800df96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800df9a:	e03e      	b.n	800e01a <UART_SetConfig+0x27e>
 800df9c:	2304      	movs	r3, #4
 800df9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfa2:	e03a      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfa4:	2308      	movs	r3, #8
 800dfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfaa:	e036      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfac:	2310      	movs	r3, #16
 800dfae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfb2:	e032      	b.n	800e01a <UART_SetConfig+0x27e>
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a30      	ldr	r2, [pc, #192]	; (800e07c <UART_SetConfig+0x2e0>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d12a      	bne.n	800e014 <UART_SetConfig+0x278>
 800dfbe:	4b31      	ldr	r3, [pc, #196]	; (800e084 <UART_SetConfig+0x2e8>)
 800dfc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dfc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfcc:	d01a      	beq.n	800e004 <UART_SetConfig+0x268>
 800dfce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dfd2:	d81b      	bhi.n	800e00c <UART_SetConfig+0x270>
 800dfd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfd8:	d00c      	beq.n	800dff4 <UART_SetConfig+0x258>
 800dfda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dfde:	d815      	bhi.n	800e00c <UART_SetConfig+0x270>
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d003      	beq.n	800dfec <UART_SetConfig+0x250>
 800dfe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfe8:	d008      	beq.n	800dffc <UART_SetConfig+0x260>
 800dfea:	e00f      	b.n	800e00c <UART_SetConfig+0x270>
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dff2:	e012      	b.n	800e01a <UART_SetConfig+0x27e>
 800dff4:	2302      	movs	r3, #2
 800dff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dffa:	e00e      	b.n	800e01a <UART_SetConfig+0x27e>
 800dffc:	2304      	movs	r3, #4
 800dffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e002:	e00a      	b.n	800e01a <UART_SetConfig+0x27e>
 800e004:	2308      	movs	r3, #8
 800e006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e00a:	e006      	b.n	800e01a <UART_SetConfig+0x27e>
 800e00c:	2310      	movs	r3, #16
 800e00e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e012:	e002      	b.n	800e01a <UART_SetConfig+0x27e>
 800e014:	2310      	movs	r3, #16
 800e016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4a17      	ldr	r2, [pc, #92]	; (800e07c <UART_SetConfig+0x2e0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	f040 80a8 	bne.w	800e176 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	d834      	bhi.n	800e098 <UART_SetConfig+0x2fc>
 800e02e:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <UART_SetConfig+0x298>)
 800e030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e034:	0800e059 	.word	0x0800e059
 800e038:	0800e099 	.word	0x0800e099
 800e03c:	0800e061 	.word	0x0800e061
 800e040:	0800e099 	.word	0x0800e099
 800e044:	0800e067 	.word	0x0800e067
 800e048:	0800e099 	.word	0x0800e099
 800e04c:	0800e099 	.word	0x0800e099
 800e050:	0800e099 	.word	0x0800e099
 800e054:	0800e06f 	.word	0x0800e06f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e058:	f7fd f878 	bl	800b14c <HAL_RCC_GetPCLK1Freq>
 800e05c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e05e:	e021      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e060:	4b0c      	ldr	r3, [pc, #48]	; (800e094 <UART_SetConfig+0x2f8>)
 800e062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e064:	e01e      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e066:	f7fd f803 	bl	800b070 <HAL_RCC_GetSysClockFreq>
 800e06a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e06c:	e01a      	b.n	800e0a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e074:	e016      	b.n	800e0a4 <UART_SetConfig+0x308>
 800e076:	bf00      	nop
 800e078:	cfff69f3 	.word	0xcfff69f3
 800e07c:	40008000 	.word	0x40008000
 800e080:	40013800 	.word	0x40013800
 800e084:	40021000 	.word	0x40021000
 800e088:	40004400 	.word	0x40004400
 800e08c:	40004800 	.word	0x40004800
 800e090:	40004c00 	.word	0x40004c00
 800e094:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e098:	2300      	movs	r3, #0
 800e09a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e0a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	f000 812a 	beq.w	800e300 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b0:	4a9e      	ldr	r2, [pc, #632]	; (800e32c <UART_SetConfig+0x590>)
 800e0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	685a      	ldr	r2, [r3, #4]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	4413      	add	r3, r2
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d305      	bcc.n	800e0dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0d6:	69ba      	ldr	r2, [r7, #24]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d903      	bls.n	800e0e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e0e2:	e10d      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	60bb      	str	r3, [r7, #8]
 800e0ea:	60fa      	str	r2, [r7, #12]
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f0:	4a8e      	ldr	r2, [pc, #568]	; (800e32c <UART_SetConfig+0x590>)
 800e0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	603b      	str	r3, [r7, #0]
 800e0fc:	607a      	str	r2, [r7, #4]
 800e0fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e106:	f7f2 fde7 	bl	8000cd8 <__aeabi_uldivmod>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	4610      	mov	r0, r2
 800e110:	4619      	mov	r1, r3
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	f04f 0300 	mov.w	r3, #0
 800e11a:	020b      	lsls	r3, r1, #8
 800e11c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e120:	0202      	lsls	r2, r0, #8
 800e122:	6979      	ldr	r1, [r7, #20]
 800e124:	6849      	ldr	r1, [r1, #4]
 800e126:	0849      	lsrs	r1, r1, #1
 800e128:	2000      	movs	r0, #0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4605      	mov	r5, r0
 800e12e:	eb12 0804 	adds.w	r8, r2, r4
 800e132:	eb43 0905 	adc.w	r9, r3, r5
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	469a      	mov	sl, r3
 800e13e:	4693      	mov	fp, r2
 800e140:	4652      	mov	r2, sl
 800e142:	465b      	mov	r3, fp
 800e144:	4640      	mov	r0, r8
 800e146:	4649      	mov	r1, r9
 800e148:	f7f2 fdc6 	bl	8000cd8 <__aeabi_uldivmod>
 800e14c:	4602      	mov	r2, r0
 800e14e:	460b      	mov	r3, r1
 800e150:	4613      	mov	r3, r2
 800e152:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e15a:	d308      	bcc.n	800e16e <UART_SetConfig+0x3d2>
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e162:	d204      	bcs.n	800e16e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6a3a      	ldr	r2, [r7, #32]
 800e16a:	60da      	str	r2, [r3, #12]
 800e16c:	e0c8      	b.n	800e300 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e174:	e0c4      	b.n	800e300 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e17e:	d167      	bne.n	800e250 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800e180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e184:	2b08      	cmp	r3, #8
 800e186:	d828      	bhi.n	800e1da <UART_SetConfig+0x43e>
 800e188:	a201      	add	r2, pc, #4	; (adr r2, 800e190 <UART_SetConfig+0x3f4>)
 800e18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18e:	bf00      	nop
 800e190:	0800e1b5 	.word	0x0800e1b5
 800e194:	0800e1bd 	.word	0x0800e1bd
 800e198:	0800e1c5 	.word	0x0800e1c5
 800e19c:	0800e1db 	.word	0x0800e1db
 800e1a0:	0800e1cb 	.word	0x0800e1cb
 800e1a4:	0800e1db 	.word	0x0800e1db
 800e1a8:	0800e1db 	.word	0x0800e1db
 800e1ac:	0800e1db 	.word	0x0800e1db
 800e1b0:	0800e1d3 	.word	0x0800e1d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1b4:	f7fc ffca 	bl	800b14c <HAL_RCC_GetPCLK1Freq>
 800e1b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e1ba:	e014      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1bc:	f7fc ffdc 	bl	800b178 <HAL_RCC_GetPCLK2Freq>
 800e1c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e1c2:	e010      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e1c4:	4b5a      	ldr	r3, [pc, #360]	; (800e330 <UART_SetConfig+0x594>)
 800e1c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e1c8:	e00d      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e1ca:	f7fc ff51 	bl	800b070 <HAL_RCC_GetSysClockFreq>
 800e1ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e1d0:	e009      	b.n	800e1e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e1d8:	e005      	b.n	800e1e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e1e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f000 8089 	beq.w	800e300 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f2:	4a4e      	ldr	r2, [pc, #312]	; (800e32c <UART_SetConfig+0x590>)
 800e1f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e200:	005a      	lsls	r2, r3, #1
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	085b      	lsrs	r3, r3, #1
 800e208:	441a      	add	r2, r3
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e212:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e214:	6a3b      	ldr	r3, [r7, #32]
 800e216:	2b0f      	cmp	r3, #15
 800e218:	d916      	bls.n	800e248 <UART_SetConfig+0x4ac>
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e220:	d212      	bcs.n	800e248 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f023 030f 	bic.w	r3, r3, #15
 800e22a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	085b      	lsrs	r3, r3, #1
 800e230:	b29b      	uxth	r3, r3
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	b29a      	uxth	r2, r3
 800e238:	8bfb      	ldrh	r3, [r7, #30]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	8bfa      	ldrh	r2, [r7, #30]
 800e244:	60da      	str	r2, [r3, #12]
 800e246:	e05b      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e24e:	e057      	b.n	800e300 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e250:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e254:	2b08      	cmp	r3, #8
 800e256:	d828      	bhi.n	800e2aa <UART_SetConfig+0x50e>
 800e258:	a201      	add	r2, pc, #4	; (adr r2, 800e260 <UART_SetConfig+0x4c4>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e285 	.word	0x0800e285
 800e264:	0800e28d 	.word	0x0800e28d
 800e268:	0800e295 	.word	0x0800e295
 800e26c:	0800e2ab 	.word	0x0800e2ab
 800e270:	0800e29b 	.word	0x0800e29b
 800e274:	0800e2ab 	.word	0x0800e2ab
 800e278:	0800e2ab 	.word	0x0800e2ab
 800e27c:	0800e2ab 	.word	0x0800e2ab
 800e280:	0800e2a3 	.word	0x0800e2a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e284:	f7fc ff62 	bl	800b14c <HAL_RCC_GetPCLK1Freq>
 800e288:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e28a:	e014      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e28c:	f7fc ff74 	bl	800b178 <HAL_RCC_GetPCLK2Freq>
 800e290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e292:	e010      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e294:	4b26      	ldr	r3, [pc, #152]	; (800e330 <UART_SetConfig+0x594>)
 800e296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e298:	e00d      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e29a:	f7fc fee9 	bl	800b070 <HAL_RCC_GetSysClockFreq>
 800e29e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e2a0:	e009      	b.n	800e2b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e2a8:	e005      	b.n	800e2b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e2b4:	bf00      	nop
    }

    if (pclk != 0U)
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d021      	beq.n	800e300 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c0:	4a1a      	ldr	r2, [pc, #104]	; (800e32c <UART_SetConfig+0x590>)
 800e2c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	441a      	add	r2, r3
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d909      	bls.n	800e2fa <UART_SetConfig+0x55e>
 800e2e6:	6a3b      	ldr	r3, [r7, #32]
 800e2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ec:	d205      	bcs.n	800e2fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	60da      	str	r2, [r3, #12]
 800e2f8:	e002      	b.n	800e300 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2201      	movs	r2, #1
 800e304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2200      	movs	r2, #0
 800e314:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2200      	movs	r2, #0
 800e31a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e31c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e320:	4618      	mov	r0, r3
 800e322:	3730      	adds	r7, #48	; 0x30
 800e324:	46bd      	mov	sp, r7
 800e326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e32a:	bf00      	nop
 800e32c:	08015750 	.word	0x08015750
 800e330:	00f42400 	.word	0x00f42400

0800e334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e340:	f003 0308 	and.w	r3, r3, #8
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	430a      	orrs	r2, r1
 800e35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	430a      	orrs	r2, r1
 800e37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e384:	f003 0302 	and.w	r3, r3, #2
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00a      	beq.n	800e3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a6:	f003 0304 	and.w	r3, r3, #4
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00a      	beq.n	800e3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c8:	f003 0310 	and.w	r3, r3, #16
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00a      	beq.n	800e3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	430a      	orrs	r2, r1
 800e3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00a      	beq.n	800e408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	430a      	orrs	r2, r1
 800e406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01a      	beq.n	800e44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	430a      	orrs	r2, r1
 800e428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e432:	d10a      	bne.n	800e44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	430a      	orrs	r2, r1
 800e448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00a      	beq.n	800e46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	430a      	orrs	r2, r1
 800e46a:	605a      	str	r2, [r3, #4]
  }
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b098      	sub	sp, #96	; 0x60
 800e47c:	af02      	add	r7, sp, #8
 800e47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e488:	f7f8 fa34 	bl	80068f4 <HAL_GetTick>
 800e48c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f003 0308 	and.w	r3, r3, #8
 800e498:	2b08      	cmp	r3, #8
 800e49a:	d12f      	bne.n	800e4fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e49c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f88e 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d022      	beq.n	800e4fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	e853 3f00 	ldrex	r3, [r3]
 800e4c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4ca:	653b      	str	r3, [r7, #80]	; 0x50
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e4d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4dc:	e841 2300 	strex	r3, r2, [r1]
 800e4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1e6      	bne.n	800e4b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	e063      	b.n	800e5c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0304 	and.w	r3, r3, #4
 800e506:	2b04      	cmp	r3, #4
 800e508:	d149      	bne.n	800e59e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e50a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e512:	2200      	movs	r2, #0
 800e514:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f857 	bl	800e5cc <UART_WaitOnFlagUntilTimeout>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d03c      	beq.n	800e59e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	623b      	str	r3, [r7, #32]
   return(result);
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e538:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e542:	633b      	str	r3, [r7, #48]	; 0x30
 800e544:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e6      	bne.n	800e524 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3308      	adds	r3, #8
 800e55c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	e853 3f00 	ldrex	r3, [r3]
 800e564:	60fb      	str	r3, [r7, #12]
   return(result);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f023 0301 	bic.w	r3, r3, #1
 800e56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3308      	adds	r3, #8
 800e574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e576:	61fa      	str	r2, [r7, #28]
 800e578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57a:	69b9      	ldr	r1, [r7, #24]
 800e57c:	69fa      	ldr	r2, [r7, #28]
 800e57e:	e841 2300 	strex	r3, r2, [r1]
 800e582:	617b      	str	r3, [r7, #20]
   return(result);
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1e5      	bne.n	800e556 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e59a:	2303      	movs	r3, #3
 800e59c:	e012      	b.n	800e5c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2220      	movs	r2, #32
 800e5a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e5c2:	2300      	movs	r3, #0
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3758      	adds	r7, #88	; 0x58
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	603b      	str	r3, [r7, #0]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5dc:	e04f      	b.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e4:	d04b      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5e6:	f7f8 f985 	bl	80068f4 <HAL_GetTick>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	1ad3      	subs	r3, r2, r3
 800e5f0:	69ba      	ldr	r2, [r7, #24]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d302      	bcc.n	800e5fc <UART_WaitOnFlagUntilTimeout+0x30>
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e04e      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f003 0304 	and.w	r3, r3, #4
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d037      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b80      	cmp	r3, #128	; 0x80
 800e612:	d034      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b40      	cmp	r3, #64	; 0x40
 800e618:	d031      	beq.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	f003 0308 	and.w	r3, r3, #8
 800e624:	2b08      	cmp	r3, #8
 800e626:	d110      	bne.n	800e64a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2208      	movs	r2, #8
 800e62e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 f838 	bl	800e6a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2208      	movs	r2, #8
 800e63a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2200      	movs	r2, #0
 800e642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e029      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	69db      	ldr	r3, [r3, #28]
 800e650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e658:	d111      	bne.n	800e67e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 f81e 	bl	800e6a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2220      	movs	r2, #32
 800e66e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e67a:	2303      	movs	r3, #3
 800e67c:	e00f      	b.n	800e69e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69da      	ldr	r2, [r3, #28]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	4013      	ands	r3, r2
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	bf0c      	ite	eq
 800e68e:	2301      	moveq	r3, #1
 800e690:	2300      	movne	r3, #0
 800e692:	b2db      	uxtb	r3, r3
 800e694:	461a      	mov	r2, r3
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d0a0      	beq.n	800e5de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6a6:	b480      	push	{r7}
 800e6a8:	b095      	sub	sp, #84	; 0x54
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	e853 3f00 	ldrex	r3, [r3]
 800e6ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6cc:	643b      	str	r3, [r7, #64]	; 0x40
 800e6ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e6d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6d4:	e841 2300 	strex	r3, r2, [r1]
 800e6d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1e6      	bne.n	800e6ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3308      	adds	r3, #8
 800e6e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e8:	6a3b      	ldr	r3, [r7, #32]
 800e6ea:	e853 3f00 	ldrex	r3, [r3]
 800e6ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6f6:	f023 0301 	bic.w	r3, r3, #1
 800e6fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3308      	adds	r3, #8
 800e702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e704:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e70c:	e841 2300 	strex	r3, r2, [r1]
 800e710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1e3      	bne.n	800e6e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d118      	bne.n	800e752 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	e853 3f00 	ldrex	r3, [r3]
 800e72c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f023 0310 	bic.w	r3, r3, #16
 800e734:	647b      	str	r3, [r7, #68]	; 0x44
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	461a      	mov	r2, r3
 800e73c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e73e:	61bb      	str	r3, [r7, #24]
 800e740:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e742:	6979      	ldr	r1, [r7, #20]
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	e841 2300 	strex	r3, r2, [r1]
 800e74a:	613b      	str	r3, [r7, #16]
   return(result);
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1e6      	bne.n	800e720 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2220      	movs	r2, #32
 800e756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e766:	bf00      	nop
 800e768:	3754      	adds	r7, #84	; 0x54
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr

0800e772 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e772:	b480      	push	{r7}
 800e774:	b08f      	sub	sp, #60	; 0x3c
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e780:	2b21      	cmp	r3, #33	; 0x21
 800e782:	d14c      	bne.n	800e81e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d132      	bne.n	800e7f6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	e853 3f00 	ldrex	r3, [r3]
 800e79c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7b6:	e841 2300 	strex	r3, r2, [r1]
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1e6      	bne.n	800e790 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	e853 3f00 	ldrex	r3, [r3]
 800e7ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	461a      	mov	r2, r3
 800e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e0:	61bb      	str	r3, [r7, #24]
 800e7e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e4:	6979      	ldr	r1, [r7, #20]
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	e841 2300 	strex	r3, r2, [r1]
 800e7ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1e6      	bne.n	800e7c2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e7f4:	e013      	b.n	800e81e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7fa:	781a      	ldrb	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e812:	b29b      	uxth	r3, r3
 800e814:	3b01      	subs	r3, #1
 800e816:	b29a      	uxth	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e81e:	bf00      	nop
 800e820:	373c      	adds	r7, #60	; 0x3c
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b091      	sub	sp, #68	; 0x44
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e838:	2b21      	cmp	r3, #33	; 0x21
 800e83a:	d151      	bne.n	800e8e0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e842:	b29b      	uxth	r3, r3
 800e844:	2b00      	cmp	r3, #0
 800e846:	d132      	bne.n	800e8ae <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	e853 3f00 	ldrex	r3, [r3]
 800e854:	623b      	str	r3, [r7, #32]
   return(result);
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e85c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	461a      	mov	r2, r3
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	633b      	str	r3, [r7, #48]	; 0x30
 800e868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e6      	bne.n	800e848 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	60fb      	str	r3, [r7, #12]
   return(result);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88e:	637b      	str	r3, [r7, #52]	; 0x34
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e898:	61fb      	str	r3, [r7, #28]
 800e89a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89c:	69b9      	ldr	r1, [r7, #24]
 800e89e:	69fa      	ldr	r2, [r7, #28]
 800e8a0:	e841 2300 	strex	r3, r2, [r1]
 800e8a4:	617b      	str	r3, [r7, #20]
   return(result);
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1e6      	bne.n	800e87a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e8ac:	e018      	b.n	800e8e0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8c2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8c8:	1c9a      	adds	r2, r3, #2
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8d4:	b29b      	uxth	r3, r3
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	b29a      	uxth	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e8e0:	bf00      	nop
 800e8e2:	3744      	adds	r7, #68	; 0x44
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b091      	sub	sp, #68	; 0x44
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8fa:	2b21      	cmp	r3, #33	; 0x21
 800e8fc:	d160      	bne.n	800e9c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e904:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e906:	e057      	b.n	800e9b8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e90e:	b29b      	uxth	r3, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d133      	bne.n	800e97c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3308      	adds	r3, #8
 800e91a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	e853 3f00 	ldrex	r3, [r3]
 800e922:	623b      	str	r3, [r7, #32]
   return(result);
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e92a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3308      	adds	r3, #8
 800e932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e934:	633a      	str	r2, [r7, #48]	; 0x30
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93c:	e841 2300 	strex	r3, r2, [r1]
 800e940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	2b00      	cmp	r3, #0
 800e946:	d1e5      	bne.n	800e914 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	e853 3f00 	ldrex	r3, [r3]
 800e954:	60fb      	str	r3, [r7, #12]
   return(result);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e95c:	637b      	str	r3, [r7, #52]	; 0x34
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e966:	61fb      	str	r3, [r7, #28]
 800e968:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96a:	69b9      	ldr	r1, [r7, #24]
 800e96c:	69fa      	ldr	r2, [r7, #28]
 800e96e:	e841 2300 	strex	r3, r2, [r1]
 800e972:	617b      	str	r3, [r7, #20]
   return(result);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1e6      	bne.n	800e948 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e97a:	e021      	b.n	800e9c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	69db      	ldr	r3, [r3, #28]
 800e982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e986:	2b00      	cmp	r3, #0
 800e988:	d013      	beq.n	800e9b2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e98e:	781a      	ldrb	r2, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e99a:	1c5a      	adds	r2, r3, #1
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e9b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e9b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1a4      	bne.n	800e908 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e9be:	e7ff      	b.n	800e9c0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e9c0:	bf00      	nop
 800e9c2:	3744      	adds	r7, #68	; 0x44
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b091      	sub	sp, #68	; 0x44
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9da:	2b21      	cmp	r3, #33	; 0x21
 800e9dc:	d165      	bne.n	800eaaa <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e9e6:	e05c      	b.n	800eaa2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d133      	bne.n	800ea5c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	6a3b      	ldr	r3, [r7, #32]
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ea0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3308      	adds	r3, #8
 800ea12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea1c:	e841 2300 	strex	r3, r2, [r1]
 800ea20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e5      	bne.n	800e9f4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	e853 3f00 	ldrex	r3, [r3]
 800ea34:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea3c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	461a      	mov	r2, r3
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	61bb      	str	r3, [r7, #24]
 800ea48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4a:	6979      	ldr	r1, [r7, #20]
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	e841 2300 	strex	r3, r2, [r1]
 800ea52:	613b      	str	r3, [r7, #16]
   return(result);
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d1e6      	bne.n	800ea28 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ea5a:	e026      	b.n	800eaaa <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	69db      	ldr	r3, [r3, #28]
 800ea62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d018      	beq.n	800ea9c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea6e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ea70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea72:	881b      	ldrh	r3, [r3, #0]
 800ea74:	461a      	mov	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea7e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea84:	1c9a      	adds	r2, r3, #2
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	3b01      	subs	r3, #1
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ea9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800eaa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d19f      	bne.n	800e9e8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800eaa8:	e7ff      	b.n	800eaaa <UART_TxISR_16BIT_FIFOEN+0xde>
 800eaaa:	bf00      	nop
 800eaac:	3744      	adds	r7, #68	; 0x44
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eab6:	b480      	push	{r7}
 800eab8:	b085      	sub	sp, #20
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_UARTEx_DisableFifoMode+0x16>
 800eac8:	2302      	movs	r3, #2
 800eaca:	e027      	b.n	800eb1c <HAL_UARTEx_DisableFifoMode+0x66>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2224      	movs	r2, #36	; 0x24
 800ead8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f022 0201 	bic.w	r2, r2, #1
 800eaf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eafa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2220      	movs	r2, #32
 800eb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d101      	bne.n	800eb40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	e02d      	b.n	800eb9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2224      	movs	r2, #36	; 0x24
 800eb4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f022 0201 	bic.w	r2, r2, #1
 800eb66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	683a      	ldr	r2, [r7, #0]
 800eb78:	430a      	orrs	r2, r1
 800eb7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f84f 	bl	800ec20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68fa      	ldr	r2, [r7, #12]
 800eb88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2220      	movs	r2, #32
 800eb8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d101      	bne.n	800ebbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebb8:	2302      	movs	r3, #2
 800ebba:	e02d      	b.n	800ec18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2224      	movs	r2, #36	; 0x24
 800ebc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f022 0201 	bic.w	r2, r2, #1
 800ebe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	430a      	orrs	r2, r1
 800ebf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f811 	bl	800ec20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d108      	bne.n	800ec42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec40:	e031      	b.n	800eca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec42:	2308      	movs	r3, #8
 800ec44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec46:	2308      	movs	r3, #8
 800ec48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	0e5b      	lsrs	r3, r3, #25
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	f003 0307 	and.w	r3, r3, #7
 800ec58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	0f5b      	lsrs	r3, r3, #29
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	f003 0307 	and.w	r3, r3, #7
 800ec68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec6a:	7bbb      	ldrb	r3, [r7, #14]
 800ec6c:	7b3a      	ldrb	r2, [r7, #12]
 800ec6e:	4911      	ldr	r1, [pc, #68]	; (800ecb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ec70:	5c8a      	ldrb	r2, [r1, r2]
 800ec72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec76:	7b3a      	ldrb	r2, [r7, #12]
 800ec78:	490f      	ldr	r1, [pc, #60]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ec7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec88:	7bfb      	ldrb	r3, [r7, #15]
 800ec8a:	7b7a      	ldrb	r2, [r7, #13]
 800ec8c:	4909      	ldr	r1, [pc, #36]	; (800ecb4 <UARTEx_SetNbDataToProcess+0x94>)
 800ec8e:	5c8a      	ldrb	r2, [r1, r2]
 800ec90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec94:	7b7a      	ldrb	r2, [r7, #13]
 800ec96:	4908      	ldr	r1, [pc, #32]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x98>)
 800ec98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eca6:	bf00      	nop
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	08015768 	.word	0x08015768
 800ecb8:	08015770 	.word	0x08015770

0800ecbc <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	607a      	str	r2, [r7, #4]
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800ecce:	89fb      	ldrh	r3, [r7, #14]
 800ecd0:	021b      	lsls	r3, r3, #8
 800ecd2:	b21a      	sxth	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	b21b      	sxth	r3, r3
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	b21b      	sxth	r3, r3
 800ecde:	b29b      	uxth	r3, r3
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3714      	adds	r7, #20
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	683a      	ldr	r2, [r7, #0]
 800ecfa:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2204      	movs	r2, #4
 800ed00:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2204      	movs	r2, #4
 800ed06:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	b21a      	sxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	b21a      	sxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800edb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800edda:	2300      	movs	r3, #0
 800eddc:	73fb      	strb	r3, [r7, #15]
 800edde:	e010      	b.n	800ee02 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800ede0:	7bfb      	ldrb	r3, [r7, #15]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	330a      	adds	r3, #10
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	4413      	add	r3, r2
 800edea:	2200      	movs	r2, #0
 800edec:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800edee:	7bfb      	ldrb	r3, [r7, #15]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	330a      	adds	r3, #10
 800edf4:	00db      	lsls	r3, r3, #3
 800edf6:	4413      	add	r3, r2
 800edf8:	2200      	movs	r2, #0
 800edfa:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800edfc:	7bfb      	ldrb	r3, [r7, #15]
 800edfe:	3301      	adds	r3, #1
 800ee00:	73fb      	strb	r3, [r7, #15]
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
 800ee04:	2b03      	cmp	r3, #3
 800ee06:	d9eb      	bls.n	800ede0 <UG_Init+0xf4>
   }

   gui = g;
 800ee08:	4a04      	ldr	r2, [pc, #16]	; (800ee1c <UG_Init+0x130>)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6013      	str	r3, [r2, #0]
   return 1;
 800ee0e:	2301      	movs	r3, #1
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	20002260 	.word	0x20002260

0800ee20 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800ee28:	4b04      	ldr	r3, [pc, #16]	; (800ee3c <UG_FontSelect+0x1c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	20002260 	.word	0x20002260

0800ee40 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af02      	add	r7, sp, #8
 800ee46:	4603      	mov	r3, r0
 800ee48:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800ee4a:	4b0e      	ldr	r3, [pc, #56]	; (800ee84 <UG_FillScreen+0x44>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	3b01      	subs	r3, #1
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	b21a      	sxth	r2, r3
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <UG_FillScreen+0x44>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	b219      	sxth	r1, r3
 800ee6e:	88fb      	ldrh	r3, [r7, #6]
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	460b      	mov	r3, r1
 800ee74:	2100      	movs	r1, #0
 800ee76:	2000      	movs	r0, #0
 800ee78:	f000 f806 	bl	800ee88 <UG_FillFrame>
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	20002260 	.word	0x20002260

0800ee88 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800ee88:	b5b0      	push	{r4, r5, r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af02      	add	r7, sp, #8
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4608      	mov	r0, r1
 800ee92:	4611      	mov	r1, r2
 800ee94:	461a      	mov	r2, r3
 800ee96:	4623      	mov	r3, r4
 800ee98:	80fb      	strh	r3, [r7, #6]
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	80bb      	strh	r3, [r7, #4]
 800ee9e:	460b      	mov	r3, r1
 800eea0:	807b      	strh	r3, [r7, #2]
 800eea2:	4613      	mov	r3, r2
 800eea4:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800eea6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eeaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	da05      	bge.n	800eebe <UG_FillFrame+0x36>
     swap(x1,x2);
 800eeb2:	88fb      	ldrh	r3, [r7, #6]
 800eeb4:	817b      	strh	r3, [r7, #10]
 800eeb6:	887b      	ldrh	r3, [r7, #2]
 800eeb8:	80fb      	strh	r3, [r7, #6]
 800eeba:	897b      	ldrh	r3, [r7, #10]
 800eebc:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800eebe:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eec2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	da05      	bge.n	800eed6 <UG_FillFrame+0x4e>
     swap(y1,y2);
 800eeca:	88bb      	ldrh	r3, [r7, #4]
 800eecc:	813b      	strh	r3, [r7, #8]
 800eece:	883b      	ldrh	r3, [r7, #0]
 800eed0:	80bb      	strh	r3, [r7, #4]
 800eed2:	893b      	ldrh	r3, [r7, #8]
 800eed4:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800eed6:	4b24      	ldr	r3, [pc, #144]	; (800ef68 <UG_FillFrame+0xe0>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eede:	f003 0302 	and.w	r3, r3, #2
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d012      	beq.n	800ef0c <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800eee6:	4b20      	ldr	r3, [pc, #128]	; (800ef68 <UG_FillFrame+0xe0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeec:	461d      	mov	r5, r3
 800eeee:	f9b7 4000 	ldrsh.w	r4, [r7]
 800eef2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eef6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800eefa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800eefe:	8c3b      	ldrh	r3, [r7, #32]
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	4623      	mov	r3, r4
 800ef04:	47a8      	blx	r5
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d028      	beq.n	800ef5e <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800ef0c:	88bb      	ldrh	r3, [r7, #4]
 800ef0e:	81bb      	strh	r3, [r7, #12]
 800ef10:	e01e      	b.n	800ef50 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800ef12:	88fb      	ldrh	r3, [r7, #6]
 800ef14:	81fb      	strh	r3, [r7, #14]
 800ef16:	e00f      	b.n	800ef38 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800ef18:	4b13      	ldr	r3, [pc, #76]	; (800ef68 <UG_FillFrame+0xe0>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	8c3a      	ldrh	r2, [r7, #32]
 800ef22:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800ef26:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800ef2a:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800ef2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	3301      	adds	r3, #1
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	81fb      	strh	r3, [r7, #14]
 800ef38:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ef3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	dde9      	ble.n	800ef18 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800ef44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	81bb      	strh	r3, [r7, #12]
 800ef50:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800ef54:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	ddda      	ble.n	800ef12 <UG_FillFrame+0x8a>
 800ef5c:	e000      	b.n	800ef60 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800ef5e:	bf00      	nop
      }
   }
}
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bdb0      	pop	{r4, r5, r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20002260 	.word	0x20002260

0800ef6c <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800ef6c:	b590      	push	{r4, r7, lr}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af02      	add	r7, sp, #8
 800ef72:	4604      	mov	r4, r0
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4623      	mov	r3, r4
 800ef7c:	80fb      	strh	r3, [r7, #6]
 800ef7e:	4603      	mov	r3, r0
 800ef80:	80bb      	strh	r3, [r7, #4]
 800ef82:	460b      	mov	r3, r1
 800ef84:	807b      	strh	r3, [r7, #2]
 800ef86:	4613      	mov	r3, r2
 800ef88:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800ef8a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800ef8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ef92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800ef96:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800ef9a:	8b3b      	ldrh	r3, [r7, #24]
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	4623      	mov	r3, r4
 800efa0:	f000 f912 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800efa4:	f9b7 4000 	ldrsh.w	r4, [r7]
 800efa8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800efac:	f9b7 1000 	ldrsh.w	r1, [r7]
 800efb0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800efb4:	8b3b      	ldrh	r3, [r7, #24]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4623      	mov	r3, r4
 800efba:	f000 f905 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800efbe:	f9b7 4000 	ldrsh.w	r4, [r7]
 800efc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800efc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800efca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800efce:	8b3b      	ldrh	r3, [r7, #24]
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	4623      	mov	r3, r4
 800efd4:	f000 f8f8 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800efd8:	f9b7 4000 	ldrsh.w	r4, [r7]
 800efdc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800efe0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800efe4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800efe8:	8b3b      	ldrh	r3, [r7, #24]
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	4623      	mov	r3, r4
 800efee:	f000 f8eb 	bl	800f1c8 <UG_DrawLine>
}
 800eff2:	bf00      	nop
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd90      	pop	{r4, r7, pc}
	...

0800effc <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 800effc:	b590      	push	{r4, r7, lr}
 800effe:	b087      	sub	sp, #28
 800f000:	af00      	add	r7, sp, #0
 800f002:	4604      	mov	r4, r0
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	461a      	mov	r2, r3
 800f00a:	4623      	mov	r3, r4
 800f00c:	80fb      	strh	r3, [r7, #6]
 800f00e:	4603      	mov	r3, r0
 800f010:	80bb      	strh	r3, [r7, #4]
 800f012:	460b      	mov	r3, r1
 800f014:	807b      	strh	r3, [r7, #2]
 800f016:	4613      	mov	r3, r2
 800f018:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 800f01a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f2c0 80c8 	blt.w	800f1b4 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800f024:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f2c0 80c5 	blt.w	800f1b8 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800f02e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f032:	2b00      	cmp	r3, #0
 800f034:	f340 80c2 	ble.w	800f1bc <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 800f038:	887b      	ldrh	r3, [r7, #2]
 800f03a:	005b      	lsls	r3, r3, #1
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	f1c3 0301 	rsb	r3, r3, #1
 800f042:	b29b      	uxth	r3, r3
 800f044:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	823b      	strh	r3, [r7, #16]
   e = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	81fb      	strh	r3, [r7, #14]
   x = r;
 800f04e:	887b      	ldrh	r3, [r7, #2]
 800f050:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800f056:	e0a5      	b.n	800f1a4 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 800f058:	4b5a      	ldr	r3, [pc, #360]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	88f9      	ldrh	r1, [r7, #6]
 800f062:	8afa      	ldrh	r2, [r7, #22]
 800f064:	1a8a      	subs	r2, r1, r2
 800f066:	b292      	uxth	r2, r2
 800f068:	b210      	sxth	r0, r2
 800f06a:	88b9      	ldrh	r1, [r7, #4]
 800f06c:	8aba      	ldrh	r2, [r7, #20]
 800f06e:	440a      	add	r2, r1
 800f070:	b292      	uxth	r2, r2
 800f072:	b211      	sxth	r1, r2
 800f074:	883a      	ldrh	r2, [r7, #0]
 800f076:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 800f078:	4b52      	ldr	r3, [pc, #328]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	685b      	ldr	r3, [r3, #4]
 800f080:	88f9      	ldrh	r1, [r7, #6]
 800f082:	8afa      	ldrh	r2, [r7, #22]
 800f084:	1a8a      	subs	r2, r1, r2
 800f086:	b292      	uxth	r2, r2
 800f088:	b210      	sxth	r0, r2
 800f08a:	88b9      	ldrh	r1, [r7, #4]
 800f08c:	8aba      	ldrh	r2, [r7, #20]
 800f08e:	1a8a      	subs	r2, r1, r2
 800f090:	b292      	uxth	r2, r2
 800f092:	b211      	sxth	r1, r2
 800f094:	883a      	ldrh	r2, [r7, #0]
 800f096:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 800f098:	4b4a      	ldr	r3, [pc, #296]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	88f9      	ldrh	r1, [r7, #6]
 800f0a2:	8afa      	ldrh	r2, [r7, #22]
 800f0a4:	440a      	add	r2, r1
 800f0a6:	b292      	uxth	r2, r2
 800f0a8:	b210      	sxth	r0, r2
 800f0aa:	88b9      	ldrh	r1, [r7, #4]
 800f0ac:	8aba      	ldrh	r2, [r7, #20]
 800f0ae:	440a      	add	r2, r1
 800f0b0:	b292      	uxth	r2, r2
 800f0b2:	b211      	sxth	r1, r2
 800f0b4:	883a      	ldrh	r2, [r7, #0]
 800f0b6:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 800f0b8:	4b42      	ldr	r3, [pc, #264]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	88f9      	ldrh	r1, [r7, #6]
 800f0c2:	8afa      	ldrh	r2, [r7, #22]
 800f0c4:	440a      	add	r2, r1
 800f0c6:	b292      	uxth	r2, r2
 800f0c8:	b210      	sxth	r0, r2
 800f0ca:	88b9      	ldrh	r1, [r7, #4]
 800f0cc:	8aba      	ldrh	r2, [r7, #20]
 800f0ce:	1a8a      	subs	r2, r1, r2
 800f0d0:	b292      	uxth	r2, r2
 800f0d2:	b211      	sxth	r1, r2
 800f0d4:	883a      	ldrh	r2, [r7, #0]
 800f0d6:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 800f0d8:	4b3a      	ldr	r3, [pc, #232]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	88f9      	ldrh	r1, [r7, #6]
 800f0e2:	8aba      	ldrh	r2, [r7, #20]
 800f0e4:	1a8a      	subs	r2, r1, r2
 800f0e6:	b292      	uxth	r2, r2
 800f0e8:	b210      	sxth	r0, r2
 800f0ea:	88b9      	ldrh	r1, [r7, #4]
 800f0ec:	8afa      	ldrh	r2, [r7, #22]
 800f0ee:	440a      	add	r2, r1
 800f0f0:	b292      	uxth	r2, r2
 800f0f2:	b211      	sxth	r1, r2
 800f0f4:	883a      	ldrh	r2, [r7, #0]
 800f0f6:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 800f0f8:	4b32      	ldr	r3, [pc, #200]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	88f9      	ldrh	r1, [r7, #6]
 800f102:	8aba      	ldrh	r2, [r7, #20]
 800f104:	1a8a      	subs	r2, r1, r2
 800f106:	b292      	uxth	r2, r2
 800f108:	b210      	sxth	r0, r2
 800f10a:	88b9      	ldrh	r1, [r7, #4]
 800f10c:	8afa      	ldrh	r2, [r7, #22]
 800f10e:	1a8a      	subs	r2, r1, r2
 800f110:	b292      	uxth	r2, r2
 800f112:	b211      	sxth	r1, r2
 800f114:	883a      	ldrh	r2, [r7, #0]
 800f116:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 800f118:	4b2a      	ldr	r3, [pc, #168]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	88f9      	ldrh	r1, [r7, #6]
 800f122:	8aba      	ldrh	r2, [r7, #20]
 800f124:	440a      	add	r2, r1
 800f126:	b292      	uxth	r2, r2
 800f128:	b210      	sxth	r0, r2
 800f12a:	88b9      	ldrh	r1, [r7, #4]
 800f12c:	8afa      	ldrh	r2, [r7, #22]
 800f12e:	440a      	add	r2, r1
 800f130:	b292      	uxth	r2, r2
 800f132:	b211      	sxth	r1, r2
 800f134:	883a      	ldrh	r2, [r7, #0]
 800f136:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 800f138:	4b22      	ldr	r3, [pc, #136]	; (800f1c4 <UG_DrawCircle+0x1c8>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685b      	ldr	r3, [r3, #4]
 800f140:	88f9      	ldrh	r1, [r7, #6]
 800f142:	8aba      	ldrh	r2, [r7, #20]
 800f144:	440a      	add	r2, r1
 800f146:	b292      	uxth	r2, r2
 800f148:	b210      	sxth	r0, r2
 800f14a:	88b9      	ldrh	r1, [r7, #4]
 800f14c:	8afa      	ldrh	r2, [r7, #22]
 800f14e:	1a8a      	subs	r2, r1, r2
 800f150:	b292      	uxth	r2, r2
 800f152:	b211      	sxth	r1, r2
 800f154:	883a      	ldrh	r2, [r7, #0]
 800f156:	4798      	blx	r3

      y++;
 800f158:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	3301      	adds	r3, #1
 800f160:	b29b      	uxth	r3, r3
 800f162:	82bb      	strh	r3, [r7, #20]
      e += yd;
 800f164:	89fa      	ldrh	r2, [r7, #14]
 800f166:	8a3b      	ldrh	r3, [r7, #16]
 800f168:	4413      	add	r3, r2
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 800f16e:	8a3b      	ldrh	r3, [r7, #16]
 800f170:	3302      	adds	r3, #2
 800f172:	b29b      	uxth	r3, r3
 800f174:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 800f176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f17a:	005a      	lsls	r2, r3, #1
 800f17c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f180:	4413      	add	r3, r2
 800f182:	2b00      	cmp	r3, #0
 800f184:	dd0e      	ble.n	800f1a4 <UG_DrawCircle+0x1a8>
      {
         x--;
 800f186:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	3b01      	subs	r3, #1
 800f18e:	b29b      	uxth	r3, r3
 800f190:	82fb      	strh	r3, [r7, #22]
         e += xd;
 800f192:	89fa      	ldrh	r2, [r7, #14]
 800f194:	8a7b      	ldrh	r3, [r7, #18]
 800f196:	4413      	add	r3, r2
 800f198:	b29b      	uxth	r3, r3
 800f19a:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 800f19c:	8a7b      	ldrh	r3, [r7, #18]
 800f19e:	3302      	adds	r3, #2
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 800f1a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	f6bf af53 	bge.w	800f058 <UG_DrawCircle+0x5c>
 800f1b2:	e004      	b.n	800f1be <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 800f1b4:	bf00      	nop
 800f1b6:	e002      	b.n	800f1be <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 800f1b8:	bf00      	nop
 800f1ba:	e000      	b.n	800f1be <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 800f1bc:	bf00      	nop
      }
   }
}
 800f1be:	371c      	adds	r7, #28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd90      	pop	{r4, r7, pc}
 800f1c4:	20002260 	.word	0x20002260

0800f1c8 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800f1c8:	b5b0      	push	{r4, r5, r7, lr}
 800f1ca:	b08a      	sub	sp, #40	; 0x28
 800f1cc:	af02      	add	r7, sp, #8
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	4623      	mov	r3, r4
 800f1d8:	80fb      	strh	r3, [r7, #6]
 800f1da:	4603      	mov	r3, r0
 800f1dc:	80bb      	strh	r3, [r7, #4]
 800f1de:	460b      	mov	r3, r1
 800f1e0:	807b      	strh	r3, [r7, #2]
 800f1e2:	4613      	mov	r3, r2
 800f1e4:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800f1e6:	4b67      	ldr	r3, [pc, #412]	; (800f384 <UG_DrawLine+0x1bc>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800f1ee:	f003 0302 	and.w	r3, r3, #2
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d013      	beq.n	800f21e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f1f6:	4b63      	ldr	r3, [pc, #396]	; (800f384 <UG_DrawLine+0x1bc>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1fc:	461d      	mov	r5, r3
 800f1fe:	f9b7 4000 	ldrsh.w	r4, [r7]
 800f202:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f206:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800f20a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800f20e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	4623      	mov	r3, r4
 800f214:	47a8      	blx	r5
 800f216:	4603      	mov	r3, r0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 80ae 	beq.w	800f37a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800f21e:	887a      	ldrh	r2, [r7, #2]
 800f220:	88fb      	ldrh	r3, [r7, #6]
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	b29b      	uxth	r3, r3
 800f226:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800f228:	883a      	ldrh	r2, [r7, #0]
 800f22a:	88bb      	ldrh	r3, [r7, #4]
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	b29b      	uxth	r3, r3
 800f230:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800f232:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfb8      	it	lt
 800f23a:	425b      	neglt	r3, r3
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800f240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f244:	2b00      	cmp	r3, #0
 800f246:	bfb8      	it	lt
 800f248:	425b      	neglt	r3, r3
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800f24e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f252:	2b00      	cmp	r3, #0
 800f254:	dd01      	ble.n	800f25a <UG_DrawLine+0x92>
 800f256:	2301      	movs	r3, #1
 800f258:	e001      	b.n	800f25e <UG_DrawLine+0x96>
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800f260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f264:	2b00      	cmp	r3, #0
 800f266:	dd01      	ble.n	800f26c <UG_DrawLine+0xa4>
 800f268:	2301      	movs	r3, #1
 800f26a:	e001      	b.n	800f270 <UG_DrawLine+0xa8>
 800f26c:	f04f 33ff 	mov.w	r3, #4294967295
 800f270:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800f272:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f276:	105b      	asrs	r3, r3, #1
 800f278:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800f27a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f27e:	105b      	asrs	r3, r3, #1
 800f280:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800f282:	88fb      	ldrh	r3, [r7, #6]
 800f284:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800f286:	88bb      	ldrh	r3, [r7, #4]
 800f288:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800f28a:	4b3e      	ldr	r3, [pc, #248]	; (800f384 <UG_DrawLine+0x1bc>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f294:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800f298:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800f29c:	4798      	blx	r3

   if( dxabs >= dyabs )
 800f29e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800f2a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	db33      	blt.n	800f312 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	83fb      	strh	r3, [r7, #30]
 800f2ae:	e029      	b.n	800f304 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800f2b0:	8b7a      	ldrh	r2, [r7, #26]
 800f2b2:	89fb      	ldrh	r3, [r7, #14]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800f2ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800f2be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	db09      	blt.n	800f2da <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800f2c6:	8b7a      	ldrh	r2, [r7, #26]
 800f2c8:	8a3b      	ldrh	r3, [r7, #16]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800f2d0:	8afa      	ldrh	r2, [r7, #22]
 800f2d2:	897b      	ldrh	r3, [r7, #10]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800f2da:	8b3a      	ldrh	r2, [r7, #24]
 800f2dc:	89bb      	ldrh	r3, [r7, #12]
 800f2de:	4413      	add	r3, r2
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800f2e4:	4b27      	ldr	r3, [pc, #156]	; (800f384 <UG_DrawLine+0x1bc>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f2ee:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800f2f2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800f2f6:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800f2f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	3301      	adds	r3, #1
 800f300:	b29b      	uxth	r3, r3
 800f302:	83fb      	strh	r3, [r7, #30]
 800f304:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f308:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	dbcf      	blt.n	800f2b0 <UG_DrawLine+0xe8>
 800f310:	e034      	b.n	800f37c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800f312:	2300      	movs	r3, #0
 800f314:	83fb      	strh	r3, [r7, #30]
 800f316:	e029      	b.n	800f36c <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800f318:	8bba      	ldrh	r2, [r7, #28]
 800f31a:	8a3b      	ldrh	r3, [r7, #16]
 800f31c:	4413      	add	r3, r2
 800f31e:	b29b      	uxth	r3, r3
 800f320:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800f322:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800f326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	db09      	blt.n	800f342 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800f32e:	8bba      	ldrh	r2, [r7, #28]
 800f330:	89fb      	ldrh	r3, [r7, #14]
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	b29b      	uxth	r3, r3
 800f336:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800f338:	8b3a      	ldrh	r2, [r7, #24]
 800f33a:	89bb      	ldrh	r3, [r7, #12]
 800f33c:	4413      	add	r3, r2
 800f33e:	b29b      	uxth	r3, r3
 800f340:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800f342:	8afa      	ldrh	r2, [r7, #22]
 800f344:	897b      	ldrh	r3, [r7, #10]
 800f346:	4413      	add	r3, r2
 800f348:	b29b      	uxth	r3, r3
 800f34a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800f34c:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <UG_DrawLine+0x1bc>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800f356:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800f35a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800f35e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800f360:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f364:	b29b      	uxth	r3, r3
 800f366:	3301      	adds	r3, #1
 800f368:	b29b      	uxth	r3, r3
 800f36a:	83fb      	strh	r3, [r7, #30]
 800f36c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800f370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f374:	429a      	cmp	r2, r3
 800f376:	dbcf      	blt.n	800f318 <UG_DrawLine+0x150>
 800f378:	e000      	b.n	800f37c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800f37a:	bf00      	nop
      }
   }  
}
 800f37c:	3720      	adds	r7, #32
 800f37e:	46bd      	mov	sp, r7
 800f380:	bdb0      	pop	{r4, r5, r7, pc}
 800f382:	bf00      	nop
 800f384:	20002260 	.word	0x20002260

0800f388 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800f388:	b590      	push	{r4, r7, lr}
 800f38a:	b087      	sub	sp, #28
 800f38c:	af02      	add	r7, sp, #8
 800f38e:	4603      	mov	r3, r0
 800f390:	603a      	str	r2, [r7, #0]
 800f392:	80fb      	strh	r3, [r7, #6]
 800f394:	460b      	mov	r3, r1
 800f396:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800f398:	88fb      	ldrh	r3, [r7, #6]
 800f39a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800f39c:	88bb      	ldrh	r3, [r7, #4]
 800f39e:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800f3a0:	4b44      	ldr	r3, [pc, #272]	; (800f4b4 <UG_PutString+0x12c>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 fa96 	bl	800f8d8 <_UG_FontSelect>
   while ( *str != 0 )
 800f3ac:	e064      	b.n	800f478 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800f3ae:	4b41      	ldr	r3, [pc, #260]	; (800f4b4 <UG_PutString+0x12c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d106      	bne.n	800f3c8 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800f3ba:	463b      	mov	r3, r7
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f000 f8c7 	bl	800f550 <_UG_DecodeUTF8>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	817b      	strh	r3, [r7, #10]
 800f3c6:	e004      	b.n	800f3d2 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	603a      	str	r2, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800f3d2:	897b      	ldrh	r3, [r7, #10]
 800f3d4:	2b0a      	cmp	r3, #10
 800f3d6:	d105      	bne.n	800f3e4 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800f3d8:	4b36      	ldr	r3, [pc, #216]	; (800f4b4 <UG_PutString+0x12c>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	81fb      	strh	r3, [r7, #14]
         continue;
 800f3e2:	e049      	b.n	800f478 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800f3e4:	897b      	ldrh	r3, [r7, #10]
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 f929 	bl	800f640 <_UG_GetCharData>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800f3f2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fa:	d100      	bne.n	800f3fe <UG_PutString+0x76>
 800f3fc:	e03c      	b.n	800f478 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 800f3fe:	4b2d      	ldr	r3, [pc, #180]	; (800f4b4 <UG_PutString+0x12c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f408:	4619      	mov	r1, r3
 800f40a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f40e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f412:	4413      	add	r3, r2
 800f414:	4299      	cmp	r1, r3
 800f416:	dc12      	bgt.n	800f43e <UG_PutString+0xb6>
      {
         xp = x;
 800f418:	88fb      	ldrh	r3, [r7, #6]
 800f41a:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800f41c:	4b25      	ldr	r3, [pc, #148]	; (800f4b4 <UG_PutString+0x12c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f424:	b21a      	sxth	r2, r3
 800f426:	4b23      	ldr	r3, [pc, #140]	; (800f4b4 <UG_PutString+0x12c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 800f42e:	b21b      	sxth	r3, r3
 800f430:	4413      	add	r3, r2
 800f432:	b21b      	sxth	r3, r3
 800f434:	b29a      	uxth	r2, r3
 800f436:	89bb      	ldrh	r3, [r7, #12]
 800f438:	4413      	add	r3, r2
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800f43e:	4b1d      	ldr	r3, [pc, #116]	; (800f4b4 <UG_PutString+0x12c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 800f446:	4b1b      	ldr	r3, [pc, #108]	; (800f4b4 <UG_PutString+0x12c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f44e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f452:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800f456:	8978      	ldrh	r0, [r7, #10]
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	4623      	mov	r3, r4
 800f45c:	f000 fabe 	bl	800f9dc <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800f460:	4b14      	ldr	r3, [pc, #80]	; (800f4b4 <UG_PutString+0x12c>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 800f468:	b29a      	uxth	r2, r3
 800f46a:	893b      	ldrh	r3, [r7, #8]
 800f46c:	4413      	add	r3, r2
 800f46e:	b29a      	uxth	r2, r3
 800f470:	89fb      	ldrh	r3, [r7, #14]
 800f472:	4413      	add	r3, r2
 800f474:	b29b      	uxth	r3, r3
 800f476:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d196      	bne.n	800f3ae <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800f480:	4b0c      	ldr	r3, [pc, #48]	; (800f4b4 <UG_PutString+0x12c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f488:	f003 0302 	and.w	r3, r3, #2
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00c      	beq.n	800f4aa <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800f490:	4b08      	ldr	r3, [pc, #32]	; (800f4b4 <UG_PutString+0x12c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f496:	461c      	mov	r4, r3
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a8:	47a0      	blx	r4
}
 800f4aa:	bf00      	nop
 800f4ac:	3714      	adds	r7, #20
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd90      	pop	{r4, r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	20002260 	.word	0x20002260

0800f4b8 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800f4c2:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <UG_SetForecolor+0x20>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	88fa      	ldrh	r2, [r7, #6]
 800f4c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr
 800f4d8:	20002260 	.word	0x20002260

0800f4dc <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b083      	sub	sp, #12
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <UG_SetBackcolor+0x20>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	88fa      	ldrh	r2, [r7, #6]
 800f4ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	20002260 	.word	0x20002260

0800f500 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800f500:	b480      	push	{r7}
 800f502:	b083      	sub	sp, #12
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800f50a:	4b06      	ldr	r3, [pc, #24]	; (800f524 <UG_FontSetHSpace+0x24>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	88fa      	ldrh	r2, [r7, #6]
 800f510:	b252      	sxtb	r2, r2
 800f512:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800f516:	bf00      	nop
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	20002260 	.word	0x20002260

0800f528 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	4603      	mov	r3, r0
 800f530:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800f532:	4b06      	ldr	r3, [pc, #24]	; (800f54c <UG_FontSetVSpace+0x24>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	88fa      	ldrh	r2, [r7, #6]
 800f538:	b252      	sxtb	r2, r2
 800f53a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 800f53e:	bf00      	nop
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	20002260 	.word	0x20002260

0800f550 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]

  char c=**str;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800f560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f564:	2b00      	cmp	r3, #0
 800f566:	db07      	blt.n	800f578 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
    return c;
 800f572:	7bfb      	ldrb	r3, [r7, #15]
 800f574:	b29b      	uxth	r3, r3
 800f576:	e05c      	b.n	800f632 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 800f578:	2300      	movs	r3, #0
 800f57a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800f57c:	2300      	movs	r3, #0
 800f57e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800f580:	e04f      	b.n	800f622 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800f594:	7bbb      	ldrb	r3, [r7, #14]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d130      	bne.n	800f5fc <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800f59a:	7bfb      	ldrb	r3, [r7, #15]
 800f59c:	2bdf      	cmp	r3, #223	; 0xdf
 800f59e:	d806      	bhi.n	800f5ae <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	f003 031f 	and.w	r3, r3, #31
 800f5aa:	73fb      	strb	r3, [r7, #15]
 800f5ac:	e023      	b.n	800f5f6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800f5ae:	7bfb      	ldrb	r3, [r7, #15]
 800f5b0:	2bef      	cmp	r3, #239	; 0xef
 800f5b2:	d806      	bhi.n	800f5c2 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800f5b4:	2302      	movs	r3, #2
 800f5b6:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ba:	f003 030f 	and.w	r3, r3, #15
 800f5be:	73fb      	strb	r3, [r7, #15]
 800f5c0:	e019      	b.n	800f5f6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800f5c2:	7bfb      	ldrb	r3, [r7, #15]
 800f5c4:	2bf7      	cmp	r3, #247	; 0xf7
 800f5c6:	d806      	bhi.n	800f5d6 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 800f5c8:	2303      	movs	r3, #3
 800f5ca:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
 800f5ce:	f003 0307 	and.w	r3, r3, #7
 800f5d2:	73fb      	strb	r3, [r7, #15]
 800f5d4:	e00f      	b.n	800f5f6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800f5d6:	7bfb      	ldrb	r3, [r7, #15]
 800f5d8:	2bfb      	cmp	r3, #251	; 0xfb
 800f5da:	d806      	bhi.n	800f5ea <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800f5dc:	2304      	movs	r3, #4
 800f5de:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	73fb      	strb	r3, [r7, #15]
 800f5e8:	e005      	b.n	800f5f6 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800f5ea:	2305      	movs	r3, #5
 800f5ec:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800f5ee:	7bfb      	ldrb	r3, [r7, #15]
 800f5f0:	f003 0301 	and.w	r3, r3, #1
 800f5f4:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800f5f6:	7bfb      	ldrb	r3, [r7, #15]
 800f5f8:	81bb      	strh	r3, [r7, #12]
 800f5fa:	e012      	b.n	800f622 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800f5fc:	89bb      	ldrh	r3, [r7, #12]
 800f5fe:	019b      	lsls	r3, r3, #6
 800f600:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800f602:	7bfb      	ldrb	r3, [r7, #15]
 800f604:	b21b      	sxth	r3, r3
 800f606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f60a:	b21a      	sxth	r2, r3
 800f60c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f610:	4313      	orrs	r3, r2
 800f612:	b21b      	sxth	r3, r3
 800f614:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800f616:	7bbb      	ldrb	r3, [r7, #14]
 800f618:	3b01      	subs	r3, #1
 800f61a:	73bb      	strb	r3, [r7, #14]
 800f61c:	7bbb      	ldrb	r3, [r7, #14]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d005      	beq.n	800f62e <_UG_DecodeUTF8+0xde>
  while(**str)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1aa      	bne.n	800f582 <_UG_DecodeUTF8+0x32>
 800f62c:	e000      	b.n	800f630 <_UG_DecodeUTF8+0xe0>
        break;
 800f62e:	bf00      	nop
    }
  }
  return encoding;
 800f630:	89bb      	ldrh	r3, [r7, #12]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3714      	adds	r7, #20
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
	...

0800f640 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	4603      	mov	r3, r0
 800f648:	6039      	str	r1, [r7, #0]
 800f64a:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800f650:	2300      	movs	r3, #0
 800f652:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800f654:	2300      	movs	r3, #0
 800f656:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800f658:	2300      	movs	r3, #0
 800f65a:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800f65c:	2300      	movs	r3, #0
 800f65e:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800f660:	4b98      	ldr	r3, [pc, #608]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f666:	4b98      	ldr	r3, [pc, #608]	; (800f8c8 <_UG_GetCharData+0x288>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d10f      	bne.n	800f68e <_UG_GetCharData+0x4e>
 800f66e:	4b97      	ldr	r3, [pc, #604]	; (800f8cc <_UG_GetCharData+0x28c>)
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	88fa      	ldrh	r2, [r7, #6]
 800f674:	429a      	cmp	r2, r3
 800f676:	d10a      	bne.n	800f68e <_UG_GetCharData+0x4e>
    if(p){
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d003      	beq.n	800f686 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800f67e:	4b94      	ldr	r3, [pc, #592]	; (800f8d0 <_UG_GetCharData+0x290>)
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800f686:	4b93      	ldr	r3, [pc, #588]	; (800f8d4 <_UG_GetCharData+0x294>)
 800f688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68c:	e116      	b.n	800f8bc <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800f68e:	4b8d      	ldr	r3, [pc, #564]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 80cc 	beq.w	800f834 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800f69c:	88fb      	ldrh	r3, [r7, #6]
 800f69e:	2bfc      	cmp	r3, #252	; 0xfc
 800f6a0:	f300 80c8 	bgt.w	800f834 <_UG_GetCharData+0x1f4>
 800f6a4:	2bd6      	cmp	r3, #214	; 0xd6
 800f6a6:	da09      	bge.n	800f6bc <_UG_GetCharData+0x7c>
 800f6a8:	2bc4      	cmp	r3, #196	; 0xc4
 800f6aa:	d06c      	beq.n	800f786 <_UG_GetCharData+0x146>
 800f6ac:	2bc4      	cmp	r3, #196	; 0xc4
 800f6ae:	f300 80c1 	bgt.w	800f834 <_UG_GetCharData+0x1f4>
 800f6b2:	2bb0      	cmp	r3, #176	; 0xb0
 800f6b4:	d06d      	beq.n	800f792 <_UG_GetCharData+0x152>
 800f6b6:	2bb5      	cmp	r3, #181	; 0xb5
 800f6b8:	d068      	beq.n	800f78c <_UG_GetCharData+0x14c>
 800f6ba:	e06e      	b.n	800f79a <_UG_GetCharData+0x15a>
 800f6bc:	3bd6      	subs	r3, #214	; 0xd6
 800f6be:	2b26      	cmp	r3, #38	; 0x26
 800f6c0:	f200 80b8 	bhi.w	800f834 <_UG_GetCharData+0x1f4>
 800f6c4:	a201      	add	r2, pc, #4	; (adr r2, 800f6cc <_UG_GetCharData+0x8c>)
 800f6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ca:	bf00      	nop
 800f6cc:	0800f76f 	.word	0x0800f76f
 800f6d0:	0800f835 	.word	0x0800f835
 800f6d4:	0800f835 	.word	0x0800f835
 800f6d8:	0800f835 	.word	0x0800f835
 800f6dc:	0800f835 	.word	0x0800f835
 800f6e0:	0800f835 	.word	0x0800f835
 800f6e4:	0800f77b 	.word	0x0800f77b
 800f6e8:	0800f835 	.word	0x0800f835
 800f6ec:	0800f835 	.word	0x0800f835
 800f6f0:	0800f835 	.word	0x0800f835
 800f6f4:	0800f835 	.word	0x0800f835
 800f6f8:	0800f835 	.word	0x0800f835
 800f6fc:	0800f835 	.word	0x0800f835
 800f700:	0800f835 	.word	0x0800f835
 800f704:	0800f781 	.word	0x0800f781
 800f708:	0800f835 	.word	0x0800f835
 800f70c:	0800f835 	.word	0x0800f835
 800f710:	0800f835 	.word	0x0800f835
 800f714:	0800f835 	.word	0x0800f835
 800f718:	0800f835 	.word	0x0800f835
 800f71c:	0800f835 	.word	0x0800f835
 800f720:	0800f835 	.word	0x0800f835
 800f724:	0800f835 	.word	0x0800f835
 800f728:	0800f835 	.word	0x0800f835
 800f72c:	0800f835 	.word	0x0800f835
 800f730:	0800f835 	.word	0x0800f835
 800f734:	0800f835 	.word	0x0800f835
 800f738:	0800f835 	.word	0x0800f835
 800f73c:	0800f835 	.word	0x0800f835
 800f740:	0800f835 	.word	0x0800f835
 800f744:	0800f835 	.word	0x0800f835
 800f748:	0800f835 	.word	0x0800f835
 800f74c:	0800f769 	.word	0x0800f769
 800f750:	0800f835 	.word	0x0800f835
 800f754:	0800f835 	.word	0x0800f835
 800f758:	0800f835 	.word	0x0800f835
 800f75c:	0800f835 	.word	0x0800f835
 800f760:	0800f835 	.word	0x0800f835
 800f764:	0800f775 	.word	0x0800f775
    {
       case 0xF6: encoding = 0x94; break; // ö
 800f768:	2394      	movs	r3, #148	; 0x94
 800f76a:	80fb      	strh	r3, [r7, #6]
 800f76c:	e015      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800f76e:	2399      	movs	r3, #153	; 0x99
 800f770:	80fb      	strh	r3, [r7, #6]
 800f772:	e012      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800f774:	2381      	movs	r3, #129	; 0x81
 800f776:	80fb      	strh	r3, [r7, #6]
 800f778:	e00f      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 800f77a:	239a      	movs	r3, #154	; 0x9a
 800f77c:	80fb      	strh	r3, [r7, #6]
 800f77e:	e00c      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 800f780:	2384      	movs	r3, #132	; 0x84
 800f782:	80fb      	strh	r3, [r7, #6]
 800f784:	e009      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800f786:	238e      	movs	r3, #142	; 0x8e
 800f788:	80fb      	strh	r3, [r7, #6]
 800f78a:	e006      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 800f78c:	23e6      	movs	r3, #230	; 0xe6
 800f78e:	80fb      	strh	r3, [r7, #6]
 800f790:	e003      	b.n	800f79a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800f792:	23f8      	movs	r3, #248	; 0xf8
 800f794:	80fb      	strh	r3, [r7, #6]
 800f796:	bf00      	nop
 800f798:	e04c      	b.n	800f834 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800f79a:	e04b      	b.n	800f834 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 800f79c:	4b49      	ldr	r3, [pc, #292]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7a2:	8a7a      	ldrh	r2, [r7, #18]
 800f7a4:	0052      	lsls	r2, r2, #1
 800f7a6:	4413      	add	r3, r2
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7ff fa87 	bl	800ecbc <ptr_8to16>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800f7b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da06      	bge.n	800f7c8 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800f7ba:	89fb      	ldrh	r3, [r7, #14]
 800f7bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f7c0:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	747b      	strb	r3, [r7, #17]
 800f7c6:	e032      	b.n	800f82e <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800f7c8:	7c7b      	ldrb	r3, [r7, #17]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d021      	beq.n	800f812 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800f7ce:	88fa      	ldrh	r2, [r7, #6]
 800f7d0:	8afb      	ldrh	r3, [r7, #22]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d30d      	bcc.n	800f7f2 <_UG_GetCharData+0x1b2>
 800f7d6:	88fa      	ldrh	r2, [r7, #6]
 800f7d8:	89fb      	ldrh	r3, [r7, #14]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d809      	bhi.n	800f7f2 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800f7de:	88fa      	ldrh	r2, [r7, #6]
 800f7e0:	8afb      	ldrh	r3, [r7, #22]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	b29a      	uxth	r2, r3
 800f7e6:	8abb      	ldrh	r3, [r7, #20]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	82bb      	strh	r3, [r7, #20]
        found=1;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	743b      	strb	r3, [r7, #16]
        break;
 800f7f0:	e02a      	b.n	800f848 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800f7f2:	88fa      	ldrh	r2, [r7, #6]
 800f7f4:	8afb      	ldrh	r3, [r7, #22]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d323      	bcc.n	800f842 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800f7fa:	89fa      	ldrh	r2, [r7, #14]
 800f7fc:	8afb      	ldrh	r3, [r7, #22]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	b29a      	uxth	r2, r3
 800f802:	8abb      	ldrh	r3, [r7, #20]
 800f804:	4413      	add	r3, r2
 800f806:	b29b      	uxth	r3, r3
 800f808:	3301      	adds	r3, #1
 800f80a:	82bb      	strh	r3, [r7, #20]
      range=0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	747b      	strb	r3, [r7, #17]
 800f810:	e00d      	b.n	800f82e <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800f812:	88fa      	ldrh	r2, [r7, #6]
 800f814:	89fb      	ldrh	r3, [r7, #14]
 800f816:	429a      	cmp	r2, r3
 800f818:	d102      	bne.n	800f820 <_UG_GetCharData+0x1e0>
      {
        found=1;
 800f81a:	2301      	movs	r3, #1
 800f81c:	743b      	strb	r3, [r7, #16]
        break;
 800f81e:	e013      	b.n	800f848 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800f820:	88fa      	ldrh	r2, [r7, #6]
 800f822:	89fb      	ldrh	r3, [r7, #14]
 800f824:	429a      	cmp	r2, r3
 800f826:	d30e      	bcc.n	800f846 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 800f828:	8abb      	ldrh	r3, [r7, #20]
 800f82a:	3301      	adds	r3, #1
 800f82c:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800f82e:	8a7b      	ldrh	r3, [r7, #18]
 800f830:	3301      	adds	r3, #1
 800f832:	827b      	strh	r3, [r7, #18]
 800f834:	4b23      	ldr	r3, [pc, #140]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f83a:	8a7a      	ldrh	r2, [r7, #18]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d3ad      	bcc.n	800f79c <_UG_GetCharData+0x15c>
 800f840:	e002      	b.n	800f848 <_UG_GetCharData+0x208>
        break;
 800f842:	bf00      	nop
 800f844:	e000      	b.n	800f848 <_UG_GetCharData+0x208>
        break;
 800f846:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800f848:	7c3b      	ldrb	r3, [r7, #16]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d034      	beq.n	800f8b8 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800f84e:	4b1d      	ldr	r3, [pc, #116]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f854:	4a1c      	ldr	r2, [pc, #112]	; (800f8c8 <_UG_GetCharData+0x288>)
 800f856:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800f858:	4a1c      	ldr	r2, [pc, #112]	; (800f8cc <_UG_GetCharData+0x28c>)
 800f85a:	88fb      	ldrh	r3, [r7, #6]
 800f85c:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800f85e:	4b19      	ldr	r3, [pc, #100]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f864:	8aba      	ldrh	r2, [r7, #20]
 800f866:	4917      	ldr	r1, [pc, #92]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f868:	6809      	ldr	r1, [r1, #0]
 800f86a:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 800f86c:	fb01 f202 	mul.w	r2, r1, r2
 800f870:	4413      	add	r3, r2
 800f872:	4a17      	ldr	r2, [pc, #92]	; (800f8d0 <_UG_GetCharData+0x290>)
 800f874:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800f876:	4b13      	ldr	r3, [pc, #76]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d009      	beq.n	800f894 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800f880:	4b10      	ldr	r3, [pc, #64]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f886:	8abb      	ldrh	r3, [r7, #20]
 800f888:	4413      	add	r3, r2
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	b21a      	sxth	r2, r3
 800f88e:	4b11      	ldr	r3, [pc, #68]	; (800f8d4 <_UG_GetCharData+0x294>)
 800f890:	801a      	strh	r2, [r3, #0]
 800f892:	e006      	b.n	800f8a2 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800f894:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <_UG_GetCharData+0x284>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f89c:	b21a      	sxth	r2, r3
 800f89e:	4b0d      	ldr	r3, [pc, #52]	; (800f8d4 <_UG_GetCharData+0x294>)
 800f8a0:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d003      	beq.n	800f8b0 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 800f8a8:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <_UG_GetCharData+0x290>)
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 800f8b0:	4b08      	ldr	r3, [pc, #32]	; (800f8d4 <_UG_GetCharData+0x294>)
 800f8b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8b6:	e001      	b.n	800f8bc <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 800f8b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	20002260 	.word	0x20002260
 800f8c8:	20002264 	.word	0x20002264
 800f8cc:	20002268 	.word	0x20002268
 800f8d0:	2000226c 	.word	0x2000226c
 800f8d4:	20002270 	.word	0x20002270

0800f8d8 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b083      	sub	sp, #12
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800f8e0:	4b3d      	ldr	r3, [pc, #244]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d070      	beq.n	800f9ce <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 800f8ec:	4b3a      	ldr	r3, [pc, #232]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	781a      	ldrb	r2, [r3, #0]
 800f8f8:	4b37      	ldr	r3, [pc, #220]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f900:	b2d2      	uxtb	r2, r2
 800f902:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	607a      	str	r2, [r7, #4]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	b25b      	sxtb	r3, r3
 800f910:	2b00      	cmp	r3, #0
 800f912:	da01      	bge.n	800f918 <_UG_FontSelect+0x40>
 800f914:	2201      	movs	r2, #1
 800f916:	e000      	b.n	800f91a <_UG_FontSelect+0x42>
 800f918:	2200      	movs	r2, #0
 800f91a:	4b2f      	ldr	r3, [pc, #188]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	b2d2      	uxtb	r2, r2
 800f920:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	607a      	str	r2, [r7, #4]
 800f92a:	4a2b      	ldr	r2, [pc, #172]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f92c:	6812      	ldr	r2, [r2, #0]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	1c5a      	adds	r2, r3, #1
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	4a27      	ldr	r2, [pc, #156]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800f944:	4b24      	ldr	r3, [pc, #144]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f946:	681c      	ldr	r4, [r3, #0]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff f9b7 	bl	800ecbc <ptr_8to16>
 800f94e:	4603      	mov	r3, r0
 800f950:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	3302      	adds	r3, #2
 800f956:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800f958:	4b1f      	ldr	r3, [pc, #124]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f95a:	681c      	ldr	r4, [r3, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7ff f9ad 	bl	800ecbc <ptr_8to16>
 800f962:	4603      	mov	r3, r0
 800f964:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3302      	adds	r3, #2
 800f96a:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 800f96c:	4b1a      	ldr	r3, [pc, #104]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f96e:	681c      	ldr	r4, [r3, #0]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7ff f9a3 	bl	800ecbc <ptr_8to16>
 800f976:	4603      	mov	r3, r0
 800f978:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	3302      	adds	r3, #2
 800f97e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	1c5a      	adds	r2, r3, #1
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00b      	beq.n	800f9a4 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800f98c:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800f994:	4b10      	ldr	r3, [pc, #64]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4413      	add	r3, r2
 800f9a0:	607b      	str	r3, [r7, #4]
 800f9a2:	e003      	b.n	800f9ac <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800f9a4:	4b0c      	ldr	r3, [pc, #48]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 800f9ac:	4b0a      	ldr	r3, [pc, #40]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800f9b4:	4b08      	ldr	r3, [pc, #32]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	461a      	mov	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800f9c4:	4b04      	ldr	r3, [pc, #16]	; (800f9d8 <_UG_FontSelect+0x100>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	641a      	str	r2, [r3, #64]	; 0x40
 800f9cc:	e000      	b.n	800f9d0 <_UG_FontSelect+0xf8>
    return;
 800f9ce:	bf00      	nop
}
 800f9d0:	370c      	adds	r7, #12
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd90      	pop	{r4, r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20002260 	.word	0x20002260

0800f9dc <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 800f9dc:	b5b0      	push	{r4, r5, r7, lr}
 800f9de:	b08c      	sub	sp, #48	; 0x30
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	4611      	mov	r1, r2
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	4623      	mov	r3, r4
 800f9ec:	80fb      	strh	r3, [r7, #6]
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	80bb      	strh	r3, [r7, #4]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	807b      	strh	r3, [r7, #2]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f9fe:	2300      	movs	r3, #0
 800fa00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fa02:	2300      	movs	r3, #0
 800fa04:	847b      	strh	r3, [r7, #34]	; 0x22
 800fa06:	2300      	movs	r3, #0
 800fa08:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800fa0a:	4b8c      	ldr	r3, [pc, #560]	; (800fc3c <_UG_PutChar+0x260>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fa12:	75fb      	strb	r3, [r7, #23]
 800fa14:	4b89      	ldr	r3, [pc, #548]	; (800fc3c <_UG_PutChar+0x260>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fa1c:	f003 0302 	and.w	r3, r3, #2
 800fa20:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800fa22:	2300      	movs	r3, #0
 800fa24:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800fa26:	f107 0208 	add.w	r2, r7, #8
 800fa2a:	88fb      	ldrh	r3, [r7, #6]
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7ff fe06 	bl	800f640 <_UG_GetCharData>
 800fa34:	4603      	mov	r3, r0
 800fa36:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800fa38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa40:	d102      	bne.n	800fa48 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295
 800fa46:	e226      	b.n	800fe96 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 800fa48:	4b7c      	ldr	r3, [pc, #496]	; (800fc3c <_UG_PutChar+0x260>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fa50:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 800fa52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d101      	bne.n	800fa5c <_UG_PutChar+0x80>
     return 0;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	e21c      	b.n	800fe96 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 800fa5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa5e:	08db      	lsrs	r3, r3, #3
 800fa60:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800fa62:	4b76      	ldr	r3, [pc, #472]	; (800fc3c <_UG_PutChar+0x260>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800fa6a:	f003 0307 	and.w	r3, r3, #7
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <_UG_PutChar+0x9e>
 800fa74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa76:	3301      	adds	r3, #1
 800fa78:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 800fa7a:	7dbb      	ldrb	r3, [r7, #22]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d01d      	beq.n	800fabc <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 800fa80:	4b6e      	ldr	r3, [pc, #440]	; (800fc3c <_UG_PutChar+0x260>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa86:	461d      	mov	r5, r3
 800fa88:	88ba      	ldrh	r2, [r7, #4]
 800fa8a:	8abb      	ldrh	r3, [r7, #20]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	3b01      	subs	r3, #1
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	b21c      	sxth	r4, r3
 800fa96:	4b69      	ldr	r3, [pc, #420]	; (800fc3c <_UG_PutChar+0x260>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	887b      	ldrh	r3, [r7, #2]
 800faa2:	4413      	add	r3, r2
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	3b01      	subs	r3, #1
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	b21b      	sxth	r3, r3
 800faac:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800fab0:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800fab4:	4622      	mov	r2, r4
 800fab6:	47a8      	blx	r5
 800fab8:	4603      	mov	r3, r0
 800faba:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 800fabc:	4b5f      	ldr	r3, [pc, #380]	; (800fc3c <_UG_PutChar+0x260>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f040 8172 	bne.w	800fdae <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800faca:	2300      	movs	r3, #0
 800facc:	853b      	strh	r3, [r7, #40]	; 0x28
 800face:	e0ec      	b.n	800fcaa <_UG_PutChar+0x2ce>
     {
       c=0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800fad4:	2300      	movs	r3, #0
 800fad6:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fad8:	e0df      	b.n	800fc9a <_UG_PutChar+0x2be>
       {
         b = *data++;
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	1c5a      	adds	r2, r3, #1
 800fade:	60ba      	str	r2, [r7, #8]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800fae4:	2300      	movs	r3, #0
 800fae6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fae8:	e0ca      	b.n	800fc80 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800faea:	7f7b      	ldrb	r3, [r7, #29]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d033      	beq.n	800fb5c <_UG_PutChar+0x180>
           {
             if(driver)
 800faf4:	7dbb      	ldrb	r3, [r7, #22]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d01f      	beq.n	800fb3a <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800fafa:	8c3b      	ldrh	r3, [r7, #32]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00a      	beq.n	800fb16 <_UG_PutChar+0x13a>
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d107      	bne.n	800fb16 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800fb06:	8c3a      	ldrh	r2, [r7, #32]
 800fb08:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	4610      	mov	r0, r2
 800fb10:	4798      	blx	r3
                 bpixels=0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800fb16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10a      	bne.n	800fb32 <_UG_PutChar+0x156>
 800fb1c:	7dfb      	ldrb	r3, [r7, #23]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d007      	beq.n	800fb32 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 800fb22:	88ba      	ldrh	r2, [r7, #4]
 800fb24:	8bfb      	ldrh	r3, [r7, #30]
 800fb26:	4413      	add	r3, r2
 800fb28:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 800fb2a:	887a      	ldrh	r2, [r7, #2]
 800fb2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fb2e:	4413      	add	r3, r2
 800fb30:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800fb32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb34:	3301      	adds	r3, #1
 800fb36:	847b      	strh	r3, [r7, #34]	; 0x22
 800fb38:	e096      	b.n	800fc68 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800fb3a:	4b40      	ldr	r3, [pc, #256]	; (800fc3c <_UG_PutChar+0x260>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	88b9      	ldrh	r1, [r7, #4]
 800fb44:	8bfa      	ldrh	r2, [r7, #30]
 800fb46:	440a      	add	r2, r1
 800fb48:	b292      	uxth	r2, r2
 800fb4a:	b210      	sxth	r0, r2
 800fb4c:	8879      	ldrh	r1, [r7, #2]
 800fb4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fb50:	440a      	add	r2, r1
 800fb52:	b292      	uxth	r2, r2
 800fb54:	b211      	sxth	r1, r2
 800fb56:	883a      	ldrh	r2, [r7, #0]
 800fb58:	4798      	blx	r3
 800fb5a:	e085      	b.n	800fc68 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 800fb5c:	7dbb      	ldrb	r3, [r7, #22]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d06e      	beq.n	800fc40 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800fb62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d064      	beq.n	800fc32 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d15e      	bne.n	800fc2c <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 800fb6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb70:	8839      	ldrh	r1, [r7, #0]
 800fb72:	69bb      	ldr	r3, [r7, #24]
 800fb74:	4610      	mov	r0, r2
 800fb76:	4798      	blx	r3
                   fpixels=0;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	847b      	strh	r3, [r7, #34]	; 0x22
 800fb7c:	e059      	b.n	800fc32 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 800fb7e:	88ba      	ldrh	r2, [r7, #4]
 800fb80:	8abb      	ldrh	r3, [r7, #20]
 800fb82:	4413      	add	r3, r2
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800fb8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d003      	beq.n	800fb9e <_UG_PutChar+0x1c2>
 800fb96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb98:	89fb      	ldrh	r3, [r7, #14]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d224      	bcs.n	800fbe8 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800fb9e:	4b27      	ldr	r3, [pc, #156]	; (800fc3c <_UG_PutChar+0x260>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fba4:	461d      	mov	r5, r3
 800fba6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800fbaa:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800fbae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbb0:	89fb      	ldrh	r3, [r7, #14]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	b21c      	sxth	r4, r3
 800fbbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fbc2:	fb92 f3f3 	sdiv	r3, r2, r3
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fbca:	4413      	add	r3, r2
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	b21b      	sxth	r3, r3
 800fbd0:	4622      	mov	r2, r4
 800fbd2:	47a8      	blx	r5
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800fbd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbda:	8839      	ldrh	r1, [r7, #0]
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	4610      	mov	r0, r2
 800fbe0:	4798      	blx	r3
                       fpixels=0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	847b      	strh	r3, [r7, #34]	; 0x22
 800fbe6:	e021      	b.n	800fc2c <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800fbe8:	4b14      	ldr	r3, [pc, #80]	; (800fc3c <_UG_PutChar+0x260>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbee:	461c      	mov	r4, r3
 800fbf0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800fbf4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800fbf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbfa:	89fb      	ldrh	r3, [r7, #14]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	3b01      	subs	r3, #1
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	b21a      	sxth	r2, r3
 800fc06:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fc0a:	47a0      	blx	r4
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800fc10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc12:	8839      	ldrh	r1, [r7, #0]
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	4610      	mov	r0, r2
 800fc18:	4798      	blx	r3
                       fpixels -= width;
 800fc1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 800fc22:	88bb      	ldrh	r3, [r7, #4]
 800fc24:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 800fc26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc28:	3301      	adds	r3, #1
 800fc2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 800fc2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1a5      	bne.n	800fb7e <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 800fc32:	8c3b      	ldrh	r3, [r7, #32]
 800fc34:	3301      	adds	r3, #1
 800fc36:	843b      	strh	r3, [r7, #32]
 800fc38:	e016      	b.n	800fc68 <_UG_PutChar+0x28c>
 800fc3a:	bf00      	nop
 800fc3c:	20002260 	.word	0x20002260
             }
             else if(!trans)                           // Not accelerated output
 800fc40:	7dfb      	ldrb	r3, [r7, #23]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d110      	bne.n	800fc68 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 800fc46:	4b96      	ldr	r3, [pc, #600]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	88b9      	ldrh	r1, [r7, #4]
 800fc50:	8bfa      	ldrh	r2, [r7, #30]
 800fc52:	440a      	add	r2, r1
 800fc54:	b292      	uxth	r2, r2
 800fc56:	b210      	sxth	r0, r2
 800fc58:	8879      	ldrh	r1, [r7, #2]
 800fc5a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fc5c:	440a      	add	r2, r1
 800fc5e:	b292      	uxth	r2, r2
 800fc60:	b211      	sxth	r1, r2
 800fc62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fc66:	4798      	blx	r3
             }
           }
           b >>= 1;
 800fc68:	7f7b      	ldrb	r3, [r7, #29]
 800fc6a:	085b      	lsrs	r3, r3, #1
 800fc6c:	777b      	strb	r3, [r7, #29]
           c++;
 800fc6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	3301      	adds	r3, #1
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800fc7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc82:	2b07      	cmp	r3, #7
 800fc84:	d806      	bhi.n	800fc94 <_UG_PutChar+0x2b8>
 800fc86:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800fc8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	f6ff af2b 	blt.w	800faea <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 800fc94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fc96:	3301      	adds	r3, #1
 800fc98:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fc9a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800fc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	f4ff af1b 	bcc.w	800fada <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800fca4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fca6:	3301      	adds	r3, #1
 800fca8:	853b      	strh	r3, [r7, #40]	; 0x28
 800fcaa:	4b7d      	ldr	r3, [pc, #500]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	f4ff af0a 	bcc.w	800fad0 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 800fcbc:	7dbb      	ldrb	r3, [r7, #22]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f000 80e7 	beq.w	800fe92 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 800fcc4:	8c3b      	ldrh	r3, [r7, #32]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d009      	beq.n	800fcde <_UG_PutChar+0x302>
 800fcca:	7dfb      	ldrb	r3, [r7, #23]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d106      	bne.n	800fcde <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 800fcd0:	8c3a      	ldrh	r2, [r7, #32]
 800fcd2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
 800fcdc:	e0d9      	b.n	800fe92 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 800fcde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f000 80d6 	beq.w	800fe92 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 800fce6:	7dfb      	ldrb	r3, [r7, #23]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d15c      	bne.n	800fda6 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 800fcec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fcee:	8839      	ldrh	r1, [r7, #0]
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	4798      	blx	r3
 800fcf6:	e0cc      	b.n	800fe92 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800fcf8:	88ba      	ldrh	r2, [r7, #4]
 800fcfa:	8abb      	ldrh	r3, [r7, #20]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800fd06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d003      	beq.n	800fd18 <_UG_PutChar+0x33c>
 800fd10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd12:	8a3b      	ldrh	r3, [r7, #16]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d224      	bcs.n	800fd62 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800fd18:	4b61      	ldr	r3, [pc, #388]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd1e:	461d      	mov	r5, r3
 800fd20:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800fd24:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800fd28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd2a:	8a3b      	ldrh	r3, [r7, #16]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	3b01      	subs	r3, #1
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	b21c      	sxth	r4, r3
 800fd36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fd3c:	fb92 f3f3 	sdiv	r3, r2, r3
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd44:	4413      	add	r3, r2
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	b21b      	sxth	r3, r3
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	47a8      	blx	r5
 800fd4e:	4603      	mov	r3, r0
 800fd50:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800fd52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd54:	8839      	ldrh	r1, [r7, #0]
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	4610      	mov	r0, r2
 800fd5a:	4798      	blx	r3
               fpixels=0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fd60:	e021      	b.n	800fda6 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800fd62:	4b4f      	ldr	r3, [pc, #316]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd68:	461c      	mov	r4, r3
 800fd6a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800fd6e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800fd72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fd74:	8a3b      	ldrh	r3, [r7, #16]
 800fd76:	4413      	add	r3, r2
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	b21a      	sxth	r2, r3
 800fd80:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800fd84:	47a0      	blx	r4
 800fd86:	4603      	mov	r3, r0
 800fd88:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800fd8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd8c:	8839      	ldrh	r1, [r7, #0]
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	4610      	mov	r0, r2
 800fd92:	4798      	blx	r3
               fpixels -= width;
 800fd94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd96:	8a3b      	ldrh	r3, [r7, #16]
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 800fd9c:	88bb      	ldrh	r3, [r7, #4]
 800fd9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 800fda0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fda2:	3301      	adds	r3, #1
 800fda4:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 800fda6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1a5      	bne.n	800fcf8 <_UG_PutChar+0x31c>
 800fdac:	e071      	b.n	800fe92 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800fdae:	4b3c      	ldr	r3, [pc, #240]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d16b      	bne.n	800fe92 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800fdba:	2300      	movs	r3, #0
 800fdbc:	853b      	strh	r3, [r7, #40]	; 0x28
 800fdbe:	e060      	b.n	800fe82 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fdc4:	e04a      	b.n	800fe5c <_UG_PutChar+0x480>
       {
         b = *data++;
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	60ba      	str	r2, [r7, #8]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800fdd0:	883b      	ldrh	r3, [r7, #0]
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	7f7a      	ldrb	r2, [r7, #29]
 800fdd6:	fb03 f202 	mul.w	r2, r3, r2
 800fdda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	7f79      	ldrb	r1, [r7, #29]
 800fde2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800fde6:	fb01 f303 	mul.w	r3, r1, r3
 800fdea:	4413      	add	r3, r2
 800fdec:	121b      	asrs	r3, r3, #8
 800fdee:	b21b      	sxth	r3, r3
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800fdf4:	883b      	ldrh	r3, [r7, #0]
 800fdf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fdfa:	7f79      	ldrb	r1, [r7, #29]
 800fdfc:	fb03 f101 	mul.w	r1, r3, r1
 800fe00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fe08:	7f78      	ldrb	r0, [r7, #29]
 800fe0a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800fe0e:	fb00 f303 	mul.w	r3, r0, r3
 800fe12:	440b      	add	r3, r1
 800fe14:	121b      	asrs	r3, r3, #8
 800fe16:	b21b      	sxth	r3, r3
 800fe18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fe1c:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	b21b      	sxth	r3, r3
 800fe22:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800fe24:	7dbb      	ldrb	r3, [r7, #22]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d005      	beq.n	800fe36 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800fe2a:	8a7a      	ldrh	r2, [r7, #18]
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	4611      	mov	r1, r2
 800fe30:	2001      	movs	r0, #1
 800fe32:	4798      	blx	r3
 800fe34:	e00f      	b.n	800fe56 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800fe36:	4b1a      	ldr	r3, [pc, #104]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	88b9      	ldrh	r1, [r7, #4]
 800fe40:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800fe42:	440a      	add	r2, r1
 800fe44:	b292      	uxth	r2, r2
 800fe46:	b210      	sxth	r0, r2
 800fe48:	8879      	ldrh	r1, [r7, #2]
 800fe4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fe4c:	440a      	add	r2, r1
 800fe4e:	b292      	uxth	r2, r2
 800fe50:	b211      	sxth	r1, r2
 800fe52:	8a7a      	ldrh	r2, [r7, #18]
 800fe54:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800fe56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe58:	3301      	adds	r3, #1
 800fe5a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800fe5c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800fe5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	dbaf      	blt.n	800fdc6 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	4a0d      	ldr	r2, [pc, #52]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fe6a:	6812      	ldr	r2, [r2, #0]
 800fe6c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800fe70:	4611      	mov	r1, r2
 800fe72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800fe76:	1a8a      	subs	r2, r1, r2
 800fe78:	4413      	add	r3, r2
 800fe7a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800fe7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fe7e:	3301      	adds	r3, #1
 800fe80:	853b      	strh	r3, [r7, #40]	; 0x28
 800fe82:	4b07      	ldr	r3, [pc, #28]	; (800fea0 <_UG_PutChar+0x4c4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d396      	bcc.n	800fdc0 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 800fe92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3730      	adds	r7, #48	; 0x30
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	20002260 	.word	0x20002260

0800fea4 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 800fea4:	b480      	push	{r7}
 800fea6:	b089      	sub	sp, #36	; 0x24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 800feac:	4b57      	ldr	r3, [pc, #348]	; (801000c <_UG_ProcessTouchData+0x168>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	88db      	ldrh	r3, [r3, #6]
 800feb2:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 800feb4:	4b55      	ldr	r3, [pc, #340]	; (801000c <_UG_ProcessTouchData+0x168>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	891b      	ldrh	r3, [r3, #8]
 800feba:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 800febc:	4b53      	ldr	r3, [pc, #332]	; (801000c <_UG_ProcessTouchData+0x168>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	791b      	ldrb	r3, [r3, #4]
 800fec2:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800feca:	2300      	movs	r3, #0
 800fecc:	83fb      	strh	r3, [r7, #30]
 800fece:	e090      	b.n	800fff2 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	8bfb      	ldrh	r3, [r7, #30]
 800fed6:	015b      	lsls	r3, r3, #5
 800fed8:	4413      	add	r3, r2
 800feda:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	785b      	ldrb	r3, [r3, #1]
 800fee6:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800fee8:	7bfb      	ldrb	r3, [r7, #15]
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d179      	bne.n	800ffe6 <_UG_ProcessTouchData+0x142>
 800fef2:	7bfb      	ldrb	r3, [r7, #15]
 800fef4:	f003 0302 	and.w	r3, r3, #2
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d074      	beq.n	800ffe6 <_UG_ProcessTouchData+0x142>
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
 800fefe:	f003 0308 	and.w	r3, r3, #8
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d06f      	beq.n	800ffe6 <_UG_ProcessTouchData+0x142>
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
 800ff08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d16a      	bne.n	800ffe6 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d047      	beq.n	800ffa6 <_UG_ProcessTouchData+0x102>
 800ff16:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ff1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1e:	d042      	beq.n	800ffa6 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800ff20:	7f7b      	ldrb	r3, [r7, #29]
 800ff22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d107      	bne.n	800ff3a <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800ff2a:	7f7b      	ldrb	r3, [r7, #29]
 800ff2c:	f043 0305 	orr.w	r3, r3, #5
 800ff30:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 800ff32:	7f7b      	ldrb	r3, [r7, #29]
 800ff34:	f023 0318 	bic.w	r3, r3, #24
 800ff38:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800ff3a:	7f7b      	ldrb	r3, [r7, #29]
 800ff3c:	f023 0320 	bic.w	r3, r3, #32
 800ff40:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff48:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	db25      	blt.n	800ff9c <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ff56:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	dc1e      	bgt.n	800ff9c <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800ff64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	db17      	blt.n	800ff9c <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ff72:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	dc10      	bgt.n	800ff9c <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800ff7a:	7f7b      	ldrb	r3, [r7, #29]
 800ff7c:	f043 0320 	orr.w	r3, r3, #32
 800ff80:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800ff82:	7f7b      	ldrb	r3, [r7, #29]
 800ff84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d107      	bne.n	800ff9c <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800ff8c:	7f7b      	ldrb	r3, [r7, #29]
 800ff8e:	f023 0304 	bic.w	r3, r3, #4
 800ff92:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800ff94:	7f7b      	ldrb	r3, [r7, #29]
 800ff96:	f043 0302 	orr.w	r3, r3, #2
 800ff9a:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 800ff9c:	7f7b      	ldrb	r3, [r7, #29]
 800ff9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa2:	777b      	strb	r3, [r7, #29]
 800ffa4:	e01f      	b.n	800ffe6 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800ffa6:	7f7b      	ldrb	r3, [r7, #29]
 800ffa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d01a      	beq.n	800ffe6 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800ffb0:	7f7b      	ldrb	r3, [r7, #29]
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d004      	beq.n	800ffc4 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800ffba:	7f7b      	ldrb	r3, [r7, #29]
 800ffbc:	f043 0308 	orr.w	r3, r3, #8
 800ffc0:	777b      	strb	r3, [r7, #29]
 800ffc2:	e003      	b.n	800ffcc <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800ffc4:	7f7b      	ldrb	r3, [r7, #29]
 800ffc6:	f043 0310 	orr.w	r3, r3, #16
 800ffca:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800ffcc:	7f7b      	ldrb	r3, [r7, #29]
 800ffce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d003      	beq.n	800ffde <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800ffd6:	7f7b      	ldrb	r3, [r7, #29]
 800ffd8:	f043 0301 	orr.w	r3, r3, #1
 800ffdc:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800ffde:	7f7b      	ldrb	r3, [r7, #29]
 800ffe0:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 800ffe4:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	7f7a      	ldrb	r2, [r7, #29]
 800ffea:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 800ffec:	8bfb      	ldrh	r3, [r7, #30]
 800ffee:	3301      	adds	r3, #1
 800fff0:	83fb      	strh	r3, [r7, #30]
 800fff2:	8bfa      	ldrh	r2, [r7, #30]
 800fff4:	8abb      	ldrh	r3, [r7, #20]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	f4ff af6a 	bcc.w	800fed0 <_UG_ProcessTouchData+0x2c>
   }
}
 800fffc:	bf00      	nop
 800fffe:	bf00      	nop
 8010000:	3724      	adds	r7, #36	; 0x24
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	20002260 	.word	0x20002260

08010010 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801001e:	2300      	movs	r3, #0
 8010020:	82fb      	strh	r3, [r7, #22]
 8010022:	e035      	b.n	8010090 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685a      	ldr	r2, [r3, #4]
 8010028:	8afb      	ldrh	r3, [r7, #22]
 801002a:	015b      	lsls	r3, r3, #5
 801002c:	4413      	add	r3, r2
 801002e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	785b      	ldrb	r3, [r3, #1]
 801003a:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 801003c:	7bfb      	ldrb	r3, [r7, #15]
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d121      	bne.n	801008a <_UG_UpdateObjects+0x7a>
 8010046:	7bfb      	ldrb	r3, [r7, #15]
 8010048:	f003 0302 	and.w	r3, r3, #2
 801004c:	2b00      	cmp	r3, #0
 801004e:	d01c      	beq.n	801008a <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8010050:	7bfb      	ldrb	r3, [r7, #15]
 8010052:	f003 0320 	and.w	r3, r3, #32
 8010056:	2b00      	cmp	r3, #0
 8010058:	d004      	beq.n	8010064 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	6939      	ldr	r1, [r7, #16]
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	f003 0308 	and.w	r3, r3, #8
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00d      	beq.n	801008a <_UG_UpdateObjects+0x7a>
 801006e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010072:	2b00      	cmp	r3, #0
 8010074:	da09      	bge.n	801008a <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8010076:	7bbb      	ldrb	r3, [r7, #14]
 8010078:	f003 0341 	and.w	r3, r3, #65	; 0x41
 801007c:	2b00      	cmp	r3, #0
 801007e:	d004      	beq.n	801008a <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	6939      	ldr	r1, [r7, #16]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 801008a:	8afb      	ldrh	r3, [r7, #22]
 801008c:	3301      	adds	r3, #1
 801008e:	82fb      	strh	r3, [r7, #22]
 8010090:	8afa      	ldrh	r2, [r7, #22]
 8010092:	8abb      	ldrh	r3, [r7, #20]
 8010094:	429a      	cmp	r2, r3
 8010096:	d3c5      	bcc.n	8010024 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8010098:	bf00      	nop
 801009a:	bf00      	nop
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b086      	sub	sp, #24
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80100ac:	4b22      	ldr	r3, [pc, #136]	; (8010138 <_UG_HandleEvents+0x94>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80100b2:	4b21      	ldr	r3, [pc, #132]	; (8010138 <_UG_HandleEvents+0x94>)
 80100b4:	2202      	movs	r2, #2
 80100b6:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80100be:	2300      	movs	r3, #0
 80100c0:	82fb      	strh	r3, [r7, #22]
 80100c2:	e02f      	b.n	8010124 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685a      	ldr	r2, [r3, #4]
 80100c8:	8afb      	ldrh	r3, [r7, #22]
 80100ca:	015b      	lsls	r3, r3, #5
 80100cc:	4413      	add	r3, r2
 80100ce:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80100d6:	7bfb      	ldrb	r3, [r7, #15]
 80100d8:	f003 0301 	and.w	r3, r3, #1
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d11e      	bne.n	801011e <_UG_HandleEvents+0x7a>
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
 80100e2:	f003 0302 	and.w	r3, r3, #2
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d019      	beq.n	801011e <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	7e9b      	ldrb	r3, [r3, #26]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d015      	beq.n	801011e <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80100f2:	4a11      	ldr	r2, [pc, #68]	; (8010138 <_UG_HandleEvents+0x94>)
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	7e1a      	ldrb	r2, [r3, #24]
 80100fc:	4b0e      	ldr	r3, [pc, #56]	; (8010138 <_UG_HandleEvents+0x94>)
 80100fe:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	7e5a      	ldrb	r2, [r3, #25]
 8010104:	4b0c      	ldr	r3, [pc, #48]	; (8010138 <_UG_HandleEvents+0x94>)
 8010106:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	7e9a      	ldrb	r2, [r3, #26]
 801010c:	4b0a      	ldr	r3, [pc, #40]	; (8010138 <_UG_HandleEvents+0x94>)
 801010e:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010114:	4808      	ldr	r0, [pc, #32]	; (8010138 <_UG_HandleEvents+0x94>)
 8010116:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	2200      	movs	r2, #0
 801011c:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 801011e:	8afb      	ldrh	r3, [r7, #22]
 8010120:	3301      	adds	r3, #1
 8010122:	82fb      	strh	r3, [r7, #22]
 8010124:	8afa      	ldrh	r2, [r7, #22]
 8010126:	8abb      	ldrh	r3, [r7, #20]
 8010128:	429a      	cmp	r2, r3
 801012a:	d3cb      	bcc.n	80100c4 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 801012c:	bf00      	nop
 801012e:	bf00      	nop
 8010130:	3718      	adds	r7, #24
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20002274 	.word	0x20002274

0801013c <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 801013c:	b590      	push	{r4, r7, lr}
 801013e:	b08f      	sub	sp, #60	; 0x3c
 8010140:	af02      	add	r7, sp, #8
 8010142:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	2b00      	cmp	r3, #0
 801014a:	f000 812c 	beq.w	80103a6 <_UG_PutText+0x26a>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 8127 	beq.w	80103a6 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	89db      	ldrh	r3, [r3, #14]
 801015c:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	895b      	ldrh	r3, [r3, #10]
 8010162:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	3302      	adds	r3, #2
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 801016e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8010172:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010176:	1ad2      	subs	r2, r2, r3
 8010178:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801017c:	429a      	cmp	r2, r3
 801017e:	f2c0 8114 	blt.w	80103aa <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	891b      	ldrh	r3, [r3, #8]
 8010186:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	899b      	ldrh	r3, [r3, #12]
 801018c:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	7d1b      	ldrb	r3, [r3, #20]
 8010192:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	8adb      	ldrh	r3, [r3, #22]
 8010198:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	8b1b      	ldrh	r3, [r3, #24]
 801019e:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7ff fb92 	bl	800f8d8 <_UG_FontSelect>

   rc=1;
 80101b4:	2301      	movs	r3, #1
 80101b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80101bc:	4b80      	ldr	r3, [pc, #512]	; (80103c0 <_UG_PutText+0x284>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d107      	bne.n	80101d8 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 80101c8:	f107 0308 	add.w	r3, r7, #8
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff f9bf 	bl	800f550 <_UG_DecodeUTF8>
 80101d2:	4603      	mov	r3, r0
 80101d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80101d6:	e004      	b.n	80101e2 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	60ba      	str	r2, [r7, #8]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80101e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d006      	beq.n	80101f6 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80101e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101ea:	2b0a      	cmp	r3, #10
 80101ec:	d1e6      	bne.n	80101bc <_UG_PutText+0x80>
 80101ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80101f0:	3301      	adds	r3, #1
 80101f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80101f4:	e7e2      	b.n	80101bc <_UG_PutText+0x80>
     if(!chr) break;
 80101f6:	bf00      	nop
   }

   yp = 0;
 80101f8:	2300      	movs	r3, #0
 80101fa:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80101fc:	7e7b      	ldrb	r3, [r7, #25]
 80101fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010202:	2b00      	cmp	r3, #0
 8010204:	d01f      	beq.n	8010246 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8010206:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010208:	8c3b      	ldrh	r3, [r7, #32]
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	b29b      	uxth	r3, r3
 801020e:	3301      	adds	r3, #1
 8010210:	b29b      	uxth	r3, r3
 8010212:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8010214:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010216:	8bfb      	ldrh	r3, [r7, #30]
 8010218:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 801021a:	fb11 f303 	smulbb	r3, r1, r3
 801021e:	b29b      	uxth	r3, r3
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	b29b      	uxth	r3, r3
 8010224:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8010226:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010228:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801022a:	3b01      	subs	r3, #1
 801022c:	b299      	uxth	r1, r3
 801022e:	8abb      	ldrh	r3, [r7, #20]
 8010230:	fb11 f303 	smulbb	r3, r1, r3
 8010234:	b29b      	uxth	r3, r3
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	b29b      	uxth	r3, r3
 801023a:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 801023c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010240:	2b00      	cmp	r3, #0
 8010242:	f2c0 80b4 	blt.w	80103ae <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8010246:	7e7b      	ldrb	r3, [r7, #25]
 8010248:	f003 0310 	and.w	r3, r3, #16
 801024c:	2b00      	cmp	r3, #0
 801024e:	d003      	beq.n	8010258 <_UG_PutText+0x11c>
 8010250:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010254:	105b      	asrs	r3, r3, #1
 8010256:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8010258:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801025a:	8c3b      	ldrh	r3, [r7, #32]
 801025c:	4413      	add	r3, r2
 801025e:	b29b      	uxth	r3, r3
 8010260:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8010262:	2300      	movs	r3, #0
 8010264:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	60bb      	str	r3, [r7, #8]
      wl = 0;
 801026a:	2300      	movs	r3, #0
 801026c:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801026e:	4b54      	ldr	r3, [pc, #336]	; (80103c0 <_UG_PutText+0x284>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010276:	2b00      	cmp	r3, #0
 8010278:	d107      	bne.n	801028a <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 801027a:	f107 0308 	add.w	r3, r7, #8
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff f966 	bl	800f550 <_UG_DecodeUTF8>
 8010284:	4603      	mov	r3, r0
 8010286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010288:	e004      	b.n	8010294 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	1c5a      	adds	r2, r3, #1
 801028e:	60ba      	str	r2, [r7, #8]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8010294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d01b      	beq.n	80102d2 <_UG_PutText+0x196>
 801029a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801029c:	2b0a      	cmp	r3, #10
 801029e:	d018      	beq.n	80102d2 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80102a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102a2:	2100      	movs	r1, #0
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7ff f9cb 	bl	800f640 <_UG_GetCharData>
 80102aa:	4603      	mov	r3, r0
 80102ac:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80102ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d00a      	beq.n	80102ce <_UG_PutText+0x192>
         sl++;
 80102b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80102ba:	3301      	adds	r3, #1
 80102bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 80102be:	8a7a      	ldrh	r2, [r7, #18]
 80102c0:	8afb      	ldrh	r3, [r7, #22]
 80102c2:	4413      	add	r3, r2
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102c8:	4413      	add	r3, r2
 80102ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 80102cc:	e7cf      	b.n	801026e <_UG_PutText+0x132>
         if (w == -1){continue;}
 80102ce:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80102d0:	e7cd      	b.n	801026e <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 80102d2:	8afb      	ldrh	r3, [r7, #22]
 80102d4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80102da:	8b7a      	ldrh	r2, [r7, #26]
 80102dc:	8bbb      	ldrh	r3, [r7, #28]
 80102de:	1ad3      	subs	r3, r2, r3
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	3301      	adds	r3, #1
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80102e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80102ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80102f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	db5b      	blt.n	80103b2 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80102fa:	7e7b      	ldrb	r3, [r7, #25]
 80102fc:	f003 0301 	and.w	r3, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d002      	beq.n	801030a <_UG_PutText+0x1ce>
 8010304:	2300      	movs	r3, #0
 8010306:	853b      	strh	r3, [r7, #40]	; 0x28
 8010308:	e008      	b.n	801031c <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 801030a:	7e7b      	ldrb	r3, [r7, #25]
 801030c:	f003 0302 	and.w	r3, r3, #2
 8010310:	2b00      	cmp	r3, #0
 8010312:	d003      	beq.n	801031c <_UG_PutText+0x1e0>
 8010314:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010318:	105b      	asrs	r3, r3, #1
 801031a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 801031c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801031e:	8bbb      	ldrh	r3, [r7, #28]
 8010320:	4413      	add	r3, r2
 8010322:	b29b      	uxth	r3, r3
 8010324:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010326:	4b26      	ldr	r3, [pc, #152]	; (80103c0 <_UG_PutText+0x284>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801032e:	2b00      	cmp	r3, #0
 8010330:	d107      	bne.n	8010342 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8010332:	f107 030c 	add.w	r3, r7, #12
 8010336:	4618      	mov	r0, r3
 8010338:	f7ff f90a 	bl	800f550 <_UG_DecodeUTF8>
 801033c:	4603      	mov	r3, r0
 801033e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010340:	e004      	b.n	801034c <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	1c5a      	adds	r2, r3, #1
 8010346:	60fa      	str	r2, [r7, #12]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 801034c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801034e:	2b00      	cmp	r3, #0
 8010350:	d031      	beq.n	80103b6 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8010352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010354:	2b0a      	cmp	r3, #10
 8010356:	d01c      	beq.n	8010392 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	8a1c      	ldrh	r4, [r3, #16]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	8a5b      	ldrh	r3, [r3, #18]
 8010360:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8010364:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8010368:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	4623      	mov	r3, r4
 801036e:	f7ff fb35 	bl	800f9dc <_UG_PutChar>
 8010372:	4603      	mov	r3, r0
 8010374:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8010376:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801037a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037e:	d0d2      	beq.n	8010326 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8010380:	8a7a      	ldrh	r2, [r7, #18]
 8010382:	8afb      	ldrh	r3, [r7, #22]
 8010384:	4413      	add	r3, r2
 8010386:	b29a      	uxth	r2, r3
 8010388:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801038a:	4413      	add	r3, r2
 801038c:	b29b      	uxth	r3, r3
 801038e:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8010390:	e7c9      	b.n	8010326 <_UG_PutText+0x1ea>
           break;
 8010392:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8010394:	8bfa      	ldrh	r2, [r7, #30]
 8010396:	8abb      	ldrh	r3, [r7, #20]
 8010398:	4413      	add	r3, r2
 801039a:	b29a      	uxth	r2, r3
 801039c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801039e:	4413      	add	r3, r2
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 80103a4:	e75d      	b.n	8010262 <_UG_PutText+0x126>
     return;
 80103a6:	bf00      	nop
 80103a8:	e006      	b.n	80103b8 <_UG_PutText+0x27c>
     return;
 80103aa:	bf00      	nop
 80103ac:	e004      	b.n	80103b8 <_UG_PutText+0x27c>
        return;
 80103ae:	bf00      	nop
 80103b0:	e002      	b.n	80103b8 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80103b2:	bf00      	nop
 80103b4:	e000      	b.n	80103b8 <_UG_PutText+0x27c>
           return;
 80103b6:	bf00      	nop
   }
}
 80103b8:	3734      	adds	r7, #52	; 0x34
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd90      	pop	{r4, r7, pc}
 80103be:	bf00      	nop
 80103c0:	20002260 	.word	0x20002260

080103c4 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80103c4:	b5b0      	push	{r4, r5, r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	4604      	mov	r4, r0
 80103cc:	4608      	mov	r0, r1
 80103ce:	4611      	mov	r1, r2
 80103d0:	461a      	mov	r2, r3
 80103d2:	4623      	mov	r3, r4
 80103d4:	80fb      	strh	r3, [r7, #6]
 80103d6:	4603      	mov	r3, r0
 80103d8:	80bb      	strh	r3, [r7, #4]
 80103da:	460b      	mov	r3, r1
 80103dc:	807b      	strh	r3, [r7, #2]
 80103de:	4613      	mov	r3, r2
 80103e0:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80103e2:	887b      	ldrh	r3, [r7, #2]
 80103e4:	3b01      	subs	r3, #1
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	b21c      	sxth	r4, r3
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	1c9a      	adds	r2, r3, #2
 80103ee:	61ba      	str	r2, [r7, #24]
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80103f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80103fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	4613      	mov	r3, r2
 8010402:	4622      	mov	r2, r4
 8010404:	f7fe fee0 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8010408:	88bb      	ldrh	r3, [r7, #4]
 801040a:	3301      	adds	r3, #1
 801040c:	b29b      	uxth	r3, r3
 801040e:	b219      	sxth	r1, r3
 8010410:	883b      	ldrh	r3, [r7, #0]
 8010412:	3b01      	subs	r3, #1
 8010414:	b29b      	uxth	r3, r3
 8010416:	b21c      	sxth	r4, r3
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	1c9a      	adds	r2, r3, #2
 801041c:	61ba      	str	r2, [r7, #24]
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010424:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	4623      	mov	r3, r4
 801042c:	f7fe fecc 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	1c9a      	adds	r2, r3, #2
 8010434:	61ba      	str	r2, [r7, #24]
 8010436:	881b      	ldrh	r3, [r3, #0]
 8010438:	f9b7 4000 	ldrsh.w	r4, [r7]
 801043c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010440:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010444:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	4623      	mov	r3, r4
 801044c:	f7fe febc 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8010450:	883b      	ldrh	r3, [r7, #0]
 8010452:	3b01      	subs	r3, #1
 8010454:	b29b      	uxth	r3, r3
 8010456:	b21c      	sxth	r4, r3
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	1c9a      	adds	r2, r3, #2
 801045c:	61ba      	str	r2, [r7, #24]
 801045e:	881b      	ldrh	r3, [r3, #0]
 8010460:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010464:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8010468:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	4623      	mov	r3, r4
 8010470:	f7fe feaa 	bl	800f1c8 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8010474:	88fb      	ldrh	r3, [r7, #6]
 8010476:	3301      	adds	r3, #1
 8010478:	b29b      	uxth	r3, r3
 801047a:	b218      	sxth	r0, r3
 801047c:	88bb      	ldrh	r3, [r7, #4]
 801047e:	3301      	adds	r3, #1
 8010480:	b29b      	uxth	r3, r3
 8010482:	b219      	sxth	r1, r3
 8010484:	887b      	ldrh	r3, [r7, #2]
 8010486:	3b02      	subs	r3, #2
 8010488:	b29b      	uxth	r3, r3
 801048a:	b21c      	sxth	r4, r3
 801048c:	88bb      	ldrh	r3, [r7, #4]
 801048e:	3301      	adds	r3, #1
 8010490:	b29b      	uxth	r3, r3
 8010492:	b21d      	sxth	r5, r3
 8010494:	69bb      	ldr	r3, [r7, #24]
 8010496:	1c9a      	adds	r2, r3, #2
 8010498:	61ba      	str	r2, [r7, #24]
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	9300      	str	r3, [sp, #0]
 801049e:	462b      	mov	r3, r5
 80104a0:	4622      	mov	r2, r4
 80104a2:	f7fe fe91 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80104a6:	88fb      	ldrh	r3, [r7, #6]
 80104a8:	3301      	adds	r3, #1
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	b218      	sxth	r0, r3
 80104ae:	88bb      	ldrh	r3, [r7, #4]
 80104b0:	3302      	adds	r3, #2
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	b219      	sxth	r1, r3
 80104b6:	88fb      	ldrh	r3, [r7, #6]
 80104b8:	3301      	adds	r3, #1
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	b21c      	sxth	r4, r3
 80104be:	883b      	ldrh	r3, [r7, #0]
 80104c0:	3b02      	subs	r3, #2
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	b21d      	sxth	r5, r3
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	1c9a      	adds	r2, r3, #2
 80104ca:	61ba      	str	r2, [r7, #24]
 80104cc:	881b      	ldrh	r3, [r3, #0]
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	462b      	mov	r3, r5
 80104d2:	4622      	mov	r2, r4
 80104d4:	f7fe fe78 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80104d8:	88fb      	ldrh	r3, [r7, #6]
 80104da:	3301      	adds	r3, #1
 80104dc:	b29b      	uxth	r3, r3
 80104de:	b218      	sxth	r0, r3
 80104e0:	883b      	ldrh	r3, [r7, #0]
 80104e2:	3b01      	subs	r3, #1
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	b219      	sxth	r1, r3
 80104e8:	887b      	ldrh	r3, [r7, #2]
 80104ea:	3b01      	subs	r3, #1
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	b21c      	sxth	r4, r3
 80104f0:	883b      	ldrh	r3, [r7, #0]
 80104f2:	3b01      	subs	r3, #1
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	b21d      	sxth	r5, r3
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	1c9a      	adds	r2, r3, #2
 80104fc:	61ba      	str	r2, [r7, #24]
 80104fe:	881b      	ldrh	r3, [r3, #0]
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	462b      	mov	r3, r5
 8010504:	4622      	mov	r2, r4
 8010506:	f7fe fe5f 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 801050a:	887b      	ldrh	r3, [r7, #2]
 801050c:	3b01      	subs	r3, #1
 801050e:	b29b      	uxth	r3, r3
 8010510:	b218      	sxth	r0, r3
 8010512:	88bb      	ldrh	r3, [r7, #4]
 8010514:	3301      	adds	r3, #1
 8010516:	b29b      	uxth	r3, r3
 8010518:	b219      	sxth	r1, r3
 801051a:	887b      	ldrh	r3, [r7, #2]
 801051c:	3b01      	subs	r3, #1
 801051e:	b29b      	uxth	r3, r3
 8010520:	b21c      	sxth	r4, r3
 8010522:	883b      	ldrh	r3, [r7, #0]
 8010524:	3b02      	subs	r3, #2
 8010526:	b29b      	uxth	r3, r3
 8010528:	b21d      	sxth	r5, r3
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	1c9a      	adds	r2, r3, #2
 801052e:	61ba      	str	r2, [r7, #24]
 8010530:	881b      	ldrh	r3, [r3, #0]
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	462b      	mov	r3, r5
 8010536:	4622      	mov	r2, r4
 8010538:	f7fe fe46 	bl	800f1c8 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 801053c:	88fb      	ldrh	r3, [r7, #6]
 801053e:	3302      	adds	r3, #2
 8010540:	b29b      	uxth	r3, r3
 8010542:	b218      	sxth	r0, r3
 8010544:	88bb      	ldrh	r3, [r7, #4]
 8010546:	3302      	adds	r3, #2
 8010548:	b29b      	uxth	r3, r3
 801054a:	b219      	sxth	r1, r3
 801054c:	887b      	ldrh	r3, [r7, #2]
 801054e:	3b03      	subs	r3, #3
 8010550:	b29b      	uxth	r3, r3
 8010552:	b21c      	sxth	r4, r3
 8010554:	88bb      	ldrh	r3, [r7, #4]
 8010556:	3302      	adds	r3, #2
 8010558:	b29b      	uxth	r3, r3
 801055a:	b21d      	sxth	r5, r3
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	1c9a      	adds	r2, r3, #2
 8010560:	61ba      	str	r2, [r7, #24]
 8010562:	881b      	ldrh	r3, [r3, #0]
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	462b      	mov	r3, r5
 8010568:	4622      	mov	r2, r4
 801056a:	f7fe fe2d 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801056e:	88fb      	ldrh	r3, [r7, #6]
 8010570:	3302      	adds	r3, #2
 8010572:	b29b      	uxth	r3, r3
 8010574:	b218      	sxth	r0, r3
 8010576:	88bb      	ldrh	r3, [r7, #4]
 8010578:	3303      	adds	r3, #3
 801057a:	b29b      	uxth	r3, r3
 801057c:	b219      	sxth	r1, r3
 801057e:	88fb      	ldrh	r3, [r7, #6]
 8010580:	3302      	adds	r3, #2
 8010582:	b29b      	uxth	r3, r3
 8010584:	b21c      	sxth	r4, r3
 8010586:	883b      	ldrh	r3, [r7, #0]
 8010588:	3b03      	subs	r3, #3
 801058a:	b29b      	uxth	r3, r3
 801058c:	b21d      	sxth	r5, r3
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	1c9a      	adds	r2, r3, #2
 8010592:	61ba      	str	r2, [r7, #24]
 8010594:	881b      	ldrh	r3, [r3, #0]
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	462b      	mov	r3, r5
 801059a:	4622      	mov	r2, r4
 801059c:	f7fe fe14 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80105a0:	88fb      	ldrh	r3, [r7, #6]
 80105a2:	3302      	adds	r3, #2
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	b218      	sxth	r0, r3
 80105a8:	883b      	ldrh	r3, [r7, #0]
 80105aa:	3b02      	subs	r3, #2
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	b219      	sxth	r1, r3
 80105b0:	887b      	ldrh	r3, [r7, #2]
 80105b2:	3b02      	subs	r3, #2
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	b21c      	sxth	r4, r3
 80105b8:	883b      	ldrh	r3, [r7, #0]
 80105ba:	3b02      	subs	r3, #2
 80105bc:	b29b      	uxth	r3, r3
 80105be:	b21d      	sxth	r5, r3
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	1c9a      	adds	r2, r3, #2
 80105c4:	61ba      	str	r2, [r7, #24]
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	462b      	mov	r3, r5
 80105cc:	4622      	mov	r2, r4
 80105ce:	f7fe fdfb 	bl	800f1c8 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80105d2:	887b      	ldrh	r3, [r7, #2]
 80105d4:	3b02      	subs	r3, #2
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	b218      	sxth	r0, r3
 80105da:	88bb      	ldrh	r3, [r7, #4]
 80105dc:	3302      	adds	r3, #2
 80105de:	b29b      	uxth	r3, r3
 80105e0:	b219      	sxth	r1, r3
 80105e2:	887b      	ldrh	r3, [r7, #2]
 80105e4:	3b02      	subs	r3, #2
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	b21a      	sxth	r2, r3
 80105ea:	883b      	ldrh	r3, [r7, #0]
 80105ec:	3b03      	subs	r3, #3
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	b21c      	sxth	r4, r3
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	881b      	ldrh	r3, [r3, #0]
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	4623      	mov	r3, r4
 80105fa:	f7fe fde5 	bl	800f1c8 <UG_DrawLine>
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010608 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8010608:	b480      	push	{r7}
 801060a:	b083      	sub	sp, #12
 801060c:	af00      	add	r7, sp, #0
 801060e:	4603      	mov	r3, r0
 8010610:	6039      	str	r1, [r7, #0]
 8010612:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8010614:	79fb      	ldrb	r3, [r7, #7]
 8010616:	2b03      	cmp	r3, #3
 8010618:	d810      	bhi.n	801063c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 801061a:	4b0b      	ldr	r3, [pc, #44]	; (8010648 <UG_DriverRegister+0x40>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	330a      	adds	r3, #10
 8010622:	00db      	lsls	r3, r3, #3
 8010624:	4413      	add	r3, r2
 8010626:	683a      	ldr	r2, [r7, #0]
 8010628:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 801062a:	4b07      	ldr	r3, [pc, #28]	; (8010648 <UG_DriverRegister+0x40>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	79fb      	ldrb	r3, [r7, #7]
 8010630:	330a      	adds	r3, #10
 8010632:	00db      	lsls	r3, r3, #3
 8010634:	4413      	add	r3, r2
 8010636:	2203      	movs	r2, #3
 8010638:	721a      	strb	r2, [r3, #8]
 801063a:	e000      	b.n	801063e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 801063c:	bf00      	nop
}
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	20002260 	.word	0x20002260

0801064c <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8010652:	4b5e      	ldr	r3, [pc, #376]	; (80107cc <UG_Update+0x180>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801065a:	f003 0301 	and.w	r3, r3, #1
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00a      	beq.n	8010678 <UG_Update+0x2c>
 8010662:	4b5a      	ldr	r3, [pc, #360]	; (80107cc <UG_Update+0x180>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801066a:	4b58      	ldr	r3, [pc, #352]	; (80107cc <UG_Update+0x180>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f022 0201 	bic.w	r2, r2, #1
 8010672:	b2d2      	uxtb	r2, r2
 8010674:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8010678:	4b54      	ldr	r3, [pc, #336]	; (80107cc <UG_Update+0x180>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68da      	ldr	r2, [r3, #12]
 801067e:	4b53      	ldr	r3, [pc, #332]	; (80107cc <UG_Update+0x180>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	429a      	cmp	r2, r3
 8010686:	d071      	beq.n	801076c <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8010688:	4b50      	ldr	r3, [pc, #320]	; (80107cc <UG_Update+0x180>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d06c      	beq.n	801076c <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8010692:	4b4e      	ldr	r3, [pc, #312]	; (80107cc <UG_Update+0x180>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	4b4d      	ldr	r3, [pc, #308]	; (80107cc <UG_Update+0x180>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	6912      	ldr	r2, [r2, #16]
 801069c:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 801069e:	4b4b      	ldr	r3, [pc, #300]	; (80107cc <UG_Update+0x180>)
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	4b4a      	ldr	r3, [pc, #296]	; (80107cc <UG_Update+0x180>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	68d2      	ldr	r2, [r2, #12]
 80106a8:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80106aa:	4b48      	ldr	r3, [pc, #288]	; (80107cc <UG_Update+0x180>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	695b      	ldr	r3, [r3, #20]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d045      	beq.n	8010740 <UG_Update+0xf4>
 80106b4:	4b45      	ldr	r3, [pc, #276]	; (80107cc <UG_Update+0x180>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	695b      	ldr	r3, [r3, #20]
 80106ba:	7d9b      	ldrb	r3, [r3, #22]
 80106bc:	f003 0302 	and.w	r3, r3, #2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d03d      	beq.n	8010740 <UG_Update+0xf4>
 80106c4:	4b41      	ldr	r3, [pc, #260]	; (80107cc <UG_Update+0x180>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	695b      	ldr	r3, [r3, #20]
 80106ca:	7a1b      	ldrb	r3, [r3, #8]
 80106cc:	f003 0308 	and.w	r3, r3, #8
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d035      	beq.n	8010740 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80106d4:	4b3d      	ldr	r3, [pc, #244]	; (80107cc <UG_Update+0x180>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80106de:	4b3b      	ldr	r3, [pc, #236]	; (80107cc <UG_Update+0x180>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	691b      	ldr	r3, [r3, #16]
 80106e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d123      	bne.n	8010734 <UG_Update+0xe8>
 80106ec:	4b37      	ldr	r3, [pc, #220]	; (80107cc <UG_Update+0x180>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	695b      	ldr	r3, [r3, #20]
 80106f2:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80106f6:	4b35      	ldr	r3, [pc, #212]	; (80107cc <UG_Update+0x180>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	691b      	ldr	r3, [r3, #16]
 80106fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010700:	429a      	cmp	r2, r3
 8010702:	d117      	bne.n	8010734 <UG_Update+0xe8>
 8010704:	4b31      	ldr	r3, [pc, #196]	; (80107cc <UG_Update+0x180>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	695b      	ldr	r3, [r3, #20]
 801070a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801070e:	4b2f      	ldr	r3, [pc, #188]	; (80107cc <UG_Update+0x180>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010718:	429a      	cmp	r2, r3
 801071a:	d10b      	bne.n	8010734 <UG_Update+0xe8>
 801071c:	4b2b      	ldr	r3, [pc, #172]	; (80107cc <UG_Update+0x180>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	695b      	ldr	r3, [r3, #20]
 8010722:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8010726:	4b29      	ldr	r3, [pc, #164]	; (80107cc <UG_Update+0x180>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010730:	429a      	cmp	r2, r3
 8010732:	d005      	beq.n	8010740 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8010734:	4b25      	ldr	r3, [pc, #148]	; (80107cc <UG_Update+0x180>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	695b      	ldr	r3, [r3, #20]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f848 	bl	80107d0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8010740:	4b22      	ldr	r3, [pc, #136]	; (80107cc <UG_Update+0x180>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	7a1a      	ldrb	r2, [r3, #8]
 8010748:	4b20      	ldr	r3, [pc, #128]	; (80107cc <UG_Update+0x180>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	691b      	ldr	r3, [r3, #16]
 801074e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010752:	b2d2      	uxtb	r2, r2
 8010754:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8010756:	4b1d      	ldr	r3, [pc, #116]	; (80107cc <UG_Update+0x180>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	7a1a      	ldrb	r2, [r3, #8]
 801075e:	4b1b      	ldr	r3, [pc, #108]	; (80107cc <UG_Update+0x180>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8010768:	b2d2      	uxtb	r2, r2
 801076a:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 801076c:	4b17      	ldr	r3, [pc, #92]	; (80107cc <UG_Update+0x180>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d01b      	beq.n	80107ae <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8010776:	4b15      	ldr	r3, [pc, #84]	; (80107cc <UG_Update+0x180>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	7a1b      	ldrb	r3, [r3, #8]
 8010782:	f003 0320 	and.w	r3, r3, #32
 8010786:	2b00      	cmp	r3, #0
 8010788:	d002      	beq.n	8010790 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f8ca 	bl	8010924 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	7a1b      	ldrb	r3, [r3, #8]
 8010794:	f003 0308 	and.w	r3, r3, #8
 8010798:	2b00      	cmp	r3, #0
 801079a:	d008      	beq.n	80107ae <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff fb81 	bl	800fea4 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f7ff fc34 	bl	8010010 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7ff fc7b 	bl	80100a4 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80107ae:	4b07      	ldr	r3, [pc, #28]	; (80107cc <UG_Update+0x180>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	689b      	ldr	r3, [r3, #8]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d004      	beq.n	80107c4 <UG_Update+0x178>
     gui->device->flush();
 80107ba:	4b04      	ldr	r3, [pc, #16]	; (80107cc <UG_Update+0x180>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	4798      	blx	r3
   }
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	20002260 	.word	0x20002260

080107d0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b08f      	sub	sp, #60	; 0x3c
 80107d4:	af02      	add	r7, sp, #8
 80107d6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f000 809a 	beq.w	8010914 <_UG_WindowDrawTitle+0x144>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7a1b      	ldrb	r3, [r3, #8]
 80107e4:	f003 0302 	and.w	r3, r3, #2
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f000 8093 	beq.w	8010914 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	89db      	ldrh	r3, [r3, #14]
 80107f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	8a1b      	ldrh	r3, [r3, #16]
 80107f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8a5b      	ldrh	r3, [r3, #18]
 80107fe:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	8a9b      	ldrh	r3, [r3, #20]
 8010804:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	7d9b      	ldrb	r3, [r3, #22]
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00f      	beq.n	8010832 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8010812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010814:	3303      	adds	r3, #3
 8010816:	b29b      	uxth	r3, r3
 8010818:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 801081a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801081c:	3303      	adds	r3, #3
 801081e:	b29b      	uxth	r3, r3
 8010820:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8010822:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010824:	3b03      	subs	r3, #3
 8010826:	b29b      	uxth	r3, r3
 8010828:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 801082a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801082c:	3b03      	subs	r3, #3
 801082e:	b29b      	uxth	r3, r3
 8010830:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8010832:	4b3b      	ldr	r3, [pc, #236]	; (8010920 <_UG_WindowDrawTitle+0x150>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	691b      	ldr	r3, [r3, #16]
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	429a      	cmp	r2, r3
 801083c:	d106      	bne.n	801084c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010842:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010848:	83bb      	strh	r3, [r7, #28]
 801084a:	e005      	b.n	8010858 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010850:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010856:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801085e:	b29a      	uxth	r2, r3
 8010860:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010862:	4413      	add	r3, r2
 8010864:	b29b      	uxth	r3, r3
 8010866:	3b01      	subs	r3, #1
 8010868:	b29b      	uxth	r3, r3
 801086a:	b21c      	sxth	r4, r3
 801086c:	8bfb      	ldrh	r3, [r7, #30]
 801086e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8010872:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8010876:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801087a:	9300      	str	r3, [sp, #0]
 801087c:	4623      	mov	r3, r4
 801087e:	f7fe fb03 	bl	800ee88 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 801088e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010890:	3303      	adds	r3, #3
 8010892:	b29b      	uxth	r3, r3
 8010894:	b21b      	sxth	r3, r3
 8010896:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8010898:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801089a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 801089c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801089e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108aa:	4413      	add	r3, r2
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	3b01      	subs	r3, #1
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	b21b      	sxth	r3, r3
 80108b4:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80108bc:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80108c6:	b21b      	sxth	r3, r3
 80108c8:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80108d0:	b21b      	sxth	r3, r3
 80108d2:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80108d4:	f107 030c 	add.w	r3, r7, #12
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fc2f 	bl	801013c <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108e8:	4413      	add	r3, r2
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	b219      	sxth	r1, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108f8:	4413      	add	r3, r2
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	b21b      	sxth	r3, r3
 80108fe:	f649 5413 	movw	r4, #40211	; 0x9d13
 8010902:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8010906:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801090a:	9400      	str	r4, [sp, #0]
 801090c:	f7fe fc5c 	bl	800f1c8 <UG_DrawLine>
      return UG_RESULT_OK;
 8010910:	2300      	movs	r3, #0
 8010912:	e001      	b.n	8010918 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8010914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010918:	4618      	mov	r0, r3
 801091a:	3734      	adds	r7, #52	; 0x34
 801091c:	46bd      	mov	sp, r7
 801091e:	bd90      	pop	{r4, r7, pc}
 8010920:	20002260 	.word	0x20002260

08010924 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8010924:	b590      	push	{r4, r7, lr}
 8010926:	b089      	sub	sp, #36	; 0x24
 8010928:	af02      	add	r7, sp, #8
 801092a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	89db      	ldrh	r3, [r3, #14]
 8010930:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	8a1b      	ldrh	r3, [r3, #16]
 8010936:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	8a5b      	ldrh	r3, [r3, #18]
 801093c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	8a9b      	ldrh	r3, [r3, #20]
 8010942:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	7a1b      	ldrb	r3, [r3, #8]
 8010948:	f023 0320 	bic.w	r3, r3, #32
 801094c:	b2da      	uxtb	r2, r3
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	7a1b      	ldrb	r3, [r3, #8]
 8010956:	f003 0308 	and.w	r3, r3, #8
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 8084 	beq.w	8010a68 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7d9b      	ldrb	r3, [r3, #22]
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d021      	beq.n	80109b0 <_UG_WindowUpdate+0x8c>
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	7a1b      	ldrb	r3, [r3, #8]
 8010970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010974:	2b00      	cmp	r3, #0
 8010976:	d11b      	bne.n	80109b0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8010978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801097c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8010980:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8010984:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8010988:	4c43      	ldr	r4, [pc, #268]	; (8010a98 <_UG_WindowUpdate+0x174>)
 801098a:	9400      	str	r4, [sp, #0]
 801098c:	f7ff fd1a 	bl	80103c4 <_UG_DrawObjectFrame>
         xs+=3;
 8010990:	8abb      	ldrh	r3, [r7, #20]
 8010992:	3303      	adds	r3, #3
 8010994:	b29b      	uxth	r3, r3
 8010996:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8010998:	8a7b      	ldrh	r3, [r7, #18]
 801099a:	3303      	adds	r3, #3
 801099c:	b29b      	uxth	r3, r3
 801099e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80109a0:	8a3b      	ldrh	r3, [r7, #16]
 80109a2:	3b03      	subs	r3, #3
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80109a8:	89fb      	ldrh	r3, [r7, #14]
 80109aa:	3b03      	subs	r3, #3
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	7d9b      	ldrb	r3, [r3, #22]
 80109b4:	f003 0302 	and.w	r3, r3, #2
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d01a      	beq.n	80109f2 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7ff ff07 	bl	80107d0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	8a7b      	ldrh	r3, [r7, #18]
 80109cc:	4413      	add	r3, r2
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	3301      	adds	r3, #1
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	7a1b      	ldrb	r3, [r3, #8]
 80109da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7a1b      	ldrb	r3, [r3, #8]
 80109e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	721a      	strb	r2, [r3, #8]
            return;
 80109f0:	e04e      	b.n	8010a90 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	899b      	ldrh	r3, [r3, #12]
 80109f6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80109fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80109fe:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8010a02:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	4623      	mov	r3, r4
 8010a0a:	f7fe fa3d 	bl	800ee88 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8010a14:	2300      	movs	r3, #0
 8010a16:	82fb      	strh	r3, [r7, #22]
 8010a18:	e021      	b.n	8010a5e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	8afb      	ldrh	r3, [r7, #22]
 8010a20:	015b      	lsls	r3, r3, #5
 8010a22:	4413      	add	r3, r2
 8010a24:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	f003 0301 	and.w	r3, r3, #1
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d112      	bne.n	8010a58 <_UG_WindowUpdate+0x134>
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	f003 0302 	and.w	r3, r3, #2
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00c      	beq.n	8010a58 <_UG_WindowUpdate+0x134>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	f003 0308 	and.w	r3, r3, #8
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d006      	beq.n	8010a58 <_UG_WindowUpdate+0x134>
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8010a58:	8afb      	ldrh	r3, [r7, #22]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	82fb      	strh	r3, [r7, #22]
 8010a5e:	8afa      	ldrh	r2, [r7, #22]
 8010a60:	89bb      	ldrh	r3, [r7, #12]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d3d9      	bcc.n	8010a1a <_UG_WindowUpdate+0xf6>
 8010a66:	e013      	b.n	8010a90 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <_UG_WindowUpdate+0x178>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a88:	9300      	str	r3, [sp, #0]
 8010a8a:	4623      	mov	r3, r4
 8010a8c:	f7fe f9fc 	bl	800ee88 <UG_FillFrame>
   }
}
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd90      	pop	{r4, r7, pc}
 8010a96:	bf00      	nop
 8010a98:	08017f08 	.word	0x08017f08
 8010a9c:	20002260 	.word	0x20002260

08010aa0 <__cvt>:
 8010aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa4:	ec55 4b10 	vmov	r4, r5, d0
 8010aa8:	2d00      	cmp	r5, #0
 8010aaa:	460e      	mov	r6, r1
 8010aac:	4619      	mov	r1, r3
 8010aae:	462b      	mov	r3, r5
 8010ab0:	bfbb      	ittet	lt
 8010ab2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010ab6:	461d      	movlt	r5, r3
 8010ab8:	2300      	movge	r3, #0
 8010aba:	232d      	movlt	r3, #45	; 0x2d
 8010abc:	700b      	strb	r3, [r1, #0]
 8010abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ac0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ac4:	4691      	mov	r9, r2
 8010ac6:	f023 0820 	bic.w	r8, r3, #32
 8010aca:	bfbc      	itt	lt
 8010acc:	4622      	movlt	r2, r4
 8010ace:	4614      	movlt	r4, r2
 8010ad0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ad4:	d005      	beq.n	8010ae2 <__cvt+0x42>
 8010ad6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010ada:	d100      	bne.n	8010ade <__cvt+0x3e>
 8010adc:	3601      	adds	r6, #1
 8010ade:	2102      	movs	r1, #2
 8010ae0:	e000      	b.n	8010ae4 <__cvt+0x44>
 8010ae2:	2103      	movs	r1, #3
 8010ae4:	ab03      	add	r3, sp, #12
 8010ae6:	9301      	str	r3, [sp, #4]
 8010ae8:	ab02      	add	r3, sp, #8
 8010aea:	9300      	str	r3, [sp, #0]
 8010aec:	ec45 4b10 	vmov	d0, r4, r5
 8010af0:	4653      	mov	r3, sl
 8010af2:	4632      	mov	r2, r6
 8010af4:	f001 f88c 	bl	8011c10 <_dtoa_r>
 8010af8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010afc:	4607      	mov	r7, r0
 8010afe:	d102      	bne.n	8010b06 <__cvt+0x66>
 8010b00:	f019 0f01 	tst.w	r9, #1
 8010b04:	d022      	beq.n	8010b4c <__cvt+0xac>
 8010b06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010b0a:	eb07 0906 	add.w	r9, r7, r6
 8010b0e:	d110      	bne.n	8010b32 <__cvt+0x92>
 8010b10:	783b      	ldrb	r3, [r7, #0]
 8010b12:	2b30      	cmp	r3, #48	; 0x30
 8010b14:	d10a      	bne.n	8010b2c <__cvt+0x8c>
 8010b16:	2200      	movs	r2, #0
 8010b18:	2300      	movs	r3, #0
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	f7ef fffb 	bl	8000b18 <__aeabi_dcmpeq>
 8010b22:	b918      	cbnz	r0, 8010b2c <__cvt+0x8c>
 8010b24:	f1c6 0601 	rsb	r6, r6, #1
 8010b28:	f8ca 6000 	str.w	r6, [sl]
 8010b2c:	f8da 3000 	ldr.w	r3, [sl]
 8010b30:	4499      	add	r9, r3
 8010b32:	2200      	movs	r2, #0
 8010b34:	2300      	movs	r3, #0
 8010b36:	4620      	mov	r0, r4
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f7ef ffed 	bl	8000b18 <__aeabi_dcmpeq>
 8010b3e:	b108      	cbz	r0, 8010b44 <__cvt+0xa4>
 8010b40:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b44:	2230      	movs	r2, #48	; 0x30
 8010b46:	9b03      	ldr	r3, [sp, #12]
 8010b48:	454b      	cmp	r3, r9
 8010b4a:	d307      	bcc.n	8010b5c <__cvt+0xbc>
 8010b4c:	9b03      	ldr	r3, [sp, #12]
 8010b4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b50:	1bdb      	subs	r3, r3, r7
 8010b52:	4638      	mov	r0, r7
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	b004      	add	sp, #16
 8010b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5c:	1c59      	adds	r1, r3, #1
 8010b5e:	9103      	str	r1, [sp, #12]
 8010b60:	701a      	strb	r2, [r3, #0]
 8010b62:	e7f0      	b.n	8010b46 <__cvt+0xa6>

08010b64 <__exponent>:
 8010b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b66:	4603      	mov	r3, r0
 8010b68:	2900      	cmp	r1, #0
 8010b6a:	bfb8      	it	lt
 8010b6c:	4249      	neglt	r1, r1
 8010b6e:	f803 2b02 	strb.w	r2, [r3], #2
 8010b72:	bfb4      	ite	lt
 8010b74:	222d      	movlt	r2, #45	; 0x2d
 8010b76:	222b      	movge	r2, #43	; 0x2b
 8010b78:	2909      	cmp	r1, #9
 8010b7a:	7042      	strb	r2, [r0, #1]
 8010b7c:	dd2a      	ble.n	8010bd4 <__exponent+0x70>
 8010b7e:	f10d 0207 	add.w	r2, sp, #7
 8010b82:	4617      	mov	r7, r2
 8010b84:	260a      	movs	r6, #10
 8010b86:	4694      	mov	ip, r2
 8010b88:	fb91 f5f6 	sdiv	r5, r1, r6
 8010b8c:	fb06 1415 	mls	r4, r6, r5, r1
 8010b90:	3430      	adds	r4, #48	; 0x30
 8010b92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010b96:	460c      	mov	r4, r1
 8010b98:	2c63      	cmp	r4, #99	; 0x63
 8010b9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8010b9e:	4629      	mov	r1, r5
 8010ba0:	dcf1      	bgt.n	8010b86 <__exponent+0x22>
 8010ba2:	3130      	adds	r1, #48	; 0x30
 8010ba4:	f1ac 0402 	sub.w	r4, ip, #2
 8010ba8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010bac:	1c41      	adds	r1, r0, #1
 8010bae:	4622      	mov	r2, r4
 8010bb0:	42ba      	cmp	r2, r7
 8010bb2:	d30a      	bcc.n	8010bca <__exponent+0x66>
 8010bb4:	f10d 0209 	add.w	r2, sp, #9
 8010bb8:	eba2 020c 	sub.w	r2, r2, ip
 8010bbc:	42bc      	cmp	r4, r7
 8010bbe:	bf88      	it	hi
 8010bc0:	2200      	movhi	r2, #0
 8010bc2:	4413      	add	r3, r2
 8010bc4:	1a18      	subs	r0, r3, r0
 8010bc6:	b003      	add	sp, #12
 8010bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010bce:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010bd2:	e7ed      	b.n	8010bb0 <__exponent+0x4c>
 8010bd4:	2330      	movs	r3, #48	; 0x30
 8010bd6:	3130      	adds	r1, #48	; 0x30
 8010bd8:	7083      	strb	r3, [r0, #2]
 8010bda:	70c1      	strb	r1, [r0, #3]
 8010bdc:	1d03      	adds	r3, r0, #4
 8010bde:	e7f1      	b.n	8010bc4 <__exponent+0x60>

08010be0 <_printf_float>:
 8010be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be4:	ed2d 8b02 	vpush	{d8}
 8010be8:	b08d      	sub	sp, #52	; 0x34
 8010bea:	460c      	mov	r4, r1
 8010bec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010bf0:	4616      	mov	r6, r2
 8010bf2:	461f      	mov	r7, r3
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	f000 fef7 	bl	80119e8 <_localeconv_r>
 8010bfa:	f8d0 a000 	ldr.w	sl, [r0]
 8010bfe:	4650      	mov	r0, sl
 8010c00:	f7ef fb5e 	bl	80002c0 <strlen>
 8010c04:	2300      	movs	r3, #0
 8010c06:	930a      	str	r3, [sp, #40]	; 0x28
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	9305      	str	r3, [sp, #20]
 8010c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010c14:	3307      	adds	r3, #7
 8010c16:	f023 0307 	bic.w	r3, r3, #7
 8010c1a:	f103 0208 	add.w	r2, r3, #8
 8010c1e:	f8c8 2000 	str.w	r2, [r8]
 8010c22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c2a:	9307      	str	r3, [sp, #28]
 8010c2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c30:	ee08 0a10 	vmov	s16, r0
 8010c34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c3c:	4b9e      	ldr	r3, [pc, #632]	; (8010eb8 <_printf_float+0x2d8>)
 8010c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c42:	f7ef ff9b 	bl	8000b7c <__aeabi_dcmpun>
 8010c46:	bb88      	cbnz	r0, 8010cac <_printf_float+0xcc>
 8010c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c4c:	4b9a      	ldr	r3, [pc, #616]	; (8010eb8 <_printf_float+0x2d8>)
 8010c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c52:	f7ef ff75 	bl	8000b40 <__aeabi_dcmple>
 8010c56:	bb48      	cbnz	r0, 8010cac <_printf_float+0xcc>
 8010c58:	2200      	movs	r2, #0
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4640      	mov	r0, r8
 8010c5e:	4649      	mov	r1, r9
 8010c60:	f7ef ff64 	bl	8000b2c <__aeabi_dcmplt>
 8010c64:	b110      	cbz	r0, 8010c6c <_printf_float+0x8c>
 8010c66:	232d      	movs	r3, #45	; 0x2d
 8010c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c6c:	4a93      	ldr	r2, [pc, #588]	; (8010ebc <_printf_float+0x2dc>)
 8010c6e:	4b94      	ldr	r3, [pc, #592]	; (8010ec0 <_printf_float+0x2e0>)
 8010c70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010c74:	bf94      	ite	ls
 8010c76:	4690      	movls	r8, r2
 8010c78:	4698      	movhi	r8, r3
 8010c7a:	2303      	movs	r3, #3
 8010c7c:	6123      	str	r3, [r4, #16]
 8010c7e:	9b05      	ldr	r3, [sp, #20]
 8010c80:	f023 0304 	bic.w	r3, r3, #4
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	f04f 0900 	mov.w	r9, #0
 8010c8a:	9700      	str	r7, [sp, #0]
 8010c8c:	4633      	mov	r3, r6
 8010c8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c90:	4621      	mov	r1, r4
 8010c92:	4628      	mov	r0, r5
 8010c94:	f000 f9da 	bl	801104c <_printf_common>
 8010c98:	3001      	adds	r0, #1
 8010c9a:	f040 8090 	bne.w	8010dbe <_printf_float+0x1de>
 8010c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca2:	b00d      	add	sp, #52	; 0x34
 8010ca4:	ecbd 8b02 	vpop	{d8}
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	4642      	mov	r2, r8
 8010cae:	464b      	mov	r3, r9
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	f7ef ff62 	bl	8000b7c <__aeabi_dcmpun>
 8010cb8:	b140      	cbz	r0, 8010ccc <_printf_float+0xec>
 8010cba:	464b      	mov	r3, r9
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	bfbc      	itt	lt
 8010cc0:	232d      	movlt	r3, #45	; 0x2d
 8010cc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010cc6:	4a7f      	ldr	r2, [pc, #508]	; (8010ec4 <_printf_float+0x2e4>)
 8010cc8:	4b7f      	ldr	r3, [pc, #508]	; (8010ec8 <_printf_float+0x2e8>)
 8010cca:	e7d1      	b.n	8010c70 <_printf_float+0x90>
 8010ccc:	6863      	ldr	r3, [r4, #4]
 8010cce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010cd2:	9206      	str	r2, [sp, #24]
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	d13f      	bne.n	8010d58 <_printf_float+0x178>
 8010cd8:	2306      	movs	r3, #6
 8010cda:	6063      	str	r3, [r4, #4]
 8010cdc:	9b05      	ldr	r3, [sp, #20]
 8010cde:	6861      	ldr	r1, [r4, #4]
 8010ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	9303      	str	r3, [sp, #12]
 8010ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8010cea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010cee:	ab09      	add	r3, sp, #36	; 0x24
 8010cf0:	ec49 8b10 	vmov	d0, r8, r9
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	6022      	str	r2, [r4, #0]
 8010cf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f7ff fecf 	bl	8010aa0 <__cvt>
 8010d02:	9b06      	ldr	r3, [sp, #24]
 8010d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d06:	2b47      	cmp	r3, #71	; 0x47
 8010d08:	4680      	mov	r8, r0
 8010d0a:	d108      	bne.n	8010d1e <_printf_float+0x13e>
 8010d0c:	1cc8      	adds	r0, r1, #3
 8010d0e:	db02      	blt.n	8010d16 <_printf_float+0x136>
 8010d10:	6863      	ldr	r3, [r4, #4]
 8010d12:	4299      	cmp	r1, r3
 8010d14:	dd41      	ble.n	8010d9a <_printf_float+0x1ba>
 8010d16:	f1ab 0302 	sub.w	r3, fp, #2
 8010d1a:	fa5f fb83 	uxtb.w	fp, r3
 8010d1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010d22:	d820      	bhi.n	8010d66 <_printf_float+0x186>
 8010d24:	3901      	subs	r1, #1
 8010d26:	465a      	mov	r2, fp
 8010d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8010d2e:	f7ff ff19 	bl	8010b64 <__exponent>
 8010d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d34:	1813      	adds	r3, r2, r0
 8010d36:	2a01      	cmp	r2, #1
 8010d38:	4681      	mov	r9, r0
 8010d3a:	6123      	str	r3, [r4, #16]
 8010d3c:	dc02      	bgt.n	8010d44 <_printf_float+0x164>
 8010d3e:	6822      	ldr	r2, [r4, #0]
 8010d40:	07d2      	lsls	r2, r2, #31
 8010d42:	d501      	bpl.n	8010d48 <_printf_float+0x168>
 8010d44:	3301      	adds	r3, #1
 8010d46:	6123      	str	r3, [r4, #16]
 8010d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d09c      	beq.n	8010c8a <_printf_float+0xaa>
 8010d50:	232d      	movs	r3, #45	; 0x2d
 8010d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d56:	e798      	b.n	8010c8a <_printf_float+0xaa>
 8010d58:	9a06      	ldr	r2, [sp, #24]
 8010d5a:	2a47      	cmp	r2, #71	; 0x47
 8010d5c:	d1be      	bne.n	8010cdc <_printf_float+0xfc>
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d1bc      	bne.n	8010cdc <_printf_float+0xfc>
 8010d62:	2301      	movs	r3, #1
 8010d64:	e7b9      	b.n	8010cda <_printf_float+0xfa>
 8010d66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010d6a:	d118      	bne.n	8010d9e <_printf_float+0x1be>
 8010d6c:	2900      	cmp	r1, #0
 8010d6e:	6863      	ldr	r3, [r4, #4]
 8010d70:	dd0b      	ble.n	8010d8a <_printf_float+0x1aa>
 8010d72:	6121      	str	r1, [r4, #16]
 8010d74:	b913      	cbnz	r3, 8010d7c <_printf_float+0x19c>
 8010d76:	6822      	ldr	r2, [r4, #0]
 8010d78:	07d0      	lsls	r0, r2, #31
 8010d7a:	d502      	bpl.n	8010d82 <_printf_float+0x1a2>
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	440b      	add	r3, r1
 8010d80:	6123      	str	r3, [r4, #16]
 8010d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8010d84:	f04f 0900 	mov.w	r9, #0
 8010d88:	e7de      	b.n	8010d48 <_printf_float+0x168>
 8010d8a:	b913      	cbnz	r3, 8010d92 <_printf_float+0x1b2>
 8010d8c:	6822      	ldr	r2, [r4, #0]
 8010d8e:	07d2      	lsls	r2, r2, #31
 8010d90:	d501      	bpl.n	8010d96 <_printf_float+0x1b6>
 8010d92:	3302      	adds	r3, #2
 8010d94:	e7f4      	b.n	8010d80 <_printf_float+0x1a0>
 8010d96:	2301      	movs	r3, #1
 8010d98:	e7f2      	b.n	8010d80 <_printf_float+0x1a0>
 8010d9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010da0:	4299      	cmp	r1, r3
 8010da2:	db05      	blt.n	8010db0 <_printf_float+0x1d0>
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	6121      	str	r1, [r4, #16]
 8010da8:	07d8      	lsls	r0, r3, #31
 8010daa:	d5ea      	bpl.n	8010d82 <_printf_float+0x1a2>
 8010dac:	1c4b      	adds	r3, r1, #1
 8010dae:	e7e7      	b.n	8010d80 <_printf_float+0x1a0>
 8010db0:	2900      	cmp	r1, #0
 8010db2:	bfd4      	ite	le
 8010db4:	f1c1 0202 	rsble	r2, r1, #2
 8010db8:	2201      	movgt	r2, #1
 8010dba:	4413      	add	r3, r2
 8010dbc:	e7e0      	b.n	8010d80 <_printf_float+0x1a0>
 8010dbe:	6823      	ldr	r3, [r4, #0]
 8010dc0:	055a      	lsls	r2, r3, #21
 8010dc2:	d407      	bmi.n	8010dd4 <_printf_float+0x1f4>
 8010dc4:	6923      	ldr	r3, [r4, #16]
 8010dc6:	4642      	mov	r2, r8
 8010dc8:	4631      	mov	r1, r6
 8010dca:	4628      	mov	r0, r5
 8010dcc:	47b8      	blx	r7
 8010dce:	3001      	adds	r0, #1
 8010dd0:	d12c      	bne.n	8010e2c <_printf_float+0x24c>
 8010dd2:	e764      	b.n	8010c9e <_printf_float+0xbe>
 8010dd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010dd8:	f240 80e0 	bls.w	8010f9c <_printf_float+0x3bc>
 8010ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010de0:	2200      	movs	r2, #0
 8010de2:	2300      	movs	r3, #0
 8010de4:	f7ef fe98 	bl	8000b18 <__aeabi_dcmpeq>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d034      	beq.n	8010e56 <_printf_float+0x276>
 8010dec:	4a37      	ldr	r2, [pc, #220]	; (8010ecc <_printf_float+0x2ec>)
 8010dee:	2301      	movs	r3, #1
 8010df0:	4631      	mov	r1, r6
 8010df2:	4628      	mov	r0, r5
 8010df4:	47b8      	blx	r7
 8010df6:	3001      	adds	r0, #1
 8010df8:	f43f af51 	beq.w	8010c9e <_printf_float+0xbe>
 8010dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e00:	429a      	cmp	r2, r3
 8010e02:	db02      	blt.n	8010e0a <_printf_float+0x22a>
 8010e04:	6823      	ldr	r3, [r4, #0]
 8010e06:	07d8      	lsls	r0, r3, #31
 8010e08:	d510      	bpl.n	8010e2c <_printf_float+0x24c>
 8010e0a:	ee18 3a10 	vmov	r3, s16
 8010e0e:	4652      	mov	r2, sl
 8010e10:	4631      	mov	r1, r6
 8010e12:	4628      	mov	r0, r5
 8010e14:	47b8      	blx	r7
 8010e16:	3001      	adds	r0, #1
 8010e18:	f43f af41 	beq.w	8010c9e <_printf_float+0xbe>
 8010e1c:	f04f 0800 	mov.w	r8, #0
 8010e20:	f104 091a 	add.w	r9, r4, #26
 8010e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e26:	3b01      	subs	r3, #1
 8010e28:	4543      	cmp	r3, r8
 8010e2a:	dc09      	bgt.n	8010e40 <_printf_float+0x260>
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	079b      	lsls	r3, r3, #30
 8010e30:	f100 8107 	bmi.w	8011042 <_printf_float+0x462>
 8010e34:	68e0      	ldr	r0, [r4, #12]
 8010e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e38:	4298      	cmp	r0, r3
 8010e3a:	bfb8      	it	lt
 8010e3c:	4618      	movlt	r0, r3
 8010e3e:	e730      	b.n	8010ca2 <_printf_float+0xc2>
 8010e40:	2301      	movs	r3, #1
 8010e42:	464a      	mov	r2, r9
 8010e44:	4631      	mov	r1, r6
 8010e46:	4628      	mov	r0, r5
 8010e48:	47b8      	blx	r7
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	f43f af27 	beq.w	8010c9e <_printf_float+0xbe>
 8010e50:	f108 0801 	add.w	r8, r8, #1
 8010e54:	e7e6      	b.n	8010e24 <_printf_float+0x244>
 8010e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	dc39      	bgt.n	8010ed0 <_printf_float+0x2f0>
 8010e5c:	4a1b      	ldr	r2, [pc, #108]	; (8010ecc <_printf_float+0x2ec>)
 8010e5e:	2301      	movs	r3, #1
 8010e60:	4631      	mov	r1, r6
 8010e62:	4628      	mov	r0, r5
 8010e64:	47b8      	blx	r7
 8010e66:	3001      	adds	r0, #1
 8010e68:	f43f af19 	beq.w	8010c9e <_printf_float+0xbe>
 8010e6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010e70:	4313      	orrs	r3, r2
 8010e72:	d102      	bne.n	8010e7a <_printf_float+0x29a>
 8010e74:	6823      	ldr	r3, [r4, #0]
 8010e76:	07d9      	lsls	r1, r3, #31
 8010e78:	d5d8      	bpl.n	8010e2c <_printf_float+0x24c>
 8010e7a:	ee18 3a10 	vmov	r3, s16
 8010e7e:	4652      	mov	r2, sl
 8010e80:	4631      	mov	r1, r6
 8010e82:	4628      	mov	r0, r5
 8010e84:	47b8      	blx	r7
 8010e86:	3001      	adds	r0, #1
 8010e88:	f43f af09 	beq.w	8010c9e <_printf_float+0xbe>
 8010e8c:	f04f 0900 	mov.w	r9, #0
 8010e90:	f104 0a1a 	add.w	sl, r4, #26
 8010e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e96:	425b      	negs	r3, r3
 8010e98:	454b      	cmp	r3, r9
 8010e9a:	dc01      	bgt.n	8010ea0 <_printf_float+0x2c0>
 8010e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e9e:	e792      	b.n	8010dc6 <_printf_float+0x1e6>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	4652      	mov	r2, sl
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	47b8      	blx	r7
 8010eaa:	3001      	adds	r0, #1
 8010eac:	f43f aef7 	beq.w	8010c9e <_printf_float+0xbe>
 8010eb0:	f109 0901 	add.w	r9, r9, #1
 8010eb4:	e7ee      	b.n	8010e94 <_printf_float+0x2b4>
 8010eb6:	bf00      	nop
 8010eb8:	7fefffff 	.word	0x7fefffff
 8010ebc:	08017f20 	.word	0x08017f20
 8010ec0:	08017f24 	.word	0x08017f24
 8010ec4:	08017f28 	.word	0x08017f28
 8010ec8:	08017f2c 	.word	0x08017f2c
 8010ecc:	08017f30 	.word	0x08017f30
 8010ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	bfa8      	it	ge
 8010ed8:	461a      	movge	r2, r3
 8010eda:	2a00      	cmp	r2, #0
 8010edc:	4691      	mov	r9, r2
 8010ede:	dc37      	bgt.n	8010f50 <_printf_float+0x370>
 8010ee0:	f04f 0b00 	mov.w	fp, #0
 8010ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ee8:	f104 021a 	add.w	r2, r4, #26
 8010eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010eee:	9305      	str	r3, [sp, #20]
 8010ef0:	eba3 0309 	sub.w	r3, r3, r9
 8010ef4:	455b      	cmp	r3, fp
 8010ef6:	dc33      	bgt.n	8010f60 <_printf_float+0x380>
 8010ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010efc:	429a      	cmp	r2, r3
 8010efe:	db3b      	blt.n	8010f78 <_printf_float+0x398>
 8010f00:	6823      	ldr	r3, [r4, #0]
 8010f02:	07da      	lsls	r2, r3, #31
 8010f04:	d438      	bmi.n	8010f78 <_printf_float+0x398>
 8010f06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010f0a:	eba2 0903 	sub.w	r9, r2, r3
 8010f0e:	9b05      	ldr	r3, [sp, #20]
 8010f10:	1ad2      	subs	r2, r2, r3
 8010f12:	4591      	cmp	r9, r2
 8010f14:	bfa8      	it	ge
 8010f16:	4691      	movge	r9, r2
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	dc35      	bgt.n	8010f8a <_printf_float+0x3aa>
 8010f1e:	f04f 0800 	mov.w	r8, #0
 8010f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010f26:	f104 0a1a 	add.w	sl, r4, #26
 8010f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f2e:	1a9b      	subs	r3, r3, r2
 8010f30:	eba3 0309 	sub.w	r3, r3, r9
 8010f34:	4543      	cmp	r3, r8
 8010f36:	f77f af79 	ble.w	8010e2c <_printf_float+0x24c>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	4652      	mov	r2, sl
 8010f3e:	4631      	mov	r1, r6
 8010f40:	4628      	mov	r0, r5
 8010f42:	47b8      	blx	r7
 8010f44:	3001      	adds	r0, #1
 8010f46:	f43f aeaa 	beq.w	8010c9e <_printf_float+0xbe>
 8010f4a:	f108 0801 	add.w	r8, r8, #1
 8010f4e:	e7ec      	b.n	8010f2a <_printf_float+0x34a>
 8010f50:	4613      	mov	r3, r2
 8010f52:	4631      	mov	r1, r6
 8010f54:	4642      	mov	r2, r8
 8010f56:	4628      	mov	r0, r5
 8010f58:	47b8      	blx	r7
 8010f5a:	3001      	adds	r0, #1
 8010f5c:	d1c0      	bne.n	8010ee0 <_printf_float+0x300>
 8010f5e:	e69e      	b.n	8010c9e <_printf_float+0xbe>
 8010f60:	2301      	movs	r3, #1
 8010f62:	4631      	mov	r1, r6
 8010f64:	4628      	mov	r0, r5
 8010f66:	9205      	str	r2, [sp, #20]
 8010f68:	47b8      	blx	r7
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	f43f ae97 	beq.w	8010c9e <_printf_float+0xbe>
 8010f70:	9a05      	ldr	r2, [sp, #20]
 8010f72:	f10b 0b01 	add.w	fp, fp, #1
 8010f76:	e7b9      	b.n	8010eec <_printf_float+0x30c>
 8010f78:	ee18 3a10 	vmov	r3, s16
 8010f7c:	4652      	mov	r2, sl
 8010f7e:	4631      	mov	r1, r6
 8010f80:	4628      	mov	r0, r5
 8010f82:	47b8      	blx	r7
 8010f84:	3001      	adds	r0, #1
 8010f86:	d1be      	bne.n	8010f06 <_printf_float+0x326>
 8010f88:	e689      	b.n	8010c9e <_printf_float+0xbe>
 8010f8a:	9a05      	ldr	r2, [sp, #20]
 8010f8c:	464b      	mov	r3, r9
 8010f8e:	4442      	add	r2, r8
 8010f90:	4631      	mov	r1, r6
 8010f92:	4628      	mov	r0, r5
 8010f94:	47b8      	blx	r7
 8010f96:	3001      	adds	r0, #1
 8010f98:	d1c1      	bne.n	8010f1e <_printf_float+0x33e>
 8010f9a:	e680      	b.n	8010c9e <_printf_float+0xbe>
 8010f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f9e:	2a01      	cmp	r2, #1
 8010fa0:	dc01      	bgt.n	8010fa6 <_printf_float+0x3c6>
 8010fa2:	07db      	lsls	r3, r3, #31
 8010fa4:	d53a      	bpl.n	801101c <_printf_float+0x43c>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	4642      	mov	r2, r8
 8010faa:	4631      	mov	r1, r6
 8010fac:	4628      	mov	r0, r5
 8010fae:	47b8      	blx	r7
 8010fb0:	3001      	adds	r0, #1
 8010fb2:	f43f ae74 	beq.w	8010c9e <_printf_float+0xbe>
 8010fb6:	ee18 3a10 	vmov	r3, s16
 8010fba:	4652      	mov	r2, sl
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	47b8      	blx	r7
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	f43f ae6b 	beq.w	8010c9e <_printf_float+0xbe>
 8010fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fcc:	2200      	movs	r2, #0
 8010fce:	2300      	movs	r3, #0
 8010fd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010fd4:	f7ef fda0 	bl	8000b18 <__aeabi_dcmpeq>
 8010fd8:	b9d8      	cbnz	r0, 8011012 <_printf_float+0x432>
 8010fda:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010fde:	f108 0201 	add.w	r2, r8, #1
 8010fe2:	4631      	mov	r1, r6
 8010fe4:	4628      	mov	r0, r5
 8010fe6:	47b8      	blx	r7
 8010fe8:	3001      	adds	r0, #1
 8010fea:	d10e      	bne.n	801100a <_printf_float+0x42a>
 8010fec:	e657      	b.n	8010c9e <_printf_float+0xbe>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	4652      	mov	r2, sl
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	47b8      	blx	r7
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	f43f ae50 	beq.w	8010c9e <_printf_float+0xbe>
 8010ffe:	f108 0801 	add.w	r8, r8, #1
 8011002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011004:	3b01      	subs	r3, #1
 8011006:	4543      	cmp	r3, r8
 8011008:	dcf1      	bgt.n	8010fee <_printf_float+0x40e>
 801100a:	464b      	mov	r3, r9
 801100c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011010:	e6da      	b.n	8010dc8 <_printf_float+0x1e8>
 8011012:	f04f 0800 	mov.w	r8, #0
 8011016:	f104 0a1a 	add.w	sl, r4, #26
 801101a:	e7f2      	b.n	8011002 <_printf_float+0x422>
 801101c:	2301      	movs	r3, #1
 801101e:	4642      	mov	r2, r8
 8011020:	e7df      	b.n	8010fe2 <_printf_float+0x402>
 8011022:	2301      	movs	r3, #1
 8011024:	464a      	mov	r2, r9
 8011026:	4631      	mov	r1, r6
 8011028:	4628      	mov	r0, r5
 801102a:	47b8      	blx	r7
 801102c:	3001      	adds	r0, #1
 801102e:	f43f ae36 	beq.w	8010c9e <_printf_float+0xbe>
 8011032:	f108 0801 	add.w	r8, r8, #1
 8011036:	68e3      	ldr	r3, [r4, #12]
 8011038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801103a:	1a5b      	subs	r3, r3, r1
 801103c:	4543      	cmp	r3, r8
 801103e:	dcf0      	bgt.n	8011022 <_printf_float+0x442>
 8011040:	e6f8      	b.n	8010e34 <_printf_float+0x254>
 8011042:	f04f 0800 	mov.w	r8, #0
 8011046:	f104 0919 	add.w	r9, r4, #25
 801104a:	e7f4      	b.n	8011036 <_printf_float+0x456>

0801104c <_printf_common>:
 801104c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011050:	4616      	mov	r6, r2
 8011052:	4699      	mov	r9, r3
 8011054:	688a      	ldr	r2, [r1, #8]
 8011056:	690b      	ldr	r3, [r1, #16]
 8011058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801105c:	4293      	cmp	r3, r2
 801105e:	bfb8      	it	lt
 8011060:	4613      	movlt	r3, r2
 8011062:	6033      	str	r3, [r6, #0]
 8011064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011068:	4607      	mov	r7, r0
 801106a:	460c      	mov	r4, r1
 801106c:	b10a      	cbz	r2, 8011072 <_printf_common+0x26>
 801106e:	3301      	adds	r3, #1
 8011070:	6033      	str	r3, [r6, #0]
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	0699      	lsls	r1, r3, #26
 8011076:	bf42      	ittt	mi
 8011078:	6833      	ldrmi	r3, [r6, #0]
 801107a:	3302      	addmi	r3, #2
 801107c:	6033      	strmi	r3, [r6, #0]
 801107e:	6825      	ldr	r5, [r4, #0]
 8011080:	f015 0506 	ands.w	r5, r5, #6
 8011084:	d106      	bne.n	8011094 <_printf_common+0x48>
 8011086:	f104 0a19 	add.w	sl, r4, #25
 801108a:	68e3      	ldr	r3, [r4, #12]
 801108c:	6832      	ldr	r2, [r6, #0]
 801108e:	1a9b      	subs	r3, r3, r2
 8011090:	42ab      	cmp	r3, r5
 8011092:	dc26      	bgt.n	80110e2 <_printf_common+0x96>
 8011094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011098:	1e13      	subs	r3, r2, #0
 801109a:	6822      	ldr	r2, [r4, #0]
 801109c:	bf18      	it	ne
 801109e:	2301      	movne	r3, #1
 80110a0:	0692      	lsls	r2, r2, #26
 80110a2:	d42b      	bmi.n	80110fc <_printf_common+0xb0>
 80110a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110a8:	4649      	mov	r1, r9
 80110aa:	4638      	mov	r0, r7
 80110ac:	47c0      	blx	r8
 80110ae:	3001      	adds	r0, #1
 80110b0:	d01e      	beq.n	80110f0 <_printf_common+0xa4>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	f003 0306 	and.w	r3, r3, #6
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	bf02      	ittt	eq
 80110be:	68e5      	ldreq	r5, [r4, #12]
 80110c0:	6833      	ldreq	r3, [r6, #0]
 80110c2:	1aed      	subeq	r5, r5, r3
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	bf0c      	ite	eq
 80110c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110cc:	2500      	movne	r5, #0
 80110ce:	4293      	cmp	r3, r2
 80110d0:	bfc4      	itt	gt
 80110d2:	1a9b      	subgt	r3, r3, r2
 80110d4:	18ed      	addgt	r5, r5, r3
 80110d6:	2600      	movs	r6, #0
 80110d8:	341a      	adds	r4, #26
 80110da:	42b5      	cmp	r5, r6
 80110dc:	d11a      	bne.n	8011114 <_printf_common+0xc8>
 80110de:	2000      	movs	r0, #0
 80110e0:	e008      	b.n	80110f4 <_printf_common+0xa8>
 80110e2:	2301      	movs	r3, #1
 80110e4:	4652      	mov	r2, sl
 80110e6:	4649      	mov	r1, r9
 80110e8:	4638      	mov	r0, r7
 80110ea:	47c0      	blx	r8
 80110ec:	3001      	adds	r0, #1
 80110ee:	d103      	bne.n	80110f8 <_printf_common+0xac>
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295
 80110f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110f8:	3501      	adds	r5, #1
 80110fa:	e7c6      	b.n	801108a <_printf_common+0x3e>
 80110fc:	18e1      	adds	r1, r4, r3
 80110fe:	1c5a      	adds	r2, r3, #1
 8011100:	2030      	movs	r0, #48	; 0x30
 8011102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011106:	4422      	add	r2, r4
 8011108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801110c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011110:	3302      	adds	r3, #2
 8011112:	e7c7      	b.n	80110a4 <_printf_common+0x58>
 8011114:	2301      	movs	r3, #1
 8011116:	4622      	mov	r2, r4
 8011118:	4649      	mov	r1, r9
 801111a:	4638      	mov	r0, r7
 801111c:	47c0      	blx	r8
 801111e:	3001      	adds	r0, #1
 8011120:	d0e6      	beq.n	80110f0 <_printf_common+0xa4>
 8011122:	3601      	adds	r6, #1
 8011124:	e7d9      	b.n	80110da <_printf_common+0x8e>
	...

08011128 <_printf_i>:
 8011128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801112c:	7e0f      	ldrb	r7, [r1, #24]
 801112e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011130:	2f78      	cmp	r7, #120	; 0x78
 8011132:	4691      	mov	r9, r2
 8011134:	4680      	mov	r8, r0
 8011136:	460c      	mov	r4, r1
 8011138:	469a      	mov	sl, r3
 801113a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801113e:	d807      	bhi.n	8011150 <_printf_i+0x28>
 8011140:	2f62      	cmp	r7, #98	; 0x62
 8011142:	d80a      	bhi.n	801115a <_printf_i+0x32>
 8011144:	2f00      	cmp	r7, #0
 8011146:	f000 80d4 	beq.w	80112f2 <_printf_i+0x1ca>
 801114a:	2f58      	cmp	r7, #88	; 0x58
 801114c:	f000 80c0 	beq.w	80112d0 <_printf_i+0x1a8>
 8011150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011158:	e03a      	b.n	80111d0 <_printf_i+0xa8>
 801115a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801115e:	2b15      	cmp	r3, #21
 8011160:	d8f6      	bhi.n	8011150 <_printf_i+0x28>
 8011162:	a101      	add	r1, pc, #4	; (adr r1, 8011168 <_printf_i+0x40>)
 8011164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011168:	080111c1 	.word	0x080111c1
 801116c:	080111d5 	.word	0x080111d5
 8011170:	08011151 	.word	0x08011151
 8011174:	08011151 	.word	0x08011151
 8011178:	08011151 	.word	0x08011151
 801117c:	08011151 	.word	0x08011151
 8011180:	080111d5 	.word	0x080111d5
 8011184:	08011151 	.word	0x08011151
 8011188:	08011151 	.word	0x08011151
 801118c:	08011151 	.word	0x08011151
 8011190:	08011151 	.word	0x08011151
 8011194:	080112d9 	.word	0x080112d9
 8011198:	08011201 	.word	0x08011201
 801119c:	08011293 	.word	0x08011293
 80111a0:	08011151 	.word	0x08011151
 80111a4:	08011151 	.word	0x08011151
 80111a8:	080112fb 	.word	0x080112fb
 80111ac:	08011151 	.word	0x08011151
 80111b0:	08011201 	.word	0x08011201
 80111b4:	08011151 	.word	0x08011151
 80111b8:	08011151 	.word	0x08011151
 80111bc:	0801129b 	.word	0x0801129b
 80111c0:	682b      	ldr	r3, [r5, #0]
 80111c2:	1d1a      	adds	r2, r3, #4
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	602a      	str	r2, [r5, #0]
 80111c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111d0:	2301      	movs	r3, #1
 80111d2:	e09f      	b.n	8011314 <_printf_i+0x1ec>
 80111d4:	6820      	ldr	r0, [r4, #0]
 80111d6:	682b      	ldr	r3, [r5, #0]
 80111d8:	0607      	lsls	r7, r0, #24
 80111da:	f103 0104 	add.w	r1, r3, #4
 80111de:	6029      	str	r1, [r5, #0]
 80111e0:	d501      	bpl.n	80111e6 <_printf_i+0xbe>
 80111e2:	681e      	ldr	r6, [r3, #0]
 80111e4:	e003      	b.n	80111ee <_printf_i+0xc6>
 80111e6:	0646      	lsls	r6, r0, #25
 80111e8:	d5fb      	bpl.n	80111e2 <_printf_i+0xba>
 80111ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80111ee:	2e00      	cmp	r6, #0
 80111f0:	da03      	bge.n	80111fa <_printf_i+0xd2>
 80111f2:	232d      	movs	r3, #45	; 0x2d
 80111f4:	4276      	negs	r6, r6
 80111f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111fa:	485a      	ldr	r0, [pc, #360]	; (8011364 <_printf_i+0x23c>)
 80111fc:	230a      	movs	r3, #10
 80111fe:	e012      	b.n	8011226 <_printf_i+0xfe>
 8011200:	682b      	ldr	r3, [r5, #0]
 8011202:	6820      	ldr	r0, [r4, #0]
 8011204:	1d19      	adds	r1, r3, #4
 8011206:	6029      	str	r1, [r5, #0]
 8011208:	0605      	lsls	r5, r0, #24
 801120a:	d501      	bpl.n	8011210 <_printf_i+0xe8>
 801120c:	681e      	ldr	r6, [r3, #0]
 801120e:	e002      	b.n	8011216 <_printf_i+0xee>
 8011210:	0641      	lsls	r1, r0, #25
 8011212:	d5fb      	bpl.n	801120c <_printf_i+0xe4>
 8011214:	881e      	ldrh	r6, [r3, #0]
 8011216:	4853      	ldr	r0, [pc, #332]	; (8011364 <_printf_i+0x23c>)
 8011218:	2f6f      	cmp	r7, #111	; 0x6f
 801121a:	bf0c      	ite	eq
 801121c:	2308      	moveq	r3, #8
 801121e:	230a      	movne	r3, #10
 8011220:	2100      	movs	r1, #0
 8011222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011226:	6865      	ldr	r5, [r4, #4]
 8011228:	60a5      	str	r5, [r4, #8]
 801122a:	2d00      	cmp	r5, #0
 801122c:	bfa2      	ittt	ge
 801122e:	6821      	ldrge	r1, [r4, #0]
 8011230:	f021 0104 	bicge.w	r1, r1, #4
 8011234:	6021      	strge	r1, [r4, #0]
 8011236:	b90e      	cbnz	r6, 801123c <_printf_i+0x114>
 8011238:	2d00      	cmp	r5, #0
 801123a:	d04b      	beq.n	80112d4 <_printf_i+0x1ac>
 801123c:	4615      	mov	r5, r2
 801123e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011242:	fb03 6711 	mls	r7, r3, r1, r6
 8011246:	5dc7      	ldrb	r7, [r0, r7]
 8011248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801124c:	4637      	mov	r7, r6
 801124e:	42bb      	cmp	r3, r7
 8011250:	460e      	mov	r6, r1
 8011252:	d9f4      	bls.n	801123e <_printf_i+0x116>
 8011254:	2b08      	cmp	r3, #8
 8011256:	d10b      	bne.n	8011270 <_printf_i+0x148>
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	07de      	lsls	r6, r3, #31
 801125c:	d508      	bpl.n	8011270 <_printf_i+0x148>
 801125e:	6923      	ldr	r3, [r4, #16]
 8011260:	6861      	ldr	r1, [r4, #4]
 8011262:	4299      	cmp	r1, r3
 8011264:	bfde      	ittt	le
 8011266:	2330      	movle	r3, #48	; 0x30
 8011268:	f805 3c01 	strble.w	r3, [r5, #-1]
 801126c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011270:	1b52      	subs	r2, r2, r5
 8011272:	6122      	str	r2, [r4, #16]
 8011274:	f8cd a000 	str.w	sl, [sp]
 8011278:	464b      	mov	r3, r9
 801127a:	aa03      	add	r2, sp, #12
 801127c:	4621      	mov	r1, r4
 801127e:	4640      	mov	r0, r8
 8011280:	f7ff fee4 	bl	801104c <_printf_common>
 8011284:	3001      	adds	r0, #1
 8011286:	d14a      	bne.n	801131e <_printf_i+0x1f6>
 8011288:	f04f 30ff 	mov.w	r0, #4294967295
 801128c:	b004      	add	sp, #16
 801128e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	f043 0320 	orr.w	r3, r3, #32
 8011298:	6023      	str	r3, [r4, #0]
 801129a:	4833      	ldr	r0, [pc, #204]	; (8011368 <_printf_i+0x240>)
 801129c:	2778      	movs	r7, #120	; 0x78
 801129e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	6829      	ldr	r1, [r5, #0]
 80112a6:	061f      	lsls	r7, r3, #24
 80112a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80112ac:	d402      	bmi.n	80112b4 <_printf_i+0x18c>
 80112ae:	065f      	lsls	r7, r3, #25
 80112b0:	bf48      	it	mi
 80112b2:	b2b6      	uxthmi	r6, r6
 80112b4:	07df      	lsls	r7, r3, #31
 80112b6:	bf48      	it	mi
 80112b8:	f043 0320 	orrmi.w	r3, r3, #32
 80112bc:	6029      	str	r1, [r5, #0]
 80112be:	bf48      	it	mi
 80112c0:	6023      	strmi	r3, [r4, #0]
 80112c2:	b91e      	cbnz	r6, 80112cc <_printf_i+0x1a4>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	f023 0320 	bic.w	r3, r3, #32
 80112ca:	6023      	str	r3, [r4, #0]
 80112cc:	2310      	movs	r3, #16
 80112ce:	e7a7      	b.n	8011220 <_printf_i+0xf8>
 80112d0:	4824      	ldr	r0, [pc, #144]	; (8011364 <_printf_i+0x23c>)
 80112d2:	e7e4      	b.n	801129e <_printf_i+0x176>
 80112d4:	4615      	mov	r5, r2
 80112d6:	e7bd      	b.n	8011254 <_printf_i+0x12c>
 80112d8:	682b      	ldr	r3, [r5, #0]
 80112da:	6826      	ldr	r6, [r4, #0]
 80112dc:	6961      	ldr	r1, [r4, #20]
 80112de:	1d18      	adds	r0, r3, #4
 80112e0:	6028      	str	r0, [r5, #0]
 80112e2:	0635      	lsls	r5, r6, #24
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	d501      	bpl.n	80112ec <_printf_i+0x1c4>
 80112e8:	6019      	str	r1, [r3, #0]
 80112ea:	e002      	b.n	80112f2 <_printf_i+0x1ca>
 80112ec:	0670      	lsls	r0, r6, #25
 80112ee:	d5fb      	bpl.n	80112e8 <_printf_i+0x1c0>
 80112f0:	8019      	strh	r1, [r3, #0]
 80112f2:	2300      	movs	r3, #0
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	4615      	mov	r5, r2
 80112f8:	e7bc      	b.n	8011274 <_printf_i+0x14c>
 80112fa:	682b      	ldr	r3, [r5, #0]
 80112fc:	1d1a      	adds	r2, r3, #4
 80112fe:	602a      	str	r2, [r5, #0]
 8011300:	681d      	ldr	r5, [r3, #0]
 8011302:	6862      	ldr	r2, [r4, #4]
 8011304:	2100      	movs	r1, #0
 8011306:	4628      	mov	r0, r5
 8011308:	f7ee ff8a 	bl	8000220 <memchr>
 801130c:	b108      	cbz	r0, 8011312 <_printf_i+0x1ea>
 801130e:	1b40      	subs	r0, r0, r5
 8011310:	6060      	str	r0, [r4, #4]
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	6123      	str	r3, [r4, #16]
 8011316:	2300      	movs	r3, #0
 8011318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801131c:	e7aa      	b.n	8011274 <_printf_i+0x14c>
 801131e:	6923      	ldr	r3, [r4, #16]
 8011320:	462a      	mov	r2, r5
 8011322:	4649      	mov	r1, r9
 8011324:	4640      	mov	r0, r8
 8011326:	47d0      	blx	sl
 8011328:	3001      	adds	r0, #1
 801132a:	d0ad      	beq.n	8011288 <_printf_i+0x160>
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	079b      	lsls	r3, r3, #30
 8011330:	d413      	bmi.n	801135a <_printf_i+0x232>
 8011332:	68e0      	ldr	r0, [r4, #12]
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	4298      	cmp	r0, r3
 8011338:	bfb8      	it	lt
 801133a:	4618      	movlt	r0, r3
 801133c:	e7a6      	b.n	801128c <_printf_i+0x164>
 801133e:	2301      	movs	r3, #1
 8011340:	4632      	mov	r2, r6
 8011342:	4649      	mov	r1, r9
 8011344:	4640      	mov	r0, r8
 8011346:	47d0      	blx	sl
 8011348:	3001      	adds	r0, #1
 801134a:	d09d      	beq.n	8011288 <_printf_i+0x160>
 801134c:	3501      	adds	r5, #1
 801134e:	68e3      	ldr	r3, [r4, #12]
 8011350:	9903      	ldr	r1, [sp, #12]
 8011352:	1a5b      	subs	r3, r3, r1
 8011354:	42ab      	cmp	r3, r5
 8011356:	dcf2      	bgt.n	801133e <_printf_i+0x216>
 8011358:	e7eb      	b.n	8011332 <_printf_i+0x20a>
 801135a:	2500      	movs	r5, #0
 801135c:	f104 0619 	add.w	r6, r4, #25
 8011360:	e7f5      	b.n	801134e <_printf_i+0x226>
 8011362:	bf00      	nop
 8011364:	08017f32 	.word	0x08017f32
 8011368:	08017f43 	.word	0x08017f43

0801136c <_scanf_float>:
 801136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011370:	b087      	sub	sp, #28
 8011372:	4617      	mov	r7, r2
 8011374:	9303      	str	r3, [sp, #12]
 8011376:	688b      	ldr	r3, [r1, #8]
 8011378:	1e5a      	subs	r2, r3, #1
 801137a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801137e:	bf83      	ittte	hi
 8011380:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011384:	195b      	addhi	r3, r3, r5
 8011386:	9302      	strhi	r3, [sp, #8]
 8011388:	2300      	movls	r3, #0
 801138a:	bf86      	itte	hi
 801138c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011390:	608b      	strhi	r3, [r1, #8]
 8011392:	9302      	strls	r3, [sp, #8]
 8011394:	680b      	ldr	r3, [r1, #0]
 8011396:	468b      	mov	fp, r1
 8011398:	2500      	movs	r5, #0
 801139a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801139e:	f84b 3b1c 	str.w	r3, [fp], #28
 80113a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80113a6:	4680      	mov	r8, r0
 80113a8:	460c      	mov	r4, r1
 80113aa:	465e      	mov	r6, fp
 80113ac:	46aa      	mov	sl, r5
 80113ae:	46a9      	mov	r9, r5
 80113b0:	9501      	str	r5, [sp, #4]
 80113b2:	68a2      	ldr	r2, [r4, #8]
 80113b4:	b152      	cbz	r2, 80113cc <_scanf_float+0x60>
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	2b4e      	cmp	r3, #78	; 0x4e
 80113bc:	d864      	bhi.n	8011488 <_scanf_float+0x11c>
 80113be:	2b40      	cmp	r3, #64	; 0x40
 80113c0:	d83c      	bhi.n	801143c <_scanf_float+0xd0>
 80113c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80113c6:	b2c8      	uxtb	r0, r1
 80113c8:	280e      	cmp	r0, #14
 80113ca:	d93a      	bls.n	8011442 <_scanf_float+0xd6>
 80113cc:	f1b9 0f00 	cmp.w	r9, #0
 80113d0:	d003      	beq.n	80113da <_scanf_float+0x6e>
 80113d2:	6823      	ldr	r3, [r4, #0]
 80113d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80113d8:	6023      	str	r3, [r4, #0]
 80113da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113de:	f1ba 0f01 	cmp.w	sl, #1
 80113e2:	f200 8113 	bhi.w	801160c <_scanf_float+0x2a0>
 80113e6:	455e      	cmp	r6, fp
 80113e8:	f200 8105 	bhi.w	80115f6 <_scanf_float+0x28a>
 80113ec:	2501      	movs	r5, #1
 80113ee:	4628      	mov	r0, r5
 80113f0:	b007      	add	sp, #28
 80113f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80113fa:	2a0d      	cmp	r2, #13
 80113fc:	d8e6      	bhi.n	80113cc <_scanf_float+0x60>
 80113fe:	a101      	add	r1, pc, #4	; (adr r1, 8011404 <_scanf_float+0x98>)
 8011400:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011404:	08011543 	.word	0x08011543
 8011408:	080113cd 	.word	0x080113cd
 801140c:	080113cd 	.word	0x080113cd
 8011410:	080113cd 	.word	0x080113cd
 8011414:	080115a3 	.word	0x080115a3
 8011418:	0801157b 	.word	0x0801157b
 801141c:	080113cd 	.word	0x080113cd
 8011420:	080113cd 	.word	0x080113cd
 8011424:	08011551 	.word	0x08011551
 8011428:	080113cd 	.word	0x080113cd
 801142c:	080113cd 	.word	0x080113cd
 8011430:	080113cd 	.word	0x080113cd
 8011434:	080113cd 	.word	0x080113cd
 8011438:	08011509 	.word	0x08011509
 801143c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011440:	e7db      	b.n	80113fa <_scanf_float+0x8e>
 8011442:	290e      	cmp	r1, #14
 8011444:	d8c2      	bhi.n	80113cc <_scanf_float+0x60>
 8011446:	a001      	add	r0, pc, #4	; (adr r0, 801144c <_scanf_float+0xe0>)
 8011448:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801144c:	080114fb 	.word	0x080114fb
 8011450:	080113cd 	.word	0x080113cd
 8011454:	080114fb 	.word	0x080114fb
 8011458:	0801158f 	.word	0x0801158f
 801145c:	080113cd 	.word	0x080113cd
 8011460:	080114a9 	.word	0x080114a9
 8011464:	080114e5 	.word	0x080114e5
 8011468:	080114e5 	.word	0x080114e5
 801146c:	080114e5 	.word	0x080114e5
 8011470:	080114e5 	.word	0x080114e5
 8011474:	080114e5 	.word	0x080114e5
 8011478:	080114e5 	.word	0x080114e5
 801147c:	080114e5 	.word	0x080114e5
 8011480:	080114e5 	.word	0x080114e5
 8011484:	080114e5 	.word	0x080114e5
 8011488:	2b6e      	cmp	r3, #110	; 0x6e
 801148a:	d809      	bhi.n	80114a0 <_scanf_float+0x134>
 801148c:	2b60      	cmp	r3, #96	; 0x60
 801148e:	d8b2      	bhi.n	80113f6 <_scanf_float+0x8a>
 8011490:	2b54      	cmp	r3, #84	; 0x54
 8011492:	d077      	beq.n	8011584 <_scanf_float+0x218>
 8011494:	2b59      	cmp	r3, #89	; 0x59
 8011496:	d199      	bne.n	80113cc <_scanf_float+0x60>
 8011498:	2d07      	cmp	r5, #7
 801149a:	d197      	bne.n	80113cc <_scanf_float+0x60>
 801149c:	2508      	movs	r5, #8
 801149e:	e029      	b.n	80114f4 <_scanf_float+0x188>
 80114a0:	2b74      	cmp	r3, #116	; 0x74
 80114a2:	d06f      	beq.n	8011584 <_scanf_float+0x218>
 80114a4:	2b79      	cmp	r3, #121	; 0x79
 80114a6:	e7f6      	b.n	8011496 <_scanf_float+0x12a>
 80114a8:	6821      	ldr	r1, [r4, #0]
 80114aa:	05c8      	lsls	r0, r1, #23
 80114ac:	d51a      	bpl.n	80114e4 <_scanf_float+0x178>
 80114ae:	9b02      	ldr	r3, [sp, #8]
 80114b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80114b4:	6021      	str	r1, [r4, #0]
 80114b6:	f109 0901 	add.w	r9, r9, #1
 80114ba:	b11b      	cbz	r3, 80114c4 <_scanf_float+0x158>
 80114bc:	3b01      	subs	r3, #1
 80114be:	3201      	adds	r2, #1
 80114c0:	9302      	str	r3, [sp, #8]
 80114c2:	60a2      	str	r2, [r4, #8]
 80114c4:	68a3      	ldr	r3, [r4, #8]
 80114c6:	3b01      	subs	r3, #1
 80114c8:	60a3      	str	r3, [r4, #8]
 80114ca:	6923      	ldr	r3, [r4, #16]
 80114cc:	3301      	adds	r3, #1
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3b01      	subs	r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	607b      	str	r3, [r7, #4]
 80114d8:	f340 8084 	ble.w	80115e4 <_scanf_float+0x278>
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	3301      	adds	r3, #1
 80114e0:	603b      	str	r3, [r7, #0]
 80114e2:	e766      	b.n	80113b2 <_scanf_float+0x46>
 80114e4:	eb1a 0f05 	cmn.w	sl, r5
 80114e8:	f47f af70 	bne.w	80113cc <_scanf_float+0x60>
 80114ec:	6822      	ldr	r2, [r4, #0]
 80114ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80114f2:	6022      	str	r2, [r4, #0]
 80114f4:	f806 3b01 	strb.w	r3, [r6], #1
 80114f8:	e7e4      	b.n	80114c4 <_scanf_float+0x158>
 80114fa:	6822      	ldr	r2, [r4, #0]
 80114fc:	0610      	lsls	r0, r2, #24
 80114fe:	f57f af65 	bpl.w	80113cc <_scanf_float+0x60>
 8011502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011506:	e7f4      	b.n	80114f2 <_scanf_float+0x186>
 8011508:	f1ba 0f00 	cmp.w	sl, #0
 801150c:	d10e      	bne.n	801152c <_scanf_float+0x1c0>
 801150e:	f1b9 0f00 	cmp.w	r9, #0
 8011512:	d10e      	bne.n	8011532 <_scanf_float+0x1c6>
 8011514:	6822      	ldr	r2, [r4, #0]
 8011516:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801151a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801151e:	d108      	bne.n	8011532 <_scanf_float+0x1c6>
 8011520:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011524:	6022      	str	r2, [r4, #0]
 8011526:	f04f 0a01 	mov.w	sl, #1
 801152a:	e7e3      	b.n	80114f4 <_scanf_float+0x188>
 801152c:	f1ba 0f02 	cmp.w	sl, #2
 8011530:	d055      	beq.n	80115de <_scanf_float+0x272>
 8011532:	2d01      	cmp	r5, #1
 8011534:	d002      	beq.n	801153c <_scanf_float+0x1d0>
 8011536:	2d04      	cmp	r5, #4
 8011538:	f47f af48 	bne.w	80113cc <_scanf_float+0x60>
 801153c:	3501      	adds	r5, #1
 801153e:	b2ed      	uxtb	r5, r5
 8011540:	e7d8      	b.n	80114f4 <_scanf_float+0x188>
 8011542:	f1ba 0f01 	cmp.w	sl, #1
 8011546:	f47f af41 	bne.w	80113cc <_scanf_float+0x60>
 801154a:	f04f 0a02 	mov.w	sl, #2
 801154e:	e7d1      	b.n	80114f4 <_scanf_float+0x188>
 8011550:	b97d      	cbnz	r5, 8011572 <_scanf_float+0x206>
 8011552:	f1b9 0f00 	cmp.w	r9, #0
 8011556:	f47f af3c 	bne.w	80113d2 <_scanf_float+0x66>
 801155a:	6822      	ldr	r2, [r4, #0]
 801155c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011560:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011564:	f47f af39 	bne.w	80113da <_scanf_float+0x6e>
 8011568:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801156c:	6022      	str	r2, [r4, #0]
 801156e:	2501      	movs	r5, #1
 8011570:	e7c0      	b.n	80114f4 <_scanf_float+0x188>
 8011572:	2d03      	cmp	r5, #3
 8011574:	d0e2      	beq.n	801153c <_scanf_float+0x1d0>
 8011576:	2d05      	cmp	r5, #5
 8011578:	e7de      	b.n	8011538 <_scanf_float+0x1cc>
 801157a:	2d02      	cmp	r5, #2
 801157c:	f47f af26 	bne.w	80113cc <_scanf_float+0x60>
 8011580:	2503      	movs	r5, #3
 8011582:	e7b7      	b.n	80114f4 <_scanf_float+0x188>
 8011584:	2d06      	cmp	r5, #6
 8011586:	f47f af21 	bne.w	80113cc <_scanf_float+0x60>
 801158a:	2507      	movs	r5, #7
 801158c:	e7b2      	b.n	80114f4 <_scanf_float+0x188>
 801158e:	6822      	ldr	r2, [r4, #0]
 8011590:	0591      	lsls	r1, r2, #22
 8011592:	f57f af1b 	bpl.w	80113cc <_scanf_float+0x60>
 8011596:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801159a:	6022      	str	r2, [r4, #0]
 801159c:	f8cd 9004 	str.w	r9, [sp, #4]
 80115a0:	e7a8      	b.n	80114f4 <_scanf_float+0x188>
 80115a2:	6822      	ldr	r2, [r4, #0]
 80115a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80115a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80115ac:	d006      	beq.n	80115bc <_scanf_float+0x250>
 80115ae:	0550      	lsls	r0, r2, #21
 80115b0:	f57f af0c 	bpl.w	80113cc <_scanf_float+0x60>
 80115b4:	f1b9 0f00 	cmp.w	r9, #0
 80115b8:	f43f af0f 	beq.w	80113da <_scanf_float+0x6e>
 80115bc:	0591      	lsls	r1, r2, #22
 80115be:	bf58      	it	pl
 80115c0:	9901      	ldrpl	r1, [sp, #4]
 80115c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80115c6:	bf58      	it	pl
 80115c8:	eba9 0101 	subpl.w	r1, r9, r1
 80115cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80115d0:	bf58      	it	pl
 80115d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80115d6:	6022      	str	r2, [r4, #0]
 80115d8:	f04f 0900 	mov.w	r9, #0
 80115dc:	e78a      	b.n	80114f4 <_scanf_float+0x188>
 80115de:	f04f 0a03 	mov.w	sl, #3
 80115e2:	e787      	b.n	80114f4 <_scanf_float+0x188>
 80115e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80115e8:	4639      	mov	r1, r7
 80115ea:	4640      	mov	r0, r8
 80115ec:	4798      	blx	r3
 80115ee:	2800      	cmp	r0, #0
 80115f0:	f43f aedf 	beq.w	80113b2 <_scanf_float+0x46>
 80115f4:	e6ea      	b.n	80113cc <_scanf_float+0x60>
 80115f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80115fe:	463a      	mov	r2, r7
 8011600:	4640      	mov	r0, r8
 8011602:	4798      	blx	r3
 8011604:	6923      	ldr	r3, [r4, #16]
 8011606:	3b01      	subs	r3, #1
 8011608:	6123      	str	r3, [r4, #16]
 801160a:	e6ec      	b.n	80113e6 <_scanf_float+0x7a>
 801160c:	1e6b      	subs	r3, r5, #1
 801160e:	2b06      	cmp	r3, #6
 8011610:	d825      	bhi.n	801165e <_scanf_float+0x2f2>
 8011612:	2d02      	cmp	r5, #2
 8011614:	d836      	bhi.n	8011684 <_scanf_float+0x318>
 8011616:	455e      	cmp	r6, fp
 8011618:	f67f aee8 	bls.w	80113ec <_scanf_float+0x80>
 801161c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011620:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011624:	463a      	mov	r2, r7
 8011626:	4640      	mov	r0, r8
 8011628:	4798      	blx	r3
 801162a:	6923      	ldr	r3, [r4, #16]
 801162c:	3b01      	subs	r3, #1
 801162e:	6123      	str	r3, [r4, #16]
 8011630:	e7f1      	b.n	8011616 <_scanf_float+0x2aa>
 8011632:	9802      	ldr	r0, [sp, #8]
 8011634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011638:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801163c:	9002      	str	r0, [sp, #8]
 801163e:	463a      	mov	r2, r7
 8011640:	4640      	mov	r0, r8
 8011642:	4798      	blx	r3
 8011644:	6923      	ldr	r3, [r4, #16]
 8011646:	3b01      	subs	r3, #1
 8011648:	6123      	str	r3, [r4, #16]
 801164a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801164e:	fa5f fa8a 	uxtb.w	sl, sl
 8011652:	f1ba 0f02 	cmp.w	sl, #2
 8011656:	d1ec      	bne.n	8011632 <_scanf_float+0x2c6>
 8011658:	3d03      	subs	r5, #3
 801165a:	b2ed      	uxtb	r5, r5
 801165c:	1b76      	subs	r6, r6, r5
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	05da      	lsls	r2, r3, #23
 8011662:	d52f      	bpl.n	80116c4 <_scanf_float+0x358>
 8011664:	055b      	lsls	r3, r3, #21
 8011666:	d510      	bpl.n	801168a <_scanf_float+0x31e>
 8011668:	455e      	cmp	r6, fp
 801166a:	f67f aebf 	bls.w	80113ec <_scanf_float+0x80>
 801166e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011676:	463a      	mov	r2, r7
 8011678:	4640      	mov	r0, r8
 801167a:	4798      	blx	r3
 801167c:	6923      	ldr	r3, [r4, #16]
 801167e:	3b01      	subs	r3, #1
 8011680:	6123      	str	r3, [r4, #16]
 8011682:	e7f1      	b.n	8011668 <_scanf_float+0x2fc>
 8011684:	46aa      	mov	sl, r5
 8011686:	9602      	str	r6, [sp, #8]
 8011688:	e7df      	b.n	801164a <_scanf_float+0x2de>
 801168a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	2965      	cmp	r1, #101	; 0x65
 8011692:	f103 33ff 	add.w	r3, r3, #4294967295
 8011696:	f106 35ff 	add.w	r5, r6, #4294967295
 801169a:	6123      	str	r3, [r4, #16]
 801169c:	d00c      	beq.n	80116b8 <_scanf_float+0x34c>
 801169e:	2945      	cmp	r1, #69	; 0x45
 80116a0:	d00a      	beq.n	80116b8 <_scanf_float+0x34c>
 80116a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116a6:	463a      	mov	r2, r7
 80116a8:	4640      	mov	r0, r8
 80116aa:	4798      	blx	r3
 80116ac:	6923      	ldr	r3, [r4, #16]
 80116ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80116b2:	3b01      	subs	r3, #1
 80116b4:	1eb5      	subs	r5, r6, #2
 80116b6:	6123      	str	r3, [r4, #16]
 80116b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80116bc:	463a      	mov	r2, r7
 80116be:	4640      	mov	r0, r8
 80116c0:	4798      	blx	r3
 80116c2:	462e      	mov	r6, r5
 80116c4:	6825      	ldr	r5, [r4, #0]
 80116c6:	f015 0510 	ands.w	r5, r5, #16
 80116ca:	d158      	bne.n	801177e <_scanf_float+0x412>
 80116cc:	7035      	strb	r5, [r6, #0]
 80116ce:	6823      	ldr	r3, [r4, #0]
 80116d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80116d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116d8:	d11c      	bne.n	8011714 <_scanf_float+0x3a8>
 80116da:	9b01      	ldr	r3, [sp, #4]
 80116dc:	454b      	cmp	r3, r9
 80116de:	eba3 0209 	sub.w	r2, r3, r9
 80116e2:	d124      	bne.n	801172e <_scanf_float+0x3c2>
 80116e4:	2200      	movs	r2, #0
 80116e6:	4659      	mov	r1, fp
 80116e8:	4640      	mov	r0, r8
 80116ea:	f002 fc3d 	bl	8013f68 <_strtod_r>
 80116ee:	9b03      	ldr	r3, [sp, #12]
 80116f0:	6821      	ldr	r1, [r4, #0]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f011 0f02 	tst.w	r1, #2
 80116f8:	ec57 6b10 	vmov	r6, r7, d0
 80116fc:	f103 0204 	add.w	r2, r3, #4
 8011700:	d020      	beq.n	8011744 <_scanf_float+0x3d8>
 8011702:	9903      	ldr	r1, [sp, #12]
 8011704:	600a      	str	r2, [r1, #0]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	e9c3 6700 	strd	r6, r7, [r3]
 801170c:	68e3      	ldr	r3, [r4, #12]
 801170e:	3301      	adds	r3, #1
 8011710:	60e3      	str	r3, [r4, #12]
 8011712:	e66c      	b.n	80113ee <_scanf_float+0x82>
 8011714:	9b04      	ldr	r3, [sp, #16]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0e4      	beq.n	80116e4 <_scanf_float+0x378>
 801171a:	9905      	ldr	r1, [sp, #20]
 801171c:	230a      	movs	r3, #10
 801171e:	462a      	mov	r2, r5
 8011720:	3101      	adds	r1, #1
 8011722:	4640      	mov	r0, r8
 8011724:	f002 fca8 	bl	8014078 <_strtol_r>
 8011728:	9b04      	ldr	r3, [sp, #16]
 801172a:	9e05      	ldr	r6, [sp, #20]
 801172c:	1ac2      	subs	r2, r0, r3
 801172e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011732:	429e      	cmp	r6, r3
 8011734:	bf28      	it	cs
 8011736:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801173a:	4912      	ldr	r1, [pc, #72]	; (8011784 <_scanf_float+0x418>)
 801173c:	4630      	mov	r0, r6
 801173e:	f000 f8e7 	bl	8011910 <siprintf>
 8011742:	e7cf      	b.n	80116e4 <_scanf_float+0x378>
 8011744:	f011 0f04 	tst.w	r1, #4
 8011748:	9903      	ldr	r1, [sp, #12]
 801174a:	600a      	str	r2, [r1, #0]
 801174c:	d1db      	bne.n	8011706 <_scanf_float+0x39a>
 801174e:	f8d3 8000 	ldr.w	r8, [r3]
 8011752:	ee10 2a10 	vmov	r2, s0
 8011756:	ee10 0a10 	vmov	r0, s0
 801175a:	463b      	mov	r3, r7
 801175c:	4639      	mov	r1, r7
 801175e:	f7ef fa0d 	bl	8000b7c <__aeabi_dcmpun>
 8011762:	b128      	cbz	r0, 8011770 <_scanf_float+0x404>
 8011764:	4808      	ldr	r0, [pc, #32]	; (8011788 <_scanf_float+0x41c>)
 8011766:	f000 f9c5 	bl	8011af4 <nanf>
 801176a:	ed88 0a00 	vstr	s0, [r8]
 801176e:	e7cd      	b.n	801170c <_scanf_float+0x3a0>
 8011770:	4630      	mov	r0, r6
 8011772:	4639      	mov	r1, r7
 8011774:	f7ef fa60 	bl	8000c38 <__aeabi_d2f>
 8011778:	f8c8 0000 	str.w	r0, [r8]
 801177c:	e7c6      	b.n	801170c <_scanf_float+0x3a0>
 801177e:	2500      	movs	r5, #0
 8011780:	e635      	b.n	80113ee <_scanf_float+0x82>
 8011782:	bf00      	nop
 8011784:	08017f54 	.word	0x08017f54
 8011788:	080182e5 	.word	0x080182e5

0801178c <std>:
 801178c:	2300      	movs	r3, #0
 801178e:	b510      	push	{r4, lr}
 8011790:	4604      	mov	r4, r0
 8011792:	e9c0 3300 	strd	r3, r3, [r0]
 8011796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801179a:	6083      	str	r3, [r0, #8]
 801179c:	8181      	strh	r1, [r0, #12]
 801179e:	6643      	str	r3, [r0, #100]	; 0x64
 80117a0:	81c2      	strh	r2, [r0, #14]
 80117a2:	6183      	str	r3, [r0, #24]
 80117a4:	4619      	mov	r1, r3
 80117a6:	2208      	movs	r2, #8
 80117a8:	305c      	adds	r0, #92	; 0x5c
 80117aa:	f000 f914 	bl	80119d6 <memset>
 80117ae:	4b0d      	ldr	r3, [pc, #52]	; (80117e4 <std+0x58>)
 80117b0:	6263      	str	r3, [r4, #36]	; 0x24
 80117b2:	4b0d      	ldr	r3, [pc, #52]	; (80117e8 <std+0x5c>)
 80117b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80117b6:	4b0d      	ldr	r3, [pc, #52]	; (80117ec <std+0x60>)
 80117b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117ba:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <std+0x64>)
 80117bc:	6323      	str	r3, [r4, #48]	; 0x30
 80117be:	4b0d      	ldr	r3, [pc, #52]	; (80117f4 <std+0x68>)
 80117c0:	6224      	str	r4, [r4, #32]
 80117c2:	429c      	cmp	r4, r3
 80117c4:	d006      	beq.n	80117d4 <std+0x48>
 80117c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80117ca:	4294      	cmp	r4, r2
 80117cc:	d002      	beq.n	80117d4 <std+0x48>
 80117ce:	33d0      	adds	r3, #208	; 0xd0
 80117d0:	429c      	cmp	r4, r3
 80117d2:	d105      	bne.n	80117e0 <std+0x54>
 80117d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117dc:	f000 b978 	b.w	8011ad0 <__retarget_lock_init_recursive>
 80117e0:	bd10      	pop	{r4, pc}
 80117e2:	bf00      	nop
 80117e4:	08011951 	.word	0x08011951
 80117e8:	08011973 	.word	0x08011973
 80117ec:	080119ab 	.word	0x080119ab
 80117f0:	080119cf 	.word	0x080119cf
 80117f4:	2000227c 	.word	0x2000227c

080117f8 <stdio_exit_handler>:
 80117f8:	4a02      	ldr	r2, [pc, #8]	; (8011804 <stdio_exit_handler+0xc>)
 80117fa:	4903      	ldr	r1, [pc, #12]	; (8011808 <stdio_exit_handler+0x10>)
 80117fc:	4803      	ldr	r0, [pc, #12]	; (801180c <stdio_exit_handler+0x14>)
 80117fe:	f000 b869 	b.w	80118d4 <_fwalk_sglue>
 8011802:	bf00      	nop
 8011804:	20000214 	.word	0x20000214
 8011808:	08014439 	.word	0x08014439
 801180c:	20000220 	.word	0x20000220

08011810 <cleanup_stdio>:
 8011810:	6841      	ldr	r1, [r0, #4]
 8011812:	4b0c      	ldr	r3, [pc, #48]	; (8011844 <cleanup_stdio+0x34>)
 8011814:	4299      	cmp	r1, r3
 8011816:	b510      	push	{r4, lr}
 8011818:	4604      	mov	r4, r0
 801181a:	d001      	beq.n	8011820 <cleanup_stdio+0x10>
 801181c:	f002 fe0c 	bl	8014438 <_fflush_r>
 8011820:	68a1      	ldr	r1, [r4, #8]
 8011822:	4b09      	ldr	r3, [pc, #36]	; (8011848 <cleanup_stdio+0x38>)
 8011824:	4299      	cmp	r1, r3
 8011826:	d002      	beq.n	801182e <cleanup_stdio+0x1e>
 8011828:	4620      	mov	r0, r4
 801182a:	f002 fe05 	bl	8014438 <_fflush_r>
 801182e:	68e1      	ldr	r1, [r4, #12]
 8011830:	4b06      	ldr	r3, [pc, #24]	; (801184c <cleanup_stdio+0x3c>)
 8011832:	4299      	cmp	r1, r3
 8011834:	d004      	beq.n	8011840 <cleanup_stdio+0x30>
 8011836:	4620      	mov	r0, r4
 8011838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801183c:	f002 bdfc 	b.w	8014438 <_fflush_r>
 8011840:	bd10      	pop	{r4, pc}
 8011842:	bf00      	nop
 8011844:	2000227c 	.word	0x2000227c
 8011848:	200022e4 	.word	0x200022e4
 801184c:	2000234c 	.word	0x2000234c

08011850 <global_stdio_init.part.0>:
 8011850:	b510      	push	{r4, lr}
 8011852:	4b0b      	ldr	r3, [pc, #44]	; (8011880 <global_stdio_init.part.0+0x30>)
 8011854:	4c0b      	ldr	r4, [pc, #44]	; (8011884 <global_stdio_init.part.0+0x34>)
 8011856:	4a0c      	ldr	r2, [pc, #48]	; (8011888 <global_stdio_init.part.0+0x38>)
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	4620      	mov	r0, r4
 801185c:	2200      	movs	r2, #0
 801185e:	2104      	movs	r1, #4
 8011860:	f7ff ff94 	bl	801178c <std>
 8011864:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011868:	2201      	movs	r2, #1
 801186a:	2109      	movs	r1, #9
 801186c:	f7ff ff8e 	bl	801178c <std>
 8011870:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011874:	2202      	movs	r2, #2
 8011876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801187a:	2112      	movs	r1, #18
 801187c:	f7ff bf86 	b.w	801178c <std>
 8011880:	200023b4 	.word	0x200023b4
 8011884:	2000227c 	.word	0x2000227c
 8011888:	080117f9 	.word	0x080117f9

0801188c <__sfp_lock_acquire>:
 801188c:	4801      	ldr	r0, [pc, #4]	; (8011894 <__sfp_lock_acquire+0x8>)
 801188e:	f000 b920 	b.w	8011ad2 <__retarget_lock_acquire_recursive>
 8011892:	bf00      	nop
 8011894:	200023bd 	.word	0x200023bd

08011898 <__sfp_lock_release>:
 8011898:	4801      	ldr	r0, [pc, #4]	; (80118a0 <__sfp_lock_release+0x8>)
 801189a:	f000 b91b 	b.w	8011ad4 <__retarget_lock_release_recursive>
 801189e:	bf00      	nop
 80118a0:	200023bd 	.word	0x200023bd

080118a4 <__sinit>:
 80118a4:	b510      	push	{r4, lr}
 80118a6:	4604      	mov	r4, r0
 80118a8:	f7ff fff0 	bl	801188c <__sfp_lock_acquire>
 80118ac:	6a23      	ldr	r3, [r4, #32]
 80118ae:	b11b      	cbz	r3, 80118b8 <__sinit+0x14>
 80118b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118b4:	f7ff bff0 	b.w	8011898 <__sfp_lock_release>
 80118b8:	4b04      	ldr	r3, [pc, #16]	; (80118cc <__sinit+0x28>)
 80118ba:	6223      	str	r3, [r4, #32]
 80118bc:	4b04      	ldr	r3, [pc, #16]	; (80118d0 <__sinit+0x2c>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1f5      	bne.n	80118b0 <__sinit+0xc>
 80118c4:	f7ff ffc4 	bl	8011850 <global_stdio_init.part.0>
 80118c8:	e7f2      	b.n	80118b0 <__sinit+0xc>
 80118ca:	bf00      	nop
 80118cc:	08011811 	.word	0x08011811
 80118d0:	200023b4 	.word	0x200023b4

080118d4 <_fwalk_sglue>:
 80118d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118d8:	4607      	mov	r7, r0
 80118da:	4688      	mov	r8, r1
 80118dc:	4614      	mov	r4, r2
 80118de:	2600      	movs	r6, #0
 80118e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118e4:	f1b9 0901 	subs.w	r9, r9, #1
 80118e8:	d505      	bpl.n	80118f6 <_fwalk_sglue+0x22>
 80118ea:	6824      	ldr	r4, [r4, #0]
 80118ec:	2c00      	cmp	r4, #0
 80118ee:	d1f7      	bne.n	80118e0 <_fwalk_sglue+0xc>
 80118f0:	4630      	mov	r0, r6
 80118f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118f6:	89ab      	ldrh	r3, [r5, #12]
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d907      	bls.n	801190c <_fwalk_sglue+0x38>
 80118fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011900:	3301      	adds	r3, #1
 8011902:	d003      	beq.n	801190c <_fwalk_sglue+0x38>
 8011904:	4629      	mov	r1, r5
 8011906:	4638      	mov	r0, r7
 8011908:	47c0      	blx	r8
 801190a:	4306      	orrs	r6, r0
 801190c:	3568      	adds	r5, #104	; 0x68
 801190e:	e7e9      	b.n	80118e4 <_fwalk_sglue+0x10>

08011910 <siprintf>:
 8011910:	b40e      	push	{r1, r2, r3}
 8011912:	b500      	push	{lr}
 8011914:	b09c      	sub	sp, #112	; 0x70
 8011916:	ab1d      	add	r3, sp, #116	; 0x74
 8011918:	9002      	str	r0, [sp, #8]
 801191a:	9006      	str	r0, [sp, #24]
 801191c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011920:	4809      	ldr	r0, [pc, #36]	; (8011948 <siprintf+0x38>)
 8011922:	9107      	str	r1, [sp, #28]
 8011924:	9104      	str	r1, [sp, #16]
 8011926:	4909      	ldr	r1, [pc, #36]	; (801194c <siprintf+0x3c>)
 8011928:	f853 2b04 	ldr.w	r2, [r3], #4
 801192c:	9105      	str	r1, [sp, #20]
 801192e:	6800      	ldr	r0, [r0, #0]
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	a902      	add	r1, sp, #8
 8011934:	f002 fbfc 	bl	8014130 <_svfiprintf_r>
 8011938:	9b02      	ldr	r3, [sp, #8]
 801193a:	2200      	movs	r2, #0
 801193c:	701a      	strb	r2, [r3, #0]
 801193e:	b01c      	add	sp, #112	; 0x70
 8011940:	f85d eb04 	ldr.w	lr, [sp], #4
 8011944:	b003      	add	sp, #12
 8011946:	4770      	bx	lr
 8011948:	2000026c 	.word	0x2000026c
 801194c:	ffff0208 	.word	0xffff0208

08011950 <__sread>:
 8011950:	b510      	push	{r4, lr}
 8011952:	460c      	mov	r4, r1
 8011954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011958:	f000 f86c 	bl	8011a34 <_read_r>
 801195c:	2800      	cmp	r0, #0
 801195e:	bfab      	itete	ge
 8011960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011962:	89a3      	ldrhlt	r3, [r4, #12]
 8011964:	181b      	addge	r3, r3, r0
 8011966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801196a:	bfac      	ite	ge
 801196c:	6563      	strge	r3, [r4, #84]	; 0x54
 801196e:	81a3      	strhlt	r3, [r4, #12]
 8011970:	bd10      	pop	{r4, pc}

08011972 <__swrite>:
 8011972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011976:	461f      	mov	r7, r3
 8011978:	898b      	ldrh	r3, [r1, #12]
 801197a:	05db      	lsls	r3, r3, #23
 801197c:	4605      	mov	r5, r0
 801197e:	460c      	mov	r4, r1
 8011980:	4616      	mov	r6, r2
 8011982:	d505      	bpl.n	8011990 <__swrite+0x1e>
 8011984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011988:	2302      	movs	r3, #2
 801198a:	2200      	movs	r2, #0
 801198c:	f000 f840 	bl	8011a10 <_lseek_r>
 8011990:	89a3      	ldrh	r3, [r4, #12]
 8011992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801199a:	81a3      	strh	r3, [r4, #12]
 801199c:	4632      	mov	r2, r6
 801199e:	463b      	mov	r3, r7
 80119a0:	4628      	mov	r0, r5
 80119a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119a6:	f000 b857 	b.w	8011a58 <_write_r>

080119aa <__sseek>:
 80119aa:	b510      	push	{r4, lr}
 80119ac:	460c      	mov	r4, r1
 80119ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119b2:	f000 f82d 	bl	8011a10 <_lseek_r>
 80119b6:	1c43      	adds	r3, r0, #1
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	bf15      	itete	ne
 80119bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80119be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80119c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80119c6:	81a3      	strheq	r3, [r4, #12]
 80119c8:	bf18      	it	ne
 80119ca:	81a3      	strhne	r3, [r4, #12]
 80119cc:	bd10      	pop	{r4, pc}

080119ce <__sclose>:
 80119ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119d2:	f000 b80d 	b.w	80119f0 <_close_r>

080119d6 <memset>:
 80119d6:	4402      	add	r2, r0
 80119d8:	4603      	mov	r3, r0
 80119da:	4293      	cmp	r3, r2
 80119dc:	d100      	bne.n	80119e0 <memset+0xa>
 80119de:	4770      	bx	lr
 80119e0:	f803 1b01 	strb.w	r1, [r3], #1
 80119e4:	e7f9      	b.n	80119da <memset+0x4>
	...

080119e8 <_localeconv_r>:
 80119e8:	4800      	ldr	r0, [pc, #0]	; (80119ec <_localeconv_r+0x4>)
 80119ea:	4770      	bx	lr
 80119ec:	20000360 	.word	0x20000360

080119f0 <_close_r>:
 80119f0:	b538      	push	{r3, r4, r5, lr}
 80119f2:	4d06      	ldr	r5, [pc, #24]	; (8011a0c <_close_r+0x1c>)
 80119f4:	2300      	movs	r3, #0
 80119f6:	4604      	mov	r4, r0
 80119f8:	4608      	mov	r0, r1
 80119fa:	602b      	str	r3, [r5, #0]
 80119fc:	f7f4 fa4d 	bl	8005e9a <_close>
 8011a00:	1c43      	adds	r3, r0, #1
 8011a02:	d102      	bne.n	8011a0a <_close_r+0x1a>
 8011a04:	682b      	ldr	r3, [r5, #0]
 8011a06:	b103      	cbz	r3, 8011a0a <_close_r+0x1a>
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	bd38      	pop	{r3, r4, r5, pc}
 8011a0c:	200023b8 	.word	0x200023b8

08011a10 <_lseek_r>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4d07      	ldr	r5, [pc, #28]	; (8011a30 <_lseek_r+0x20>)
 8011a14:	4604      	mov	r4, r0
 8011a16:	4608      	mov	r0, r1
 8011a18:	4611      	mov	r1, r2
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	602a      	str	r2, [r5, #0]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	f7f4 fa62 	bl	8005ee8 <_lseek>
 8011a24:	1c43      	adds	r3, r0, #1
 8011a26:	d102      	bne.n	8011a2e <_lseek_r+0x1e>
 8011a28:	682b      	ldr	r3, [r5, #0]
 8011a2a:	b103      	cbz	r3, 8011a2e <_lseek_r+0x1e>
 8011a2c:	6023      	str	r3, [r4, #0]
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	200023b8 	.word	0x200023b8

08011a34 <_read_r>:
 8011a34:	b538      	push	{r3, r4, r5, lr}
 8011a36:	4d07      	ldr	r5, [pc, #28]	; (8011a54 <_read_r+0x20>)
 8011a38:	4604      	mov	r4, r0
 8011a3a:	4608      	mov	r0, r1
 8011a3c:	4611      	mov	r1, r2
 8011a3e:	2200      	movs	r2, #0
 8011a40:	602a      	str	r2, [r5, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	f7f4 f9f0 	bl	8005e28 <_read>
 8011a48:	1c43      	adds	r3, r0, #1
 8011a4a:	d102      	bne.n	8011a52 <_read_r+0x1e>
 8011a4c:	682b      	ldr	r3, [r5, #0]
 8011a4e:	b103      	cbz	r3, 8011a52 <_read_r+0x1e>
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	bd38      	pop	{r3, r4, r5, pc}
 8011a54:	200023b8 	.word	0x200023b8

08011a58 <_write_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4d07      	ldr	r5, [pc, #28]	; (8011a78 <_write_r+0x20>)
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	4608      	mov	r0, r1
 8011a60:	4611      	mov	r1, r2
 8011a62:	2200      	movs	r2, #0
 8011a64:	602a      	str	r2, [r5, #0]
 8011a66:	461a      	mov	r2, r3
 8011a68:	f7f4 f9fb 	bl	8005e62 <_write>
 8011a6c:	1c43      	adds	r3, r0, #1
 8011a6e:	d102      	bne.n	8011a76 <_write_r+0x1e>
 8011a70:	682b      	ldr	r3, [r5, #0]
 8011a72:	b103      	cbz	r3, 8011a76 <_write_r+0x1e>
 8011a74:	6023      	str	r3, [r4, #0]
 8011a76:	bd38      	pop	{r3, r4, r5, pc}
 8011a78:	200023b8 	.word	0x200023b8

08011a7c <__errno>:
 8011a7c:	4b01      	ldr	r3, [pc, #4]	; (8011a84 <__errno+0x8>)
 8011a7e:	6818      	ldr	r0, [r3, #0]
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop
 8011a84:	2000026c 	.word	0x2000026c

08011a88 <__libc_init_array>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	4d0d      	ldr	r5, [pc, #52]	; (8011ac0 <__libc_init_array+0x38>)
 8011a8c:	4c0d      	ldr	r4, [pc, #52]	; (8011ac4 <__libc_init_array+0x3c>)
 8011a8e:	1b64      	subs	r4, r4, r5
 8011a90:	10a4      	asrs	r4, r4, #2
 8011a92:	2600      	movs	r6, #0
 8011a94:	42a6      	cmp	r6, r4
 8011a96:	d109      	bne.n	8011aac <__libc_init_array+0x24>
 8011a98:	4d0b      	ldr	r5, [pc, #44]	; (8011ac8 <__libc_init_array+0x40>)
 8011a9a:	4c0c      	ldr	r4, [pc, #48]	; (8011acc <__libc_init_array+0x44>)
 8011a9c:	f003 fd58 	bl	8015550 <_init>
 8011aa0:	1b64      	subs	r4, r4, r5
 8011aa2:	10a4      	asrs	r4, r4, #2
 8011aa4:	2600      	movs	r6, #0
 8011aa6:	42a6      	cmp	r6, r4
 8011aa8:	d105      	bne.n	8011ab6 <__libc_init_array+0x2e>
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ab0:	4798      	blx	r3
 8011ab2:	3601      	adds	r6, #1
 8011ab4:	e7ee      	b.n	8011a94 <__libc_init_array+0xc>
 8011ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aba:	4798      	blx	r3
 8011abc:	3601      	adds	r6, #1
 8011abe:	e7f2      	b.n	8011aa6 <__libc_init_array+0x1e>
 8011ac0:	08018360 	.word	0x08018360
 8011ac4:	08018360 	.word	0x08018360
 8011ac8:	08018360 	.word	0x08018360
 8011acc:	08018364 	.word	0x08018364

08011ad0 <__retarget_lock_init_recursive>:
 8011ad0:	4770      	bx	lr

08011ad2 <__retarget_lock_acquire_recursive>:
 8011ad2:	4770      	bx	lr

08011ad4 <__retarget_lock_release_recursive>:
 8011ad4:	4770      	bx	lr

08011ad6 <memcpy>:
 8011ad6:	440a      	add	r2, r1
 8011ad8:	4291      	cmp	r1, r2
 8011ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ade:	d100      	bne.n	8011ae2 <memcpy+0xc>
 8011ae0:	4770      	bx	lr
 8011ae2:	b510      	push	{r4, lr}
 8011ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011aec:	4291      	cmp	r1, r2
 8011aee:	d1f9      	bne.n	8011ae4 <memcpy+0xe>
 8011af0:	bd10      	pop	{r4, pc}
	...

08011af4 <nanf>:
 8011af4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011afc <nanf+0x8>
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	7fc00000 	.word	0x7fc00000

08011b00 <quorem>:
 8011b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	6903      	ldr	r3, [r0, #16]
 8011b06:	690c      	ldr	r4, [r1, #16]
 8011b08:	42a3      	cmp	r3, r4
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	db7e      	blt.n	8011c0c <quorem+0x10c>
 8011b0e:	3c01      	subs	r4, #1
 8011b10:	f101 0814 	add.w	r8, r1, #20
 8011b14:	f100 0514 	add.w	r5, r0, #20
 8011b18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b26:	3301      	adds	r3, #1
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011b2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011b32:	fbb2 f6f3 	udiv	r6, r2, r3
 8011b36:	d331      	bcc.n	8011b9c <quorem+0x9c>
 8011b38:	f04f 0e00 	mov.w	lr, #0
 8011b3c:	4640      	mov	r0, r8
 8011b3e:	46ac      	mov	ip, r5
 8011b40:	46f2      	mov	sl, lr
 8011b42:	f850 2b04 	ldr.w	r2, [r0], #4
 8011b46:	b293      	uxth	r3, r2
 8011b48:	fb06 e303 	mla	r3, r6, r3, lr
 8011b4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011b50:	0c1a      	lsrs	r2, r3, #16
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	ebaa 0303 	sub.w	r3, sl, r3
 8011b58:	f8dc a000 	ldr.w	sl, [ip]
 8011b5c:	fa13 f38a 	uxtah	r3, r3, sl
 8011b60:	fb06 220e 	mla	r2, r6, lr, r2
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	9b00      	ldr	r3, [sp, #0]
 8011b68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011b6c:	b292      	uxth	r2, r2
 8011b6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011b72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011b76:	f8bd 3000 	ldrh.w	r3, [sp]
 8011b7a:	4581      	cmp	r9, r0
 8011b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b80:	f84c 3b04 	str.w	r3, [ip], #4
 8011b84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011b88:	d2db      	bcs.n	8011b42 <quorem+0x42>
 8011b8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8011b8e:	b92b      	cbnz	r3, 8011b9c <quorem+0x9c>
 8011b90:	9b01      	ldr	r3, [sp, #4]
 8011b92:	3b04      	subs	r3, #4
 8011b94:	429d      	cmp	r5, r3
 8011b96:	461a      	mov	r2, r3
 8011b98:	d32c      	bcc.n	8011bf4 <quorem+0xf4>
 8011b9a:	613c      	str	r4, [r7, #16]
 8011b9c:	4638      	mov	r0, r7
 8011b9e:	f001 f9ef 	bl	8012f80 <__mcmp>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	db22      	blt.n	8011bec <quorem+0xec>
 8011ba6:	3601      	adds	r6, #1
 8011ba8:	4629      	mov	r1, r5
 8011baa:	2000      	movs	r0, #0
 8011bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8011bb0:	f8d1 c000 	ldr.w	ip, [r1]
 8011bb4:	b293      	uxth	r3, r2
 8011bb6:	1ac3      	subs	r3, r0, r3
 8011bb8:	0c12      	lsrs	r2, r2, #16
 8011bba:	fa13 f38c 	uxtah	r3, r3, ip
 8011bbe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011bcc:	45c1      	cmp	r9, r8
 8011bce:	f841 3b04 	str.w	r3, [r1], #4
 8011bd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011bd6:	d2e9      	bcs.n	8011bac <quorem+0xac>
 8011bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011bdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011be0:	b922      	cbnz	r2, 8011bec <quorem+0xec>
 8011be2:	3b04      	subs	r3, #4
 8011be4:	429d      	cmp	r5, r3
 8011be6:	461a      	mov	r2, r3
 8011be8:	d30a      	bcc.n	8011c00 <quorem+0x100>
 8011bea:	613c      	str	r4, [r7, #16]
 8011bec:	4630      	mov	r0, r6
 8011bee:	b003      	add	sp, #12
 8011bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf4:	6812      	ldr	r2, [r2, #0]
 8011bf6:	3b04      	subs	r3, #4
 8011bf8:	2a00      	cmp	r2, #0
 8011bfa:	d1ce      	bne.n	8011b9a <quorem+0x9a>
 8011bfc:	3c01      	subs	r4, #1
 8011bfe:	e7c9      	b.n	8011b94 <quorem+0x94>
 8011c00:	6812      	ldr	r2, [r2, #0]
 8011c02:	3b04      	subs	r3, #4
 8011c04:	2a00      	cmp	r2, #0
 8011c06:	d1f0      	bne.n	8011bea <quorem+0xea>
 8011c08:	3c01      	subs	r4, #1
 8011c0a:	e7eb      	b.n	8011be4 <quorem+0xe4>
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e7ee      	b.n	8011bee <quorem+0xee>

08011c10 <_dtoa_r>:
 8011c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c14:	ed2d 8b04 	vpush	{d8-d9}
 8011c18:	69c5      	ldr	r5, [r0, #28]
 8011c1a:	b093      	sub	sp, #76	; 0x4c
 8011c1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011c20:	ec57 6b10 	vmov	r6, r7, d0
 8011c24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011c28:	9107      	str	r1, [sp, #28]
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8011c2e:	930d      	str	r3, [sp, #52]	; 0x34
 8011c30:	b975      	cbnz	r5, 8011c50 <_dtoa_r+0x40>
 8011c32:	2010      	movs	r0, #16
 8011c34:	f000 fe2a 	bl	801288c <malloc>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	61e0      	str	r0, [r4, #28]
 8011c3c:	b920      	cbnz	r0, 8011c48 <_dtoa_r+0x38>
 8011c3e:	4bae      	ldr	r3, [pc, #696]	; (8011ef8 <_dtoa_r+0x2e8>)
 8011c40:	21ef      	movs	r1, #239	; 0xef
 8011c42:	48ae      	ldr	r0, [pc, #696]	; (8011efc <_dtoa_r+0x2ec>)
 8011c44:	f002 fc64 	bl	8014510 <__assert_func>
 8011c48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011c4c:	6005      	str	r5, [r0, #0]
 8011c4e:	60c5      	str	r5, [r0, #12]
 8011c50:	69e3      	ldr	r3, [r4, #28]
 8011c52:	6819      	ldr	r1, [r3, #0]
 8011c54:	b151      	cbz	r1, 8011c6c <_dtoa_r+0x5c>
 8011c56:	685a      	ldr	r2, [r3, #4]
 8011c58:	604a      	str	r2, [r1, #4]
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	4093      	lsls	r3, r2
 8011c5e:	608b      	str	r3, [r1, #8]
 8011c60:	4620      	mov	r0, r4
 8011c62:	f000 ff07 	bl	8012a74 <_Bfree>
 8011c66:	69e3      	ldr	r3, [r4, #28]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	601a      	str	r2, [r3, #0]
 8011c6c:	1e3b      	subs	r3, r7, #0
 8011c6e:	bfbb      	ittet	lt
 8011c70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011c74:	9303      	strlt	r3, [sp, #12]
 8011c76:	2300      	movge	r3, #0
 8011c78:	2201      	movlt	r2, #1
 8011c7a:	bfac      	ite	ge
 8011c7c:	f8c8 3000 	strge.w	r3, [r8]
 8011c80:	f8c8 2000 	strlt.w	r2, [r8]
 8011c84:	4b9e      	ldr	r3, [pc, #632]	; (8011f00 <_dtoa_r+0x2f0>)
 8011c86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011c8a:	ea33 0308 	bics.w	r3, r3, r8
 8011c8e:	d11b      	bne.n	8011cc8 <_dtoa_r+0xb8>
 8011c90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c92:	f242 730f 	movw	r3, #9999	; 0x270f
 8011c96:	6013      	str	r3, [r2, #0]
 8011c98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011c9c:	4333      	orrs	r3, r6
 8011c9e:	f000 8593 	beq.w	80127c8 <_dtoa_r+0xbb8>
 8011ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ca4:	b963      	cbnz	r3, 8011cc0 <_dtoa_r+0xb0>
 8011ca6:	4b97      	ldr	r3, [pc, #604]	; (8011f04 <_dtoa_r+0x2f4>)
 8011ca8:	e027      	b.n	8011cfa <_dtoa_r+0xea>
 8011caa:	4b97      	ldr	r3, [pc, #604]	; (8011f08 <_dtoa_r+0x2f8>)
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	3308      	adds	r3, #8
 8011cb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cb2:	6013      	str	r3, [r2, #0]
 8011cb4:	9800      	ldr	r0, [sp, #0]
 8011cb6:	b013      	add	sp, #76	; 0x4c
 8011cb8:	ecbd 8b04 	vpop	{d8-d9}
 8011cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc0:	4b90      	ldr	r3, [pc, #576]	; (8011f04 <_dtoa_r+0x2f4>)
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	3303      	adds	r3, #3
 8011cc6:	e7f3      	b.n	8011cb0 <_dtoa_r+0xa0>
 8011cc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	ec51 0b17 	vmov	r0, r1, d7
 8011cd2:	eeb0 8a47 	vmov.f32	s16, s14
 8011cd6:	eef0 8a67 	vmov.f32	s17, s15
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f7ee ff1c 	bl	8000b18 <__aeabi_dcmpeq>
 8011ce0:	4681      	mov	r9, r0
 8011ce2:	b160      	cbz	r0, 8011cfe <_dtoa_r+0xee>
 8011ce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	6013      	str	r3, [r2, #0]
 8011cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f000 8568 	beq.w	80127c2 <_dtoa_r+0xbb2>
 8011cf2:	4b86      	ldr	r3, [pc, #536]	; (8011f0c <_dtoa_r+0x2fc>)
 8011cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cf6:	6013      	str	r3, [r2, #0]
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	e7da      	b.n	8011cb4 <_dtoa_r+0xa4>
 8011cfe:	aa10      	add	r2, sp, #64	; 0x40
 8011d00:	a911      	add	r1, sp, #68	; 0x44
 8011d02:	4620      	mov	r0, r4
 8011d04:	eeb0 0a48 	vmov.f32	s0, s16
 8011d08:	eef0 0a68 	vmov.f32	s1, s17
 8011d0c:	f001 fa4e 	bl	80131ac <__d2b>
 8011d10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011d14:	4682      	mov	sl, r0
 8011d16:	2d00      	cmp	r5, #0
 8011d18:	d07f      	beq.n	8011e1a <_dtoa_r+0x20a>
 8011d1a:	ee18 3a90 	vmov	r3, s17
 8011d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011d26:	ec51 0b18 	vmov	r0, r1, d8
 8011d2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011d32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011d36:	4619      	mov	r1, r3
 8011d38:	2200      	movs	r2, #0
 8011d3a:	4b75      	ldr	r3, [pc, #468]	; (8011f10 <_dtoa_r+0x300>)
 8011d3c:	f7ee facc 	bl	80002d8 <__aeabi_dsub>
 8011d40:	a367      	add	r3, pc, #412	; (adr r3, 8011ee0 <_dtoa_r+0x2d0>)
 8011d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d46:	f7ee fc7f 	bl	8000648 <__aeabi_dmul>
 8011d4a:	a367      	add	r3, pc, #412	; (adr r3, 8011ee8 <_dtoa_r+0x2d8>)
 8011d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d50:	f7ee fac4 	bl	80002dc <__adddf3>
 8011d54:	4606      	mov	r6, r0
 8011d56:	4628      	mov	r0, r5
 8011d58:	460f      	mov	r7, r1
 8011d5a:	f7ee fc0b 	bl	8000574 <__aeabi_i2d>
 8011d5e:	a364      	add	r3, pc, #400	; (adr r3, 8011ef0 <_dtoa_r+0x2e0>)
 8011d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d64:	f7ee fc70 	bl	8000648 <__aeabi_dmul>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4630      	mov	r0, r6
 8011d6e:	4639      	mov	r1, r7
 8011d70:	f7ee fab4 	bl	80002dc <__adddf3>
 8011d74:	4606      	mov	r6, r0
 8011d76:	460f      	mov	r7, r1
 8011d78:	f7ee ff16 	bl	8000ba8 <__aeabi_d2iz>
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	4683      	mov	fp, r0
 8011d80:	2300      	movs	r3, #0
 8011d82:	4630      	mov	r0, r6
 8011d84:	4639      	mov	r1, r7
 8011d86:	f7ee fed1 	bl	8000b2c <__aeabi_dcmplt>
 8011d8a:	b148      	cbz	r0, 8011da0 <_dtoa_r+0x190>
 8011d8c:	4658      	mov	r0, fp
 8011d8e:	f7ee fbf1 	bl	8000574 <__aeabi_i2d>
 8011d92:	4632      	mov	r2, r6
 8011d94:	463b      	mov	r3, r7
 8011d96:	f7ee febf 	bl	8000b18 <__aeabi_dcmpeq>
 8011d9a:	b908      	cbnz	r0, 8011da0 <_dtoa_r+0x190>
 8011d9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011da0:	f1bb 0f16 	cmp.w	fp, #22
 8011da4:	d857      	bhi.n	8011e56 <_dtoa_r+0x246>
 8011da6:	4b5b      	ldr	r3, [pc, #364]	; (8011f14 <_dtoa_r+0x304>)
 8011da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	ec51 0b18 	vmov	r0, r1, d8
 8011db4:	f7ee feba 	bl	8000b2c <__aeabi_dcmplt>
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d04e      	beq.n	8011e5a <_dtoa_r+0x24a>
 8011dbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8011dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011dc6:	1b5b      	subs	r3, r3, r5
 8011dc8:	1e5a      	subs	r2, r3, #1
 8011dca:	bf45      	ittet	mi
 8011dcc:	f1c3 0301 	rsbmi	r3, r3, #1
 8011dd0:	9305      	strmi	r3, [sp, #20]
 8011dd2:	2300      	movpl	r3, #0
 8011dd4:	2300      	movmi	r3, #0
 8011dd6:	9206      	str	r2, [sp, #24]
 8011dd8:	bf54      	ite	pl
 8011dda:	9305      	strpl	r3, [sp, #20]
 8011ddc:	9306      	strmi	r3, [sp, #24]
 8011dde:	f1bb 0f00 	cmp.w	fp, #0
 8011de2:	db3c      	blt.n	8011e5e <_dtoa_r+0x24e>
 8011de4:	9b06      	ldr	r3, [sp, #24]
 8011de6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011dea:	445b      	add	r3, fp
 8011dec:	9306      	str	r3, [sp, #24]
 8011dee:	2300      	movs	r3, #0
 8011df0:	9308      	str	r3, [sp, #32]
 8011df2:	9b07      	ldr	r3, [sp, #28]
 8011df4:	2b09      	cmp	r3, #9
 8011df6:	d868      	bhi.n	8011eca <_dtoa_r+0x2ba>
 8011df8:	2b05      	cmp	r3, #5
 8011dfa:	bfc4      	itt	gt
 8011dfc:	3b04      	subgt	r3, #4
 8011dfe:	9307      	strgt	r3, [sp, #28]
 8011e00:	9b07      	ldr	r3, [sp, #28]
 8011e02:	f1a3 0302 	sub.w	r3, r3, #2
 8011e06:	bfcc      	ite	gt
 8011e08:	2500      	movgt	r5, #0
 8011e0a:	2501      	movle	r5, #1
 8011e0c:	2b03      	cmp	r3, #3
 8011e0e:	f200 8085 	bhi.w	8011f1c <_dtoa_r+0x30c>
 8011e12:	e8df f003 	tbb	[pc, r3]
 8011e16:	3b2e      	.short	0x3b2e
 8011e18:	5839      	.short	0x5839
 8011e1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011e1e:	441d      	add	r5, r3
 8011e20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011e24:	2b20      	cmp	r3, #32
 8011e26:	bfc1      	itttt	gt
 8011e28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011e2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8011e30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011e34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011e38:	bfd6      	itet	le
 8011e3a:	f1c3 0320 	rsble	r3, r3, #32
 8011e3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8011e42:	fa06 f003 	lslle.w	r0, r6, r3
 8011e46:	f7ee fb85 	bl	8000554 <__aeabi_ui2d>
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011e50:	3d01      	subs	r5, #1
 8011e52:	920e      	str	r2, [sp, #56]	; 0x38
 8011e54:	e76f      	b.n	8011d36 <_dtoa_r+0x126>
 8011e56:	2301      	movs	r3, #1
 8011e58:	e7b3      	b.n	8011dc2 <_dtoa_r+0x1b2>
 8011e5a:	900c      	str	r0, [sp, #48]	; 0x30
 8011e5c:	e7b2      	b.n	8011dc4 <_dtoa_r+0x1b4>
 8011e5e:	9b05      	ldr	r3, [sp, #20]
 8011e60:	eba3 030b 	sub.w	r3, r3, fp
 8011e64:	9305      	str	r3, [sp, #20]
 8011e66:	f1cb 0300 	rsb	r3, fp, #0
 8011e6a:	9308      	str	r3, [sp, #32]
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e70:	e7bf      	b.n	8011df2 <_dtoa_r+0x1e2>
 8011e72:	2300      	movs	r3, #0
 8011e74:	9309      	str	r3, [sp, #36]	; 0x24
 8011e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	dc52      	bgt.n	8011f22 <_dtoa_r+0x312>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	9301      	str	r3, [sp, #4]
 8011e80:	9304      	str	r3, [sp, #16]
 8011e82:	461a      	mov	r2, r3
 8011e84:	920a      	str	r2, [sp, #40]	; 0x28
 8011e86:	e00b      	b.n	8011ea0 <_dtoa_r+0x290>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	e7f3      	b.n	8011e74 <_dtoa_r+0x264>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e92:	445b      	add	r3, fp
 8011e94:	9301      	str	r3, [sp, #4]
 8011e96:	3301      	adds	r3, #1
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	9304      	str	r3, [sp, #16]
 8011e9c:	bfb8      	it	lt
 8011e9e:	2301      	movlt	r3, #1
 8011ea0:	69e0      	ldr	r0, [r4, #28]
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	2204      	movs	r2, #4
 8011ea6:	f102 0614 	add.w	r6, r2, #20
 8011eaa:	429e      	cmp	r6, r3
 8011eac:	d93d      	bls.n	8011f2a <_dtoa_r+0x31a>
 8011eae:	6041      	str	r1, [r0, #4]
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fd9f 	bl	80129f4 <_Balloc>
 8011eb6:	9000      	str	r0, [sp, #0]
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d139      	bne.n	8011f30 <_dtoa_r+0x320>
 8011ebc:	4b16      	ldr	r3, [pc, #88]	; (8011f18 <_dtoa_r+0x308>)
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	f240 11af 	movw	r1, #431	; 0x1af
 8011ec4:	e6bd      	b.n	8011c42 <_dtoa_r+0x32>
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	e7e1      	b.n	8011e8e <_dtoa_r+0x27e>
 8011eca:	2501      	movs	r5, #1
 8011ecc:	2300      	movs	r3, #0
 8011ece:	9307      	str	r3, [sp, #28]
 8011ed0:	9509      	str	r5, [sp, #36]	; 0x24
 8011ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed6:	9301      	str	r3, [sp, #4]
 8011ed8:	9304      	str	r3, [sp, #16]
 8011eda:	2200      	movs	r2, #0
 8011edc:	2312      	movs	r3, #18
 8011ede:	e7d1      	b.n	8011e84 <_dtoa_r+0x274>
 8011ee0:	636f4361 	.word	0x636f4361
 8011ee4:	3fd287a7 	.word	0x3fd287a7
 8011ee8:	8b60c8b3 	.word	0x8b60c8b3
 8011eec:	3fc68a28 	.word	0x3fc68a28
 8011ef0:	509f79fb 	.word	0x509f79fb
 8011ef4:	3fd34413 	.word	0x3fd34413
 8011ef8:	08017f66 	.word	0x08017f66
 8011efc:	08017f7d 	.word	0x08017f7d
 8011f00:	7ff00000 	.word	0x7ff00000
 8011f04:	08017f62 	.word	0x08017f62
 8011f08:	08017f59 	.word	0x08017f59
 8011f0c:	08017f31 	.word	0x08017f31
 8011f10:	3ff80000 	.word	0x3ff80000
 8011f14:	08018068 	.word	0x08018068
 8011f18:	08017fd5 	.word	0x08017fd5
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f20:	e7d7      	b.n	8011ed2 <_dtoa_r+0x2c2>
 8011f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f24:	9301      	str	r3, [sp, #4]
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	e7ba      	b.n	8011ea0 <_dtoa_r+0x290>
 8011f2a:	3101      	adds	r1, #1
 8011f2c:	0052      	lsls	r2, r2, #1
 8011f2e:	e7ba      	b.n	8011ea6 <_dtoa_r+0x296>
 8011f30:	69e3      	ldr	r3, [r4, #28]
 8011f32:	9a00      	ldr	r2, [sp, #0]
 8011f34:	601a      	str	r2, [r3, #0]
 8011f36:	9b04      	ldr	r3, [sp, #16]
 8011f38:	2b0e      	cmp	r3, #14
 8011f3a:	f200 80a8 	bhi.w	801208e <_dtoa_r+0x47e>
 8011f3e:	2d00      	cmp	r5, #0
 8011f40:	f000 80a5 	beq.w	801208e <_dtoa_r+0x47e>
 8011f44:	f1bb 0f00 	cmp.w	fp, #0
 8011f48:	dd38      	ble.n	8011fbc <_dtoa_r+0x3ac>
 8011f4a:	4bc0      	ldr	r3, [pc, #768]	; (801224c <_dtoa_r+0x63c>)
 8011f4c:	f00b 020f 	and.w	r2, fp, #15
 8011f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011f58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011f5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011f60:	d019      	beq.n	8011f96 <_dtoa_r+0x386>
 8011f62:	4bbb      	ldr	r3, [pc, #748]	; (8012250 <_dtoa_r+0x640>)
 8011f64:	ec51 0b18 	vmov	r0, r1, d8
 8011f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f6c:	f7ee fc96 	bl	800089c <__aeabi_ddiv>
 8011f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f74:	f008 080f 	and.w	r8, r8, #15
 8011f78:	2503      	movs	r5, #3
 8011f7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012250 <_dtoa_r+0x640>
 8011f7e:	f1b8 0f00 	cmp.w	r8, #0
 8011f82:	d10a      	bne.n	8011f9a <_dtoa_r+0x38a>
 8011f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f88:	4632      	mov	r2, r6
 8011f8a:	463b      	mov	r3, r7
 8011f8c:	f7ee fc86 	bl	800089c <__aeabi_ddiv>
 8011f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f94:	e02b      	b.n	8011fee <_dtoa_r+0x3de>
 8011f96:	2502      	movs	r5, #2
 8011f98:	e7ef      	b.n	8011f7a <_dtoa_r+0x36a>
 8011f9a:	f018 0f01 	tst.w	r8, #1
 8011f9e:	d008      	beq.n	8011fb2 <_dtoa_r+0x3a2>
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	4639      	mov	r1, r7
 8011fa4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011fa8:	f7ee fb4e 	bl	8000648 <__aeabi_dmul>
 8011fac:	3501      	adds	r5, #1
 8011fae:	4606      	mov	r6, r0
 8011fb0:	460f      	mov	r7, r1
 8011fb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011fb6:	f109 0908 	add.w	r9, r9, #8
 8011fba:	e7e0      	b.n	8011f7e <_dtoa_r+0x36e>
 8011fbc:	f000 809f 	beq.w	80120fe <_dtoa_r+0x4ee>
 8011fc0:	f1cb 0600 	rsb	r6, fp, #0
 8011fc4:	4ba1      	ldr	r3, [pc, #644]	; (801224c <_dtoa_r+0x63c>)
 8011fc6:	4fa2      	ldr	r7, [pc, #648]	; (8012250 <_dtoa_r+0x640>)
 8011fc8:	f006 020f 	and.w	r2, r6, #15
 8011fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	ec51 0b18 	vmov	r0, r1, d8
 8011fd8:	f7ee fb36 	bl	8000648 <__aeabi_dmul>
 8011fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fe0:	1136      	asrs	r6, r6, #4
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	2502      	movs	r5, #2
 8011fe6:	2e00      	cmp	r6, #0
 8011fe8:	d17e      	bne.n	80120e8 <_dtoa_r+0x4d8>
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d1d0      	bne.n	8011f90 <_dtoa_r+0x380>
 8011fee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ff0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f000 8084 	beq.w	8012102 <_dtoa_r+0x4f2>
 8011ffa:	4b96      	ldr	r3, [pc, #600]	; (8012254 <_dtoa_r+0x644>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	4640      	mov	r0, r8
 8012000:	4649      	mov	r1, r9
 8012002:	f7ee fd93 	bl	8000b2c <__aeabi_dcmplt>
 8012006:	2800      	cmp	r0, #0
 8012008:	d07b      	beq.n	8012102 <_dtoa_r+0x4f2>
 801200a:	9b04      	ldr	r3, [sp, #16]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d078      	beq.n	8012102 <_dtoa_r+0x4f2>
 8012010:	9b01      	ldr	r3, [sp, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	dd39      	ble.n	801208a <_dtoa_r+0x47a>
 8012016:	4b90      	ldr	r3, [pc, #576]	; (8012258 <_dtoa_r+0x648>)
 8012018:	2200      	movs	r2, #0
 801201a:	4640      	mov	r0, r8
 801201c:	4649      	mov	r1, r9
 801201e:	f7ee fb13 	bl	8000648 <__aeabi_dmul>
 8012022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012026:	9e01      	ldr	r6, [sp, #4]
 8012028:	f10b 37ff 	add.w	r7, fp, #4294967295
 801202c:	3501      	adds	r5, #1
 801202e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012032:	4628      	mov	r0, r5
 8012034:	f7ee fa9e 	bl	8000574 <__aeabi_i2d>
 8012038:	4642      	mov	r2, r8
 801203a:	464b      	mov	r3, r9
 801203c:	f7ee fb04 	bl	8000648 <__aeabi_dmul>
 8012040:	4b86      	ldr	r3, [pc, #536]	; (801225c <_dtoa_r+0x64c>)
 8012042:	2200      	movs	r2, #0
 8012044:	f7ee f94a 	bl	80002dc <__adddf3>
 8012048:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801204c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012050:	9303      	str	r3, [sp, #12]
 8012052:	2e00      	cmp	r6, #0
 8012054:	d158      	bne.n	8012108 <_dtoa_r+0x4f8>
 8012056:	4b82      	ldr	r3, [pc, #520]	; (8012260 <_dtoa_r+0x650>)
 8012058:	2200      	movs	r2, #0
 801205a:	4640      	mov	r0, r8
 801205c:	4649      	mov	r1, r9
 801205e:	f7ee f93b 	bl	80002d8 <__aeabi_dsub>
 8012062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012066:	4680      	mov	r8, r0
 8012068:	4689      	mov	r9, r1
 801206a:	f7ee fd7d 	bl	8000b68 <__aeabi_dcmpgt>
 801206e:	2800      	cmp	r0, #0
 8012070:	f040 8296 	bne.w	80125a0 <_dtoa_r+0x990>
 8012074:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012078:	4640      	mov	r0, r8
 801207a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801207e:	4649      	mov	r1, r9
 8012080:	f7ee fd54 	bl	8000b2c <__aeabi_dcmplt>
 8012084:	2800      	cmp	r0, #0
 8012086:	f040 8289 	bne.w	801259c <_dtoa_r+0x98c>
 801208a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801208e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012090:	2b00      	cmp	r3, #0
 8012092:	f2c0 814e 	blt.w	8012332 <_dtoa_r+0x722>
 8012096:	f1bb 0f0e 	cmp.w	fp, #14
 801209a:	f300 814a 	bgt.w	8012332 <_dtoa_r+0x722>
 801209e:	4b6b      	ldr	r3, [pc, #428]	; (801224c <_dtoa_r+0x63c>)
 80120a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80120a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f280 80dc 	bge.w	8012268 <_dtoa_r+0x658>
 80120b0:	9b04      	ldr	r3, [sp, #16]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f300 80d8 	bgt.w	8012268 <_dtoa_r+0x658>
 80120b8:	f040 826f 	bne.w	801259a <_dtoa_r+0x98a>
 80120bc:	4b68      	ldr	r3, [pc, #416]	; (8012260 <_dtoa_r+0x650>)
 80120be:	2200      	movs	r2, #0
 80120c0:	4640      	mov	r0, r8
 80120c2:	4649      	mov	r1, r9
 80120c4:	f7ee fac0 	bl	8000648 <__aeabi_dmul>
 80120c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120cc:	f7ee fd42 	bl	8000b54 <__aeabi_dcmpge>
 80120d0:	9e04      	ldr	r6, [sp, #16]
 80120d2:	4637      	mov	r7, r6
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f040 8245 	bne.w	8012564 <_dtoa_r+0x954>
 80120da:	9d00      	ldr	r5, [sp, #0]
 80120dc:	2331      	movs	r3, #49	; 0x31
 80120de:	f805 3b01 	strb.w	r3, [r5], #1
 80120e2:	f10b 0b01 	add.w	fp, fp, #1
 80120e6:	e241      	b.n	801256c <_dtoa_r+0x95c>
 80120e8:	07f2      	lsls	r2, r6, #31
 80120ea:	d505      	bpl.n	80120f8 <_dtoa_r+0x4e8>
 80120ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120f0:	f7ee faaa 	bl	8000648 <__aeabi_dmul>
 80120f4:	3501      	adds	r5, #1
 80120f6:	2301      	movs	r3, #1
 80120f8:	1076      	asrs	r6, r6, #1
 80120fa:	3708      	adds	r7, #8
 80120fc:	e773      	b.n	8011fe6 <_dtoa_r+0x3d6>
 80120fe:	2502      	movs	r5, #2
 8012100:	e775      	b.n	8011fee <_dtoa_r+0x3de>
 8012102:	9e04      	ldr	r6, [sp, #16]
 8012104:	465f      	mov	r7, fp
 8012106:	e792      	b.n	801202e <_dtoa_r+0x41e>
 8012108:	9900      	ldr	r1, [sp, #0]
 801210a:	4b50      	ldr	r3, [pc, #320]	; (801224c <_dtoa_r+0x63c>)
 801210c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012110:	4431      	add	r1, r6
 8012112:	9102      	str	r1, [sp, #8]
 8012114:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012116:	eeb0 9a47 	vmov.f32	s18, s14
 801211a:	eef0 9a67 	vmov.f32	s19, s15
 801211e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012126:	2900      	cmp	r1, #0
 8012128:	d044      	beq.n	80121b4 <_dtoa_r+0x5a4>
 801212a:	494e      	ldr	r1, [pc, #312]	; (8012264 <_dtoa_r+0x654>)
 801212c:	2000      	movs	r0, #0
 801212e:	f7ee fbb5 	bl	800089c <__aeabi_ddiv>
 8012132:	ec53 2b19 	vmov	r2, r3, d9
 8012136:	f7ee f8cf 	bl	80002d8 <__aeabi_dsub>
 801213a:	9d00      	ldr	r5, [sp, #0]
 801213c:	ec41 0b19 	vmov	d9, r0, r1
 8012140:	4649      	mov	r1, r9
 8012142:	4640      	mov	r0, r8
 8012144:	f7ee fd30 	bl	8000ba8 <__aeabi_d2iz>
 8012148:	4606      	mov	r6, r0
 801214a:	f7ee fa13 	bl	8000574 <__aeabi_i2d>
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	4640      	mov	r0, r8
 8012154:	4649      	mov	r1, r9
 8012156:	f7ee f8bf 	bl	80002d8 <__aeabi_dsub>
 801215a:	3630      	adds	r6, #48	; 0x30
 801215c:	f805 6b01 	strb.w	r6, [r5], #1
 8012160:	ec53 2b19 	vmov	r2, r3, d9
 8012164:	4680      	mov	r8, r0
 8012166:	4689      	mov	r9, r1
 8012168:	f7ee fce0 	bl	8000b2c <__aeabi_dcmplt>
 801216c:	2800      	cmp	r0, #0
 801216e:	d164      	bne.n	801223a <_dtoa_r+0x62a>
 8012170:	4642      	mov	r2, r8
 8012172:	464b      	mov	r3, r9
 8012174:	4937      	ldr	r1, [pc, #220]	; (8012254 <_dtoa_r+0x644>)
 8012176:	2000      	movs	r0, #0
 8012178:	f7ee f8ae 	bl	80002d8 <__aeabi_dsub>
 801217c:	ec53 2b19 	vmov	r2, r3, d9
 8012180:	f7ee fcd4 	bl	8000b2c <__aeabi_dcmplt>
 8012184:	2800      	cmp	r0, #0
 8012186:	f040 80b6 	bne.w	80122f6 <_dtoa_r+0x6e6>
 801218a:	9b02      	ldr	r3, [sp, #8]
 801218c:	429d      	cmp	r5, r3
 801218e:	f43f af7c 	beq.w	801208a <_dtoa_r+0x47a>
 8012192:	4b31      	ldr	r3, [pc, #196]	; (8012258 <_dtoa_r+0x648>)
 8012194:	ec51 0b19 	vmov	r0, r1, d9
 8012198:	2200      	movs	r2, #0
 801219a:	f7ee fa55 	bl	8000648 <__aeabi_dmul>
 801219e:	4b2e      	ldr	r3, [pc, #184]	; (8012258 <_dtoa_r+0x648>)
 80121a0:	ec41 0b19 	vmov	d9, r0, r1
 80121a4:	2200      	movs	r2, #0
 80121a6:	4640      	mov	r0, r8
 80121a8:	4649      	mov	r1, r9
 80121aa:	f7ee fa4d 	bl	8000648 <__aeabi_dmul>
 80121ae:	4680      	mov	r8, r0
 80121b0:	4689      	mov	r9, r1
 80121b2:	e7c5      	b.n	8012140 <_dtoa_r+0x530>
 80121b4:	ec51 0b17 	vmov	r0, r1, d7
 80121b8:	f7ee fa46 	bl	8000648 <__aeabi_dmul>
 80121bc:	9b02      	ldr	r3, [sp, #8]
 80121be:	9d00      	ldr	r5, [sp, #0]
 80121c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80121c2:	ec41 0b19 	vmov	d9, r0, r1
 80121c6:	4649      	mov	r1, r9
 80121c8:	4640      	mov	r0, r8
 80121ca:	f7ee fced 	bl	8000ba8 <__aeabi_d2iz>
 80121ce:	4606      	mov	r6, r0
 80121d0:	f7ee f9d0 	bl	8000574 <__aeabi_i2d>
 80121d4:	3630      	adds	r6, #48	; 0x30
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	4640      	mov	r0, r8
 80121dc:	4649      	mov	r1, r9
 80121de:	f7ee f87b 	bl	80002d8 <__aeabi_dsub>
 80121e2:	f805 6b01 	strb.w	r6, [r5], #1
 80121e6:	9b02      	ldr	r3, [sp, #8]
 80121e8:	429d      	cmp	r5, r3
 80121ea:	4680      	mov	r8, r0
 80121ec:	4689      	mov	r9, r1
 80121ee:	f04f 0200 	mov.w	r2, #0
 80121f2:	d124      	bne.n	801223e <_dtoa_r+0x62e>
 80121f4:	4b1b      	ldr	r3, [pc, #108]	; (8012264 <_dtoa_r+0x654>)
 80121f6:	ec51 0b19 	vmov	r0, r1, d9
 80121fa:	f7ee f86f 	bl	80002dc <__adddf3>
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	4640      	mov	r0, r8
 8012204:	4649      	mov	r1, r9
 8012206:	f7ee fcaf 	bl	8000b68 <__aeabi_dcmpgt>
 801220a:	2800      	cmp	r0, #0
 801220c:	d173      	bne.n	80122f6 <_dtoa_r+0x6e6>
 801220e:	ec53 2b19 	vmov	r2, r3, d9
 8012212:	4914      	ldr	r1, [pc, #80]	; (8012264 <_dtoa_r+0x654>)
 8012214:	2000      	movs	r0, #0
 8012216:	f7ee f85f 	bl	80002d8 <__aeabi_dsub>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	4640      	mov	r0, r8
 8012220:	4649      	mov	r1, r9
 8012222:	f7ee fc83 	bl	8000b2c <__aeabi_dcmplt>
 8012226:	2800      	cmp	r0, #0
 8012228:	f43f af2f 	beq.w	801208a <_dtoa_r+0x47a>
 801222c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801222e:	1e6b      	subs	r3, r5, #1
 8012230:	930f      	str	r3, [sp, #60]	; 0x3c
 8012232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012236:	2b30      	cmp	r3, #48	; 0x30
 8012238:	d0f8      	beq.n	801222c <_dtoa_r+0x61c>
 801223a:	46bb      	mov	fp, r7
 801223c:	e04a      	b.n	80122d4 <_dtoa_r+0x6c4>
 801223e:	4b06      	ldr	r3, [pc, #24]	; (8012258 <_dtoa_r+0x648>)
 8012240:	f7ee fa02 	bl	8000648 <__aeabi_dmul>
 8012244:	4680      	mov	r8, r0
 8012246:	4689      	mov	r9, r1
 8012248:	e7bd      	b.n	80121c6 <_dtoa_r+0x5b6>
 801224a:	bf00      	nop
 801224c:	08018068 	.word	0x08018068
 8012250:	08018040 	.word	0x08018040
 8012254:	3ff00000 	.word	0x3ff00000
 8012258:	40240000 	.word	0x40240000
 801225c:	401c0000 	.word	0x401c0000
 8012260:	40140000 	.word	0x40140000
 8012264:	3fe00000 	.word	0x3fe00000
 8012268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801226c:	9d00      	ldr	r5, [sp, #0]
 801226e:	4642      	mov	r2, r8
 8012270:	464b      	mov	r3, r9
 8012272:	4630      	mov	r0, r6
 8012274:	4639      	mov	r1, r7
 8012276:	f7ee fb11 	bl	800089c <__aeabi_ddiv>
 801227a:	f7ee fc95 	bl	8000ba8 <__aeabi_d2iz>
 801227e:	9001      	str	r0, [sp, #4]
 8012280:	f7ee f978 	bl	8000574 <__aeabi_i2d>
 8012284:	4642      	mov	r2, r8
 8012286:	464b      	mov	r3, r9
 8012288:	f7ee f9de 	bl	8000648 <__aeabi_dmul>
 801228c:	4602      	mov	r2, r0
 801228e:	460b      	mov	r3, r1
 8012290:	4630      	mov	r0, r6
 8012292:	4639      	mov	r1, r7
 8012294:	f7ee f820 	bl	80002d8 <__aeabi_dsub>
 8012298:	9e01      	ldr	r6, [sp, #4]
 801229a:	9f04      	ldr	r7, [sp, #16]
 801229c:	3630      	adds	r6, #48	; 0x30
 801229e:	f805 6b01 	strb.w	r6, [r5], #1
 80122a2:	9e00      	ldr	r6, [sp, #0]
 80122a4:	1bae      	subs	r6, r5, r6
 80122a6:	42b7      	cmp	r7, r6
 80122a8:	4602      	mov	r2, r0
 80122aa:	460b      	mov	r3, r1
 80122ac:	d134      	bne.n	8012318 <_dtoa_r+0x708>
 80122ae:	f7ee f815 	bl	80002dc <__adddf3>
 80122b2:	4642      	mov	r2, r8
 80122b4:	464b      	mov	r3, r9
 80122b6:	4606      	mov	r6, r0
 80122b8:	460f      	mov	r7, r1
 80122ba:	f7ee fc55 	bl	8000b68 <__aeabi_dcmpgt>
 80122be:	b9c8      	cbnz	r0, 80122f4 <_dtoa_r+0x6e4>
 80122c0:	4642      	mov	r2, r8
 80122c2:	464b      	mov	r3, r9
 80122c4:	4630      	mov	r0, r6
 80122c6:	4639      	mov	r1, r7
 80122c8:	f7ee fc26 	bl	8000b18 <__aeabi_dcmpeq>
 80122cc:	b110      	cbz	r0, 80122d4 <_dtoa_r+0x6c4>
 80122ce:	9b01      	ldr	r3, [sp, #4]
 80122d0:	07db      	lsls	r3, r3, #31
 80122d2:	d40f      	bmi.n	80122f4 <_dtoa_r+0x6e4>
 80122d4:	4651      	mov	r1, sl
 80122d6:	4620      	mov	r0, r4
 80122d8:	f000 fbcc 	bl	8012a74 <_Bfree>
 80122dc:	2300      	movs	r3, #0
 80122de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122e0:	702b      	strb	r3, [r5, #0]
 80122e2:	f10b 0301 	add.w	r3, fp, #1
 80122e6:	6013      	str	r3, [r2, #0]
 80122e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f43f ace2 	beq.w	8011cb4 <_dtoa_r+0xa4>
 80122f0:	601d      	str	r5, [r3, #0]
 80122f2:	e4df      	b.n	8011cb4 <_dtoa_r+0xa4>
 80122f4:	465f      	mov	r7, fp
 80122f6:	462b      	mov	r3, r5
 80122f8:	461d      	mov	r5, r3
 80122fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122fe:	2a39      	cmp	r2, #57	; 0x39
 8012300:	d106      	bne.n	8012310 <_dtoa_r+0x700>
 8012302:	9a00      	ldr	r2, [sp, #0]
 8012304:	429a      	cmp	r2, r3
 8012306:	d1f7      	bne.n	80122f8 <_dtoa_r+0x6e8>
 8012308:	9900      	ldr	r1, [sp, #0]
 801230a:	2230      	movs	r2, #48	; 0x30
 801230c:	3701      	adds	r7, #1
 801230e:	700a      	strb	r2, [r1, #0]
 8012310:	781a      	ldrb	r2, [r3, #0]
 8012312:	3201      	adds	r2, #1
 8012314:	701a      	strb	r2, [r3, #0]
 8012316:	e790      	b.n	801223a <_dtoa_r+0x62a>
 8012318:	4ba3      	ldr	r3, [pc, #652]	; (80125a8 <_dtoa_r+0x998>)
 801231a:	2200      	movs	r2, #0
 801231c:	f7ee f994 	bl	8000648 <__aeabi_dmul>
 8012320:	2200      	movs	r2, #0
 8012322:	2300      	movs	r3, #0
 8012324:	4606      	mov	r6, r0
 8012326:	460f      	mov	r7, r1
 8012328:	f7ee fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 801232c:	2800      	cmp	r0, #0
 801232e:	d09e      	beq.n	801226e <_dtoa_r+0x65e>
 8012330:	e7d0      	b.n	80122d4 <_dtoa_r+0x6c4>
 8012332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012334:	2a00      	cmp	r2, #0
 8012336:	f000 80ca 	beq.w	80124ce <_dtoa_r+0x8be>
 801233a:	9a07      	ldr	r2, [sp, #28]
 801233c:	2a01      	cmp	r2, #1
 801233e:	f300 80ad 	bgt.w	801249c <_dtoa_r+0x88c>
 8012342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012344:	2a00      	cmp	r2, #0
 8012346:	f000 80a5 	beq.w	8012494 <_dtoa_r+0x884>
 801234a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801234e:	9e08      	ldr	r6, [sp, #32]
 8012350:	9d05      	ldr	r5, [sp, #20]
 8012352:	9a05      	ldr	r2, [sp, #20]
 8012354:	441a      	add	r2, r3
 8012356:	9205      	str	r2, [sp, #20]
 8012358:	9a06      	ldr	r2, [sp, #24]
 801235a:	2101      	movs	r1, #1
 801235c:	441a      	add	r2, r3
 801235e:	4620      	mov	r0, r4
 8012360:	9206      	str	r2, [sp, #24]
 8012362:	f000 fc87 	bl	8012c74 <__i2b>
 8012366:	4607      	mov	r7, r0
 8012368:	b165      	cbz	r5, 8012384 <_dtoa_r+0x774>
 801236a:	9b06      	ldr	r3, [sp, #24]
 801236c:	2b00      	cmp	r3, #0
 801236e:	dd09      	ble.n	8012384 <_dtoa_r+0x774>
 8012370:	42ab      	cmp	r3, r5
 8012372:	9a05      	ldr	r2, [sp, #20]
 8012374:	bfa8      	it	ge
 8012376:	462b      	movge	r3, r5
 8012378:	1ad2      	subs	r2, r2, r3
 801237a:	9205      	str	r2, [sp, #20]
 801237c:	9a06      	ldr	r2, [sp, #24]
 801237e:	1aed      	subs	r5, r5, r3
 8012380:	1ad3      	subs	r3, r2, r3
 8012382:	9306      	str	r3, [sp, #24]
 8012384:	9b08      	ldr	r3, [sp, #32]
 8012386:	b1f3      	cbz	r3, 80123c6 <_dtoa_r+0x7b6>
 8012388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801238a:	2b00      	cmp	r3, #0
 801238c:	f000 80a3 	beq.w	80124d6 <_dtoa_r+0x8c6>
 8012390:	2e00      	cmp	r6, #0
 8012392:	dd10      	ble.n	80123b6 <_dtoa_r+0x7a6>
 8012394:	4639      	mov	r1, r7
 8012396:	4632      	mov	r2, r6
 8012398:	4620      	mov	r0, r4
 801239a:	f000 fd2b 	bl	8012df4 <__pow5mult>
 801239e:	4652      	mov	r2, sl
 80123a0:	4601      	mov	r1, r0
 80123a2:	4607      	mov	r7, r0
 80123a4:	4620      	mov	r0, r4
 80123a6:	f000 fc7b 	bl	8012ca0 <__multiply>
 80123aa:	4651      	mov	r1, sl
 80123ac:	4680      	mov	r8, r0
 80123ae:	4620      	mov	r0, r4
 80123b0:	f000 fb60 	bl	8012a74 <_Bfree>
 80123b4:	46c2      	mov	sl, r8
 80123b6:	9b08      	ldr	r3, [sp, #32]
 80123b8:	1b9a      	subs	r2, r3, r6
 80123ba:	d004      	beq.n	80123c6 <_dtoa_r+0x7b6>
 80123bc:	4651      	mov	r1, sl
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 fd18 	bl	8012df4 <__pow5mult>
 80123c4:	4682      	mov	sl, r0
 80123c6:	2101      	movs	r1, #1
 80123c8:	4620      	mov	r0, r4
 80123ca:	f000 fc53 	bl	8012c74 <__i2b>
 80123ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	4606      	mov	r6, r0
 80123d4:	f340 8081 	ble.w	80124da <_dtoa_r+0x8ca>
 80123d8:	461a      	mov	r2, r3
 80123da:	4601      	mov	r1, r0
 80123dc:	4620      	mov	r0, r4
 80123de:	f000 fd09 	bl	8012df4 <__pow5mult>
 80123e2:	9b07      	ldr	r3, [sp, #28]
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	4606      	mov	r6, r0
 80123e8:	dd7a      	ble.n	80124e0 <_dtoa_r+0x8d0>
 80123ea:	f04f 0800 	mov.w	r8, #0
 80123ee:	6933      	ldr	r3, [r6, #16]
 80123f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80123f4:	6918      	ldr	r0, [r3, #16]
 80123f6:	f000 fbef 	bl	8012bd8 <__hi0bits>
 80123fa:	f1c0 0020 	rsb	r0, r0, #32
 80123fe:	9b06      	ldr	r3, [sp, #24]
 8012400:	4418      	add	r0, r3
 8012402:	f010 001f 	ands.w	r0, r0, #31
 8012406:	f000 8094 	beq.w	8012532 <_dtoa_r+0x922>
 801240a:	f1c0 0320 	rsb	r3, r0, #32
 801240e:	2b04      	cmp	r3, #4
 8012410:	f340 8085 	ble.w	801251e <_dtoa_r+0x90e>
 8012414:	9b05      	ldr	r3, [sp, #20]
 8012416:	f1c0 001c 	rsb	r0, r0, #28
 801241a:	4403      	add	r3, r0
 801241c:	9305      	str	r3, [sp, #20]
 801241e:	9b06      	ldr	r3, [sp, #24]
 8012420:	4403      	add	r3, r0
 8012422:	4405      	add	r5, r0
 8012424:	9306      	str	r3, [sp, #24]
 8012426:	9b05      	ldr	r3, [sp, #20]
 8012428:	2b00      	cmp	r3, #0
 801242a:	dd05      	ble.n	8012438 <_dtoa_r+0x828>
 801242c:	4651      	mov	r1, sl
 801242e:	461a      	mov	r2, r3
 8012430:	4620      	mov	r0, r4
 8012432:	f000 fd39 	bl	8012ea8 <__lshift>
 8012436:	4682      	mov	sl, r0
 8012438:	9b06      	ldr	r3, [sp, #24]
 801243a:	2b00      	cmp	r3, #0
 801243c:	dd05      	ble.n	801244a <_dtoa_r+0x83a>
 801243e:	4631      	mov	r1, r6
 8012440:	461a      	mov	r2, r3
 8012442:	4620      	mov	r0, r4
 8012444:	f000 fd30 	bl	8012ea8 <__lshift>
 8012448:	4606      	mov	r6, r0
 801244a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801244c:	2b00      	cmp	r3, #0
 801244e:	d072      	beq.n	8012536 <_dtoa_r+0x926>
 8012450:	4631      	mov	r1, r6
 8012452:	4650      	mov	r0, sl
 8012454:	f000 fd94 	bl	8012f80 <__mcmp>
 8012458:	2800      	cmp	r0, #0
 801245a:	da6c      	bge.n	8012536 <_dtoa_r+0x926>
 801245c:	2300      	movs	r3, #0
 801245e:	4651      	mov	r1, sl
 8012460:	220a      	movs	r2, #10
 8012462:	4620      	mov	r0, r4
 8012464:	f000 fb28 	bl	8012ab8 <__multadd>
 8012468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801246a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801246e:	4682      	mov	sl, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 81b0 	beq.w	80127d6 <_dtoa_r+0xbc6>
 8012476:	2300      	movs	r3, #0
 8012478:	4639      	mov	r1, r7
 801247a:	220a      	movs	r2, #10
 801247c:	4620      	mov	r0, r4
 801247e:	f000 fb1b 	bl	8012ab8 <__multadd>
 8012482:	9b01      	ldr	r3, [sp, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	4607      	mov	r7, r0
 8012488:	f300 8096 	bgt.w	80125b8 <_dtoa_r+0x9a8>
 801248c:	9b07      	ldr	r3, [sp, #28]
 801248e:	2b02      	cmp	r3, #2
 8012490:	dc59      	bgt.n	8012546 <_dtoa_r+0x936>
 8012492:	e091      	b.n	80125b8 <_dtoa_r+0x9a8>
 8012494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801249a:	e758      	b.n	801234e <_dtoa_r+0x73e>
 801249c:	9b04      	ldr	r3, [sp, #16]
 801249e:	1e5e      	subs	r6, r3, #1
 80124a0:	9b08      	ldr	r3, [sp, #32]
 80124a2:	42b3      	cmp	r3, r6
 80124a4:	bfbf      	itttt	lt
 80124a6:	9b08      	ldrlt	r3, [sp, #32]
 80124a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80124aa:	9608      	strlt	r6, [sp, #32]
 80124ac:	1af3      	sublt	r3, r6, r3
 80124ae:	bfb4      	ite	lt
 80124b0:	18d2      	addlt	r2, r2, r3
 80124b2:	1b9e      	subge	r6, r3, r6
 80124b4:	9b04      	ldr	r3, [sp, #16]
 80124b6:	bfbc      	itt	lt
 80124b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80124ba:	2600      	movlt	r6, #0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	bfb7      	itett	lt
 80124c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80124c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80124c8:	1a9d      	sublt	r5, r3, r2
 80124ca:	2300      	movlt	r3, #0
 80124cc:	e741      	b.n	8012352 <_dtoa_r+0x742>
 80124ce:	9e08      	ldr	r6, [sp, #32]
 80124d0:	9d05      	ldr	r5, [sp, #20]
 80124d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80124d4:	e748      	b.n	8012368 <_dtoa_r+0x758>
 80124d6:	9a08      	ldr	r2, [sp, #32]
 80124d8:	e770      	b.n	80123bc <_dtoa_r+0x7ac>
 80124da:	9b07      	ldr	r3, [sp, #28]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	dc19      	bgt.n	8012514 <_dtoa_r+0x904>
 80124e0:	9b02      	ldr	r3, [sp, #8]
 80124e2:	b9bb      	cbnz	r3, 8012514 <_dtoa_r+0x904>
 80124e4:	9b03      	ldr	r3, [sp, #12]
 80124e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80124ea:	b99b      	cbnz	r3, 8012514 <_dtoa_r+0x904>
 80124ec:	9b03      	ldr	r3, [sp, #12]
 80124ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80124f2:	0d1b      	lsrs	r3, r3, #20
 80124f4:	051b      	lsls	r3, r3, #20
 80124f6:	b183      	cbz	r3, 801251a <_dtoa_r+0x90a>
 80124f8:	9b05      	ldr	r3, [sp, #20]
 80124fa:	3301      	adds	r3, #1
 80124fc:	9305      	str	r3, [sp, #20]
 80124fe:	9b06      	ldr	r3, [sp, #24]
 8012500:	3301      	adds	r3, #1
 8012502:	9306      	str	r3, [sp, #24]
 8012504:	f04f 0801 	mov.w	r8, #1
 8012508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801250a:	2b00      	cmp	r3, #0
 801250c:	f47f af6f 	bne.w	80123ee <_dtoa_r+0x7de>
 8012510:	2001      	movs	r0, #1
 8012512:	e774      	b.n	80123fe <_dtoa_r+0x7ee>
 8012514:	f04f 0800 	mov.w	r8, #0
 8012518:	e7f6      	b.n	8012508 <_dtoa_r+0x8f8>
 801251a:	4698      	mov	r8, r3
 801251c:	e7f4      	b.n	8012508 <_dtoa_r+0x8f8>
 801251e:	d082      	beq.n	8012426 <_dtoa_r+0x816>
 8012520:	9a05      	ldr	r2, [sp, #20]
 8012522:	331c      	adds	r3, #28
 8012524:	441a      	add	r2, r3
 8012526:	9205      	str	r2, [sp, #20]
 8012528:	9a06      	ldr	r2, [sp, #24]
 801252a:	441a      	add	r2, r3
 801252c:	441d      	add	r5, r3
 801252e:	9206      	str	r2, [sp, #24]
 8012530:	e779      	b.n	8012426 <_dtoa_r+0x816>
 8012532:	4603      	mov	r3, r0
 8012534:	e7f4      	b.n	8012520 <_dtoa_r+0x910>
 8012536:	9b04      	ldr	r3, [sp, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	dc37      	bgt.n	80125ac <_dtoa_r+0x99c>
 801253c:	9b07      	ldr	r3, [sp, #28]
 801253e:	2b02      	cmp	r3, #2
 8012540:	dd34      	ble.n	80125ac <_dtoa_r+0x99c>
 8012542:	9b04      	ldr	r3, [sp, #16]
 8012544:	9301      	str	r3, [sp, #4]
 8012546:	9b01      	ldr	r3, [sp, #4]
 8012548:	b963      	cbnz	r3, 8012564 <_dtoa_r+0x954>
 801254a:	4631      	mov	r1, r6
 801254c:	2205      	movs	r2, #5
 801254e:	4620      	mov	r0, r4
 8012550:	f000 fab2 	bl	8012ab8 <__multadd>
 8012554:	4601      	mov	r1, r0
 8012556:	4606      	mov	r6, r0
 8012558:	4650      	mov	r0, sl
 801255a:	f000 fd11 	bl	8012f80 <__mcmp>
 801255e:	2800      	cmp	r0, #0
 8012560:	f73f adbb 	bgt.w	80120da <_dtoa_r+0x4ca>
 8012564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012566:	9d00      	ldr	r5, [sp, #0]
 8012568:	ea6f 0b03 	mvn.w	fp, r3
 801256c:	f04f 0800 	mov.w	r8, #0
 8012570:	4631      	mov	r1, r6
 8012572:	4620      	mov	r0, r4
 8012574:	f000 fa7e 	bl	8012a74 <_Bfree>
 8012578:	2f00      	cmp	r7, #0
 801257a:	f43f aeab 	beq.w	80122d4 <_dtoa_r+0x6c4>
 801257e:	f1b8 0f00 	cmp.w	r8, #0
 8012582:	d005      	beq.n	8012590 <_dtoa_r+0x980>
 8012584:	45b8      	cmp	r8, r7
 8012586:	d003      	beq.n	8012590 <_dtoa_r+0x980>
 8012588:	4641      	mov	r1, r8
 801258a:	4620      	mov	r0, r4
 801258c:	f000 fa72 	bl	8012a74 <_Bfree>
 8012590:	4639      	mov	r1, r7
 8012592:	4620      	mov	r0, r4
 8012594:	f000 fa6e 	bl	8012a74 <_Bfree>
 8012598:	e69c      	b.n	80122d4 <_dtoa_r+0x6c4>
 801259a:	2600      	movs	r6, #0
 801259c:	4637      	mov	r7, r6
 801259e:	e7e1      	b.n	8012564 <_dtoa_r+0x954>
 80125a0:	46bb      	mov	fp, r7
 80125a2:	4637      	mov	r7, r6
 80125a4:	e599      	b.n	80120da <_dtoa_r+0x4ca>
 80125a6:	bf00      	nop
 80125a8:	40240000 	.word	0x40240000
 80125ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 80c8 	beq.w	8012744 <_dtoa_r+0xb34>
 80125b4:	9b04      	ldr	r3, [sp, #16]
 80125b6:	9301      	str	r3, [sp, #4]
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	dd05      	ble.n	80125c8 <_dtoa_r+0x9b8>
 80125bc:	4639      	mov	r1, r7
 80125be:	462a      	mov	r2, r5
 80125c0:	4620      	mov	r0, r4
 80125c2:	f000 fc71 	bl	8012ea8 <__lshift>
 80125c6:	4607      	mov	r7, r0
 80125c8:	f1b8 0f00 	cmp.w	r8, #0
 80125cc:	d05b      	beq.n	8012686 <_dtoa_r+0xa76>
 80125ce:	6879      	ldr	r1, [r7, #4]
 80125d0:	4620      	mov	r0, r4
 80125d2:	f000 fa0f 	bl	80129f4 <_Balloc>
 80125d6:	4605      	mov	r5, r0
 80125d8:	b928      	cbnz	r0, 80125e6 <_dtoa_r+0x9d6>
 80125da:	4b83      	ldr	r3, [pc, #524]	; (80127e8 <_dtoa_r+0xbd8>)
 80125dc:	4602      	mov	r2, r0
 80125de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80125e2:	f7ff bb2e 	b.w	8011c42 <_dtoa_r+0x32>
 80125e6:	693a      	ldr	r2, [r7, #16]
 80125e8:	3202      	adds	r2, #2
 80125ea:	0092      	lsls	r2, r2, #2
 80125ec:	f107 010c 	add.w	r1, r7, #12
 80125f0:	300c      	adds	r0, #12
 80125f2:	f7ff fa70 	bl	8011ad6 <memcpy>
 80125f6:	2201      	movs	r2, #1
 80125f8:	4629      	mov	r1, r5
 80125fa:	4620      	mov	r0, r4
 80125fc:	f000 fc54 	bl	8012ea8 <__lshift>
 8012600:	9b00      	ldr	r3, [sp, #0]
 8012602:	3301      	adds	r3, #1
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801260a:	4413      	add	r3, r2
 801260c:	9308      	str	r3, [sp, #32]
 801260e:	9b02      	ldr	r3, [sp, #8]
 8012610:	f003 0301 	and.w	r3, r3, #1
 8012614:	46b8      	mov	r8, r7
 8012616:	9306      	str	r3, [sp, #24]
 8012618:	4607      	mov	r7, r0
 801261a:	9b04      	ldr	r3, [sp, #16]
 801261c:	4631      	mov	r1, r6
 801261e:	3b01      	subs	r3, #1
 8012620:	4650      	mov	r0, sl
 8012622:	9301      	str	r3, [sp, #4]
 8012624:	f7ff fa6c 	bl	8011b00 <quorem>
 8012628:	4641      	mov	r1, r8
 801262a:	9002      	str	r0, [sp, #8]
 801262c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012630:	4650      	mov	r0, sl
 8012632:	f000 fca5 	bl	8012f80 <__mcmp>
 8012636:	463a      	mov	r2, r7
 8012638:	9005      	str	r0, [sp, #20]
 801263a:	4631      	mov	r1, r6
 801263c:	4620      	mov	r0, r4
 801263e:	f000 fcbb 	bl	8012fb8 <__mdiff>
 8012642:	68c2      	ldr	r2, [r0, #12]
 8012644:	4605      	mov	r5, r0
 8012646:	bb02      	cbnz	r2, 801268a <_dtoa_r+0xa7a>
 8012648:	4601      	mov	r1, r0
 801264a:	4650      	mov	r0, sl
 801264c:	f000 fc98 	bl	8012f80 <__mcmp>
 8012650:	4602      	mov	r2, r0
 8012652:	4629      	mov	r1, r5
 8012654:	4620      	mov	r0, r4
 8012656:	9209      	str	r2, [sp, #36]	; 0x24
 8012658:	f000 fa0c 	bl	8012a74 <_Bfree>
 801265c:	9b07      	ldr	r3, [sp, #28]
 801265e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012660:	9d04      	ldr	r5, [sp, #16]
 8012662:	ea43 0102 	orr.w	r1, r3, r2
 8012666:	9b06      	ldr	r3, [sp, #24]
 8012668:	4319      	orrs	r1, r3
 801266a:	d110      	bne.n	801268e <_dtoa_r+0xa7e>
 801266c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012670:	d029      	beq.n	80126c6 <_dtoa_r+0xab6>
 8012672:	9b05      	ldr	r3, [sp, #20]
 8012674:	2b00      	cmp	r3, #0
 8012676:	dd02      	ble.n	801267e <_dtoa_r+0xa6e>
 8012678:	9b02      	ldr	r3, [sp, #8]
 801267a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801267e:	9b01      	ldr	r3, [sp, #4]
 8012680:	f883 9000 	strb.w	r9, [r3]
 8012684:	e774      	b.n	8012570 <_dtoa_r+0x960>
 8012686:	4638      	mov	r0, r7
 8012688:	e7ba      	b.n	8012600 <_dtoa_r+0x9f0>
 801268a:	2201      	movs	r2, #1
 801268c:	e7e1      	b.n	8012652 <_dtoa_r+0xa42>
 801268e:	9b05      	ldr	r3, [sp, #20]
 8012690:	2b00      	cmp	r3, #0
 8012692:	db04      	blt.n	801269e <_dtoa_r+0xa8e>
 8012694:	9907      	ldr	r1, [sp, #28]
 8012696:	430b      	orrs	r3, r1
 8012698:	9906      	ldr	r1, [sp, #24]
 801269a:	430b      	orrs	r3, r1
 801269c:	d120      	bne.n	80126e0 <_dtoa_r+0xad0>
 801269e:	2a00      	cmp	r2, #0
 80126a0:	dded      	ble.n	801267e <_dtoa_r+0xa6e>
 80126a2:	4651      	mov	r1, sl
 80126a4:	2201      	movs	r2, #1
 80126a6:	4620      	mov	r0, r4
 80126a8:	f000 fbfe 	bl	8012ea8 <__lshift>
 80126ac:	4631      	mov	r1, r6
 80126ae:	4682      	mov	sl, r0
 80126b0:	f000 fc66 	bl	8012f80 <__mcmp>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	dc03      	bgt.n	80126c0 <_dtoa_r+0xab0>
 80126b8:	d1e1      	bne.n	801267e <_dtoa_r+0xa6e>
 80126ba:	f019 0f01 	tst.w	r9, #1
 80126be:	d0de      	beq.n	801267e <_dtoa_r+0xa6e>
 80126c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80126c4:	d1d8      	bne.n	8012678 <_dtoa_r+0xa68>
 80126c6:	9a01      	ldr	r2, [sp, #4]
 80126c8:	2339      	movs	r3, #57	; 0x39
 80126ca:	7013      	strb	r3, [r2, #0]
 80126cc:	462b      	mov	r3, r5
 80126ce:	461d      	mov	r5, r3
 80126d0:	3b01      	subs	r3, #1
 80126d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80126d6:	2a39      	cmp	r2, #57	; 0x39
 80126d8:	d06c      	beq.n	80127b4 <_dtoa_r+0xba4>
 80126da:	3201      	adds	r2, #1
 80126dc:	701a      	strb	r2, [r3, #0]
 80126de:	e747      	b.n	8012570 <_dtoa_r+0x960>
 80126e0:	2a00      	cmp	r2, #0
 80126e2:	dd07      	ble.n	80126f4 <_dtoa_r+0xae4>
 80126e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80126e8:	d0ed      	beq.n	80126c6 <_dtoa_r+0xab6>
 80126ea:	9a01      	ldr	r2, [sp, #4]
 80126ec:	f109 0301 	add.w	r3, r9, #1
 80126f0:	7013      	strb	r3, [r2, #0]
 80126f2:	e73d      	b.n	8012570 <_dtoa_r+0x960>
 80126f4:	9b04      	ldr	r3, [sp, #16]
 80126f6:	9a08      	ldr	r2, [sp, #32]
 80126f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d043      	beq.n	8012788 <_dtoa_r+0xb78>
 8012700:	4651      	mov	r1, sl
 8012702:	2300      	movs	r3, #0
 8012704:	220a      	movs	r2, #10
 8012706:	4620      	mov	r0, r4
 8012708:	f000 f9d6 	bl	8012ab8 <__multadd>
 801270c:	45b8      	cmp	r8, r7
 801270e:	4682      	mov	sl, r0
 8012710:	f04f 0300 	mov.w	r3, #0
 8012714:	f04f 020a 	mov.w	r2, #10
 8012718:	4641      	mov	r1, r8
 801271a:	4620      	mov	r0, r4
 801271c:	d107      	bne.n	801272e <_dtoa_r+0xb1e>
 801271e:	f000 f9cb 	bl	8012ab8 <__multadd>
 8012722:	4680      	mov	r8, r0
 8012724:	4607      	mov	r7, r0
 8012726:	9b04      	ldr	r3, [sp, #16]
 8012728:	3301      	adds	r3, #1
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	e775      	b.n	801261a <_dtoa_r+0xa0a>
 801272e:	f000 f9c3 	bl	8012ab8 <__multadd>
 8012732:	4639      	mov	r1, r7
 8012734:	4680      	mov	r8, r0
 8012736:	2300      	movs	r3, #0
 8012738:	220a      	movs	r2, #10
 801273a:	4620      	mov	r0, r4
 801273c:	f000 f9bc 	bl	8012ab8 <__multadd>
 8012740:	4607      	mov	r7, r0
 8012742:	e7f0      	b.n	8012726 <_dtoa_r+0xb16>
 8012744:	9b04      	ldr	r3, [sp, #16]
 8012746:	9301      	str	r3, [sp, #4]
 8012748:	9d00      	ldr	r5, [sp, #0]
 801274a:	4631      	mov	r1, r6
 801274c:	4650      	mov	r0, sl
 801274e:	f7ff f9d7 	bl	8011b00 <quorem>
 8012752:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012756:	9b00      	ldr	r3, [sp, #0]
 8012758:	f805 9b01 	strb.w	r9, [r5], #1
 801275c:	1aea      	subs	r2, r5, r3
 801275e:	9b01      	ldr	r3, [sp, #4]
 8012760:	4293      	cmp	r3, r2
 8012762:	dd07      	ble.n	8012774 <_dtoa_r+0xb64>
 8012764:	4651      	mov	r1, sl
 8012766:	2300      	movs	r3, #0
 8012768:	220a      	movs	r2, #10
 801276a:	4620      	mov	r0, r4
 801276c:	f000 f9a4 	bl	8012ab8 <__multadd>
 8012770:	4682      	mov	sl, r0
 8012772:	e7ea      	b.n	801274a <_dtoa_r+0xb3a>
 8012774:	9b01      	ldr	r3, [sp, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	bfc8      	it	gt
 801277a:	461d      	movgt	r5, r3
 801277c:	9b00      	ldr	r3, [sp, #0]
 801277e:	bfd8      	it	le
 8012780:	2501      	movle	r5, #1
 8012782:	441d      	add	r5, r3
 8012784:	f04f 0800 	mov.w	r8, #0
 8012788:	4651      	mov	r1, sl
 801278a:	2201      	movs	r2, #1
 801278c:	4620      	mov	r0, r4
 801278e:	f000 fb8b 	bl	8012ea8 <__lshift>
 8012792:	4631      	mov	r1, r6
 8012794:	4682      	mov	sl, r0
 8012796:	f000 fbf3 	bl	8012f80 <__mcmp>
 801279a:	2800      	cmp	r0, #0
 801279c:	dc96      	bgt.n	80126cc <_dtoa_r+0xabc>
 801279e:	d102      	bne.n	80127a6 <_dtoa_r+0xb96>
 80127a0:	f019 0f01 	tst.w	r9, #1
 80127a4:	d192      	bne.n	80126cc <_dtoa_r+0xabc>
 80127a6:	462b      	mov	r3, r5
 80127a8:	461d      	mov	r5, r3
 80127aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127ae:	2a30      	cmp	r2, #48	; 0x30
 80127b0:	d0fa      	beq.n	80127a8 <_dtoa_r+0xb98>
 80127b2:	e6dd      	b.n	8012570 <_dtoa_r+0x960>
 80127b4:	9a00      	ldr	r2, [sp, #0]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d189      	bne.n	80126ce <_dtoa_r+0xabe>
 80127ba:	f10b 0b01 	add.w	fp, fp, #1
 80127be:	2331      	movs	r3, #49	; 0x31
 80127c0:	e796      	b.n	80126f0 <_dtoa_r+0xae0>
 80127c2:	4b0a      	ldr	r3, [pc, #40]	; (80127ec <_dtoa_r+0xbdc>)
 80127c4:	f7ff ba99 	b.w	8011cfa <_dtoa_r+0xea>
 80127c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f47f aa6d 	bne.w	8011caa <_dtoa_r+0x9a>
 80127d0:	4b07      	ldr	r3, [pc, #28]	; (80127f0 <_dtoa_r+0xbe0>)
 80127d2:	f7ff ba92 	b.w	8011cfa <_dtoa_r+0xea>
 80127d6:	9b01      	ldr	r3, [sp, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	dcb5      	bgt.n	8012748 <_dtoa_r+0xb38>
 80127dc:	9b07      	ldr	r3, [sp, #28]
 80127de:	2b02      	cmp	r3, #2
 80127e0:	f73f aeb1 	bgt.w	8012546 <_dtoa_r+0x936>
 80127e4:	e7b0      	b.n	8012748 <_dtoa_r+0xb38>
 80127e6:	bf00      	nop
 80127e8:	08017fd5 	.word	0x08017fd5
 80127ec:	08017f30 	.word	0x08017f30
 80127f0:	08017f59 	.word	0x08017f59

080127f4 <_free_r>:
 80127f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80127f6:	2900      	cmp	r1, #0
 80127f8:	d044      	beq.n	8012884 <_free_r+0x90>
 80127fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127fe:	9001      	str	r0, [sp, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	f1a1 0404 	sub.w	r4, r1, #4
 8012806:	bfb8      	it	lt
 8012808:	18e4      	addlt	r4, r4, r3
 801280a:	f000 f8e7 	bl	80129dc <__malloc_lock>
 801280e:	4a1e      	ldr	r2, [pc, #120]	; (8012888 <_free_r+0x94>)
 8012810:	9801      	ldr	r0, [sp, #4]
 8012812:	6813      	ldr	r3, [r2, #0]
 8012814:	b933      	cbnz	r3, 8012824 <_free_r+0x30>
 8012816:	6063      	str	r3, [r4, #4]
 8012818:	6014      	str	r4, [r2, #0]
 801281a:	b003      	add	sp, #12
 801281c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012820:	f000 b8e2 	b.w	80129e8 <__malloc_unlock>
 8012824:	42a3      	cmp	r3, r4
 8012826:	d908      	bls.n	801283a <_free_r+0x46>
 8012828:	6825      	ldr	r5, [r4, #0]
 801282a:	1961      	adds	r1, r4, r5
 801282c:	428b      	cmp	r3, r1
 801282e:	bf01      	itttt	eq
 8012830:	6819      	ldreq	r1, [r3, #0]
 8012832:	685b      	ldreq	r3, [r3, #4]
 8012834:	1949      	addeq	r1, r1, r5
 8012836:	6021      	streq	r1, [r4, #0]
 8012838:	e7ed      	b.n	8012816 <_free_r+0x22>
 801283a:	461a      	mov	r2, r3
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	b10b      	cbz	r3, 8012844 <_free_r+0x50>
 8012840:	42a3      	cmp	r3, r4
 8012842:	d9fa      	bls.n	801283a <_free_r+0x46>
 8012844:	6811      	ldr	r1, [r2, #0]
 8012846:	1855      	adds	r5, r2, r1
 8012848:	42a5      	cmp	r5, r4
 801284a:	d10b      	bne.n	8012864 <_free_r+0x70>
 801284c:	6824      	ldr	r4, [r4, #0]
 801284e:	4421      	add	r1, r4
 8012850:	1854      	adds	r4, r2, r1
 8012852:	42a3      	cmp	r3, r4
 8012854:	6011      	str	r1, [r2, #0]
 8012856:	d1e0      	bne.n	801281a <_free_r+0x26>
 8012858:	681c      	ldr	r4, [r3, #0]
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	6053      	str	r3, [r2, #4]
 801285e:	440c      	add	r4, r1
 8012860:	6014      	str	r4, [r2, #0]
 8012862:	e7da      	b.n	801281a <_free_r+0x26>
 8012864:	d902      	bls.n	801286c <_free_r+0x78>
 8012866:	230c      	movs	r3, #12
 8012868:	6003      	str	r3, [r0, #0]
 801286a:	e7d6      	b.n	801281a <_free_r+0x26>
 801286c:	6825      	ldr	r5, [r4, #0]
 801286e:	1961      	adds	r1, r4, r5
 8012870:	428b      	cmp	r3, r1
 8012872:	bf04      	itt	eq
 8012874:	6819      	ldreq	r1, [r3, #0]
 8012876:	685b      	ldreq	r3, [r3, #4]
 8012878:	6063      	str	r3, [r4, #4]
 801287a:	bf04      	itt	eq
 801287c:	1949      	addeq	r1, r1, r5
 801287e:	6021      	streq	r1, [r4, #0]
 8012880:	6054      	str	r4, [r2, #4]
 8012882:	e7ca      	b.n	801281a <_free_r+0x26>
 8012884:	b003      	add	sp, #12
 8012886:	bd30      	pop	{r4, r5, pc}
 8012888:	200023c0 	.word	0x200023c0

0801288c <malloc>:
 801288c:	4b02      	ldr	r3, [pc, #8]	; (8012898 <malloc+0xc>)
 801288e:	4601      	mov	r1, r0
 8012890:	6818      	ldr	r0, [r3, #0]
 8012892:	f000 b823 	b.w	80128dc <_malloc_r>
 8012896:	bf00      	nop
 8012898:	2000026c 	.word	0x2000026c

0801289c <sbrk_aligned>:
 801289c:	b570      	push	{r4, r5, r6, lr}
 801289e:	4e0e      	ldr	r6, [pc, #56]	; (80128d8 <sbrk_aligned+0x3c>)
 80128a0:	460c      	mov	r4, r1
 80128a2:	6831      	ldr	r1, [r6, #0]
 80128a4:	4605      	mov	r5, r0
 80128a6:	b911      	cbnz	r1, 80128ae <sbrk_aligned+0x12>
 80128a8:	f001 fe1a 	bl	80144e0 <_sbrk_r>
 80128ac:	6030      	str	r0, [r6, #0]
 80128ae:	4621      	mov	r1, r4
 80128b0:	4628      	mov	r0, r5
 80128b2:	f001 fe15 	bl	80144e0 <_sbrk_r>
 80128b6:	1c43      	adds	r3, r0, #1
 80128b8:	d00a      	beq.n	80128d0 <sbrk_aligned+0x34>
 80128ba:	1cc4      	adds	r4, r0, #3
 80128bc:	f024 0403 	bic.w	r4, r4, #3
 80128c0:	42a0      	cmp	r0, r4
 80128c2:	d007      	beq.n	80128d4 <sbrk_aligned+0x38>
 80128c4:	1a21      	subs	r1, r4, r0
 80128c6:	4628      	mov	r0, r5
 80128c8:	f001 fe0a 	bl	80144e0 <_sbrk_r>
 80128cc:	3001      	adds	r0, #1
 80128ce:	d101      	bne.n	80128d4 <sbrk_aligned+0x38>
 80128d0:	f04f 34ff 	mov.w	r4, #4294967295
 80128d4:	4620      	mov	r0, r4
 80128d6:	bd70      	pop	{r4, r5, r6, pc}
 80128d8:	200023c4 	.word	0x200023c4

080128dc <_malloc_r>:
 80128dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128e0:	1ccd      	adds	r5, r1, #3
 80128e2:	f025 0503 	bic.w	r5, r5, #3
 80128e6:	3508      	adds	r5, #8
 80128e8:	2d0c      	cmp	r5, #12
 80128ea:	bf38      	it	cc
 80128ec:	250c      	movcc	r5, #12
 80128ee:	2d00      	cmp	r5, #0
 80128f0:	4607      	mov	r7, r0
 80128f2:	db01      	blt.n	80128f8 <_malloc_r+0x1c>
 80128f4:	42a9      	cmp	r1, r5
 80128f6:	d905      	bls.n	8012904 <_malloc_r+0x28>
 80128f8:	230c      	movs	r3, #12
 80128fa:	603b      	str	r3, [r7, #0]
 80128fc:	2600      	movs	r6, #0
 80128fe:	4630      	mov	r0, r6
 8012900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80129d8 <_malloc_r+0xfc>
 8012908:	f000 f868 	bl	80129dc <__malloc_lock>
 801290c:	f8d8 3000 	ldr.w	r3, [r8]
 8012910:	461c      	mov	r4, r3
 8012912:	bb5c      	cbnz	r4, 801296c <_malloc_r+0x90>
 8012914:	4629      	mov	r1, r5
 8012916:	4638      	mov	r0, r7
 8012918:	f7ff ffc0 	bl	801289c <sbrk_aligned>
 801291c:	1c43      	adds	r3, r0, #1
 801291e:	4604      	mov	r4, r0
 8012920:	d155      	bne.n	80129ce <_malloc_r+0xf2>
 8012922:	f8d8 4000 	ldr.w	r4, [r8]
 8012926:	4626      	mov	r6, r4
 8012928:	2e00      	cmp	r6, #0
 801292a:	d145      	bne.n	80129b8 <_malloc_r+0xdc>
 801292c:	2c00      	cmp	r4, #0
 801292e:	d048      	beq.n	80129c2 <_malloc_r+0xe6>
 8012930:	6823      	ldr	r3, [r4, #0]
 8012932:	4631      	mov	r1, r6
 8012934:	4638      	mov	r0, r7
 8012936:	eb04 0903 	add.w	r9, r4, r3
 801293a:	f001 fdd1 	bl	80144e0 <_sbrk_r>
 801293e:	4581      	cmp	r9, r0
 8012940:	d13f      	bne.n	80129c2 <_malloc_r+0xe6>
 8012942:	6821      	ldr	r1, [r4, #0]
 8012944:	1a6d      	subs	r5, r5, r1
 8012946:	4629      	mov	r1, r5
 8012948:	4638      	mov	r0, r7
 801294a:	f7ff ffa7 	bl	801289c <sbrk_aligned>
 801294e:	3001      	adds	r0, #1
 8012950:	d037      	beq.n	80129c2 <_malloc_r+0xe6>
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	442b      	add	r3, r5
 8012956:	6023      	str	r3, [r4, #0]
 8012958:	f8d8 3000 	ldr.w	r3, [r8]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d038      	beq.n	80129d2 <_malloc_r+0xf6>
 8012960:	685a      	ldr	r2, [r3, #4]
 8012962:	42a2      	cmp	r2, r4
 8012964:	d12b      	bne.n	80129be <_malloc_r+0xe2>
 8012966:	2200      	movs	r2, #0
 8012968:	605a      	str	r2, [r3, #4]
 801296a:	e00f      	b.n	801298c <_malloc_r+0xb0>
 801296c:	6822      	ldr	r2, [r4, #0]
 801296e:	1b52      	subs	r2, r2, r5
 8012970:	d41f      	bmi.n	80129b2 <_malloc_r+0xd6>
 8012972:	2a0b      	cmp	r2, #11
 8012974:	d917      	bls.n	80129a6 <_malloc_r+0xca>
 8012976:	1961      	adds	r1, r4, r5
 8012978:	42a3      	cmp	r3, r4
 801297a:	6025      	str	r5, [r4, #0]
 801297c:	bf18      	it	ne
 801297e:	6059      	strne	r1, [r3, #4]
 8012980:	6863      	ldr	r3, [r4, #4]
 8012982:	bf08      	it	eq
 8012984:	f8c8 1000 	streq.w	r1, [r8]
 8012988:	5162      	str	r2, [r4, r5]
 801298a:	604b      	str	r3, [r1, #4]
 801298c:	4638      	mov	r0, r7
 801298e:	f104 060b 	add.w	r6, r4, #11
 8012992:	f000 f829 	bl	80129e8 <__malloc_unlock>
 8012996:	f026 0607 	bic.w	r6, r6, #7
 801299a:	1d23      	adds	r3, r4, #4
 801299c:	1af2      	subs	r2, r6, r3
 801299e:	d0ae      	beq.n	80128fe <_malloc_r+0x22>
 80129a0:	1b9b      	subs	r3, r3, r6
 80129a2:	50a3      	str	r3, [r4, r2]
 80129a4:	e7ab      	b.n	80128fe <_malloc_r+0x22>
 80129a6:	42a3      	cmp	r3, r4
 80129a8:	6862      	ldr	r2, [r4, #4]
 80129aa:	d1dd      	bne.n	8012968 <_malloc_r+0x8c>
 80129ac:	f8c8 2000 	str.w	r2, [r8]
 80129b0:	e7ec      	b.n	801298c <_malloc_r+0xb0>
 80129b2:	4623      	mov	r3, r4
 80129b4:	6864      	ldr	r4, [r4, #4]
 80129b6:	e7ac      	b.n	8012912 <_malloc_r+0x36>
 80129b8:	4634      	mov	r4, r6
 80129ba:	6876      	ldr	r6, [r6, #4]
 80129bc:	e7b4      	b.n	8012928 <_malloc_r+0x4c>
 80129be:	4613      	mov	r3, r2
 80129c0:	e7cc      	b.n	801295c <_malloc_r+0x80>
 80129c2:	230c      	movs	r3, #12
 80129c4:	603b      	str	r3, [r7, #0]
 80129c6:	4638      	mov	r0, r7
 80129c8:	f000 f80e 	bl	80129e8 <__malloc_unlock>
 80129cc:	e797      	b.n	80128fe <_malloc_r+0x22>
 80129ce:	6025      	str	r5, [r4, #0]
 80129d0:	e7dc      	b.n	801298c <_malloc_r+0xb0>
 80129d2:	605b      	str	r3, [r3, #4]
 80129d4:	deff      	udf	#255	; 0xff
 80129d6:	bf00      	nop
 80129d8:	200023c0 	.word	0x200023c0

080129dc <__malloc_lock>:
 80129dc:	4801      	ldr	r0, [pc, #4]	; (80129e4 <__malloc_lock+0x8>)
 80129de:	f7ff b878 	b.w	8011ad2 <__retarget_lock_acquire_recursive>
 80129e2:	bf00      	nop
 80129e4:	200023bc 	.word	0x200023bc

080129e8 <__malloc_unlock>:
 80129e8:	4801      	ldr	r0, [pc, #4]	; (80129f0 <__malloc_unlock+0x8>)
 80129ea:	f7ff b873 	b.w	8011ad4 <__retarget_lock_release_recursive>
 80129ee:	bf00      	nop
 80129f0:	200023bc 	.word	0x200023bc

080129f4 <_Balloc>:
 80129f4:	b570      	push	{r4, r5, r6, lr}
 80129f6:	69c6      	ldr	r6, [r0, #28]
 80129f8:	4604      	mov	r4, r0
 80129fa:	460d      	mov	r5, r1
 80129fc:	b976      	cbnz	r6, 8012a1c <_Balloc+0x28>
 80129fe:	2010      	movs	r0, #16
 8012a00:	f7ff ff44 	bl	801288c <malloc>
 8012a04:	4602      	mov	r2, r0
 8012a06:	61e0      	str	r0, [r4, #28]
 8012a08:	b920      	cbnz	r0, 8012a14 <_Balloc+0x20>
 8012a0a:	4b18      	ldr	r3, [pc, #96]	; (8012a6c <_Balloc+0x78>)
 8012a0c:	4818      	ldr	r0, [pc, #96]	; (8012a70 <_Balloc+0x7c>)
 8012a0e:	216b      	movs	r1, #107	; 0x6b
 8012a10:	f001 fd7e 	bl	8014510 <__assert_func>
 8012a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a18:	6006      	str	r6, [r0, #0]
 8012a1a:	60c6      	str	r6, [r0, #12]
 8012a1c:	69e6      	ldr	r6, [r4, #28]
 8012a1e:	68f3      	ldr	r3, [r6, #12]
 8012a20:	b183      	cbz	r3, 8012a44 <_Balloc+0x50>
 8012a22:	69e3      	ldr	r3, [r4, #28]
 8012a24:	68db      	ldr	r3, [r3, #12]
 8012a26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a2a:	b9b8      	cbnz	r0, 8012a5c <_Balloc+0x68>
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	fa01 f605 	lsl.w	r6, r1, r5
 8012a32:	1d72      	adds	r2, r6, #5
 8012a34:	0092      	lsls	r2, r2, #2
 8012a36:	4620      	mov	r0, r4
 8012a38:	f001 fd88 	bl	801454c <_calloc_r>
 8012a3c:	b160      	cbz	r0, 8012a58 <_Balloc+0x64>
 8012a3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a42:	e00e      	b.n	8012a62 <_Balloc+0x6e>
 8012a44:	2221      	movs	r2, #33	; 0x21
 8012a46:	2104      	movs	r1, #4
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f001 fd7f 	bl	801454c <_calloc_r>
 8012a4e:	69e3      	ldr	r3, [r4, #28]
 8012a50:	60f0      	str	r0, [r6, #12]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d1e4      	bne.n	8012a22 <_Balloc+0x2e>
 8012a58:	2000      	movs	r0, #0
 8012a5a:	bd70      	pop	{r4, r5, r6, pc}
 8012a5c:	6802      	ldr	r2, [r0, #0]
 8012a5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a62:	2300      	movs	r3, #0
 8012a64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a68:	e7f7      	b.n	8012a5a <_Balloc+0x66>
 8012a6a:	bf00      	nop
 8012a6c:	08017f66 	.word	0x08017f66
 8012a70:	08017fe6 	.word	0x08017fe6

08012a74 <_Bfree>:
 8012a74:	b570      	push	{r4, r5, r6, lr}
 8012a76:	69c6      	ldr	r6, [r0, #28]
 8012a78:	4605      	mov	r5, r0
 8012a7a:	460c      	mov	r4, r1
 8012a7c:	b976      	cbnz	r6, 8012a9c <_Bfree+0x28>
 8012a7e:	2010      	movs	r0, #16
 8012a80:	f7ff ff04 	bl	801288c <malloc>
 8012a84:	4602      	mov	r2, r0
 8012a86:	61e8      	str	r0, [r5, #28]
 8012a88:	b920      	cbnz	r0, 8012a94 <_Bfree+0x20>
 8012a8a:	4b09      	ldr	r3, [pc, #36]	; (8012ab0 <_Bfree+0x3c>)
 8012a8c:	4809      	ldr	r0, [pc, #36]	; (8012ab4 <_Bfree+0x40>)
 8012a8e:	218f      	movs	r1, #143	; 0x8f
 8012a90:	f001 fd3e 	bl	8014510 <__assert_func>
 8012a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a98:	6006      	str	r6, [r0, #0]
 8012a9a:	60c6      	str	r6, [r0, #12]
 8012a9c:	b13c      	cbz	r4, 8012aae <_Bfree+0x3a>
 8012a9e:	69eb      	ldr	r3, [r5, #28]
 8012aa0:	6862      	ldr	r2, [r4, #4]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012aa8:	6021      	str	r1, [r4, #0]
 8012aaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012aae:	bd70      	pop	{r4, r5, r6, pc}
 8012ab0:	08017f66 	.word	0x08017f66
 8012ab4:	08017fe6 	.word	0x08017fe6

08012ab8 <__multadd>:
 8012ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012abc:	690d      	ldr	r5, [r1, #16]
 8012abe:	4607      	mov	r7, r0
 8012ac0:	460c      	mov	r4, r1
 8012ac2:	461e      	mov	r6, r3
 8012ac4:	f101 0c14 	add.w	ip, r1, #20
 8012ac8:	2000      	movs	r0, #0
 8012aca:	f8dc 3000 	ldr.w	r3, [ip]
 8012ace:	b299      	uxth	r1, r3
 8012ad0:	fb02 6101 	mla	r1, r2, r1, r6
 8012ad4:	0c1e      	lsrs	r6, r3, #16
 8012ad6:	0c0b      	lsrs	r3, r1, #16
 8012ad8:	fb02 3306 	mla	r3, r2, r6, r3
 8012adc:	b289      	uxth	r1, r1
 8012ade:	3001      	adds	r0, #1
 8012ae0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012ae4:	4285      	cmp	r5, r0
 8012ae6:	f84c 1b04 	str.w	r1, [ip], #4
 8012aea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012aee:	dcec      	bgt.n	8012aca <__multadd+0x12>
 8012af0:	b30e      	cbz	r6, 8012b36 <__multadd+0x7e>
 8012af2:	68a3      	ldr	r3, [r4, #8]
 8012af4:	42ab      	cmp	r3, r5
 8012af6:	dc19      	bgt.n	8012b2c <__multadd+0x74>
 8012af8:	6861      	ldr	r1, [r4, #4]
 8012afa:	4638      	mov	r0, r7
 8012afc:	3101      	adds	r1, #1
 8012afe:	f7ff ff79 	bl	80129f4 <_Balloc>
 8012b02:	4680      	mov	r8, r0
 8012b04:	b928      	cbnz	r0, 8012b12 <__multadd+0x5a>
 8012b06:	4602      	mov	r2, r0
 8012b08:	4b0c      	ldr	r3, [pc, #48]	; (8012b3c <__multadd+0x84>)
 8012b0a:	480d      	ldr	r0, [pc, #52]	; (8012b40 <__multadd+0x88>)
 8012b0c:	21ba      	movs	r1, #186	; 0xba
 8012b0e:	f001 fcff 	bl	8014510 <__assert_func>
 8012b12:	6922      	ldr	r2, [r4, #16]
 8012b14:	3202      	adds	r2, #2
 8012b16:	f104 010c 	add.w	r1, r4, #12
 8012b1a:	0092      	lsls	r2, r2, #2
 8012b1c:	300c      	adds	r0, #12
 8012b1e:	f7fe ffda 	bl	8011ad6 <memcpy>
 8012b22:	4621      	mov	r1, r4
 8012b24:	4638      	mov	r0, r7
 8012b26:	f7ff ffa5 	bl	8012a74 <_Bfree>
 8012b2a:	4644      	mov	r4, r8
 8012b2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012b30:	3501      	adds	r5, #1
 8012b32:	615e      	str	r6, [r3, #20]
 8012b34:	6125      	str	r5, [r4, #16]
 8012b36:	4620      	mov	r0, r4
 8012b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b3c:	08017fd5 	.word	0x08017fd5
 8012b40:	08017fe6 	.word	0x08017fe6

08012b44 <__s2b>:
 8012b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b48:	460c      	mov	r4, r1
 8012b4a:	4615      	mov	r5, r2
 8012b4c:	461f      	mov	r7, r3
 8012b4e:	2209      	movs	r2, #9
 8012b50:	3308      	adds	r3, #8
 8012b52:	4606      	mov	r6, r0
 8012b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b58:	2100      	movs	r1, #0
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	db09      	blt.n	8012b74 <__s2b+0x30>
 8012b60:	4630      	mov	r0, r6
 8012b62:	f7ff ff47 	bl	80129f4 <_Balloc>
 8012b66:	b940      	cbnz	r0, 8012b7a <__s2b+0x36>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	4b19      	ldr	r3, [pc, #100]	; (8012bd0 <__s2b+0x8c>)
 8012b6c:	4819      	ldr	r0, [pc, #100]	; (8012bd4 <__s2b+0x90>)
 8012b6e:	21d3      	movs	r1, #211	; 0xd3
 8012b70:	f001 fcce 	bl	8014510 <__assert_func>
 8012b74:	0052      	lsls	r2, r2, #1
 8012b76:	3101      	adds	r1, #1
 8012b78:	e7f0      	b.n	8012b5c <__s2b+0x18>
 8012b7a:	9b08      	ldr	r3, [sp, #32]
 8012b7c:	6143      	str	r3, [r0, #20]
 8012b7e:	2d09      	cmp	r5, #9
 8012b80:	f04f 0301 	mov.w	r3, #1
 8012b84:	6103      	str	r3, [r0, #16]
 8012b86:	dd16      	ble.n	8012bb6 <__s2b+0x72>
 8012b88:	f104 0909 	add.w	r9, r4, #9
 8012b8c:	46c8      	mov	r8, r9
 8012b8e:	442c      	add	r4, r5
 8012b90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012b94:	4601      	mov	r1, r0
 8012b96:	3b30      	subs	r3, #48	; 0x30
 8012b98:	220a      	movs	r2, #10
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f7ff ff8c 	bl	8012ab8 <__multadd>
 8012ba0:	45a0      	cmp	r8, r4
 8012ba2:	d1f5      	bne.n	8012b90 <__s2b+0x4c>
 8012ba4:	f1a5 0408 	sub.w	r4, r5, #8
 8012ba8:	444c      	add	r4, r9
 8012baa:	1b2d      	subs	r5, r5, r4
 8012bac:	1963      	adds	r3, r4, r5
 8012bae:	42bb      	cmp	r3, r7
 8012bb0:	db04      	blt.n	8012bbc <__s2b+0x78>
 8012bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb6:	340a      	adds	r4, #10
 8012bb8:	2509      	movs	r5, #9
 8012bba:	e7f6      	b.n	8012baa <__s2b+0x66>
 8012bbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012bc0:	4601      	mov	r1, r0
 8012bc2:	3b30      	subs	r3, #48	; 0x30
 8012bc4:	220a      	movs	r2, #10
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f7ff ff76 	bl	8012ab8 <__multadd>
 8012bcc:	e7ee      	b.n	8012bac <__s2b+0x68>
 8012bce:	bf00      	nop
 8012bd0:	08017fd5 	.word	0x08017fd5
 8012bd4:	08017fe6 	.word	0x08017fe6

08012bd8 <__hi0bits>:
 8012bd8:	0c03      	lsrs	r3, r0, #16
 8012bda:	041b      	lsls	r3, r3, #16
 8012bdc:	b9d3      	cbnz	r3, 8012c14 <__hi0bits+0x3c>
 8012bde:	0400      	lsls	r0, r0, #16
 8012be0:	2310      	movs	r3, #16
 8012be2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012be6:	bf04      	itt	eq
 8012be8:	0200      	lsleq	r0, r0, #8
 8012bea:	3308      	addeq	r3, #8
 8012bec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012bf0:	bf04      	itt	eq
 8012bf2:	0100      	lsleq	r0, r0, #4
 8012bf4:	3304      	addeq	r3, #4
 8012bf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012bfa:	bf04      	itt	eq
 8012bfc:	0080      	lsleq	r0, r0, #2
 8012bfe:	3302      	addeq	r3, #2
 8012c00:	2800      	cmp	r0, #0
 8012c02:	db05      	blt.n	8012c10 <__hi0bits+0x38>
 8012c04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012c08:	f103 0301 	add.w	r3, r3, #1
 8012c0c:	bf08      	it	eq
 8012c0e:	2320      	moveq	r3, #32
 8012c10:	4618      	mov	r0, r3
 8012c12:	4770      	bx	lr
 8012c14:	2300      	movs	r3, #0
 8012c16:	e7e4      	b.n	8012be2 <__hi0bits+0xa>

08012c18 <__lo0bits>:
 8012c18:	6803      	ldr	r3, [r0, #0]
 8012c1a:	f013 0207 	ands.w	r2, r3, #7
 8012c1e:	d00c      	beq.n	8012c3a <__lo0bits+0x22>
 8012c20:	07d9      	lsls	r1, r3, #31
 8012c22:	d422      	bmi.n	8012c6a <__lo0bits+0x52>
 8012c24:	079a      	lsls	r2, r3, #30
 8012c26:	bf49      	itett	mi
 8012c28:	085b      	lsrmi	r3, r3, #1
 8012c2a:	089b      	lsrpl	r3, r3, #2
 8012c2c:	6003      	strmi	r3, [r0, #0]
 8012c2e:	2201      	movmi	r2, #1
 8012c30:	bf5c      	itt	pl
 8012c32:	6003      	strpl	r3, [r0, #0]
 8012c34:	2202      	movpl	r2, #2
 8012c36:	4610      	mov	r0, r2
 8012c38:	4770      	bx	lr
 8012c3a:	b299      	uxth	r1, r3
 8012c3c:	b909      	cbnz	r1, 8012c42 <__lo0bits+0x2a>
 8012c3e:	0c1b      	lsrs	r3, r3, #16
 8012c40:	2210      	movs	r2, #16
 8012c42:	b2d9      	uxtb	r1, r3
 8012c44:	b909      	cbnz	r1, 8012c4a <__lo0bits+0x32>
 8012c46:	3208      	adds	r2, #8
 8012c48:	0a1b      	lsrs	r3, r3, #8
 8012c4a:	0719      	lsls	r1, r3, #28
 8012c4c:	bf04      	itt	eq
 8012c4e:	091b      	lsreq	r3, r3, #4
 8012c50:	3204      	addeq	r2, #4
 8012c52:	0799      	lsls	r1, r3, #30
 8012c54:	bf04      	itt	eq
 8012c56:	089b      	lsreq	r3, r3, #2
 8012c58:	3202      	addeq	r2, #2
 8012c5a:	07d9      	lsls	r1, r3, #31
 8012c5c:	d403      	bmi.n	8012c66 <__lo0bits+0x4e>
 8012c5e:	085b      	lsrs	r3, r3, #1
 8012c60:	f102 0201 	add.w	r2, r2, #1
 8012c64:	d003      	beq.n	8012c6e <__lo0bits+0x56>
 8012c66:	6003      	str	r3, [r0, #0]
 8012c68:	e7e5      	b.n	8012c36 <__lo0bits+0x1e>
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	e7e3      	b.n	8012c36 <__lo0bits+0x1e>
 8012c6e:	2220      	movs	r2, #32
 8012c70:	e7e1      	b.n	8012c36 <__lo0bits+0x1e>
	...

08012c74 <__i2b>:
 8012c74:	b510      	push	{r4, lr}
 8012c76:	460c      	mov	r4, r1
 8012c78:	2101      	movs	r1, #1
 8012c7a:	f7ff febb 	bl	80129f4 <_Balloc>
 8012c7e:	4602      	mov	r2, r0
 8012c80:	b928      	cbnz	r0, 8012c8e <__i2b+0x1a>
 8012c82:	4b05      	ldr	r3, [pc, #20]	; (8012c98 <__i2b+0x24>)
 8012c84:	4805      	ldr	r0, [pc, #20]	; (8012c9c <__i2b+0x28>)
 8012c86:	f240 1145 	movw	r1, #325	; 0x145
 8012c8a:	f001 fc41 	bl	8014510 <__assert_func>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	6144      	str	r4, [r0, #20]
 8012c92:	6103      	str	r3, [r0, #16]
 8012c94:	bd10      	pop	{r4, pc}
 8012c96:	bf00      	nop
 8012c98:	08017fd5 	.word	0x08017fd5
 8012c9c:	08017fe6 	.word	0x08017fe6

08012ca0 <__multiply>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	4691      	mov	r9, r2
 8012ca6:	690a      	ldr	r2, [r1, #16]
 8012ca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	bfb8      	it	lt
 8012cb0:	460b      	movlt	r3, r1
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	bfbc      	itt	lt
 8012cb6:	464c      	movlt	r4, r9
 8012cb8:	4699      	movlt	r9, r3
 8012cba:	6927      	ldr	r7, [r4, #16]
 8012cbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012cc0:	68a3      	ldr	r3, [r4, #8]
 8012cc2:	6861      	ldr	r1, [r4, #4]
 8012cc4:	eb07 060a 	add.w	r6, r7, sl
 8012cc8:	42b3      	cmp	r3, r6
 8012cca:	b085      	sub	sp, #20
 8012ccc:	bfb8      	it	lt
 8012cce:	3101      	addlt	r1, #1
 8012cd0:	f7ff fe90 	bl	80129f4 <_Balloc>
 8012cd4:	b930      	cbnz	r0, 8012ce4 <__multiply+0x44>
 8012cd6:	4602      	mov	r2, r0
 8012cd8:	4b44      	ldr	r3, [pc, #272]	; (8012dec <__multiply+0x14c>)
 8012cda:	4845      	ldr	r0, [pc, #276]	; (8012df0 <__multiply+0x150>)
 8012cdc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012ce0:	f001 fc16 	bl	8014510 <__assert_func>
 8012ce4:	f100 0514 	add.w	r5, r0, #20
 8012ce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012cec:	462b      	mov	r3, r5
 8012cee:	2200      	movs	r2, #0
 8012cf0:	4543      	cmp	r3, r8
 8012cf2:	d321      	bcc.n	8012d38 <__multiply+0x98>
 8012cf4:	f104 0314 	add.w	r3, r4, #20
 8012cf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012cfc:	f109 0314 	add.w	r3, r9, #20
 8012d00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012d04:	9202      	str	r2, [sp, #8]
 8012d06:	1b3a      	subs	r2, r7, r4
 8012d08:	3a15      	subs	r2, #21
 8012d0a:	f022 0203 	bic.w	r2, r2, #3
 8012d0e:	3204      	adds	r2, #4
 8012d10:	f104 0115 	add.w	r1, r4, #21
 8012d14:	428f      	cmp	r7, r1
 8012d16:	bf38      	it	cc
 8012d18:	2204      	movcc	r2, #4
 8012d1a:	9201      	str	r2, [sp, #4]
 8012d1c:	9a02      	ldr	r2, [sp, #8]
 8012d1e:	9303      	str	r3, [sp, #12]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d80c      	bhi.n	8012d3e <__multiply+0x9e>
 8012d24:	2e00      	cmp	r6, #0
 8012d26:	dd03      	ble.n	8012d30 <__multiply+0x90>
 8012d28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d05b      	beq.n	8012de8 <__multiply+0x148>
 8012d30:	6106      	str	r6, [r0, #16]
 8012d32:	b005      	add	sp, #20
 8012d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d38:	f843 2b04 	str.w	r2, [r3], #4
 8012d3c:	e7d8      	b.n	8012cf0 <__multiply+0x50>
 8012d3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8012d42:	f1ba 0f00 	cmp.w	sl, #0
 8012d46:	d024      	beq.n	8012d92 <__multiply+0xf2>
 8012d48:	f104 0e14 	add.w	lr, r4, #20
 8012d4c:	46a9      	mov	r9, r5
 8012d4e:	f04f 0c00 	mov.w	ip, #0
 8012d52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012d56:	f8d9 1000 	ldr.w	r1, [r9]
 8012d5a:	fa1f fb82 	uxth.w	fp, r2
 8012d5e:	b289      	uxth	r1, r1
 8012d60:	fb0a 110b 	mla	r1, sl, fp, r1
 8012d64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012d68:	f8d9 2000 	ldr.w	r2, [r9]
 8012d6c:	4461      	add	r1, ip
 8012d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d72:	fb0a c20b 	mla	r2, sl, fp, ip
 8012d76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012d7a:	b289      	uxth	r1, r1
 8012d7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012d80:	4577      	cmp	r7, lr
 8012d82:	f849 1b04 	str.w	r1, [r9], #4
 8012d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012d8a:	d8e2      	bhi.n	8012d52 <__multiply+0xb2>
 8012d8c:	9a01      	ldr	r2, [sp, #4]
 8012d8e:	f845 c002 	str.w	ip, [r5, r2]
 8012d92:	9a03      	ldr	r2, [sp, #12]
 8012d94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d98:	3304      	adds	r3, #4
 8012d9a:	f1b9 0f00 	cmp.w	r9, #0
 8012d9e:	d021      	beq.n	8012de4 <__multiply+0x144>
 8012da0:	6829      	ldr	r1, [r5, #0]
 8012da2:	f104 0c14 	add.w	ip, r4, #20
 8012da6:	46ae      	mov	lr, r5
 8012da8:	f04f 0a00 	mov.w	sl, #0
 8012dac:	f8bc b000 	ldrh.w	fp, [ip]
 8012db0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012db4:	fb09 220b 	mla	r2, r9, fp, r2
 8012db8:	4452      	add	r2, sl
 8012dba:	b289      	uxth	r1, r1
 8012dbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012dc0:	f84e 1b04 	str.w	r1, [lr], #4
 8012dc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012dc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012dcc:	f8be 1000 	ldrh.w	r1, [lr]
 8012dd0:	fb09 110a 	mla	r1, r9, sl, r1
 8012dd4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012dd8:	4567      	cmp	r7, ip
 8012dda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012dde:	d8e5      	bhi.n	8012dac <__multiply+0x10c>
 8012de0:	9a01      	ldr	r2, [sp, #4]
 8012de2:	50a9      	str	r1, [r5, r2]
 8012de4:	3504      	adds	r5, #4
 8012de6:	e799      	b.n	8012d1c <__multiply+0x7c>
 8012de8:	3e01      	subs	r6, #1
 8012dea:	e79b      	b.n	8012d24 <__multiply+0x84>
 8012dec:	08017fd5 	.word	0x08017fd5
 8012df0:	08017fe6 	.word	0x08017fe6

08012df4 <__pow5mult>:
 8012df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012df8:	4615      	mov	r5, r2
 8012dfa:	f012 0203 	ands.w	r2, r2, #3
 8012dfe:	4606      	mov	r6, r0
 8012e00:	460f      	mov	r7, r1
 8012e02:	d007      	beq.n	8012e14 <__pow5mult+0x20>
 8012e04:	4c25      	ldr	r4, [pc, #148]	; (8012e9c <__pow5mult+0xa8>)
 8012e06:	3a01      	subs	r2, #1
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e0e:	f7ff fe53 	bl	8012ab8 <__multadd>
 8012e12:	4607      	mov	r7, r0
 8012e14:	10ad      	asrs	r5, r5, #2
 8012e16:	d03d      	beq.n	8012e94 <__pow5mult+0xa0>
 8012e18:	69f4      	ldr	r4, [r6, #28]
 8012e1a:	b97c      	cbnz	r4, 8012e3c <__pow5mult+0x48>
 8012e1c:	2010      	movs	r0, #16
 8012e1e:	f7ff fd35 	bl	801288c <malloc>
 8012e22:	4602      	mov	r2, r0
 8012e24:	61f0      	str	r0, [r6, #28]
 8012e26:	b928      	cbnz	r0, 8012e34 <__pow5mult+0x40>
 8012e28:	4b1d      	ldr	r3, [pc, #116]	; (8012ea0 <__pow5mult+0xac>)
 8012e2a:	481e      	ldr	r0, [pc, #120]	; (8012ea4 <__pow5mult+0xb0>)
 8012e2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012e30:	f001 fb6e 	bl	8014510 <__assert_func>
 8012e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e38:	6004      	str	r4, [r0, #0]
 8012e3a:	60c4      	str	r4, [r0, #12]
 8012e3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e44:	b94c      	cbnz	r4, 8012e5a <__pow5mult+0x66>
 8012e46:	f240 2171 	movw	r1, #625	; 0x271
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7ff ff12 	bl	8012c74 <__i2b>
 8012e50:	2300      	movs	r3, #0
 8012e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e56:	4604      	mov	r4, r0
 8012e58:	6003      	str	r3, [r0, #0]
 8012e5a:	f04f 0900 	mov.w	r9, #0
 8012e5e:	07eb      	lsls	r3, r5, #31
 8012e60:	d50a      	bpl.n	8012e78 <__pow5mult+0x84>
 8012e62:	4639      	mov	r1, r7
 8012e64:	4622      	mov	r2, r4
 8012e66:	4630      	mov	r0, r6
 8012e68:	f7ff ff1a 	bl	8012ca0 <__multiply>
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	4680      	mov	r8, r0
 8012e70:	4630      	mov	r0, r6
 8012e72:	f7ff fdff 	bl	8012a74 <_Bfree>
 8012e76:	4647      	mov	r7, r8
 8012e78:	106d      	asrs	r5, r5, #1
 8012e7a:	d00b      	beq.n	8012e94 <__pow5mult+0xa0>
 8012e7c:	6820      	ldr	r0, [r4, #0]
 8012e7e:	b938      	cbnz	r0, 8012e90 <__pow5mult+0x9c>
 8012e80:	4622      	mov	r2, r4
 8012e82:	4621      	mov	r1, r4
 8012e84:	4630      	mov	r0, r6
 8012e86:	f7ff ff0b 	bl	8012ca0 <__multiply>
 8012e8a:	6020      	str	r0, [r4, #0]
 8012e8c:	f8c0 9000 	str.w	r9, [r0]
 8012e90:	4604      	mov	r4, r0
 8012e92:	e7e4      	b.n	8012e5e <__pow5mult+0x6a>
 8012e94:	4638      	mov	r0, r7
 8012e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e9a:	bf00      	nop
 8012e9c:	08018130 	.word	0x08018130
 8012ea0:	08017f66 	.word	0x08017f66
 8012ea4:	08017fe6 	.word	0x08017fe6

08012ea8 <__lshift>:
 8012ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eac:	460c      	mov	r4, r1
 8012eae:	6849      	ldr	r1, [r1, #4]
 8012eb0:	6923      	ldr	r3, [r4, #16]
 8012eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012eb6:	68a3      	ldr	r3, [r4, #8]
 8012eb8:	4607      	mov	r7, r0
 8012eba:	4691      	mov	r9, r2
 8012ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ec0:	f108 0601 	add.w	r6, r8, #1
 8012ec4:	42b3      	cmp	r3, r6
 8012ec6:	db0b      	blt.n	8012ee0 <__lshift+0x38>
 8012ec8:	4638      	mov	r0, r7
 8012eca:	f7ff fd93 	bl	80129f4 <_Balloc>
 8012ece:	4605      	mov	r5, r0
 8012ed0:	b948      	cbnz	r0, 8012ee6 <__lshift+0x3e>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	4b28      	ldr	r3, [pc, #160]	; (8012f78 <__lshift+0xd0>)
 8012ed6:	4829      	ldr	r0, [pc, #164]	; (8012f7c <__lshift+0xd4>)
 8012ed8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012edc:	f001 fb18 	bl	8014510 <__assert_func>
 8012ee0:	3101      	adds	r1, #1
 8012ee2:	005b      	lsls	r3, r3, #1
 8012ee4:	e7ee      	b.n	8012ec4 <__lshift+0x1c>
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	f100 0114 	add.w	r1, r0, #20
 8012eec:	f100 0210 	add.w	r2, r0, #16
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	4553      	cmp	r3, sl
 8012ef4:	db33      	blt.n	8012f5e <__lshift+0xb6>
 8012ef6:	6920      	ldr	r0, [r4, #16]
 8012ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012efc:	f104 0314 	add.w	r3, r4, #20
 8012f00:	f019 091f 	ands.w	r9, r9, #31
 8012f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f0c:	d02b      	beq.n	8012f66 <__lshift+0xbe>
 8012f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8012f12:	468a      	mov	sl, r1
 8012f14:	2200      	movs	r2, #0
 8012f16:	6818      	ldr	r0, [r3, #0]
 8012f18:	fa00 f009 	lsl.w	r0, r0, r9
 8012f1c:	4310      	orrs	r0, r2
 8012f1e:	f84a 0b04 	str.w	r0, [sl], #4
 8012f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f26:	459c      	cmp	ip, r3
 8012f28:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f2c:	d8f3      	bhi.n	8012f16 <__lshift+0x6e>
 8012f2e:	ebac 0304 	sub.w	r3, ip, r4
 8012f32:	3b15      	subs	r3, #21
 8012f34:	f023 0303 	bic.w	r3, r3, #3
 8012f38:	3304      	adds	r3, #4
 8012f3a:	f104 0015 	add.w	r0, r4, #21
 8012f3e:	4584      	cmp	ip, r0
 8012f40:	bf38      	it	cc
 8012f42:	2304      	movcc	r3, #4
 8012f44:	50ca      	str	r2, [r1, r3]
 8012f46:	b10a      	cbz	r2, 8012f4c <__lshift+0xa4>
 8012f48:	f108 0602 	add.w	r6, r8, #2
 8012f4c:	3e01      	subs	r6, #1
 8012f4e:	4638      	mov	r0, r7
 8012f50:	612e      	str	r6, [r5, #16]
 8012f52:	4621      	mov	r1, r4
 8012f54:	f7ff fd8e 	bl	8012a74 <_Bfree>
 8012f58:	4628      	mov	r0, r5
 8012f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f62:	3301      	adds	r3, #1
 8012f64:	e7c5      	b.n	8012ef2 <__lshift+0x4a>
 8012f66:	3904      	subs	r1, #4
 8012f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f70:	459c      	cmp	ip, r3
 8012f72:	d8f9      	bhi.n	8012f68 <__lshift+0xc0>
 8012f74:	e7ea      	b.n	8012f4c <__lshift+0xa4>
 8012f76:	bf00      	nop
 8012f78:	08017fd5 	.word	0x08017fd5
 8012f7c:	08017fe6 	.word	0x08017fe6

08012f80 <__mcmp>:
 8012f80:	b530      	push	{r4, r5, lr}
 8012f82:	6902      	ldr	r2, [r0, #16]
 8012f84:	690c      	ldr	r4, [r1, #16]
 8012f86:	1b12      	subs	r2, r2, r4
 8012f88:	d10e      	bne.n	8012fa8 <__mcmp+0x28>
 8012f8a:	f100 0314 	add.w	r3, r0, #20
 8012f8e:	3114      	adds	r1, #20
 8012f90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012fa0:	42a5      	cmp	r5, r4
 8012fa2:	d003      	beq.n	8012fac <__mcmp+0x2c>
 8012fa4:	d305      	bcc.n	8012fb2 <__mcmp+0x32>
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	4610      	mov	r0, r2
 8012faa:	bd30      	pop	{r4, r5, pc}
 8012fac:	4283      	cmp	r3, r0
 8012fae:	d3f3      	bcc.n	8012f98 <__mcmp+0x18>
 8012fb0:	e7fa      	b.n	8012fa8 <__mcmp+0x28>
 8012fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fb6:	e7f7      	b.n	8012fa8 <__mcmp+0x28>

08012fb8 <__mdiff>:
 8012fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	4606      	mov	r6, r0
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	4690      	mov	r8, r2
 8012fc6:	f7ff ffdb 	bl	8012f80 <__mcmp>
 8012fca:	1e05      	subs	r5, r0, #0
 8012fcc:	d110      	bne.n	8012ff0 <__mdiff+0x38>
 8012fce:	4629      	mov	r1, r5
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f7ff fd0f 	bl	80129f4 <_Balloc>
 8012fd6:	b930      	cbnz	r0, 8012fe6 <__mdiff+0x2e>
 8012fd8:	4b3a      	ldr	r3, [pc, #232]	; (80130c4 <__mdiff+0x10c>)
 8012fda:	4602      	mov	r2, r0
 8012fdc:	f240 2137 	movw	r1, #567	; 0x237
 8012fe0:	4839      	ldr	r0, [pc, #228]	; (80130c8 <__mdiff+0x110>)
 8012fe2:	f001 fa95 	bl	8014510 <__assert_func>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff0:	bfa4      	itt	ge
 8012ff2:	4643      	movge	r3, r8
 8012ff4:	46a0      	movge	r8, r4
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ffc:	bfa6      	itte	ge
 8012ffe:	461c      	movge	r4, r3
 8013000:	2500      	movge	r5, #0
 8013002:	2501      	movlt	r5, #1
 8013004:	f7ff fcf6 	bl	80129f4 <_Balloc>
 8013008:	b920      	cbnz	r0, 8013014 <__mdiff+0x5c>
 801300a:	4b2e      	ldr	r3, [pc, #184]	; (80130c4 <__mdiff+0x10c>)
 801300c:	4602      	mov	r2, r0
 801300e:	f240 2145 	movw	r1, #581	; 0x245
 8013012:	e7e5      	b.n	8012fe0 <__mdiff+0x28>
 8013014:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013018:	6926      	ldr	r6, [r4, #16]
 801301a:	60c5      	str	r5, [r0, #12]
 801301c:	f104 0914 	add.w	r9, r4, #20
 8013020:	f108 0514 	add.w	r5, r8, #20
 8013024:	f100 0e14 	add.w	lr, r0, #20
 8013028:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801302c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013030:	f108 0210 	add.w	r2, r8, #16
 8013034:	46f2      	mov	sl, lr
 8013036:	2100      	movs	r1, #0
 8013038:	f859 3b04 	ldr.w	r3, [r9], #4
 801303c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013040:	fa11 f88b 	uxtah	r8, r1, fp
 8013044:	b299      	uxth	r1, r3
 8013046:	0c1b      	lsrs	r3, r3, #16
 8013048:	eba8 0801 	sub.w	r8, r8, r1
 801304c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013050:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013054:	fa1f f888 	uxth.w	r8, r8
 8013058:	1419      	asrs	r1, r3, #16
 801305a:	454e      	cmp	r6, r9
 801305c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013060:	f84a 3b04 	str.w	r3, [sl], #4
 8013064:	d8e8      	bhi.n	8013038 <__mdiff+0x80>
 8013066:	1b33      	subs	r3, r6, r4
 8013068:	3b15      	subs	r3, #21
 801306a:	f023 0303 	bic.w	r3, r3, #3
 801306e:	3304      	adds	r3, #4
 8013070:	3415      	adds	r4, #21
 8013072:	42a6      	cmp	r6, r4
 8013074:	bf38      	it	cc
 8013076:	2304      	movcc	r3, #4
 8013078:	441d      	add	r5, r3
 801307a:	4473      	add	r3, lr
 801307c:	469e      	mov	lr, r3
 801307e:	462e      	mov	r6, r5
 8013080:	4566      	cmp	r6, ip
 8013082:	d30e      	bcc.n	80130a2 <__mdiff+0xea>
 8013084:	f10c 0203 	add.w	r2, ip, #3
 8013088:	1b52      	subs	r2, r2, r5
 801308a:	f022 0203 	bic.w	r2, r2, #3
 801308e:	3d03      	subs	r5, #3
 8013090:	45ac      	cmp	ip, r5
 8013092:	bf38      	it	cc
 8013094:	2200      	movcc	r2, #0
 8013096:	4413      	add	r3, r2
 8013098:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801309c:	b17a      	cbz	r2, 80130be <__mdiff+0x106>
 801309e:	6107      	str	r7, [r0, #16]
 80130a0:	e7a4      	b.n	8012fec <__mdiff+0x34>
 80130a2:	f856 8b04 	ldr.w	r8, [r6], #4
 80130a6:	fa11 f288 	uxtah	r2, r1, r8
 80130aa:	1414      	asrs	r4, r2, #16
 80130ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80130b0:	b292      	uxth	r2, r2
 80130b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80130b6:	f84e 2b04 	str.w	r2, [lr], #4
 80130ba:	1421      	asrs	r1, r4, #16
 80130bc:	e7e0      	b.n	8013080 <__mdiff+0xc8>
 80130be:	3f01      	subs	r7, #1
 80130c0:	e7ea      	b.n	8013098 <__mdiff+0xe0>
 80130c2:	bf00      	nop
 80130c4:	08017fd5 	.word	0x08017fd5
 80130c8:	08017fe6 	.word	0x08017fe6

080130cc <__ulp>:
 80130cc:	b082      	sub	sp, #8
 80130ce:	ed8d 0b00 	vstr	d0, [sp]
 80130d2:	9a01      	ldr	r2, [sp, #4]
 80130d4:	4b0f      	ldr	r3, [pc, #60]	; (8013114 <__ulp+0x48>)
 80130d6:	4013      	ands	r3, r2
 80130d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80130dc:	2b00      	cmp	r3, #0
 80130de:	dc08      	bgt.n	80130f2 <__ulp+0x26>
 80130e0:	425b      	negs	r3, r3
 80130e2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80130e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80130ea:	da04      	bge.n	80130f6 <__ulp+0x2a>
 80130ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80130f0:	4113      	asrs	r3, r2
 80130f2:	2200      	movs	r2, #0
 80130f4:	e008      	b.n	8013108 <__ulp+0x3c>
 80130f6:	f1a2 0314 	sub.w	r3, r2, #20
 80130fa:	2b1e      	cmp	r3, #30
 80130fc:	bfda      	itte	le
 80130fe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8013102:	40da      	lsrle	r2, r3
 8013104:	2201      	movgt	r2, #1
 8013106:	2300      	movs	r3, #0
 8013108:	4619      	mov	r1, r3
 801310a:	4610      	mov	r0, r2
 801310c:	ec41 0b10 	vmov	d0, r0, r1
 8013110:	b002      	add	sp, #8
 8013112:	4770      	bx	lr
 8013114:	7ff00000 	.word	0x7ff00000

08013118 <__b2d>:
 8013118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801311c:	6906      	ldr	r6, [r0, #16]
 801311e:	f100 0814 	add.w	r8, r0, #20
 8013122:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013126:	1f37      	subs	r7, r6, #4
 8013128:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801312c:	4610      	mov	r0, r2
 801312e:	f7ff fd53 	bl	8012bd8 <__hi0bits>
 8013132:	f1c0 0320 	rsb	r3, r0, #32
 8013136:	280a      	cmp	r0, #10
 8013138:	600b      	str	r3, [r1, #0]
 801313a:	491b      	ldr	r1, [pc, #108]	; (80131a8 <__b2d+0x90>)
 801313c:	dc15      	bgt.n	801316a <__b2d+0x52>
 801313e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013142:	fa22 f30c 	lsr.w	r3, r2, ip
 8013146:	45b8      	cmp	r8, r7
 8013148:	ea43 0501 	orr.w	r5, r3, r1
 801314c:	bf34      	ite	cc
 801314e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013152:	2300      	movcs	r3, #0
 8013154:	3015      	adds	r0, #21
 8013156:	fa02 f000 	lsl.w	r0, r2, r0
 801315a:	fa23 f30c 	lsr.w	r3, r3, ip
 801315e:	4303      	orrs	r3, r0
 8013160:	461c      	mov	r4, r3
 8013162:	ec45 4b10 	vmov	d0, r4, r5
 8013166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801316a:	45b8      	cmp	r8, r7
 801316c:	bf3a      	itte	cc
 801316e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013172:	f1a6 0708 	subcc.w	r7, r6, #8
 8013176:	2300      	movcs	r3, #0
 8013178:	380b      	subs	r0, #11
 801317a:	d012      	beq.n	80131a2 <__b2d+0x8a>
 801317c:	f1c0 0120 	rsb	r1, r0, #32
 8013180:	fa23 f401 	lsr.w	r4, r3, r1
 8013184:	4082      	lsls	r2, r0
 8013186:	4322      	orrs	r2, r4
 8013188:	4547      	cmp	r7, r8
 801318a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801318e:	bf8c      	ite	hi
 8013190:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013194:	2200      	movls	r2, #0
 8013196:	4083      	lsls	r3, r0
 8013198:	40ca      	lsrs	r2, r1
 801319a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801319e:	4313      	orrs	r3, r2
 80131a0:	e7de      	b.n	8013160 <__b2d+0x48>
 80131a2:	ea42 0501 	orr.w	r5, r2, r1
 80131a6:	e7db      	b.n	8013160 <__b2d+0x48>
 80131a8:	3ff00000 	.word	0x3ff00000

080131ac <__d2b>:
 80131ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131b0:	460f      	mov	r7, r1
 80131b2:	2101      	movs	r1, #1
 80131b4:	ec59 8b10 	vmov	r8, r9, d0
 80131b8:	4616      	mov	r6, r2
 80131ba:	f7ff fc1b 	bl	80129f4 <_Balloc>
 80131be:	4604      	mov	r4, r0
 80131c0:	b930      	cbnz	r0, 80131d0 <__d2b+0x24>
 80131c2:	4602      	mov	r2, r0
 80131c4:	4b24      	ldr	r3, [pc, #144]	; (8013258 <__d2b+0xac>)
 80131c6:	4825      	ldr	r0, [pc, #148]	; (801325c <__d2b+0xb0>)
 80131c8:	f240 310f 	movw	r1, #783	; 0x30f
 80131cc:	f001 f9a0 	bl	8014510 <__assert_func>
 80131d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131d8:	bb2d      	cbnz	r5, 8013226 <__d2b+0x7a>
 80131da:	9301      	str	r3, [sp, #4]
 80131dc:	f1b8 0300 	subs.w	r3, r8, #0
 80131e0:	d026      	beq.n	8013230 <__d2b+0x84>
 80131e2:	4668      	mov	r0, sp
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	f7ff fd17 	bl	8012c18 <__lo0bits>
 80131ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131ee:	b1e8      	cbz	r0, 801322c <__d2b+0x80>
 80131f0:	f1c0 0320 	rsb	r3, r0, #32
 80131f4:	fa02 f303 	lsl.w	r3, r2, r3
 80131f8:	430b      	orrs	r3, r1
 80131fa:	40c2      	lsrs	r2, r0
 80131fc:	6163      	str	r3, [r4, #20]
 80131fe:	9201      	str	r2, [sp, #4]
 8013200:	9b01      	ldr	r3, [sp, #4]
 8013202:	61a3      	str	r3, [r4, #24]
 8013204:	2b00      	cmp	r3, #0
 8013206:	bf14      	ite	ne
 8013208:	2202      	movne	r2, #2
 801320a:	2201      	moveq	r2, #1
 801320c:	6122      	str	r2, [r4, #16]
 801320e:	b1bd      	cbz	r5, 8013240 <__d2b+0x94>
 8013210:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013214:	4405      	add	r5, r0
 8013216:	603d      	str	r5, [r7, #0]
 8013218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801321c:	6030      	str	r0, [r6, #0]
 801321e:	4620      	mov	r0, r4
 8013220:	b003      	add	sp, #12
 8013222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801322a:	e7d6      	b.n	80131da <__d2b+0x2e>
 801322c:	6161      	str	r1, [r4, #20]
 801322e:	e7e7      	b.n	8013200 <__d2b+0x54>
 8013230:	a801      	add	r0, sp, #4
 8013232:	f7ff fcf1 	bl	8012c18 <__lo0bits>
 8013236:	9b01      	ldr	r3, [sp, #4]
 8013238:	6163      	str	r3, [r4, #20]
 801323a:	3020      	adds	r0, #32
 801323c:	2201      	movs	r2, #1
 801323e:	e7e5      	b.n	801320c <__d2b+0x60>
 8013240:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013244:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013248:	6038      	str	r0, [r7, #0]
 801324a:	6918      	ldr	r0, [r3, #16]
 801324c:	f7ff fcc4 	bl	8012bd8 <__hi0bits>
 8013250:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013254:	e7e2      	b.n	801321c <__d2b+0x70>
 8013256:	bf00      	nop
 8013258:	08017fd5 	.word	0x08017fd5
 801325c:	08017fe6 	.word	0x08017fe6

08013260 <__ratio>:
 8013260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013264:	4688      	mov	r8, r1
 8013266:	4669      	mov	r1, sp
 8013268:	4681      	mov	r9, r0
 801326a:	f7ff ff55 	bl	8013118 <__b2d>
 801326e:	a901      	add	r1, sp, #4
 8013270:	4640      	mov	r0, r8
 8013272:	ec55 4b10 	vmov	r4, r5, d0
 8013276:	f7ff ff4f 	bl	8013118 <__b2d>
 801327a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801327e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013282:	eba3 0c02 	sub.w	ip, r3, r2
 8013286:	e9dd 3200 	ldrd	r3, r2, [sp]
 801328a:	1a9b      	subs	r3, r3, r2
 801328c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013290:	ec51 0b10 	vmov	r0, r1, d0
 8013294:	2b00      	cmp	r3, #0
 8013296:	bfd6      	itet	le
 8013298:	460a      	movle	r2, r1
 801329a:	462a      	movgt	r2, r5
 801329c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80132a0:	468b      	mov	fp, r1
 80132a2:	462f      	mov	r7, r5
 80132a4:	bfd4      	ite	le
 80132a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80132aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80132ae:	4620      	mov	r0, r4
 80132b0:	ee10 2a10 	vmov	r2, s0
 80132b4:	465b      	mov	r3, fp
 80132b6:	4639      	mov	r1, r7
 80132b8:	f7ed faf0 	bl	800089c <__aeabi_ddiv>
 80132bc:	ec41 0b10 	vmov	d0, r0, r1
 80132c0:	b003      	add	sp, #12
 80132c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132c6 <__copybits>:
 80132c6:	3901      	subs	r1, #1
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	1149      	asrs	r1, r1, #5
 80132cc:	6914      	ldr	r4, [r2, #16]
 80132ce:	3101      	adds	r1, #1
 80132d0:	f102 0314 	add.w	r3, r2, #20
 80132d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80132d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132dc:	1f05      	subs	r5, r0, #4
 80132de:	42a3      	cmp	r3, r4
 80132e0:	d30c      	bcc.n	80132fc <__copybits+0x36>
 80132e2:	1aa3      	subs	r3, r4, r2
 80132e4:	3b11      	subs	r3, #17
 80132e6:	f023 0303 	bic.w	r3, r3, #3
 80132ea:	3211      	adds	r2, #17
 80132ec:	42a2      	cmp	r2, r4
 80132ee:	bf88      	it	hi
 80132f0:	2300      	movhi	r3, #0
 80132f2:	4418      	add	r0, r3
 80132f4:	2300      	movs	r3, #0
 80132f6:	4288      	cmp	r0, r1
 80132f8:	d305      	bcc.n	8013306 <__copybits+0x40>
 80132fa:	bd70      	pop	{r4, r5, r6, pc}
 80132fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8013300:	f845 6f04 	str.w	r6, [r5, #4]!
 8013304:	e7eb      	b.n	80132de <__copybits+0x18>
 8013306:	f840 3b04 	str.w	r3, [r0], #4
 801330a:	e7f4      	b.n	80132f6 <__copybits+0x30>

0801330c <__any_on>:
 801330c:	f100 0214 	add.w	r2, r0, #20
 8013310:	6900      	ldr	r0, [r0, #16]
 8013312:	114b      	asrs	r3, r1, #5
 8013314:	4298      	cmp	r0, r3
 8013316:	b510      	push	{r4, lr}
 8013318:	db11      	blt.n	801333e <__any_on+0x32>
 801331a:	dd0a      	ble.n	8013332 <__any_on+0x26>
 801331c:	f011 011f 	ands.w	r1, r1, #31
 8013320:	d007      	beq.n	8013332 <__any_on+0x26>
 8013322:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013326:	fa24 f001 	lsr.w	r0, r4, r1
 801332a:	fa00 f101 	lsl.w	r1, r0, r1
 801332e:	428c      	cmp	r4, r1
 8013330:	d10b      	bne.n	801334a <__any_on+0x3e>
 8013332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013336:	4293      	cmp	r3, r2
 8013338:	d803      	bhi.n	8013342 <__any_on+0x36>
 801333a:	2000      	movs	r0, #0
 801333c:	bd10      	pop	{r4, pc}
 801333e:	4603      	mov	r3, r0
 8013340:	e7f7      	b.n	8013332 <__any_on+0x26>
 8013342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013346:	2900      	cmp	r1, #0
 8013348:	d0f5      	beq.n	8013336 <__any_on+0x2a>
 801334a:	2001      	movs	r0, #1
 801334c:	e7f6      	b.n	801333c <__any_on+0x30>

0801334e <sulp>:
 801334e:	b570      	push	{r4, r5, r6, lr}
 8013350:	4604      	mov	r4, r0
 8013352:	460d      	mov	r5, r1
 8013354:	ec45 4b10 	vmov	d0, r4, r5
 8013358:	4616      	mov	r6, r2
 801335a:	f7ff feb7 	bl	80130cc <__ulp>
 801335e:	ec51 0b10 	vmov	r0, r1, d0
 8013362:	b17e      	cbz	r6, 8013384 <sulp+0x36>
 8013364:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013368:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801336c:	2b00      	cmp	r3, #0
 801336e:	dd09      	ble.n	8013384 <sulp+0x36>
 8013370:	051b      	lsls	r3, r3, #20
 8013372:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013376:	2400      	movs	r4, #0
 8013378:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801337c:	4622      	mov	r2, r4
 801337e:	462b      	mov	r3, r5
 8013380:	f7ed f962 	bl	8000648 <__aeabi_dmul>
 8013384:	bd70      	pop	{r4, r5, r6, pc}
	...

08013388 <_strtod_l>:
 8013388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801338c:	ed2d 8b02 	vpush	{d8}
 8013390:	b09b      	sub	sp, #108	; 0x6c
 8013392:	4604      	mov	r4, r0
 8013394:	9213      	str	r2, [sp, #76]	; 0x4c
 8013396:	2200      	movs	r2, #0
 8013398:	9216      	str	r2, [sp, #88]	; 0x58
 801339a:	460d      	mov	r5, r1
 801339c:	f04f 0800 	mov.w	r8, #0
 80133a0:	f04f 0900 	mov.w	r9, #0
 80133a4:	460a      	mov	r2, r1
 80133a6:	9215      	str	r2, [sp, #84]	; 0x54
 80133a8:	7811      	ldrb	r1, [r2, #0]
 80133aa:	292b      	cmp	r1, #43	; 0x2b
 80133ac:	d04c      	beq.n	8013448 <_strtod_l+0xc0>
 80133ae:	d83a      	bhi.n	8013426 <_strtod_l+0x9e>
 80133b0:	290d      	cmp	r1, #13
 80133b2:	d834      	bhi.n	801341e <_strtod_l+0x96>
 80133b4:	2908      	cmp	r1, #8
 80133b6:	d834      	bhi.n	8013422 <_strtod_l+0x9a>
 80133b8:	2900      	cmp	r1, #0
 80133ba:	d03d      	beq.n	8013438 <_strtod_l+0xb0>
 80133bc:	2200      	movs	r2, #0
 80133be:	920a      	str	r2, [sp, #40]	; 0x28
 80133c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80133c2:	7832      	ldrb	r2, [r6, #0]
 80133c4:	2a30      	cmp	r2, #48	; 0x30
 80133c6:	f040 80b4 	bne.w	8013532 <_strtod_l+0x1aa>
 80133ca:	7872      	ldrb	r2, [r6, #1]
 80133cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80133d0:	2a58      	cmp	r2, #88	; 0x58
 80133d2:	d170      	bne.n	80134b6 <_strtod_l+0x12e>
 80133d4:	9302      	str	r3, [sp, #8]
 80133d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133d8:	9301      	str	r3, [sp, #4]
 80133da:	ab16      	add	r3, sp, #88	; 0x58
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	4a8e      	ldr	r2, [pc, #568]	; (8013618 <_strtod_l+0x290>)
 80133e0:	ab17      	add	r3, sp, #92	; 0x5c
 80133e2:	a915      	add	r1, sp, #84	; 0x54
 80133e4:	4620      	mov	r0, r4
 80133e6:	f001 f92f 	bl	8014648 <__gethex>
 80133ea:	f010 070f 	ands.w	r7, r0, #15
 80133ee:	4605      	mov	r5, r0
 80133f0:	d005      	beq.n	80133fe <_strtod_l+0x76>
 80133f2:	2f06      	cmp	r7, #6
 80133f4:	d12a      	bne.n	801344c <_strtod_l+0xc4>
 80133f6:	3601      	adds	r6, #1
 80133f8:	2300      	movs	r3, #0
 80133fa:	9615      	str	r6, [sp, #84]	; 0x54
 80133fc:	930a      	str	r3, [sp, #40]	; 0x28
 80133fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013400:	2b00      	cmp	r3, #0
 8013402:	f040 857f 	bne.w	8013f04 <_strtod_l+0xb7c>
 8013406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013408:	b1db      	cbz	r3, 8013442 <_strtod_l+0xba>
 801340a:	4642      	mov	r2, r8
 801340c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013410:	ec43 2b10 	vmov	d0, r2, r3
 8013414:	b01b      	add	sp, #108	; 0x6c
 8013416:	ecbd 8b02 	vpop	{d8}
 801341a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801341e:	2920      	cmp	r1, #32
 8013420:	d1cc      	bne.n	80133bc <_strtod_l+0x34>
 8013422:	3201      	adds	r2, #1
 8013424:	e7bf      	b.n	80133a6 <_strtod_l+0x1e>
 8013426:	292d      	cmp	r1, #45	; 0x2d
 8013428:	d1c8      	bne.n	80133bc <_strtod_l+0x34>
 801342a:	2101      	movs	r1, #1
 801342c:	910a      	str	r1, [sp, #40]	; 0x28
 801342e:	1c51      	adds	r1, r2, #1
 8013430:	9115      	str	r1, [sp, #84]	; 0x54
 8013432:	7852      	ldrb	r2, [r2, #1]
 8013434:	2a00      	cmp	r2, #0
 8013436:	d1c3      	bne.n	80133c0 <_strtod_l+0x38>
 8013438:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801343a:	9515      	str	r5, [sp, #84]	; 0x54
 801343c:	2b00      	cmp	r3, #0
 801343e:	f040 855f 	bne.w	8013f00 <_strtod_l+0xb78>
 8013442:	4642      	mov	r2, r8
 8013444:	464b      	mov	r3, r9
 8013446:	e7e3      	b.n	8013410 <_strtod_l+0x88>
 8013448:	2100      	movs	r1, #0
 801344a:	e7ef      	b.n	801342c <_strtod_l+0xa4>
 801344c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801344e:	b13a      	cbz	r2, 8013460 <_strtod_l+0xd8>
 8013450:	2135      	movs	r1, #53	; 0x35
 8013452:	a818      	add	r0, sp, #96	; 0x60
 8013454:	f7ff ff37 	bl	80132c6 <__copybits>
 8013458:	9916      	ldr	r1, [sp, #88]	; 0x58
 801345a:	4620      	mov	r0, r4
 801345c:	f7ff fb0a 	bl	8012a74 <_Bfree>
 8013460:	3f01      	subs	r7, #1
 8013462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013464:	2f04      	cmp	r7, #4
 8013466:	d806      	bhi.n	8013476 <_strtod_l+0xee>
 8013468:	e8df f007 	tbb	[pc, r7]
 801346c:	201d0314 	.word	0x201d0314
 8013470:	14          	.byte	0x14
 8013471:	00          	.byte	0x00
 8013472:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8013476:	05e9      	lsls	r1, r5, #23
 8013478:	bf48      	it	mi
 801347a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801347e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013482:	0d1b      	lsrs	r3, r3, #20
 8013484:	051b      	lsls	r3, r3, #20
 8013486:	2b00      	cmp	r3, #0
 8013488:	d1b9      	bne.n	80133fe <_strtod_l+0x76>
 801348a:	f7fe faf7 	bl	8011a7c <__errno>
 801348e:	2322      	movs	r3, #34	; 0x22
 8013490:	6003      	str	r3, [r0, #0]
 8013492:	e7b4      	b.n	80133fe <_strtod_l+0x76>
 8013494:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013498:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801349c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80134a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80134a4:	e7e7      	b.n	8013476 <_strtod_l+0xee>
 80134a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013620 <_strtod_l+0x298>
 80134aa:	e7e4      	b.n	8013476 <_strtod_l+0xee>
 80134ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80134b0:	f04f 38ff 	mov.w	r8, #4294967295
 80134b4:	e7df      	b.n	8013476 <_strtod_l+0xee>
 80134b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134b8:	1c5a      	adds	r2, r3, #1
 80134ba:	9215      	str	r2, [sp, #84]	; 0x54
 80134bc:	785b      	ldrb	r3, [r3, #1]
 80134be:	2b30      	cmp	r3, #48	; 0x30
 80134c0:	d0f9      	beq.n	80134b6 <_strtod_l+0x12e>
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d09b      	beq.n	80133fe <_strtod_l+0x76>
 80134c6:	2301      	movs	r3, #1
 80134c8:	f04f 0a00 	mov.w	sl, #0
 80134cc:	9304      	str	r3, [sp, #16]
 80134ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80134d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80134d6:	46d3      	mov	fp, sl
 80134d8:	220a      	movs	r2, #10
 80134da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80134dc:	7806      	ldrb	r6, [r0, #0]
 80134de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80134e2:	b2d9      	uxtb	r1, r3
 80134e4:	2909      	cmp	r1, #9
 80134e6:	d926      	bls.n	8013536 <_strtod_l+0x1ae>
 80134e8:	494c      	ldr	r1, [pc, #304]	; (801361c <_strtod_l+0x294>)
 80134ea:	2201      	movs	r2, #1
 80134ec:	f000 ffe6 	bl	80144bc <strncmp>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d030      	beq.n	8013556 <_strtod_l+0x1ce>
 80134f4:	2000      	movs	r0, #0
 80134f6:	4632      	mov	r2, r6
 80134f8:	9005      	str	r0, [sp, #20]
 80134fa:	465e      	mov	r6, fp
 80134fc:	4603      	mov	r3, r0
 80134fe:	2a65      	cmp	r2, #101	; 0x65
 8013500:	d001      	beq.n	8013506 <_strtod_l+0x17e>
 8013502:	2a45      	cmp	r2, #69	; 0x45
 8013504:	d113      	bne.n	801352e <_strtod_l+0x1a6>
 8013506:	b91e      	cbnz	r6, 8013510 <_strtod_l+0x188>
 8013508:	9a04      	ldr	r2, [sp, #16]
 801350a:	4302      	orrs	r2, r0
 801350c:	d094      	beq.n	8013438 <_strtod_l+0xb0>
 801350e:	2600      	movs	r6, #0
 8013510:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013512:	1c6a      	adds	r2, r5, #1
 8013514:	9215      	str	r2, [sp, #84]	; 0x54
 8013516:	786a      	ldrb	r2, [r5, #1]
 8013518:	2a2b      	cmp	r2, #43	; 0x2b
 801351a:	d074      	beq.n	8013606 <_strtod_l+0x27e>
 801351c:	2a2d      	cmp	r2, #45	; 0x2d
 801351e:	d078      	beq.n	8013612 <_strtod_l+0x28a>
 8013520:	f04f 0c00 	mov.w	ip, #0
 8013524:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013528:	2909      	cmp	r1, #9
 801352a:	d97f      	bls.n	801362c <_strtod_l+0x2a4>
 801352c:	9515      	str	r5, [sp, #84]	; 0x54
 801352e:	2700      	movs	r7, #0
 8013530:	e09e      	b.n	8013670 <_strtod_l+0x2e8>
 8013532:	2300      	movs	r3, #0
 8013534:	e7c8      	b.n	80134c8 <_strtod_l+0x140>
 8013536:	f1bb 0f08 	cmp.w	fp, #8
 801353a:	bfd8      	it	le
 801353c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801353e:	f100 0001 	add.w	r0, r0, #1
 8013542:	bfda      	itte	le
 8013544:	fb02 3301 	mlale	r3, r2, r1, r3
 8013548:	9309      	strle	r3, [sp, #36]	; 0x24
 801354a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801354e:	f10b 0b01 	add.w	fp, fp, #1
 8013552:	9015      	str	r0, [sp, #84]	; 0x54
 8013554:	e7c1      	b.n	80134da <_strtod_l+0x152>
 8013556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013558:	1c5a      	adds	r2, r3, #1
 801355a:	9215      	str	r2, [sp, #84]	; 0x54
 801355c:	785a      	ldrb	r2, [r3, #1]
 801355e:	f1bb 0f00 	cmp.w	fp, #0
 8013562:	d037      	beq.n	80135d4 <_strtod_l+0x24c>
 8013564:	9005      	str	r0, [sp, #20]
 8013566:	465e      	mov	r6, fp
 8013568:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801356c:	2b09      	cmp	r3, #9
 801356e:	d912      	bls.n	8013596 <_strtod_l+0x20e>
 8013570:	2301      	movs	r3, #1
 8013572:	e7c4      	b.n	80134fe <_strtod_l+0x176>
 8013574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013576:	1c5a      	adds	r2, r3, #1
 8013578:	9215      	str	r2, [sp, #84]	; 0x54
 801357a:	785a      	ldrb	r2, [r3, #1]
 801357c:	3001      	adds	r0, #1
 801357e:	2a30      	cmp	r2, #48	; 0x30
 8013580:	d0f8      	beq.n	8013574 <_strtod_l+0x1ec>
 8013582:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013586:	2b08      	cmp	r3, #8
 8013588:	f200 84c1 	bhi.w	8013f0e <_strtod_l+0xb86>
 801358c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801358e:	9005      	str	r0, [sp, #20]
 8013590:	2000      	movs	r0, #0
 8013592:	930b      	str	r3, [sp, #44]	; 0x2c
 8013594:	4606      	mov	r6, r0
 8013596:	3a30      	subs	r2, #48	; 0x30
 8013598:	f100 0301 	add.w	r3, r0, #1
 801359c:	d014      	beq.n	80135c8 <_strtod_l+0x240>
 801359e:	9905      	ldr	r1, [sp, #20]
 80135a0:	4419      	add	r1, r3
 80135a2:	9105      	str	r1, [sp, #20]
 80135a4:	4633      	mov	r3, r6
 80135a6:	eb00 0c06 	add.w	ip, r0, r6
 80135aa:	210a      	movs	r1, #10
 80135ac:	4563      	cmp	r3, ip
 80135ae:	d113      	bne.n	80135d8 <_strtod_l+0x250>
 80135b0:	1833      	adds	r3, r6, r0
 80135b2:	2b08      	cmp	r3, #8
 80135b4:	f106 0601 	add.w	r6, r6, #1
 80135b8:	4406      	add	r6, r0
 80135ba:	dc1a      	bgt.n	80135f2 <_strtod_l+0x26a>
 80135bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135be:	230a      	movs	r3, #10
 80135c0:	fb03 2301 	mla	r3, r3, r1, r2
 80135c4:	9309      	str	r3, [sp, #36]	; 0x24
 80135c6:	2300      	movs	r3, #0
 80135c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80135ca:	1c51      	adds	r1, r2, #1
 80135cc:	9115      	str	r1, [sp, #84]	; 0x54
 80135ce:	7852      	ldrb	r2, [r2, #1]
 80135d0:	4618      	mov	r0, r3
 80135d2:	e7c9      	b.n	8013568 <_strtod_l+0x1e0>
 80135d4:	4658      	mov	r0, fp
 80135d6:	e7d2      	b.n	801357e <_strtod_l+0x1f6>
 80135d8:	2b08      	cmp	r3, #8
 80135da:	f103 0301 	add.w	r3, r3, #1
 80135de:	dc03      	bgt.n	80135e8 <_strtod_l+0x260>
 80135e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80135e2:	434f      	muls	r7, r1
 80135e4:	9709      	str	r7, [sp, #36]	; 0x24
 80135e6:	e7e1      	b.n	80135ac <_strtod_l+0x224>
 80135e8:	2b10      	cmp	r3, #16
 80135ea:	bfd8      	it	le
 80135ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80135f0:	e7dc      	b.n	80135ac <_strtod_l+0x224>
 80135f2:	2e10      	cmp	r6, #16
 80135f4:	bfdc      	itt	le
 80135f6:	230a      	movle	r3, #10
 80135f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80135fc:	e7e3      	b.n	80135c6 <_strtod_l+0x23e>
 80135fe:	2300      	movs	r3, #0
 8013600:	9305      	str	r3, [sp, #20]
 8013602:	2301      	movs	r3, #1
 8013604:	e780      	b.n	8013508 <_strtod_l+0x180>
 8013606:	f04f 0c00 	mov.w	ip, #0
 801360a:	1caa      	adds	r2, r5, #2
 801360c:	9215      	str	r2, [sp, #84]	; 0x54
 801360e:	78aa      	ldrb	r2, [r5, #2]
 8013610:	e788      	b.n	8013524 <_strtod_l+0x19c>
 8013612:	f04f 0c01 	mov.w	ip, #1
 8013616:	e7f8      	b.n	801360a <_strtod_l+0x282>
 8013618:	08018140 	.word	0x08018140
 801361c:	0801813c 	.word	0x0801813c
 8013620:	7ff00000 	.word	0x7ff00000
 8013624:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013626:	1c51      	adds	r1, r2, #1
 8013628:	9115      	str	r1, [sp, #84]	; 0x54
 801362a:	7852      	ldrb	r2, [r2, #1]
 801362c:	2a30      	cmp	r2, #48	; 0x30
 801362e:	d0f9      	beq.n	8013624 <_strtod_l+0x29c>
 8013630:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013634:	2908      	cmp	r1, #8
 8013636:	f63f af7a 	bhi.w	801352e <_strtod_l+0x1a6>
 801363a:	3a30      	subs	r2, #48	; 0x30
 801363c:	9208      	str	r2, [sp, #32]
 801363e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013640:	920c      	str	r2, [sp, #48]	; 0x30
 8013642:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013644:	1c57      	adds	r7, r2, #1
 8013646:	9715      	str	r7, [sp, #84]	; 0x54
 8013648:	7852      	ldrb	r2, [r2, #1]
 801364a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801364e:	f1be 0f09 	cmp.w	lr, #9
 8013652:	d938      	bls.n	80136c6 <_strtod_l+0x33e>
 8013654:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013656:	1a7f      	subs	r7, r7, r1
 8013658:	2f08      	cmp	r7, #8
 801365a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801365e:	dc03      	bgt.n	8013668 <_strtod_l+0x2e0>
 8013660:	9908      	ldr	r1, [sp, #32]
 8013662:	428f      	cmp	r7, r1
 8013664:	bfa8      	it	ge
 8013666:	460f      	movge	r7, r1
 8013668:	f1bc 0f00 	cmp.w	ip, #0
 801366c:	d000      	beq.n	8013670 <_strtod_l+0x2e8>
 801366e:	427f      	negs	r7, r7
 8013670:	2e00      	cmp	r6, #0
 8013672:	d14f      	bne.n	8013714 <_strtod_l+0x38c>
 8013674:	9904      	ldr	r1, [sp, #16]
 8013676:	4301      	orrs	r1, r0
 8013678:	f47f aec1 	bne.w	80133fe <_strtod_l+0x76>
 801367c:	2b00      	cmp	r3, #0
 801367e:	f47f aedb 	bne.w	8013438 <_strtod_l+0xb0>
 8013682:	2a69      	cmp	r2, #105	; 0x69
 8013684:	d029      	beq.n	80136da <_strtod_l+0x352>
 8013686:	dc26      	bgt.n	80136d6 <_strtod_l+0x34e>
 8013688:	2a49      	cmp	r2, #73	; 0x49
 801368a:	d026      	beq.n	80136da <_strtod_l+0x352>
 801368c:	2a4e      	cmp	r2, #78	; 0x4e
 801368e:	f47f aed3 	bne.w	8013438 <_strtod_l+0xb0>
 8013692:	499b      	ldr	r1, [pc, #620]	; (8013900 <_strtod_l+0x578>)
 8013694:	a815      	add	r0, sp, #84	; 0x54
 8013696:	f001 fa17 	bl	8014ac8 <__match>
 801369a:	2800      	cmp	r0, #0
 801369c:	f43f aecc 	beq.w	8013438 <_strtod_l+0xb0>
 80136a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	2b28      	cmp	r3, #40	; 0x28
 80136a6:	d12f      	bne.n	8013708 <_strtod_l+0x380>
 80136a8:	4996      	ldr	r1, [pc, #600]	; (8013904 <_strtod_l+0x57c>)
 80136aa:	aa18      	add	r2, sp, #96	; 0x60
 80136ac:	a815      	add	r0, sp, #84	; 0x54
 80136ae:	f001 fa1f 	bl	8014af0 <__hexnan>
 80136b2:	2805      	cmp	r0, #5
 80136b4:	d128      	bne.n	8013708 <_strtod_l+0x380>
 80136b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80136b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80136bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80136c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80136c4:	e69b      	b.n	80133fe <_strtod_l+0x76>
 80136c6:	9f08      	ldr	r7, [sp, #32]
 80136c8:	210a      	movs	r1, #10
 80136ca:	fb01 2107 	mla	r1, r1, r7, r2
 80136ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80136d2:	9208      	str	r2, [sp, #32]
 80136d4:	e7b5      	b.n	8013642 <_strtod_l+0x2ba>
 80136d6:	2a6e      	cmp	r2, #110	; 0x6e
 80136d8:	e7d9      	b.n	801368e <_strtod_l+0x306>
 80136da:	498b      	ldr	r1, [pc, #556]	; (8013908 <_strtod_l+0x580>)
 80136dc:	a815      	add	r0, sp, #84	; 0x54
 80136de:	f001 f9f3 	bl	8014ac8 <__match>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f43f aea8 	beq.w	8013438 <_strtod_l+0xb0>
 80136e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136ea:	4988      	ldr	r1, [pc, #544]	; (801390c <_strtod_l+0x584>)
 80136ec:	3b01      	subs	r3, #1
 80136ee:	a815      	add	r0, sp, #84	; 0x54
 80136f0:	9315      	str	r3, [sp, #84]	; 0x54
 80136f2:	f001 f9e9 	bl	8014ac8 <__match>
 80136f6:	b910      	cbnz	r0, 80136fe <_strtod_l+0x376>
 80136f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136fa:	3301      	adds	r3, #1
 80136fc:	9315      	str	r3, [sp, #84]	; 0x54
 80136fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801391c <_strtod_l+0x594>
 8013702:	f04f 0800 	mov.w	r8, #0
 8013706:	e67a      	b.n	80133fe <_strtod_l+0x76>
 8013708:	4881      	ldr	r0, [pc, #516]	; (8013910 <_strtod_l+0x588>)
 801370a:	f000 fef9 	bl	8014500 <nan>
 801370e:	ec59 8b10 	vmov	r8, r9, d0
 8013712:	e674      	b.n	80133fe <_strtod_l+0x76>
 8013714:	9b05      	ldr	r3, [sp, #20]
 8013716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013718:	1afb      	subs	r3, r7, r3
 801371a:	f1bb 0f00 	cmp.w	fp, #0
 801371e:	bf08      	it	eq
 8013720:	46b3      	moveq	fp, r6
 8013722:	2e10      	cmp	r6, #16
 8013724:	9308      	str	r3, [sp, #32]
 8013726:	4635      	mov	r5, r6
 8013728:	bfa8      	it	ge
 801372a:	2510      	movge	r5, #16
 801372c:	f7ec ff12 	bl	8000554 <__aeabi_ui2d>
 8013730:	2e09      	cmp	r6, #9
 8013732:	4680      	mov	r8, r0
 8013734:	4689      	mov	r9, r1
 8013736:	dd13      	ble.n	8013760 <_strtod_l+0x3d8>
 8013738:	4b76      	ldr	r3, [pc, #472]	; (8013914 <_strtod_l+0x58c>)
 801373a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801373e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013742:	f7ec ff81 	bl	8000648 <__aeabi_dmul>
 8013746:	4680      	mov	r8, r0
 8013748:	4650      	mov	r0, sl
 801374a:	4689      	mov	r9, r1
 801374c:	f7ec ff02 	bl	8000554 <__aeabi_ui2d>
 8013750:	4602      	mov	r2, r0
 8013752:	460b      	mov	r3, r1
 8013754:	4640      	mov	r0, r8
 8013756:	4649      	mov	r1, r9
 8013758:	f7ec fdc0 	bl	80002dc <__adddf3>
 801375c:	4680      	mov	r8, r0
 801375e:	4689      	mov	r9, r1
 8013760:	2e0f      	cmp	r6, #15
 8013762:	dc38      	bgt.n	80137d6 <_strtod_l+0x44e>
 8013764:	9b08      	ldr	r3, [sp, #32]
 8013766:	2b00      	cmp	r3, #0
 8013768:	f43f ae49 	beq.w	80133fe <_strtod_l+0x76>
 801376c:	dd24      	ble.n	80137b8 <_strtod_l+0x430>
 801376e:	2b16      	cmp	r3, #22
 8013770:	dc0b      	bgt.n	801378a <_strtod_l+0x402>
 8013772:	4968      	ldr	r1, [pc, #416]	; (8013914 <_strtod_l+0x58c>)
 8013774:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801377c:	4642      	mov	r2, r8
 801377e:	464b      	mov	r3, r9
 8013780:	f7ec ff62 	bl	8000648 <__aeabi_dmul>
 8013784:	4680      	mov	r8, r0
 8013786:	4689      	mov	r9, r1
 8013788:	e639      	b.n	80133fe <_strtod_l+0x76>
 801378a:	9a08      	ldr	r2, [sp, #32]
 801378c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013790:	4293      	cmp	r3, r2
 8013792:	db20      	blt.n	80137d6 <_strtod_l+0x44e>
 8013794:	4c5f      	ldr	r4, [pc, #380]	; (8013914 <_strtod_l+0x58c>)
 8013796:	f1c6 060f 	rsb	r6, r6, #15
 801379a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801379e:	4642      	mov	r2, r8
 80137a0:	464b      	mov	r3, r9
 80137a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137a6:	f7ec ff4f 	bl	8000648 <__aeabi_dmul>
 80137aa:	9b08      	ldr	r3, [sp, #32]
 80137ac:	1b9e      	subs	r6, r3, r6
 80137ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80137b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80137b6:	e7e3      	b.n	8013780 <_strtod_l+0x3f8>
 80137b8:	9b08      	ldr	r3, [sp, #32]
 80137ba:	3316      	adds	r3, #22
 80137bc:	db0b      	blt.n	80137d6 <_strtod_l+0x44e>
 80137be:	9b05      	ldr	r3, [sp, #20]
 80137c0:	1bdf      	subs	r7, r3, r7
 80137c2:	4b54      	ldr	r3, [pc, #336]	; (8013914 <_strtod_l+0x58c>)
 80137c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80137c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137cc:	4640      	mov	r0, r8
 80137ce:	4649      	mov	r1, r9
 80137d0:	f7ed f864 	bl	800089c <__aeabi_ddiv>
 80137d4:	e7d6      	b.n	8013784 <_strtod_l+0x3fc>
 80137d6:	9b08      	ldr	r3, [sp, #32]
 80137d8:	1b75      	subs	r5, r6, r5
 80137da:	441d      	add	r5, r3
 80137dc:	2d00      	cmp	r5, #0
 80137de:	dd70      	ble.n	80138c2 <_strtod_l+0x53a>
 80137e0:	f015 030f 	ands.w	r3, r5, #15
 80137e4:	d00a      	beq.n	80137fc <_strtod_l+0x474>
 80137e6:	494b      	ldr	r1, [pc, #300]	; (8013914 <_strtod_l+0x58c>)
 80137e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80137ec:	4642      	mov	r2, r8
 80137ee:	464b      	mov	r3, r9
 80137f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137f4:	f7ec ff28 	bl	8000648 <__aeabi_dmul>
 80137f8:	4680      	mov	r8, r0
 80137fa:	4689      	mov	r9, r1
 80137fc:	f035 050f 	bics.w	r5, r5, #15
 8013800:	d04d      	beq.n	801389e <_strtod_l+0x516>
 8013802:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013806:	dd22      	ble.n	801384e <_strtod_l+0x4c6>
 8013808:	2500      	movs	r5, #0
 801380a:	46ab      	mov	fp, r5
 801380c:	9509      	str	r5, [sp, #36]	; 0x24
 801380e:	9505      	str	r5, [sp, #20]
 8013810:	2322      	movs	r3, #34	; 0x22
 8013812:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801391c <_strtod_l+0x594>
 8013816:	6023      	str	r3, [r4, #0]
 8013818:	f04f 0800 	mov.w	r8, #0
 801381c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801381e:	2b00      	cmp	r3, #0
 8013820:	f43f aded 	beq.w	80133fe <_strtod_l+0x76>
 8013824:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013826:	4620      	mov	r0, r4
 8013828:	f7ff f924 	bl	8012a74 <_Bfree>
 801382c:	9905      	ldr	r1, [sp, #20]
 801382e:	4620      	mov	r0, r4
 8013830:	f7ff f920 	bl	8012a74 <_Bfree>
 8013834:	4659      	mov	r1, fp
 8013836:	4620      	mov	r0, r4
 8013838:	f7ff f91c 	bl	8012a74 <_Bfree>
 801383c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801383e:	4620      	mov	r0, r4
 8013840:	f7ff f918 	bl	8012a74 <_Bfree>
 8013844:	4629      	mov	r1, r5
 8013846:	4620      	mov	r0, r4
 8013848:	f7ff f914 	bl	8012a74 <_Bfree>
 801384c:	e5d7      	b.n	80133fe <_strtod_l+0x76>
 801384e:	4b32      	ldr	r3, [pc, #200]	; (8013918 <_strtod_l+0x590>)
 8013850:	9304      	str	r3, [sp, #16]
 8013852:	2300      	movs	r3, #0
 8013854:	112d      	asrs	r5, r5, #4
 8013856:	4640      	mov	r0, r8
 8013858:	4649      	mov	r1, r9
 801385a:	469a      	mov	sl, r3
 801385c:	2d01      	cmp	r5, #1
 801385e:	dc21      	bgt.n	80138a4 <_strtod_l+0x51c>
 8013860:	b10b      	cbz	r3, 8013866 <_strtod_l+0x4de>
 8013862:	4680      	mov	r8, r0
 8013864:	4689      	mov	r9, r1
 8013866:	492c      	ldr	r1, [pc, #176]	; (8013918 <_strtod_l+0x590>)
 8013868:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801386c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013870:	4642      	mov	r2, r8
 8013872:	464b      	mov	r3, r9
 8013874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013878:	f7ec fee6 	bl	8000648 <__aeabi_dmul>
 801387c:	4b27      	ldr	r3, [pc, #156]	; (801391c <_strtod_l+0x594>)
 801387e:	460a      	mov	r2, r1
 8013880:	400b      	ands	r3, r1
 8013882:	4927      	ldr	r1, [pc, #156]	; (8013920 <_strtod_l+0x598>)
 8013884:	428b      	cmp	r3, r1
 8013886:	4680      	mov	r8, r0
 8013888:	d8be      	bhi.n	8013808 <_strtod_l+0x480>
 801388a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801388e:	428b      	cmp	r3, r1
 8013890:	bf86      	itte	hi
 8013892:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013924 <_strtod_l+0x59c>
 8013896:	f04f 38ff 	movhi.w	r8, #4294967295
 801389a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801389e:	2300      	movs	r3, #0
 80138a0:	9304      	str	r3, [sp, #16]
 80138a2:	e07b      	b.n	801399c <_strtod_l+0x614>
 80138a4:	07ea      	lsls	r2, r5, #31
 80138a6:	d505      	bpl.n	80138b4 <_strtod_l+0x52c>
 80138a8:	9b04      	ldr	r3, [sp, #16]
 80138aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ae:	f7ec fecb 	bl	8000648 <__aeabi_dmul>
 80138b2:	2301      	movs	r3, #1
 80138b4:	9a04      	ldr	r2, [sp, #16]
 80138b6:	3208      	adds	r2, #8
 80138b8:	f10a 0a01 	add.w	sl, sl, #1
 80138bc:	106d      	asrs	r5, r5, #1
 80138be:	9204      	str	r2, [sp, #16]
 80138c0:	e7cc      	b.n	801385c <_strtod_l+0x4d4>
 80138c2:	d0ec      	beq.n	801389e <_strtod_l+0x516>
 80138c4:	426d      	negs	r5, r5
 80138c6:	f015 020f 	ands.w	r2, r5, #15
 80138ca:	d00a      	beq.n	80138e2 <_strtod_l+0x55a>
 80138cc:	4b11      	ldr	r3, [pc, #68]	; (8013914 <_strtod_l+0x58c>)
 80138ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138d2:	4640      	mov	r0, r8
 80138d4:	4649      	mov	r1, r9
 80138d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138da:	f7ec ffdf 	bl	800089c <__aeabi_ddiv>
 80138de:	4680      	mov	r8, r0
 80138e0:	4689      	mov	r9, r1
 80138e2:	112d      	asrs	r5, r5, #4
 80138e4:	d0db      	beq.n	801389e <_strtod_l+0x516>
 80138e6:	2d1f      	cmp	r5, #31
 80138e8:	dd1e      	ble.n	8013928 <_strtod_l+0x5a0>
 80138ea:	2500      	movs	r5, #0
 80138ec:	46ab      	mov	fp, r5
 80138ee:	9509      	str	r5, [sp, #36]	; 0x24
 80138f0:	9505      	str	r5, [sp, #20]
 80138f2:	2322      	movs	r3, #34	; 0x22
 80138f4:	f04f 0800 	mov.w	r8, #0
 80138f8:	f04f 0900 	mov.w	r9, #0
 80138fc:	6023      	str	r3, [r4, #0]
 80138fe:	e78d      	b.n	801381c <_strtod_l+0x494>
 8013900:	08017f2d 	.word	0x08017f2d
 8013904:	08018154 	.word	0x08018154
 8013908:	08017f25 	.word	0x08017f25
 801390c:	08017f5c 	.word	0x08017f5c
 8013910:	080182e5 	.word	0x080182e5
 8013914:	08018068 	.word	0x08018068
 8013918:	08018040 	.word	0x08018040
 801391c:	7ff00000 	.word	0x7ff00000
 8013920:	7ca00000 	.word	0x7ca00000
 8013924:	7fefffff 	.word	0x7fefffff
 8013928:	f015 0310 	ands.w	r3, r5, #16
 801392c:	bf18      	it	ne
 801392e:	236a      	movne	r3, #106	; 0x6a
 8013930:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013cd4 <_strtod_l+0x94c>
 8013934:	9304      	str	r3, [sp, #16]
 8013936:	4640      	mov	r0, r8
 8013938:	4649      	mov	r1, r9
 801393a:	2300      	movs	r3, #0
 801393c:	07ea      	lsls	r2, r5, #31
 801393e:	d504      	bpl.n	801394a <_strtod_l+0x5c2>
 8013940:	e9da 2300 	ldrd	r2, r3, [sl]
 8013944:	f7ec fe80 	bl	8000648 <__aeabi_dmul>
 8013948:	2301      	movs	r3, #1
 801394a:	106d      	asrs	r5, r5, #1
 801394c:	f10a 0a08 	add.w	sl, sl, #8
 8013950:	d1f4      	bne.n	801393c <_strtod_l+0x5b4>
 8013952:	b10b      	cbz	r3, 8013958 <_strtod_l+0x5d0>
 8013954:	4680      	mov	r8, r0
 8013956:	4689      	mov	r9, r1
 8013958:	9b04      	ldr	r3, [sp, #16]
 801395a:	b1bb      	cbz	r3, 801398c <_strtod_l+0x604>
 801395c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013960:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013964:	2b00      	cmp	r3, #0
 8013966:	4649      	mov	r1, r9
 8013968:	dd10      	ble.n	801398c <_strtod_l+0x604>
 801396a:	2b1f      	cmp	r3, #31
 801396c:	f340 811e 	ble.w	8013bac <_strtod_l+0x824>
 8013970:	2b34      	cmp	r3, #52	; 0x34
 8013972:	bfde      	ittt	le
 8013974:	f04f 33ff 	movle.w	r3, #4294967295
 8013978:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801397c:	4093      	lslle	r3, r2
 801397e:	f04f 0800 	mov.w	r8, #0
 8013982:	bfcc      	ite	gt
 8013984:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013988:	ea03 0901 	andle.w	r9, r3, r1
 801398c:	2200      	movs	r2, #0
 801398e:	2300      	movs	r3, #0
 8013990:	4640      	mov	r0, r8
 8013992:	4649      	mov	r1, r9
 8013994:	f7ed f8c0 	bl	8000b18 <__aeabi_dcmpeq>
 8013998:	2800      	cmp	r0, #0
 801399a:	d1a6      	bne.n	80138ea <_strtod_l+0x562>
 801399c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801399e:	9300      	str	r3, [sp, #0]
 80139a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139a2:	4633      	mov	r3, r6
 80139a4:	465a      	mov	r2, fp
 80139a6:	4620      	mov	r0, r4
 80139a8:	f7ff f8cc 	bl	8012b44 <__s2b>
 80139ac:	9009      	str	r0, [sp, #36]	; 0x24
 80139ae:	2800      	cmp	r0, #0
 80139b0:	f43f af2a 	beq.w	8013808 <_strtod_l+0x480>
 80139b4:	9a08      	ldr	r2, [sp, #32]
 80139b6:	9b05      	ldr	r3, [sp, #20]
 80139b8:	2a00      	cmp	r2, #0
 80139ba:	eba3 0307 	sub.w	r3, r3, r7
 80139be:	bfa8      	it	ge
 80139c0:	2300      	movge	r3, #0
 80139c2:	930c      	str	r3, [sp, #48]	; 0x30
 80139c4:	2500      	movs	r5, #0
 80139c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80139ca:	9312      	str	r3, [sp, #72]	; 0x48
 80139cc:	46ab      	mov	fp, r5
 80139ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139d0:	4620      	mov	r0, r4
 80139d2:	6859      	ldr	r1, [r3, #4]
 80139d4:	f7ff f80e 	bl	80129f4 <_Balloc>
 80139d8:	9005      	str	r0, [sp, #20]
 80139da:	2800      	cmp	r0, #0
 80139dc:	f43f af18 	beq.w	8013810 <_strtod_l+0x488>
 80139e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e2:	691a      	ldr	r2, [r3, #16]
 80139e4:	3202      	adds	r2, #2
 80139e6:	f103 010c 	add.w	r1, r3, #12
 80139ea:	0092      	lsls	r2, r2, #2
 80139ec:	300c      	adds	r0, #12
 80139ee:	f7fe f872 	bl	8011ad6 <memcpy>
 80139f2:	ec49 8b10 	vmov	d0, r8, r9
 80139f6:	aa18      	add	r2, sp, #96	; 0x60
 80139f8:	a917      	add	r1, sp, #92	; 0x5c
 80139fa:	4620      	mov	r0, r4
 80139fc:	f7ff fbd6 	bl	80131ac <__d2b>
 8013a00:	ec49 8b18 	vmov	d8, r8, r9
 8013a04:	9016      	str	r0, [sp, #88]	; 0x58
 8013a06:	2800      	cmp	r0, #0
 8013a08:	f43f af02 	beq.w	8013810 <_strtod_l+0x488>
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f7ff f930 	bl	8012c74 <__i2b>
 8013a14:	4683      	mov	fp, r0
 8013a16:	2800      	cmp	r0, #0
 8013a18:	f43f aefa 	beq.w	8013810 <_strtod_l+0x488>
 8013a1c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013a1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a20:	2e00      	cmp	r6, #0
 8013a22:	bfab      	itete	ge
 8013a24:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013a26:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013a28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013a2a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013a2e:	bfac      	ite	ge
 8013a30:	eb06 0a03 	addge.w	sl, r6, r3
 8013a34:	1b9f      	sublt	r7, r3, r6
 8013a36:	9b04      	ldr	r3, [sp, #16]
 8013a38:	1af6      	subs	r6, r6, r3
 8013a3a:	4416      	add	r6, r2
 8013a3c:	4ba0      	ldr	r3, [pc, #640]	; (8013cc0 <_strtod_l+0x938>)
 8013a3e:	3e01      	subs	r6, #1
 8013a40:	429e      	cmp	r6, r3
 8013a42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013a46:	f280 80c4 	bge.w	8013bd2 <_strtod_l+0x84a>
 8013a4a:	1b9b      	subs	r3, r3, r6
 8013a4c:	2b1f      	cmp	r3, #31
 8013a4e:	eba2 0203 	sub.w	r2, r2, r3
 8013a52:	f04f 0101 	mov.w	r1, #1
 8013a56:	f300 80b0 	bgt.w	8013bba <_strtod_l+0x832>
 8013a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8013a60:	2300      	movs	r3, #0
 8013a62:	930d      	str	r3, [sp, #52]	; 0x34
 8013a64:	eb0a 0602 	add.w	r6, sl, r2
 8013a68:	9b04      	ldr	r3, [sp, #16]
 8013a6a:	45b2      	cmp	sl, r6
 8013a6c:	4417      	add	r7, r2
 8013a6e:	441f      	add	r7, r3
 8013a70:	4653      	mov	r3, sl
 8013a72:	bfa8      	it	ge
 8013a74:	4633      	movge	r3, r6
 8013a76:	42bb      	cmp	r3, r7
 8013a78:	bfa8      	it	ge
 8013a7a:	463b      	movge	r3, r7
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	bfc2      	ittt	gt
 8013a80:	1af6      	subgt	r6, r6, r3
 8013a82:	1aff      	subgt	r7, r7, r3
 8013a84:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	dd17      	ble.n	8013abe <_strtod_l+0x736>
 8013a8e:	4659      	mov	r1, fp
 8013a90:	461a      	mov	r2, r3
 8013a92:	4620      	mov	r0, r4
 8013a94:	f7ff f9ae 	bl	8012df4 <__pow5mult>
 8013a98:	4683      	mov	fp, r0
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	f43f aeb8 	beq.w	8013810 <_strtod_l+0x488>
 8013aa0:	4601      	mov	r1, r0
 8013aa2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013aa4:	4620      	mov	r0, r4
 8013aa6:	f7ff f8fb 	bl	8012ca0 <__multiply>
 8013aaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8013aac:	2800      	cmp	r0, #0
 8013aae:	f43f aeaf 	beq.w	8013810 <_strtod_l+0x488>
 8013ab2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f7fe ffdd 	bl	8012a74 <_Bfree>
 8013aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013abc:	9316      	str	r3, [sp, #88]	; 0x58
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	f300 808c 	bgt.w	8013bdc <_strtod_l+0x854>
 8013ac4:	9b08      	ldr	r3, [sp, #32]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	dd08      	ble.n	8013adc <_strtod_l+0x754>
 8013aca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013acc:	9905      	ldr	r1, [sp, #20]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7ff f990 	bl	8012df4 <__pow5mult>
 8013ad4:	9005      	str	r0, [sp, #20]
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	f43f ae9a 	beq.w	8013810 <_strtod_l+0x488>
 8013adc:	2f00      	cmp	r7, #0
 8013ade:	dd08      	ble.n	8013af2 <_strtod_l+0x76a>
 8013ae0:	9905      	ldr	r1, [sp, #20]
 8013ae2:	463a      	mov	r2, r7
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	f7ff f9df 	bl	8012ea8 <__lshift>
 8013aea:	9005      	str	r0, [sp, #20]
 8013aec:	2800      	cmp	r0, #0
 8013aee:	f43f ae8f 	beq.w	8013810 <_strtod_l+0x488>
 8013af2:	f1ba 0f00 	cmp.w	sl, #0
 8013af6:	dd08      	ble.n	8013b0a <_strtod_l+0x782>
 8013af8:	4659      	mov	r1, fp
 8013afa:	4652      	mov	r2, sl
 8013afc:	4620      	mov	r0, r4
 8013afe:	f7ff f9d3 	bl	8012ea8 <__lshift>
 8013b02:	4683      	mov	fp, r0
 8013b04:	2800      	cmp	r0, #0
 8013b06:	f43f ae83 	beq.w	8013810 <_strtod_l+0x488>
 8013b0a:	9a05      	ldr	r2, [sp, #20]
 8013b0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013b0e:	4620      	mov	r0, r4
 8013b10:	f7ff fa52 	bl	8012fb8 <__mdiff>
 8013b14:	4605      	mov	r5, r0
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f43f ae7a 	beq.w	8013810 <_strtod_l+0x488>
 8013b1c:	68c3      	ldr	r3, [r0, #12]
 8013b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b20:	2300      	movs	r3, #0
 8013b22:	60c3      	str	r3, [r0, #12]
 8013b24:	4659      	mov	r1, fp
 8013b26:	f7ff fa2b 	bl	8012f80 <__mcmp>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	da60      	bge.n	8013bf0 <_strtod_l+0x868>
 8013b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b30:	ea53 0308 	orrs.w	r3, r3, r8
 8013b34:	f040 8084 	bne.w	8013c40 <_strtod_l+0x8b8>
 8013b38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d17f      	bne.n	8013c40 <_strtod_l+0x8b8>
 8013b40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013b44:	0d1b      	lsrs	r3, r3, #20
 8013b46:	051b      	lsls	r3, r3, #20
 8013b48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013b4c:	d978      	bls.n	8013c40 <_strtod_l+0x8b8>
 8013b4e:	696b      	ldr	r3, [r5, #20]
 8013b50:	b913      	cbnz	r3, 8013b58 <_strtod_l+0x7d0>
 8013b52:	692b      	ldr	r3, [r5, #16]
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	dd73      	ble.n	8013c40 <_strtod_l+0x8b8>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f7ff f9a3 	bl	8012ea8 <__lshift>
 8013b62:	4659      	mov	r1, fp
 8013b64:	4605      	mov	r5, r0
 8013b66:	f7ff fa0b 	bl	8012f80 <__mcmp>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	dd68      	ble.n	8013c40 <_strtod_l+0x8b8>
 8013b6e:	9904      	ldr	r1, [sp, #16]
 8013b70:	4a54      	ldr	r2, [pc, #336]	; (8013cc4 <_strtod_l+0x93c>)
 8013b72:	464b      	mov	r3, r9
 8013b74:	2900      	cmp	r1, #0
 8013b76:	f000 8084 	beq.w	8013c82 <_strtod_l+0x8fa>
 8013b7a:	ea02 0109 	and.w	r1, r2, r9
 8013b7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b82:	dc7e      	bgt.n	8013c82 <_strtod_l+0x8fa>
 8013b84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b88:	f77f aeb3 	ble.w	80138f2 <_strtod_l+0x56a>
 8013b8c:	4b4e      	ldr	r3, [pc, #312]	; (8013cc8 <_strtod_l+0x940>)
 8013b8e:	4640      	mov	r0, r8
 8013b90:	4649      	mov	r1, r9
 8013b92:	2200      	movs	r2, #0
 8013b94:	f7ec fd58 	bl	8000648 <__aeabi_dmul>
 8013b98:	4b4a      	ldr	r3, [pc, #296]	; (8013cc4 <_strtod_l+0x93c>)
 8013b9a:	400b      	ands	r3, r1
 8013b9c:	4680      	mov	r8, r0
 8013b9e:	4689      	mov	r9, r1
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f47f ae3f 	bne.w	8013824 <_strtod_l+0x49c>
 8013ba6:	2322      	movs	r3, #34	; 0x22
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	e63b      	b.n	8013824 <_strtod_l+0x49c>
 8013bac:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb4:	ea03 0808 	and.w	r8, r3, r8
 8013bb8:	e6e8      	b.n	801398c <_strtod_l+0x604>
 8013bba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013bbe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013bc2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013bc6:	36e2      	adds	r6, #226	; 0xe2
 8013bc8:	fa01 f306 	lsl.w	r3, r1, r6
 8013bcc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013bd0:	e748      	b.n	8013a64 <_strtod_l+0x6dc>
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013bda:	e743      	b.n	8013a64 <_strtod_l+0x6dc>
 8013bdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013bde:	4632      	mov	r2, r6
 8013be0:	4620      	mov	r0, r4
 8013be2:	f7ff f961 	bl	8012ea8 <__lshift>
 8013be6:	9016      	str	r0, [sp, #88]	; 0x58
 8013be8:	2800      	cmp	r0, #0
 8013bea:	f47f af6b 	bne.w	8013ac4 <_strtod_l+0x73c>
 8013bee:	e60f      	b.n	8013810 <_strtod_l+0x488>
 8013bf0:	46ca      	mov	sl, r9
 8013bf2:	d171      	bne.n	8013cd8 <_strtod_l+0x950>
 8013bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013bf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bfa:	b352      	cbz	r2, 8013c52 <_strtod_l+0x8ca>
 8013bfc:	4a33      	ldr	r2, [pc, #204]	; (8013ccc <_strtod_l+0x944>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d12a      	bne.n	8013c58 <_strtod_l+0x8d0>
 8013c02:	9b04      	ldr	r3, [sp, #16]
 8013c04:	4641      	mov	r1, r8
 8013c06:	b1fb      	cbz	r3, 8013c48 <_strtod_l+0x8c0>
 8013c08:	4b2e      	ldr	r3, [pc, #184]	; (8013cc4 <_strtod_l+0x93c>)
 8013c0a:	ea09 0303 	and.w	r3, r9, r3
 8013c0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013c12:	f04f 32ff 	mov.w	r2, #4294967295
 8013c16:	d81a      	bhi.n	8013c4e <_strtod_l+0x8c6>
 8013c18:	0d1b      	lsrs	r3, r3, #20
 8013c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c22:	4299      	cmp	r1, r3
 8013c24:	d118      	bne.n	8013c58 <_strtod_l+0x8d0>
 8013c26:	4b2a      	ldr	r3, [pc, #168]	; (8013cd0 <_strtod_l+0x948>)
 8013c28:	459a      	cmp	sl, r3
 8013c2a:	d102      	bne.n	8013c32 <_strtod_l+0x8aa>
 8013c2c:	3101      	adds	r1, #1
 8013c2e:	f43f adef 	beq.w	8013810 <_strtod_l+0x488>
 8013c32:	4b24      	ldr	r3, [pc, #144]	; (8013cc4 <_strtod_l+0x93c>)
 8013c34:	ea0a 0303 	and.w	r3, sl, r3
 8013c38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013c3c:	f04f 0800 	mov.w	r8, #0
 8013c40:	9b04      	ldr	r3, [sp, #16]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d1a2      	bne.n	8013b8c <_strtod_l+0x804>
 8013c46:	e5ed      	b.n	8013824 <_strtod_l+0x49c>
 8013c48:	f04f 33ff 	mov.w	r3, #4294967295
 8013c4c:	e7e9      	b.n	8013c22 <_strtod_l+0x89a>
 8013c4e:	4613      	mov	r3, r2
 8013c50:	e7e7      	b.n	8013c22 <_strtod_l+0x89a>
 8013c52:	ea53 0308 	orrs.w	r3, r3, r8
 8013c56:	d08a      	beq.n	8013b6e <_strtod_l+0x7e6>
 8013c58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c5a:	b1e3      	cbz	r3, 8013c96 <_strtod_l+0x90e>
 8013c5c:	ea13 0f0a 	tst.w	r3, sl
 8013c60:	d0ee      	beq.n	8013c40 <_strtod_l+0x8b8>
 8013c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c64:	9a04      	ldr	r2, [sp, #16]
 8013c66:	4640      	mov	r0, r8
 8013c68:	4649      	mov	r1, r9
 8013c6a:	b1c3      	cbz	r3, 8013c9e <_strtod_l+0x916>
 8013c6c:	f7ff fb6f 	bl	801334e <sulp>
 8013c70:	4602      	mov	r2, r0
 8013c72:	460b      	mov	r3, r1
 8013c74:	ec51 0b18 	vmov	r0, r1, d8
 8013c78:	f7ec fb30 	bl	80002dc <__adddf3>
 8013c7c:	4680      	mov	r8, r0
 8013c7e:	4689      	mov	r9, r1
 8013c80:	e7de      	b.n	8013c40 <_strtod_l+0x8b8>
 8013c82:	4013      	ands	r3, r2
 8013c84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013c8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013c90:	f04f 38ff 	mov.w	r8, #4294967295
 8013c94:	e7d4      	b.n	8013c40 <_strtod_l+0x8b8>
 8013c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c98:	ea13 0f08 	tst.w	r3, r8
 8013c9c:	e7e0      	b.n	8013c60 <_strtod_l+0x8d8>
 8013c9e:	f7ff fb56 	bl	801334e <sulp>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	ec51 0b18 	vmov	r0, r1, d8
 8013caa:	f7ec fb15 	bl	80002d8 <__aeabi_dsub>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4680      	mov	r8, r0
 8013cb4:	4689      	mov	r9, r1
 8013cb6:	f7ec ff2f 	bl	8000b18 <__aeabi_dcmpeq>
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d0c0      	beq.n	8013c40 <_strtod_l+0x8b8>
 8013cbe:	e618      	b.n	80138f2 <_strtod_l+0x56a>
 8013cc0:	fffffc02 	.word	0xfffffc02
 8013cc4:	7ff00000 	.word	0x7ff00000
 8013cc8:	39500000 	.word	0x39500000
 8013ccc:	000fffff 	.word	0x000fffff
 8013cd0:	7fefffff 	.word	0x7fefffff
 8013cd4:	08018168 	.word	0x08018168
 8013cd8:	4659      	mov	r1, fp
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f7ff fac0 	bl	8013260 <__ratio>
 8013ce0:	ec57 6b10 	vmov	r6, r7, d0
 8013ce4:	ee10 0a10 	vmov	r0, s0
 8013ce8:	2200      	movs	r2, #0
 8013cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013cee:	4639      	mov	r1, r7
 8013cf0:	f7ec ff26 	bl	8000b40 <__aeabi_dcmple>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d071      	beq.n	8013ddc <_strtod_l+0xa54>
 8013cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d17c      	bne.n	8013df8 <_strtod_l+0xa70>
 8013cfe:	f1b8 0f00 	cmp.w	r8, #0
 8013d02:	d15a      	bne.n	8013dba <_strtod_l+0xa32>
 8013d04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d15d      	bne.n	8013dc8 <_strtod_l+0xa40>
 8013d0c:	4b90      	ldr	r3, [pc, #576]	; (8013f50 <_strtod_l+0xbc8>)
 8013d0e:	2200      	movs	r2, #0
 8013d10:	4630      	mov	r0, r6
 8013d12:	4639      	mov	r1, r7
 8013d14:	f7ec ff0a 	bl	8000b2c <__aeabi_dcmplt>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d15c      	bne.n	8013dd6 <_strtod_l+0xa4e>
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	4639      	mov	r1, r7
 8013d20:	4b8c      	ldr	r3, [pc, #560]	; (8013f54 <_strtod_l+0xbcc>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	f7ec fc90 	bl	8000648 <__aeabi_dmul>
 8013d28:	4606      	mov	r6, r0
 8013d2a:	460f      	mov	r7, r1
 8013d2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013d30:	9606      	str	r6, [sp, #24]
 8013d32:	9307      	str	r3, [sp, #28]
 8013d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013d3c:	4b86      	ldr	r3, [pc, #536]	; (8013f58 <_strtod_l+0xbd0>)
 8013d3e:	ea0a 0303 	and.w	r3, sl, r3
 8013d42:	930d      	str	r3, [sp, #52]	; 0x34
 8013d44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d46:	4b85      	ldr	r3, [pc, #532]	; (8013f5c <_strtod_l+0xbd4>)
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	f040 8090 	bne.w	8013e6e <_strtod_l+0xae6>
 8013d4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013d52:	ec49 8b10 	vmov	d0, r8, r9
 8013d56:	f7ff f9b9 	bl	80130cc <__ulp>
 8013d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d5e:	ec51 0b10 	vmov	r0, r1, d0
 8013d62:	f7ec fc71 	bl	8000648 <__aeabi_dmul>
 8013d66:	4642      	mov	r2, r8
 8013d68:	464b      	mov	r3, r9
 8013d6a:	f7ec fab7 	bl	80002dc <__adddf3>
 8013d6e:	460b      	mov	r3, r1
 8013d70:	4979      	ldr	r1, [pc, #484]	; (8013f58 <_strtod_l+0xbd0>)
 8013d72:	4a7b      	ldr	r2, [pc, #492]	; (8013f60 <_strtod_l+0xbd8>)
 8013d74:	4019      	ands	r1, r3
 8013d76:	4291      	cmp	r1, r2
 8013d78:	4680      	mov	r8, r0
 8013d7a:	d944      	bls.n	8013e06 <_strtod_l+0xa7e>
 8013d7c:	ee18 2a90 	vmov	r2, s17
 8013d80:	4b78      	ldr	r3, [pc, #480]	; (8013f64 <_strtod_l+0xbdc>)
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d104      	bne.n	8013d90 <_strtod_l+0xa08>
 8013d86:	ee18 3a10 	vmov	r3, s16
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	f43f ad40 	beq.w	8013810 <_strtod_l+0x488>
 8013d90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013f64 <_strtod_l+0xbdc>
 8013d94:	f04f 38ff 	mov.w	r8, #4294967295
 8013d98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d9a:	4620      	mov	r0, r4
 8013d9c:	f7fe fe6a 	bl	8012a74 <_Bfree>
 8013da0:	9905      	ldr	r1, [sp, #20]
 8013da2:	4620      	mov	r0, r4
 8013da4:	f7fe fe66 	bl	8012a74 <_Bfree>
 8013da8:	4659      	mov	r1, fp
 8013daa:	4620      	mov	r0, r4
 8013dac:	f7fe fe62 	bl	8012a74 <_Bfree>
 8013db0:	4629      	mov	r1, r5
 8013db2:	4620      	mov	r0, r4
 8013db4:	f7fe fe5e 	bl	8012a74 <_Bfree>
 8013db8:	e609      	b.n	80139ce <_strtod_l+0x646>
 8013dba:	f1b8 0f01 	cmp.w	r8, #1
 8013dbe:	d103      	bne.n	8013dc8 <_strtod_l+0xa40>
 8013dc0:	f1b9 0f00 	cmp.w	r9, #0
 8013dc4:	f43f ad95 	beq.w	80138f2 <_strtod_l+0x56a>
 8013dc8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013f20 <_strtod_l+0xb98>
 8013dcc:	4f60      	ldr	r7, [pc, #384]	; (8013f50 <_strtod_l+0xbc8>)
 8013dce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013dd2:	2600      	movs	r6, #0
 8013dd4:	e7ae      	b.n	8013d34 <_strtod_l+0x9ac>
 8013dd6:	4f5f      	ldr	r7, [pc, #380]	; (8013f54 <_strtod_l+0xbcc>)
 8013dd8:	2600      	movs	r6, #0
 8013dda:	e7a7      	b.n	8013d2c <_strtod_l+0x9a4>
 8013ddc:	4b5d      	ldr	r3, [pc, #372]	; (8013f54 <_strtod_l+0xbcc>)
 8013dde:	4630      	mov	r0, r6
 8013de0:	4639      	mov	r1, r7
 8013de2:	2200      	movs	r2, #0
 8013de4:	f7ec fc30 	bl	8000648 <__aeabi_dmul>
 8013de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dea:	4606      	mov	r6, r0
 8013dec:	460f      	mov	r7, r1
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d09c      	beq.n	8013d2c <_strtod_l+0x9a4>
 8013df2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013df6:	e79d      	b.n	8013d34 <_strtod_l+0x9ac>
 8013df8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013f28 <_strtod_l+0xba0>
 8013dfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013e00:	ec57 6b17 	vmov	r6, r7, d7
 8013e04:	e796      	b.n	8013d34 <_strtod_l+0x9ac>
 8013e06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013e0a:	9b04      	ldr	r3, [sp, #16]
 8013e0c:	46ca      	mov	sl, r9
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d1c2      	bne.n	8013d98 <_strtod_l+0xa10>
 8013e12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013e16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e18:	0d1b      	lsrs	r3, r3, #20
 8013e1a:	051b      	lsls	r3, r3, #20
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d1bb      	bne.n	8013d98 <_strtod_l+0xa10>
 8013e20:	4630      	mov	r0, r6
 8013e22:	4639      	mov	r1, r7
 8013e24:	f7ec ff70 	bl	8000d08 <__aeabi_d2lz>
 8013e28:	f7ec fbe0 	bl	80005ec <__aeabi_l2d>
 8013e2c:	4602      	mov	r2, r0
 8013e2e:	460b      	mov	r3, r1
 8013e30:	4630      	mov	r0, r6
 8013e32:	4639      	mov	r1, r7
 8013e34:	f7ec fa50 	bl	80002d8 <__aeabi_dsub>
 8013e38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e3e:	ea43 0308 	orr.w	r3, r3, r8
 8013e42:	4313      	orrs	r3, r2
 8013e44:	4606      	mov	r6, r0
 8013e46:	460f      	mov	r7, r1
 8013e48:	d054      	beq.n	8013ef4 <_strtod_l+0xb6c>
 8013e4a:	a339      	add	r3, pc, #228	; (adr r3, 8013f30 <_strtod_l+0xba8>)
 8013e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e50:	f7ec fe6c 	bl	8000b2c <__aeabi_dcmplt>
 8013e54:	2800      	cmp	r0, #0
 8013e56:	f47f ace5 	bne.w	8013824 <_strtod_l+0x49c>
 8013e5a:	a337      	add	r3, pc, #220	; (adr r3, 8013f38 <_strtod_l+0xbb0>)
 8013e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e60:	4630      	mov	r0, r6
 8013e62:	4639      	mov	r1, r7
 8013e64:	f7ec fe80 	bl	8000b68 <__aeabi_dcmpgt>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d095      	beq.n	8013d98 <_strtod_l+0xa10>
 8013e6c:	e4da      	b.n	8013824 <_strtod_l+0x49c>
 8013e6e:	9b04      	ldr	r3, [sp, #16]
 8013e70:	b333      	cbz	r3, 8013ec0 <_strtod_l+0xb38>
 8013e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e78:	d822      	bhi.n	8013ec0 <_strtod_l+0xb38>
 8013e7a:	a331      	add	r3, pc, #196	; (adr r3, 8013f40 <_strtod_l+0xbb8>)
 8013e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e80:	4630      	mov	r0, r6
 8013e82:	4639      	mov	r1, r7
 8013e84:	f7ec fe5c 	bl	8000b40 <__aeabi_dcmple>
 8013e88:	b1a0      	cbz	r0, 8013eb4 <_strtod_l+0xb2c>
 8013e8a:	4639      	mov	r1, r7
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	f7ec feb3 	bl	8000bf8 <__aeabi_d2uiz>
 8013e92:	2801      	cmp	r0, #1
 8013e94:	bf38      	it	cc
 8013e96:	2001      	movcc	r0, #1
 8013e98:	f7ec fb5c 	bl	8000554 <__aeabi_ui2d>
 8013e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	460f      	mov	r7, r1
 8013ea2:	bb23      	cbnz	r3, 8013eee <_strtod_l+0xb66>
 8013ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ea8:	9010      	str	r0, [sp, #64]	; 0x40
 8013eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8013eac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013eb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013eb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013ebc:	1a9b      	subs	r3, r3, r2
 8013ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ec0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8013ec8:	eef0 0a68 	vmov.f32	s1, s17
 8013ecc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013ed0:	f7ff f8fc 	bl	80130cc <__ulp>
 8013ed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013ed8:	ec53 2b10 	vmov	r2, r3, d0
 8013edc:	f7ec fbb4 	bl	8000648 <__aeabi_dmul>
 8013ee0:	ec53 2b18 	vmov	r2, r3, d8
 8013ee4:	f7ec f9fa 	bl	80002dc <__adddf3>
 8013ee8:	4680      	mov	r8, r0
 8013eea:	4689      	mov	r9, r1
 8013eec:	e78d      	b.n	8013e0a <_strtod_l+0xa82>
 8013eee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013ef2:	e7db      	b.n	8013eac <_strtod_l+0xb24>
 8013ef4:	a314      	add	r3, pc, #80	; (adr r3, 8013f48 <_strtod_l+0xbc0>)
 8013ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013efa:	f7ec fe17 	bl	8000b2c <__aeabi_dcmplt>
 8013efe:	e7b3      	b.n	8013e68 <_strtod_l+0xae0>
 8013f00:	2300      	movs	r3, #0
 8013f02:	930a      	str	r3, [sp, #40]	; 0x28
 8013f04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f08:	6013      	str	r3, [r2, #0]
 8013f0a:	f7ff ba7c 	b.w	8013406 <_strtod_l+0x7e>
 8013f0e:	2a65      	cmp	r2, #101	; 0x65
 8013f10:	f43f ab75 	beq.w	80135fe <_strtod_l+0x276>
 8013f14:	2a45      	cmp	r2, #69	; 0x45
 8013f16:	f43f ab72 	beq.w	80135fe <_strtod_l+0x276>
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	f7ff bbaa 	b.w	8013674 <_strtod_l+0x2ec>
 8013f20:	00000000 	.word	0x00000000
 8013f24:	bff00000 	.word	0xbff00000
 8013f28:	00000000 	.word	0x00000000
 8013f2c:	3ff00000 	.word	0x3ff00000
 8013f30:	94a03595 	.word	0x94a03595
 8013f34:	3fdfffff 	.word	0x3fdfffff
 8013f38:	35afe535 	.word	0x35afe535
 8013f3c:	3fe00000 	.word	0x3fe00000
 8013f40:	ffc00000 	.word	0xffc00000
 8013f44:	41dfffff 	.word	0x41dfffff
 8013f48:	94a03595 	.word	0x94a03595
 8013f4c:	3fcfffff 	.word	0x3fcfffff
 8013f50:	3ff00000 	.word	0x3ff00000
 8013f54:	3fe00000 	.word	0x3fe00000
 8013f58:	7ff00000 	.word	0x7ff00000
 8013f5c:	7fe00000 	.word	0x7fe00000
 8013f60:	7c9fffff 	.word	0x7c9fffff
 8013f64:	7fefffff 	.word	0x7fefffff

08013f68 <_strtod_r>:
 8013f68:	4b01      	ldr	r3, [pc, #4]	; (8013f70 <_strtod_r+0x8>)
 8013f6a:	f7ff ba0d 	b.w	8013388 <_strtod_l>
 8013f6e:	bf00      	nop
 8013f70:	20000270 	.word	0x20000270

08013f74 <_strtol_l.constprop.0>:
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f7a:	d001      	beq.n	8013f80 <_strtol_l.constprop.0+0xc>
 8013f7c:	2b24      	cmp	r3, #36	; 0x24
 8013f7e:	d906      	bls.n	8013f8e <_strtol_l.constprop.0+0x1a>
 8013f80:	f7fd fd7c 	bl	8011a7c <__errno>
 8013f84:	2316      	movs	r3, #22
 8013f86:	6003      	str	r3, [r0, #0]
 8013f88:	2000      	movs	r0, #0
 8013f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014074 <_strtol_l.constprop.0+0x100>
 8013f92:	460d      	mov	r5, r1
 8013f94:	462e      	mov	r6, r5
 8013f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013f9e:	f017 0708 	ands.w	r7, r7, #8
 8013fa2:	d1f7      	bne.n	8013f94 <_strtol_l.constprop.0+0x20>
 8013fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8013fa6:	d132      	bne.n	801400e <_strtol_l.constprop.0+0x9a>
 8013fa8:	782c      	ldrb	r4, [r5, #0]
 8013faa:	2701      	movs	r7, #1
 8013fac:	1cb5      	adds	r5, r6, #2
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d05b      	beq.n	801406a <_strtol_l.constprop.0+0xf6>
 8013fb2:	2b10      	cmp	r3, #16
 8013fb4:	d109      	bne.n	8013fca <_strtol_l.constprop.0+0x56>
 8013fb6:	2c30      	cmp	r4, #48	; 0x30
 8013fb8:	d107      	bne.n	8013fca <_strtol_l.constprop.0+0x56>
 8013fba:	782c      	ldrb	r4, [r5, #0]
 8013fbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013fc0:	2c58      	cmp	r4, #88	; 0x58
 8013fc2:	d14d      	bne.n	8014060 <_strtol_l.constprop.0+0xec>
 8013fc4:	786c      	ldrb	r4, [r5, #1]
 8013fc6:	2310      	movs	r3, #16
 8013fc8:	3502      	adds	r5, #2
 8013fca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8013fd2:	f04f 0e00 	mov.w	lr, #0
 8013fd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8013fda:	4676      	mov	r6, lr
 8013fdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8013fe0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013fe4:	f1bc 0f09 	cmp.w	ip, #9
 8013fe8:	d816      	bhi.n	8014018 <_strtol_l.constprop.0+0xa4>
 8013fea:	4664      	mov	r4, ip
 8013fec:	42a3      	cmp	r3, r4
 8013fee:	dd24      	ble.n	801403a <_strtol_l.constprop.0+0xc6>
 8013ff0:	f1be 3fff 	cmp.w	lr, #4294967295
 8013ff4:	d008      	beq.n	8014008 <_strtol_l.constprop.0+0x94>
 8013ff6:	45b1      	cmp	r9, r6
 8013ff8:	d31c      	bcc.n	8014034 <_strtol_l.constprop.0+0xc0>
 8013ffa:	d101      	bne.n	8014000 <_strtol_l.constprop.0+0x8c>
 8013ffc:	45a2      	cmp	sl, r4
 8013ffe:	db19      	blt.n	8014034 <_strtol_l.constprop.0+0xc0>
 8014000:	fb06 4603 	mla	r6, r6, r3, r4
 8014004:	f04f 0e01 	mov.w	lr, #1
 8014008:	f815 4b01 	ldrb.w	r4, [r5], #1
 801400c:	e7e8      	b.n	8013fe0 <_strtol_l.constprop.0+0x6c>
 801400e:	2c2b      	cmp	r4, #43	; 0x2b
 8014010:	bf04      	itt	eq
 8014012:	782c      	ldrbeq	r4, [r5, #0]
 8014014:	1cb5      	addeq	r5, r6, #2
 8014016:	e7ca      	b.n	8013fae <_strtol_l.constprop.0+0x3a>
 8014018:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801401c:	f1bc 0f19 	cmp.w	ip, #25
 8014020:	d801      	bhi.n	8014026 <_strtol_l.constprop.0+0xb2>
 8014022:	3c37      	subs	r4, #55	; 0x37
 8014024:	e7e2      	b.n	8013fec <_strtol_l.constprop.0+0x78>
 8014026:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801402a:	f1bc 0f19 	cmp.w	ip, #25
 801402e:	d804      	bhi.n	801403a <_strtol_l.constprop.0+0xc6>
 8014030:	3c57      	subs	r4, #87	; 0x57
 8014032:	e7db      	b.n	8013fec <_strtol_l.constprop.0+0x78>
 8014034:	f04f 3eff 	mov.w	lr, #4294967295
 8014038:	e7e6      	b.n	8014008 <_strtol_l.constprop.0+0x94>
 801403a:	f1be 3fff 	cmp.w	lr, #4294967295
 801403e:	d105      	bne.n	801404c <_strtol_l.constprop.0+0xd8>
 8014040:	2322      	movs	r3, #34	; 0x22
 8014042:	6003      	str	r3, [r0, #0]
 8014044:	4646      	mov	r6, r8
 8014046:	b942      	cbnz	r2, 801405a <_strtol_l.constprop.0+0xe6>
 8014048:	4630      	mov	r0, r6
 801404a:	e79e      	b.n	8013f8a <_strtol_l.constprop.0+0x16>
 801404c:	b107      	cbz	r7, 8014050 <_strtol_l.constprop.0+0xdc>
 801404e:	4276      	negs	r6, r6
 8014050:	2a00      	cmp	r2, #0
 8014052:	d0f9      	beq.n	8014048 <_strtol_l.constprop.0+0xd4>
 8014054:	f1be 0f00 	cmp.w	lr, #0
 8014058:	d000      	beq.n	801405c <_strtol_l.constprop.0+0xe8>
 801405a:	1e69      	subs	r1, r5, #1
 801405c:	6011      	str	r1, [r2, #0]
 801405e:	e7f3      	b.n	8014048 <_strtol_l.constprop.0+0xd4>
 8014060:	2430      	movs	r4, #48	; 0x30
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1b1      	bne.n	8013fca <_strtol_l.constprop.0+0x56>
 8014066:	2308      	movs	r3, #8
 8014068:	e7af      	b.n	8013fca <_strtol_l.constprop.0+0x56>
 801406a:	2c30      	cmp	r4, #48	; 0x30
 801406c:	d0a5      	beq.n	8013fba <_strtol_l.constprop.0+0x46>
 801406e:	230a      	movs	r3, #10
 8014070:	e7ab      	b.n	8013fca <_strtol_l.constprop.0+0x56>
 8014072:	bf00      	nop
 8014074:	08018191 	.word	0x08018191

08014078 <_strtol_r>:
 8014078:	f7ff bf7c 	b.w	8013f74 <_strtol_l.constprop.0>

0801407c <__ssputs_r>:
 801407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014080:	688e      	ldr	r6, [r1, #8]
 8014082:	461f      	mov	r7, r3
 8014084:	42be      	cmp	r6, r7
 8014086:	680b      	ldr	r3, [r1, #0]
 8014088:	4682      	mov	sl, r0
 801408a:	460c      	mov	r4, r1
 801408c:	4690      	mov	r8, r2
 801408e:	d82c      	bhi.n	80140ea <__ssputs_r+0x6e>
 8014090:	898a      	ldrh	r2, [r1, #12]
 8014092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014096:	d026      	beq.n	80140e6 <__ssputs_r+0x6a>
 8014098:	6965      	ldr	r5, [r4, #20]
 801409a:	6909      	ldr	r1, [r1, #16]
 801409c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140a0:	eba3 0901 	sub.w	r9, r3, r1
 80140a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140a8:	1c7b      	adds	r3, r7, #1
 80140aa:	444b      	add	r3, r9
 80140ac:	106d      	asrs	r5, r5, #1
 80140ae:	429d      	cmp	r5, r3
 80140b0:	bf38      	it	cc
 80140b2:	461d      	movcc	r5, r3
 80140b4:	0553      	lsls	r3, r2, #21
 80140b6:	d527      	bpl.n	8014108 <__ssputs_r+0x8c>
 80140b8:	4629      	mov	r1, r5
 80140ba:	f7fe fc0f 	bl	80128dc <_malloc_r>
 80140be:	4606      	mov	r6, r0
 80140c0:	b360      	cbz	r0, 801411c <__ssputs_r+0xa0>
 80140c2:	6921      	ldr	r1, [r4, #16]
 80140c4:	464a      	mov	r2, r9
 80140c6:	f7fd fd06 	bl	8011ad6 <memcpy>
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80140d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140d4:	81a3      	strh	r3, [r4, #12]
 80140d6:	6126      	str	r6, [r4, #16]
 80140d8:	6165      	str	r5, [r4, #20]
 80140da:	444e      	add	r6, r9
 80140dc:	eba5 0509 	sub.w	r5, r5, r9
 80140e0:	6026      	str	r6, [r4, #0]
 80140e2:	60a5      	str	r5, [r4, #8]
 80140e4:	463e      	mov	r6, r7
 80140e6:	42be      	cmp	r6, r7
 80140e8:	d900      	bls.n	80140ec <__ssputs_r+0x70>
 80140ea:	463e      	mov	r6, r7
 80140ec:	6820      	ldr	r0, [r4, #0]
 80140ee:	4632      	mov	r2, r6
 80140f0:	4641      	mov	r1, r8
 80140f2:	f000 f9c9 	bl	8014488 <memmove>
 80140f6:	68a3      	ldr	r3, [r4, #8]
 80140f8:	1b9b      	subs	r3, r3, r6
 80140fa:	60a3      	str	r3, [r4, #8]
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	4433      	add	r3, r6
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	2000      	movs	r0, #0
 8014104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014108:	462a      	mov	r2, r5
 801410a:	f000 fd9e 	bl	8014c4a <_realloc_r>
 801410e:	4606      	mov	r6, r0
 8014110:	2800      	cmp	r0, #0
 8014112:	d1e0      	bne.n	80140d6 <__ssputs_r+0x5a>
 8014114:	6921      	ldr	r1, [r4, #16]
 8014116:	4650      	mov	r0, sl
 8014118:	f7fe fb6c 	bl	80127f4 <_free_r>
 801411c:	230c      	movs	r3, #12
 801411e:	f8ca 3000 	str.w	r3, [sl]
 8014122:	89a3      	ldrh	r3, [r4, #12]
 8014124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014128:	81a3      	strh	r3, [r4, #12]
 801412a:	f04f 30ff 	mov.w	r0, #4294967295
 801412e:	e7e9      	b.n	8014104 <__ssputs_r+0x88>

08014130 <_svfiprintf_r>:
 8014130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014134:	4698      	mov	r8, r3
 8014136:	898b      	ldrh	r3, [r1, #12]
 8014138:	061b      	lsls	r3, r3, #24
 801413a:	b09d      	sub	sp, #116	; 0x74
 801413c:	4607      	mov	r7, r0
 801413e:	460d      	mov	r5, r1
 8014140:	4614      	mov	r4, r2
 8014142:	d50e      	bpl.n	8014162 <_svfiprintf_r+0x32>
 8014144:	690b      	ldr	r3, [r1, #16]
 8014146:	b963      	cbnz	r3, 8014162 <_svfiprintf_r+0x32>
 8014148:	2140      	movs	r1, #64	; 0x40
 801414a:	f7fe fbc7 	bl	80128dc <_malloc_r>
 801414e:	6028      	str	r0, [r5, #0]
 8014150:	6128      	str	r0, [r5, #16]
 8014152:	b920      	cbnz	r0, 801415e <_svfiprintf_r+0x2e>
 8014154:	230c      	movs	r3, #12
 8014156:	603b      	str	r3, [r7, #0]
 8014158:	f04f 30ff 	mov.w	r0, #4294967295
 801415c:	e0d0      	b.n	8014300 <_svfiprintf_r+0x1d0>
 801415e:	2340      	movs	r3, #64	; 0x40
 8014160:	616b      	str	r3, [r5, #20]
 8014162:	2300      	movs	r3, #0
 8014164:	9309      	str	r3, [sp, #36]	; 0x24
 8014166:	2320      	movs	r3, #32
 8014168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801416c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014170:	2330      	movs	r3, #48	; 0x30
 8014172:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014318 <_svfiprintf_r+0x1e8>
 8014176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801417a:	f04f 0901 	mov.w	r9, #1
 801417e:	4623      	mov	r3, r4
 8014180:	469a      	mov	sl, r3
 8014182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014186:	b10a      	cbz	r2, 801418c <_svfiprintf_r+0x5c>
 8014188:	2a25      	cmp	r2, #37	; 0x25
 801418a:	d1f9      	bne.n	8014180 <_svfiprintf_r+0x50>
 801418c:	ebba 0b04 	subs.w	fp, sl, r4
 8014190:	d00b      	beq.n	80141aa <_svfiprintf_r+0x7a>
 8014192:	465b      	mov	r3, fp
 8014194:	4622      	mov	r2, r4
 8014196:	4629      	mov	r1, r5
 8014198:	4638      	mov	r0, r7
 801419a:	f7ff ff6f 	bl	801407c <__ssputs_r>
 801419e:	3001      	adds	r0, #1
 80141a0:	f000 80a9 	beq.w	80142f6 <_svfiprintf_r+0x1c6>
 80141a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141a6:	445a      	add	r2, fp
 80141a8:	9209      	str	r2, [sp, #36]	; 0x24
 80141aa:	f89a 3000 	ldrb.w	r3, [sl]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	f000 80a1 	beq.w	80142f6 <_svfiprintf_r+0x1c6>
 80141b4:	2300      	movs	r3, #0
 80141b6:	f04f 32ff 	mov.w	r2, #4294967295
 80141ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141be:	f10a 0a01 	add.w	sl, sl, #1
 80141c2:	9304      	str	r3, [sp, #16]
 80141c4:	9307      	str	r3, [sp, #28]
 80141c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141ca:	931a      	str	r3, [sp, #104]	; 0x68
 80141cc:	4654      	mov	r4, sl
 80141ce:	2205      	movs	r2, #5
 80141d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141d4:	4850      	ldr	r0, [pc, #320]	; (8014318 <_svfiprintf_r+0x1e8>)
 80141d6:	f7ec f823 	bl	8000220 <memchr>
 80141da:	9a04      	ldr	r2, [sp, #16]
 80141dc:	b9d8      	cbnz	r0, 8014216 <_svfiprintf_r+0xe6>
 80141de:	06d0      	lsls	r0, r2, #27
 80141e0:	bf44      	itt	mi
 80141e2:	2320      	movmi	r3, #32
 80141e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141e8:	0711      	lsls	r1, r2, #28
 80141ea:	bf44      	itt	mi
 80141ec:	232b      	movmi	r3, #43	; 0x2b
 80141ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141f2:	f89a 3000 	ldrb.w	r3, [sl]
 80141f6:	2b2a      	cmp	r3, #42	; 0x2a
 80141f8:	d015      	beq.n	8014226 <_svfiprintf_r+0xf6>
 80141fa:	9a07      	ldr	r2, [sp, #28]
 80141fc:	4654      	mov	r4, sl
 80141fe:	2000      	movs	r0, #0
 8014200:	f04f 0c0a 	mov.w	ip, #10
 8014204:	4621      	mov	r1, r4
 8014206:	f811 3b01 	ldrb.w	r3, [r1], #1
 801420a:	3b30      	subs	r3, #48	; 0x30
 801420c:	2b09      	cmp	r3, #9
 801420e:	d94d      	bls.n	80142ac <_svfiprintf_r+0x17c>
 8014210:	b1b0      	cbz	r0, 8014240 <_svfiprintf_r+0x110>
 8014212:	9207      	str	r2, [sp, #28]
 8014214:	e014      	b.n	8014240 <_svfiprintf_r+0x110>
 8014216:	eba0 0308 	sub.w	r3, r0, r8
 801421a:	fa09 f303 	lsl.w	r3, r9, r3
 801421e:	4313      	orrs	r3, r2
 8014220:	9304      	str	r3, [sp, #16]
 8014222:	46a2      	mov	sl, r4
 8014224:	e7d2      	b.n	80141cc <_svfiprintf_r+0x9c>
 8014226:	9b03      	ldr	r3, [sp, #12]
 8014228:	1d19      	adds	r1, r3, #4
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	9103      	str	r1, [sp, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	bfbb      	ittet	lt
 8014232:	425b      	neglt	r3, r3
 8014234:	f042 0202 	orrlt.w	r2, r2, #2
 8014238:	9307      	strge	r3, [sp, #28]
 801423a:	9307      	strlt	r3, [sp, #28]
 801423c:	bfb8      	it	lt
 801423e:	9204      	strlt	r2, [sp, #16]
 8014240:	7823      	ldrb	r3, [r4, #0]
 8014242:	2b2e      	cmp	r3, #46	; 0x2e
 8014244:	d10c      	bne.n	8014260 <_svfiprintf_r+0x130>
 8014246:	7863      	ldrb	r3, [r4, #1]
 8014248:	2b2a      	cmp	r3, #42	; 0x2a
 801424a:	d134      	bne.n	80142b6 <_svfiprintf_r+0x186>
 801424c:	9b03      	ldr	r3, [sp, #12]
 801424e:	1d1a      	adds	r2, r3, #4
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	9203      	str	r2, [sp, #12]
 8014254:	2b00      	cmp	r3, #0
 8014256:	bfb8      	it	lt
 8014258:	f04f 33ff 	movlt.w	r3, #4294967295
 801425c:	3402      	adds	r4, #2
 801425e:	9305      	str	r3, [sp, #20]
 8014260:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014328 <_svfiprintf_r+0x1f8>
 8014264:	7821      	ldrb	r1, [r4, #0]
 8014266:	2203      	movs	r2, #3
 8014268:	4650      	mov	r0, sl
 801426a:	f7eb ffd9 	bl	8000220 <memchr>
 801426e:	b138      	cbz	r0, 8014280 <_svfiprintf_r+0x150>
 8014270:	9b04      	ldr	r3, [sp, #16]
 8014272:	eba0 000a 	sub.w	r0, r0, sl
 8014276:	2240      	movs	r2, #64	; 0x40
 8014278:	4082      	lsls	r2, r0
 801427a:	4313      	orrs	r3, r2
 801427c:	3401      	adds	r4, #1
 801427e:	9304      	str	r3, [sp, #16]
 8014280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014284:	4825      	ldr	r0, [pc, #148]	; (801431c <_svfiprintf_r+0x1ec>)
 8014286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801428a:	2206      	movs	r2, #6
 801428c:	f7eb ffc8 	bl	8000220 <memchr>
 8014290:	2800      	cmp	r0, #0
 8014292:	d038      	beq.n	8014306 <_svfiprintf_r+0x1d6>
 8014294:	4b22      	ldr	r3, [pc, #136]	; (8014320 <_svfiprintf_r+0x1f0>)
 8014296:	bb1b      	cbnz	r3, 80142e0 <_svfiprintf_r+0x1b0>
 8014298:	9b03      	ldr	r3, [sp, #12]
 801429a:	3307      	adds	r3, #7
 801429c:	f023 0307 	bic.w	r3, r3, #7
 80142a0:	3308      	adds	r3, #8
 80142a2:	9303      	str	r3, [sp, #12]
 80142a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142a6:	4433      	add	r3, r6
 80142a8:	9309      	str	r3, [sp, #36]	; 0x24
 80142aa:	e768      	b.n	801417e <_svfiprintf_r+0x4e>
 80142ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80142b0:	460c      	mov	r4, r1
 80142b2:	2001      	movs	r0, #1
 80142b4:	e7a6      	b.n	8014204 <_svfiprintf_r+0xd4>
 80142b6:	2300      	movs	r3, #0
 80142b8:	3401      	adds	r4, #1
 80142ba:	9305      	str	r3, [sp, #20]
 80142bc:	4619      	mov	r1, r3
 80142be:	f04f 0c0a 	mov.w	ip, #10
 80142c2:	4620      	mov	r0, r4
 80142c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142c8:	3a30      	subs	r2, #48	; 0x30
 80142ca:	2a09      	cmp	r2, #9
 80142cc:	d903      	bls.n	80142d6 <_svfiprintf_r+0x1a6>
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d0c6      	beq.n	8014260 <_svfiprintf_r+0x130>
 80142d2:	9105      	str	r1, [sp, #20]
 80142d4:	e7c4      	b.n	8014260 <_svfiprintf_r+0x130>
 80142d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80142da:	4604      	mov	r4, r0
 80142dc:	2301      	movs	r3, #1
 80142de:	e7f0      	b.n	80142c2 <_svfiprintf_r+0x192>
 80142e0:	ab03      	add	r3, sp, #12
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	462a      	mov	r2, r5
 80142e6:	4b0f      	ldr	r3, [pc, #60]	; (8014324 <_svfiprintf_r+0x1f4>)
 80142e8:	a904      	add	r1, sp, #16
 80142ea:	4638      	mov	r0, r7
 80142ec:	f7fc fc78 	bl	8010be0 <_printf_float>
 80142f0:	1c42      	adds	r2, r0, #1
 80142f2:	4606      	mov	r6, r0
 80142f4:	d1d6      	bne.n	80142a4 <_svfiprintf_r+0x174>
 80142f6:	89ab      	ldrh	r3, [r5, #12]
 80142f8:	065b      	lsls	r3, r3, #25
 80142fa:	f53f af2d 	bmi.w	8014158 <_svfiprintf_r+0x28>
 80142fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014300:	b01d      	add	sp, #116	; 0x74
 8014302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014306:	ab03      	add	r3, sp, #12
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	462a      	mov	r2, r5
 801430c:	4b05      	ldr	r3, [pc, #20]	; (8014324 <_svfiprintf_r+0x1f4>)
 801430e:	a904      	add	r1, sp, #16
 8014310:	4638      	mov	r0, r7
 8014312:	f7fc ff09 	bl	8011128 <_printf_i>
 8014316:	e7eb      	b.n	80142f0 <_svfiprintf_r+0x1c0>
 8014318:	08018291 	.word	0x08018291
 801431c:	0801829b 	.word	0x0801829b
 8014320:	08010be1 	.word	0x08010be1
 8014324:	0801407d 	.word	0x0801407d
 8014328:	08018297 	.word	0x08018297

0801432c <__sflush_r>:
 801432c:	898a      	ldrh	r2, [r1, #12]
 801432e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014332:	4605      	mov	r5, r0
 8014334:	0710      	lsls	r0, r2, #28
 8014336:	460c      	mov	r4, r1
 8014338:	d458      	bmi.n	80143ec <__sflush_r+0xc0>
 801433a:	684b      	ldr	r3, [r1, #4]
 801433c:	2b00      	cmp	r3, #0
 801433e:	dc05      	bgt.n	801434c <__sflush_r+0x20>
 8014340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014342:	2b00      	cmp	r3, #0
 8014344:	dc02      	bgt.n	801434c <__sflush_r+0x20>
 8014346:	2000      	movs	r0, #0
 8014348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801434c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801434e:	2e00      	cmp	r6, #0
 8014350:	d0f9      	beq.n	8014346 <__sflush_r+0x1a>
 8014352:	2300      	movs	r3, #0
 8014354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014358:	682f      	ldr	r7, [r5, #0]
 801435a:	6a21      	ldr	r1, [r4, #32]
 801435c:	602b      	str	r3, [r5, #0]
 801435e:	d032      	beq.n	80143c6 <__sflush_r+0x9a>
 8014360:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014362:	89a3      	ldrh	r3, [r4, #12]
 8014364:	075a      	lsls	r2, r3, #29
 8014366:	d505      	bpl.n	8014374 <__sflush_r+0x48>
 8014368:	6863      	ldr	r3, [r4, #4]
 801436a:	1ac0      	subs	r0, r0, r3
 801436c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801436e:	b10b      	cbz	r3, 8014374 <__sflush_r+0x48>
 8014370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014372:	1ac0      	subs	r0, r0, r3
 8014374:	2300      	movs	r3, #0
 8014376:	4602      	mov	r2, r0
 8014378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801437a:	6a21      	ldr	r1, [r4, #32]
 801437c:	4628      	mov	r0, r5
 801437e:	47b0      	blx	r6
 8014380:	1c43      	adds	r3, r0, #1
 8014382:	89a3      	ldrh	r3, [r4, #12]
 8014384:	d106      	bne.n	8014394 <__sflush_r+0x68>
 8014386:	6829      	ldr	r1, [r5, #0]
 8014388:	291d      	cmp	r1, #29
 801438a:	d82b      	bhi.n	80143e4 <__sflush_r+0xb8>
 801438c:	4a29      	ldr	r2, [pc, #164]	; (8014434 <__sflush_r+0x108>)
 801438e:	410a      	asrs	r2, r1
 8014390:	07d6      	lsls	r6, r2, #31
 8014392:	d427      	bmi.n	80143e4 <__sflush_r+0xb8>
 8014394:	2200      	movs	r2, #0
 8014396:	6062      	str	r2, [r4, #4]
 8014398:	04d9      	lsls	r1, r3, #19
 801439a:	6922      	ldr	r2, [r4, #16]
 801439c:	6022      	str	r2, [r4, #0]
 801439e:	d504      	bpl.n	80143aa <__sflush_r+0x7e>
 80143a0:	1c42      	adds	r2, r0, #1
 80143a2:	d101      	bne.n	80143a8 <__sflush_r+0x7c>
 80143a4:	682b      	ldr	r3, [r5, #0]
 80143a6:	b903      	cbnz	r3, 80143aa <__sflush_r+0x7e>
 80143a8:	6560      	str	r0, [r4, #84]	; 0x54
 80143aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80143ac:	602f      	str	r7, [r5, #0]
 80143ae:	2900      	cmp	r1, #0
 80143b0:	d0c9      	beq.n	8014346 <__sflush_r+0x1a>
 80143b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143b6:	4299      	cmp	r1, r3
 80143b8:	d002      	beq.n	80143c0 <__sflush_r+0x94>
 80143ba:	4628      	mov	r0, r5
 80143bc:	f7fe fa1a 	bl	80127f4 <_free_r>
 80143c0:	2000      	movs	r0, #0
 80143c2:	6360      	str	r0, [r4, #52]	; 0x34
 80143c4:	e7c0      	b.n	8014348 <__sflush_r+0x1c>
 80143c6:	2301      	movs	r3, #1
 80143c8:	4628      	mov	r0, r5
 80143ca:	47b0      	blx	r6
 80143cc:	1c41      	adds	r1, r0, #1
 80143ce:	d1c8      	bne.n	8014362 <__sflush_r+0x36>
 80143d0:	682b      	ldr	r3, [r5, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d0c5      	beq.n	8014362 <__sflush_r+0x36>
 80143d6:	2b1d      	cmp	r3, #29
 80143d8:	d001      	beq.n	80143de <__sflush_r+0xb2>
 80143da:	2b16      	cmp	r3, #22
 80143dc:	d101      	bne.n	80143e2 <__sflush_r+0xb6>
 80143de:	602f      	str	r7, [r5, #0]
 80143e0:	e7b1      	b.n	8014346 <__sflush_r+0x1a>
 80143e2:	89a3      	ldrh	r3, [r4, #12]
 80143e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143e8:	81a3      	strh	r3, [r4, #12]
 80143ea:	e7ad      	b.n	8014348 <__sflush_r+0x1c>
 80143ec:	690f      	ldr	r7, [r1, #16]
 80143ee:	2f00      	cmp	r7, #0
 80143f0:	d0a9      	beq.n	8014346 <__sflush_r+0x1a>
 80143f2:	0793      	lsls	r3, r2, #30
 80143f4:	680e      	ldr	r6, [r1, #0]
 80143f6:	bf08      	it	eq
 80143f8:	694b      	ldreq	r3, [r1, #20]
 80143fa:	600f      	str	r7, [r1, #0]
 80143fc:	bf18      	it	ne
 80143fe:	2300      	movne	r3, #0
 8014400:	eba6 0807 	sub.w	r8, r6, r7
 8014404:	608b      	str	r3, [r1, #8]
 8014406:	f1b8 0f00 	cmp.w	r8, #0
 801440a:	dd9c      	ble.n	8014346 <__sflush_r+0x1a>
 801440c:	6a21      	ldr	r1, [r4, #32]
 801440e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014410:	4643      	mov	r3, r8
 8014412:	463a      	mov	r2, r7
 8014414:	4628      	mov	r0, r5
 8014416:	47b0      	blx	r6
 8014418:	2800      	cmp	r0, #0
 801441a:	dc06      	bgt.n	801442a <__sflush_r+0xfe>
 801441c:	89a3      	ldrh	r3, [r4, #12]
 801441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014422:	81a3      	strh	r3, [r4, #12]
 8014424:	f04f 30ff 	mov.w	r0, #4294967295
 8014428:	e78e      	b.n	8014348 <__sflush_r+0x1c>
 801442a:	4407      	add	r7, r0
 801442c:	eba8 0800 	sub.w	r8, r8, r0
 8014430:	e7e9      	b.n	8014406 <__sflush_r+0xda>
 8014432:	bf00      	nop
 8014434:	dfbffffe 	.word	0xdfbffffe

08014438 <_fflush_r>:
 8014438:	b538      	push	{r3, r4, r5, lr}
 801443a:	690b      	ldr	r3, [r1, #16]
 801443c:	4605      	mov	r5, r0
 801443e:	460c      	mov	r4, r1
 8014440:	b913      	cbnz	r3, 8014448 <_fflush_r+0x10>
 8014442:	2500      	movs	r5, #0
 8014444:	4628      	mov	r0, r5
 8014446:	bd38      	pop	{r3, r4, r5, pc}
 8014448:	b118      	cbz	r0, 8014452 <_fflush_r+0x1a>
 801444a:	6a03      	ldr	r3, [r0, #32]
 801444c:	b90b      	cbnz	r3, 8014452 <_fflush_r+0x1a>
 801444e:	f7fd fa29 	bl	80118a4 <__sinit>
 8014452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d0f3      	beq.n	8014442 <_fflush_r+0xa>
 801445a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801445c:	07d0      	lsls	r0, r2, #31
 801445e:	d404      	bmi.n	801446a <_fflush_r+0x32>
 8014460:	0599      	lsls	r1, r3, #22
 8014462:	d402      	bmi.n	801446a <_fflush_r+0x32>
 8014464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014466:	f7fd fb34 	bl	8011ad2 <__retarget_lock_acquire_recursive>
 801446a:	4628      	mov	r0, r5
 801446c:	4621      	mov	r1, r4
 801446e:	f7ff ff5d 	bl	801432c <__sflush_r>
 8014472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014474:	07da      	lsls	r2, r3, #31
 8014476:	4605      	mov	r5, r0
 8014478:	d4e4      	bmi.n	8014444 <_fflush_r+0xc>
 801447a:	89a3      	ldrh	r3, [r4, #12]
 801447c:	059b      	lsls	r3, r3, #22
 801447e:	d4e1      	bmi.n	8014444 <_fflush_r+0xc>
 8014480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014482:	f7fd fb27 	bl	8011ad4 <__retarget_lock_release_recursive>
 8014486:	e7dd      	b.n	8014444 <_fflush_r+0xc>

08014488 <memmove>:
 8014488:	4288      	cmp	r0, r1
 801448a:	b510      	push	{r4, lr}
 801448c:	eb01 0402 	add.w	r4, r1, r2
 8014490:	d902      	bls.n	8014498 <memmove+0x10>
 8014492:	4284      	cmp	r4, r0
 8014494:	4623      	mov	r3, r4
 8014496:	d807      	bhi.n	80144a8 <memmove+0x20>
 8014498:	1e43      	subs	r3, r0, #1
 801449a:	42a1      	cmp	r1, r4
 801449c:	d008      	beq.n	80144b0 <memmove+0x28>
 801449e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80144a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80144a6:	e7f8      	b.n	801449a <memmove+0x12>
 80144a8:	4402      	add	r2, r0
 80144aa:	4601      	mov	r1, r0
 80144ac:	428a      	cmp	r2, r1
 80144ae:	d100      	bne.n	80144b2 <memmove+0x2a>
 80144b0:	bd10      	pop	{r4, pc}
 80144b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80144b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80144ba:	e7f7      	b.n	80144ac <memmove+0x24>

080144bc <strncmp>:
 80144bc:	b510      	push	{r4, lr}
 80144be:	b16a      	cbz	r2, 80144dc <strncmp+0x20>
 80144c0:	3901      	subs	r1, #1
 80144c2:	1884      	adds	r4, r0, r2
 80144c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d103      	bne.n	80144d8 <strncmp+0x1c>
 80144d0:	42a0      	cmp	r0, r4
 80144d2:	d001      	beq.n	80144d8 <strncmp+0x1c>
 80144d4:	2a00      	cmp	r2, #0
 80144d6:	d1f5      	bne.n	80144c4 <strncmp+0x8>
 80144d8:	1ad0      	subs	r0, r2, r3
 80144da:	bd10      	pop	{r4, pc}
 80144dc:	4610      	mov	r0, r2
 80144de:	e7fc      	b.n	80144da <strncmp+0x1e>

080144e0 <_sbrk_r>:
 80144e0:	b538      	push	{r3, r4, r5, lr}
 80144e2:	4d06      	ldr	r5, [pc, #24]	; (80144fc <_sbrk_r+0x1c>)
 80144e4:	2300      	movs	r3, #0
 80144e6:	4604      	mov	r4, r0
 80144e8:	4608      	mov	r0, r1
 80144ea:	602b      	str	r3, [r5, #0]
 80144ec:	f7f1 fd0a 	bl	8005f04 <_sbrk>
 80144f0:	1c43      	adds	r3, r0, #1
 80144f2:	d102      	bne.n	80144fa <_sbrk_r+0x1a>
 80144f4:	682b      	ldr	r3, [r5, #0]
 80144f6:	b103      	cbz	r3, 80144fa <_sbrk_r+0x1a>
 80144f8:	6023      	str	r3, [r4, #0]
 80144fa:	bd38      	pop	{r3, r4, r5, pc}
 80144fc:	200023b8 	.word	0x200023b8

08014500 <nan>:
 8014500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014508 <nan+0x8>
 8014504:	4770      	bx	lr
 8014506:	bf00      	nop
 8014508:	00000000 	.word	0x00000000
 801450c:	7ff80000 	.word	0x7ff80000

08014510 <__assert_func>:
 8014510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014512:	4614      	mov	r4, r2
 8014514:	461a      	mov	r2, r3
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <__assert_func+0x2c>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4605      	mov	r5, r0
 801451c:	68d8      	ldr	r0, [r3, #12]
 801451e:	b14c      	cbz	r4, 8014534 <__assert_func+0x24>
 8014520:	4b07      	ldr	r3, [pc, #28]	; (8014540 <__assert_func+0x30>)
 8014522:	9100      	str	r1, [sp, #0]
 8014524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014528:	4906      	ldr	r1, [pc, #24]	; (8014544 <__assert_func+0x34>)
 801452a:	462b      	mov	r3, r5
 801452c:	f000 fbca 	bl	8014cc4 <fiprintf>
 8014530:	f000 fbda 	bl	8014ce8 <abort>
 8014534:	4b04      	ldr	r3, [pc, #16]	; (8014548 <__assert_func+0x38>)
 8014536:	461c      	mov	r4, r3
 8014538:	e7f3      	b.n	8014522 <__assert_func+0x12>
 801453a:	bf00      	nop
 801453c:	2000026c 	.word	0x2000026c
 8014540:	080182aa 	.word	0x080182aa
 8014544:	080182b7 	.word	0x080182b7
 8014548:	080182e5 	.word	0x080182e5

0801454c <_calloc_r>:
 801454c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801454e:	fba1 2402 	umull	r2, r4, r1, r2
 8014552:	b94c      	cbnz	r4, 8014568 <_calloc_r+0x1c>
 8014554:	4611      	mov	r1, r2
 8014556:	9201      	str	r2, [sp, #4]
 8014558:	f7fe f9c0 	bl	80128dc <_malloc_r>
 801455c:	9a01      	ldr	r2, [sp, #4]
 801455e:	4605      	mov	r5, r0
 8014560:	b930      	cbnz	r0, 8014570 <_calloc_r+0x24>
 8014562:	4628      	mov	r0, r5
 8014564:	b003      	add	sp, #12
 8014566:	bd30      	pop	{r4, r5, pc}
 8014568:	220c      	movs	r2, #12
 801456a:	6002      	str	r2, [r0, #0]
 801456c:	2500      	movs	r5, #0
 801456e:	e7f8      	b.n	8014562 <_calloc_r+0x16>
 8014570:	4621      	mov	r1, r4
 8014572:	f7fd fa30 	bl	80119d6 <memset>
 8014576:	e7f4      	b.n	8014562 <_calloc_r+0x16>

08014578 <rshift>:
 8014578:	6903      	ldr	r3, [r0, #16]
 801457a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801457e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014582:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014586:	f100 0414 	add.w	r4, r0, #20
 801458a:	dd45      	ble.n	8014618 <rshift+0xa0>
 801458c:	f011 011f 	ands.w	r1, r1, #31
 8014590:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014594:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014598:	d10c      	bne.n	80145b4 <rshift+0x3c>
 801459a:	f100 0710 	add.w	r7, r0, #16
 801459e:	4629      	mov	r1, r5
 80145a0:	42b1      	cmp	r1, r6
 80145a2:	d334      	bcc.n	801460e <rshift+0x96>
 80145a4:	1a9b      	subs	r3, r3, r2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	1eea      	subs	r2, r5, #3
 80145aa:	4296      	cmp	r6, r2
 80145ac:	bf38      	it	cc
 80145ae:	2300      	movcc	r3, #0
 80145b0:	4423      	add	r3, r4
 80145b2:	e015      	b.n	80145e0 <rshift+0x68>
 80145b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80145b8:	f1c1 0820 	rsb	r8, r1, #32
 80145bc:	40cf      	lsrs	r7, r1
 80145be:	f105 0e04 	add.w	lr, r5, #4
 80145c2:	46a1      	mov	r9, r4
 80145c4:	4576      	cmp	r6, lr
 80145c6:	46f4      	mov	ip, lr
 80145c8:	d815      	bhi.n	80145f6 <rshift+0x7e>
 80145ca:	1a9a      	subs	r2, r3, r2
 80145cc:	0092      	lsls	r2, r2, #2
 80145ce:	3a04      	subs	r2, #4
 80145d0:	3501      	adds	r5, #1
 80145d2:	42ae      	cmp	r6, r5
 80145d4:	bf38      	it	cc
 80145d6:	2200      	movcc	r2, #0
 80145d8:	18a3      	adds	r3, r4, r2
 80145da:	50a7      	str	r7, [r4, r2]
 80145dc:	b107      	cbz	r7, 80145e0 <rshift+0x68>
 80145de:	3304      	adds	r3, #4
 80145e0:	1b1a      	subs	r2, r3, r4
 80145e2:	42a3      	cmp	r3, r4
 80145e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80145e8:	bf08      	it	eq
 80145ea:	2300      	moveq	r3, #0
 80145ec:	6102      	str	r2, [r0, #16]
 80145ee:	bf08      	it	eq
 80145f0:	6143      	streq	r3, [r0, #20]
 80145f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145f6:	f8dc c000 	ldr.w	ip, [ip]
 80145fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80145fe:	ea4c 0707 	orr.w	r7, ip, r7
 8014602:	f849 7b04 	str.w	r7, [r9], #4
 8014606:	f85e 7b04 	ldr.w	r7, [lr], #4
 801460a:	40cf      	lsrs	r7, r1
 801460c:	e7da      	b.n	80145c4 <rshift+0x4c>
 801460e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014612:	f847 cf04 	str.w	ip, [r7, #4]!
 8014616:	e7c3      	b.n	80145a0 <rshift+0x28>
 8014618:	4623      	mov	r3, r4
 801461a:	e7e1      	b.n	80145e0 <rshift+0x68>

0801461c <__hexdig_fun>:
 801461c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014620:	2b09      	cmp	r3, #9
 8014622:	d802      	bhi.n	801462a <__hexdig_fun+0xe>
 8014624:	3820      	subs	r0, #32
 8014626:	b2c0      	uxtb	r0, r0
 8014628:	4770      	bx	lr
 801462a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801462e:	2b05      	cmp	r3, #5
 8014630:	d801      	bhi.n	8014636 <__hexdig_fun+0x1a>
 8014632:	3847      	subs	r0, #71	; 0x47
 8014634:	e7f7      	b.n	8014626 <__hexdig_fun+0xa>
 8014636:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801463a:	2b05      	cmp	r3, #5
 801463c:	d801      	bhi.n	8014642 <__hexdig_fun+0x26>
 801463e:	3827      	subs	r0, #39	; 0x27
 8014640:	e7f1      	b.n	8014626 <__hexdig_fun+0xa>
 8014642:	2000      	movs	r0, #0
 8014644:	4770      	bx	lr
	...

08014648 <__gethex>:
 8014648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801464c:	4617      	mov	r7, r2
 801464e:	680a      	ldr	r2, [r1, #0]
 8014650:	b085      	sub	sp, #20
 8014652:	f102 0b02 	add.w	fp, r2, #2
 8014656:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801465a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801465e:	4681      	mov	r9, r0
 8014660:	468a      	mov	sl, r1
 8014662:	9302      	str	r3, [sp, #8]
 8014664:	32fe      	adds	r2, #254	; 0xfe
 8014666:	eb02 030b 	add.w	r3, r2, fp
 801466a:	46d8      	mov	r8, fp
 801466c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014670:	9301      	str	r3, [sp, #4]
 8014672:	2830      	cmp	r0, #48	; 0x30
 8014674:	d0f7      	beq.n	8014666 <__gethex+0x1e>
 8014676:	f7ff ffd1 	bl	801461c <__hexdig_fun>
 801467a:	4604      	mov	r4, r0
 801467c:	2800      	cmp	r0, #0
 801467e:	d138      	bne.n	80146f2 <__gethex+0xaa>
 8014680:	49a7      	ldr	r1, [pc, #668]	; (8014920 <__gethex+0x2d8>)
 8014682:	2201      	movs	r2, #1
 8014684:	4640      	mov	r0, r8
 8014686:	f7ff ff19 	bl	80144bc <strncmp>
 801468a:	4606      	mov	r6, r0
 801468c:	2800      	cmp	r0, #0
 801468e:	d169      	bne.n	8014764 <__gethex+0x11c>
 8014690:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014694:	465d      	mov	r5, fp
 8014696:	f7ff ffc1 	bl	801461c <__hexdig_fun>
 801469a:	2800      	cmp	r0, #0
 801469c:	d064      	beq.n	8014768 <__gethex+0x120>
 801469e:	465a      	mov	r2, fp
 80146a0:	7810      	ldrb	r0, [r2, #0]
 80146a2:	2830      	cmp	r0, #48	; 0x30
 80146a4:	4690      	mov	r8, r2
 80146a6:	f102 0201 	add.w	r2, r2, #1
 80146aa:	d0f9      	beq.n	80146a0 <__gethex+0x58>
 80146ac:	f7ff ffb6 	bl	801461c <__hexdig_fun>
 80146b0:	2301      	movs	r3, #1
 80146b2:	fab0 f480 	clz	r4, r0
 80146b6:	0964      	lsrs	r4, r4, #5
 80146b8:	465e      	mov	r6, fp
 80146ba:	9301      	str	r3, [sp, #4]
 80146bc:	4642      	mov	r2, r8
 80146be:	4615      	mov	r5, r2
 80146c0:	3201      	adds	r2, #1
 80146c2:	7828      	ldrb	r0, [r5, #0]
 80146c4:	f7ff ffaa 	bl	801461c <__hexdig_fun>
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d1f8      	bne.n	80146be <__gethex+0x76>
 80146cc:	4994      	ldr	r1, [pc, #592]	; (8014920 <__gethex+0x2d8>)
 80146ce:	2201      	movs	r2, #1
 80146d0:	4628      	mov	r0, r5
 80146d2:	f7ff fef3 	bl	80144bc <strncmp>
 80146d6:	b978      	cbnz	r0, 80146f8 <__gethex+0xb0>
 80146d8:	b946      	cbnz	r6, 80146ec <__gethex+0xa4>
 80146da:	1c6e      	adds	r6, r5, #1
 80146dc:	4632      	mov	r2, r6
 80146de:	4615      	mov	r5, r2
 80146e0:	3201      	adds	r2, #1
 80146e2:	7828      	ldrb	r0, [r5, #0]
 80146e4:	f7ff ff9a 	bl	801461c <__hexdig_fun>
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d1f8      	bne.n	80146de <__gethex+0x96>
 80146ec:	1b73      	subs	r3, r6, r5
 80146ee:	009e      	lsls	r6, r3, #2
 80146f0:	e004      	b.n	80146fc <__gethex+0xb4>
 80146f2:	2400      	movs	r4, #0
 80146f4:	4626      	mov	r6, r4
 80146f6:	e7e1      	b.n	80146bc <__gethex+0x74>
 80146f8:	2e00      	cmp	r6, #0
 80146fa:	d1f7      	bne.n	80146ec <__gethex+0xa4>
 80146fc:	782b      	ldrb	r3, [r5, #0]
 80146fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014702:	2b50      	cmp	r3, #80	; 0x50
 8014704:	d13d      	bne.n	8014782 <__gethex+0x13a>
 8014706:	786b      	ldrb	r3, [r5, #1]
 8014708:	2b2b      	cmp	r3, #43	; 0x2b
 801470a:	d02f      	beq.n	801476c <__gethex+0x124>
 801470c:	2b2d      	cmp	r3, #45	; 0x2d
 801470e:	d031      	beq.n	8014774 <__gethex+0x12c>
 8014710:	1c69      	adds	r1, r5, #1
 8014712:	f04f 0b00 	mov.w	fp, #0
 8014716:	7808      	ldrb	r0, [r1, #0]
 8014718:	f7ff ff80 	bl	801461c <__hexdig_fun>
 801471c:	1e42      	subs	r2, r0, #1
 801471e:	b2d2      	uxtb	r2, r2
 8014720:	2a18      	cmp	r2, #24
 8014722:	d82e      	bhi.n	8014782 <__gethex+0x13a>
 8014724:	f1a0 0210 	sub.w	r2, r0, #16
 8014728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801472c:	f7ff ff76 	bl	801461c <__hexdig_fun>
 8014730:	f100 3cff 	add.w	ip, r0, #4294967295
 8014734:	fa5f fc8c 	uxtb.w	ip, ip
 8014738:	f1bc 0f18 	cmp.w	ip, #24
 801473c:	d91d      	bls.n	801477a <__gethex+0x132>
 801473e:	f1bb 0f00 	cmp.w	fp, #0
 8014742:	d000      	beq.n	8014746 <__gethex+0xfe>
 8014744:	4252      	negs	r2, r2
 8014746:	4416      	add	r6, r2
 8014748:	f8ca 1000 	str.w	r1, [sl]
 801474c:	b1dc      	cbz	r4, 8014786 <__gethex+0x13e>
 801474e:	9b01      	ldr	r3, [sp, #4]
 8014750:	2b00      	cmp	r3, #0
 8014752:	bf14      	ite	ne
 8014754:	f04f 0800 	movne.w	r8, #0
 8014758:	f04f 0806 	moveq.w	r8, #6
 801475c:	4640      	mov	r0, r8
 801475e:	b005      	add	sp, #20
 8014760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	4645      	mov	r5, r8
 8014766:	4626      	mov	r6, r4
 8014768:	2401      	movs	r4, #1
 801476a:	e7c7      	b.n	80146fc <__gethex+0xb4>
 801476c:	f04f 0b00 	mov.w	fp, #0
 8014770:	1ca9      	adds	r1, r5, #2
 8014772:	e7d0      	b.n	8014716 <__gethex+0xce>
 8014774:	f04f 0b01 	mov.w	fp, #1
 8014778:	e7fa      	b.n	8014770 <__gethex+0x128>
 801477a:	230a      	movs	r3, #10
 801477c:	fb03 0002 	mla	r0, r3, r2, r0
 8014780:	e7d0      	b.n	8014724 <__gethex+0xdc>
 8014782:	4629      	mov	r1, r5
 8014784:	e7e0      	b.n	8014748 <__gethex+0x100>
 8014786:	eba5 0308 	sub.w	r3, r5, r8
 801478a:	3b01      	subs	r3, #1
 801478c:	4621      	mov	r1, r4
 801478e:	2b07      	cmp	r3, #7
 8014790:	dc0a      	bgt.n	80147a8 <__gethex+0x160>
 8014792:	4648      	mov	r0, r9
 8014794:	f7fe f92e 	bl	80129f4 <_Balloc>
 8014798:	4604      	mov	r4, r0
 801479a:	b940      	cbnz	r0, 80147ae <__gethex+0x166>
 801479c:	4b61      	ldr	r3, [pc, #388]	; (8014924 <__gethex+0x2dc>)
 801479e:	4602      	mov	r2, r0
 80147a0:	21e4      	movs	r1, #228	; 0xe4
 80147a2:	4861      	ldr	r0, [pc, #388]	; (8014928 <__gethex+0x2e0>)
 80147a4:	f7ff feb4 	bl	8014510 <__assert_func>
 80147a8:	3101      	adds	r1, #1
 80147aa:	105b      	asrs	r3, r3, #1
 80147ac:	e7ef      	b.n	801478e <__gethex+0x146>
 80147ae:	f100 0a14 	add.w	sl, r0, #20
 80147b2:	2300      	movs	r3, #0
 80147b4:	495a      	ldr	r1, [pc, #360]	; (8014920 <__gethex+0x2d8>)
 80147b6:	f8cd a004 	str.w	sl, [sp, #4]
 80147ba:	469b      	mov	fp, r3
 80147bc:	45a8      	cmp	r8, r5
 80147be:	d342      	bcc.n	8014846 <__gethex+0x1fe>
 80147c0:	9801      	ldr	r0, [sp, #4]
 80147c2:	f840 bb04 	str.w	fp, [r0], #4
 80147c6:	eba0 000a 	sub.w	r0, r0, sl
 80147ca:	1080      	asrs	r0, r0, #2
 80147cc:	6120      	str	r0, [r4, #16]
 80147ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80147d2:	4658      	mov	r0, fp
 80147d4:	f7fe fa00 	bl	8012bd8 <__hi0bits>
 80147d8:	683d      	ldr	r5, [r7, #0]
 80147da:	eba8 0000 	sub.w	r0, r8, r0
 80147de:	42a8      	cmp	r0, r5
 80147e0:	dd59      	ble.n	8014896 <__gethex+0x24e>
 80147e2:	eba0 0805 	sub.w	r8, r0, r5
 80147e6:	4641      	mov	r1, r8
 80147e8:	4620      	mov	r0, r4
 80147ea:	f7fe fd8f 	bl	801330c <__any_on>
 80147ee:	4683      	mov	fp, r0
 80147f0:	b1b8      	cbz	r0, 8014822 <__gethex+0x1da>
 80147f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80147f6:	1159      	asrs	r1, r3, #5
 80147f8:	f003 021f 	and.w	r2, r3, #31
 80147fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014800:	f04f 0b01 	mov.w	fp, #1
 8014804:	fa0b f202 	lsl.w	r2, fp, r2
 8014808:	420a      	tst	r2, r1
 801480a:	d00a      	beq.n	8014822 <__gethex+0x1da>
 801480c:	455b      	cmp	r3, fp
 801480e:	dd06      	ble.n	801481e <__gethex+0x1d6>
 8014810:	f1a8 0102 	sub.w	r1, r8, #2
 8014814:	4620      	mov	r0, r4
 8014816:	f7fe fd79 	bl	801330c <__any_on>
 801481a:	2800      	cmp	r0, #0
 801481c:	d138      	bne.n	8014890 <__gethex+0x248>
 801481e:	f04f 0b02 	mov.w	fp, #2
 8014822:	4641      	mov	r1, r8
 8014824:	4620      	mov	r0, r4
 8014826:	f7ff fea7 	bl	8014578 <rshift>
 801482a:	4446      	add	r6, r8
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	42b3      	cmp	r3, r6
 8014830:	da41      	bge.n	80148b6 <__gethex+0x26e>
 8014832:	4621      	mov	r1, r4
 8014834:	4648      	mov	r0, r9
 8014836:	f7fe f91d 	bl	8012a74 <_Bfree>
 801483a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801483c:	2300      	movs	r3, #0
 801483e:	6013      	str	r3, [r2, #0]
 8014840:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014844:	e78a      	b.n	801475c <__gethex+0x114>
 8014846:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801484a:	2a2e      	cmp	r2, #46	; 0x2e
 801484c:	d014      	beq.n	8014878 <__gethex+0x230>
 801484e:	2b20      	cmp	r3, #32
 8014850:	d106      	bne.n	8014860 <__gethex+0x218>
 8014852:	9b01      	ldr	r3, [sp, #4]
 8014854:	f843 bb04 	str.w	fp, [r3], #4
 8014858:	f04f 0b00 	mov.w	fp, #0
 801485c:	9301      	str	r3, [sp, #4]
 801485e:	465b      	mov	r3, fp
 8014860:	7828      	ldrb	r0, [r5, #0]
 8014862:	9303      	str	r3, [sp, #12]
 8014864:	f7ff feda 	bl	801461c <__hexdig_fun>
 8014868:	9b03      	ldr	r3, [sp, #12]
 801486a:	f000 000f 	and.w	r0, r0, #15
 801486e:	4098      	lsls	r0, r3
 8014870:	ea4b 0b00 	orr.w	fp, fp, r0
 8014874:	3304      	adds	r3, #4
 8014876:	e7a1      	b.n	80147bc <__gethex+0x174>
 8014878:	45a8      	cmp	r8, r5
 801487a:	d8e8      	bhi.n	801484e <__gethex+0x206>
 801487c:	2201      	movs	r2, #1
 801487e:	4628      	mov	r0, r5
 8014880:	9303      	str	r3, [sp, #12]
 8014882:	f7ff fe1b 	bl	80144bc <strncmp>
 8014886:	4926      	ldr	r1, [pc, #152]	; (8014920 <__gethex+0x2d8>)
 8014888:	9b03      	ldr	r3, [sp, #12]
 801488a:	2800      	cmp	r0, #0
 801488c:	d1df      	bne.n	801484e <__gethex+0x206>
 801488e:	e795      	b.n	80147bc <__gethex+0x174>
 8014890:	f04f 0b03 	mov.w	fp, #3
 8014894:	e7c5      	b.n	8014822 <__gethex+0x1da>
 8014896:	da0b      	bge.n	80148b0 <__gethex+0x268>
 8014898:	eba5 0800 	sub.w	r8, r5, r0
 801489c:	4621      	mov	r1, r4
 801489e:	4642      	mov	r2, r8
 80148a0:	4648      	mov	r0, r9
 80148a2:	f7fe fb01 	bl	8012ea8 <__lshift>
 80148a6:	eba6 0608 	sub.w	r6, r6, r8
 80148aa:	4604      	mov	r4, r0
 80148ac:	f100 0a14 	add.w	sl, r0, #20
 80148b0:	f04f 0b00 	mov.w	fp, #0
 80148b4:	e7ba      	b.n	801482c <__gethex+0x1e4>
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	42b3      	cmp	r3, r6
 80148ba:	dd73      	ble.n	80149a4 <__gethex+0x35c>
 80148bc:	1b9e      	subs	r6, r3, r6
 80148be:	42b5      	cmp	r5, r6
 80148c0:	dc34      	bgt.n	801492c <__gethex+0x2e4>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	2b02      	cmp	r3, #2
 80148c6:	d023      	beq.n	8014910 <__gethex+0x2c8>
 80148c8:	2b03      	cmp	r3, #3
 80148ca:	d025      	beq.n	8014918 <__gethex+0x2d0>
 80148cc:	2b01      	cmp	r3, #1
 80148ce:	d115      	bne.n	80148fc <__gethex+0x2b4>
 80148d0:	42b5      	cmp	r5, r6
 80148d2:	d113      	bne.n	80148fc <__gethex+0x2b4>
 80148d4:	2d01      	cmp	r5, #1
 80148d6:	d10b      	bne.n	80148f0 <__gethex+0x2a8>
 80148d8:	9a02      	ldr	r2, [sp, #8]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6013      	str	r3, [r2, #0]
 80148de:	2301      	movs	r3, #1
 80148e0:	6123      	str	r3, [r4, #16]
 80148e2:	f8ca 3000 	str.w	r3, [sl]
 80148e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80148ec:	601c      	str	r4, [r3, #0]
 80148ee:	e735      	b.n	801475c <__gethex+0x114>
 80148f0:	1e69      	subs	r1, r5, #1
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7fe fd0a 	bl	801330c <__any_on>
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d1ed      	bne.n	80148d8 <__gethex+0x290>
 80148fc:	4621      	mov	r1, r4
 80148fe:	4648      	mov	r0, r9
 8014900:	f7fe f8b8 	bl	8012a74 <_Bfree>
 8014904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014906:	2300      	movs	r3, #0
 8014908:	6013      	str	r3, [r2, #0]
 801490a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801490e:	e725      	b.n	801475c <__gethex+0x114>
 8014910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1f2      	bne.n	80148fc <__gethex+0x2b4>
 8014916:	e7df      	b.n	80148d8 <__gethex+0x290>
 8014918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1dc      	bne.n	80148d8 <__gethex+0x290>
 801491e:	e7ed      	b.n	80148fc <__gethex+0x2b4>
 8014920:	0801813c 	.word	0x0801813c
 8014924:	08017fd5 	.word	0x08017fd5
 8014928:	080182e6 	.word	0x080182e6
 801492c:	f106 38ff 	add.w	r8, r6, #4294967295
 8014930:	f1bb 0f00 	cmp.w	fp, #0
 8014934:	d133      	bne.n	801499e <__gethex+0x356>
 8014936:	f1b8 0f00 	cmp.w	r8, #0
 801493a:	d004      	beq.n	8014946 <__gethex+0x2fe>
 801493c:	4641      	mov	r1, r8
 801493e:	4620      	mov	r0, r4
 8014940:	f7fe fce4 	bl	801330c <__any_on>
 8014944:	4683      	mov	fp, r0
 8014946:	ea4f 1268 	mov.w	r2, r8, asr #5
 801494a:	2301      	movs	r3, #1
 801494c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014950:	f008 081f 	and.w	r8, r8, #31
 8014954:	fa03 f308 	lsl.w	r3, r3, r8
 8014958:	4213      	tst	r3, r2
 801495a:	4631      	mov	r1, r6
 801495c:	4620      	mov	r0, r4
 801495e:	bf18      	it	ne
 8014960:	f04b 0b02 	orrne.w	fp, fp, #2
 8014964:	1bad      	subs	r5, r5, r6
 8014966:	f7ff fe07 	bl	8014578 <rshift>
 801496a:	687e      	ldr	r6, [r7, #4]
 801496c:	f04f 0802 	mov.w	r8, #2
 8014970:	f1bb 0f00 	cmp.w	fp, #0
 8014974:	d04a      	beq.n	8014a0c <__gethex+0x3c4>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2b02      	cmp	r3, #2
 801497a:	d016      	beq.n	80149aa <__gethex+0x362>
 801497c:	2b03      	cmp	r3, #3
 801497e:	d018      	beq.n	80149b2 <__gethex+0x36a>
 8014980:	2b01      	cmp	r3, #1
 8014982:	d109      	bne.n	8014998 <__gethex+0x350>
 8014984:	f01b 0f02 	tst.w	fp, #2
 8014988:	d006      	beq.n	8014998 <__gethex+0x350>
 801498a:	f8da 3000 	ldr.w	r3, [sl]
 801498e:	ea4b 0b03 	orr.w	fp, fp, r3
 8014992:	f01b 0f01 	tst.w	fp, #1
 8014996:	d10f      	bne.n	80149b8 <__gethex+0x370>
 8014998:	f048 0810 	orr.w	r8, r8, #16
 801499c:	e036      	b.n	8014a0c <__gethex+0x3c4>
 801499e:	f04f 0b01 	mov.w	fp, #1
 80149a2:	e7d0      	b.n	8014946 <__gethex+0x2fe>
 80149a4:	f04f 0801 	mov.w	r8, #1
 80149a8:	e7e2      	b.n	8014970 <__gethex+0x328>
 80149aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ac:	f1c3 0301 	rsb	r3, r3, #1
 80149b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80149b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d0ef      	beq.n	8014998 <__gethex+0x350>
 80149b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80149bc:	f104 0214 	add.w	r2, r4, #20
 80149c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80149c4:	9301      	str	r3, [sp, #4]
 80149c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80149ca:	2300      	movs	r3, #0
 80149cc:	4694      	mov	ip, r2
 80149ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80149d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80149d6:	d01e      	beq.n	8014a16 <__gethex+0x3ce>
 80149d8:	3101      	adds	r1, #1
 80149da:	f8cc 1000 	str.w	r1, [ip]
 80149de:	f1b8 0f02 	cmp.w	r8, #2
 80149e2:	f104 0214 	add.w	r2, r4, #20
 80149e6:	d13d      	bne.n	8014a64 <__gethex+0x41c>
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	3b01      	subs	r3, #1
 80149ec:	42ab      	cmp	r3, r5
 80149ee:	d10b      	bne.n	8014a08 <__gethex+0x3c0>
 80149f0:	1169      	asrs	r1, r5, #5
 80149f2:	2301      	movs	r3, #1
 80149f4:	f005 051f 	and.w	r5, r5, #31
 80149f8:	fa03 f505 	lsl.w	r5, r3, r5
 80149fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a00:	421d      	tst	r5, r3
 8014a02:	bf18      	it	ne
 8014a04:	f04f 0801 	movne.w	r8, #1
 8014a08:	f048 0820 	orr.w	r8, r8, #32
 8014a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a0e:	601c      	str	r4, [r3, #0]
 8014a10:	9b02      	ldr	r3, [sp, #8]
 8014a12:	601e      	str	r6, [r3, #0]
 8014a14:	e6a2      	b.n	801475c <__gethex+0x114>
 8014a16:	4290      	cmp	r0, r2
 8014a18:	f842 3c04 	str.w	r3, [r2, #-4]
 8014a1c:	d8d6      	bhi.n	80149cc <__gethex+0x384>
 8014a1e:	68a2      	ldr	r2, [r4, #8]
 8014a20:	4593      	cmp	fp, r2
 8014a22:	db17      	blt.n	8014a54 <__gethex+0x40c>
 8014a24:	6861      	ldr	r1, [r4, #4]
 8014a26:	4648      	mov	r0, r9
 8014a28:	3101      	adds	r1, #1
 8014a2a:	f7fd ffe3 	bl	80129f4 <_Balloc>
 8014a2e:	4682      	mov	sl, r0
 8014a30:	b918      	cbnz	r0, 8014a3a <__gethex+0x3f2>
 8014a32:	4b1b      	ldr	r3, [pc, #108]	; (8014aa0 <__gethex+0x458>)
 8014a34:	4602      	mov	r2, r0
 8014a36:	2184      	movs	r1, #132	; 0x84
 8014a38:	e6b3      	b.n	80147a2 <__gethex+0x15a>
 8014a3a:	6922      	ldr	r2, [r4, #16]
 8014a3c:	3202      	adds	r2, #2
 8014a3e:	f104 010c 	add.w	r1, r4, #12
 8014a42:	0092      	lsls	r2, r2, #2
 8014a44:	300c      	adds	r0, #12
 8014a46:	f7fd f846 	bl	8011ad6 <memcpy>
 8014a4a:	4621      	mov	r1, r4
 8014a4c:	4648      	mov	r0, r9
 8014a4e:	f7fe f811 	bl	8012a74 <_Bfree>
 8014a52:	4654      	mov	r4, sl
 8014a54:	6922      	ldr	r2, [r4, #16]
 8014a56:	1c51      	adds	r1, r2, #1
 8014a58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014a5c:	6121      	str	r1, [r4, #16]
 8014a5e:	2101      	movs	r1, #1
 8014a60:	6151      	str	r1, [r2, #20]
 8014a62:	e7bc      	b.n	80149de <__gethex+0x396>
 8014a64:	6921      	ldr	r1, [r4, #16]
 8014a66:	4559      	cmp	r1, fp
 8014a68:	dd0b      	ble.n	8014a82 <__gethex+0x43a>
 8014a6a:	2101      	movs	r1, #1
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f7ff fd83 	bl	8014578 <rshift>
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	3601      	adds	r6, #1
 8014a76:	42b3      	cmp	r3, r6
 8014a78:	f6ff aedb 	blt.w	8014832 <__gethex+0x1ea>
 8014a7c:	f04f 0801 	mov.w	r8, #1
 8014a80:	e7c2      	b.n	8014a08 <__gethex+0x3c0>
 8014a82:	f015 051f 	ands.w	r5, r5, #31
 8014a86:	d0f9      	beq.n	8014a7c <__gethex+0x434>
 8014a88:	9b01      	ldr	r3, [sp, #4]
 8014a8a:	441a      	add	r2, r3
 8014a8c:	f1c5 0520 	rsb	r5, r5, #32
 8014a90:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014a94:	f7fe f8a0 	bl	8012bd8 <__hi0bits>
 8014a98:	42a8      	cmp	r0, r5
 8014a9a:	dbe6      	blt.n	8014a6a <__gethex+0x422>
 8014a9c:	e7ee      	b.n	8014a7c <__gethex+0x434>
 8014a9e:	bf00      	nop
 8014aa0:	08017fd5 	.word	0x08017fd5

08014aa4 <L_shift>:
 8014aa4:	f1c2 0208 	rsb	r2, r2, #8
 8014aa8:	0092      	lsls	r2, r2, #2
 8014aaa:	b570      	push	{r4, r5, r6, lr}
 8014aac:	f1c2 0620 	rsb	r6, r2, #32
 8014ab0:	6843      	ldr	r3, [r0, #4]
 8014ab2:	6804      	ldr	r4, [r0, #0]
 8014ab4:	fa03 f506 	lsl.w	r5, r3, r6
 8014ab8:	432c      	orrs	r4, r5
 8014aba:	40d3      	lsrs	r3, r2
 8014abc:	6004      	str	r4, [r0, #0]
 8014abe:	f840 3f04 	str.w	r3, [r0, #4]!
 8014ac2:	4288      	cmp	r0, r1
 8014ac4:	d3f4      	bcc.n	8014ab0 <L_shift+0xc>
 8014ac6:	bd70      	pop	{r4, r5, r6, pc}

08014ac8 <__match>:
 8014ac8:	b530      	push	{r4, r5, lr}
 8014aca:	6803      	ldr	r3, [r0, #0]
 8014acc:	3301      	adds	r3, #1
 8014ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ad2:	b914      	cbnz	r4, 8014ada <__match+0x12>
 8014ad4:	6003      	str	r3, [r0, #0]
 8014ad6:	2001      	movs	r0, #1
 8014ad8:	bd30      	pop	{r4, r5, pc}
 8014ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ade:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014ae2:	2d19      	cmp	r5, #25
 8014ae4:	bf98      	it	ls
 8014ae6:	3220      	addls	r2, #32
 8014ae8:	42a2      	cmp	r2, r4
 8014aea:	d0f0      	beq.n	8014ace <__match+0x6>
 8014aec:	2000      	movs	r0, #0
 8014aee:	e7f3      	b.n	8014ad8 <__match+0x10>

08014af0 <__hexnan>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	680b      	ldr	r3, [r1, #0]
 8014af6:	6801      	ldr	r1, [r0, #0]
 8014af8:	115e      	asrs	r6, r3, #5
 8014afa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014afe:	f013 031f 	ands.w	r3, r3, #31
 8014b02:	b087      	sub	sp, #28
 8014b04:	bf18      	it	ne
 8014b06:	3604      	addne	r6, #4
 8014b08:	2500      	movs	r5, #0
 8014b0a:	1f37      	subs	r7, r6, #4
 8014b0c:	4682      	mov	sl, r0
 8014b0e:	4690      	mov	r8, r2
 8014b10:	9301      	str	r3, [sp, #4]
 8014b12:	f846 5c04 	str.w	r5, [r6, #-4]
 8014b16:	46b9      	mov	r9, r7
 8014b18:	463c      	mov	r4, r7
 8014b1a:	9502      	str	r5, [sp, #8]
 8014b1c:	46ab      	mov	fp, r5
 8014b1e:	784a      	ldrb	r2, [r1, #1]
 8014b20:	1c4b      	adds	r3, r1, #1
 8014b22:	9303      	str	r3, [sp, #12]
 8014b24:	b342      	cbz	r2, 8014b78 <__hexnan+0x88>
 8014b26:	4610      	mov	r0, r2
 8014b28:	9105      	str	r1, [sp, #20]
 8014b2a:	9204      	str	r2, [sp, #16]
 8014b2c:	f7ff fd76 	bl	801461c <__hexdig_fun>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d14f      	bne.n	8014bd4 <__hexnan+0xe4>
 8014b34:	9a04      	ldr	r2, [sp, #16]
 8014b36:	9905      	ldr	r1, [sp, #20]
 8014b38:	2a20      	cmp	r2, #32
 8014b3a:	d818      	bhi.n	8014b6e <__hexnan+0x7e>
 8014b3c:	9b02      	ldr	r3, [sp, #8]
 8014b3e:	459b      	cmp	fp, r3
 8014b40:	dd13      	ble.n	8014b6a <__hexnan+0x7a>
 8014b42:	454c      	cmp	r4, r9
 8014b44:	d206      	bcs.n	8014b54 <__hexnan+0x64>
 8014b46:	2d07      	cmp	r5, #7
 8014b48:	dc04      	bgt.n	8014b54 <__hexnan+0x64>
 8014b4a:	462a      	mov	r2, r5
 8014b4c:	4649      	mov	r1, r9
 8014b4e:	4620      	mov	r0, r4
 8014b50:	f7ff ffa8 	bl	8014aa4 <L_shift>
 8014b54:	4544      	cmp	r4, r8
 8014b56:	d950      	bls.n	8014bfa <__hexnan+0x10a>
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f1a4 0904 	sub.w	r9, r4, #4
 8014b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b62:	f8cd b008 	str.w	fp, [sp, #8]
 8014b66:	464c      	mov	r4, r9
 8014b68:	461d      	mov	r5, r3
 8014b6a:	9903      	ldr	r1, [sp, #12]
 8014b6c:	e7d7      	b.n	8014b1e <__hexnan+0x2e>
 8014b6e:	2a29      	cmp	r2, #41	; 0x29
 8014b70:	d155      	bne.n	8014c1e <__hexnan+0x12e>
 8014b72:	3102      	adds	r1, #2
 8014b74:	f8ca 1000 	str.w	r1, [sl]
 8014b78:	f1bb 0f00 	cmp.w	fp, #0
 8014b7c:	d04f      	beq.n	8014c1e <__hexnan+0x12e>
 8014b7e:	454c      	cmp	r4, r9
 8014b80:	d206      	bcs.n	8014b90 <__hexnan+0xa0>
 8014b82:	2d07      	cmp	r5, #7
 8014b84:	dc04      	bgt.n	8014b90 <__hexnan+0xa0>
 8014b86:	462a      	mov	r2, r5
 8014b88:	4649      	mov	r1, r9
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f7ff ff8a 	bl	8014aa4 <L_shift>
 8014b90:	4544      	cmp	r4, r8
 8014b92:	d934      	bls.n	8014bfe <__hexnan+0x10e>
 8014b94:	f1a8 0204 	sub.w	r2, r8, #4
 8014b98:	4623      	mov	r3, r4
 8014b9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014b9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014ba2:	429f      	cmp	r7, r3
 8014ba4:	d2f9      	bcs.n	8014b9a <__hexnan+0xaa>
 8014ba6:	1b3b      	subs	r3, r7, r4
 8014ba8:	f023 0303 	bic.w	r3, r3, #3
 8014bac:	3304      	adds	r3, #4
 8014bae:	3e03      	subs	r6, #3
 8014bb0:	3401      	adds	r4, #1
 8014bb2:	42a6      	cmp	r6, r4
 8014bb4:	bf38      	it	cc
 8014bb6:	2304      	movcc	r3, #4
 8014bb8:	4443      	add	r3, r8
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f843 2b04 	str.w	r2, [r3], #4
 8014bc0:	429f      	cmp	r7, r3
 8014bc2:	d2fb      	bcs.n	8014bbc <__hexnan+0xcc>
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	b91b      	cbnz	r3, 8014bd0 <__hexnan+0xe0>
 8014bc8:	4547      	cmp	r7, r8
 8014bca:	d126      	bne.n	8014c1a <__hexnan+0x12a>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	603b      	str	r3, [r7, #0]
 8014bd0:	2005      	movs	r0, #5
 8014bd2:	e025      	b.n	8014c20 <__hexnan+0x130>
 8014bd4:	3501      	adds	r5, #1
 8014bd6:	2d08      	cmp	r5, #8
 8014bd8:	f10b 0b01 	add.w	fp, fp, #1
 8014bdc:	dd06      	ble.n	8014bec <__hexnan+0xfc>
 8014bde:	4544      	cmp	r4, r8
 8014be0:	d9c3      	bls.n	8014b6a <__hexnan+0x7a>
 8014be2:	2300      	movs	r3, #0
 8014be4:	f844 3c04 	str.w	r3, [r4, #-4]
 8014be8:	2501      	movs	r5, #1
 8014bea:	3c04      	subs	r4, #4
 8014bec:	6822      	ldr	r2, [r4, #0]
 8014bee:	f000 000f 	and.w	r0, r0, #15
 8014bf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014bf6:	6020      	str	r0, [r4, #0]
 8014bf8:	e7b7      	b.n	8014b6a <__hexnan+0x7a>
 8014bfa:	2508      	movs	r5, #8
 8014bfc:	e7b5      	b.n	8014b6a <__hexnan+0x7a>
 8014bfe:	9b01      	ldr	r3, [sp, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d0df      	beq.n	8014bc4 <__hexnan+0xd4>
 8014c04:	f1c3 0320 	rsb	r3, r3, #32
 8014c08:	f04f 32ff 	mov.w	r2, #4294967295
 8014c0c:	40da      	lsrs	r2, r3
 8014c0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014c12:	4013      	ands	r3, r2
 8014c14:	f846 3c04 	str.w	r3, [r6, #-4]
 8014c18:	e7d4      	b.n	8014bc4 <__hexnan+0xd4>
 8014c1a:	3f04      	subs	r7, #4
 8014c1c:	e7d2      	b.n	8014bc4 <__hexnan+0xd4>
 8014c1e:	2004      	movs	r0, #4
 8014c20:	b007      	add	sp, #28
 8014c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c26 <__ascii_mbtowc>:
 8014c26:	b082      	sub	sp, #8
 8014c28:	b901      	cbnz	r1, 8014c2c <__ascii_mbtowc+0x6>
 8014c2a:	a901      	add	r1, sp, #4
 8014c2c:	b142      	cbz	r2, 8014c40 <__ascii_mbtowc+0x1a>
 8014c2e:	b14b      	cbz	r3, 8014c44 <__ascii_mbtowc+0x1e>
 8014c30:	7813      	ldrb	r3, [r2, #0]
 8014c32:	600b      	str	r3, [r1, #0]
 8014c34:	7812      	ldrb	r2, [r2, #0]
 8014c36:	1e10      	subs	r0, r2, #0
 8014c38:	bf18      	it	ne
 8014c3a:	2001      	movne	r0, #1
 8014c3c:	b002      	add	sp, #8
 8014c3e:	4770      	bx	lr
 8014c40:	4610      	mov	r0, r2
 8014c42:	e7fb      	b.n	8014c3c <__ascii_mbtowc+0x16>
 8014c44:	f06f 0001 	mvn.w	r0, #1
 8014c48:	e7f8      	b.n	8014c3c <__ascii_mbtowc+0x16>

08014c4a <_realloc_r>:
 8014c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c4e:	4680      	mov	r8, r0
 8014c50:	4614      	mov	r4, r2
 8014c52:	460e      	mov	r6, r1
 8014c54:	b921      	cbnz	r1, 8014c60 <_realloc_r+0x16>
 8014c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c5a:	4611      	mov	r1, r2
 8014c5c:	f7fd be3e 	b.w	80128dc <_malloc_r>
 8014c60:	b92a      	cbnz	r2, 8014c6e <_realloc_r+0x24>
 8014c62:	f7fd fdc7 	bl	80127f4 <_free_r>
 8014c66:	4625      	mov	r5, r4
 8014c68:	4628      	mov	r0, r5
 8014c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c6e:	f000 f842 	bl	8014cf6 <_malloc_usable_size_r>
 8014c72:	4284      	cmp	r4, r0
 8014c74:	4607      	mov	r7, r0
 8014c76:	d802      	bhi.n	8014c7e <_realloc_r+0x34>
 8014c78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014c7c:	d812      	bhi.n	8014ca4 <_realloc_r+0x5a>
 8014c7e:	4621      	mov	r1, r4
 8014c80:	4640      	mov	r0, r8
 8014c82:	f7fd fe2b 	bl	80128dc <_malloc_r>
 8014c86:	4605      	mov	r5, r0
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d0ed      	beq.n	8014c68 <_realloc_r+0x1e>
 8014c8c:	42bc      	cmp	r4, r7
 8014c8e:	4622      	mov	r2, r4
 8014c90:	4631      	mov	r1, r6
 8014c92:	bf28      	it	cs
 8014c94:	463a      	movcs	r2, r7
 8014c96:	f7fc ff1e 	bl	8011ad6 <memcpy>
 8014c9a:	4631      	mov	r1, r6
 8014c9c:	4640      	mov	r0, r8
 8014c9e:	f7fd fda9 	bl	80127f4 <_free_r>
 8014ca2:	e7e1      	b.n	8014c68 <_realloc_r+0x1e>
 8014ca4:	4635      	mov	r5, r6
 8014ca6:	e7df      	b.n	8014c68 <_realloc_r+0x1e>

08014ca8 <__ascii_wctomb>:
 8014ca8:	b149      	cbz	r1, 8014cbe <__ascii_wctomb+0x16>
 8014caa:	2aff      	cmp	r2, #255	; 0xff
 8014cac:	bf85      	ittet	hi
 8014cae:	238a      	movhi	r3, #138	; 0x8a
 8014cb0:	6003      	strhi	r3, [r0, #0]
 8014cb2:	700a      	strbls	r2, [r1, #0]
 8014cb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014cb8:	bf98      	it	ls
 8014cba:	2001      	movls	r0, #1
 8014cbc:	4770      	bx	lr
 8014cbe:	4608      	mov	r0, r1
 8014cc0:	4770      	bx	lr
	...

08014cc4 <fiprintf>:
 8014cc4:	b40e      	push	{r1, r2, r3}
 8014cc6:	b503      	push	{r0, r1, lr}
 8014cc8:	4601      	mov	r1, r0
 8014cca:	ab03      	add	r3, sp, #12
 8014ccc:	4805      	ldr	r0, [pc, #20]	; (8014ce4 <fiprintf+0x20>)
 8014cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cd2:	6800      	ldr	r0, [r0, #0]
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	f000 f83f 	bl	8014d58 <_vfiprintf_r>
 8014cda:	b002      	add	sp, #8
 8014cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ce0:	b003      	add	sp, #12
 8014ce2:	4770      	bx	lr
 8014ce4:	2000026c 	.word	0x2000026c

08014ce8 <abort>:
 8014ce8:	b508      	push	{r3, lr}
 8014cea:	2006      	movs	r0, #6
 8014cec:	f000 fa0c 	bl	8015108 <raise>
 8014cf0:	2001      	movs	r0, #1
 8014cf2:	f7f1 f88f 	bl	8005e14 <_exit>

08014cf6 <_malloc_usable_size_r>:
 8014cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cfa:	1f18      	subs	r0, r3, #4
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	bfbc      	itt	lt
 8014d00:	580b      	ldrlt	r3, [r1, r0]
 8014d02:	18c0      	addlt	r0, r0, r3
 8014d04:	4770      	bx	lr

08014d06 <__sfputc_r>:
 8014d06:	6893      	ldr	r3, [r2, #8]
 8014d08:	3b01      	subs	r3, #1
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	b410      	push	{r4}
 8014d0e:	6093      	str	r3, [r2, #8]
 8014d10:	da08      	bge.n	8014d24 <__sfputc_r+0x1e>
 8014d12:	6994      	ldr	r4, [r2, #24]
 8014d14:	42a3      	cmp	r3, r4
 8014d16:	db01      	blt.n	8014d1c <__sfputc_r+0x16>
 8014d18:	290a      	cmp	r1, #10
 8014d1a:	d103      	bne.n	8014d24 <__sfputc_r+0x1e>
 8014d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d20:	f000 b934 	b.w	8014f8c <__swbuf_r>
 8014d24:	6813      	ldr	r3, [r2, #0]
 8014d26:	1c58      	adds	r0, r3, #1
 8014d28:	6010      	str	r0, [r2, #0]
 8014d2a:	7019      	strb	r1, [r3, #0]
 8014d2c:	4608      	mov	r0, r1
 8014d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <__sfputs_r>:
 8014d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d36:	4606      	mov	r6, r0
 8014d38:	460f      	mov	r7, r1
 8014d3a:	4614      	mov	r4, r2
 8014d3c:	18d5      	adds	r5, r2, r3
 8014d3e:	42ac      	cmp	r4, r5
 8014d40:	d101      	bne.n	8014d46 <__sfputs_r+0x12>
 8014d42:	2000      	movs	r0, #0
 8014d44:	e007      	b.n	8014d56 <__sfputs_r+0x22>
 8014d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d4a:	463a      	mov	r2, r7
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	f7ff ffda 	bl	8014d06 <__sfputc_r>
 8014d52:	1c43      	adds	r3, r0, #1
 8014d54:	d1f3      	bne.n	8014d3e <__sfputs_r+0xa>
 8014d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d58 <_vfiprintf_r>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	460d      	mov	r5, r1
 8014d5e:	b09d      	sub	sp, #116	; 0x74
 8014d60:	4614      	mov	r4, r2
 8014d62:	4698      	mov	r8, r3
 8014d64:	4606      	mov	r6, r0
 8014d66:	b118      	cbz	r0, 8014d70 <_vfiprintf_r+0x18>
 8014d68:	6a03      	ldr	r3, [r0, #32]
 8014d6a:	b90b      	cbnz	r3, 8014d70 <_vfiprintf_r+0x18>
 8014d6c:	f7fc fd9a 	bl	80118a4 <__sinit>
 8014d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d72:	07d9      	lsls	r1, r3, #31
 8014d74:	d405      	bmi.n	8014d82 <_vfiprintf_r+0x2a>
 8014d76:	89ab      	ldrh	r3, [r5, #12]
 8014d78:	059a      	lsls	r2, r3, #22
 8014d7a:	d402      	bmi.n	8014d82 <_vfiprintf_r+0x2a>
 8014d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d7e:	f7fc fea8 	bl	8011ad2 <__retarget_lock_acquire_recursive>
 8014d82:	89ab      	ldrh	r3, [r5, #12]
 8014d84:	071b      	lsls	r3, r3, #28
 8014d86:	d501      	bpl.n	8014d8c <_vfiprintf_r+0x34>
 8014d88:	692b      	ldr	r3, [r5, #16]
 8014d8a:	b99b      	cbnz	r3, 8014db4 <_vfiprintf_r+0x5c>
 8014d8c:	4629      	mov	r1, r5
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f000 f93a 	bl	8015008 <__swsetup_r>
 8014d94:	b170      	cbz	r0, 8014db4 <_vfiprintf_r+0x5c>
 8014d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d98:	07dc      	lsls	r4, r3, #31
 8014d9a:	d504      	bpl.n	8014da6 <_vfiprintf_r+0x4e>
 8014d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014da0:	b01d      	add	sp, #116	; 0x74
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	89ab      	ldrh	r3, [r5, #12]
 8014da8:	0598      	lsls	r0, r3, #22
 8014daa:	d4f7      	bmi.n	8014d9c <_vfiprintf_r+0x44>
 8014dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dae:	f7fc fe91 	bl	8011ad4 <__retarget_lock_release_recursive>
 8014db2:	e7f3      	b.n	8014d9c <_vfiprintf_r+0x44>
 8014db4:	2300      	movs	r3, #0
 8014db6:	9309      	str	r3, [sp, #36]	; 0x24
 8014db8:	2320      	movs	r3, #32
 8014dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dc2:	2330      	movs	r3, #48	; 0x30
 8014dc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014f78 <_vfiprintf_r+0x220>
 8014dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014dcc:	f04f 0901 	mov.w	r9, #1
 8014dd0:	4623      	mov	r3, r4
 8014dd2:	469a      	mov	sl, r3
 8014dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dd8:	b10a      	cbz	r2, 8014dde <_vfiprintf_r+0x86>
 8014dda:	2a25      	cmp	r2, #37	; 0x25
 8014ddc:	d1f9      	bne.n	8014dd2 <_vfiprintf_r+0x7a>
 8014dde:	ebba 0b04 	subs.w	fp, sl, r4
 8014de2:	d00b      	beq.n	8014dfc <_vfiprintf_r+0xa4>
 8014de4:	465b      	mov	r3, fp
 8014de6:	4622      	mov	r2, r4
 8014de8:	4629      	mov	r1, r5
 8014dea:	4630      	mov	r0, r6
 8014dec:	f7ff ffa2 	bl	8014d34 <__sfputs_r>
 8014df0:	3001      	adds	r0, #1
 8014df2:	f000 80a9 	beq.w	8014f48 <_vfiprintf_r+0x1f0>
 8014df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014df8:	445a      	add	r2, fp
 8014dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8014dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f000 80a1 	beq.w	8014f48 <_vfiprintf_r+0x1f0>
 8014e06:	2300      	movs	r3, #0
 8014e08:	f04f 32ff 	mov.w	r2, #4294967295
 8014e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e10:	f10a 0a01 	add.w	sl, sl, #1
 8014e14:	9304      	str	r3, [sp, #16]
 8014e16:	9307      	str	r3, [sp, #28]
 8014e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8014e1e:	4654      	mov	r4, sl
 8014e20:	2205      	movs	r2, #5
 8014e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e26:	4854      	ldr	r0, [pc, #336]	; (8014f78 <_vfiprintf_r+0x220>)
 8014e28:	f7eb f9fa 	bl	8000220 <memchr>
 8014e2c:	9a04      	ldr	r2, [sp, #16]
 8014e2e:	b9d8      	cbnz	r0, 8014e68 <_vfiprintf_r+0x110>
 8014e30:	06d1      	lsls	r1, r2, #27
 8014e32:	bf44      	itt	mi
 8014e34:	2320      	movmi	r3, #32
 8014e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e3a:	0713      	lsls	r3, r2, #28
 8014e3c:	bf44      	itt	mi
 8014e3e:	232b      	movmi	r3, #43	; 0x2b
 8014e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e44:	f89a 3000 	ldrb.w	r3, [sl]
 8014e48:	2b2a      	cmp	r3, #42	; 0x2a
 8014e4a:	d015      	beq.n	8014e78 <_vfiprintf_r+0x120>
 8014e4c:	9a07      	ldr	r2, [sp, #28]
 8014e4e:	4654      	mov	r4, sl
 8014e50:	2000      	movs	r0, #0
 8014e52:	f04f 0c0a 	mov.w	ip, #10
 8014e56:	4621      	mov	r1, r4
 8014e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e5c:	3b30      	subs	r3, #48	; 0x30
 8014e5e:	2b09      	cmp	r3, #9
 8014e60:	d94d      	bls.n	8014efe <_vfiprintf_r+0x1a6>
 8014e62:	b1b0      	cbz	r0, 8014e92 <_vfiprintf_r+0x13a>
 8014e64:	9207      	str	r2, [sp, #28]
 8014e66:	e014      	b.n	8014e92 <_vfiprintf_r+0x13a>
 8014e68:	eba0 0308 	sub.w	r3, r0, r8
 8014e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8014e70:	4313      	orrs	r3, r2
 8014e72:	9304      	str	r3, [sp, #16]
 8014e74:	46a2      	mov	sl, r4
 8014e76:	e7d2      	b.n	8014e1e <_vfiprintf_r+0xc6>
 8014e78:	9b03      	ldr	r3, [sp, #12]
 8014e7a:	1d19      	adds	r1, r3, #4
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	9103      	str	r1, [sp, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	bfbb      	ittet	lt
 8014e84:	425b      	neglt	r3, r3
 8014e86:	f042 0202 	orrlt.w	r2, r2, #2
 8014e8a:	9307      	strge	r3, [sp, #28]
 8014e8c:	9307      	strlt	r3, [sp, #28]
 8014e8e:	bfb8      	it	lt
 8014e90:	9204      	strlt	r2, [sp, #16]
 8014e92:	7823      	ldrb	r3, [r4, #0]
 8014e94:	2b2e      	cmp	r3, #46	; 0x2e
 8014e96:	d10c      	bne.n	8014eb2 <_vfiprintf_r+0x15a>
 8014e98:	7863      	ldrb	r3, [r4, #1]
 8014e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8014e9c:	d134      	bne.n	8014f08 <_vfiprintf_r+0x1b0>
 8014e9e:	9b03      	ldr	r3, [sp, #12]
 8014ea0:	1d1a      	adds	r2, r3, #4
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	9203      	str	r2, [sp, #12]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	bfb8      	it	lt
 8014eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8014eae:	3402      	adds	r4, #2
 8014eb0:	9305      	str	r3, [sp, #20]
 8014eb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014f88 <_vfiprintf_r+0x230>
 8014eb6:	7821      	ldrb	r1, [r4, #0]
 8014eb8:	2203      	movs	r2, #3
 8014eba:	4650      	mov	r0, sl
 8014ebc:	f7eb f9b0 	bl	8000220 <memchr>
 8014ec0:	b138      	cbz	r0, 8014ed2 <_vfiprintf_r+0x17a>
 8014ec2:	9b04      	ldr	r3, [sp, #16]
 8014ec4:	eba0 000a 	sub.w	r0, r0, sl
 8014ec8:	2240      	movs	r2, #64	; 0x40
 8014eca:	4082      	lsls	r2, r0
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	3401      	adds	r4, #1
 8014ed0:	9304      	str	r3, [sp, #16]
 8014ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed6:	4829      	ldr	r0, [pc, #164]	; (8014f7c <_vfiprintf_r+0x224>)
 8014ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014edc:	2206      	movs	r2, #6
 8014ede:	f7eb f99f 	bl	8000220 <memchr>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d03f      	beq.n	8014f66 <_vfiprintf_r+0x20e>
 8014ee6:	4b26      	ldr	r3, [pc, #152]	; (8014f80 <_vfiprintf_r+0x228>)
 8014ee8:	bb1b      	cbnz	r3, 8014f32 <_vfiprintf_r+0x1da>
 8014eea:	9b03      	ldr	r3, [sp, #12]
 8014eec:	3307      	adds	r3, #7
 8014eee:	f023 0307 	bic.w	r3, r3, #7
 8014ef2:	3308      	adds	r3, #8
 8014ef4:	9303      	str	r3, [sp, #12]
 8014ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ef8:	443b      	add	r3, r7
 8014efa:	9309      	str	r3, [sp, #36]	; 0x24
 8014efc:	e768      	b.n	8014dd0 <_vfiprintf_r+0x78>
 8014efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f02:	460c      	mov	r4, r1
 8014f04:	2001      	movs	r0, #1
 8014f06:	e7a6      	b.n	8014e56 <_vfiprintf_r+0xfe>
 8014f08:	2300      	movs	r3, #0
 8014f0a:	3401      	adds	r4, #1
 8014f0c:	9305      	str	r3, [sp, #20]
 8014f0e:	4619      	mov	r1, r3
 8014f10:	f04f 0c0a 	mov.w	ip, #10
 8014f14:	4620      	mov	r0, r4
 8014f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f1a:	3a30      	subs	r2, #48	; 0x30
 8014f1c:	2a09      	cmp	r2, #9
 8014f1e:	d903      	bls.n	8014f28 <_vfiprintf_r+0x1d0>
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d0c6      	beq.n	8014eb2 <_vfiprintf_r+0x15a>
 8014f24:	9105      	str	r1, [sp, #20]
 8014f26:	e7c4      	b.n	8014eb2 <_vfiprintf_r+0x15a>
 8014f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f2c:	4604      	mov	r4, r0
 8014f2e:	2301      	movs	r3, #1
 8014f30:	e7f0      	b.n	8014f14 <_vfiprintf_r+0x1bc>
 8014f32:	ab03      	add	r3, sp, #12
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	462a      	mov	r2, r5
 8014f38:	4b12      	ldr	r3, [pc, #72]	; (8014f84 <_vfiprintf_r+0x22c>)
 8014f3a:	a904      	add	r1, sp, #16
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f7fb fe4f 	bl	8010be0 <_printf_float>
 8014f42:	4607      	mov	r7, r0
 8014f44:	1c78      	adds	r0, r7, #1
 8014f46:	d1d6      	bne.n	8014ef6 <_vfiprintf_r+0x19e>
 8014f48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f4a:	07d9      	lsls	r1, r3, #31
 8014f4c:	d405      	bmi.n	8014f5a <_vfiprintf_r+0x202>
 8014f4e:	89ab      	ldrh	r3, [r5, #12]
 8014f50:	059a      	lsls	r2, r3, #22
 8014f52:	d402      	bmi.n	8014f5a <_vfiprintf_r+0x202>
 8014f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f56:	f7fc fdbd 	bl	8011ad4 <__retarget_lock_release_recursive>
 8014f5a:	89ab      	ldrh	r3, [r5, #12]
 8014f5c:	065b      	lsls	r3, r3, #25
 8014f5e:	f53f af1d 	bmi.w	8014d9c <_vfiprintf_r+0x44>
 8014f62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f64:	e71c      	b.n	8014da0 <_vfiprintf_r+0x48>
 8014f66:	ab03      	add	r3, sp, #12
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	462a      	mov	r2, r5
 8014f6c:	4b05      	ldr	r3, [pc, #20]	; (8014f84 <_vfiprintf_r+0x22c>)
 8014f6e:	a904      	add	r1, sp, #16
 8014f70:	4630      	mov	r0, r6
 8014f72:	f7fc f8d9 	bl	8011128 <_printf_i>
 8014f76:	e7e4      	b.n	8014f42 <_vfiprintf_r+0x1ea>
 8014f78:	08018291 	.word	0x08018291
 8014f7c:	0801829b 	.word	0x0801829b
 8014f80:	08010be1 	.word	0x08010be1
 8014f84:	08014d35 	.word	0x08014d35
 8014f88:	08018297 	.word	0x08018297

08014f8c <__swbuf_r>:
 8014f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8e:	460e      	mov	r6, r1
 8014f90:	4614      	mov	r4, r2
 8014f92:	4605      	mov	r5, r0
 8014f94:	b118      	cbz	r0, 8014f9e <__swbuf_r+0x12>
 8014f96:	6a03      	ldr	r3, [r0, #32]
 8014f98:	b90b      	cbnz	r3, 8014f9e <__swbuf_r+0x12>
 8014f9a:	f7fc fc83 	bl	80118a4 <__sinit>
 8014f9e:	69a3      	ldr	r3, [r4, #24]
 8014fa0:	60a3      	str	r3, [r4, #8]
 8014fa2:	89a3      	ldrh	r3, [r4, #12]
 8014fa4:	071a      	lsls	r2, r3, #28
 8014fa6:	d525      	bpl.n	8014ff4 <__swbuf_r+0x68>
 8014fa8:	6923      	ldr	r3, [r4, #16]
 8014faa:	b31b      	cbz	r3, 8014ff4 <__swbuf_r+0x68>
 8014fac:	6823      	ldr	r3, [r4, #0]
 8014fae:	6922      	ldr	r2, [r4, #16]
 8014fb0:	1a98      	subs	r0, r3, r2
 8014fb2:	6963      	ldr	r3, [r4, #20]
 8014fb4:	b2f6      	uxtb	r6, r6
 8014fb6:	4283      	cmp	r3, r0
 8014fb8:	4637      	mov	r7, r6
 8014fba:	dc04      	bgt.n	8014fc6 <__swbuf_r+0x3a>
 8014fbc:	4621      	mov	r1, r4
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f7ff fa3a 	bl	8014438 <_fflush_r>
 8014fc4:	b9e0      	cbnz	r0, 8015000 <__swbuf_r+0x74>
 8014fc6:	68a3      	ldr	r3, [r4, #8]
 8014fc8:	3b01      	subs	r3, #1
 8014fca:	60a3      	str	r3, [r4, #8]
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	1c5a      	adds	r2, r3, #1
 8014fd0:	6022      	str	r2, [r4, #0]
 8014fd2:	701e      	strb	r6, [r3, #0]
 8014fd4:	6962      	ldr	r2, [r4, #20]
 8014fd6:	1c43      	adds	r3, r0, #1
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d004      	beq.n	8014fe6 <__swbuf_r+0x5a>
 8014fdc:	89a3      	ldrh	r3, [r4, #12]
 8014fde:	07db      	lsls	r3, r3, #31
 8014fe0:	d506      	bpl.n	8014ff0 <__swbuf_r+0x64>
 8014fe2:	2e0a      	cmp	r6, #10
 8014fe4:	d104      	bne.n	8014ff0 <__swbuf_r+0x64>
 8014fe6:	4621      	mov	r1, r4
 8014fe8:	4628      	mov	r0, r5
 8014fea:	f7ff fa25 	bl	8014438 <_fflush_r>
 8014fee:	b938      	cbnz	r0, 8015000 <__swbuf_r+0x74>
 8014ff0:	4638      	mov	r0, r7
 8014ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ff4:	4621      	mov	r1, r4
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	f000 f806 	bl	8015008 <__swsetup_r>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d0d5      	beq.n	8014fac <__swbuf_r+0x20>
 8015000:	f04f 37ff 	mov.w	r7, #4294967295
 8015004:	e7f4      	b.n	8014ff0 <__swbuf_r+0x64>
	...

08015008 <__swsetup_r>:
 8015008:	b538      	push	{r3, r4, r5, lr}
 801500a:	4b2a      	ldr	r3, [pc, #168]	; (80150b4 <__swsetup_r+0xac>)
 801500c:	4605      	mov	r5, r0
 801500e:	6818      	ldr	r0, [r3, #0]
 8015010:	460c      	mov	r4, r1
 8015012:	b118      	cbz	r0, 801501c <__swsetup_r+0x14>
 8015014:	6a03      	ldr	r3, [r0, #32]
 8015016:	b90b      	cbnz	r3, 801501c <__swsetup_r+0x14>
 8015018:	f7fc fc44 	bl	80118a4 <__sinit>
 801501c:	89a3      	ldrh	r3, [r4, #12]
 801501e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015022:	0718      	lsls	r0, r3, #28
 8015024:	d422      	bmi.n	801506c <__swsetup_r+0x64>
 8015026:	06d9      	lsls	r1, r3, #27
 8015028:	d407      	bmi.n	801503a <__swsetup_r+0x32>
 801502a:	2309      	movs	r3, #9
 801502c:	602b      	str	r3, [r5, #0]
 801502e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015032:	81a3      	strh	r3, [r4, #12]
 8015034:	f04f 30ff 	mov.w	r0, #4294967295
 8015038:	e034      	b.n	80150a4 <__swsetup_r+0x9c>
 801503a:	0758      	lsls	r0, r3, #29
 801503c:	d512      	bpl.n	8015064 <__swsetup_r+0x5c>
 801503e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015040:	b141      	cbz	r1, 8015054 <__swsetup_r+0x4c>
 8015042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015046:	4299      	cmp	r1, r3
 8015048:	d002      	beq.n	8015050 <__swsetup_r+0x48>
 801504a:	4628      	mov	r0, r5
 801504c:	f7fd fbd2 	bl	80127f4 <_free_r>
 8015050:	2300      	movs	r3, #0
 8015052:	6363      	str	r3, [r4, #52]	; 0x34
 8015054:	89a3      	ldrh	r3, [r4, #12]
 8015056:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801505a:	81a3      	strh	r3, [r4, #12]
 801505c:	2300      	movs	r3, #0
 801505e:	6063      	str	r3, [r4, #4]
 8015060:	6923      	ldr	r3, [r4, #16]
 8015062:	6023      	str	r3, [r4, #0]
 8015064:	89a3      	ldrh	r3, [r4, #12]
 8015066:	f043 0308 	orr.w	r3, r3, #8
 801506a:	81a3      	strh	r3, [r4, #12]
 801506c:	6923      	ldr	r3, [r4, #16]
 801506e:	b94b      	cbnz	r3, 8015084 <__swsetup_r+0x7c>
 8015070:	89a3      	ldrh	r3, [r4, #12]
 8015072:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801507a:	d003      	beq.n	8015084 <__swsetup_r+0x7c>
 801507c:	4621      	mov	r1, r4
 801507e:	4628      	mov	r0, r5
 8015080:	f000 f884 	bl	801518c <__smakebuf_r>
 8015084:	89a0      	ldrh	r0, [r4, #12]
 8015086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801508a:	f010 0301 	ands.w	r3, r0, #1
 801508e:	d00a      	beq.n	80150a6 <__swsetup_r+0x9e>
 8015090:	2300      	movs	r3, #0
 8015092:	60a3      	str	r3, [r4, #8]
 8015094:	6963      	ldr	r3, [r4, #20]
 8015096:	425b      	negs	r3, r3
 8015098:	61a3      	str	r3, [r4, #24]
 801509a:	6923      	ldr	r3, [r4, #16]
 801509c:	b943      	cbnz	r3, 80150b0 <__swsetup_r+0xa8>
 801509e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80150a2:	d1c4      	bne.n	801502e <__swsetup_r+0x26>
 80150a4:	bd38      	pop	{r3, r4, r5, pc}
 80150a6:	0781      	lsls	r1, r0, #30
 80150a8:	bf58      	it	pl
 80150aa:	6963      	ldrpl	r3, [r4, #20]
 80150ac:	60a3      	str	r3, [r4, #8]
 80150ae:	e7f4      	b.n	801509a <__swsetup_r+0x92>
 80150b0:	2000      	movs	r0, #0
 80150b2:	e7f7      	b.n	80150a4 <__swsetup_r+0x9c>
 80150b4:	2000026c 	.word	0x2000026c

080150b8 <_raise_r>:
 80150b8:	291f      	cmp	r1, #31
 80150ba:	b538      	push	{r3, r4, r5, lr}
 80150bc:	4604      	mov	r4, r0
 80150be:	460d      	mov	r5, r1
 80150c0:	d904      	bls.n	80150cc <_raise_r+0x14>
 80150c2:	2316      	movs	r3, #22
 80150c4:	6003      	str	r3, [r0, #0]
 80150c6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ca:	bd38      	pop	{r3, r4, r5, pc}
 80150cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80150ce:	b112      	cbz	r2, 80150d6 <_raise_r+0x1e>
 80150d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150d4:	b94b      	cbnz	r3, 80150ea <_raise_r+0x32>
 80150d6:	4620      	mov	r0, r4
 80150d8:	f000 f830 	bl	801513c <_getpid_r>
 80150dc:	462a      	mov	r2, r5
 80150de:	4601      	mov	r1, r0
 80150e0:	4620      	mov	r0, r4
 80150e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150e6:	f000 b817 	b.w	8015118 <_kill_r>
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d00a      	beq.n	8015104 <_raise_r+0x4c>
 80150ee:	1c59      	adds	r1, r3, #1
 80150f0:	d103      	bne.n	80150fa <_raise_r+0x42>
 80150f2:	2316      	movs	r3, #22
 80150f4:	6003      	str	r3, [r0, #0]
 80150f6:	2001      	movs	r0, #1
 80150f8:	e7e7      	b.n	80150ca <_raise_r+0x12>
 80150fa:	2400      	movs	r4, #0
 80150fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015100:	4628      	mov	r0, r5
 8015102:	4798      	blx	r3
 8015104:	2000      	movs	r0, #0
 8015106:	e7e0      	b.n	80150ca <_raise_r+0x12>

08015108 <raise>:
 8015108:	4b02      	ldr	r3, [pc, #8]	; (8015114 <raise+0xc>)
 801510a:	4601      	mov	r1, r0
 801510c:	6818      	ldr	r0, [r3, #0]
 801510e:	f7ff bfd3 	b.w	80150b8 <_raise_r>
 8015112:	bf00      	nop
 8015114:	2000026c 	.word	0x2000026c

08015118 <_kill_r>:
 8015118:	b538      	push	{r3, r4, r5, lr}
 801511a:	4d07      	ldr	r5, [pc, #28]	; (8015138 <_kill_r+0x20>)
 801511c:	2300      	movs	r3, #0
 801511e:	4604      	mov	r4, r0
 8015120:	4608      	mov	r0, r1
 8015122:	4611      	mov	r1, r2
 8015124:	602b      	str	r3, [r5, #0]
 8015126:	f7f0 fe65 	bl	8005df4 <_kill>
 801512a:	1c43      	adds	r3, r0, #1
 801512c:	d102      	bne.n	8015134 <_kill_r+0x1c>
 801512e:	682b      	ldr	r3, [r5, #0]
 8015130:	b103      	cbz	r3, 8015134 <_kill_r+0x1c>
 8015132:	6023      	str	r3, [r4, #0]
 8015134:	bd38      	pop	{r3, r4, r5, pc}
 8015136:	bf00      	nop
 8015138:	200023b8 	.word	0x200023b8

0801513c <_getpid_r>:
 801513c:	f7f0 be52 	b.w	8005de4 <_getpid>

08015140 <__swhatbuf_r>:
 8015140:	b570      	push	{r4, r5, r6, lr}
 8015142:	460c      	mov	r4, r1
 8015144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015148:	2900      	cmp	r1, #0
 801514a:	b096      	sub	sp, #88	; 0x58
 801514c:	4615      	mov	r5, r2
 801514e:	461e      	mov	r6, r3
 8015150:	da0d      	bge.n	801516e <__swhatbuf_r+0x2e>
 8015152:	89a3      	ldrh	r3, [r4, #12]
 8015154:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015158:	f04f 0100 	mov.w	r1, #0
 801515c:	bf0c      	ite	eq
 801515e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015162:	2340      	movne	r3, #64	; 0x40
 8015164:	2000      	movs	r0, #0
 8015166:	6031      	str	r1, [r6, #0]
 8015168:	602b      	str	r3, [r5, #0]
 801516a:	b016      	add	sp, #88	; 0x58
 801516c:	bd70      	pop	{r4, r5, r6, pc}
 801516e:	466a      	mov	r2, sp
 8015170:	f000 f848 	bl	8015204 <_fstat_r>
 8015174:	2800      	cmp	r0, #0
 8015176:	dbec      	blt.n	8015152 <__swhatbuf_r+0x12>
 8015178:	9901      	ldr	r1, [sp, #4]
 801517a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801517e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015182:	4259      	negs	r1, r3
 8015184:	4159      	adcs	r1, r3
 8015186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801518a:	e7eb      	b.n	8015164 <__swhatbuf_r+0x24>

0801518c <__smakebuf_r>:
 801518c:	898b      	ldrh	r3, [r1, #12]
 801518e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015190:	079d      	lsls	r5, r3, #30
 8015192:	4606      	mov	r6, r0
 8015194:	460c      	mov	r4, r1
 8015196:	d507      	bpl.n	80151a8 <__smakebuf_r+0x1c>
 8015198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801519c:	6023      	str	r3, [r4, #0]
 801519e:	6123      	str	r3, [r4, #16]
 80151a0:	2301      	movs	r3, #1
 80151a2:	6163      	str	r3, [r4, #20]
 80151a4:	b002      	add	sp, #8
 80151a6:	bd70      	pop	{r4, r5, r6, pc}
 80151a8:	ab01      	add	r3, sp, #4
 80151aa:	466a      	mov	r2, sp
 80151ac:	f7ff ffc8 	bl	8015140 <__swhatbuf_r>
 80151b0:	9900      	ldr	r1, [sp, #0]
 80151b2:	4605      	mov	r5, r0
 80151b4:	4630      	mov	r0, r6
 80151b6:	f7fd fb91 	bl	80128dc <_malloc_r>
 80151ba:	b948      	cbnz	r0, 80151d0 <__smakebuf_r+0x44>
 80151bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151c0:	059a      	lsls	r2, r3, #22
 80151c2:	d4ef      	bmi.n	80151a4 <__smakebuf_r+0x18>
 80151c4:	f023 0303 	bic.w	r3, r3, #3
 80151c8:	f043 0302 	orr.w	r3, r3, #2
 80151cc:	81a3      	strh	r3, [r4, #12]
 80151ce:	e7e3      	b.n	8015198 <__smakebuf_r+0xc>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	6020      	str	r0, [r4, #0]
 80151d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151d8:	81a3      	strh	r3, [r4, #12]
 80151da:	9b00      	ldr	r3, [sp, #0]
 80151dc:	6163      	str	r3, [r4, #20]
 80151de:	9b01      	ldr	r3, [sp, #4]
 80151e0:	6120      	str	r0, [r4, #16]
 80151e2:	b15b      	cbz	r3, 80151fc <__smakebuf_r+0x70>
 80151e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151e8:	4630      	mov	r0, r6
 80151ea:	f000 f81d 	bl	8015228 <_isatty_r>
 80151ee:	b128      	cbz	r0, 80151fc <__smakebuf_r+0x70>
 80151f0:	89a3      	ldrh	r3, [r4, #12]
 80151f2:	f023 0303 	bic.w	r3, r3, #3
 80151f6:	f043 0301 	orr.w	r3, r3, #1
 80151fa:	81a3      	strh	r3, [r4, #12]
 80151fc:	89a3      	ldrh	r3, [r4, #12]
 80151fe:	431d      	orrs	r5, r3
 8015200:	81a5      	strh	r5, [r4, #12]
 8015202:	e7cf      	b.n	80151a4 <__smakebuf_r+0x18>

08015204 <_fstat_r>:
 8015204:	b538      	push	{r3, r4, r5, lr}
 8015206:	4d07      	ldr	r5, [pc, #28]	; (8015224 <_fstat_r+0x20>)
 8015208:	2300      	movs	r3, #0
 801520a:	4604      	mov	r4, r0
 801520c:	4608      	mov	r0, r1
 801520e:	4611      	mov	r1, r2
 8015210:	602b      	str	r3, [r5, #0]
 8015212:	f7f0 fe4e 	bl	8005eb2 <_fstat>
 8015216:	1c43      	adds	r3, r0, #1
 8015218:	d102      	bne.n	8015220 <_fstat_r+0x1c>
 801521a:	682b      	ldr	r3, [r5, #0]
 801521c:	b103      	cbz	r3, 8015220 <_fstat_r+0x1c>
 801521e:	6023      	str	r3, [r4, #0]
 8015220:	bd38      	pop	{r3, r4, r5, pc}
 8015222:	bf00      	nop
 8015224:	200023b8 	.word	0x200023b8

08015228 <_isatty_r>:
 8015228:	b538      	push	{r3, r4, r5, lr}
 801522a:	4d06      	ldr	r5, [pc, #24]	; (8015244 <_isatty_r+0x1c>)
 801522c:	2300      	movs	r3, #0
 801522e:	4604      	mov	r4, r0
 8015230:	4608      	mov	r0, r1
 8015232:	602b      	str	r3, [r5, #0]
 8015234:	f7f0 fe4d 	bl	8005ed2 <_isatty>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d102      	bne.n	8015242 <_isatty_r+0x1a>
 801523c:	682b      	ldr	r3, [r5, #0]
 801523e:	b103      	cbz	r3, 8015242 <_isatty_r+0x1a>
 8015240:	6023      	str	r3, [r4, #0]
 8015242:	bd38      	pop	{r3, r4, r5, pc}
 8015244:	200023b8 	.word	0x200023b8

08015248 <fmod>:
 8015248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801524a:	ed2d 8b02 	vpush	{d8}
 801524e:	ec57 6b10 	vmov	r6, r7, d0
 8015252:	ec55 4b11 	vmov	r4, r5, d1
 8015256:	f000 f86d 	bl	8015334 <__ieee754_fmod>
 801525a:	4622      	mov	r2, r4
 801525c:	462b      	mov	r3, r5
 801525e:	4630      	mov	r0, r6
 8015260:	4639      	mov	r1, r7
 8015262:	eeb0 8a40 	vmov.f32	s16, s0
 8015266:	eef0 8a60 	vmov.f32	s17, s1
 801526a:	f7eb fc87 	bl	8000b7c <__aeabi_dcmpun>
 801526e:	b990      	cbnz	r0, 8015296 <fmod+0x4e>
 8015270:	2200      	movs	r2, #0
 8015272:	2300      	movs	r3, #0
 8015274:	4620      	mov	r0, r4
 8015276:	4629      	mov	r1, r5
 8015278:	f7eb fc4e 	bl	8000b18 <__aeabi_dcmpeq>
 801527c:	b158      	cbz	r0, 8015296 <fmod+0x4e>
 801527e:	f7fc fbfd 	bl	8011a7c <__errno>
 8015282:	2321      	movs	r3, #33	; 0x21
 8015284:	6003      	str	r3, [r0, #0]
 8015286:	2200      	movs	r2, #0
 8015288:	2300      	movs	r3, #0
 801528a:	4610      	mov	r0, r2
 801528c:	4619      	mov	r1, r3
 801528e:	f7eb fb05 	bl	800089c <__aeabi_ddiv>
 8015292:	ec41 0b18 	vmov	d8, r0, r1
 8015296:	eeb0 0a48 	vmov.f32	s0, s16
 801529a:	eef0 0a68 	vmov.f32	s1, s17
 801529e:	ecbd 8b02 	vpop	{d8}
 80152a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152a4 <round>:
 80152a4:	ec53 2b10 	vmov	r2, r3, d0
 80152a8:	b570      	push	{r4, r5, r6, lr}
 80152aa:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80152ae:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80152b2:	2813      	cmp	r0, #19
 80152b4:	ee10 5a10 	vmov	r5, s0
 80152b8:	4619      	mov	r1, r3
 80152ba:	dc18      	bgt.n	80152ee <round+0x4a>
 80152bc:	2800      	cmp	r0, #0
 80152be:	da09      	bge.n	80152d4 <round+0x30>
 80152c0:	3001      	adds	r0, #1
 80152c2:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80152c6:	d103      	bne.n	80152d0 <round+0x2c>
 80152c8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80152cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80152d0:	2300      	movs	r3, #0
 80152d2:	e02a      	b.n	801532a <round+0x86>
 80152d4:	4c16      	ldr	r4, [pc, #88]	; (8015330 <round+0x8c>)
 80152d6:	4104      	asrs	r4, r0
 80152d8:	ea03 0604 	and.w	r6, r3, r4
 80152dc:	4316      	orrs	r6, r2
 80152de:	d011      	beq.n	8015304 <round+0x60>
 80152e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80152e4:	4103      	asrs	r3, r0
 80152e6:	440b      	add	r3, r1
 80152e8:	ea23 0104 	bic.w	r1, r3, r4
 80152ec:	e7f0      	b.n	80152d0 <round+0x2c>
 80152ee:	2833      	cmp	r0, #51	; 0x33
 80152f0:	dd0b      	ble.n	801530a <round+0x66>
 80152f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80152f6:	d105      	bne.n	8015304 <round+0x60>
 80152f8:	ee10 0a10 	vmov	r0, s0
 80152fc:	f7ea ffee 	bl	80002dc <__adddf3>
 8015300:	4602      	mov	r2, r0
 8015302:	460b      	mov	r3, r1
 8015304:	ec43 2b10 	vmov	d0, r2, r3
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801530e:	f04f 34ff 	mov.w	r4, #4294967295
 8015312:	40f4      	lsrs	r4, r6
 8015314:	4214      	tst	r4, r2
 8015316:	d0f5      	beq.n	8015304 <round+0x60>
 8015318:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801531c:	2301      	movs	r3, #1
 801531e:	4083      	lsls	r3, r0
 8015320:	195b      	adds	r3, r3, r5
 8015322:	bf28      	it	cs
 8015324:	3101      	addcs	r1, #1
 8015326:	ea23 0304 	bic.w	r3, r3, r4
 801532a:	461a      	mov	r2, r3
 801532c:	460b      	mov	r3, r1
 801532e:	e7e9      	b.n	8015304 <round+0x60>
 8015330:	000fffff 	.word	0x000fffff

08015334 <__ieee754_fmod>:
 8015334:	ec53 2b11 	vmov	r2, r3, d1
 8015338:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015340:	ea5c 0402 	orrs.w	r4, ip, r2
 8015344:	ec51 0b10 	vmov	r0, r1, d0
 8015348:	ee11 7a10 	vmov	r7, s2
 801534c:	ee11 ea10 	vmov	lr, s2
 8015350:	461e      	mov	r6, r3
 8015352:	d00c      	beq.n	801536e <__ieee754_fmod+0x3a>
 8015354:	4c78      	ldr	r4, [pc, #480]	; (8015538 <__ieee754_fmod+0x204>)
 8015356:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801535a:	45a0      	cmp	r8, r4
 801535c:	4689      	mov	r9, r1
 801535e:	dc06      	bgt.n	801536e <__ieee754_fmod+0x3a>
 8015360:	4254      	negs	r4, r2
 8015362:	4d76      	ldr	r5, [pc, #472]	; (801553c <__ieee754_fmod+0x208>)
 8015364:	4314      	orrs	r4, r2
 8015366:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801536a:	42ac      	cmp	r4, r5
 801536c:	d909      	bls.n	8015382 <__ieee754_fmod+0x4e>
 801536e:	f7eb f96b 	bl	8000648 <__aeabi_dmul>
 8015372:	4602      	mov	r2, r0
 8015374:	460b      	mov	r3, r1
 8015376:	f7eb fa91 	bl	800089c <__aeabi_ddiv>
 801537a:	ec41 0b10 	vmov	d0, r0, r1
 801537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015382:	45e0      	cmp	r8, ip
 8015384:	ee10 aa10 	vmov	sl, s0
 8015388:	ee10 4a10 	vmov	r4, s0
 801538c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8015390:	dc09      	bgt.n	80153a6 <__ieee754_fmod+0x72>
 8015392:	dbf2      	blt.n	801537a <__ieee754_fmod+0x46>
 8015394:	4290      	cmp	r0, r2
 8015396:	d3f0      	bcc.n	801537a <__ieee754_fmod+0x46>
 8015398:	d105      	bne.n	80153a6 <__ieee754_fmod+0x72>
 801539a:	4b69      	ldr	r3, [pc, #420]	; (8015540 <__ieee754_fmod+0x20c>)
 801539c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80153a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80153a4:	e7e9      	b.n	801537a <__ieee754_fmod+0x46>
 80153a6:	4a65      	ldr	r2, [pc, #404]	; (801553c <__ieee754_fmod+0x208>)
 80153a8:	ea19 0f02 	tst.w	r9, r2
 80153ac:	d148      	bne.n	8015440 <__ieee754_fmod+0x10c>
 80153ae:	f1b8 0f00 	cmp.w	r8, #0
 80153b2:	d13d      	bne.n	8015430 <__ieee754_fmod+0xfc>
 80153b4:	4963      	ldr	r1, [pc, #396]	; (8015544 <__ieee754_fmod+0x210>)
 80153b6:	4653      	mov	r3, sl
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	dc36      	bgt.n	801542a <__ieee754_fmod+0xf6>
 80153bc:	4216      	tst	r6, r2
 80153be:	d14f      	bne.n	8015460 <__ieee754_fmod+0x12c>
 80153c0:	f1bc 0f00 	cmp.w	ip, #0
 80153c4:	d144      	bne.n	8015450 <__ieee754_fmod+0x11c>
 80153c6:	4a5f      	ldr	r2, [pc, #380]	; (8015544 <__ieee754_fmod+0x210>)
 80153c8:	463b      	mov	r3, r7
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	dc3d      	bgt.n	801544a <__ieee754_fmod+0x116>
 80153ce:	485e      	ldr	r0, [pc, #376]	; (8015548 <__ieee754_fmod+0x214>)
 80153d0:	4281      	cmp	r1, r0
 80153d2:	db4a      	blt.n	801546a <__ieee754_fmod+0x136>
 80153d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80153dc:	485a      	ldr	r0, [pc, #360]	; (8015548 <__ieee754_fmod+0x214>)
 80153de:	4282      	cmp	r2, r0
 80153e0:	db57      	blt.n	8015492 <__ieee754_fmod+0x15e>
 80153e2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80153e6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80153ea:	1a89      	subs	r1, r1, r2
 80153ec:	1b98      	subs	r0, r3, r6
 80153ee:	eba4 070e 	sub.w	r7, r4, lr
 80153f2:	2900      	cmp	r1, #0
 80153f4:	d162      	bne.n	80154bc <__ieee754_fmod+0x188>
 80153f6:	4574      	cmp	r4, lr
 80153f8:	bf38      	it	cc
 80153fa:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80153fe:	2800      	cmp	r0, #0
 8015400:	bfa4      	itt	ge
 8015402:	463c      	movge	r4, r7
 8015404:	4603      	movge	r3, r0
 8015406:	ea53 0104 	orrs.w	r1, r3, r4
 801540a:	d0c6      	beq.n	801539a <__ieee754_fmod+0x66>
 801540c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015410:	db69      	blt.n	80154e6 <__ieee754_fmod+0x1b2>
 8015412:	494d      	ldr	r1, [pc, #308]	; (8015548 <__ieee754_fmod+0x214>)
 8015414:	428a      	cmp	r2, r1
 8015416:	db6c      	blt.n	80154f2 <__ieee754_fmod+0x1be>
 8015418:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801541c:	432b      	orrs	r3, r5
 801541e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8015422:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015426:	4620      	mov	r0, r4
 8015428:	e7a7      	b.n	801537a <__ieee754_fmod+0x46>
 801542a:	3901      	subs	r1, #1
 801542c:	005b      	lsls	r3, r3, #1
 801542e:	e7c3      	b.n	80153b8 <__ieee754_fmod+0x84>
 8015430:	4945      	ldr	r1, [pc, #276]	; (8015548 <__ieee754_fmod+0x214>)
 8015432:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8015436:	2b00      	cmp	r3, #0
 8015438:	ddc0      	ble.n	80153bc <__ieee754_fmod+0x88>
 801543a:	3901      	subs	r1, #1
 801543c:	005b      	lsls	r3, r3, #1
 801543e:	e7fa      	b.n	8015436 <__ieee754_fmod+0x102>
 8015440:	ea4f 5128 	mov.w	r1, r8, asr #20
 8015444:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015448:	e7b8      	b.n	80153bc <__ieee754_fmod+0x88>
 801544a:	3a01      	subs	r2, #1
 801544c:	005b      	lsls	r3, r3, #1
 801544e:	e7bc      	b.n	80153ca <__ieee754_fmod+0x96>
 8015450:	4a3d      	ldr	r2, [pc, #244]	; (8015548 <__ieee754_fmod+0x214>)
 8015452:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8015456:	2b00      	cmp	r3, #0
 8015458:	ddb9      	ble.n	80153ce <__ieee754_fmod+0x9a>
 801545a:	3a01      	subs	r2, #1
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	e7fa      	b.n	8015456 <__ieee754_fmod+0x122>
 8015460:	ea4f 522c 	mov.w	r2, ip, asr #20
 8015464:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015468:	e7b1      	b.n	80153ce <__ieee754_fmod+0x9a>
 801546a:	1a40      	subs	r0, r0, r1
 801546c:	281f      	cmp	r0, #31
 801546e:	dc0a      	bgt.n	8015486 <__ieee754_fmod+0x152>
 8015470:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8015474:	fa08 f800 	lsl.w	r8, r8, r0
 8015478:	fa2a f303 	lsr.w	r3, sl, r3
 801547c:	ea43 0308 	orr.w	r3, r3, r8
 8015480:	fa0a f400 	lsl.w	r4, sl, r0
 8015484:	e7aa      	b.n	80153dc <__ieee754_fmod+0xa8>
 8015486:	4b31      	ldr	r3, [pc, #196]	; (801554c <__ieee754_fmod+0x218>)
 8015488:	1a5b      	subs	r3, r3, r1
 801548a:	fa0a f303 	lsl.w	r3, sl, r3
 801548e:	2400      	movs	r4, #0
 8015490:	e7a4      	b.n	80153dc <__ieee754_fmod+0xa8>
 8015492:	1a80      	subs	r0, r0, r2
 8015494:	281f      	cmp	r0, #31
 8015496:	dc0a      	bgt.n	80154ae <__ieee754_fmod+0x17a>
 8015498:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801549c:	fa0c fc00 	lsl.w	ip, ip, r0
 80154a0:	fa27 f606 	lsr.w	r6, r7, r6
 80154a4:	ea46 060c 	orr.w	r6, r6, ip
 80154a8:	fa07 fe00 	lsl.w	lr, r7, r0
 80154ac:	e79d      	b.n	80153ea <__ieee754_fmod+0xb6>
 80154ae:	4e27      	ldr	r6, [pc, #156]	; (801554c <__ieee754_fmod+0x218>)
 80154b0:	1ab6      	subs	r6, r6, r2
 80154b2:	fa07 f606 	lsl.w	r6, r7, r6
 80154b6:	f04f 0e00 	mov.w	lr, #0
 80154ba:	e796      	b.n	80153ea <__ieee754_fmod+0xb6>
 80154bc:	4574      	cmp	r4, lr
 80154be:	bf38      	it	cc
 80154c0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80154c4:	2800      	cmp	r0, #0
 80154c6:	da05      	bge.n	80154d4 <__ieee754_fmod+0x1a0>
 80154c8:	0fe0      	lsrs	r0, r4, #31
 80154ca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80154ce:	0064      	lsls	r4, r4, #1
 80154d0:	3901      	subs	r1, #1
 80154d2:	e78b      	b.n	80153ec <__ieee754_fmod+0xb8>
 80154d4:	ea50 0307 	orrs.w	r3, r0, r7
 80154d8:	f43f af5f 	beq.w	801539a <__ieee754_fmod+0x66>
 80154dc:	0ffb      	lsrs	r3, r7, #31
 80154de:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80154e2:	007c      	lsls	r4, r7, #1
 80154e4:	e7f4      	b.n	80154d0 <__ieee754_fmod+0x19c>
 80154e6:	0fe1      	lsrs	r1, r4, #31
 80154e8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80154ec:	0064      	lsls	r4, r4, #1
 80154ee:	3a01      	subs	r2, #1
 80154f0:	e78c      	b.n	801540c <__ieee754_fmod+0xd8>
 80154f2:	1a89      	subs	r1, r1, r2
 80154f4:	2914      	cmp	r1, #20
 80154f6:	dc0a      	bgt.n	801550e <__ieee754_fmod+0x1da>
 80154f8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80154fc:	fa03 f202 	lsl.w	r2, r3, r2
 8015500:	40cc      	lsrs	r4, r1
 8015502:	4322      	orrs	r2, r4
 8015504:	410b      	asrs	r3, r1
 8015506:	ea43 0105 	orr.w	r1, r3, r5
 801550a:	4610      	mov	r0, r2
 801550c:	e735      	b.n	801537a <__ieee754_fmod+0x46>
 801550e:	291f      	cmp	r1, #31
 8015510:	dc07      	bgt.n	8015522 <__ieee754_fmod+0x1ee>
 8015512:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8015516:	40cc      	lsrs	r4, r1
 8015518:	fa03 f202 	lsl.w	r2, r3, r2
 801551c:	4322      	orrs	r2, r4
 801551e:	462b      	mov	r3, r5
 8015520:	e7f1      	b.n	8015506 <__ieee754_fmod+0x1d2>
 8015522:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8015526:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801552a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801552e:	32e2      	adds	r2, #226	; 0xe2
 8015530:	fa43 f202 	asr.w	r2, r3, r2
 8015534:	e7f3      	b.n	801551e <__ieee754_fmod+0x1ea>
 8015536:	bf00      	nop
 8015538:	7fefffff 	.word	0x7fefffff
 801553c:	7ff00000 	.word	0x7ff00000
 8015540:	08018348 	.word	0x08018348
 8015544:	fffffbed 	.word	0xfffffbed
 8015548:	fffffc02 	.word	0xfffffc02
 801554c:	fffffbe2 	.word	0xfffffbe2

08015550 <_init>:
 8015550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015552:	bf00      	nop
 8015554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015556:	bc08      	pop	{r3}
 8015558:	469e      	mov	lr, r3
 801555a:	4770      	bx	lr

0801555c <_fini>:
 801555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555e:	bf00      	nop
 8015560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015562:	bc08      	pop	{r3}
 8015564:	469e      	mov	lr, r3
 8015566:	4770      	bx	lr
