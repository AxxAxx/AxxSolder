
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a38  08017ef8  08017ef8  00027ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b930  0801b930  000304e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b930  0801b930  0002b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b938  0801b938  000304e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b938  0801b938  0002b938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b93c  0801b93c  0002b93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  0801b940  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029f0  200004e8  0801be24  000304e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ed8  0801be24  00032ed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030514  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f112  00000000  00000000  00030557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000653d  00000000  00000000  0005f669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002920  00000000  00000000  00065ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f91  00000000  00000000  000684c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287b1  00000000  00000000  0006a459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034c1c  00000000  00000000  00092c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee5cb  00000000  00000000  000c7826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c1cc  00000000  00000000  001b5df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c1fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004e8 	.word	0x200004e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017ee0 	.word	0x08017ee0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004ec 	.word	0x200004ec
 800021c:	08017ee0 	.word	0x08017ee0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <FlashCheckCRC+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <FlashCheckCRC+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FlashCheckCRC+0x70>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <FlashCheckCRC+0x74>)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <FlashCheckCRC+0x78>)
 8001028:	f006 fcfc 	bl	8007a24 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	461c      	mov	r4, r3
 8001032:	4615      	mov	r5, r2
 8001034:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800103e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	4299      	cmp	r1, r3
 800104c:	bf08      	it	eq
 800104e:	4290      	cmpeq	r0, r2
 8001050:	d101      	bne.n	8001056 <FlashCheckCRC+0x66>
	{
		return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <FlashCheckCRC+0x68>
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	0801f000 	.word	0x0801f000
 8001068:	20001738 	.word	0x20001738

0800106c <FlashReadToBuf>:


bool FlashReadToBuf()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <FlashReadToBuf+0x88>)
 8001078:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 800107a:	f7ff ffb9 	bl	8000ff0 <FlashCheckCRC>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8001084:	e025      	b.n	80010d2 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e013      	b.n	80010c0 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	1d39      	adds	r1, r7, #4
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	7811      	ldrb	r1, [r2, #0]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <FlashReadToBuf+0x90>)
 80010b8:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dde8      	ble.n	8001098 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3308      	adds	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
			i = i + 8;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3308      	adds	r3, #8
 80010d0:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d203      	bcs.n	80010e4 <FlashReadToBuf+0x78>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <FlashReadToBuf+0x94>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3d0      	bcc.n	8001086 <FlashReadToBuf+0x1a>
		}
		return true;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <FlashReadToBuf+0x7e>
	}
	return false;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801f000 	.word	0x0801f000
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000508 	.word	0x20000508
 8001100:	0801ffff 	.word	0x0801ffff

08001104 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 800110c:	f7ff ffae 	bl	800106c <FlashReadToBuf>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <FlashRead+0x3a>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <FlashRead+0x44>)
 800111a:	4614      	mov	r4, r2
 800111c:	469c      	mov	ip, r3
 800111e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001122:	4665      	mov	r5, ip
 8001124:	4626      	mov	r6, r4
 8001126:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001128:	6028      	str	r0, [r5, #0]
 800112a:	6069      	str	r1, [r5, #4]
 800112c:	60aa      	str	r2, [r5, #8]
 800112e:	60eb      	str	r3, [r5, #12]
 8001130:	3410      	adds	r4, #16
 8001132:	f10c 0c10 	add.w	ip, ip, #16
 8001136:	4574      	cmp	r4, lr
 8001138:	d1f3      	bne.n	8001122 <FlashRead+0x1e>
		return true;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <FlashRead+0x3c>
	}
	return false;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	20000508 	.word	0x20000508

0800114c <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	b08d      	sub	sp, #52	; 0x34
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <FlashWrite+0x188>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 800116c:	4b5a      	ldr	r3, [pc, #360]	; (80012d8 <FlashWrite+0x18c>)
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8001184:	f7ff ff72 	bl	800106c <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <FlashWrite+0x190>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	461c      	mov	r4, r3
 800118e:	4616      	mov	r6, r2
 8001190:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001194:	4635      	mov	r5, r6
 8001196:	4623      	mov	r3, r4
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	3410      	adds	r4, #16
 80011a4:	3610      	adds	r6, #16
 80011a6:	4564      	cmp	r4, ip
 80011a8:	d1f4      	bne.n	8001194 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <FlashWrite+0x194>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	494a      	ldr	r1, [pc, #296]	; (80012dc <FlashWrite+0x190>)
 80011b2:	484c      	ldr	r0, [pc, #304]	; (80012e4 <FlashWrite+0x198>)
 80011b4:	f006 fc36 	bl	8007a24 <HAL_CRC_Calculate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2200      	movs	r2, #0
 80011bc:	4698      	mov	r8, r3
 80011be:	4691      	mov	r9, r2
 80011c0:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 80011c4:	f007 f8bc 	bl	8008340 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <FlashWrite+0x19c>)
 80011ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ce:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 80011d0:	4846      	ldr	r0, [pc, #280]	; (80012ec <FlashWrite+0x1a0>)
 80011d2:	f7ff feff 	bl	8000fd4 <GetPage>
 80011d6:	4604      	mov	r4, r0
 80011d8:	483f      	ldr	r0, [pc, #252]	; (80012d8 <FlashWrite+0x18c>)
 80011da:	f7ff fefb 	bl	8000fd4 <GetPage>
 80011de:	4603      	mov	r3, r0
 80011e0:	1ae3      	subs	r3, r4, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <FlashWrite+0x1a4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <FlashWrite+0x1a4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 80011f2:	4839      	ldr	r0, [pc, #228]	; (80012d8 <FlashWrite+0x18c>)
 80011f4:	f7ff feee 	bl	8000fd4 <GetPage>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <FlashWrite+0x1a4>)
 80011fc:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <FlashWrite+0x1a4>)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <FlashWrite+0x1a4>)
 800120c:	f007 f984 	bl	8008518 <HAL_FLASHEx_Erase>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d152      	bne.n	80012bc <FlashWrite+0x170>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8001216:	e04b      	b.n	80012b0 <FlashWrite+0x164>
		{
			for (int j = 0; j < 8; j++)
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e01b      	b.n	8001256 <FlashWrite+0x10a>
			{
				if (j + i < bufLength)
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <FlashWrite+0x194>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20a      	bcs.n	8001244 <FlashWrite+0xf8>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	441a      	add	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f107 0108 	add.w	r1, r7, #8
 800123a:	440b      	add	r3, r1
 800123c:	4927      	ldr	r1, [pc, #156]	; (80012dc <FlashWrite+0x190>)
 800123e:	5c8a      	ldrb	r2, [r1, r2]
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e005      	b.n	8001250 <FlashWrite+0x104>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b07      	cmp	r3, #7
 800125a:	dde0      	ble.n	800121e <FlashWrite+0xd2>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 800125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <FlashWrite+0x194>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20f      	bcs.n	8001286 <FlashWrite+0x13a>
 8001266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800126c:	2000      	movs	r0, #0
 800126e:	f006 fffb 	bl	8008268 <HAL_FLASH_Program>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <FlashWrite+0x13a>
			{
				Address = Address + 8;
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	3308      	adds	r3, #8
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3308      	adds	r3, #8
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	e014      	b.n	80012b0 <FlashWrite+0x164>
			}
			else if (i >= bufLength)
 8001286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <FlashWrite+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d314      	bcc.n	80012ba <FlashWrite+0x16e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8001290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	2000      	movs	r0, #0
 8001298:	f006 ffe6 	bl	8008268 <HAL_FLASH_Program>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <FlashWrite+0x164>
				{
					HAL_FLASH_Lock();
 80012a2:	f007 f86f 	bl	8008384 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <FlashWrite+0x188>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
					return true;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00b      	b.n	80012c8 <FlashWrite+0x17c>
		while (Address < FLASH_USER_END_ADDR)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <FlashWrite+0x1a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d3af      	bcc.n	8001218 <FlashWrite+0xcc>
 80012b8:	e000      	b.n	80012bc <FlashWrite+0x170>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012ba:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80012bc:	f007 f862 	bl	8008384 <HAL_FLASH_Lock>

	flashWriting = 0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <FlashWrite+0x188>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	return false;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3734      	adds	r7, #52	; 0x34
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d2:	bf00      	nop
 80012d4:	20000504 	.word	0x20000504
 80012d8:	0801f000 	.word	0x0801f000
 80012dc:	20000508 	.word	0x20000508
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20001738 	.word	0x20001738
 80012e8:	40022000 	.word	0x40022000
 80012ec:	0801ffff 	.word	0x0801ffff
 80012f0:	20000538 	.word	0x20000538

080012f4 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80012fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8001302:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130e:	f7ff fc0d 	bl	8000b2c <__aeabi_dcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <clamp+0x2a>
 8001318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800131c:	e001      	b.n	8001322 <clamp+0x2e>
 800131e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001322:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132e:	f7ff fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <clamp+0x4a>
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	e001      	b.n	8001342 <clamp+0x4e>
 800133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001342:	ec43 2b17 	vmov	d7, r2, r3
}
 8001346:	eeb0 0a47 	vmov.f32	s0, s14
 800134a:	eef0 0a67 	vmov.f32	s1, s15
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <power2>:

/* Function to take the base b to the power of the exponent e */
double power2(double b, double e) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	ed87 0b02 	vstr	d0, [r7, #8]
 800135e:	ed87 1b00 	vstr	d1, [r7]
	for( uint8_t i = 0; i < e; i++){
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	e00c      	b.n	8001382 <power2+0x2e>
		b = b * b;
 8001368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001370:	f7ff f96a 	bl	8000648 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( uint8_t i = 0; i < e; i++){
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	3301      	adds	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8f5 	bl	8000574 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001392:	f7ff fbe9 	bl	8000b68 <__aeabi_dcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e5      	bne.n	8001368 <power2+0x14>
	}
  return b;
 800139c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013a4:	eeb0 0a47 	vmov.f32	s0, s14
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/

	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	02db      	lsls	r3, r3, #11
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	b29b      	uxth	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <get_mean_ADC_reading>:

/* Returns the average of the ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <get_mean_ADC_reading+0x70>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e013      	b.n	800141e <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <get_mean_ADC_reading+0x70>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <get_mean_ADC_reading+0x70>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3e7      	bcc.n	80013f6 <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <get_mean_ADC_reading+0x70>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800143a:	eef0 7a66 	vmov.f32	s15, s13
}
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	200005b4 	.word	0x200005b4

08001450 <get_bus_voltage>:

void get_bus_voltage(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC2_BUF_VIN, ADC2_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001454:	210a      	movs	r1, #10
 8001456:	4812      	ldr	r0, [pc, #72]	; (80014a0 <get_bus_voltage+0x50>)
 8001458:	f7ff ffc0 	bl	80013dc <get_mean_ADC_reading>
 800145c:	eef0 7a40 	vmov.f32	s15, s0
 8001460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001464:	490f      	ldr	r1, [pc, #60]	; (80014a4 <get_bus_voltage+0x54>)
 8001466:	ee17 0a90 	vmov	r0, s15
 800146a:	f002 fadf 	bl	8003a2c <Moving_Average_Compute>
 800146e:	ec51 0b10 	vmov	r0, r1, d0
 8001472:	a309      	add	r3, pc, #36	; (adr r3, 8001498 <get_bus_voltage+0x48>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f8e6 	bl	8000648 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fbd8 	bl	8000c38 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <get_bus_voltage+0x58>)
 800148c:	6113      	str	r3, [r2, #16]
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	ada68bd9 	.word	0xada68bd9
 800149c:	3f813656 	.word	0x3f813656
 80014a0:	200005b8 	.word	0x200005b8
 80014a4:	20000950 	.word	0x20000950
 80014a8:	20000030 	.word	0x20000030
 80014ac:	00000000 	.word	0x00000000

080014b0 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if(handle == T210){
 80014b4:	4bae      	ldr	r3, [pc, #696]	; (8001770 <get_thermocouple_temperature+0x2c0>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d154      	bne.n	8001566 <get_thermocouple_temperature+0xb6>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T210 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T210 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80014bc:	4bad      	ldr	r3, [pc, #692]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f869 	bl	8000598 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8001710 <get_thermocouple_temperature+0x260>
 80014ce:	ec43 2b10 	vmov	d0, r2, r3
 80014d2:	f7ff ff3f 	bl	8001354 <power2>
 80014d6:	ec51 0b10 	vmov	r0, r1, d0
 80014da:	a38f      	add	r3, pc, #572	; (adr r3, 8001718 <get_thermocouple_temperature+0x268>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8b2 	bl	8000648 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4614      	mov	r4, r2
 80014ea:	461d      	mov	r5, r3
 80014ec:	4ba1      	ldr	r3, [pc, #644]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f851 	bl	8000598 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8001720 <get_thermocouple_temperature+0x270>
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f7ff ff27 	bl	8001354 <power2>
 8001506:	ec51 0b10 	vmov	r0, r1, d0
 800150a:	a387      	add	r3, pc, #540	; (adr r3, 8001728 <get_thermocouple_temperature+0x278>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f89a 	bl	8000648 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4620      	mov	r0, r4
 800151a:	4629      	mov	r1, r5
 800151c:	f7fe fede 	bl	80002dc <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4614      	mov	r4, r2
 8001526:	461d      	mov	r5, r3
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f833 	bl	8000598 <__aeabi_f2d>
 8001532:	a37f      	add	r3, pc, #508	; (adr r3, 8001730 <get_thermocouple_temperature+0x280>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f886 	bl	8000648 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe feca 	bl	80002dc <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	a379      	add	r3, pc, #484	; (adr r3, 8001738 <get_thermocouple_temperature+0x288>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe fec1 	bl	80002dc <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4986      	ldr	r1, [pc, #536]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 8001560:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001564:	e0b0      	b.n	80016c8 <get_thermocouple_temperature+0x218>
	}
	else if(handle == T245){
 8001566:	4b82      	ldr	r3, [pc, #520]	; (8001770 <get_thermocouple_temperature+0x2c0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d154      	bne.n	8001618 <get_thermocouple_temperature+0x168>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T245 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T245 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f810 	bl	8000598 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ed9f 1b64 	vldr	d1, [pc, #400]	; 8001710 <get_thermocouple_temperature+0x260>
 8001580:	ec43 2b10 	vmov	d0, r2, r3
 8001584:	f7ff fee6 	bl	8001354 <power2>
 8001588:	ec51 0b10 	vmov	r0, r1, d0
 800158c:	a36c      	add	r3, pc, #432	; (adr r3, 8001740 <get_thermocouple_temperature+0x290>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f859 	bl	8000648 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	4b75      	ldr	r3, [pc, #468]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fff8 	bl	8000598 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001720 <get_thermocouple_temperature+0x270>
 80015b0:	ec43 2b10 	vmov	d0, r2, r3
 80015b4:	f7ff fece 	bl	8001354 <power2>
 80015b8:	ec51 0b10 	vmov	r0, r1, d0
 80015bc:	a362      	add	r3, pc, #392	; (adr r3, 8001748 <get_thermocouple_temperature+0x298>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f841 	bl	8000648 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7fe fe85 	bl	80002dc <__adddf3>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b66      	ldr	r3, [pc, #408]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffda 	bl	8000598 <__aeabi_f2d>
 80015e4:	a35a      	add	r3, pc, #360	; (adr r3, 8001750 <get_thermocouple_temperature+0x2a0>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f82d 	bl	8000648 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe71 	bl	80002dc <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a355      	add	r3, pc, #340	; (adr r3, 8001758 <get_thermocouple_temperature+0x2a8>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fe68 	bl	80002dc <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4959      	ldr	r1, [pc, #356]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 8001612:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001616:	e057      	b.n	80016c8 <get_thermocouple_temperature+0x218>
	}
	else if(handle == T115){
 8001618:	4b55      	ldr	r3, [pc, #340]	; (8001770 <get_thermocouple_temperature+0x2c0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d153      	bne.n	80016c8 <get_thermocouple_temperature+0x218>
		sensor_values.thermocouple_temperature = power2(thermocouple_temperature_raw, 3)*TC_COMPENSATION_X3_T115 + power2(thermocouple_temperature_raw, 2)*TC_COMPENSATION_X2_T115 + thermocouple_temperature_raw*TC_COMPENSATION_X1_T115 + TC_COMPENSATION_X0_T115;
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffb7 	bl	8000598 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8001710 <get_thermocouple_temperature+0x260>
 8001632:	ec43 2b10 	vmov	d0, r2, r3
 8001636:	f7ff fe8d 	bl	8001354 <power2>
 800163a:	ec51 0b10 	vmov	r0, r1, d0
 800163e:	a336      	add	r3, pc, #216	; (adr r3, 8001718 <get_thermocouple_temperature+0x268>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4614      	mov	r4, r2
 800164e:	461d      	mov	r5, r3
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff9f 	bl	8000598 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001720 <get_thermocouple_temperature+0x270>
 8001662:	ec43 2b10 	vmov	d0, r2, r3
 8001666:	f7ff fe75 	bl	8001354 <power2>
 800166a:	ec51 0b10 	vmov	r0, r1, d0
 800166e:	a32e      	add	r3, pc, #184	; (adr r3, 8001728 <get_thermocouple_temperature+0x278>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffe8 	bl	8000648 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fe2c 	bl	80002dc <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <get_thermocouple_temperature+0x2c4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff81 	bl	8000598 <__aeabi_f2d>
 8001696:	a326      	add	r3, pc, #152	; (adr r3, 8001730 <get_thermocouple_temperature+0x280>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffd4 	bl	8000648 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4620      	mov	r0, r4
 80016a6:	4629      	mov	r1, r5
 80016a8:	f7fe fe18 	bl	80002dc <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	a320      	add	r3, pc, #128	; (adr r3, 8001738 <get_thermocouple_temperature+0x288>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe fe0f 	bl	80002dc <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	492d      	ldr	r1, [pc, #180]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 80016c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 80016ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <get_thermocouple_temperature+0x2cc>)
 80016d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016d4:	f7fe fe02 	bl	80002dc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4926      	ldr	r1, [pc, #152]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 80016de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 80016e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80016e8:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8001760 <get_thermocouple_temperature+0x2b0>
 80016ec:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001768 <get_thermocouple_temperature+0x2b8>
 80016f0:	eeb0 0a47 	vmov.f32	s0, s14
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	f7ff fdfc 	bl	80012f4 <clamp>
 80016fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001700:	eef0 7a60 	vmov.f32	s15, s1
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <get_thermocouple_temperature+0x2c8>)
 8001706:	ed83 7b02 	vstr	d7, [r3, #8]
}
 800170a:	bf00      	nop
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	00000000 	.word	0x00000000
 8001714:	40080000 	.word	0x40080000
 8001718:	e6c91459 	.word	0xe6c91459
 800171c:	be3d333c 	.word	0xbe3d333c
 8001720:	00000000 	.word	0x00000000
 8001724:	40000000 	.word	0x40000000
 8001728:	77c4dab0 	.word	0x77c4dab0
 800172c:	bed98561 	.word	0xbed98561
 8001730:	0aa653bc 	.word	0x0aa653bc
 8001734:	3fd1585a 	.word	0x3fd1585a
 8001738:	d797deed 	.word	0xd797deed
 800173c:	40396624 	.word	0x40396624
 8001740:	b4effad8 	.word	0xb4effad8
 8001744:	3e21f933 	.word	0x3e21f933
 8001748:	c7e1dac1 	.word	0xc7e1dac1
 800174c:	bee97525 	.word	0xbee97525
 8001750:	8d8ee863 	.word	0x8d8ee863
 8001754:	3fbe16b0 	.word	0x3fbe16b0
 8001758:	7373b751 	.word	0x7373b751
 800175c:	40390d47 	.word	0x40390d47
 8001760:	00000000 	.word	0x00000000
 8001764:	408f3800 	.word	0x408f3800
	...
 8001770:	20000548 	.word	0x20000548
 8001774:	200005cc 	.word	0x200005cc
 8001778:	20000030 	.word	0x20000030
 800177c:	200005d8 	.word	0x200005d8

08001780 <update_display>:

void get_current(){
	sensor_values.heater_current = current_raw * CURRENT_COMPENSATION;
}

void update_display(){
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b083      	sub	sp, #12
 8001784:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001786:	2228      	movs	r2, #40	; 0x28
 8001788:	2100      	movs	r1, #0
 800178a:	488c      	ldr	r0, [pc, #560]	; (80019bc <update_display+0x23c>)
 800178c:	f014 f92b 	bl	80159e6 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001790:	4b8b      	ldr	r3, [pc, #556]	; (80019c0 <update_display+0x240>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	498b      	ldr	r1, [pc, #556]	; (80019c4 <update_display+0x244>)
 8001798:	4888      	ldr	r0, [pc, #544]	; (80019bc <update_display+0x23c>)
 800179a:	f014 f8c1 	bl	8015920 <siprintf>
	if(sensor_values.set_temperature<100){
 800179e:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <update_display+0x240>)
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <update_display+0x248>)
 80017aa:	f7ff f9bf 	bl	8000b2c <__aeabi_dcmplt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <update_display+0x40>
		buffer[2] = 32;
 80017b4:	4b81      	ldr	r3, [pc, #516]	; (80019bc <update_display+0x23c>)
 80017b6:	2220      	movs	r2, #32
 80017b8:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 80017ba:	4b80      	ldr	r3, [pc, #512]	; (80019bc <update_display+0x23c>)
 80017bc:	2220      	movs	r2, #32
 80017be:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80017c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c4:	f7ff fdf5 	bl	80013b2 <RGB_to_BRG>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461c      	mov	r4, r3
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff fdf0 	bl	80013b2 <RGB_to_BRG>
 80017d2:	4603      	mov	r3, r0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	9400      	str	r4, [sp, #0]
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <update_display+0x24c>)
 80017da:	4a78      	ldr	r2, [pc, #480]	; (80019bc <update_display+0x23c>)
 80017dc:	214b      	movs	r1, #75	; 0x4b
 80017de:	200a      	movs	r0, #10
 80017e0:	f003 fe14 	bl	800540c <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 80017e4:	2228      	movs	r2, #40	; 0x28
 80017e6:	2100      	movs	r1, #0
 80017e8:	4874      	ldr	r0, [pc, #464]	; (80019bc <update_display+0x23c>)
 80017ea:	f014 f8fc 	bl	80159e6 <memset>
	sprintf(buffer, "%.1f V", sensor_values.bus_voltage);
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <update_display+0x240>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fed0 	bl	8000598 <__aeabi_f2d>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4974      	ldr	r1, [pc, #464]	; (80019d0 <update_display+0x250>)
 80017fe:	486f      	ldr	r0, [pc, #444]	; (80019bc <update_display+0x23c>)
 8001800:	f014 f88e 	bl	8015920 <siprintf>
	LCD_PutStr(100, 260, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001804:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001808:	f7ff fdd3 	bl	80013b2 <RGB_to_BRG>
 800180c:	4603      	mov	r3, r0
 800180e:	461c      	mov	r4, r3
 8001810:	2000      	movs	r0, #0
 8001812:	f7ff fdce 	bl	80013b2 <RGB_to_BRG>
 8001816:	4603      	mov	r3, r0
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	9400      	str	r4, [sp, #0]
 800181c:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <update_display+0x254>)
 800181e:	4a67      	ldr	r2, [pc, #412]	; (80019bc <update_display+0x23c>)
 8001820:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f003 fdf1 	bl	800540c <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 800182a:	2228      	movs	r2, #40	; 0x28
 800182c:	2100      	movs	r1, #0
 800182e:	4863      	ldr	r0, [pc, #396]	; (80019bc <update_display+0x23c>)
 8001830:	f014 f8d9 	bl	80159e6 <memset>
	sprintf(buffer, "---", sensor_values.pcb_temperature);
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <update_display+0x240>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fead 	bl	8000598 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4965      	ldr	r1, [pc, #404]	; (80019d8 <update_display+0x258>)
 8001844:	485d      	ldr	r0, [pc, #372]	; (80019bc <update_display+0x23c>)
 8001846:	f014 f86b 	bl	8015920 <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800184a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800184e:	f7ff fdb0 	bl	80013b2 <RGB_to_BRG>
 8001852:	4603      	mov	r3, r0
 8001854:	461c      	mov	r4, r3
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fdab 	bl	80013b2 <RGB_to_BRG>
 800185c:	4603      	mov	r3, r0
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	9400      	str	r4, [sp, #0]
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <update_display+0x254>)
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <update_display+0x23c>)
 8001866:	f240 1113 	movw	r1, #275	; 0x113
 800186a:	2064      	movs	r0, #100	; 0x64
 800186c:	f003 fdce 	bl	800540c <LCD_PutStr>



	if(handle == T210){
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <update_display+0x25c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d112      	bne.n	800189e <update_display+0x11e>
		LCD_PutStr(100, 240, "T210", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001878:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800187c:	f7ff fd99 	bl	80013b2 <RGB_to_BRG>
 8001880:	4603      	mov	r3, r0
 8001882:	461c      	mov	r4, r3
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fd94 	bl	80013b2 <RGB_to_BRG>
 800188a:	4603      	mov	r3, r0
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	9400      	str	r4, [sp, #0]
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <update_display+0x254>)
 8001892:	4a53      	ldr	r2, [pc, #332]	; (80019e0 <update_display+0x260>)
 8001894:	21f0      	movs	r1, #240	; 0xf0
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f003 fdb8 	bl	800540c <LCD_PutStr>
 800189c:	e02c      	b.n	80018f8 <update_display+0x178>
	}
	else if(handle == T245){
 800189e:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <update_display+0x25c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d112      	bne.n	80018cc <update_display+0x14c>
		LCD_PutStr(100, 240, "T245", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80018a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018aa:	f7ff fd82 	bl	80013b2 <RGB_to_BRG>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461c      	mov	r4, r3
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fd7d 	bl	80013b2 <RGB_to_BRG>
 80018b8:	4603      	mov	r3, r0
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	9400      	str	r4, [sp, #0]
 80018be:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <update_display+0x254>)
 80018c0:	4a48      	ldr	r2, [pc, #288]	; (80019e4 <update_display+0x264>)
 80018c2:	21f0      	movs	r1, #240	; 0xf0
 80018c4:	2064      	movs	r0, #100	; 0x64
 80018c6:	f003 fda1 	bl	800540c <LCD_PutStr>
 80018ca:	e015      	b.n	80018f8 <update_display+0x178>
	}
	else if(handle == T115){
 80018cc:	4b43      	ldr	r3, [pc, #268]	; (80019dc <update_display+0x25c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <update_display+0x178>
		LCD_PutStr(100, 240, "T115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80018d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018d8:	f7ff fd6b 	bl	80013b2 <RGB_to_BRG>
 80018dc:	4603      	mov	r3, r0
 80018de:	461c      	mov	r4, r3
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fd66 	bl	80013b2 <RGB_to_BRG>
 80018e6:	4603      	mov	r3, r0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	9400      	str	r4, [sp, #0]
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <update_display+0x254>)
 80018ee:	4a3e      	ldr	r2, [pc, #248]	; (80019e8 <update_display+0x268>)
 80018f0:	21f0      	movs	r1, #240	; 0xf0
 80018f2:	2064      	movs	r0, #100	; 0x64
 80018f4:	f003 fd8a 	bl	800540c <LCD_PutStr>
	}



	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 80018f8:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <update_display+0x26c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d007      	beq.n	8001910 <update_display+0x190>
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <update_display+0x26c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d003      	beq.n	8001910 <update_display+0x190>
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <update_display+0x26c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d175      	bne.n	80019fc <update_display+0x27c>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_BLACK));
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fd4e 	bl	80013b2 <RGB_to_BRG>
 8001916:	4603      	mov	r3, r0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800191e:	22e6      	movs	r2, #230	; 0xe6
 8001920:	2137      	movs	r1, #55	; 0x37
 8001922:	20d2      	movs	r0, #210	; 0xd2
 8001924:	f00f fb78 	bl	8011018 <UG_FillFrame>

		LCD_PutStr(214, 65, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001928:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800192c:	f7ff fd41 	bl	80013b2 <RGB_to_BRG>
 8001930:	4603      	mov	r3, r0
 8001932:	461c      	mov	r4, r3
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fd3c 	bl	80013b2 <RGB_to_BRG>
 800193a:	4603      	mov	r3, r0
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	9400      	str	r4, [sp, #0]
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <update_display+0x270>)
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <update_display+0x274>)
 8001944:	2141      	movs	r1, #65	; 0x41
 8001946:	20d6      	movs	r0, #214	; 0xd6
 8001948:	f003 fd60 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 121, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800194c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001950:	f7ff fd2f 	bl	80013b2 <RGB_to_BRG>
 8001954:	4603      	mov	r3, r0
 8001956:	461c      	mov	r4, r3
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff fd2a 	bl	80013b2 <RGB_to_BRG>
 800195e:	4603      	mov	r3, r0
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9400      	str	r4, [sp, #0]
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <update_display+0x270>)
 8001966:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <update_display+0x278>)
 8001968:	2179      	movs	r1, #121	; 0x79
 800196a:	20d6      	movs	r0, #214	; 0xd6
 800196c:	f003 fd4e 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 177, "Z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001970:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001974:	f7ff fd1d 	bl	80013b2 <RGB_to_BRG>
 8001978:	4603      	mov	r3, r0
 800197a:	461c      	mov	r4, r3
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff fd18 	bl	80013b2 <RGB_to_BRG>
 8001982:	4603      	mov	r3, r0
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9400      	str	r4, [sp, #0]
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <update_display+0x270>)
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <update_display+0x274>)
 800198c:	21b1      	movs	r1, #177	; 0xb1
 800198e:	20d6      	movs	r0, #214	; 0xd6
 8001990:	f003 fd3c 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 233, "z", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001994:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001998:	f7ff fd0b 	bl	80013b2 <RGB_to_BRG>
 800199c:	4603      	mov	r3, r0
 800199e:	461c      	mov	r4, r3
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fd06 	bl	80013b2 <RGB_to_BRG>
 80019a6:	4603      	mov	r3, r0
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9400      	str	r4, [sp, #0]
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <update_display+0x270>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <update_display+0x278>)
 80019b0:	21e9      	movs	r1, #233	; 0xe9
 80019b2:	20d6      	movs	r0, #214	; 0xd6
 80019b4:	f003 fd2a 	bl	800540c <LCD_PutStr>
 80019b8:	e113      	b.n	8001be2 <update_display+0x462>
 80019ba:	bf00      	nop
 80019bc:	20000588 	.word	0x20000588
 80019c0:	20000030 	.word	0x20000030
 80019c4:	08017ef8 	.word	0x08017ef8
 80019c8:	40590000 	.word	0x40590000
 80019cc:	0801aa04 	.word	0x0801aa04
 80019d0:	08017efc 	.word	0x08017efc
 80019d4:	080180dc 	.word	0x080180dc
 80019d8:	08017f04 	.word	0x08017f04
 80019dc:	20000548 	.word	0x20000548
 80019e0:	08017f08 	.word	0x08017f08
 80019e4:	08017f10 	.word	0x08017f10
 80019e8:	08017f18 	.word	0x08017f18
 80019ec:	2000001c 	.word	0x2000001c
 80019f0:	080190ac 	.word	0x080190ac
 80019f4:	08017f20 	.word	0x08017f20
 80019f8:	08017f24 	.word	0x08017f24
	}
	else if(active_state == STANDBY){
 80019fc:	4ba4      	ldr	r3, [pc, #656]	; (8001c90 <update_display+0x510>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 808d 	bne.w	8001b20 <update_display+0x3a0>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_BLACK));
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fcd3 	bl	80013b2 <RGB_to_BRG>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001a14:	22e6      	movs	r2, #230	; 0xe6
 8001a16:	2137      	movs	r1, #55	; 0x37
 8001a18:	20d2      	movs	r0, #210	; 0xd2
 8001a1a:	f00f fafd 	bl	8011018 <UG_FillFrame>
		LCD_PutStr(214, 65, "S", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001a1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a22:	f7ff fcc6 	bl	80013b2 <RGB_to_BRG>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461c      	mov	r4, r3
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff fcc1 	bl	80013b2 <RGB_to_BRG>
 8001a30:	4603      	mov	r3, r0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	9400      	str	r4, [sp, #0]
 8001a36:	4b97      	ldr	r3, [pc, #604]	; (8001c94 <update_display+0x514>)
 8001a38:	4a97      	ldr	r2, [pc, #604]	; (8001c98 <update_display+0x518>)
 8001a3a:	2141      	movs	r1, #65	; 0x41
 8001a3c:	20d6      	movs	r0, #214	; 0xd6
 8001a3e:	f003 fce5 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 121, "T", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001a42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a46:	f7ff fcb4 	bl	80013b2 <RGB_to_BRG>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fcaf 	bl	80013b2 <RGB_to_BRG>
 8001a54:	4603      	mov	r3, r0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9400      	str	r4, [sp, #0]
 8001a5a:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <update_display+0x514>)
 8001a5c:	4a8f      	ldr	r2, [pc, #572]	; (8001c9c <update_display+0x51c>)
 8001a5e:	2179      	movs	r1, #121	; 0x79
 8001a60:	20d6      	movs	r0, #214	; 0xd6
 8001a62:	f003 fcd3 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 177, "A", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001a66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a6a:	f7ff fca2 	bl	80013b2 <RGB_to_BRG>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461c      	mov	r4, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fc9d 	bl	80013b2 <RGB_to_BRG>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	9400      	str	r4, [sp, #0]
 8001a7e:	4b85      	ldr	r3, [pc, #532]	; (8001c94 <update_display+0x514>)
 8001a80:	4a87      	ldr	r2, [pc, #540]	; (8001ca0 <update_display+0x520>)
 8001a82:	21b1      	movs	r1, #177	; 0xb1
 8001a84:	20d6      	movs	r0, #214	; 0xd6
 8001a86:	f003 fcc1 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 233, "N", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a8e:	f7ff fc90 	bl	80013b2 <RGB_to_BRG>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461c      	mov	r4, r3
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fc8b 	bl	80013b2 <RGB_to_BRG>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	9400      	str	r4, [sp, #0]
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <update_display+0x514>)
 8001aa4:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <update_display+0x524>)
 8001aa6:	21e9      	movs	r1, #233	; 0xe9
 8001aa8:	20d6      	movs	r0, #214	; 0xd6
 8001aaa:	f003 fcaf 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 289, "D", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001aae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ab2:	f7ff fc7e 	bl	80013b2 <RGB_to_BRG>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461c      	mov	r4, r3
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fc79 	bl	80013b2 <RGB_to_BRG>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	9400      	str	r4, [sp, #0]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <update_display+0x514>)
 8001ac8:	4a77      	ldr	r2, [pc, #476]	; (8001ca8 <update_display+0x528>)
 8001aca:	f240 1121 	movw	r1, #289	; 0x121
 8001ace:	20d6      	movs	r0, #214	; 0xd6
 8001ad0:	f003 fc9c 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 253, "B", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ad8:	f7ff fc6b 	bl	80013b2 <RGB_to_BRG>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461c      	mov	r4, r3
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fc66 	bl	80013b2 <RGB_to_BRG>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	9400      	str	r4, [sp, #0]
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <update_display+0x514>)
 8001aee:	4a6f      	ldr	r2, [pc, #444]	; (8001cac <update_display+0x52c>)
 8001af0:	21fd      	movs	r1, #253	; 0xfd
 8001af2:	20d6      	movs	r0, #214	; 0xd6
 8001af4:	f003 fc8a 	bl	800540c <LCD_PutStr>
		LCD_PutStr(214, 279, "Y", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001afc:	f7ff fc59 	bl	80013b2 <RGB_to_BRG>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461c      	mov	r4, r3
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff fc54 	bl	80013b2 <RGB_to_BRG>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	9400      	str	r4, [sp, #0]
 8001b10:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <update_display+0x514>)
 8001b12:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <update_display+0x530>)
 8001b14:	f240 1117 	movw	r1, #279	; 0x117
 8001b18:	20d6      	movs	r0, #214	; 0xd6
 8001b1a:	f003 fc77 	bl	800540c <LCD_PutStr>
 8001b1e:	e060      	b.n	8001be2 <update_display+0x462>
	}
	else{
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <update_display+0x534>)
 8001b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <update_display+0x538>)
 8001b2c:	f7fe feb6 	bl	800089c <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <update_display+0x53c>)
 8001b3e:	f7fe fd83 	bl	8000648 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	a14e      	add	r1, pc, #312	; (adr r1, 8001c80 <update_display+0x500>)
 8001b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b4c:	f7fe fbc4 	bl	80002d8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f826 	bl	8000ba8 <__aeabi_d2iz>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b21c      	sxth	r4, r3
 8001b60:	f248 607e 	movw	r0, #34430	; 0x867e
 8001b64:	f7ff fc25 	bl	80013b2 <RGB_to_BRG>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f240 131f 	movw	r3, #287	; 0x11f
 8001b70:	22e6      	movs	r2, #230	; 0xe6
 8001b72:	4621      	mov	r1, r4
 8001b74:	20d2      	movs	r0, #210	; 0xd2
 8001b76:	f00f fa4f 	bl	8011018 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <update_display+0x534>)
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <update_display+0x538>)
 8001b86:	f7fe fe89 	bl	800089c <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	a33d      	add	r3, pc, #244	; (adr r3, 8001c88 <update_display+0x508>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fd56 	bl	8000648 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	a137      	add	r1, pc, #220	; (adr r1, 8001c80 <update_display+0x500>)
 8001ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba6:	f7fe fb97 	bl	80002d8 <__aeabi_dsub>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <update_display+0x540>)
 8001bb8:	f7fe fb8e 	bl	80002d8 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe fff0 	bl	8000ba8 <__aeabi_d2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b21c      	sxth	r4, r3
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fbf0 	bl	80013b2 <RGB_to_BRG>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	22e6      	movs	r2, #230	; 0xe6
 8001bda:	2137      	movs	r1, #55	; 0x37
 8001bdc:	20d2      	movs	r0, #210	; 0xd2
 8001bde:	f00f fa1b 	bl	8011018 <UG_FillFrame>
	}


	if(sensor_values.heater_current == 0){
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <update_display+0x544>)
 8001be4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001be8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d112      	bne.n	8001c18 <update_display+0x498>
	  	LCD_PutStr(10, 165, "---", FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001bf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bf6:	f7ff fbdc 	bl	80013b2 <RGB_to_BRG>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461c      	mov	r4, r3
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fbd7 	bl	80013b2 <RGB_to_BRG>
 8001c04:	4603      	mov	r3, r0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	9400      	str	r4, [sp, #0]
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <update_display+0x548>)
 8001c0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <update_display+0x54c>)
 8001c0e:	21a5      	movs	r1, #165	; 0xa5
 8001c10:	200a      	movs	r0, #10
 8001c12:	f003 fbfb 	bl	800540c <LCD_PutStr>
			buffer[2] = 32;
			buffer[3] = 32;
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
	}
}
 8001c16:	e02e      	b.n	8001c76 <update_display+0x4f6>
		memset(&buffer, '\0', sizeof(buffer));
 8001c18:	2228      	movs	r2, #40	; 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	482c      	ldr	r0, [pc, #176]	; (8001cd0 <update_display+0x550>)
 8001c1e:	f013 fee2 	bl	80159e6 <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <update_display+0x544>)
 8001c24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c28:	492a      	ldr	r1, [pc, #168]	; (8001cd4 <update_display+0x554>)
 8001c2a:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <update_display+0x550>)
 8001c2c:	f013 fe78 	bl	8015920 <siprintf>
		if(sensor_values.thermocouple_temperature < 100){
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <update_display+0x544>)
 8001c32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <update_display+0x558>)
 8001c3c:	f7fe ff76 	bl	8000b2c <__aeabi_dcmplt>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <update_display+0x4d2>
			buffer[2] = 32;
 8001c46:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <update_display+0x550>)
 8001c48:	2220      	movs	r2, #32
 8001c4a:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <update_display+0x550>)
 8001c4e:	2220      	movs	r2, #32
 8001c50:	70da      	strb	r2, [r3, #3]
	  	LCD_PutStr(10, 165, buffer, FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c56:	f7ff fbac 	bl	80013b2 <RGB_to_BRG>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fba7 	bl	80013b2 <RGB_to_BRG>
 8001c64:	4603      	mov	r3, r0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	9400      	str	r4, [sp, #0]
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <update_display+0x548>)
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <update_display+0x550>)
 8001c6e:	21a5      	movs	r1, #165	; 0xa5
 8001c70:	200a      	movs	r0, #10
 8001c72:	f003 fbcb 	bl	800540c <LCD_PutStr>
}
 8001c76:	bf00      	nop
 8001c78:	3704      	adds	r7, #4
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00000000 	.word	0x00000000
 8001c84:	4071f000 	.word	0x4071f000
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	406ce000 	.word	0x406ce000
 8001c90:	2000001c 	.word	0x2000001c
 8001c94:	080190ac 	.word	0x080190ac
 8001c98:	08017f28 	.word	0x08017f28
 8001c9c:	08017f2c 	.word	0x08017f2c
 8001ca0:	08017f30 	.word	0x08017f30
 8001ca4:	08017f34 	.word	0x08017f34
 8001ca8:	08017f38 	.word	0x08017f38
 8001cac:	08017f3c 	.word	0x08017f3c
 8001cb0:	08017f40 	.word	0x08017f40
 8001cb4:	20000608 	.word	0x20000608
 8001cb8:	407f4000 	.word	0x407f4000
 8001cbc:	406d0000 	.word	0x406d0000
 8001cc0:	3ff00000 	.word	0x3ff00000
 8001cc4:	20000030 	.word	0x20000030
 8001cc8:	0801aa04 	.word	0x0801aa04
 8001ccc:	08017f04 	.word	0x08017f04
 8001cd0:	20000588 	.word	0x20000588
 8001cd4:	08017ef8 	.word	0x08017ef8
 8001cd8:	40590000 	.word	0x40590000

08001cdc <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc34 	bl	8000554 <__aeabi_ui2d>
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <get_set_temperature+0x64>)
 8001cee:	ed93 7b00 	vldr	d7, [r3]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <get_set_temperature+0x68>)
 8001cf4:	ed93 6b00 	vldr	d6, [r3]
 8001cf8:	eeb0 2a46 	vmov.f32	s4, s12
 8001cfc:	eef0 2a66 	vmov.f32	s5, s13
 8001d00:	eeb0 1a47 	vmov.f32	s2, s14
 8001d04:	eef0 1a67 	vmov.f32	s3, s15
 8001d08:	ec41 0b10 	vmov	d0, r0, r1
 8001d0c:	f7ff faf2 	bl	80012f4 <clamp>
 8001d10:	ec53 2b10 	vmov	r2, r3, d0
 8001d14:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe ff6c 	bl	8000bf8 <__aeabi_d2uiz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 8001d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc12 	bl	8000554 <__aeabi_ui2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <get_set_temperature+0x6c>)
 8001d36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001d3a:	bf00      	nop
 8001d3c:	bd98      	pop	{r3, r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000020 	.word	0x20000020
 8001d44:	20000028 	.word	0x20000028
 8001d48:	20000030 	.word	0x20000030

08001d4c <beep>:

/* Beep the buzzer */
void beep(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5);
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <beep+0x18>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2205      	movs	r2, #5
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_TIM_Base_Start_IT(&htim17);
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <beep+0x1c>)
 8001d5a:	f00a fa6f 	bl	800c23c <HAL_TIM_Base_Start_IT>
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000190c 	.word	0x2000190c
 8001d68:	200019a4 	.word	0x200019a4
 8001d6c:	00000000 	.word	0x00000000

08001d70 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <check_emergency_shutdown+0xd0>)
 8001d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <check_emergency_shutdown+0x20>
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8001d86:	f003 fc4f 	bl	8005628 <HAL_GetTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <check_emergency_shutdown+0xd8>)
 8001d8e:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <check_emergency_shutdown+0xd0>)
 8001d92:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	f7fe febb 	bl	8000b18 <__aeabi_dcmpeq>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d024      	beq.n	8001df2 <check_emergency_shutdown+0x82>
 8001da8:	f003 fc3e 	bl	8005628 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <check_emergency_shutdown+0xd8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbcd 	bl	8000554 <__aeabi_ui2d>
 8001dba:	4604      	mov	r4, r0
 8001dbc:	460d      	mov	r5, r1
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <check_emergency_shutdown+0xdc>)
 8001dc0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dc4:	a31a      	add	r3, pc, #104	; (adr r3, 8001e30 <check_emergency_shutdown+0xc0>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fc3d 	bl	8000648 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe febd 	bl	8000b54 <__aeabi_dcmpge>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <check_emergency_shutdown+0x82>
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <check_emergency_shutdown+0x82>
		active_state = EMERGENCY_SLEEP;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001dea:	2203      	movs	r2, #3
 8001dec:	701a      	strb	r2, [r3, #0]
		beep();
 8001dee:	f7ff ffad 	bl	8001d4c <beep>
	}
	sensor_values.previous_state = active_state;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <check_emergency_shutdown+0xd0>)
 8001df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <check_emergency_shutdown+0xd0>)
 8001dfe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e02:	a30d      	add	r3, pc, #52	; (adr r3, 8001e38 <check_emergency_shutdown+0xc8>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe feae 	bl	8000b68 <__aeabi_dcmpgt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d100      	bne.n	8001e14 <check_emergency_shutdown+0xa4>
		active_state = EMERGENCY_SLEEP;
		beep();
	}
}
 8001e12:	e008      	b.n	8001e26 <check_emergency_shutdown+0xb6>
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <check_emergency_shutdown+0xb6>
		active_state = EMERGENCY_SLEEP;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <check_emergency_shutdown+0xd4>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
		beep();
 8001e22:	f7ff ff93 	bl	8001d4c <beep>
}
 8001e26:	bf00      	nop
 8001e28:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	f3af 8000 	nop.w
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40ed4c00 	.word	0x40ed4c00
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	407db000 	.word	0x407db000
 8001e40:	20000030 	.word	0x20000030
 8001e44:	2000001c 	.word	0x2000001c
 8001e48:	2000055c 	.word	0x2000055c
 8001e4c:	200005d8 	.word	0x200005d8

08001e50 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001e56:	2120      	movs	r1, #32
 8001e58:	482b      	ldr	r0, [pc, #172]	; (8001f08 <get_enc_button_status+0xb8>)
 8001e5a:	f006 fe03 	bl	8008a64 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <get_enc_button_status+0x1a>
		button_status = 1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	e001      	b.n	8001e6e <get_enc_button_status+0x1e>
	}
	else{
		button_status = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4926      	ldr	r1, [pc, #152]	; (8001f0c <get_enc_button_status+0xbc>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 fdda 	bl	8003a2c <Moving_Average_Compute>
 8001e78:	eeb0 7a40 	vmov.f32	s14, s0
 8001e7c:	eef0 7a60 	vmov.f32	s15, s1
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <get_enc_button_status+0xc0>)
 8001e82:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <get_enc_button_status+0xc0>)
 8001e88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001e8c:	a31c      	add	r3, pc, #112	; (adr r3, 8001f00 <get_enc_button_status+0xb0>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fe69 	bl	8000b68 <__aeabi_dcmpgt>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d100      	bne.n	8001e9e <get_enc_button_status+0x4e>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 8001e9c:	e02b      	b.n	8001ef6 <get_enc_button_status+0xa6>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001e9e:	f003 fbc3 	bl	8005628 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <get_enc_button_status+0xc4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1ad2      	subs	r2, r2, r3
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <get_enc_button_status+0xc8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d321      	bcc.n	8001ef6 <get_enc_button_status+0xa6>
		beep();
 8001eb2:	f7ff ff4b 	bl	8001d4c <beep>
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <get_enc_button_status+0xcc>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <get_enc_button_status+0x76>
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d103      	bne.n	8001ece <get_enc_button_status+0x7e>
			active_state = HALTED;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ec8:	2204      	movs	r2, #4
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e00e      	b.n	8001eec <get_enc_button_status+0x9c>
		else if (active_state == HALTED){
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d103      	bne.n	8001ede <get_enc_button_status+0x8e>
			active_state = RUN;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e006      	b.n	8001eec <get_enc_button_status+0x9c>
		else if (active_state == EMERGENCY_SLEEP){
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d102      	bne.n	8001eec <get_enc_button_status+0x9c>
			active_state = RUN;
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <get_enc_button_status+0xcc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 8001eec:	f003 fb9c 	bl	8005628 <HAL_GetTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <get_enc_button_status+0xc4>)
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	9999999a 	.word	0x9999999a
 8001f04:	3fe99999 	.word	0x3fe99999
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	200012d4 	.word	0x200012d4
 8001f10:	20000030 	.word	0x20000030
 8001f14:	20000558 	.word	0x20000558
 8001f18:	20000010 	.word	0x20000010
 8001f1c:	2000001c 	.word	0x2000001c

08001f20 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8001f26:	2140      	movs	r1, #64	; 0x40
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f006 fd9a 	bl	8008a64 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <get_stand_status+0x1c>
		stand_status = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4937      	ldr	r1, [pc, #220]	; (8002020 <get_stand_status+0x100>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f001 fd71 	bl	8003a2c <Moving_Average_Compute>
 8001f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4e:	eef0 7a60 	vmov.f32	s15, s1
 8001f52:	4b34      	ldr	r3, [pc, #208]	; (8002024 <get_stand_status+0x104>)
 8001f54:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 8001f58:	4b32      	ldr	r3, [pc, #200]	; (8002024 <get_stand_status+0x104>)
 8001f5a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <get_stand_status+0x108>)
 8001f64:	f7fe fe00 	bl	8000b68 <__aeabi_dcmpgt>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d039      	beq.n	8001fe2 <get_stand_status+0xc2>
		if(active_state == RUN){
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <get_stand_status+0x10c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <get_stand_status+0x66>
			active_state = STANDBY;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <get_stand_status+0x10c>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 8001f7c:	f003 fb54 	bl	8005628 <HAL_GetTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <get_stand_status+0x110>)
 8001f84:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8001f86:	f003 fb4f 	bl	8005628 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <get_stand_status+0x110>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fade 	bl	8000554 <__aeabi_ui2d>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460d      	mov	r5, r1
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <get_stand_status+0x114>)
 8001f9e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fa2:	a31d      	add	r3, pc, #116	; (adr r3, 8002018 <get_stand_status+0xf8>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fb4e 	bl	8000648 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe fdce 	bl	8000b54 <__aeabi_dcmpge>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <get_stand_status+0xac>
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <get_stand_status+0x10c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d102      	bne.n	8001fcc <get_stand_status+0xac>
			active_state = SLEEP;
 8001fc6:	4b19      	ldr	r3, [pc, #100]	; (800202c <get_stand_status+0x10c>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <get_stand_status+0x10c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d003      	beq.n	8001fdc <get_stand_status+0xbc>
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <get_stand_status+0x10c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d102      	bne.n	8001fe2 <get_stand_status+0xc2>
			active_state = SLEEP;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <get_stand_status+0x10c>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <get_stand_status+0x104>)
 8001fe4:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <get_stand_status+0x108>)
 8001fee:	f7fe fd9d 	bl	8000b2c <__aeabi_dcmplt>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 8001ff8:	e00a      	b.n	8002010 <get_stand_status+0xf0>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <get_stand_status+0x10c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <get_stand_status+0xea>
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <get_stand_status+0x10c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <get_stand_status+0xf0>
			active_state = RUN;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <get_stand_status+0x10c>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}
 8002018:	00000000 	.word	0x00000000
 800201c:	40ed4c00 	.word	0x40ed4c00
 8002020:	20000c7c 	.word	0x20000c7c
 8002024:	20000030 	.word	0x20000030
 8002028:	3fe00000 	.word	0x3fe00000
 800202c:	2000001c 	.word	0x2000001c
 8002030:	20000560 	.word	0x20000560
 8002034:	200005d8 	.word	0x200005d8

08002038 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 800203e:	2110      	movs	r1, #16
 8002040:	483f      	ldr	r0, [pc, #252]	; (8002140 <get_handle_type+0x108>)
 8002042:	f006 fd0f 	bl	8008a64 <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <get_handle_type+0x1a>
		handle_status = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
 8002050:	e001      	b.n	8002056 <get_handle_type+0x1e>
	}
	else{
		handle_status = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	493a      	ldr	r1, [pc, #232]	; (8002144 <get_handle_type+0x10c>)
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fce6 	bl	8003a2c <Moving_Average_Compute>
 8002060:	eeb0 7a40 	vmov.f32	s14, s0
 8002064:	eef0 7a60 	vmov.f32	s15, s1
 8002068:	4b37      	ldr	r3, [pc, #220]	; (8002148 <get_handle_type+0x110>)
 800206a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <get_handle_type+0x110>)
 8002070:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <get_handle_type+0x114>)
 800207a:	f7fe fd75 	bl	8000b68 <__aeabi_dcmpgt>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01e      	beq.n	80020c2 <get_handle_type+0x8a>
		handle = T210;
 8002084:	4b32      	ldr	r3, [pc, #200]	; (8002150 <get_handle_type+0x118>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <get_handle_type+0x11c>)
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <get_handle_type+0x120>)
 800208e:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 8002090:	4932      	ldr	r1, [pc, #200]	; (800215c <get_handle_type+0x124>)
 8002092:	a329      	add	r3, pc, #164	; (adr r3, 8002138 <get_handle_type+0x100>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 800209c:	4930      	ldr	r1, [pc, #192]	; (8002160 <get_handle_type+0x128>)
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <get_handle_type+0x12c>)
 80020a4:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 80020a8:	492f      	ldr	r1, [pc, #188]	; (8002168 <get_handle_type+0x130>)
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <get_handle_type+0x134>)
 80020b0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 80020b4:	492e      	ldr	r1, [pc, #184]	; (8002170 <get_handle_type+0x138>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <get_handle_type+0x13c>)
 80020bc:	e9c1 2300 	strd	r2, r3, [r1]
 80020c0:	e01d      	b.n	80020fe <get_handle_type+0xc6>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <get_handle_type+0x118>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 80020c8:	4b22      	ldr	r3, [pc, #136]	; (8002154 <get_handle_type+0x11c>)
 80020ca:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <get_handle_type+0x140>)
 80020cc:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //430 deg C
 80020ce:	4923      	ldr	r1, [pc, #140]	; (800215c <get_handle_type+0x124>)
 80020d0:	a319      	add	r3, pc, #100	; (adr r3, 8002138 <get_handle_type+0x100>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 80020da:	4921      	ldr	r1, [pc, #132]	; (8002160 <get_handle_type+0x128>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <get_handle_type+0x144>)
 80020e2:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 80020e6:	4920      	ldr	r1, [pc, #128]	; (8002168 <get_handle_type+0x130>)
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b1f      	ldr	r3, [pc, #124]	; (800216c <get_handle_type+0x134>)
 80020ee:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 80020f2:	491f      	ldr	r1, [pc, #124]	; (8002170 <get_handle_type+0x138>)
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <get_handle_type+0x114>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <get_handle_type+0x128>)
 8002100:	ed93 7b00 	vldr	d7, [r3]
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <get_handle_type+0x130>)
 8002106:	ed93 6b00 	vldr	d6, [r3]
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <get_handle_type+0x138>)
 800210c:	ed93 5b00 	vldr	d5, [r3]
 8002110:	eeb0 2a45 	vmov.f32	s4, s10
 8002114:	eef0 2a65 	vmov.f32	s5, s11
 8002118:	eeb0 1a46 	vmov.f32	s2, s12
 800211c:	eef0 1a66 	vmov.f32	s3, s13
 8002120:	eeb0 0a47 	vmov.f32	s0, s14
 8002124:	eef0 0a67 	vmov.f32	s1, s15
 8002128:	4815      	ldr	r0, [pc, #84]	; (8002180 <get_handle_type+0x148>)
 800212a:	f001 ff58 	bl	8003fde <PID_SetTunings>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	00000000 	.word	0x00000000
 800213c:	407c2000 	.word	0x407c2000
 8002140:	48000400 	.word	0x48000400
 8002144:	20000fa8 	.word	0x20000fa8
 8002148:	20000030 	.word	0x20000030
 800214c:	3fe00000 	.word	0x3fe00000
 8002150:	20000548 	.word	0x20000548
 8002154:	200005b0 	.word	0x200005b0
 8002158:	42700000 	.word	0x42700000
 800215c:	20000028 	.word	0x20000028
 8002160:	20000570 	.word	0x20000570
 8002164:	40240000 	.word	0x40240000
 8002168:	20000578 	.word	0x20000578
 800216c:	403e0000 	.word	0x403e0000
 8002170:	20000580 	.word	0x20000580
 8002174:	3fd00000 	.word	0x3fd00000
 8002178:	42f00000 	.word	0x42f00000
 800217c:	402e0000 	.word	0x402e0000
 8002180:	20001a88 	.word	0x20001a88

08002184 <HAL_GPIO_EXTI_Callback>:
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == SW_2_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d107      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0x22>
    {
    	TIM2->CNT = 280;
 8002196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800219a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
		beep();
 80021a0:	f7ff fdd4 	bl	8001d4c <beep>
    else if(GPIO_Pin == SW_3_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
    {
    	TIM2->CNT = 330;
    	beep();
    }
}
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_EXTI_Callback+0x38>
    else if(GPIO_Pin == SW_3_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ac:	d106      	bne.n	80021bc <HAL_GPIO_EXTI_Callback+0x38>
    	TIM2->CNT = 330;
 80021ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    	beep();
 80021b8:	f7ff fdc8 	bl	8001d4c <beep>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7f1b      	ldrb	r3, [r3, #28]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d003      	beq.n	80021dc <HAL_TIM_IC_CaptureCallback+0x18>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7f1b      	ldrb	r3, [r3, #28]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 80021dc:	f7ff fdb6 	bl	8001d4c <beep>
	}
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <set_heater_duty+0x20>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20001874 	.word	0x20001874

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim1) && (current_measurement_requested == 1) )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d112      	bne.n	8002242 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10e      	bne.n	8002242 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
  {
	  HAL_TIM_Base_Start_IT(&htim16);
 8002224:	480b      	ldr	r0, [pc, #44]	; (8002254 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8002226:	f00a f809 	bl	800c23c <HAL_TIM_Base_Start_IT>
	  set_heater_duty(duty_cycle); //Set duty cycle back to calculated
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fce0 	bl	8000bf8 <__aeabi_d2uiz>
 8002238:	4603      	mov	r3, r0
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ffd3 	bl	80021e8 <set_heater_duty>
  }
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20001874 	.word	0x20001874
 8002250:	20000620 	.word	0x20000620
 8002254:	20001958 	.word	0x20001958
 8002258:	20000618 	.word	0x20000618

0800225c <HAL_TIM_PeriodElapsedCallback>:
//float thermocouple_temperature_raw = Moving_Average_Compute(100, &thermocouple_temperature_filter_struct); /* Moving average filter */


// Callback:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 ){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d10b      	bne.n	8002284 <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_TIM_Base_Stop_IT(&htim16);
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800226e:	f00a f84f 	bl	800c310 <HAL_TIM_Base_Stop_IT>
	  //HAL_ADC_Start_IT(&hadc2);
	  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002274:	f005 f878 	bl	8007368 <HAL_ADCEx_InjectedStart_IT>
	  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	2102      	movs	r1, #2
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f006 fc08 	bl	8008a94 <HAL_GPIO_WritePin>
  }
  if (htim == &htim17){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d106      	bne.n	800229a <HAL_TIM_PeriodElapsedCallback+0x3e>
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_TIM_Base_Stop_IT(&htim17);
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002296:	f00a f83b 	bl	800c310 <HAL_TIM_Base_Stop_IT>

  }
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20001958 	.word	0x20001958
 80022a8:	20001600 	.word	0x20001600
 80022ac:	200019a4 	.word	0x200019a4
 80022b0:	2000190c 	.word	0x2000190c

080022b4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	if(current_measurement_requested == 1){
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <HAL_ADCEx_InjectedConvCpltCallback+0x4e>
		HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2102      	movs	r1, #2
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f006 fbe2 	bl	8008a94 <HAL_GPIO_WritePin>
		thermocouple_temperature_raw = HAL_ADCEx_InjectedGetValue(&hadc1,1);
 80022d0:	2101      	movs	r1, #1
 80022d2:	480f      	ldr	r0, [pc, #60]	; (8002310 <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 80022d4:	f005 f92e 	bl	8007534 <HAL_ADCEx_InjectedGetValue>
 80022d8:	ee07 0a90 	vmov	s15, r0
 80022dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <HAL_ADCEx_InjectedConvCpltCallback+0x60>)
 80022e2:	edc3 7a00 	vstr	s15, [r3]
		current_raw = HAL_ADCEx_InjectedGetValue(&hadc1,2);
 80022e6:	2102      	movs	r1, #2
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <HAL_ADCEx_InjectedConvCpltCallback+0x5c>)
 80022ea:	f005 f923 	bl	8007534 <HAL_ADCEx_InjectedGetValue>
 80022ee:	ee07 0a90 	vmov	s15, r0
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_ADCEx_InjectedConvCpltCallback+0x64>)
 80022f8:	edc3 7a00 	vstr	s15, [r3]
		current_measurement_requested = 0;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_ADCEx_InjectedConvCpltCallback+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]

	}
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000620 	.word	0x20000620
 8002310:	20001600 	.word	0x20001600
 8002314:	200005cc 	.word	0x200005cc
 8002318:	200005d0 	.word	0x200005d0
 800231c:	00000000 	.word	0x00000000

08002320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	ed2d 8b06 	vpush	{d8-d10}
 8002328:	b09b      	sub	sp, #108	; 0x6c
 800232a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232c:	f003 f918 	bl	8005560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002330:	f000 fe90 	bl	8003054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002334:	f001 fa82 	bl	800383c <MX_GPIO_Init>
  MX_DMA_Init();
 8002338:	f001 fa4e 	bl	80037d8 <MX_DMA_Init>
  MX_ADC1_Init();
 800233c:	f000 fed8 	bl	80030f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002340:	f000 ff5e 	bl	8003200 <MX_ADC2_Init>
  MX_CRC_Init();
 8002344:	f000 ffc2 	bl	80032cc <MX_CRC_Init>
  MX_TIM1_Init();
 8002348:	f001 f860 	bl	800340c <MX_TIM1_Init>
  MX_TIM2_Init();
 800234c:	f001 f8f2 	bl	8003534 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002350:	f001 f944 	bl	80035dc <MX_TIM4_Init>
  MX_TIM16_Init();
 8002354:	f001 f99c 	bl	8003690 <MX_TIM16_Init>
  MX_SPI2_Init();
 8002358:	f001 f81a 	bl	8003390 <MX_SPI2_Init>
  MX_I2C1_Init();
 800235c:	f000 ffd8 	bl	8003310 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8002360:	f012 f8ac 	bl	80144bc <MX_USB_Device_Init>
  MX_TIM17_Init();
 8002364:	f001 f9bc 	bl	80036e0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002368:	f001 f9ea 	bl	8003740 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800236c:	213c      	movs	r1, #60	; 0x3c
 800236e:	4858      	ldr	r0, [pc, #352]	; (80024d0 <main+0x1b0>)
 8002370:	f00a faa0 	bl	800c8b4 <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8002374:	2104      	movs	r1, #4
 8002376:	4857      	ldr	r0, [pc, #348]	; (80024d4 <main+0x1b4>)
 8002378:	f00a f850 	bl	800c41c <HAL_TIM_PWM_Start_IT>
	 HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800237c:	2108      	movs	r1, #8
 800237e:	4856      	ldr	r0, [pc, #344]	; (80024d8 <main+0x1b8>)
 8002380:	f00b f976 	bl	800d670 <HAL_TIMEx_PWMN_Start>


		HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002384:	217f      	movs	r1, #127	; 0x7f
 8002386:	4855      	ldr	r0, [pc, #340]	; (80024dc <main+0x1bc>)
 8002388:	f004 ff8c 	bl	80072a4 <HAL_ADCEx_Calibration_Start>
		HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_BUF_VIN, (uint32_t)ADC2_BUF_VIN_LEN);	//Start ADC DMA
 800238c:	220a      	movs	r2, #10
 800238e:	4954      	ldr	r1, [pc, #336]	; (80024e0 <main+0x1c0>)
 8002390:	4852      	ldr	r0, [pc, #328]	; (80024dc <main+0x1bc>)
 8002392:	f003 fe91 	bl	80060b8 <HAL_ADC_Start_DMA>

        HAL_ADC_Start_IT(&hadc1);        //Start ADC DMA
 8002396:	4853      	ldr	r0, [pc, #332]	; (80024e4 <main+0x1c4>)
 8002398:	f003 fd5e 	bl	8005e58 <HAL_ADC_Start_IT>

		Moving_Average_Init(&thermocouple_temperature_filter_struct,5);
 800239c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80023a0:	4851      	ldr	r0, [pc, #324]	; (80024e8 <main+0x1c8>)
 80023a2:	f001 fb12 	bl	80039ca <Moving_Average_Init>
		Moving_Average_Init(&input_voltage_filterStruct,50);
 80023a6:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80024ec <main+0x1cc>
 80023aa:	4851      	ldr	r0, [pc, #324]	; (80024f0 <main+0x1d0>)
 80023ac:	f001 fb0d 	bl	80039ca <Moving_Average_Init>
		Moving_Average_Init(&stand_sense_filterStruct,50);
 80023b0:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80024ec <main+0x1cc>
 80023b4:	484f      	ldr	r0, [pc, #316]	; (80024f4 <main+0x1d4>)
 80023b6:	f001 fb08 	bl	80039ca <Moving_Average_Init>
		Moving_Average_Init(&handle_sense_filterStruct,50);
 80023ba:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80024ec <main+0x1cc>
 80023be:	484e      	ldr	r0, [pc, #312]	; (80024f8 <main+0x1d8>)
 80023c0:	f001 fb03 	bl	80039ca <Moving_Average_Init>
		Moving_Average_Init(&enc_button_sense_filterStruct,10);
 80023c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80023c8:	484c      	ldr	r0, [pc, #304]	; (80024fc <main+0x1dc>)
 80023ca:	f001 fafe 	bl	80039ca <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
		LCD_init();
 80023ce:	f003 f85b 	bl	8005488 <LCD_init>

  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff ff08 	bl	80021e8 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	e00c      	b.n	80023f8 <main+0xd8>
  			get_bus_voltage();
 80023de:	f7ff f837 	bl	8001450 <get_bus_voltage>
  			get_thermocouple_temperature();
 80023e2:	f7ff f865 	bl	80014b0 <get_thermocouple_temperature>
  			get_handle_type();
 80023e6:	f7ff fe27 	bl	8002038 <get_handle_type>
  			get_stand_status();
 80023ea:	f7ff fd99 	bl	8001f20 <get_stand_status>
  			get_enc_button_status();
 80023ee:	f7ff fd2f 	bl	8001e50 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	3301      	adds	r3, #1
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	2bc7      	cmp	r3, #199	; 0xc7
 80023fc:	ddef      	ble.n	80023de <main+0xbe>
  		}

  		uint16_t menu_length = 8;
 80023fe:	2308      	movs	r3, #8
 8002400:	82fb      	strh	r3, [r7, #22]

  		if(!FlashCheckCRC()){
 8002402:	f7fe fdf5 	bl	8000ff0 <FlashCheckCRC>
 8002406:	4603      	mov	r3, r0
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <main+0xf8>
  	    	FlashWrite(&default_flash_values);
 8002412:	483b      	ldr	r0, [pc, #236]	; (8002500 <main+0x1e0>)
 8002414:	f7fe fe9a 	bl	800114c <FlashWrite>
  		}
  	    FlashRead(&flash_values);
 8002418:	483a      	ldr	r0, [pc, #232]	; (8002504 <main+0x1e4>)
 800241a:	f7fe fe73 	bl	8001104 <FlashRead>

  		/* Set startup state */
  		active_state = SLEEP;
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <main+0x1e8>)
 8002420:	2202      	movs	r2, #2
 8002422:	701a      	strb	r2, [r3, #0]

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8002424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	857b      	strh	r3, [r7, #42]	; 0x2a
  		uint16_t old_menu_cursor_position = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	853b      	strh	r3, [r7, #40]	; 0x28
  		uint16_t menue_start = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	84fb      	strh	r3, [r7, #38]	; 0x26
  		uint16_t menue_level = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	84bb      	strh	r3, [r7, #36]	; 0x24
  		uint16_t menu_active = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	847b      	strh	r3, [r7, #34]	; 0x22
  		float old_value = 0;
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8002448:	2120      	movs	r1, #32
 800244a:	4830      	ldr	r0, [pc, #192]	; (800250c <main+0x1ec>)
 800244c:	f006 fb0a 	bl	8008a64 <HAL_GPIO_ReadPin>
 8002450:	4603      	mov	r3, r0
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 828c 	bne.w	8002970 <main+0x650>
  			LCD_PutStr(50, 5, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002458:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800245c:	f7fe ffa9 	bl	80013b2 <RGB_to_BRG>
 8002460:	4603      	mov	r3, r0
 8002462:	461c      	mov	r4, r3
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe ffa4 	bl	80013b2 <RGB_to_BRG>
 800246a:	4603      	mov	r3, r0
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	9400      	str	r4, [sp, #0]
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <main+0x1f0>)
 8002472:	4a28      	ldr	r2, [pc, #160]	; (8002514 <main+0x1f4>)
 8002474:	2105      	movs	r1, #5
 8002476:	2032      	movs	r0, #50	; 0x32
 8002478:	f002 ffc8 	bl	800540c <LCD_PutStr>
  			LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_WHITE));
 800247c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002480:	f7fe ff97 	bl	80013b2 <RGB_to_BRG>
 8002484:	4603      	mov	r3, r0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2328      	movs	r3, #40	; 0x28
 800248a:	22f0      	movs	r2, #240	; 0xf0
 800248c:	2128      	movs	r1, #40	; 0x28
 800248e:	2000      	movs	r0, #0
 8002490:	f002 ff7e 	bl	8005390 <LCD_DrawLine>
  			LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_WHITE));
 8002494:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002498:	f7fe ff8b 	bl	80013b2 <RGB_to_BRG>
 800249c:	4603      	mov	r3, r0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2329      	movs	r3, #41	; 0x29
 80024a2:	22f0      	movs	r2, #240	; 0xf0
 80024a4:	2129      	movs	r1, #41	; 0x29
 80024a6:	2000      	movs	r0, #0
 80024a8:	f002 ff72 	bl	8005390 <LCD_DrawLine>
  			LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_WHITE));
 80024ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024b0:	f7fe ff7f 	bl	80013b2 <RGB_to_BRG>
 80024b4:	4603      	mov	r3, r0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	232a      	movs	r3, #42	; 0x2a
 80024ba:	22f0      	movs	r2, #240	; 0xf0
 80024bc:	212a      	movs	r1, #42	; 0x2a
 80024be:	2000      	movs	r0, #0
 80024c0:	f002 ff66 	bl	8005390 <LCD_DrawLine>

  			HAL_Delay(1000);
 80024c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024c8:	f003 f8ba 	bl	8005640 <HAL_Delay>
  			while(menu_active == 1){
 80024cc:	e24c      	b.n	8002968 <main+0x648>
 80024ce:	bf00      	nop
 80024d0:	200018c0 	.word	0x200018c0
 80024d4:	2000190c 	.word	0x2000190c
 80024d8:	20001874 	.word	0x20001874
 80024dc:	2000166c 	.word	0x2000166c
 80024e0:	200005b8 	.word	0x200005b8
 80024e4:	20001600 	.word	0x20001600
 80024e8:	20000624 	.word	0x20000624
 80024ec:	42480000 	.word	0x42480000
 80024f0:	20000950 	.word	0x20000950
 80024f4:	20000c7c 	.word	0x20000c7c
 80024f8:	20000fa8 	.word	0x20000fa8
 80024fc:	200012d4 	.word	0x200012d4
 8002500:	20000070 	.word	0x20000070
 8002504:	200005d8 	.word	0x200005d8
 8002508:	2000001c 	.word	0x2000001c
 800250c:	48000400 	.word	0x48000400
 8002510:	080190ac 	.word	0x080190ac
 8002514:	08017f44 	.word	0x08017f44
  				if(menue_level == 0){
 8002518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d111      	bne.n	8002542 <main+0x222>
  					if(TIM2->CNT < 1000)
 800251e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002528:	d204      	bcs.n	8002534 <main+0x214>
  					{
  						TIM2->CNT = 1000;
 800252a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800252e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8002534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	857b      	strh	r3, [r7, #42]	; 0x2a
  				}
  				if (menue_level == 1){
 8002542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 808e 	bne.w	8002666 <main+0x346>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 800254a:	69f8      	ldr	r0, [r7, #28]
 800254c:	f7fe f824 	bl	8000598 <__aeabi_f2d>
 8002550:	4604      	mov	r4, r0
 8002552:	460d      	mov	r5, r1
 8002554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fffa 	bl	8000554 <__aeabi_ui2d>
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4bac      	ldr	r3, [pc, #688]	; (8002818 <main+0x4f8>)
 8002566:	f7fd feb7 	bl	80002d8 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb61 	bl	8000c38 <__aeabi_d2f>
 8002576:	4603      	mov	r3, r0
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f80d 	bl	8000598 <__aeabi_f2d>
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002586:	f7fe f989 	bl	800089c <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fd fea3 	bl	80002dc <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a8:	ee17 0a90 	vmov	r0, s15
 80025ac:	f7fd fff4 	bl	8000598 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	4898      	ldr	r0, [pc, #608]	; (800281c <main+0x4fc>)
 80025ba:	180c      	adds	r4, r1, r0
 80025bc:	4640      	mov	r0, r8
 80025be:	4649      	mov	r1, r9
 80025c0:	f7fd fe8a 	bl	80002d8 <__aeabi_dsub>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 80025cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d12c      	bne.n	800262c <main+0x30c>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 80025d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	4a91      	ldr	r2, [pc, #580]	; (800281c <main+0x4fc>)
 80025d8:	4413      	add	r3, r2
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fae1 	bl	8000ba8 <__aeabi_d2iz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bfb8      	it	lt
 80025ec:	425b      	neglt	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffc0 	bl	8000574 <__aeabi_i2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	ed9f 1b85 	vldr	d1, [pc, #532]	; 8002810 <main+0x4f0>
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f015 faea 	bl	8017bd8 <fmod>
 8002604:	eeb0 7a40 	vmov.f32	s14, s0
 8002608:	eef0 7a60 	vmov.f32	s15, s1
 800260c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4a82      	ldr	r2, [pc, #520]	; (800281c <main+0x4fc>)
 8002612:	189c      	adds	r4, r3, r2
 8002614:	eeb0 0a47 	vmov.f32	s0, s14
 8002618:	eef0 0a67 	vmov.f32	s1, s15
 800261c:	f015 fb0a 	bl	8017c34 <round>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	eef0 7a60 	vmov.f32	s15, s1
 8002628:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 800262c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800262e:	2b01      	cmp	r3, #1
 8002630:	d019      	beq.n	8002666 <main+0x346>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8002632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <main+0x4fc>)
 8002638:	4413      	add	r3, r2
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fab1 	bl	8000ba8 <__aeabi_d2iz>
 8002646:	4603      	mov	r3, r0
 8002648:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800264c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002650:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4971      	ldr	r1, [pc, #452]	; (800281c <main+0x4fc>)
 8002656:	185c      	adds	r4, r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	f7fd ff8b 	bl	8000574 <__aeabi_i2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 8002666:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002668:	8afb      	ldrh	r3, [r7, #22]
 800266a:	429a      	cmp	r2, r3
 800266c:	d908      	bls.n	8002680 <main+0x360>
  								menu_cursor_position = menu_length;
 800266e:	8afb      	ldrh	r3, [r7, #22]
 8002670:	857b      	strh	r3, [r7, #42]	; 0x2a
  								TIM2->CNT = 1000 + menu_length*2;
 8002672:	8afb      	ldrh	r3, [r7, #22]
 8002674:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 8002680:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002682:	2b04      	cmp	r3, #4
 8002684:	d902      	bls.n	800268c <main+0x36c>
  					menue_start = menu_cursor_position-5;
 8002686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002688:	3b05      	subs	r3, #5
 800268a:	84fb      	strh	r3, [r7, #38]	; 0x26
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 800268c:	2120      	movs	r1, #32
 800268e:	4864      	ldr	r0, [pc, #400]	; (8002820 <main+0x500>)
 8002690:	f006 f9e8 	bl	8008a64 <HAL_GPIO_ReadPin>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d129      	bne.n	80026ee <main+0x3ce>
 800269a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800269c:	8afb      	ldrh	r3, [r7, #22]
 800269e:	3b02      	subs	r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	da24      	bge.n	80026ee <main+0x3ce>
  					if(menue_level == 0){
 80026a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <main+0x3a6>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 80026aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4a5b      	ldr	r2, [pc, #364]	; (800281c <main+0x4fc>)
 80026b0:	4413      	add	r3, r2
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe fabd 	bl	8000c38 <__aeabi_d2f>
 80026be:	4603      	mov	r3, r0
 80026c0:	61fb      	str	r3, [r7, #28]
  						old_menu_cursor_position = menu_cursor_position;
 80026c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026c4:	853b      	strh	r3, [r7, #40]	; 0x28
  					}
  					if(menue_level == 1){
 80026c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <main+0x3ba>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 80026cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80026d2:	005a      	lsls	r2, r3, #1
 80026d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 80026da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026dc:	3b01      	subs	r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bfb8      	it	lt
 80026e2:	425b      	neglt	r3, r3
 80026e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  					HAL_Delay(200);
 80026e6:	20c8      	movs	r0, #200	; 0xc8
 80026e8:	f002 ffaa 	bl	8005640 <HAL_Delay>
 80026ec:	e037      	b.n	800275e <main+0x43e>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 80026ee:	2120      	movs	r1, #32
 80026f0:	484b      	ldr	r0, [pc, #300]	; (8002820 <main+0x500>)
 80026f2:	f006 f9b7 	bl	8008a64 <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <main+0x3ea>
 80026fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80026fe:	8afb      	ldrh	r3, [r7, #22]
 8002700:	429a      	cmp	r2, r3
 8002702:	d102      	bne.n	800270a <main+0x3ea>
  					menu_active = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	847b      	strh	r3, [r7, #34]	; 0x22
 8002708:	e029      	b.n	800275e <main+0x43e>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 800270a:	2120      	movs	r1, #32
 800270c:	4844      	ldr	r0, [pc, #272]	; (8002820 <main+0x500>)
 800270e:	f006 f9a9 	bl	8008a64 <HAL_GPIO_ReadPin>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d10a      	bne.n	800272e <main+0x40e>
 8002718:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800271a:	8afb      	ldrh	r3, [r7, #22]
 800271c:	3b01      	subs	r3, #1
 800271e:	429a      	cmp	r2, r3
 8002720:	d105      	bne.n	800272e <main+0x40e>
  					menu_active = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	847b      	strh	r3, [r7, #34]	; 0x22
  					FlashWrite(&flash_values);
 8002726:	483d      	ldr	r0, [pc, #244]	; (800281c <main+0x4fc>)
 8002728:	f7fe fd10 	bl	800114c <FlashWrite>
 800272c:	e017      	b.n	800275e <main+0x43e>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 800272e:	2120      	movs	r1, #32
 8002730:	483b      	ldr	r0, [pc, #236]	; (8002820 <main+0x500>)
 8002732:	f006 f997 	bl	8008a64 <HAL_GPIO_ReadPin>
 8002736:	4603      	mov	r3, r0
 8002738:	2b01      	cmp	r3, #1
 800273a:	d110      	bne.n	800275e <main+0x43e>
 800273c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800273e:	8afb      	ldrh	r3, [r7, #22]
 8002740:	3b02      	subs	r3, #2
 8002742:	429a      	cmp	r2, r3
 8002744:	d10b      	bne.n	800275e <main+0x43e>
  					flash_values = default_flash_values;
 8002746:	4a35      	ldr	r2, [pc, #212]	; (800281c <main+0x4fc>)
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <main+0x504>)
 800274a:	4614      	mov	r4, r2
 800274c:	461d      	mov	r5, r3
 800274e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002756:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800275a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				}

  	  			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800275e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002762:	f7fe fe26 	bl	80013b2 <RGB_to_BRG>
 8002766:	4603      	mov	r3, r0
 8002768:	461c      	mov	r4, r3
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe fe21 	bl	80013b2 <RGB_to_BRG>
 8002770:	4603      	mov	r3, r0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9400      	str	r4, [sp, #0]
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <main+0x508>)
 8002778:	4a2c      	ldr	r2, [pc, #176]	; (800282c <main+0x50c>)
 800277a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800277e:	2000      	movs	r0, #0
 8002780:	f002 fe44 	bl	800540c <LCD_PutStr>
  	  			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002784:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002788:	f7fe fe13 	bl	80013b2 <RGB_to_BRG>
 800278c:	4603      	mov	r3, r0
 800278e:	461c      	mov	r4, r3
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe fe0e 	bl	80013b2 <RGB_to_BRG>
 8002796:	4603      	mov	r3, r0
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	9400      	str	r4, [sp, #0]
 800279c:	4b22      	ldr	r3, [pc, #136]	; (8002828 <main+0x508>)
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <main+0x510>)
 80027a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80027a4:	2096      	movs	r0, #150	; 0x96
 80027a6:	f002 fe31 	bl	800540c <LCD_PutStr>

  				for(int i = menue_start;i<menue_start+6;i++){
 80027aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	e0d5      	b.n	800295c <main+0x63c>

  					if((i == menu_cursor_position) && (menue_level == 0)){
 80027b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d13f      	bne.n	8002838 <main+0x518>
 80027b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d13c      	bne.n	8002838 <main+0x518>
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80027be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	0091      	lsls	r1, r2, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	460b      	mov	r3, r1
 80027d4:	4413      	add	r3, r2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	332d      	adds	r3, #45	; 0x2d
 80027da:	b29c      	uxth	r4, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4a13      	ldr	r2, [pc, #76]	; (8002834 <main+0x514>)
 80027e8:	189d      	adds	r5, r3, r2
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7fe fde1 	bl	80013b2 <RGB_to_BRG>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461e      	mov	r6, r3
 80027f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027f8:	f7fe fddb 	bl	80013b2 <RGB_to_BRG>
 80027fc:	4603      	mov	r3, r0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9600      	str	r6, [sp, #0]
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <main+0x508>)
 8002804:	462a      	mov	r2, r5
 8002806:	4621      	mov	r1, r4
 8002808:	2005      	movs	r0, #5
 800280a:	f002 fdff 	bl	800540c <LCD_PutStr>
 800280e:	e03b      	b.n	8002888 <main+0x568>
 8002810:	00000000 	.word	0x00000000
 8002814:	40000000 	.word	0x40000000
 8002818:	408f4000 	.word	0x408f4000
 800281c:	200005d8 	.word	0x200005d8
 8002820:	48000400 	.word	0x48000400
 8002824:	20000070 	.word	0x20000070
 8002828:	080190ac 	.word	0x080190ac
 800282c:	08017f50 	.word	0x08017f50
 8002830:	08017f5c 	.word	0x08017f5c
 8002834:	200000a0 	.word	0x200000a0

  					}
  					else{
  		  	  			LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4413      	add	r3, r2
 8002846:	461a      	mov	r2, r3
 8002848:	0091      	lsls	r1, r2, #2
 800284a:	461a      	mov	r2, r3
 800284c:	460b      	mov	r3, r1
 800284e:	4413      	add	r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	332d      	adds	r3, #45	; 0x2d
 8002854:	b29c      	uxth	r4, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4a28      	ldr	r2, [pc, #160]	; (8002904 <main+0x5e4>)
 8002862:	189d      	adds	r5, r3, r2
 8002864:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002868:	f7fe fda3 	bl	80013b2 <RGB_to_BRG>
 800286c:	4603      	mov	r3, r0
 800286e:	461e      	mov	r6, r3
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fd9e 	bl	80013b2 <RGB_to_BRG>
 8002876:	4603      	mov	r3, r0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	9600      	str	r6, [sp, #0]
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <main+0x5e8>)
 800287e:	462a      	mov	r2, r5
 8002880:	4621      	mov	r1, r4
 8002882:	2005      	movs	r0, #5
 8002884:	f002 fdc2 	bl	800540c <LCD_PutStr>
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 8002888:	463b      	mov	r3, r7
 800288a:	2214      	movs	r2, #20
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f013 f8a9 	bl	80159e6 <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <main+0x5ec>)
 800289a:	4413      	add	r3, r2
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	4638      	mov	r0, r7
 80028a2:	491b      	ldr	r1, [pc, #108]	; (8002910 <main+0x5f0>)
 80028a4:	f013 f83c 	bl	8015920 <siprintf>
  					if(i <= menu_length-3){
 80028a8:	8afb      	ldrh	r3, [r7, #22]
 80028aa:	3b02      	subs	r3, #2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	da51      	bge.n	8002956 <main+0x636>
  						if((i == menu_cursor_position) && (menue_level == 1)){
 80028b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d12c      	bne.n	8002914 <main+0x5f4>
 80028ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d129      	bne.n	8002914 <main+0x5f4>
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 80028c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	461a      	mov	r2, r3
 80028d0:	0091      	lsls	r1, r2, #2
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	332d      	adds	r3, #45	; 0x2d
 80028dc:	b29c      	uxth	r4, r3
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fd67 	bl	80013b2 <RGB_to_BRG>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461d      	mov	r5, r3
 80028e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028ec:	f7fe fd61 	bl	80013b2 <RGB_to_BRG>
 80028f0:	4603      	mov	r3, r0
 80028f2:	463a      	mov	r2, r7
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	9500      	str	r5, [sp, #0]
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <main+0x5e8>)
 80028fa:	4621      	mov	r1, r4
 80028fc:	20c8      	movs	r0, #200	; 0xc8
 80028fe:	f002 fd85 	bl	800540c <LCD_PutStr>
 8002902:	e028      	b.n	8002956 <main+0x636>
 8002904:	200000a0 	.word	0x200000a0
 8002908:	080190ac 	.word	0x080190ac
 800290c:	200005d8 	.word	0x200005d8
 8002910:	08017f64 	.word	0x08017f64

  						}
  						else{
  	  		  	  			LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4413      	add	r3, r2
 8002922:	461a      	mov	r2, r3
 8002924:	0091      	lsls	r1, r2, #2
 8002926:	461a      	mov	r2, r3
 8002928:	460b      	mov	r3, r1
 800292a:	4413      	add	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	332d      	adds	r3, #45	; 0x2d
 8002930:	b29c      	uxth	r4, r3
 8002932:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002936:	f7fe fd3c 	bl	80013b2 <RGB_to_BRG>
 800293a:	4603      	mov	r3, r0
 800293c:	461d      	mov	r5, r3
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe fd37 	bl	80013b2 <RGB_to_BRG>
 8002944:	4603      	mov	r3, r0
 8002946:	463a      	mov	r2, r7
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	9500      	str	r5, [sp, #0]
 800294c:	4bd8      	ldr	r3, [pc, #864]	; (8002cb0 <main+0x990>)
 800294e:	4621      	mov	r1, r4
 8002950:	20c8      	movs	r0, #200	; 0xc8
 8002952:	f002 fd5b 	bl	800540c <LCD_PutStr>
  				for(int i = menue_start;i<menue_start+6;i++){
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	3301      	adds	r3, #1
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800295e:	3305      	adds	r3, #5
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	429a      	cmp	r2, r3
 8002964:	f77f af24 	ble.w	80027b0 <main+0x490>
  			while(menu_active == 1){
 8002968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800296a:	2b01      	cmp	r3, #1
 800296c:	f43f add4 	beq.w	8002518 <main+0x1f8>
  				}
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002970:	4bd0      	ldr	r3, [pc, #832]	; (8002cb4 <main+0x994>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f93b 	bl	8000bf8 <__aeabi_d2uiz>
 8002982:	4603      	mov	r3, r0
 8002984:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002986:	4bcc      	ldr	r3, [pc, #816]	; (8002cb8 <main+0x998>)
 8002988:	ed93 7b00 	vldr	d7, [r3]
 800298c:	4bcb      	ldr	r3, [pc, #812]	; (8002cbc <main+0x99c>)
 800298e:	ed93 6b00 	vldr	d6, [r3]
 8002992:	4bcb      	ldr	r3, [pc, #812]	; (8002cc0 <main+0x9a0>)
 8002994:	ed93 5b00 	vldr	d5, [r3]
 8002998:	2300      	movs	r3, #0
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	2301      	movs	r3, #1
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	eeb0 2a45 	vmov.f32	s4, s10
 80029a4:	eef0 2a65 	vmov.f32	s5, s11
 80029a8:	eeb0 1a46 	vmov.f32	s2, s12
 80029ac:	eef0 1a66 	vmov.f32	s3, s13
 80029b0:	eeb0 0a47 	vmov.f32	s0, s14
 80029b4:	eef0 0a67 	vmov.f32	s1, s15
 80029b8:	4bc2      	ldr	r3, [pc, #776]	; (8002cc4 <main+0x9a4>)
 80029ba:	4ac3      	ldr	r2, [pc, #780]	; (8002cc8 <main+0x9a8>)
 80029bc:	49c3      	ldr	r1, [pc, #780]	; (8002ccc <main+0x9ac>)
 80029be:	48c4      	ldr	r0, [pc, #784]	; (8002cd0 <main+0x9b0>)
 80029c0:	f001 f8ce 	bl	8003b60 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 80029c4:	2101      	movs	r1, #1
 80029c6:	48c2      	ldr	r0, [pc, #776]	; (8002cd0 <main+0x9b0>)
 80029c8:	f001 fa5d 	bl	8003e86 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 80029cc:	4bc1      	ldr	r3, [pc, #772]	; (8002cd4 <main+0x9b4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	4619      	mov	r1, r3
 80029d4:	48be      	ldr	r0, [pc, #760]	; (8002cd0 <main+0x9b0>)
 80029d6:	f001 fc05 	bl	80041e4 <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 80029da:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8002c90 <main+0x970>
 80029de:	ed9f 0bae 	vldr	d0, [pc, #696]	; 8002c98 <main+0x978>
 80029e2:	48bb      	ldr	r0, [pc, #748]	; (8002cd0 <main+0x9b0>)
 80029e4:	f001 fa6d 	bl	8003ec2 <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 80029e8:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8002ca0 <main+0x980>
 80029ec:	ed9f 0bae 	vldr	d0, [pc, #696]	; 8002ca8 <main+0x988>
 80029f0:	48b7      	ldr	r0, [pc, #732]	; (8002cd0 <main+0x9b0>)
 80029f2:	f001 fad4 	bl	8003f9e <PID_SetILimits>

		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe fcdb 	bl	80013b2 <RGB_to_BRG>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f00e fae6 	bl	8010fd0 <UG_FillScreen>

		LCD_PutStr(53, 10, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002a04:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a08:	f7fe fcd3 	bl	80013b2 <RGB_to_BRG>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461c      	mov	r4, r3
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fcce 	bl	80013b2 <RGB_to_BRG>
 8002a16:	4603      	mov	r3, r0
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	9400      	str	r4, [sp, #0]
 8002a1c:	4bae      	ldr	r3, [pc, #696]	; (8002cd8 <main+0x9b8>)
 8002a1e:	4aaf      	ldr	r2, [pc, #700]	; (8002cdc <main+0x9bc>)
 8002a20:	210a      	movs	r1, #10
 8002a22:	2035      	movs	r0, #53	; 0x35
 8002a24:	f002 fcf2 	bl	800540c <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002a28:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a2c:	f7fe fcc1 	bl	80013b2 <RGB_to_BRG>
 8002a30:	4603      	mov	r3, r0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2328      	movs	r3, #40	; 0x28
 8002a36:	22f0      	movs	r2, #240	; 0xf0
 8002a38:	2128      	movs	r1, #40	; 0x28
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f002 fca8 	bl	8005390 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002a40:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a44:	f7fe fcb5 	bl	80013b2 <RGB_to_BRG>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2329      	movs	r3, #41	; 0x29
 8002a4e:	22f0      	movs	r2, #240	; 0xf0
 8002a50:	2129      	movs	r1, #41	; 0x29
 8002a52:	2000      	movs	r0, #0
 8002a54:	f002 fc9c 	bl	8005390 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002a58:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002a5c:	f7fe fca9 	bl	80013b2 <RGB_to_BRG>
 8002a60:	4603      	mov	r3, r0
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	232a      	movs	r3, #42	; 0x2a
 8002a66:	22f0      	movs	r2, #240	; 0xf0
 8002a68:	212a      	movs	r1, #42	; 0x2a
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f002 fc90 	bl	8005390 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002a70:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a74:	f7fe fc9d 	bl	80013b2 <RGB_to_BRG>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fc98 	bl	80013b2 <RGB_to_BRG>
 8002a82:	4603      	mov	r3, r0
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	9400      	str	r4, [sp, #0]
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <main+0x990>)
 8002a8a:	4a95      	ldr	r2, [pc, #596]	; (8002ce0 <main+0x9c0>)
 8002a8c:	2132      	movs	r1, #50	; 0x32
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f002 fcbc 	bl	800540c <LCD_PutStr>
		UG_DrawCircle(105, 90, 4, RGB_to_BRG(C_WHITE));
 8002a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a98:	f7fe fc8b 	bl	80013b2 <RGB_to_BRG>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	215a      	movs	r1, #90	; 0x5a
 8002aa2:	2069      	movs	r0, #105	; 0x69
 8002aa4:	f00e fb72 	bl	801118c <UG_DrawCircle>
		UG_DrawCircle(105, 90, 3, RGB_to_BRG(C_WHITE));
 8002aa8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aac:	f7fe fc81 	bl	80013b2 <RGB_to_BRG>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	215a      	movs	r1, #90	; 0x5a
 8002ab6:	2069      	movs	r0, #105	; 0x69
 8002ab8:	f00e fb68 	bl	801118c <UG_DrawCircle>
		LCD_PutStr(115, 75, "C", FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002abc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ac0:	f7fe fc77 	bl	80013b2 <RGB_to_BRG>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe fc72 	bl	80013b2 <RGB_to_BRG>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	9400      	str	r4, [sp, #0]
 8002ad4:	4b83      	ldr	r3, [pc, #524]	; (8002ce4 <main+0x9c4>)
 8002ad6:	4a84      	ldr	r2, [pc, #528]	; (8002ce8 <main+0x9c8>)
 8002ad8:	214b      	movs	r1, #75	; 0x4b
 8002ada:	2073      	movs	r0, #115	; 0x73
 8002adc:	f002 fc96 	bl	800540c <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002ae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ae4:	f7fe fc65 	bl	80013b2 <RGB_to_BRG>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461c      	mov	r4, r3
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe fc60 	bl	80013b2 <RGB_to_BRG>
 8002af2:	4603      	mov	r3, r0
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	9400      	str	r4, [sp, #0]
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <main+0x990>)
 8002afa:	4a7c      	ldr	r2, [pc, #496]	; (8002cec <main+0x9cc>)
 8002afc:	218c      	movs	r1, #140	; 0x8c
 8002afe:	200a      	movs	r0, #10
 8002b00:	f002 fc84 	bl	800540c <LCD_PutStr>
		UG_DrawCircle(105, 185, 4, RGB_to_BRG(C_WHITE));
 8002b04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b08:	f7fe fc53 	bl	80013b2 <RGB_to_BRG>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2204      	movs	r2, #4
 8002b10:	21b9      	movs	r1, #185	; 0xb9
 8002b12:	2069      	movs	r0, #105	; 0x69
 8002b14:	f00e fb3a 	bl	801118c <UG_DrawCircle>
		UG_DrawCircle(105, 185, 3, RGB_to_BRG(C_WHITE));
 8002b18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b1c:	f7fe fc49 	bl	80013b2 <RGB_to_BRG>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2203      	movs	r2, #3
 8002b24:	21b9      	movs	r1, #185	; 0xb9
 8002b26:	2069      	movs	r0, #105	; 0x69
 8002b28:	f00e fb30 	bl	801118c <UG_DrawCircle>
		LCD_PutStr(115, 165, "C", FONT_arial_37X45_numbers_and_minus_and_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002b2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b30:	f7fe fc3f 	bl	80013b2 <RGB_to_BRG>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461c      	mov	r4, r3
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe fc3a 	bl	80013b2 <RGB_to_BRG>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	9400      	str	r4, [sp, #0]
 8002b44:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <main+0x9c4>)
 8002b46:	4a68      	ldr	r2, [pc, #416]	; (8002ce8 <main+0x9c8>)
 8002b48:	21a5      	movs	r1, #165	; 0xa5
 8002b4a:	2073      	movs	r0, #115	; 0x73
 8002b4c:	f002 fc5e 	bl	800540c <LCD_PutStr>

		UG_DrawFrame(3, 136, 165, 225, RGB_to_BRG(C_WHITE));
 8002b50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b54:	f7fe fc2d 	bl	80013b2 <RGB_to_BRG>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	23e1      	movs	r3, #225	; 0xe1
 8002b5e:	22a5      	movs	r2, #165	; 0xa5
 8002b60:	2188      	movs	r1, #136	; 0x88
 8002b62:	2003      	movs	r0, #3
 8002b64:	f00e faca 	bl	80110fc <UG_DrawFrame>
		UG_DrawFrame(2, 135, 166, 226, RGB_to_BRG(C_WHITE));
 8002b68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b6c:	f7fe fc21 	bl	80013b2 <RGB_to_BRG>
 8002b70:	4603      	mov	r3, r0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	23e2      	movs	r3, #226	; 0xe2
 8002b76:	22a6      	movs	r2, #166	; 0xa6
 8002b78:	2187      	movs	r1, #135	; 0x87
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f00e fabe 	bl	80110fc <UG_DrawFrame>

		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002b80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b84:	f7fe fc15 	bl	80013b2 <RGB_to_BRG>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461c      	mov	r4, r3
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe fc10 	bl	80013b2 <RGB_to_BRG>
 8002b92:	4603      	mov	r3, r0
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	9400      	str	r4, [sp, #0]
 8002b98:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <main+0x9d0>)
 8002b9a:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <main+0x9d4>)
 8002b9c:	21eb      	movs	r1, #235	; 0xeb
 8002b9e:	2002      	movs	r0, #2
 8002ba0:	f002 fc34 	bl	800540c <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002ba4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ba8:	f7fe fc03 	bl	80013b2 <RGB_to_BRG>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461c      	mov	r4, r3
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fe fbfe 	bl	80013b2 <RGB_to_BRG>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	9400      	str	r4, [sp, #0]
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <main+0x9d0>)
 8002bbe:	4a4e      	ldr	r2, [pc, #312]	; (8002cf8 <main+0x9d8>)
 8002bc0:	21ff      	movs	r1, #255	; 0xff
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f002 fc22 	bl	800540c <LCD_PutStr>
		LCD_PutStr(2, 275, "PCB temp:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002bcc:	f7fe fbf1 	bl	80013b2 <RGB_to_BRG>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461c      	mov	r4, r3
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe fbec 	bl	80013b2 <RGB_to_BRG>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	9301      	str	r3, [sp, #4]
 8002bde:	9400      	str	r4, [sp, #0]
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <main+0x9d0>)
 8002be2:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <main+0x9dc>)
 8002be4:	f240 1113 	movw	r1, #275	; 0x113
 8002be8:	2002      	movs	r0, #2
 8002bea:	f002 fc0f 	bl	800540c <LCD_PutStr>

		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002bee:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002bf2:	f7fe fbde 	bl	80013b2 <RGB_to_BRG>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	f240 1329 	movw	r3, #297	; 0x129
 8002bfe:	22f0      	movs	r2, #240	; 0xf0
 8002c00:	f240 1129 	movw	r1, #297	; 0x129
 8002c04:	2002      	movs	r0, #2
 8002c06:	f00e fba7 	bl	8011358 <UG_DrawLine>
		UG_DrawLine(2, 298, 240, 298, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002c0a:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002c0e:	f7fe fbd0 	bl	80013b2 <RGB_to_BRG>
 8002c12:	4603      	mov	r3, r0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f44f 7395 	mov.w	r3, #298	; 0x12a
 8002c1a:	22f0      	movs	r2, #240	; 0xf0
 8002c1c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8002c20:	2002      	movs	r0, #2
 8002c22:	f00e fb99 	bl	8011358 <UG_DrawLine>

		LCD_PutStr(2, 300, "PRESETS    ", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002c26:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002c2a:	f7fe fbc2 	bl	80013b2 <RGB_to_BRG>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461c      	mov	r4, r3
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fbbd 	bl	80013b2 <RGB_to_BRG>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9400      	str	r4, [sp, #0]
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <main+0x990>)
 8002c40:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <main+0x9e0>)
 8002c42:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c46:	2002      	movs	r0, #2
 8002c48:	f002 fbe0 	bl	800540c <LCD_PutStr>
		LCD_PutStr(130, 300, "280", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002c4c:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002c50:	f7fe fbaf 	bl	80013b2 <RGB_to_BRG>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461c      	mov	r4, r3
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fbaa 	bl	80013b2 <RGB_to_BRG>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9400      	str	r4, [sp, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <main+0x990>)
 8002c66:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <main+0x9e4>)
 8002c68:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002c6c:	2082      	movs	r0, #130	; 0x82
 8002c6e:	f002 fbcd 	bl	800540c <LCD_PutStr>
		LCD_PutStr(190, 300, "330", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002c72:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002c76:	f7fe fb9c 	bl	80013b2 <RGB_to_BRG>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fe fb97 	bl	80013b2 <RGB_to_BRG>
 8002c84:	4603      	mov	r3, r0
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	e03e      	b.n	8002d08 <main+0x9e8>
 8002c8a:	bf00      	nop
 8002c8c:	f3af 8000 	nop.w
 8002c90:	00000000 	.word	0x00000000
 8002c94:	407f4000 	.word	0x407f4000
	...
 8002ca4:	4072c000 	.word	0x4072c000
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	c072c000 	.word	0xc072c000
 8002cb0:	080190ac 	.word	0x080190ac
 8002cb4:	200005d8 	.word	0x200005d8
 8002cb8:	20000570 	.word	0x20000570
 8002cbc:	20000578 	.word	0x20000578
 8002cc0:	20000580 	.word	0x20000580
 8002cc4:	20000610 	.word	0x20000610
 8002cc8:	20000608 	.word	0x20000608
 8002ccc:	20000038 	.word	0x20000038
 8002cd0:	20001a88 	.word	0x20001a88
 8002cd4:	2000000c 	.word	0x2000000c
 8002cd8:	08018e78 	.word	0x08018e78
 8002cdc:	08017f6c 	.word	0x08017f6c
 8002ce0:	08017f78 	.word	0x08017f78
 8002ce4:	0801aa04 	.word	0x0801aa04
 8002ce8:	08017f84 	.word	0x08017f84
 8002cec:	08017f88 	.word	0x08017f88
 8002cf0:	080180dc 	.word	0x080180dc
 8002cf4:	08017f94 	.word	0x08017f94
 8002cf8:	08017fa4 	.word	0x08017fa4
 8002cfc:	08017fb4 	.word	0x08017fb4
 8002d00:	08017fc0 	.word	0x08017fc0
 8002d04:	08017fcc 	.word	0x08017fcc
 8002d08:	9400      	str	r4, [sp, #0]
 8002d0a:	4bb9      	ldr	r3, [pc, #740]	; (8002ff0 <main+0xcd0>)
 8002d0c:	4ab9      	ldr	r2, [pc, #740]	; (8002ff4 <main+0xcd4>)
 8002d0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d12:	20be      	movs	r0, #190	; 0xbe
 8002d14:	f002 fb7a 	bl	800540c <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002d18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d1c:	f7fe fb49 	bl	80013b2 <RGB_to_BRG>
 8002d20:	4603      	mov	r3, r0
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	f240 1321 	movw	r3, #289	; 0x121
 8002d28:	22e8      	movs	r2, #232	; 0xe8
 8002d2a:	2135      	movs	r1, #53	; 0x35
 8002d2c:	20d0      	movs	r0, #208	; 0xd0
 8002d2e:	f00e f9e5 	bl	80110fc <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d36:	f7fe fb3c 	bl	80013b2 <RGB_to_BRG>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002d42:	22e7      	movs	r2, #231	; 0xe7
 8002d44:	2136      	movs	r1, #54	; 0x36
 8002d46:	20d1      	movs	r0, #209	; 0xd1
 8002d48:	f00e f9d8 	bl	80110fc <UG_DrawFrame>

  		/* Start-up beep */
  		beep();
 8002d4c:	f7fe fffe 	bl	8001d4c <beep>

  		while (1){

  			check_emergency_shutdown();
 8002d50:	f7ff f80e 	bl	8001d70 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 8002d54:	f002 fc68 	bl	8005628 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4ba7      	ldr	r3, [pc, #668]	; (8002ff8 <main+0xcd8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	1ad2      	subs	r2, r2, r3
 8002d60:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <main+0xcdc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d30e      	bcc.n	8002d86 <main+0xa66>
  				get_stand_status();
 8002d68:	f7ff f8da 	bl	8001f20 <get_stand_status>
  				get_bus_voltage();
 8002d6c:	f7fe fb70 	bl	8001450 <get_bus_voltage>
  				get_handle_type();
 8002d70:	f7ff f962 	bl	8002038 <get_handle_type>
  				get_enc_button_status();
 8002d74:	f7ff f86c 	bl	8001e50 <get_enc_button_status>
  				get_set_temperature();
 8002d78:	f7fe ffb0 	bl	8001cdc <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 8002d7c:	f002 fc54 	bl	8005628 <HAL_GetTick>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a9d      	ldr	r2, [pc, #628]	; (8002ff8 <main+0xcd8>)
 8002d84:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8002d86:	4b9e      	ldr	r3, [pc, #632]	; (8003000 <main+0xce0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d832      	bhi.n	8002df4 <main+0xad4>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <main+0xa74>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002dc7 	.word	0x08002dc7
 8002d9c:	08002dd5 	.word	0x08002dd5
 8002da0:	08002da9 	.word	0x08002da9
 8002da4:	08002de5 	.word	0x08002de5
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 8002da8:	4996      	ldr	r1, [pc, #600]	; (8003004 <main+0xce4>)
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002db6:	e01d      	b.n	8002df4 <main+0xad4>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8002db8:	4b93      	ldr	r3, [pc, #588]	; (8003008 <main+0xce8>)
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	4991      	ldr	r1, [pc, #580]	; (8003004 <main+0xce4>)
 8002dc0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002dc4:	e016      	b.n	8002df4 <main+0xad4>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8002dc6:	4b91      	ldr	r3, [pc, #580]	; (800300c <main+0xcec>)
 8002dc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dcc:	498d      	ldr	r1, [pc, #564]	; (8003004 <main+0xce4>)
 8002dce:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002dd2:	e00f      	b.n	8002df4 <main+0xad4>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 8002dd4:	498b      	ldr	r1, [pc, #556]	; (8003004 <main+0xce4>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002de2:	e007      	b.n	8002df4 <main+0xad4>
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8002de4:	4987      	ldr	r1, [pc, #540]	; (8003004 <main+0xce4>)
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002df2:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 8002df4:	f002 fc18 	bl	8005628 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <main+0xcf0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	4b84      	ldr	r3, [pc, #528]	; (8003014 <main+0xcf4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d34b      	bcc.n	8002ea0 <main+0xb80>
					thermocouple_measurement_requested = 1;
 8002e08:	4b83      	ldr	r3, [pc, #524]	; (8003018 <main+0xcf8>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]

  				//set_heater_duty(0);
  				//HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
  				get_thermocouple_temperature();
 8002e0e:	f7fe fb4f 	bl	80014b0 <get_thermocouple_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 8002e12:	4882      	ldr	r0, [pc, #520]	; (800301c <main+0xcfc>)
 8002e14:	f000 fef0 	bl	8003bf8 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002e18:	4b81      	ldr	r3, [pc, #516]	; (8003020 <main+0xd00>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fbbb 	bl	8000598 <__aeabi_f2d>
 8002e22:	a36d      	add	r3, pc, #436	; (adr r3, 8002fd8 <main+0xcb8>)
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f7fd fc0e 	bl	8000648 <__aeabi_dmul>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4b74      	ldr	r3, [pc, #464]	; (8003008 <main+0xce8>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fbad 	bl	8000598 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd fd29 	bl	800089c <__aeabi_ddiv>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	4b74      	ldr	r3, [pc, #464]	; (8003024 <main+0xd04>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f7fd fbf6 	bl	8000648 <__aeabi_dmul>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4971      	ldr	r1, [pc, #452]	; (8003028 <main+0xd08>)
 8002e62:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002e66:	4b70      	ldr	r3, [pc, #448]	; (8003028 <main+0xd08>)
 8002e68:	ed93 7b00 	vldr	d7, [r3]
 8002e6c:	ed9f 2b5c 	vldr	d2, [pc, #368]	; 8002fe0 <main+0xcc0>
 8002e70:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002fe8 <main+0xcc8>
 8002e74:	eeb0 0a47 	vmov.f32	s0, s14
 8002e78:	eef0 0a67 	vmov.f32	s1, s15
 8002e7c:	f7fe fa3a 	bl	80012f4 <clamp>
 8002e80:	ec53 2b10 	vmov	r2, r3, d0
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7fd feb6 	bl	8000bf8 <__aeabi_d2uiz>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f9a9 	bl	80021e8 <set_heater_duty>
  				previous_PID_update = HAL_GetTick();
 8002e96:	f002 fbc7 	bl	8005628 <HAL_GetTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <main+0xcf0>)
 8002e9e:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8002ea0:	f002 fbc2 	bl	8005628 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <main+0xd0c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1ad2      	subs	r2, r2, r3
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <main+0xd10>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d368      	bcc.n	8002f86 <main+0xc66>
  				memset(&buffer, '\0', sizeof(buffer));
 8002eb4:	2228      	movs	r2, #40	; 0x28
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	485e      	ldr	r0, [pc, #376]	; (8003034 <main+0xd14>)
 8002eba:	f012 fd94 	bl	80159e6 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002ebe:	4b52      	ldr	r3, [pc, #328]	; (8003008 <main+0xce8>)
 8002ec0:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8002ec4:	4b50      	ldr	r3, [pc, #320]	; (8003008 <main+0xce8>)
 8002ec6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002eca:	4b56      	ldr	r3, [pc, #344]	; (8003024 <main+0xd04>)
 8002ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <main+0xd18>)
 8002ed6:	f7fd fce1 	bl	800089c <__aeabi_ddiv>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002ee2:	484e      	ldr	r0, [pc, #312]	; (800301c <main+0xcfc>)
 8002ee4:	f001 f9c2 	bl	800426c <PID_GetPpart>
 8002ee8:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	4b51      	ldr	r3, [pc, #324]	; (8003038 <main+0xd18>)
 8002ef2:	f7fd fcd3 	bl	800089c <__aeabi_ddiv>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002efe:	4847      	ldr	r0, [pc, #284]	; (800301c <main+0xcfc>)
 8002f00:	f001 f9c6 	bl	8004290 <PID_GetIpart>
 8002f04:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <main+0xd18>)
 8002f0e:	f7fd fcc5 	bl	800089c <__aeabi_ddiv>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002f1a:	4840      	ldr	r0, [pc, #256]	; (800301c <main+0xcfc>)
 8002f1c:	f001 f9ca 	bl	80042b4 <PID_GetDpart>
 8002f20:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <main+0xd18>)
 8002f2a:	f7fd fcb7 	bl	800089c <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4690      	mov	r8, r2
 8002f34:	4699      	mov	r9, r3
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <main+0xce8>)
 8002f38:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002f3c:	4b32      	ldr	r3, [pc, #200]	; (8003008 <main+0xce8>)
 8002f3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002f46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f4a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002f4e:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002f52:	ed8d ab04 	vstr	d10, [sp, #16]
 8002f56:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002f5a:	e9cd 4500 	strd	r4, r5, [sp]
 8002f5e:	4652      	mov	r2, sl
 8002f60:	465b      	mov	r3, fp
 8002f62:	4936      	ldr	r1, [pc, #216]	; (800303c <main+0xd1c>)
 8002f64:	4833      	ldr	r0, [pc, #204]	; (8003034 <main+0xd14>)
 8002f66:	f012 fcdb 	bl	8015920 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8002f6a:	4832      	ldr	r0, [pc, #200]	; (8003034 <main+0xd14>)
 8002f6c:	f7fd f9a8 	bl	80002c0 <strlen>
 8002f70:	4603      	mov	r3, r0
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4619      	mov	r1, r3
 8002f76:	482f      	ldr	r0, [pc, #188]	; (8003034 <main+0xd14>)
 8002f78:	f011 fb5e 	bl	8014638 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8002f7c:	f002 fb54 	bl	8005628 <HAL_GetTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a2a      	ldr	r2, [pc, #168]	; (800302c <main+0xd0c>)
 8002f84:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_check_for_valid_heater_update >= interval_check_for_valid_heater){
 8002f86:	f002 fb4f 	bl	8005628 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <main+0xd20>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <main+0xd24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d30b      	bcc.n	8002fb2 <main+0xc92>
  					set_heater_duty(PID_MAX_OUTPUT*0.8);
 8002f9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002f9e:	f7ff f923 	bl	80021e8 <set_heater_duty>
  					current_measurement_requested = 1;
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <main+0xd28>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
 8002fa8:	f002 fb3e 	bl	8005628 <HAL_GetTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <main+0xd20>)
 8002fb0:	6013      	str	r3, [r2, #0]
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8002fb2:	f002 fb39 	bl	8005628 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <main+0xd2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <main+0xd30>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f4ff aec4 	bcc.w	8002d50 <main+0xa30>
  				update_display();
 8002fc8:	f7fe fbda 	bl	8001780 <update_display>
  				previous_millis_display = HAL_GetTick();
 8002fcc:	f002 fb2c 	bl	8005628 <HAL_GetTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <main+0xd2c>)
 8002fd4:	6013      	str	r3, [r2, #0]
  			check_emergency_shutdown();
 8002fd6:	e6bb      	b.n	8002d50 <main+0xa30>
 8002fd8:	eb851eb8 	.word	0xeb851eb8
 8002fdc:	3fbeb851 	.word	0x3fbeb851
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	407f4000 	.word	0x407f4000
	...
 8002ff0:	080190ac 	.word	0x080190ac
 8002ff4:	08017fd0 	.word	0x08017fd0
 8002ff8:	20000568 	.word	0x20000568
 8002ffc:	20000018 	.word	0x20000018
 8003000:	2000001c 	.word	0x2000001c
 8003004:	20000610 	.word	0x20000610
 8003008:	20000030 	.word	0x20000030
 800300c:	200005d8 	.word	0x200005d8
 8003010:	20000554 	.word	0x20000554
 8003014:	2000000c 	.word	0x2000000c
 8003018:	20000621 	.word	0x20000621
 800301c:	20001a88 	.word	0x20001a88
 8003020:	200005b0 	.word	0x200005b0
 8003024:	20000608 	.word	0x20000608
 8003028:	20000618 	.word	0x20000618
 800302c:	20000550 	.word	0x20000550
 8003030:	20000008 	.word	0x20000008
 8003034:	20000588 	.word	0x20000588
 8003038:	40240000 	.word	0x40240000
 800303c:	08017fd4 	.word	0x08017fd4
 8003040:	20000564 	.word	0x20000564
 8003044:	20000014 	.word	0x20000014
 8003048:	20000620 	.word	0x20000620
 800304c:	2000054c 	.word	0x2000054c
 8003050:	20000004 	.word	0x20000004

08003054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b094      	sub	sp, #80	; 0x50
 8003058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	2238      	movs	r2, #56	; 0x38
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f012 fcbf 	bl	80159e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003076:	2000      	movs	r0, #0
 8003078:	f007 fba2 	bl	800a7c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800307c:	2322      	movs	r3, #34	; 0x22
 800307e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003086:	2340      	movs	r3, #64	; 0x40
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800308a:	2301      	movs	r3, #1
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800308e:	2302      	movs	r3, #2
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003092:	2302      	movs	r3, #2
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003096:	2304      	movs	r3, #4
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800309a:	2355      	movs	r3, #85	; 0x55
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800309e:	2302      	movs	r3, #2
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030a2:	2302      	movs	r3, #2
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030a6:	2302      	movs	r3, #2
 80030a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030aa:	f107 0318 	add.w	r3, r7, #24
 80030ae:	4618      	mov	r0, r3
 80030b0:	f007 fc3a 	bl	800a928 <HAL_RCC_OscConfig>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80030ba:	f000 fc81 	bl	80039c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030be:	230f      	movs	r3, #15
 80030c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c2:	2303      	movs	r3, #3
 80030c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2104      	movs	r1, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 ff38 	bl	800af4c <HAL_RCC_ClockConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80030e2:	f000 fc6d 	bl	80039c0 <Error_Handler>
  }
}
 80030e6:	bf00      	nop
 80030e8:	3750      	adds	r7, #80	; 0x50
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2220      	movs	r2, #32
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f012 fc6c 	bl	80159e6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003114:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003118:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800311c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003124:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800312a:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <MX_ADC1_Init+0x104>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003132:	2201      	movs	r2, #1
 8003134:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003136:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003138:	2204      	movs	r2, #4
 800313a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <MX_ADC1_Init+0x104>)
 800313e:	2200      	movs	r2, #0
 8003140:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003144:	2200      	movs	r2, #0
 8003146:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <MX_ADC1_Init+0x104>)
 800314a:	2202      	movs	r2, #2
 800314c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003158:	2200      	movs	r2, #0
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <MX_ADC1_Init+0x104>)
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <MX_ADC1_Init+0x104>)
 800316c:	2200      	movs	r2, #0
 800316e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003178:	481e      	ldr	r0, [pc, #120]	; (80031f4 <MX_ADC1_Init+0x104>)
 800317a:	f002 fce9 	bl	8005b50 <HAL_ADC_Init>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003184:	f000 fc1c 	bl	80039c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800318c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003190:	4619      	mov	r1, r3
 8003192:	4818      	ldr	r0, [pc, #96]	; (80031f4 <MX_ADC1_Init+0x104>)
 8003194:	f004 fa2e 	bl	80075f4 <HAL_ADCEx_MultiModeConfigChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800319e:	f000 fc0f 	bl	80039c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <MX_ADC1_Init+0x108>)
 80031a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031a6:	2306      	movs	r3, #6
 80031a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80031aa:	2304      	movs	r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031ae:	237f      	movs	r3, #127	; 0x7f
 80031b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031b2:	2304      	movs	r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	480d      	ldr	r0, [pc, #52]	; (80031f4 <MX_ADC1_Init+0x104>)
 80031c0:	f003 fa70 	bl	80066a4 <HAL_ADC_ConfigChannel>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80031ca:	f000 fbf9 	bl	80039c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <MX_ADC1_Init+0x10c>)
 80031d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031d2:	230c      	movs	r3, #12
 80031d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4806      	ldr	r0, [pc, #24]	; (80031f4 <MX_ADC1_Init+0x104>)
 80031dc:	f003 fa62 	bl	80066a4 <HAL_ADC_ConfigChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80031e6:	f000 fbeb 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	3730      	adds	r7, #48	; 0x30
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20001600 	.word	0x20001600
 80031f8:	0c900008 	.word	0x0c900008
 80031fc:	10c00010 	.word	0x10c00010

08003200 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003206:	463b      	mov	r3, r7
 8003208:	2220      	movs	r2, #32
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f012 fbea 	bl	80159e6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <MX_ADC2_Init+0xc4>)
 8003216:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003218:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800321a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800321e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003228:	2200      	movs	r2, #0
 800322a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800323a:	2204      	movs	r2, #4
 800323c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003244:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003246:	2201      	movs	r2, #1
 8003248:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800324c:	2201      	movs	r2, #1
 800324e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800325a:	2200      	movs	r2, #0
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800326e:	2200      	movs	r2, #0
 8003270:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <MX_ADC2_Init+0xc0>)
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <MX_ADC2_Init+0xc0>)
 800327c:	f002 fc68 	bl	8005b50 <HAL_ADC_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003286:	f000 fb9b 	bl	80039c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <MX_ADC2_Init+0xc8>)
 800328c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800328e:	2306      	movs	r3, #6
 8003290:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8003292:	2304      	movs	r3, #4
 8003294:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003296:	237f      	movs	r3, #127	; 0x7f
 8003298:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800329a:	2304      	movs	r3, #4
 800329c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032a2:	463b      	mov	r3, r7
 80032a4:	4619      	mov	r1, r3
 80032a6:	4806      	ldr	r0, [pc, #24]	; (80032c0 <MX_ADC2_Init+0xc0>)
 80032a8:	f003 f9fc 	bl	80066a4 <HAL_ADC_ConfigChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80032b2:	f000 fb85 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80032b6:	bf00      	nop
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000166c 	.word	0x2000166c
 80032c4:	50000100 	.word	0x50000100
 80032c8:	2a000400 	.word	0x2a000400

080032cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <MX_CRC_Init+0x3c>)
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <MX_CRC_Init+0x40>)
 80032d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <MX_CRC_Init+0x3c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <MX_CRC_Init+0x3c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <MX_CRC_Init+0x3c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <MX_CRC_Init+0x3c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_CRC_Init+0x3c>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80032f4:	4804      	ldr	r0, [pc, #16]	; (8003308 <MX_CRC_Init+0x3c>)
 80032f6:	f004 fb31 	bl	800795c <HAL_CRC_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8003300:	f000 fb5e 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20001738 	.word	0x20001738
 800330c:	40023000 	.word	0x40023000

08003310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <MX_I2C1_Init+0x74>)
 8003316:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <MX_I2C1_Init+0x78>)
 8003318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800331a:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <MX_I2C1_Init+0x74>)
 800331c:	4a1b      	ldr	r2, [pc, #108]	; (800338c <MX_I2C1_Init+0x7c>)
 800331e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <MX_I2C1_Init+0x74>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <MX_I2C1_Init+0x74>)
 8003328:	2201      	movs	r2, #1
 800332a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <MX_I2C1_Init+0x74>)
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <MX_I2C1_Init+0x74>)
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <MX_I2C1_Init+0x74>)
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_I2C1_Init+0x74>)
 8003340:	2200      	movs	r2, #0
 8003342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <MX_I2C1_Init+0x74>)
 8003346:	2200      	movs	r2, #0
 8003348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800334a:	480e      	ldr	r0, [pc, #56]	; (8003384 <MX_I2C1_Init+0x74>)
 800334c:	f005 fbd2 	bl	8008af4 <HAL_I2C_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003356:	f000 fb33 	bl	80039c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800335a:	2100      	movs	r1, #0
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <MX_I2C1_Init+0x74>)
 800335e:	f005 fc64 	bl	8008c2a <HAL_I2CEx_ConfigAnalogFilter>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003368:	f000 fb2a 	bl	80039c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800336c:	2100      	movs	r1, #0
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_I2C1_Init+0x74>)
 8003370:	f005 fca6 	bl	8008cc0 <HAL_I2CEx_ConfigDigitalFilter>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800337a:	f000 fb21 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	2000175c 	.word	0x2000175c
 8003388:	40005400 	.word	0x40005400
 800338c:	30a0a7fb 	.word	0x30a0a7fb

08003390 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <MX_SPI2_Init+0x74>)
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <MX_SPI2_Init+0x78>)
 8003398:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <MX_SPI2_Init+0x74>)
 800339c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <MX_SPI2_Init+0x74>)
 80033a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <MX_SPI2_Init+0x74>)
 80033ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <MX_SPI2_Init+0x74>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <MX_SPI2_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <MX_SPI2_Init+0x74>)
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <MX_SPI2_Init+0x74>)
 80033c8:	2210      	movs	r2, #16
 80033ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <MX_SPI2_Init+0x74>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <MX_SPI2_Init+0x74>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <MX_SPI2_Init+0x74>)
 80033da:	2200      	movs	r2, #0
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <MX_SPI2_Init+0x74>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <MX_SPI2_Init+0x74>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <MX_SPI2_Init+0x74>)
 80033ec:	2208      	movs	r2, #8
 80033ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033f0:	4804      	ldr	r0, [pc, #16]	; (8003404 <MX_SPI2_Init+0x74>)
 80033f2:	f008 f9b7 	bl	800b764 <HAL_SPI_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80033fc:	f000 fae0 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200017b0 	.word	0x200017b0
 8003408:	40003800 	.word	0x40003800

0800340c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b098      	sub	sp, #96	; 0x60
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003412:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	615a      	str	r2, [r3, #20]
 8003430:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2234      	movs	r2, #52	; 0x34
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f012 fad4 	bl	80159e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <MX_TIM1_Init+0x120>)
 8003440:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <MX_TIM1_Init+0x124>)
 8003442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17-6;
 8003444:	4b39      	ldr	r3, [pc, #228]	; (800352c <MX_TIM1_Init+0x120>)
 8003446:	220b      	movs	r2, #11
 8003448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344a:	4b38      	ldr	r3, [pc, #224]	; (800352c <MX_TIM1_Init+0x120>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <MX_TIM1_Init+0x120>)
 8003452:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003456:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003458:	4b34      	ldr	r3, [pc, #208]	; (800352c <MX_TIM1_Init+0x120>)
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800345e:	4b33      	ldr	r3, [pc, #204]	; (800352c <MX_TIM1_Init+0x120>)
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003464:	4b31      	ldr	r3, [pc, #196]	; (800352c <MX_TIM1_Init+0x120>)
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800346a:	4830      	ldr	r0, [pc, #192]	; (800352c <MX_TIM1_Init+0x120>)
 800346c:	f008 ff7f 	bl	800c36e <HAL_TIM_PWM_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003476:	f000 faa3 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347a:	2300      	movs	r3, #0
 800347c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003486:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800348a:	4619      	mov	r1, r3
 800348c:	4827      	ldr	r0, [pc, #156]	; (800352c <MX_TIM1_Init+0x120>)
 800348e:	f00a f9a3 	bl	800d7d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003498:	f000 fa92 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349c:	2360      	movs	r3, #96	; 0x60
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a4:	2300      	movs	r3, #0
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034a8:	2300      	movs	r3, #0
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034b0:	2300      	movs	r3, #0
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034bc:	2208      	movs	r2, #8
 80034be:	4619      	mov	r1, r3
 80034c0:	481a      	ldr	r0, [pc, #104]	; (800352c <MX_TIM1_Init+0x120>)
 80034c2:	f009 fbf5 	bl	800ccb0 <HAL_TIM_PWM_ConfigChannel>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80034cc:	f000 fa78 	bl	80039c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80034f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003500:	2300      	movs	r3, #0
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4807      	ldr	r0, [pc, #28]	; (800352c <MX_TIM1_Init+0x120>)
 800350e:	f00a f9e5 	bl	800d8dc <HAL_TIMEx_ConfigBreakDeadTime>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003518:	f000 fa52 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800351c:	4803      	ldr	r0, [pc, #12]	; (800352c <MX_TIM1_Init+0x120>)
 800351e:	f001 f9df 	bl	80048e0 <HAL_TIM_MspPostInit>

}
 8003522:	bf00      	nop
 8003524:	3760      	adds	r7, #96	; 0x60
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20001874 	.word	0x20001874
 8003530:	40012c00 	.word	0x40012c00

08003534 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08c      	sub	sp, #48	; 0x30
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f012 fa4f 	bl	80159e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003548:	463b      	mov	r3, r7
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <MX_TIM2_Init+0xa4>)
 8003554:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003558:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <MX_TIM2_Init+0xa4>)
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <MX_TIM2_Init+0xa4>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <MX_TIM2_Init+0xa4>)
 8003568:	f04f 32ff 	mov.w	r2, #4294967295
 800356c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <MX_TIM2_Init+0xa4>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <MX_TIM2_Init+0xa4>)
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800357a:	2303      	movs	r3, #3
 800357c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800357e:	2302      	movs	r3, #2
 8003580:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003582:	2301      	movs	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800358a:	230a      	movs	r3, #10
 800358c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003592:	2301      	movs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003596:	2300      	movs	r3, #0
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800359a:	230a      	movs	r3, #10
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4619      	mov	r1, r3
 80035a4:	480c      	ldr	r0, [pc, #48]	; (80035d8 <MX_TIM2_Init+0xa4>)
 80035a6:	f009 f8df 	bl	800c768 <HAL_TIM_Encoder_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80035b0:	f000 fa06 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035bc:	463b      	mov	r3, r7
 80035be:	4619      	mov	r1, r3
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <MX_TIM2_Init+0xa4>)
 80035c2:	f00a f909 	bl	800d7d8 <HAL_TIMEx_MasterConfigSynchronization>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80035cc:	f000 f9f8 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	; 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200018c0 	.word	0x200018c0

080035dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ee:	463b      	mov	r3, r7
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	60da      	str	r2, [r3, #12]
 80035fa:	611a      	str	r2, [r3, #16]
 80035fc:	615a      	str	r2, [r3, #20]
 80035fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <MX_TIM4_Init+0xac>)
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <MX_TIM4_Init+0xb0>)
 8003604:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <MX_TIM4_Init+0xac>)
 8003608:	f242 720f 	movw	r2, #9999	; 0x270f
 800360c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <MX_TIM4_Init+0xac>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <MX_TIM4_Init+0xac>)
 8003616:	220a      	movs	r2, #10
 8003618:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <MX_TIM4_Init+0xac>)
 800361c:	2200      	movs	r2, #0
 800361e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <MX_TIM4_Init+0xac>)
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003626:	4818      	ldr	r0, [pc, #96]	; (8003688 <MX_TIM4_Init+0xac>)
 8003628:	f008 fea1 	bl	800c36e <HAL_TIM_PWM_Init>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003632:	f000 f9c5 	bl	80039c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	4810      	ldr	r0, [pc, #64]	; (8003688 <MX_TIM4_Init+0xac>)
 8003646:	f00a f8c7 	bl	800d7d8 <HAL_TIMEx_MasterConfigSynchronization>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003650:	f000 f9b6 	bl	80039c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003654:	2360      	movs	r3, #96	; 0x60
 8003656:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003664:	463b      	mov	r3, r7
 8003666:	2204      	movs	r2, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4807      	ldr	r0, [pc, #28]	; (8003688 <MX_TIM4_Init+0xac>)
 800366c:	f009 fb20 	bl	800ccb0 <HAL_TIM_PWM_ConfigChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003676:	f000 f9a3 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800367a:	4803      	ldr	r0, [pc, #12]	; (8003688 <MX_TIM4_Init+0xac>)
 800367c:	f001 f930 	bl	80048e0 <HAL_TIM_MspPostInit>

}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	2000190c 	.word	0x2000190c
 800368c:	40000800 	.word	0x40000800

08003690 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <MX_TIM16_Init+0x48>)
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <MX_TIM16_Init+0x4c>)
 8003698:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_TIM16_Init+0x48>)
 800369c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80036a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036be:	2200      	movs	r2, #0
 80036c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_TIM16_Init+0x48>)
 80036c4:	f008 fd62 	bl	800c18c <HAL_TIM_Base_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80036ce:	f000 f977 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20001958 	.word	0x20001958
 80036dc:	40014400 	.word	0x40014400

080036e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_TIM17_Init+0x58>)
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <MX_TIM17_Init+0x5c>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <MX_TIM17_Init+0x58>)
 80036ec:	f244 2267 	movw	r2, #16999	; 0x4267
 80036f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_TIM17_Init+0x58>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <MX_TIM17_Init+0x58>)
 80036fa:	2231      	movs	r2, #49	; 0x31
 80036fc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_TIM17_Init+0x58>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_TIM17_Init+0x58>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_TIM17_Init+0x58>)
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <MX_TIM17_Init+0x58>)
 8003712:	f008 fd3b 	bl	800c18c <HAL_TIM_Base_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800371c:	f000 f950 	bl	80039c0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003720:	2108      	movs	r1, #8
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_TIM17_Init+0x58>)
 8003724:	f008 ffc6 	bl	800c6b4 <HAL_TIM_OnePulse_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 800372e:	f000 f947 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200019a4 	.word	0x200019a4
 800373c:	40014800 	.word	0x40014800

08003740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <MX_USART1_UART_Init+0x94>)
 8003748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800374c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003766:	220c      	movs	r2, #12
 8003768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003778:	2200      	movs	r2, #0
 800377a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800377e:	2200      	movs	r2, #0
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 8003784:	2200      	movs	r2, #0
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003788:	4811      	ldr	r0, [pc, #68]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800378a:	f00a f99e 	bl	800daca <HAL_HalfDuplex_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003794:	f000 f914 	bl	80039c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003798:	2100      	movs	r1, #0
 800379a:	480d      	ldr	r0, [pc, #52]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 800379c:	f00a ff12 	bl	800e5c4 <HAL_UARTEx_SetTxFifoThreshold>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80037a6:	f000 f90b 	bl	80039c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037aa:	2100      	movs	r1, #0
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 80037ae:	f00a ff47 	bl	800e640 <HAL_UARTEx_SetRxFifoThreshold>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80037b8:	f000 f902 	bl	80039c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80037bc:	4804      	ldr	r0, [pc, #16]	; (80037d0 <MX_USART1_UART_Init+0x90>)
 80037be:	f00a fec8 	bl	800e552 <HAL_UARTEx_DisableFifoMode>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80037c8:	f000 f8fa 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200019f0 	.word	0x200019f0
 80037d4:	40013800 	.word	0x40013800

080037d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80037de:	4b16      	ldr	r3, [pc, #88]	; (8003838 <MX_DMA_Init+0x60>)
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <MX_DMA_Init+0x60>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6493      	str	r3, [r2, #72]	; 0x48
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <MX_DMA_Init+0x60>)
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <MX_DMA_Init+0x60>)
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <MX_DMA_Init+0x60>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6493      	str	r3, [r2, #72]	; 0x48
 8003802:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <MX_DMA_Init+0x60>)
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	200b      	movs	r0, #11
 8003814:	f004 f86d 	bl	80078f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003818:	200b      	movs	r0, #11
 800381a:	f004 f884 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	200c      	movs	r0, #12
 8003824:	f004 f865 	bl	80078f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003828:	200c      	movs	r0, #12
 800382a:	f004 f87c 	bl	8007926 <HAL_NVIC_EnableIRQ>

}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003842:	f107 0314 	add.w	r3, r7, #20
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003852:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385e:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800386a:	4b52      	ldr	r3, [pc, #328]	; (80039b4 <MX_GPIO_Init+0x178>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	4a51      	ldr	r2, [pc, #324]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003870:	f043 0320 	orr.w	r3, r3, #32
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003876:	4b4f      	ldr	r3, [pc, #316]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388e:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <MX_GPIO_Init+0x178>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <MX_GPIO_Init+0x178>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	4a45      	ldr	r2, [pc, #276]	; (80039b4 <MX_GPIO_Init+0x178>)
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <MX_GPIO_Init+0x178>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2102      	movs	r1, #2
 80038b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ba:	f005 f8eb 	bl	8008a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 80038be:	2200      	movs	r2, #0
 80038c0:	f645 4107 	movw	r1, #23559	; 0x5c07
 80038c4:	483c      	ldr	r0, [pc, #240]	; (80039b8 <MX_GPIO_Init+0x17c>)
 80038c6:	f005 f8e5 	bl	8008a94 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 80038ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80038ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4619      	mov	r1, r3
 80038de:	4837      	ldr	r0, [pc, #220]	; (80039bc <MX_GPIO_Init+0x180>)
 80038e0:	f004 ff3e 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 80038e4:	2302      	movs	r3, #2
 80038e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4619      	mov	r1, r3
 80038fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038fe:	f004 ff2f 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8003902:	2370      	movs	r3, #112	; 0x70
 8003904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4619      	mov	r1, r3
 8003914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003918:	f004 ff22 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 800391c:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003920:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392a:	2300      	movs	r3, #0
 800392c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	4619      	mov	r1, r3
 8003934:	4820      	ldr	r0, [pc, #128]	; (80039b8 <MX_GPIO_Init+0x17c>)
 8003936:	f004 ff13 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 800393a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800393e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003940:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4619      	mov	r1, r3
 8003950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003954:	f004 ff04 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8003958:	2320      	movs	r3, #32
 800395a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4619      	mov	r1, r3
 800396a:	4813      	ldr	r0, [pc, #76]	; (80039b8 <MX_GPIO_Init+0x17c>)
 800396c:	f004 fef8 	bl	8008760 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_3_Pin */
  GPIO_InitStruct.Pin = SW_3_Pin;
 8003970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800397a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_3_GPIO_Port, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	480c      	ldr	r0, [pc, #48]	; (80039b8 <MX_GPIO_Init+0x17c>)
 8003988:	f004 feea 	bl	8008760 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2017      	movs	r0, #23
 8003992:	f003 ffae 	bl	80078f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003996:	2017      	movs	r0, #23
 8003998:	f003 ffc5 	bl	8007926 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	2028      	movs	r0, #40	; 0x28
 80039a2:	f003 ffa6 	bl	80078f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039a6:	2028      	movs	r0, #40	; 0x28
 80039a8:	f003 ffbd 	bl	8007926 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ac:	bf00      	nop
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	48000400 	.word	0x48000400
 80039bc:	48000800 	.word	0x48000800

080039c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
}
 80039c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <Error_Handler+0x8>

080039ca <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	e008      	b.n	8003a04 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	2200      	movs	r2, #0
 80039fc:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	edd3 7a00 	vldr	s15, [r3]
 8003a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1c:	d4e9      	bmi.n	80039f2 <Moving_Average_Init+0x28>
	}
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	441a      	add	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003a52:	6839      	ldr	r1, [r7, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d507      	bpl.n	8003aa8 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003aa6:	e003      	b.n	8003ab0 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ac8:	ee16 0a90 	vmov	r0, s13
 8003acc:	f7fc fd64 	bl	8000598 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ad8:	eeb0 0a47 	vmov.f32	s0, s14
 8003adc:	eef0 0a67 	vmov.f32	s1, s15
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b16:	f7fd f827 	bl	8000b68 <__aeabi_dcmpgt>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003b2c:	e011      	b.n	8003b52 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b3a:	f7fc fff7 	bl	8000b2c <__aeabi_dcmplt>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d100      	bne.n	8003b46 <PID_Init+0x60>
}
 8003b44:	e005      	b.n	8003b52 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	0000      	movs	r0, r0
 8003b5c:	0000      	movs	r0, r0
	...

08003b60 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24
 8003b68:	6239      	str	r1, [r7, #32]
 8003b6a:	61fa      	str	r2, [r7, #28]
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003b72:	ed87 1b02 	vstr	d1, [r7, #8]
 8003b76:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	6a3a      	ldr	r2, [r7, #32]
 8003b84:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	2200      	movs	r2, #0
 8003b90:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003b92:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003be8 <PID+0x88>
 8003b96:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003bf0 <PID+0x90>
 8003b9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b9c:	f000 f991 	bl	8003ec2 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	2264      	movs	r2, #100	; 0x64
 8003ba4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8003ba6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003baa:	4619      	mov	r1, r3
 8003bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bae:	f000 fad9 	bl	8004164 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003bb2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	ed97 2b00 	vldr	d2, [r7]
 8003bbc:	ed97 1b02 	vldr	d1, [r7, #8]
 8003bc0:	ed97 0b04 	vldr	d0, [r7, #16]
 8003bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc6:	f000 fa25 	bl	8004014 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003bca:	f001 fd2d 	bl	8005628 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	605a      	str	r2, [r3, #4]

}
 8003bda:	bf00      	nop
 8003bdc:	3728      	adds	r7, #40	; 0x28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	f3af 8000 	nop.w
 8003be8:	00000000 	.word	0x00000000
 8003bec:	406fe000 	.word	0x406fe000
	...

08003bf8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b08c      	sub	sp, #48	; 0x30
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <PID_Compute+0x16>
	{
		return _FALSE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e136      	b.n	8003e7c <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003c0e:	f001 fd0b 	bl	8005628 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d204      	bcs.n	8003c32 <PID_Compute+0x3a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8124 	beq.w	8003e7a <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4a:	f7fc fb45 	bl	80002d8 <__aeabi_dsub>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003c5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003c60:	f7fc fb3a 	bl	80002d8 <__aeabi_dsub>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003c78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c7c:	f7fc fce4 	bl	8000648 <__aeabi_dmul>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4650      	mov	r0, sl
 8003c86:	4659      	mov	r1, fp
 8003c88:	f7fc fb28 	bl	80002dc <__adddf3>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003ca2:	f7fc ff61 	bl	8000b68 <__aeabi_dcmpgt>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d006      	beq.n	8003cba <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003cb8:	e010      	b.n	8003cdc <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003cc6:	f7fc ff31 	bl	8000b2c <__aeabi_dcmplt>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d114      	bne.n	8003d1a <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d00:	f7fc fca2 	bl	8000648 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4650      	mov	r0, sl
 8003d0a:	4659      	mov	r1, fp
 8003d0c:	f7fc fae4 	bl	80002d8 <__aeabi_dsub>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003d26:	f7fc ff1f 	bl	8000b68 <__aeabi_dcmpgt>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003d3c:	e010      	b.n	8003d60 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003d4a:	f7fc feef 	bl	8000b2c <__aeabi_dcmplt>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d66:	4690      	mov	r8, r2
 8003d68:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d70:	4640      	mov	r0, r8
 8003d72:	4649      	mov	r1, r9
 8003d74:	f7fc fc68 	bl	8000648 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d94:	f7fc fc58 	bl	8000648 <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003da6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003daa:	f7fc fc4d 	bl	8000648 <__aeabi_dmul>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8003db8:	e005      	b.n	8003dc6 <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd6:	f7fc fc37 	bl	8000648 <__aeabi_dmul>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4640      	mov	r0, r8
 8003de0:	4649      	mov	r1, r9
 8003de2:	f7fc fa79 	bl	80002d8 <__aeabi_dsub>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dee:	f7fc fa75 	bl	80002dc <__adddf3>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003e00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e04:	f7fc feb0 	bl	8000b68 <__aeabi_dcmpgt>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003e14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003e18:	e00e      	b.n	8003e38 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e24:	f7fc fe82 	bl	8000b2c <__aeabi_dcmplt>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003e34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003e3e:	4614      	mov	r4, r2
 8003e40:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc fbfc 	bl	8000648 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e62:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e6c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8003e7a:	2300      	movs	r3, #0
	}

}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3730      	adds	r7, #48	; 0x30
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e86 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <PID_SetMode+0x2e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fe19 	bl	8003ae6 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	705a      	strb	r2, [r3, #1]

}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6178      	str	r0, [r7, #20]
 8003eca:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ece:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eda:	f7fc fe3b 	bl	8000b54 <__aeabi_dcmpge>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d158      	bne.n	8003f96 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eea:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef4:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04b      	beq.n	8003f98 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f0e:	f7fc fe2b 	bl	8000b68 <__aeabi_dcmpgt>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f22:	e9c1 2300 	strd	r2, r3, [r1]
 8003f26:	e012      	b.n	8003f4e <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f36:	f7fc fdf9 	bl	8000b2c <__aeabi_dcmplt>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f4a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f5a:	f7fc fe05 	bl	8000b68 <__aeabi_dcmpgt>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d006      	beq.n	8003f72 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003f70:	e012      	b.n	8003f98 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f7e:	f7fc fdd5 	bl	8000b2c <__aeabi_dcmplt>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003f94:	e000      	b.n	8003f98 <PID_SetOutputLimits+0xd6>
		return;
 8003f96:	bf00      	nop
		}
		else { }

	}

}
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6178      	str	r0, [r7, #20]
 8003fa6:	ed87 0b02 	vstr	d0, [r7, #8]
 8003faa:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fb6:	f7fc fdcd 	bl	8000b54 <__aeabi_dcmpge>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8003fc0:	6979      	ldr	r1, [r7, #20]
 8003fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8003fd4:	e000      	b.n	8003fd8 <PID_SetILimits+0x3a>
		return;
 8003fd6:	bf00      	nop
}
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b088      	sub	sp, #32
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	61f8      	str	r0, [r7, #28]
 8003fe6:	ed87 0b04 	vstr	d0, [r7, #16]
 8003fea:	ed87 1b02 	vstr	d1, [r7, #8]
 8003fee:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	789b      	ldrb	r3, [r3, #2]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	ed97 2b00 	vldr	d2, [r7]
 8003ffc:	ed97 1b02 	vldr	d1, [r7, #8]
 8004000:	ed97 0b04 	vldr	d0, [r7, #16]
 8004004:	69f8      	ldr	r0, [r7, #28]
 8004006:	f000 f805 	bl	8004014 <PID_SetTunings2>
}
 800400a:	bf00      	nop
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	61f8      	str	r0, [r7, #28]
 800401c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004020:	ed87 1b02 	vstr	d1, [r7, #8]
 8004024:	ed87 2b00 	vstr	d2, [r7]
 8004028:	460b      	mov	r3, r1
 800402a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004038:	f7fc fd78 	bl	8000b2c <__aeabi_dcmplt>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f040 8089 	bne.w	8004156 <PID_SetTunings2+0x142>
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004050:	f7fc fd6c 	bl	8000b2c <__aeabi_dcmplt>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d17d      	bne.n	8004156 <PID_SetTunings2+0x142>
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004066:	f7fc fd61 	bl	8000b2c <__aeabi_dcmplt>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d172      	bne.n	8004156 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	7efa      	ldrb	r2, [r7, #27]
 8004074:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8004076:	7efb      	ldrb	r3, [r7, #27]
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004088:	69f9      	ldr	r1, [r7, #28]
 800408a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800408e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004092:	69f9      	ldr	r1, [r7, #28]
 8004094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004098:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fc fa52 	bl	8000554 <__aeabi_ui2d>
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <PID_SetTunings2+0x14c>)
 80040b6:	f7fc fbf1 	bl	800089c <__aeabi_ddiv>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 80040cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040d4:	f7fc fab8 	bl	8000648 <__aeabi_dmul>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	69f9      	ldr	r1, [r7, #28]
 80040de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80040e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040ea:	f7fc fbd7 	bl	800089c <__aeabi_ddiv>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	69f9      	ldr	r1, [r7, #28]
 80040f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d12b      	bne.n	8004158 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	f7fc f8e3 	bl	80002d8 <__aeabi_dsub>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	69f9      	ldr	r1, [r7, #28]
 8004118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	f7fc f8d5 	bl	80002d8 <__aeabi_dsub>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f7fc f8c7 	bl	80002d8 <__aeabi_dsub>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	69f9      	ldr	r1, [r7, #28]
 8004150:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004154:	e000      	b.n	8004158 <PID_SetTunings2+0x144>
		return;
 8004156:	bf00      	nop

	}

}
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	408f4000 	.word	0x408f4000

08004164 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02e      	beq.n	80041d6 <PID_SetControllerDirection+0x72>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	78db      	ldrb	r3, [r3, #3]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	429a      	cmp	r2, r3
 8004180:	d029      	beq.n	80041d6 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004188:	f04f 0000 	mov.w	r0, #0
 800418c:	f04f 0100 	mov.w	r1, #0
 8004190:	f7fc f8a2 	bl	80002d8 <__aeabi_dsub>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f04f 0100 	mov.w	r1, #0
 80041ac:	f7fc f894 	bl	80002d8 <__aeabi_dsub>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80041c0:	f04f 0000 	mov.w	r0, #0
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	f7fc f886 	bl	80002d8 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	70da      	strb	r2, [r3, #3]

}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dd01      	ble.n	80041fa <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	dd2e      	ble.n	8004264 <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004206:	68b8      	ldr	r0, [r7, #8]
 8004208:	f7fc f9b4 	bl	8000574 <__aeabi_i2d>
 800420c:	4604      	mov	r4, r0
 800420e:	460d      	mov	r5, r1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc f99d 	bl	8000554 <__aeabi_ui2d>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fc fb3b 	bl	800089c <__aeabi_ddiv>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004234:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004238:	f7fc fa06 	bl	8000648 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800424c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004250:	f7fc fb24 	bl	800089c <__aeabi_ddiv>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	68f9      	ldr	r1, [r7, #12]
 800425a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]

	}

}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bdb0      	pop	{r4, r5, r7, pc}

0800426c <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800427a:	ec43 2b17 	vmov	d7, r2, r3
}
 800427e:	eeb0 0a47 	vmov.f32	s0, s14
 8004282:	eef0 0a67 	vmov.f32	s1, s15
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800429e:	ec43 2b17 	vmov	d7, r2, r3
}
 80042a2:	eeb0 0a47 	vmov.f32	s0, s14
 80042a6:	eef0 0a67 	vmov.f32	s1, s15
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80042c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80042c6:	eeb0 0a47 	vmov.f32	s0, s14
 80042ca:	eef0 0a67 	vmov.f32	s1, s15
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_MspInit+0x44>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	4a0e      	ldr	r2, [pc, #56]	; (800431c <HAL_MspInit+0x44>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6613      	str	r3, [r2, #96]	; 0x60
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_MspInit+0x44>)
 80042ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	4b09      	ldr	r3, [pc, #36]	; (800431c <HAL_MspInit+0x44>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <HAL_MspInit+0x44>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6593      	str	r3, [r2, #88]	; 0x58
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_MspInit+0x44>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800430e:	f006 fafb 	bl	800a908 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000

08004320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b09c      	sub	sp, #112	; 0x70
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004338:	f107 0318 	add.w	r3, r7, #24
 800433c:	2244      	movs	r2, #68	; 0x44
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f011 fb50 	bl	80159e6 <memset>
  if(hadc->Instance==ADC1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800434e:	d146      	bne.n	80043de <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004354:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004356:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800435a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800435c:	f107 0318 	add.w	r3, r7, #24
 8004360:	4618      	mov	r0, r3
 8004362:	f007 f80f 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800436c:	f7ff fb28 	bl	80039c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004370:	4b57      	ldr	r3, [pc, #348]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	4a56      	ldr	r2, [pc, #344]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 8004378:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800437a:	4b55      	ldr	r3, [pc, #340]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10b      	bne.n	800439a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004382:	4b54      	ldr	r3, [pc, #336]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4a53      	ldr	r2, [pc, #332]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800438c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438e:	4b51      	ldr	r3, [pc, #324]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	4a4d      	ldr	r2, [pc, #308]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043a6:	4b4b      	ldr	r3, [pc, #300]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 80043b2:	230c      	movs	r3, #12
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b6:	2303      	movs	r3, #3
 80043b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c8:	f004 f9ca 	bl	8008760 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	2012      	movs	r0, #18
 80043d2:	f003 fa8e 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80043d6:	2012      	movs	r0, #18
 80043d8:	f003 faa5 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80043dc:	e074      	b.n	80044c8 <HAL_ADC_MspInit+0x1a8>
  else if(hadc->Instance==ADC2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3d      	ldr	r2, [pc, #244]	; (80044d8 <HAL_ADC_MspInit+0x1b8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d16f      	bne.n	80044c8 <HAL_ADC_MspInit+0x1a8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80043e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80043ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043f4:	f107 0318 	add.w	r3, r7, #24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f006 ffc3 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_ADC_MspInit+0xe8>
      Error_Handler();
 8004404:	f7ff fadc 	bl	80039c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	4a30      	ldr	r2, [pc, #192]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 8004410:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <HAL_ADC_MspInit+0x1b0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10b      	bne.n	8004432 <HAL_ADC_MspInit+0x112>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004432:	4b28      	ldr	r3, [pc, #160]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_ADC_MspInit+0x1b4>)
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 800444a:	2302      	movs	r3, #2
 800444c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800444e:	2303      	movs	r3, #3
 8004450:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 8004456:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800445a:	4619      	mov	r1, r3
 800445c:	481f      	ldr	r0, [pc, #124]	; (80044dc <HAL_ADC_MspInit+0x1bc>)
 800445e:	f004 f97f 	bl	8008760 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004462:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_ADC_MspInit+0x1c4>)
 8004466:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800446e:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004474:	4b1a      	ldr	r3, [pc, #104]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800447a:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004480:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004486:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 800448a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004492:	2220      	movs	r2, #32
 8004494:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 8004498:	2200      	movs	r2, #0
 800449a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800449c:	4810      	ldr	r0, [pc, #64]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 800449e:	f003 fc63 	bl	8007d68 <HAL_DMA_Init>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_ADC_MspInit+0x18c>
      Error_Handler();
 80044a8:	f7ff fa8a 	bl	80039c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
 80044b2:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <HAL_ADC_MspInit+0x1c0>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	2012      	movs	r0, #18
 80044be:	f003 fa18 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80044c2:	2012      	movs	r0, #18
 80044c4:	f003 fa2f 	bl	8007926 <HAL_NVIC_EnableIRQ>
}
 80044c8:	bf00      	nop
 80044ca:	3770      	adds	r7, #112	; 0x70
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20001b20 	.word	0x20001b20
 80044d4:	40021000 	.word	0x40021000
 80044d8:	50000100 	.word	0x50000100
 80044dc:	48001400 	.word	0x48001400
 80044e0:	200016d8 	.word	0x200016d8
 80044e4:	4002001c 	.word	0x4002001c

080044e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_CRC_MspInit+0x38>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10b      	bne.n	8004512 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_CRC_MspInit+0x3c>)
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_CRC_MspInit+0x3c>)
 8004500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004504:	6493      	str	r3, [r2, #72]	; 0x48
 8004506:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_CRC_MspInit+0x3c>)
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40023000 	.word	0x40023000
 8004524:	40021000 	.word	0x40021000

08004528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b09c      	sub	sp, #112	; 0x70
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004540:	f107 0318 	add.w	r3, r7, #24
 8004544:	2244      	movs	r2, #68	; 0x44
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f011 fa4c 	bl	80159e6 <memset>
  if(hi2c->Instance==I2C1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2e      	ldr	r2, [pc, #184]	; (800460c <HAL_I2C_MspInit+0xe4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d154      	bne.n	8004602 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800455c:	2300      	movs	r3, #0
 800455e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004560:	f107 0318 	add.w	r3, r7, #24
 8004564:	4618      	mov	r0, r3
 8004566:	f006 ff0d 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004570:	f7ff fa26 	bl	80039c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 8004576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004578:	4a25      	ldr	r2, [pc, #148]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 8004592:	f043 0302 	orr.w	r3, r3, #2
 8004596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 800459a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80045a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045aa:	2312      	movs	r3, #18
 80045ac:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045b6:	2304      	movs	r3, #4
 80045b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045c4:	f004 f8cc 	bl	8008760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045ce:	2312      	movs	r3, #18
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045da:	2304      	movs	r3, #4
 80045dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045de:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045e2:	4619      	mov	r1, r3
 80045e4:	480b      	ldr	r0, [pc, #44]	; (8004614 <HAL_I2C_MspInit+0xec>)
 80045e6:	f004 f8bb 	bl	8008760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 80045f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045f4:	6593      	str	r3, [r2, #88]	; 0x58
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_I2C_MspInit+0xe8>)
 80045f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004602:	bf00      	nop
 8004604:	3770      	adds	r7, #112	; 0x70
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40005400 	.word	0x40005400
 8004610:	40021000 	.word	0x40021000
 8004614:	48000400 	.word	0x48000400

08004618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	60da      	str	r2, [r3, #12]
 800462e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2c      	ldr	r2, [pc, #176]	; (80046e8 <HAL_SPI_MspInit+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d151      	bne.n	80046de <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	4a2b      	ldr	r2, [pc, #172]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 8004640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004644:	6593      	str	r3, [r2, #88]	; 0x58
 8004646:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004652:	4b26      	ldr	r3, [pc, #152]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	4a25      	ldr	r2, [pc, #148]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_SPI_MspInit+0xd4>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800466a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800466e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004678:	2300      	movs	r3, #0
 800467a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800467c:	2305      	movs	r3, #5
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	481a      	ldr	r0, [pc, #104]	; (80046f0 <HAL_SPI_MspInit+0xd8>)
 8004688:	f004 f86a 	bl	8008760 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <HAL_SPI_MspInit+0xe0>)
 8004690:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 8004694:	220d      	movs	r2, #13
 8004696:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004698:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 800469a:	2210      	movs	r2, #16
 800469c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046a4:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80046b6:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80046c2:	480c      	ldr	r0, [pc, #48]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046c4:	f003 fb50 	bl	8007d68 <HAL_DMA_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80046ce:	f7ff f977 	bl	80039c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
 80046d8:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <HAL_SPI_MspInit+0xdc>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40003800 	.word	0x40003800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	48000400 	.word	0x48000400
 80046f4:	20001814 	.word	0x20001814
 80046f8:	40020008 	.word	0x40020008

080046fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_TIM_PWM_MspInit+0x88>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d124      	bne.n	8004758 <HAL_TIM_PWM_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800470e:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 8004714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004718:	6613      	str	r3, [r2, #96]	; 0x60
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 800471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	2019      	movs	r0, #25
 800472c:	f003 f8e1 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004730:	2019      	movs	r0, #25
 8004732:	f003 f8f8 	bl	8007926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	201a      	movs	r0, #26
 800473c:	f003 f8d9 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004740:	201a      	movs	r0, #26
 8004742:	f003 f8f0 	bl	8007926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	201b      	movs	r0, #27
 800474c:	f003 f8d1 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004750:	201b      	movs	r0, #27
 8004752:	f003 f8e8 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004756:	e010      	b.n	800477a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <HAL_TIM_PWM_MspInit+0x90>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10b      	bne.n	800477a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6593      	str	r3, [r2, #88]	; 0x58
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_TIM_PWM_MspInit+0x8c>)
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40021000 	.word	0x40021000
 800478c:	40000800 	.word	0x40000800

08004790 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d14c      	bne.n	800484c <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	4a27      	ldr	r2, [pc, #156]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6593      	str	r3, [r2, #88]	; 0x58
 80047be:	4b25      	ldr	r3, [pc, #148]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	4a21      	ldr	r2, [pc, #132]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047d6:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_TIM_Encoder_MspInit+0xc4>)
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80047fa:	2301      	movs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800480a:	2301      	movs	r3, #1
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	4619      	mov	r1, r3
 8004814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004818:	f003 ffa2 	bl	8008760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 800481c:	2308      	movs	r3, #8
 800481e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004820:	2302      	movs	r3, #2
 8004822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800482c:	2301      	movs	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	4619      	mov	r1, r3
 8004836:	4808      	ldr	r0, [pc, #32]	; (8004858 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004838:	f003 ff92 	bl	8008760 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800483c:	2200      	movs	r2, #0
 800483e:	2100      	movs	r1, #0
 8004840:	201c      	movs	r0, #28
 8004842:	f003 f856 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004846:	201c      	movs	r0, #28
 8004848:	f003 f86d 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800484c:	bf00      	nop
 800484e:	3728      	adds	r7, #40	; 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	48000400 	.word	0x48000400

0800485c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1a      	ldr	r2, [pc, #104]	; (80048d4 <HAL_TIM_Base_MspInit+0x78>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d114      	bne.n	8004898 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800486e:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	6613      	str	r3, [r2, #96]	; 0x60
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 800487c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	2019      	movs	r0, #25
 800488c:	f003 f831 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004890:	2019      	movs	r0, #25
 8004892:	f003 f848 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004896:	e018      	b.n	80048ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <HAL_TIM_Base_MspInit+0x80>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d113      	bne.n	80048ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 80048a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ac:	6613      	str	r3, [r2, #96]	; 0x60
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_TIM_Base_MspInit+0x7c>)
 80048b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	201a      	movs	r0, #26
 80048c0:	f003 f817 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80048c4:	201a      	movs	r0, #26
 80048c6:	f003 f82e 	bl	8007926 <HAL_NVIC_EnableIRQ>
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40014800 	.word	0x40014800

080048e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <HAL_TIM_MspPostInit+0xa8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d11c      	bne.n	800493c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004902:	4b22      	ldr	r3, [pc, #136]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	4a21      	ldr	r2, [pc, #132]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 8004908:	f043 0320 	orr.w	r3, r3, #32
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490e:	4b1f      	ldr	r3, [pc, #124]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 800491a:	2301      	movs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491e:	2302      	movs	r3, #2
 8004920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004926:	2300      	movs	r3, #0
 8004928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800492a:	2306      	movs	r3, #6
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	4619      	mov	r1, r3
 8004934:	4816      	ldr	r0, [pc, #88]	; (8004990 <HAL_TIM_MspPostInit+0xb0>)
 8004936:	f003 ff13 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800493a:	e020      	b.n	800497e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_TIM_MspPostInit+0xb4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d11b      	bne.n	800497e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_TIM_MspPostInit+0xac>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004962:	2302      	movs	r3, #2
 8004964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800496a:	2300      	movs	r3, #0
 800496c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800496e:	2302      	movs	r3, #2
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004972:	f107 0314 	add.w	r3, r7, #20
 8004976:	4619      	mov	r1, r3
 8004978:	4807      	ldr	r0, [pc, #28]	; (8004998 <HAL_TIM_MspPostInit+0xb8>)
 800497a:	f003 fef1 	bl	8008760 <HAL_GPIO_Init>
}
 800497e:	bf00      	nop
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40021000 	.word	0x40021000
 8004990:	48001400 	.word	0x48001400
 8004994:	40000800 	.word	0x40000800
 8004998:	48000400 	.word	0x48000400

0800499c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b09a      	sub	sp, #104	; 0x68
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	2244      	movs	r2, #68	; 0x44
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f011 f812 	bl	80159e6 <memset>
  if(huart->Instance==USART1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_UART_MspInit+0xa8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d137      	bne.n	8004a3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049cc:	2301      	movs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	4618      	mov	r0, r3
 80049da:	f006 fcd3 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80049e4:	f7fe ffec 	bl	80039c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <HAL_UART_MspInit+0xac>)
 80049ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_UART_MspInit+0xac>)
 80049ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f2:	6613      	str	r3, [r2, #96]	; 0x60
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_UART_MspInit+0xac>)
 80049f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_UART_MspInit+0xac>)
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <HAL_UART_MspInit+0xac>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_UART_MspInit+0xac>)
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a1e:	2312      	movs	r3, #18
 8004a20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a26:	2300      	movs	r3, #0
 8004a28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a32:	4619      	mov	r1, r3
 8004a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a38:	f003 fe92 	bl	8008760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a3c:	bf00      	nop
 8004a3e:	3768      	adds	r7, #104	; 0x68
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40013800 	.word	0x40013800
 8004a48:	40021000 	.word	0x40021000

08004a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a50:	e7fe      	b.n	8004a50 <NMI_Handler+0x4>

08004a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <HardFault_Handler+0x4>

08004a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <MemManage_Handler+0x4>

08004a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a62:	e7fe      	b.n	8004a62 <BusFault_Handler+0x4>

08004a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <UsageFault_Handler+0x4>

08004a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a98:	f000 fdb4 	bl	8005604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004aa4:	4802      	ldr	r0, [pc, #8]	; (8004ab0 <DMA1_Channel1_IRQHandler+0x10>)
 8004aa6:	f003 fa82 	bl	8007fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001814 	.word	0x20001814

08004ab4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <DMA1_Channel2_IRQHandler+0x10>)
 8004aba:	f003 fa78 	bl	8007fae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200016d8 	.word	0x200016d8

08004ac8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004acc:	4803      	ldr	r0, [pc, #12]	; (8004adc <ADC1_2_IRQHandler+0x14>)
 8004ace:	f001 fba7 	bl	8006220 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <ADC1_2_IRQHandler+0x18>)
 8004ad4:	f001 fba4 	bl	8006220 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20001600 	.word	0x20001600
 8004ae0:	2000166c 	.word	0x2000166c

08004ae4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <USB_LP_IRQHandler+0x10>)
 8004aea:	f004 fa25 	bl	8008f38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20002890 	.word	0x20002890

08004af8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8004afc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b00:	f003 ffe0 	bl	8008ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b0c:	4803      	ldr	r0, [pc, #12]	; (8004b1c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004b0e:	f007 ff7f 	bl	800ca10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004b12:	4803      	ldr	r0, [pc, #12]	; (8004b20 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004b14:	f007 ff7c 	bl	800ca10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004b18:	bf00      	nop
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20001874 	.word	0x20001874
 8004b20:	20001958 	.word	0x20001958

08004b24 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b28:	4803      	ldr	r0, [pc, #12]	; (8004b38 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8004b2a:	f007 ff71 	bl	800ca10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004b2e:	4803      	ldr	r0, [pc, #12]	; (8004b3c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004b30:	f007 ff6e 	bl	800ca10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004b34:	bf00      	nop
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20001874 	.word	0x20001874
 8004b3c:	200019a4 	.word	0x200019a4

08004b40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b44:	4802      	ldr	r0, [pc, #8]	; (8004b50 <TIM1_CC_IRQHandler+0x10>)
 8004b46:	f007 ff63 	bl	800ca10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20001874 	.word	0x20001874

08004b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b58:	4802      	ldr	r0, [pc, #8]	; (8004b64 <TIM2_IRQHandler+0x10>)
 8004b5a:	f007 ff59 	bl	800ca10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200018c0 	.word	0x200018c0

08004b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8004b6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b70:	f003 ffa8 	bl	8008ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return 1;
 8004b7c:	2301      	movs	r3, #1
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <_kill>:

int _kill(int pid, int sig)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b92:	f010 ff7b 	bl	8015a8c <__errno>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2216      	movs	r2, #22
 8004b9a:	601a      	str	r2, [r3, #0]
  return -1;
 8004b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <_exit>:

void _exit (int status)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ffe7 	bl	8004b88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bba:	e7fe      	b.n	8004bba <_exit+0x12>

08004bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e00a      	b.n	8004be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bce:	f3af 8000 	nop.w
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	60ba      	str	r2, [r7, #8]
 8004bda:	b2ca      	uxtb	r2, r1
 8004bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3301      	adds	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	dbf0      	blt.n	8004bce <_read+0x12>
  }

  return len;
 8004bec:	687b      	ldr	r3, [r7, #4]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e009      	b.n	8004c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	60ba      	str	r2, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	dbf1      	blt.n	8004c08 <_write+0x12>
  }
  return len;
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_close>:

int _close(int file)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c56:	605a      	str	r2, [r3, #4]
  return 0;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <_isatty>:

int _isatty(int file)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <_sbrk+0x5c>)
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <_sbrk+0x60>)
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <_sbrk+0x64>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <_sbrk+0x64>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <_sbrk+0x68>)
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <_sbrk+0x64>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d207      	bcs.n	8004cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cc8:	f010 fee0 	bl	8015a8c <__errno>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	220c      	movs	r2, #12
 8004cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	e009      	b.n	8004cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <_sbrk+0x64>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <_sbrk+0x64>)
 8004ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20008000 	.word	0x20008000
 8004cf8:	00000400 	.word	0x00000400
 8004cfc:	20001b24 	.word	0x20001b24
 8004d00:	20002ed8 	.word	0x20002ed8

08004d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <SystemInit+0x20>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	4a05      	ldr	r2, [pc, #20]	; (8004d24 <SystemInit+0x20>)
 8004d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d28:	480d      	ldr	r0, [pc, #52]	; (8004d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d2a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d2c:	f7ff ffea 	bl	8004d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d30:	480c      	ldr	r0, [pc, #48]	; (8004d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d32:	490d      	ldr	r1, [pc, #52]	; (8004d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d34:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <LoopForever+0xe>)
  movs r3, #0
 8004d36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004d38:	e002      	b.n	8004d40 <LoopCopyDataInit>

08004d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d3e:	3304      	adds	r3, #4

08004d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d44:	d3f9      	bcc.n	8004d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d48:	4c0a      	ldr	r4, [pc, #40]	; (8004d74 <LoopForever+0x16>)
  movs r3, #0
 8004d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d4c:	e001      	b.n	8004d52 <LoopFillZerobss>

08004d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d50:	3204      	adds	r2, #4

08004d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d54:	d3fb      	bcc.n	8004d4e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004d56:	f010 fe9f 	bl	8015a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d5a:	f7fd fae1 	bl	8002320 <main>

08004d5e <LoopForever>:

LoopForever:
    b LoopForever
 8004d5e:	e7fe      	b.n	8004d5e <LoopForever>
  ldr   r0, =_estack
 8004d60:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d68:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8004d6c:	0801b940 	.word	0x0801b940
  ldr r2, =_sbss
 8004d70:	200004e8 	.word	0x200004e8
  ldr r4, =_ebss
 8004d74:	20002ed8 	.word	0x20002ed8

08004d78 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d78:	e7fe      	b.n	8004d78 <COMP1_2_3_IRQHandler>
	...

08004d7c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <setSPI_Size+0x54>)
 8004d88:	f993 3000 	ldrsb.w	r3, [r3]
 8004d8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d017      	beq.n	8004dc4 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8004d94:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <setSPI_Size+0x58>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <setSPI_Size+0x58>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da2:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8004da4:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <setSPI_Size+0x54>)
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d104      	bne.n	8004dbc <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <setSPI_Size+0x58>)
 8004db4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8004db8:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8004dba:	e003      	b.n	8004dc4 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <setSPI_Size+0x58>)
 8004dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004dc2:	60da      	str	r2, [r3, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	2000016c 	.word	0x2000016c
 8004dd4:	200017b0 	.word	0x200017b0

08004dd8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	460a      	mov	r2, r1
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	4613      	mov	r3, r2
 8004de6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8004de8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ffc5 	bl	8004d7c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004df2:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <setDMAMemMode+0x10c>)
 8004df4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	79bb      	ldrb	r3, [r7, #6]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d106      	bne.n	8004e0e <setDMAMemMode+0x36>
 8004e00:	4b38      	ldr	r3, [pc, #224]	; (8004ee4 <setDMAMemMode+0x10c>)
 8004e02:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004e06:	461a      	mov	r2, r3
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d066      	beq.n	8004edc <setDMAMemMode+0x104>
    config.dma_sz =size;
 8004e0e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004e12:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <setDMAMemMode+0x10c>)
 8004e14:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8004e16:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004e1a:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <setDMAMemMode+0x10c>)
 8004e1c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004e1e:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8004e32:	bf00      	nop
 8004e34:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f7      	bne.n	8004e34 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10e      	bne.n	8004e68 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8004e4a:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8004e52:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e00d      	b.n	8004e84 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8004e68:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e82:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 8004e84:	79bb      	ldrb	r3, [r7, #6]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d116      	bne.n	8004eb8 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e92:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <setDMAMemMode+0x110>)
 8004e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e9c:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <setDMAMemMode+0x110>)
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <setDMAMemMode+0x110>)
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8004eb4:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8004eb6:	e011      	b.n	8004edc <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <setDMAMemMode+0x110>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ec0:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <setDMAMemMode+0x110>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <setDMAMemMode+0x110>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <setDMAMemMode+0x110>)
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8004eda:	601a      	str	r2, [r3, #0]
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2000016c 	.word	0x2000016c
 8004ee8:	200017b0 	.word	0x200017b0

08004eec <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7ff ff3f 	bl	8004d7c <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8004efe:	2200      	movs	r2, #0
 8004f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f04:	4815      	ldr	r0, [pc, #84]	; (8004f5c <LCD_WriteCommand+0x70>)
 8004f06:	f003 fdc5 	bl	8008a94 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f10:	4812      	ldr	r0, [pc, #72]	; (8004f5c <LCD_WriteCommand+0x70>)
 8004f12:	f003 fdbf 	bl	8008a94 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4810      	ldr	r0, [pc, #64]	; (8004f60 <LCD_WriteCommand+0x74>)
 8004f20:	f006 fccb 	bl	800b8ba <HAL_SPI_Transmit>
  if(argc){
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f30:	480a      	ldr	r0, [pc, #40]	; (8004f5c <LCD_WriteCommand+0x70>)
 8004f32:	f003 fdaf 	bl	8008a94 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1c59      	adds	r1, r3, #1
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f42:	4807      	ldr	r0, [pc, #28]	; (8004f60 <LCD_WriteCommand+0x74>)
 8004f44:	f006 fcb9 	bl	800b8ba <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <LCD_WriteCommand+0x70>)
 8004f50:	f003 fda0 	bl	8008a94 <HAL_GPIO_WritePin>
#endif
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	48000400 	.word	0x48000400
 8004f60:	200017b0 	.word	0x200017b0

08004f64 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f74:	4830      	ldr	r0, [pc, #192]	; (8005038 <LCD_WriteData+0xd4>)
 8004f76:	f003 fd8d 	bl	8008a94 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f80:	482d      	ldr	r0, [pc, #180]	; (8005038 <LCD_WriteData+0xd4>)
 8004f82:	f003 fd87 	bl	8008a94 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8004f86:	e049      	b.n	800501c <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bf28      	it	cs
 8004f92:	4613      	movcs	r3, r2
 8004f94:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d924      	bls.n	8004fe6 <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4826      	ldr	r0, [pc, #152]	; (800503c <LCD_WriteData+0xd8>)
 8004fa4:	f006 fdfe 	bl	800bba4 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8004fa8:	bf00      	nop
 8004faa:	4b24      	ldr	r3, [pc, #144]	; (800503c <LCD_WriteData+0xd8>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 f8ac 	bl	800810c <HAL_DMA_GetState>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d1f7      	bne.n	8004faa <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 8004fba:	4b21      	ldr	r3, [pc, #132]	; (8005040 <LCD_WriteData+0xdc>)
 8004fbc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d127      	bne.n	8005014 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <LCD_WriteData+0xdc>)
 8004fc6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d104      	bne.n	8004fd8 <LCD_WriteData+0x74>
          buff += chunk_size;
 8004fce:	89fb      	ldrh	r3, [r7, #14]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e01d      	b.n	8005014 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e016      	b.n	8005014 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8004fe6:	89fa      	ldrh	r2, [r7, #14]
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4813      	ldr	r0, [pc, #76]	; (800503c <LCD_WriteData+0xd8>)
 8004ff0:	f006 fc63 	bl	800b8ba <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <LCD_WriteData+0xdc>)
 8004ff6:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d104      	bne.n	8005008 <LCD_WriteData+0xa4>
        buff += chunk_size;
 8004ffe:	89fb      	ldrh	r3, [r7, #14]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	e005      	b.n	8005014 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	461a      	mov	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8005014:	89fb      	ldrh	r3, [r7, #14]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1b2      	bne.n	8004f88 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005022:	2201      	movs	r2, #1
 8005024:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005028:	4803      	ldr	r0, [pc, #12]	; (8005038 <LCD_WriteData+0xd4>)
 800502a:	f003 fd33 	bl	8008a94 <HAL_GPIO_WritePin>
#endif
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	48000400 	.word	0x48000400
 800503c:	200017b0 	.word	0x200017b0
 8005040:	2000016c 	.word	0x2000016c

08005044 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b08b      	sub	sp, #44	; 0x2c
 8005048:	af00      	add	r7, sp, #0
 800504a:	4604      	mov	r4, r0
 800504c:	4608      	mov	r0, r1
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	4623      	mov	r3, r4
 8005054:	80fb      	strh	r3, [r7, #6]
 8005056:	4603      	mov	r3, r0
 8005058:	80bb      	strh	r3, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	807b      	strh	r3, [r7, #2]
 800505e:	4613      	mov	r3, r2
 8005060:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800506a:	88bb      	ldrh	r3, [r7, #4]
 800506c:	847b      	strh	r3, [r7, #34]	; 0x22
 800506e:	883b      	ldrh	r3, [r7, #0]
 8005070:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8005072:	232a      	movs	r3, #42	; 0x2a
 8005074:	763b      	strb	r3, [r7, #24]
 8005076:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800507a:	121b      	asrs	r3, r3, #8
 800507c:	b21b      	sxth	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	767b      	strb	r3, [r7, #25]
 8005082:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005084:	b2db      	uxtb	r3, r3
 8005086:	76bb      	strb	r3, [r7, #26]
 8005088:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800508c:	121b      	asrs	r3, r3, #8
 800508e:	b21b      	sxth	r3, r3
 8005090:	b2db      	uxtb	r3, r3
 8005092:	76fb      	strb	r3, [r7, #27]
 8005094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005096:	b2db      	uxtb	r3, r3
 8005098:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800509a:	f107 0318 	add.w	r3, r7, #24
 800509e:	2104      	movs	r1, #4
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff23 	bl	8004eec <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80050a6:	232b      	movs	r3, #43	; 0x2b
 80050a8:	743b      	strb	r3, [r7, #16]
 80050aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80050ae:	121b      	asrs	r3, r3, #8
 80050b0:	b21b      	sxth	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	747b      	strb	r3, [r7, #17]
 80050b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	74bb      	strb	r3, [r7, #18]
 80050bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80050c0:	121b      	asrs	r3, r3, #8
 80050c2:	b21b      	sxth	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	74fb      	strb	r3, [r7, #19]
 80050c8:	8c3b      	ldrh	r3, [r7, #32]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	2104      	movs	r1, #4
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff09 	bl	8004eec <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80050da:	232c      	movs	r3, #44	; 0x2c
 80050dc:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ff01 	bl	8004eec <LCD_WriteCommand>
  }
}
 80050ea:	bf00      	nop
 80050ec:	372c      	adds	r7, #44	; 0x2c
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd90      	pop	{r4, r7, pc}
	...

080050f4 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	80fb      	strh	r3, [r7, #6]
 80050fe:	460b      	mov	r3, r1
 8005100:	80bb      	strh	r3, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8005106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db39      	blt.n	8005182 <LCD_DrawPixel+0x8e>
 800510e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005112:	2bef      	cmp	r3, #239	; 0xef
 8005114:	dc35      	bgt.n	8005182 <LCD_DrawPixel+0x8e>
 8005116:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	db31      	blt.n	8005182 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800511e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005122:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005126:	da2c      	bge.n	8005182 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	0a1b      	lsrs	r3, r3, #8
 800512c:	b29b      	uxth	r3, r3
 800512e:	b2db      	uxtb	r3, r3
 8005130:	733b      	strb	r3, [r7, #12]
 8005132:	887b      	ldrh	r3, [r7, #2]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8005138:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800513c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005140:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005144:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005148:	f7ff ff7c 	bl	8005044 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800514c:	2201      	movs	r2, #1
 800514e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005152:	480e      	ldr	r0, [pc, #56]	; (800518c <LCD_DrawPixel+0x98>)
 8005154:	f003 fc9e 	bl	8008a94 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800515e:	480b      	ldr	r0, [pc, #44]	; (800518c <LCD_DrawPixel+0x98>)
 8005160:	f003 fc98 	bl	8008a94 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8005164:	f107 010c 	add.w	r1, r7, #12
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	2202      	movs	r2, #2
 800516e:	4808      	ldr	r0, [pc, #32]	; (8005190 <LCD_DrawPixel+0x9c>)
 8005170:	f006 fba3 	bl	800b8ba <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005174:	2201      	movs	r2, #1
 8005176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800517a:	4804      	ldr	r0, [pc, #16]	; (800518c <LCD_DrawPixel+0x98>)
 800517c:	f003 fc8a 	bl	8008a94 <HAL_GPIO_WritePin>
 8005180:	e000      	b.n	8005184 <LCD_DrawPixel+0x90>
    return;
 8005182:	bf00      	nop
#endif
}
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	48000400 	.word	0x48000400
 8005190:	200017b0 	.word	0x200017b0

08005194 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8005194:	b580      	push	{r7, lr}
 8005196:	b094      	sub	sp, #80	; 0x50
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d905      	bls.n	80051b2 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80051a6:	1cbb      	adds	r3, r7, #2
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff feda 	bl	8004f64 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80051b0:	e026      	b.n	8005200 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80051b2:	2300      	movs	r3, #0
 80051b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b6:	e009      	b.n	80051cc <LCD_FillPixels+0x38>
      fill[t]=color;
 80051b8:	887a      	ldrh	r2, [r7, #2]
 80051ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	3350      	adds	r3, #80	; 0x50
 80051c0:	443b      	add	r3, r7
 80051c2:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	3301      	adds	r3, #1
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	bf28      	it	cs
 80051d2:	2320      	movcs	r3, #32
 80051d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d3ee      	bcc.n	80051b8 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 80051da:	e00e      	b.n	80051fa <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b20      	cmp	r3, #32
 80051e0:	bf28      	it	cs
 80051e2:	2320      	movcs	r3, #32
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff feb9 	bl	8004f64 <LCD_WriteData>
      pixels-=sz;
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ed      	bne.n	80051dc <LCD_FillPixels+0x48>
}
 8005200:	bf00      	nop
 8005202:	3750      	adds	r7, #80	; 0x50
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	461a      	mov	r2, r3
 8005216:	4623      	mov	r3, r4
 8005218:	80fb      	strh	r3, [r7, #6]
 800521a:	4603      	mov	r3, r0
 800521c:	80bb      	strh	r3, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	807b      	strh	r3, [r7, #2]
 8005222:	4613      	mov	r3, r2
 8005224:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8005226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d105      	bne.n	800523c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005230:	2100      	movs	r1, #0
 8005232:	2001      	movs	r0, #1
 8005234:	f7ff fdd0 	bl	8004dd8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	e014      	b.n	8005266 <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800523c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005240:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005244:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005248:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800524c:	f7ff fefa 	bl	8005044 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005250:	2101      	movs	r1, #1
 8005252:	2000      	movs	r0, #0
 8005254:	f7ff fdc0 	bl	8004dd8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8005258:	2201      	movs	r2, #1
 800525a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800525e:	4804      	ldr	r0, [pc, #16]	; (8005270 <LCD_FillArea+0x68>)
 8005260:	f003 fc18 	bl	8008a94 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <LCD_FillArea+0x6c>)
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	48000400 	.word	0x48000400
 8005274:	08005195 	.word	0x08005195

08005278 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	80fb      	strh	r3, [r7, #6]
 800528a:	4603      	mov	r3, r0
 800528c:	80bb      	strh	r3, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	807b      	strh	r3, [r7, #2]
 8005292:	4613      	mov	r3, r2
 8005294:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8005296:	887a      	ldrh	r2, [r7, #2]
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	3301      	adds	r3, #1
 800529e:	4619      	mov	r1, r3
 80052a0:	883a      	ldrh	r2, [r7, #0]
 80052a2:	88bb      	ldrh	r3, [r7, #4]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80052ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80052b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80052b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80052ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80052be:	f7ff fec1 	bl	8005044 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80052c2:	2101      	movs	r1, #1
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fd87 	bl	8004dd8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80052ca:	8c3b      	ldrh	r3, [r7, #32]
 80052cc:	4619      	mov	r1, r3
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f7ff ff60 	bl	8005194 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80052d4:	2100      	movs	r1, #0
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7ff fd7e 	bl	8004dd8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}

080052e6 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80052e6:	b590      	push	{r4, r7, lr}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	603a      	str	r2, [r7, #0]
 80052f0:	80fb      	strh	r3, [r7, #6]
 80052f2:	460b      	mov	r3, r1
 80052f4:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	889b      	ldrh	r3, [r3, #4]
 80052fa:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	88db      	ldrh	r3, [r3, #6]
 8005300:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2bef      	cmp	r3, #239	; 0xef
 8005306:	d839      	bhi.n	800537c <LCD_DrawImage+0x96>
 8005308:	88bb      	ldrh	r3, [r7, #4]
 800530a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800530e:	d235      	bcs.n	800537c <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	4413      	add	r3, r2
 8005316:	2bf0      	cmp	r3, #240	; 0xf0
 8005318:	dc32      	bgt.n	8005380 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800531a:	88ba      	ldrh	r2, [r7, #4]
 800531c:	89bb      	ldrh	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005324:	dc2e      	bgt.n	8005384 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	7a1b      	ldrb	r3, [r3, #8]
 800532a:	2b10      	cmp	r3, #16
 800532c:	d12c      	bne.n	8005388 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800532e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005332:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	4413      	add	r3, r2
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	b21c      	sxth	r4, r3
 8005344:	88ba      	ldrh	r2, [r7, #4]
 8005346:	89bb      	ldrh	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29b      	uxth	r3, r3
 8005350:	b21b      	sxth	r3, r3
 8005352:	4622      	mov	r2, r4
 8005354:	f7ff fe76 	bl	8005044 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005358:	2101      	movs	r1, #1
 800535a:	2001      	movs	r0, #1
 800535c:	f7ff fd3c 	bl	8004dd8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	89fb      	ldrh	r3, [r7, #14]
 8005366:	89ba      	ldrh	r2, [r7, #12]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	4619      	mov	r1, r3
 800536e:	f7ff fdf9 	bl	8004f64 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005372:	2100      	movs	r1, #0
 8005374:	2001      	movs	r0, #1
 8005376:	f7ff fd2f 	bl	8004dd8 <setDMAMemMode>
 800537a:	e006      	b.n	800538a <LCD_DrawImage+0xa4>
    return;
 800537c:	bf00      	nop
 800537e:	e004      	b.n	800538a <LCD_DrawImage+0xa4>
    return;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <LCD_DrawImage+0xa4>
    return;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <LCD_DrawImage+0xa4>
    return;
 8005388:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}

08005390 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	af02      	add	r7, sp, #8
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	80fb      	strh	r3, [r7, #6]
 80053a2:	4603      	mov	r3, r0
 80053a4:	80bb      	strh	r3, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	807b      	strh	r3, [r7, #2]
 80053aa:	4613      	mov	r3, r2
 80053ac:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	887b      	ldrh	r3, [r7, #2]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d10a      	bne.n	80053cc <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80053b6:	88ba      	ldrh	r2, [r7, #4]
 80053b8:	883b      	ldrh	r3, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d918      	bls.n	80053f0 <LCD_DrawLine+0x60>
 80053be:	88bb      	ldrh	r3, [r7, #4]
 80053c0:	81bb      	strh	r3, [r7, #12]
 80053c2:	883b      	ldrh	r3, [r7, #0]
 80053c4:	80bb      	strh	r3, [r7, #4]
 80053c6:	89bb      	ldrh	r3, [r7, #12]
 80053c8:	803b      	strh	r3, [r7, #0]
 80053ca:	e011      	b.n	80053f0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80053cc:	88ba      	ldrh	r2, [r7, #4]
 80053ce:	883b      	ldrh	r3, [r7, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d10a      	bne.n	80053ea <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d909      	bls.n	80053f0 <LCD_DrawLine+0x60>
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	81fb      	strh	r3, [r7, #14]
 80053e0:	887b      	ldrh	r3, [r7, #2]
 80053e2:	80fb      	strh	r3, [r7, #6]
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	807b      	strh	r3, [r7, #2]
 80053e8:	e002      	b.n	80053f0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	e009      	b.n	8005404 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80053f0:	883c      	ldrh	r4, [r7, #0]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	88b9      	ldrh	r1, [r7, #4]
 80053f6:	88f8      	ldrh	r0, [r7, #6]
 80053f8:	8c3b      	ldrh	r3, [r7, #32]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4623      	mov	r3, r4
 80053fe:	f7ff ff3b 	bl	8005278 <LCD_Fill>
  return UG_RESULT_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}

0800540c <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60ba      	str	r2, [r7, #8]
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	4603      	mov	r3, r0
 8005418:	81fb      	strh	r3, [r7, #14]
 800541a:	460b      	mov	r3, r1
 800541c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f00b fdc6 	bl	8010fb0 <UG_FontSelect>
  UG_SetForecolor(color);
 8005424:	8b3b      	ldrh	r3, [r7, #24]
 8005426:	4618      	mov	r0, r3
 8005428:	f00c f90e 	bl	8011648 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800542c:	8bbb      	ldrh	r3, [r7, #28]
 800542e:	4618      	mov	r0, r3
 8005430:	f00c f91c 	bl	801166c <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005434:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005438:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f00c f86a 	bl	8011518 <UG_PutString>
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <LCD_setPower+0x14>
 800545c:	2329      	movs	r3, #41	; 0x29
 800545e:	e000      	b.n	8005462 <LCD_setPower+0x16>
 8005460:	2328      	movs	r3, #40	; 0x28
 8005462:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005464:	f107 030c 	add.w	r3, r7, #12
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fd3e 	bl	8004eec <LCD_WriteCommand>
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <LCD_Update>:

static void LCD_Update(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800547c:	2100      	movs	r1, #0
 800547e:	2001      	movs	r0, #1
 8005480:	f7ff fcaa 	bl	8004dd8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}

08005488 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800548e:	2201      	movs	r2, #1
 8005490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005494:	482a      	ldr	r0, [pc, #168]	; (8005540 <LCD_init+0xb8>)
 8005496:	f003 fafd 	bl	8008a94 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 800549a:	2200      	movs	r2, #0
 800549c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054a0:	4827      	ldr	r0, [pc, #156]	; (8005540 <LCD_init+0xb8>)
 80054a2:	f003 faf7 	bl	8008a94 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f000 f8ca 	bl	8005640 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 80054ac:	2201      	movs	r2, #1
 80054ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054b2:	4823      	ldr	r0, [pc, #140]	; (8005540 <LCD_init+0xb8>)
 80054b4:	f003 faee 	bl	8008a94 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80054b8:	20c8      	movs	r0, #200	; 0xc8
 80054ba:	f000 f8c1 	bl	8005640 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80054be:	4921      	ldr	r1, [pc, #132]	; (8005544 <LCD_init+0xbc>)
 80054c0:	4821      	ldr	r0, [pc, #132]	; (8005548 <LCD_init+0xc0>)
 80054c2:	f00b fcdb 	bl	8010e7c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80054c6:	4921      	ldr	r1, [pc, #132]	; (800554c <LCD_init+0xc4>)
 80054c8:	2000      	movs	r0, #0
 80054ca:	f00d f965 	bl	8012798 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80054ce:	4920      	ldr	r1, [pc, #128]	; (8005550 <LCD_init+0xc8>)
 80054d0:	2001      	movs	r0, #1
 80054d2:	f00d f961 	bl	8012798 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80054d6:	491f      	ldr	r1, [pc, #124]	; (8005554 <LCD_init+0xcc>)
 80054d8:	2002      	movs	r0, #2
 80054da:	f00d f95d 	bl	8012798 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 80054de:	491e      	ldr	r1, [pc, #120]	; (8005558 <LCD_init+0xd0>)
 80054e0:	2003      	movs	r0, #3
 80054e2:	f00d f959 	bl	8012798 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f00c f8d2 	bl	8011690 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f00c f8e3 	bl	80116b8 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80054f2:	2300      	movs	r3, #0
 80054f4:	80fb      	strh	r3, [r7, #6]
 80054f6:	e013      	b.n	8005520 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80054f8:	88fb      	ldrh	r3, [r7, #6]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a17      	ldr	r2, [pc, #92]	; (800555c <LCD_init+0xd4>)
 80054fe:	441a      	add	r2, r3
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	4916      	ldr	r1, [pc, #88]	; (800555c <LCD_init+0xd4>)
 8005504:	5ccb      	ldrb	r3, [r1, r3]
 8005506:	4619      	mov	r1, r3
 8005508:	4610      	mov	r0, r2
 800550a:	f7ff fcef 	bl	8004eec <LCD_WriteCommand>
    i += init_cmd[i]+2;
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4a12      	ldr	r2, [pc, #72]	; (800555c <LCD_init+0xd4>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	b29a      	uxth	r2, r3
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	4413      	add	r3, r2
 800551a:	b29b      	uxth	r3, r3
 800551c:	3302      	adds	r3, #2
 800551e:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	2b4b      	cmp	r3, #75	; 0x4b
 8005524:	d9e8      	bls.n	80054f8 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005526:	2000      	movs	r0, #0
 8005528:	f00b fd52 	bl	8010fd0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800552c:	2001      	movs	r0, #1
 800552e:	f7ff ff8d 	bl	800544c <LCD_setPower>
  UG_Update();
 8005532:	f00d f953 	bl	80127dc <UG_Update>
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	48000400 	.word	0x48000400
 8005544:	20000170 	.word	0x20000170
 8005548:	20001b28 	.word	0x20001b28
 800554c:	08005391 	.word	0x08005391
 8005550:	08005279 	.word	0x08005279
 8005554:	08005209 	.word	0x08005209
 8005558:	080052e7 	.word	0x080052e7
 800555c:	08018068 	.word	0x08018068

08005560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800556a:	2003      	movs	r0, #3
 800556c:	f002 f9b6 	bl	80078dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005570:	200f      	movs	r0, #15
 8005572:	f000 f80d 	bl	8005590 <HAL_InitTick>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	71fb      	strb	r3, [r7, #7]
 8005580:	e001      	b.n	8005586 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005582:	f7fe fea9 	bl	80042d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005586:	79fb      	ldrb	r3, [r7, #7]

}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <HAL_InitTick+0x68>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d022      	beq.n	80055ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_InitTick+0x6c>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_InitTick+0x68>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	4618      	mov	r0, r3
 80055ba:	f002 f9c2 	bl	8007942 <HAL_SYSTICK_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10f      	bne.n	80055e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d809      	bhi.n	80055de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055ca:	2200      	movs	r2, #0
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	f04f 30ff 	mov.w	r0, #4294967295
 80055d2:	f002 f98e 	bl	80078f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_InitTick+0x70>)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	e007      	b.n	80055ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
 80055e2:	e004      	b.n	80055ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
 80055e8:	e001      	b.n	80055ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000180 	.word	0x20000180
 80055fc:	20000168 	.word	0x20000168
 8005600:	2000017c 	.word	0x2000017c

08005604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_IncTick+0x1c>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <HAL_IncTick+0x20>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4413      	add	r3, r2
 8005612:	4a03      	ldr	r2, [pc, #12]	; (8005620 <HAL_IncTick+0x1c>)
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20001b9c 	.word	0x20001b9c
 8005624:	20000180 	.word	0x20000180

08005628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return uwTick;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_GetTick+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20001b9c 	.word	0x20001b9c

08005640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005648:	f7ff ffee 	bl	8005628 <HAL_GetTick>
 800564c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d004      	beq.n	8005664 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_Delay+0x40>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005664:	bf00      	nop
 8005666:	f7ff ffdf 	bl	8005628 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d8f7      	bhi.n	8005666 <HAL_Delay+0x26>
  {
  }
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000180 	.word	0x20000180

08005684 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3360      	adds	r3, #96	; 0x60
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <LL_ADC_SetOffset+0x44>)
 800570e:	4013      	ands	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	4313      	orrs	r3, r2
 800571c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	03fff000 	.word	0x03fff000

08005734 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3360      	adds	r3, #96	; 0x60
 8005742:	461a      	mov	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3360      	adds	r3, #96	; 0x60
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005796:	b480      	push	{r7}
 8005798:	b087      	sub	sp, #28
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3360      	adds	r3, #96	; 0x60
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3360      	adds	r3, #96	; 0x60
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	615a      	str	r2, [r3, #20]
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3330      	adds	r3, #48	; 0x30
 800585e:	461a      	mov	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	4413      	add	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	211f      	movs	r1, #31
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	43db      	mvns	r3, r3
 8005880:	401a      	ands	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0e9b      	lsrs	r3, r3, #26
 8005886:	f003 011f 	and.w	r1, r3, #31
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	431a      	orrs	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800589a:	bf00      	nop
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3314      	adds	r3, #20
 80058dc:	461a      	mov	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	0e5b      	lsrs	r3, r3, #25
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	0d1b      	lsrs	r3, r3, #20
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2107      	movs	r1, #7
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	401a      	ands	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	0d1b      	lsrs	r3, r3, #20
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593c:	43db      	mvns	r3, r3
 800593e:	401a      	ands	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0318 	and.w	r3, r3, #24
 8005946:	4908      	ldr	r1, [pc, #32]	; (8005968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005948:	40d9      	lsrs	r1, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	400b      	ands	r3, r1
 800594e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005952:	431a      	orrs	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	0007ffff 	.word	0x0007ffff

0800596c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 031f 	and.w	r3, r3, #31
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80059b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6093      	str	r3, [r2, #8]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059dc:	d101      	bne.n	80059e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a2c:	d101      	bne.n	8005a32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a7c:	f043 0202 	orr.w	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <LL_ADC_IsEnabled+0x18>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <LL_ADC_IsEnabled+0x1a>
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d101      	bne.n	8005ace <LL_ADC_IsDisableOngoing+0x18>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <LL_ADC_IsDisableOngoing+0x1a>
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d101      	bne.n	8005b1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d101      	bne.n	8005b42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e167      	b.n	8005e3a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fe fbd1 	bl	8004320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff19 	bl	80059c8 <LL_ADC_IsDeepPowerDownEnabled>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d004      	beq.n	8005ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff feff 	bl	80059a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ff34 	bl	8005a18 <LL_ADC_IsInternalRegulatorEnabled>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d115      	bne.n	8005be2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff ff18 	bl	80059f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bc0:	4ba0      	ldr	r3, [pc, #640]	; (8005e44 <HAL_ADC_Init+0x2f4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	4aa0      	ldr	r2, [pc, #640]	; (8005e48 <HAL_ADC_Init+0x2f8>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	099b      	lsrs	r3, r3, #6
 8005bce:	3301      	adds	r3, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005bd4:	e002      	b.n	8005bdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f9      	bne.n	8005bd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff ff16 	bl	8005a18 <LL_ADC_IsInternalRegulatorEnabled>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10d      	bne.n	8005c0e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	f043 0210 	orr.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff ff76 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 8005c18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f040 8100 	bne.w	8005e28 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 80fc 	bne.w	8005e28 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c38:	f043 0202 	orr.w	r2, r3, #2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff23 	bl	8005a90 <LL_ADC_IsEnabled>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c54:	f7ff ff1c 	bl	8005a90 <LL_ADC_IsEnabled>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	487c      	ldr	r0, [pc, #496]	; (8005e4c <HAL_ADC_Init+0x2fc>)
 8005c5c:	f7ff ff18 	bl	8005a90 <LL_ADC_IsEnabled>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4323      	orrs	r3, r4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4878      	ldr	r0, [pc, #480]	; (8005e50 <HAL_ADC_Init+0x300>)
 8005c70:	f7ff fd08 	bl	8005684 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	7f5b      	ldrb	r3, [r3, #29]
 8005c78:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c7e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c84:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c8a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c92:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d106      	bne.n	8005cb0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	045b      	lsls	r3, r3, #17
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	4b60      	ldr	r3, [pc, #384]	; (8005e54 <HAL_ADC_Init+0x304>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	69b9      	ldr	r1, [r7, #24]
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ff15 	bl	8005b2a <LL_ADC_INJ_IsConversionOngoing>
 8005d00:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d16d      	bne.n	8005de4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d16a      	bne.n	8005de4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d12:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d1a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2a:	f023 0302 	bic.w	r3, r3, #2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	69b9      	ldr	r1, [r7, #24]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d017      	beq.n	8005d70 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6911      	ldr	r1, [r2, #16]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005d6e:	e013      	b.n	8005d98 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d118      	bne.n	8005dd4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005dac:	f023 0304 	bic.w	r3, r3, #4
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	611a      	str	r2, [r3, #16]
 8005dd2:	e007      	b.n	8005de4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d10c      	bne.n	8005e06 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f023 010f 	bic.w	r1, r3, #15
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	1e5a      	subs	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
 8005e04:	e007      	b.n	8005e16 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 020f 	bic.w	r2, r2, #15
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	f043 0201 	orr.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e26:	e007      	b.n	8005e38 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2c:	f043 0210 	orr.w	r2, r3, #16
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000168 	.word	0x20000168
 8005e48:	053e2d63 	.word	0x053e2d63
 8005e4c:	50000100 	.word	0x50000100
 8005e50:	50000300 	.word	0x50000300
 8005e54:	fff04007 	.word	0xfff04007

08005e58 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e60:	4893      	ldr	r0, [pc, #588]	; (80060b0 <HAL_ADC_Start_IT+0x258>)
 8005e62:	f7ff fd83 	bl	800596c <LL_ADC_GetMultimode>
 8005e66:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fe49 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 8113 	bne.w	80060a0 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_ADC_Start_IT+0x30>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e10e      	b.n	80060a6 <HAL_ADC_Start_IT+0x24e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fff7 	bl	8006e84 <ADC_Enable>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 80fa 	bne.w	8006096 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7e      	ldr	r2, [pc, #504]	; (80060b4 <HAL_ADC_Start_IT+0x25c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d002      	beq.n	8005ec6 <HAL_ADC_Start_IT+0x6e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	e001      	b.n	8005eca <HAL_ADC_Start_IT+0x72>
 8005ec6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6812      	ldr	r2, [r2, #0]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d002      	beq.n	8005ed8 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d105      	bne.n	8005ee4 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	f023 0206 	bic.w	r2, r3, #6
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60
 8005efc:	e002      	b.n	8005f04 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	221c      	movs	r2, #28
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 021c 	bic.w	r2, r2, #28
 8005f22:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d108      	bne.n	8005f3e <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0208 	orr.w	r2, r2, #8
 8005f3a:	605a      	str	r2, [r3, #4]
          break;
 8005f3c:	e008      	b.n	8005f50 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0204 	orr.w	r2, r2, #4
 8005f4c:	605a      	str	r2, [r3, #4]
          break;
 8005f4e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0210 	orr.w	r2, r2, #16
 8005f66:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a51      	ldr	r2, [pc, #324]	; (80060b4 <HAL_ADC_Start_IT+0x25c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d002      	beq.n	8005f78 <HAL_ADC_Start_IT+0x120>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	e001      	b.n	8005f7c <HAL_ADC_Start_IT+0x124>
 8005f78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d008      	beq.n	8005f96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d002      	beq.n	8005f96 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d13a      	bne.n	800600c <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d02d      	beq.n	8006000 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005fac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d110      	bne.n	8005fde <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0220 	bic.w	r2, r2, #32
 8005fca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fda:	605a      	str	r2, [r3, #4]
              break;
 8005fdc:	e010      	b.n	8006000 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0220 	orr.w	r2, r2, #32
 8005ffc:	605a      	str	r2, [r3, #4]
              break;
 8005ffe:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fd69 	bl	8005adc <LL_ADC_REG_StartConversion>
 800600a:	e04b      	b.n	80060a4 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006010:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_ADC_Start_IT+0x25c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d002      	beq.n	8006028 <HAL_ADC_Start_IT+0x1d0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	e001      	b.n	800602c <HAL_ADC_Start_IT+0x1d4>
 8006028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800602c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d034      	beq.n	80060a4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d110      	bne.n	8006074 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0220 	bic.w	r2, r2, #32
 8006060:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006070:	605a      	str	r2, [r3, #4]
              break;
 8006072:	e017      	b.n	80060a4 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006082:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0220 	orr.w	r2, r2, #32
 8006092:	605a      	str	r2, [r3, #4]
              break;
 8006094:	e006      	b.n	80060a4 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800609e:	e001      	b.n	80060a4 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	50000300 	.word	0x50000300
 80060b4:	50000100 	.word	0x50000100

080060b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060c4:	4851      	ldr	r0, [pc, #324]	; (800620c <HAL_ADC_Start_DMA+0x154>)
 80060c6:	f7ff fc51 	bl	800596c <LL_ADC_GetMultimode>
 80060ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fd17 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 808f 	bne.w	80061fc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_ADC_Start_DMA+0x34>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e08a      	b.n	8006202 <HAL_ADC_Start_DMA+0x14a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b05      	cmp	r3, #5
 80060fe:	d002      	beq.n	8006106 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b09      	cmp	r3, #9
 8006104:	d173      	bne.n	80061ee <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 febc 	bl	8006e84 <ADC_Enable>
 800610c:	4603      	mov	r3, r0
 800610e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006110:	7dfb      	ldrb	r3, [r7, #23]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d166      	bne.n	80061e4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a38      	ldr	r2, [pc, #224]	; (8006210 <HAL_ADC_Start_DMA+0x158>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d002      	beq.n	800613a <HAL_ADC_Start_DMA+0x82>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	e001      	b.n	800613e <HAL_ADC_Start_DMA+0x86>
 800613a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	4293      	cmp	r3, r2
 8006144:	d002      	beq.n	800614c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d105      	bne.n	8006158 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d006      	beq.n	8006172 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	f023 0206 	bic.w	r2, r3, #6
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	661a      	str	r2, [r3, #96]	; 0x60
 8006170:	e002      	b.n	8006178 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	4a25      	ldr	r2, [pc, #148]	; (8006214 <HAL_ADC_Start_DMA+0x15c>)
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006184:	4a24      	ldr	r2, [pc, #144]	; (8006218 <HAL_ADC_Start_DMA+0x160>)
 8006186:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	4a23      	ldr	r2, [pc, #140]	; (800621c <HAL_ADC_Start_DMA+0x164>)
 800618e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	221c      	movs	r2, #28
 8006196:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0210 	orr.w	r2, r2, #16
 80061ae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3340      	adds	r3, #64	; 0x40
 80061ca:	4619      	mov	r1, r3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f001 fe72 	bl	8007eb8 <HAL_DMA_Start_IT>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fc7d 	bl	8005adc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80061e2:	e00d      	b.n	8006200 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80061ec:	e008      	b.n	8006200 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80061fa:	e001      	b.n	8006200 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
 80061fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	50000300 	.word	0x50000300
 8006210:	50000100 	.word	0x50000100
 8006214:	0800704f 	.word	0x0800704f
 8006218:	08007127 	.word	0x08007127
 800621c:	08007143 	.word	0x08007143

08006220 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800623c:	4883      	ldr	r0, [pc, #524]	; (800644c <HAL_ADC_IRQHandler+0x22c>)
 800623e:	f7ff fb95 	bl	800596c <LL_ADC_GetMultimode>
 8006242:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d017      	beq.n	800627e <HAL_ADC_IRQHandler+0x5e>
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d012      	beq.n	800627e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006268:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 f9b5 	bl	80075e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2202      	movs	r2, #2
 800627c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <HAL_ADC_IRQHandler+0x72>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8085 	beq.w	80063a8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d07f      	beq.n	80063a8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff faaf 	bl	8005828 <LL_ADC_REG_IsTriggerSourceSWStart>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d064      	beq.n	800639a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a5e      	ldr	r2, [pc, #376]	; (8006450 <HAL_ADC_IRQHandler+0x230>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d002      	beq.n	80062e0 <HAL_ADC_IRQHandler+0xc0>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	e001      	b.n	80062e4 <HAL_ADC_IRQHandler+0xc4>
 80062e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d008      	beq.n	80062fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d002      	beq.n	80062fe <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	d104      	bne.n	8006308 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e00d      	b.n	8006324 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a50      	ldr	r2, [pc, #320]	; (8006450 <HAL_ADC_IRQHandler+0x230>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d002      	beq.n	8006318 <HAL_ADC_IRQHandler+0xf8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	e001      	b.n	800631c <HAL_ADC_IRQHandler+0xfc>
 8006318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800631c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d135      	bne.n	800639a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b08      	cmp	r3, #8
 800633a:	d12e      	bne.n	800639a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fbdf 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11a      	bne.n	8006382 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 020c 	bic.w	r2, r2, #12
 800635a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d112      	bne.n	800639a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f043 0201 	orr.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006380:	e00b      	b.n	800639a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	f043 0210 	orr.w	r2, r3, #16
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006392:	f043 0201 	orr.w	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f95a 	bl	8006654 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	220c      	movs	r2, #12
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_ADC_IRQHandler+0x19c>
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 809e 	beq.w	8006504 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8098 	beq.w	8006504 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fa58 	bl	80058a6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80063f6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fa13 	bl	8005828 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006402:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a11      	ldr	r2, [pc, #68]	; (8006450 <HAL_ADC_IRQHandler+0x230>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d002      	beq.n	8006414 <HAL_ADC_IRQHandler+0x1f4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	e001      	b.n	8006418 <HAL_ADC_IRQHandler+0x1f8>
 8006414:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	4293      	cmp	r3, r2
 800641e:	d008      	beq.n	8006432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b06      	cmp	r3, #6
 800642a:	d002      	beq.n	8006432 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2b07      	cmp	r3, #7
 8006430:	d104      	bne.n	800643c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	e011      	b.n	8006460 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a03      	ldr	r2, [pc, #12]	; (8006450 <HAL_ADC_IRQHandler+0x230>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d006      	beq.n	8006454 <HAL_ADC_IRQHandler+0x234>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	e005      	b.n	8006458 <HAL_ADC_IRQHandler+0x238>
 800644c:	50000300 	.word	0x50000300
 8006450:	50000100 	.word	0x50000100
 8006454:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006458:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d047      	beq.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_ADC_IRQHandler+0x260>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d03f      	beq.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800647c:	2b00      	cmp	r3, #0
 800647e:	d13a      	bne.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d133      	bne.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d12e      	bne.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fb44 	bl	8005b2a <LL_ADC_INJ_IsConversionOngoing>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064b6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d112      	bne.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	f043 0201 	orr.w	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	65da      	str	r2, [r3, #92]	; 0x5c
 80064dc:	e00b      	b.n	80064f6 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fb fedc 	bl	80022b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2260      	movs	r2, #96	; 0x60
 8006502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <HAL_ADC_IRQHandler+0x312>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f8a9 	bl	800667c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d012      	beq.n	8006562 <HAL_ADC_IRQHandler+0x342>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00d      	beq.n	8006562 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 f830 	bl	80075b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006560:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006568:	2b00      	cmp	r3, #0
 800656a:	d012      	beq.n	8006592 <HAL_ADC_IRQHandler+0x372>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 f822 	bl	80075cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006590:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	d036      	beq.n	800660a <HAL_ADC_IRQHandler+0x3ea>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d031      	beq.n	800660a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80065ae:	2301      	movs	r3, #1
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	e014      	b.n	80065de <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d008      	beq.n	80065cc <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80065ba:	4825      	ldr	r0, [pc, #148]	; (8006650 <HAL_ADC_IRQHandler+0x430>)
 80065bc:	f7ff f9e4 	bl	8005988 <LL_ADC_GetMultiDMATransfer>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80065c6:	2301      	movs	r3, #1
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ca:	e008      	b.n	80065de <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10e      	bne.n	8006602 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	f043 0202 	orr.w	r2, r3, #2
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f847 	bl	8006690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2210      	movs	r2, #16
 8006608:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006610:	2b00      	cmp	r3, #0
 8006612:	d018      	beq.n	8006646 <HAL_ADC_IRQHandler+0x426>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006622:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662e:	f043 0208 	orr.w	r2, r3, #8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800663e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 ffaf 	bl	80075a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006646:	bf00      	nop
 8006648:	3728      	adds	r7, #40	; 0x28
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	50000300 	.word	0x50000300

08006654 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b0b6      	sub	sp, #216	; 0xd8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x22>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e3c8      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x7b4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fa16 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 83ad 	bne.w	8006e3a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f7ff f8ae 	bl	800584e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fa04 	bl	8005b04 <LL_ADC_REG_IsConversionOngoing>
 80066fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fa10 	bl	8005b2a <LL_ADC_INJ_IsConversionOngoing>
 800670a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800670e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 81d9 	bne.w	8006aca <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006718:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 81d4 	bne.w	8006aca <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672a:	d10f      	bne.n	800674c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	4619      	mov	r1, r3
 8006738:	f7ff f8c8 	bl	80058cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff f85c 	bl	8005802 <LL_ADC_SetSamplingTimeCommonConfig>
 800674a:	e00e      	b.n	800676a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	461a      	mov	r2, r3
 800675a:	f7ff f8b7 	bl	80058cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff f84c 	bl	8005802 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b04      	cmp	r3, #4
 800678a:	d022      	beq.n	80067d2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6919      	ldr	r1, [r3, #16]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800679c:	f7fe ffa6 	bl	80056ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6919      	ldr	r1, [r3, #16]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	461a      	mov	r2, r3
 80067ae:	f7fe fff2 	bl	8005796 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d102      	bne.n	80067c8 <HAL_ADC_ConfigChannel+0x124>
 80067c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c6:	e000      	b.n	80067ca <HAL_ADC_ConfigChannel+0x126>
 80067c8:	2300      	movs	r3, #0
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7fe fffe 	bl	80057cc <LL_ADC_SetOffsetSaturation>
 80067d0:	e17b      	b.n	8006aca <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe ffab 	bl	8005734 <LL_ADC_GetOffsetChannel>
 80067de:	4603      	mov	r3, r0
 80067e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <HAL_ADC_ConfigChannel+0x15a>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe ffa0 	bl	8005734 <LL_ADC_GetOffsetChannel>
 80067f4:	4603      	mov	r3, r0
 80067f6:	0e9b      	lsrs	r3, r3, #26
 80067f8:	f003 021f 	and.w	r2, r3, #31
 80067fc:	e01e      	b.n	800683c <HAL_ADC_ConfigChannel+0x198>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe ff95 	bl	8005734 <LL_ADC_GetOffsetChannel>
 800680a:	4603      	mov	r3, r0
 800680c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800681c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006824:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800682c:	2320      	movs	r3, #32
 800682e:	e004      	b.n	800683a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006834:	fab3 f383 	clz	r3, r3
 8006838:	b2db      	uxtb	r3, r3
 800683a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <HAL_ADC_ConfigChannel+0x1b0>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	0e9b      	lsrs	r3, r3, #26
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	e018      	b.n	8006886 <HAL_ADC_ConfigChannel+0x1e2>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006860:	fa93 f3a3 	rbit	r3, r3
 8006864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006878:	2320      	movs	r3, #32
 800687a:	e004      	b.n	8006886 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800687c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006880:	fab3 f383 	clz	r3, r3
 8006884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006886:	429a      	cmp	r2, r3
 8006888:	d106      	bne.n	8006898 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe ff64 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe ff48 	bl	8005734 <LL_ADC_GetOffsetChannel>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x220>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2101      	movs	r1, #1
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe ff3d 	bl	8005734 <LL_ADC_GetOffsetChannel>
 80068ba:	4603      	mov	r3, r0
 80068bc:	0e9b      	lsrs	r3, r3, #26
 80068be:	f003 021f 	and.w	r2, r3, #31
 80068c2:	e01e      	b.n	8006902 <HAL_ADC_ConfigChannel+0x25e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2101      	movs	r1, #1
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe ff32 	bl	8005734 <LL_ADC_GetOffsetChannel>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068da:	fa93 f3a3 	rbit	r3, r3
 80068de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80068e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80068ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80068f2:	2320      	movs	r3, #32
 80068f4:	e004      	b.n	8006900 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80068f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800690a:	2b00      	cmp	r3, #0
 800690c:	d105      	bne.n	800691a <HAL_ADC_ConfigChannel+0x276>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	0e9b      	lsrs	r3, r3, #26
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	e018      	b.n	800694c <HAL_ADC_ConfigChannel+0x2a8>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006926:	fa93 f3a3 	rbit	r3, r3
 800692a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800692e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800693e:	2320      	movs	r3, #32
 8006940:	e004      	b.n	800694c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006946:	fab3 f383 	clz	r3, r3
 800694a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800694c:	429a      	cmp	r2, r3
 800694e:	d106      	bne.n	800695e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe ff01 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2102      	movs	r1, #2
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe fee5 	bl	8005734 <LL_ADC_GetOffsetChannel>
 800696a:	4603      	mov	r3, r0
 800696c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <HAL_ADC_ConfigChannel+0x2e6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2102      	movs	r1, #2
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe feda 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006980:	4603      	mov	r3, r0
 8006982:	0e9b      	lsrs	r3, r3, #26
 8006984:	f003 021f 	and.w	r2, r3, #31
 8006988:	e01e      	b.n	80069c8 <HAL_ADC_ConfigChannel+0x324>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2102      	movs	r1, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fecf 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006996:	4603      	mov	r3, r0
 8006998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069a0:	fa93 f3a3 	rbit	r3, r3
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80069a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80069b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80069b8:	2320      	movs	r3, #32
 80069ba:	e004      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80069bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <HAL_ADC_ConfigChannel+0x33c>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	0e9b      	lsrs	r3, r3, #26
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	e016      	b.n	8006a0e <HAL_ADC_ConfigChannel+0x36a>
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80069ec:	fa93 f3a3 	rbit	r3, r3
 80069f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80069f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80069f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006a00:	2320      	movs	r3, #32
 8006a02:	e004      	b.n	8006a0e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a08:	fab3 f383 	clz	r3, r3
 8006a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d106      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	2102      	movs	r1, #2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fea0 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2103      	movs	r1, #3
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe84 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <HAL_ADC_ConfigChannel+0x3a8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2103      	movs	r1, #3
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fe79 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006a42:	4603      	mov	r3, r0
 8006a44:	0e9b      	lsrs	r3, r3, #26
 8006a46:	f003 021f 	and.w	r2, r3, #31
 8006a4a:	e017      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x3d8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2103      	movs	r1, #3
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fe6e 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006a6e:	2320      	movs	r3, #32
 8006a70:	e003      	b.n	8006a7a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d105      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x3f0>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	0e9b      	lsrs	r3, r3, #26
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	e011      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x414>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a9c:	fa93 f3a3 	rbit	r3, r3
 8006aa0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006aac:	2320      	movs	r3, #32
 8006aae:	e003      	b.n	8006ab8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab2:	fab3 f383 	clz	r3, r3
 8006ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d106      	bne.n	8006aca <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2103      	movs	r1, #3
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fe4b 	bl	8005760 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe ffde 	bl	8005a90 <LL_ADC_IsEnabled>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 8140 	bne.w	8006d5c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f7fe ff1b 	bl	8005924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	4a8f      	ldr	r2, [pc, #572]	; (8006d30 <HAL_ADC_ConfigChannel+0x68c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f040 8131 	bne.w	8006d5c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_ADC_ConfigChannel+0x47e>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	0e9b      	lsrs	r3, r3, #26
 8006b10:	3301      	adds	r3, #1
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2b09      	cmp	r3, #9
 8006b18:	bf94      	ite	ls
 8006b1a:	2301      	movls	r3, #1
 8006b1c:	2300      	movhi	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	e019      	b.n	8006b56 <HAL_ADC_ConfigChannel+0x4b2>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b2a:	fa93 f3a3 	rbit	r3, r3
 8006b2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	e003      	b.n	8006b46 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b40:	fab3 f383 	clz	r3, r3
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3301      	adds	r3, #1
 8006b48:	f003 031f 	and.w	r3, r3, #31
 8006b4c:	2b09      	cmp	r3, #9
 8006b4e:	bf94      	ite	ls
 8006b50:	2301      	movls	r3, #1
 8006b52:	2300      	movhi	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d079      	beq.n	8006c4e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d107      	bne.n	8006b76 <HAL_ADC_ConfigChannel+0x4d2>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	0e9b      	lsrs	r3, r3, #26
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	069b      	lsls	r3, r3, #26
 8006b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b74:	e015      	b.n	8006ba2 <HAL_ADC_ConfigChannel+0x4fe>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b7e:	fa93 f3a3 	rbit	r3, r3
 8006b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006b8e:	2320      	movs	r3, #32
 8006b90:	e003      	b.n	8006b9a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b94:	fab3 f383 	clz	r3, r3
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	069b      	lsls	r3, r3, #26
 8006b9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_ADC_ConfigChannel+0x51e>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	0e9b      	lsrs	r3, r3, #26
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	e017      	b.n	8006bf2 <HAL_ADC_ConfigChannel+0x54e>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bca:	fa93 f3a3 	rbit	r3, r3
 8006bce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006bda:	2320      	movs	r3, #32
 8006bdc:	e003      	b.n	8006be6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be0:	fab3 f383 	clz	r3, r3
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	3301      	adds	r3, #1
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2101      	movs	r1, #1
 8006bee:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf2:	ea42 0103 	orr.w	r1, r2, r3
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_ADC_ConfigChannel+0x574>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	0e9b      	lsrs	r3, r3, #26
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f003 021f 	and.w	r2, r3, #31
 8006c0e:	4613      	mov	r3, r2
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4413      	add	r3, r2
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	e018      	b.n	8006c4a <HAL_ADC_ConfigChannel+0x5a6>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	fa93 f3a3 	rbit	r3, r3
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006c30:	2320      	movs	r3, #32
 8006c32:	e003      	b.n	8006c3c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c36:	fab3 f383 	clz	r3, r3
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	f003 021f 	and.w	r2, r3, #31
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	e081      	b.n	8006d52 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d107      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x5c6>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	0e9b      	lsrs	r3, r3, #26
 8006c60:	3301      	adds	r3, #1
 8006c62:	069b      	lsls	r3, r3, #26
 8006c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c68:	e015      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x5f2>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	fa93 f3a3 	rbit	r3, r3
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006c82:	2320      	movs	r3, #32
 8006c84:	e003      	b.n	8006c8e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	fab3 f383 	clz	r3, r3
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	3301      	adds	r3, #1
 8006c90:	069b      	lsls	r3, r3, #26
 8006c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HAL_ADC_ConfigChannel+0x612>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	0e9b      	lsrs	r3, r3, #26
 8006ca8:	3301      	adds	r3, #1
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	2101      	movs	r1, #1
 8006cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb4:	e017      	b.n	8006ce6 <HAL_ADC_ConfigChannel+0x642>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	fa93 f3a3 	rbit	r3, r3
 8006cc2:	61fb      	str	r3, [r7, #28]
  return result;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006cce:	2320      	movs	r3, #32
 8006cd0:	e003      	b.n	8006cda <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	fab3 f383 	clz	r3, r3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	3301      	adds	r3, #1
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce6:	ea42 0103 	orr.w	r1, r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <HAL_ADC_ConfigChannel+0x66e>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	0e9b      	lsrs	r3, r3, #26
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f003 021f 	and.w	r2, r3, #31
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	3b1e      	subs	r3, #30
 8006d0a:	051b      	lsls	r3, r3, #20
 8006d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006d10:	e01e      	b.n	8006d50 <HAL_ADC_ConfigChannel+0x6ac>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	fa93 f3a3 	rbit	r3, r3
 8006d1e:	613b      	str	r3, [r7, #16]
  return result;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006d2a:	2320      	movs	r3, #32
 8006d2c:	e006      	b.n	8006d3c <HAL_ADC_ConfigChannel+0x698>
 8006d2e:	bf00      	nop
 8006d30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	fab3 f383 	clz	r3, r3
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f003 021f 	and.w	r2, r3, #31
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	3b1e      	subs	r3, #30
 8006d4a:	051b      	lsls	r3, r3, #20
 8006d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d56:	4619      	mov	r1, r3
 8006d58:	f7fe fdb8 	bl	80058cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	4b3f      	ldr	r3, [pc, #252]	; (8006e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d071      	beq.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d68:	483e      	ldr	r0, [pc, #248]	; (8006e64 <HAL_ADC_ConfigChannel+0x7c0>)
 8006d6a:	f7fe fcb1 	bl	80056d0 <LL_ADC_GetCommonPathInternalCh>
 8006d6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_ADC_ConfigChannel+0x7c4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_ADC_ConfigChannel+0x6e2>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3a      	ldr	r2, [pc, #232]	; (8006e6c <HAL_ADC_ConfigChannel+0x7c8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d127      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d121      	bne.n	8006dd6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d9a:	d157      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006da0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006da4:	4619      	mov	r1, r3
 8006da6:	482f      	ldr	r0, [pc, #188]	; (8006e64 <HAL_ADC_ConfigChannel+0x7c0>)
 8006da8:	f7fe fc7f 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006dac:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <HAL_ADC_ConfigChannel+0x7cc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	099b      	lsrs	r3, r3, #6
 8006db2:	4a30      	ldr	r2, [pc, #192]	; (8006e74 <HAL_ADC_ConfigChannel+0x7d0>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	099b      	lsrs	r3, r3, #6
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006dc6:	e002      	b.n	8006dce <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f9      	bne.n	8006dc8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dd4:	e03a      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a27      	ldr	r2, [pc, #156]	; (8006e78 <HAL_ADC_ConfigChannel+0x7d4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d113      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10d      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02a      	beq.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4818      	ldr	r0, [pc, #96]	; (8006e64 <HAL_ADC_ConfigChannel+0x7c0>)
 8006e02:	f7fe fc52 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e06:	e021      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d11c      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d116      	bne.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d011      	beq.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e30:	4619      	mov	r1, r3
 8006e32:	480c      	ldr	r0, [pc, #48]	; (8006e64 <HAL_ADC_ConfigChannel+0x7c0>)
 8006e34:	f7fe fc39 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
 8006e38:	e008      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006e54:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	37d8      	adds	r7, #216	; 0xd8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	80080000 	.word	0x80080000
 8006e64:	50000300 	.word	0x50000300
 8006e68:	c3210000 	.word	0xc3210000
 8006e6c:	90c00010 	.word	0x90c00010
 8006e70:	20000168 	.word	0x20000168
 8006e74:	053e2d63 	.word	0x053e2d63
 8006e78:	c7520000 	.word	0xc7520000
 8006e7c:	50000100 	.word	0x50000100
 8006e80:	cb840000 	.word	0xcb840000

08006e84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fdfb 	bl	8005a90 <LL_ADC_IsEnabled>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d169      	bne.n	8006f74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <ADC_Enable+0xfc>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00d      	beq.n	8006eca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f043 0210 	orr.w	r2, r3, #16
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e055      	b.n	8006f76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fdb6 	bl	8005a40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006ed4:	482b      	ldr	r0, [pc, #172]	; (8006f84 <ADC_Enable+0x100>)
 8006ed6:	f7fe fbfb 	bl	80056d0 <LL_ADC_GetCommonPathInternalCh>
 8006eda:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ee4:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <ADC_Enable+0x104>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	099b      	lsrs	r3, r3, #6
 8006eea:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <ADC_Enable+0x108>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	099b      	lsrs	r3, r3, #6
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006efe:	e002      	b.n	8006f06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f9      	bne.n	8006f00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006f0c:	f7fe fb8c 	bl	8005628 <HAL_GetTick>
 8006f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f12:	e028      	b.n	8006f66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fdb9 	bl	8005a90 <LL_ADC_IsEnabled>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fd89 	bl	8005a40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006f2e:	f7fe fb7b 	bl	8005628 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d914      	bls.n	8006f66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d00d      	beq.n	8006f66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	f043 0210 	orr.w	r2, r3, #16
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e007      	b.n	8006f76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d1cf      	bne.n	8006f14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	8000003f 	.word	0x8000003f
 8006f84:	50000300 	.word	0x50000300
 8006f88:	20000168 	.word	0x20000168
 8006f8c:	053e2d63 	.word	0x053e2d63

08006f90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fd8a 	bl	8005ab6 <LL_ADC_IsDisableOngoing>
 8006fa2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fd71 	bl	8005a90 <LL_ADC_IsEnabled>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d047      	beq.n	8007044 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d144      	bne.n	8007044 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 030d 	and.w	r3, r3, #13
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d10c      	bne.n	8006fe2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fd4b 	bl	8005a68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fda:	f7fe fb25 	bl	8005628 <HAL_GetTick>
 8006fde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fe0:	e029      	b.n	8007036 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe6:	f043 0210 	orr.w	r2, r3, #16
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff2:	f043 0201 	orr.w	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e023      	b.n	8007046 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ffe:	f7fe fb13 	bl	8005628 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d914      	bls.n	8007036 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701e:	f043 0210 	orr.w	r2, r3, #16
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800702a:	f043 0201 	orr.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e007      	b.n	8007046 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1dc      	bne.n	8006ffe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007060:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007064:	2b00      	cmp	r3, #0
 8007066:	d14b      	bne.n	8007100 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d021      	beq.n	80070c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fbce 	bl	8005828 <LL_ADC_REG_IsTriggerSourceSWStart>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d032      	beq.n	80070f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d12b      	bne.n	80070f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11f      	bne.n	80070f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80070c4:	e018      	b.n	80070f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d111      	bne.n	80070f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f0:	f043 0201 	orr.w	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff faab 	bl	8006654 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070fe:	e00e      	b.n	800711e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fabf 	bl	8006690 <HAL_ADC_ErrorCallback>
}
 8007112:	e004      	b.n	800711e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff fa97 	bl	8006668 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	f043 0204 	orr.w	r2, r3, #4
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff fa91 	bl	8006690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <LL_ADC_INJ_GetTrigAuto>:
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_ADC_GetMultimode>:
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 031f 	and.w	r3, r3, #31
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_ADC_IsEnabled>:
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <LL_ADC_IsEnabled+0x18>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <LL_ADC_IsEnabled+0x1a>
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <LL_ADC_StartCalibration>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80071e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	609a      	str	r2, [r3, #8]
}
 80071fa:	bf00      	nop
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <LL_ADC_IsCalibrationOnGoing>:
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721a:	d101      	bne.n	8007220 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <LL_ADC_REG_IsConversionOngoing>:
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d101      	bne.n	8007246 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_ADC_INJ_StartConversion>:
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007268:	f043 0208 	orr.w	r2, r3, #8
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <LL_ADC_INJ_IsConversionOngoing>:
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d101      	bne.n	8007294 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80072bc:	2302      	movs	r3, #2
 80072be:	e04d      	b.n	800735c <HAL_ADCEx_Calibration_Start+0xb8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff fe61 	bl	8006f90 <ADC_Disable>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d136      	bne.n	8007346 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072e0:	f023 0302 	bic.w	r3, r3, #2
 80072e4:	f043 0202 	orr.w	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ff6e 	bl	80071d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80072f8:	e014      	b.n	8007324 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a18      	ldr	r2, [pc, #96]	; (8007364 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d90d      	bls.n	8007324 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730c:	f023 0312 	bic.w	r3, r3, #18
 8007310:	f043 0210 	orr.w	r2, r3, #16
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e01b      	b.n	800735c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ff6c 	bl	8007206 <LL_ADC_IsCalibrationOnGoing>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e2      	bne.n	80072fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	f043 0201 	orr.w	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	65da      	str	r2, [r3, #92]	; 0x5c
 8007344:	e005      	b.n	8007352 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f043 0210 	orr.w	r2, r3, #16
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	0004de01 	.word	0x0004de01

08007368 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007370:	486e      	ldr	r0, [pc, #440]	; (800752c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8007372:	f7ff ff0e 	bl	8007192 <LL_ADC_GetMultimode>
 8007376:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff ff7d 	bl	800727c <LL_ADC_INJ_IsConversionOngoing>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
 800738a:	e0ca      	b.n	8007522 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007396:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d107      	bne.n	80073bc <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0b2      	b.n	8007522 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_ADCEx_InjectedStart_IT+0x62>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0ab      	b.n	8007522 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fd56 	bl	8006e84 <ADC_Enable>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f040 809a 	bne.w	8007518 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d006      	beq.n	80073fe <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f4:	f023 0208 	bic.w	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	661a      	str	r2, [r3, #96]	; 0x60
 80073fc:	e002      	b.n	8007404 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a44      	ldr	r2, [pc, #272]	; (8007530 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d002      	beq.n	8007428 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	e001      	b.n	800742c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8007428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	4293      	cmp	r3, r2
 8007432:	d002      	beq.n	800743a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800743e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2260      	movs	r2, #96	; 0x60
 800744c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007472:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d110      	bne.n	800749e <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0220 	bic.w	r2, r2, #32
 800748a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749a:	605a      	str	r2, [r3, #4]
          break;
 800749c:	e010      	b.n	80074c0 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ac:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0220 	orr.w	r2, r2, #32
 80074bc:	605a      	str	r2, [r3, #4]
          break;
 80074be:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1a      	ldr	r2, [pc, #104]	; (8007530 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d002      	beq.n	80074d0 <HAL_ADCEx_InjectedStart_IT+0x168>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	e001      	b.n	80074d4 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80074d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d008      	beq.n	80074ee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d002      	beq.n	80074ee <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b07      	cmp	r3, #7
 80074ec:	d10d      	bne.n	800750a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fe3f 	bl	8007176 <LL_ADC_INJ_GetTrigAuto>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d110      	bne.n	8007520 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fea6 	bl	8007254 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007508:	e00a      	b.n	8007520 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	65da      	str	r2, [r3, #92]	; 0x5c
 8007516:	e003      	b.n	8007520 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8007520:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	50000300 	.word	0x50000300
 8007530:	50000100 	.word	0x50000100

08007534 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	f240 321b 	movw	r2, #795	; 0x31b
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_ADCEx_InjectedGetValue+0x32>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 800754e:	d21c      	bcs.n	800758a <HAL_ADCEx_InjectedGetValue+0x56>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	f240 120f 	movw	r2, #271	; 0x10f
 8007556:	4293      	cmp	r3, r2
 8007558:	d011      	beq.n	800757e <HAL_ADCEx_InjectedGetValue+0x4a>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f240 2215 	movw	r2, #533	; 0x215
 8007560:	4293      	cmp	r3, r2
 8007562:	d006      	beq.n	8007572 <HAL_ADCEx_InjectedGetValue+0x3e>
 8007564:	e011      	b.n	800758a <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756e:	60fb      	str	r3, [r7, #12]
      break;
 8007570:	e011      	b.n	8007596 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757a:	60fb      	str	r3, [r7, #12]
      break;
 800757c:	e00b      	b.n	8007596 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007586:	60fb      	str	r3, [r7, #12]
      break;
 8007588:	e005      	b.n	8007596 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007592:	60fb      	str	r3, [r7, #12]
      break;
 8007594:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b0a1      	sub	sp, #132	; 0x84
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800760e:	2302      	movs	r3, #2
 8007610:	e08b      	b.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800761a:	2300      	movs	r3, #0
 800761c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800761e:	2300      	movs	r3, #0
 8007620:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762a:	d102      	bne.n	8007632 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800762c:	4b41      	ldr	r3, [pc, #260]	; (8007734 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	e001      	b.n	8007636 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e06a      	b.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fde9 	bl	800722e <LL_ADC_REG_IsConversionOngoing>
 800765c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fde3 	bl	800722e <LL_ADC_REG_IsConversionOngoing>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d14c      	bne.n	8007708 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800766e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007670:	2b00      	cmp	r3, #0
 8007672:	d149      	bne.n	8007708 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007674:	4b30      	ldr	r3, [pc, #192]	; (8007738 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8007676:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d028      	beq.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	6859      	ldr	r1, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007692:	035b      	lsls	r3, r3, #13
 8007694:	430b      	orrs	r3, r1
 8007696:	431a      	orrs	r2, r3
 8007698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800769a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800769c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80076a0:	f7ff fd85 	bl	80071ae <LL_ADC_IsEnabled>
 80076a4:	4604      	mov	r4, r0
 80076a6:	4823      	ldr	r0, [pc, #140]	; (8007734 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80076a8:	f7ff fd81 	bl	80071ae <LL_ADC_IsEnabled>
 80076ac:	4603      	mov	r3, r0
 80076ae:	4323      	orrs	r3, r4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d133      	bne.n	800771c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80076b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80076bc:	f023 030f 	bic.w	r3, r3, #15
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	6811      	ldr	r1, [r2, #0]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	6892      	ldr	r2, [r2, #8]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	431a      	orrs	r2, r3
 80076cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80076d0:	e024      	b.n	800771c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80076d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80076e2:	f7ff fd64 	bl	80071ae <LL_ADC_IsEnabled>
 80076e6:	4604      	mov	r4, r0
 80076e8:	4812      	ldr	r0, [pc, #72]	; (8007734 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80076ea:	f7ff fd60 	bl	80071ae <LL_ADC_IsEnabled>
 80076ee:	4603      	mov	r3, r0
 80076f0:	4323      	orrs	r3, r4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d112      	bne.n	800771c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80076f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80076fe:	f023 030f 	bic.w	r3, r3, #15
 8007702:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007704:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007706:	e009      	b.n	800771c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800771a:	e000      	b.n	800771e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800771c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007726:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800772a:	4618      	mov	r0, r3
 800772c:	3784      	adds	r7, #132	; 0x84
 800772e:	46bd      	mov	sp, r7
 8007730:	bd90      	pop	{r4, r7, pc}
 8007732:	bf00      	nop
 8007734:	50000100 	.word	0x50000100
 8007738:	50000300 	.word	0x50000300

0800773c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <__NVIC_SetPriorityGrouping+0x44>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007758:	4013      	ands	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800776c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800776e:	4a04      	ldr	r2, [pc, #16]	; (8007780 <__NVIC_SetPriorityGrouping+0x44>)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	60d3      	str	r3, [r2, #12]
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	e000ed00 	.word	0xe000ed00

08007784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <__NVIC_GetPriorityGrouping+0x18>)
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	0a1b      	lsrs	r3, r3, #8
 800778e:	f003 0307 	and.w	r3, r3, #7
}
 8007792:	4618      	mov	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	e000ed00 	.word	0xe000ed00

080077a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	db0b      	blt.n	80077ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	f003 021f 	and.w	r2, r3, #31
 80077b8:	4907      	ldr	r1, [pc, #28]	; (80077d8 <__NVIC_EnableIRQ+0x38>)
 80077ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	2001      	movs	r0, #1
 80077c2:	fa00 f202 	lsl.w	r2, r0, r2
 80077c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	e000e100 	.word	0xe000e100

080077dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	db0a      	blt.n	8007806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	490c      	ldr	r1, [pc, #48]	; (8007828 <__NVIC_SetPriority+0x4c>)
 80077f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077fa:	0112      	lsls	r2, r2, #4
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	440b      	add	r3, r1
 8007800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007804:	e00a      	b.n	800781c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	4908      	ldr	r1, [pc, #32]	; (800782c <__NVIC_SetPriority+0x50>)
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	3b04      	subs	r3, #4
 8007814:	0112      	lsls	r2, r2, #4
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	440b      	add	r3, r1
 800781a:	761a      	strb	r2, [r3, #24]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	e000e100 	.word	0xe000e100
 800782c:	e000ed00 	.word	0xe000ed00

08007830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f1c3 0307 	rsb	r3, r3, #7
 800784a:	2b04      	cmp	r3, #4
 800784c:	bf28      	it	cs
 800784e:	2304      	movcs	r3, #4
 8007850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	3304      	adds	r3, #4
 8007856:	2b06      	cmp	r3, #6
 8007858:	d902      	bls.n	8007860 <NVIC_EncodePriority+0x30>
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3b03      	subs	r3, #3
 800785e:	e000      	b.n	8007862 <NVIC_EncodePriority+0x32>
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007864:	f04f 32ff 	mov.w	r2, #4294967295
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	43da      	mvns	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	401a      	ands	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007878:	f04f 31ff 	mov.w	r1, #4294967295
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	43d9      	mvns	r1, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007888:	4313      	orrs	r3, r2
         );
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	; 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078a8:	d301      	bcc.n	80078ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078aa:	2301      	movs	r3, #1
 80078ac:	e00f      	b.n	80078ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078ae:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <SysTick_Config+0x40>)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078b6:	210f      	movs	r1, #15
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	f7ff ff8e 	bl	80077dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <SysTick_Config+0x40>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078c6:	4b04      	ldr	r3, [pc, #16]	; (80078d8 <SysTick_Config+0x40>)
 80078c8:	2207      	movs	r2, #7
 80078ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	e000e010 	.word	0xe000e010

080078dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ff29 	bl	800773c <__NVIC_SetPriorityGrouping>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	4603      	mov	r3, r0
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007900:	f7ff ff40 	bl	8007784 <__NVIC_GetPriorityGrouping>
 8007904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	6978      	ldr	r0, [r7, #20]
 800790c:	f7ff ff90 	bl	8007830 <NVIC_EncodePriority>
 8007910:	4602      	mov	r2, r0
 8007912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff ff5f 	bl	80077dc <__NVIC_SetPriority>
}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	4603      	mov	r3, r0
 800792e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff ff33 	bl	80077a0 <__NVIC_EnableIRQ>
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff ffa4 	bl	8007898 <SysTick_Config>
 8007950:	4603      	mov	r3, r0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e054      	b.n	8007a18 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7f5b      	ldrb	r3, [r3, #29]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fc fdb2 	bl	80044e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	791b      	ldrb	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10c      	bne.n	80079ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a22      	ldr	r2, [pc, #136]	; (8007a20 <HAL_CRC_Init+0xc4>)
 8007998:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0218 	bic.w	r2, r2, #24
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	e00c      	b.n	80079c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	461a      	mov	r2, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f948 	bl	8007c4c <HAL_CRCEx_Polynomial_Set>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e028      	b.n	8007a18 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	795b      	ldrb	r3, [r3, #5]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d105      	bne.n	80079da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	611a      	str	r2, [r3, #16]
 80079d8:	e004      	b.n	80079e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6912      	ldr	r2, [r2, #16]
 80079e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695a      	ldr	r2, [r3, #20]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	04c11db7 	.word	0x04c11db7

08007a24 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007a30:	2300      	movs	r3, #0
 8007a32:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2202      	movs	r2, #2
 8007a38:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0201 	orr.w	r2, r2, #1
 8007a48:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d006      	beq.n	8007a60 <HAL_CRC_Calculate+0x3c>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d829      	bhi.n	8007aaa <HAL_CRC_Calculate+0x86>
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d019      	beq.n	8007a8e <HAL_CRC_Calculate+0x6a>
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d01e      	beq.n	8007a9c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007a5e:	e024      	b.n	8007aaa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e00a      	b.n	8007a7c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	441a      	add	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d3f0      	bcc.n	8007a66 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	613b      	str	r3, [r7, #16]
      break;
 8007a8c:	e00e      	b.n	8007aac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f812 	bl	8007abc <CRC_Handle_8>
 8007a98:	6138      	str	r0, [r7, #16]
      break;
 8007a9a:	e007      	b.n	8007aac <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f899 	bl	8007bd8 <CRC_Handle_16>
 8007aa6:	6138      	str	r0, [r7, #16]
      break;
 8007aa8:	e000      	b.n	8007aac <HAL_CRC_Calculate+0x88>
      break;
 8007aaa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007ab2:	693b      	ldr	r3, [r7, #16]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b089      	sub	sp, #36	; 0x24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e023      	b.n	8007b16 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	3301      	adds	r3, #1
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	440b      	add	r3, r1
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007ae8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	3302      	adds	r3, #2
 8007af0:	68b9      	ldr	r1, [r7, #8]
 8007af2:	440b      	add	r3, r1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007af8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	3303      	adds	r3, #3
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	440b      	add	r3, r1
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007b0c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	089b      	lsrs	r3, r3, #2
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3d6      	bcc.n	8007ace <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d04d      	beq.n	8007bc6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f003 0303 	and.w	r3, r3, #3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d107      	bne.n	8007b44 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d116      	bne.n	8007b7c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4413      	add	r3, r2
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	b21a      	sxth	r2, r3
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3301      	adds	r3, #1
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	440b      	add	r3, r1
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b21b      	sxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	8b7a      	ldrh	r2, [r7, #26]
 8007b7a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d11f      	bne.n	8007bc6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b21a      	sxth	r2, r3
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	3301      	adds	r3, #1
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	440b      	add	r3, r1
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b21b      	sxth	r3, r3
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	b21b      	sxth	r3, r3
 8007ba6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	8b7a      	ldrh	r2, [r7, #26]
 8007bb2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	3302      	adds	r3, #2
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3724      	adds	r7, #36	; 0x24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e013      	b.n	8007c12 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	041a      	lsls	r2, r3, #16
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	440b      	add	r3, r1
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	4619      	mov	r1, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d3e6      	bcc.n	8007bea <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4413      	add	r3, r2
 8007c34:	881a      	ldrh	r2, [r3, #0]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007c5c:	231f      	movs	r3, #31
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d102      	bne.n	8007c70 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e063      	b.n	8007d38 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007c70:	bf00      	nop
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1e5a      	subs	r2, r3, #1
 8007c76:	613a      	str	r2, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <HAL_CRCEx_Polynomial_Set+0x44>
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f003 031f 	and.w	r3, r3, #31
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	fa22 f303 	lsr.w	r3, r2, r3
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b18      	cmp	r3, #24
 8007c94:	d846      	bhi.n	8007d24 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <HAL_CRCEx_Polynomial_Set+0x50>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007d2b 	.word	0x08007d2b
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d25 	.word	0x08007d25
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d19 	.word	0x08007d19
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d25 	.word	0x08007d25
 8007cd4:	08007d25 	.word	0x08007d25
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d0d 	.word	0x08007d0d
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d25 	.word	0x08007d25
 8007cf4:	08007d25 	.word	0x08007d25
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	08007d01 	.word	0x08007d01
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b06      	cmp	r3, #6
 8007d04:	d913      	bls.n	8007d2e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007d0a:	e010      	b.n	8007d2e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b07      	cmp	r3, #7
 8007d10:	d90f      	bls.n	8007d32 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007d16:	e00c      	b.n	8007d32 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d90b      	bls.n	8007d36 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007d22:	e008      	b.n	8007d36 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
        break;
 8007d28:	e006      	b.n	8007d38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007d2a:	bf00      	nop
 8007d2c:	e004      	b.n	8007d38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007d2e:	bf00      	nop
 8007d30:	e002      	b.n	8007d38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007d36:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f023 0118 	bic.w	r1, r3, #24
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e08d      	b.n	8007e96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4b47      	ldr	r3, [pc, #284]	; (8007ea0 <HAL_DMA_Init+0x138>)
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d80f      	bhi.n	8007da6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4b45      	ldr	r3, [pc, #276]	; (8007ea4 <HAL_DMA_Init+0x13c>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	4a45      	ldr	r2, [pc, #276]	; (8007ea8 <HAL_DMA_Init+0x140>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	091b      	lsrs	r3, r3, #4
 8007d98:	009a      	lsls	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a42      	ldr	r2, [pc, #264]	; (8007eac <HAL_DMA_Init+0x144>)
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40
 8007da4:	e00e      	b.n	8007dc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	4b40      	ldr	r3, [pc, #256]	; (8007eb0 <HAL_DMA_Init+0x148>)
 8007dae:	4413      	add	r3, r2
 8007db0:	4a3d      	ldr	r2, [pc, #244]	; (8007ea8 <HAL_DMA_Init+0x140>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	091b      	lsrs	r3, r3, #4
 8007db8:	009a      	lsls	r2, r3, #2
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a3c      	ldr	r2, [pc, #240]	; (8007eb4 <HAL_DMA_Init+0x14c>)
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9c4 	bl	80081a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e24:	d102      	bne.n	8007e2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d010      	beq.n	8007e6c <HAL_DMA_Init+0x104>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d80c      	bhi.n	8007e6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f9e4 	bl	8008220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e008      	b.n	8007e7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40020407 	.word	0x40020407
 8007ea4:	bffdfff8 	.word	0xbffdfff8
 8007ea8:	cccccccd 	.word	0xcccccccd
 8007eac:	40020000 	.word	0x40020000
 8007eb0:	bffdfbf8 	.word	0xbffdfbf8
 8007eb4:	40020400 	.word	0x40020400

08007eb8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_DMA_Start_IT+0x20>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e066      	b.n	8007fa6 <HAL_DMA_Start_IT+0xee>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d155      	bne.n	8007f98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f909 	bl	8008128 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d008      	beq.n	8007f30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 020e 	orr.w	r2, r2, #14
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	e00f      	b.n	8007f50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0204 	bic.w	r2, r2, #4
 8007f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 020a 	orr.w	r2, r2, #10
 8007f4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0201 	orr.w	r2, r2, #1
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e005      	b.n	8007fa4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2204      	movs	r2, #4
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d026      	beq.n	8008028 <HAL_DMA_IRQHandler+0x7a>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d021      	beq.n	8008028 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d107      	bne.n	8008002 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0204 	bic.w	r2, r2, #4
 8008000:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008006:	f003 021f 	and.w	r2, r3, #31
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	2104      	movs	r1, #4
 8008010:	fa01 f202 	lsl.w	r2, r1, r2
 8008014:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	2b00      	cmp	r3, #0
 800801c:	d071      	beq.n	8008102 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008026:	e06c      	b.n	8008102 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	2202      	movs	r2, #2
 8008032:	409a      	lsls	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4013      	ands	r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02e      	beq.n	800809a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d029      	beq.n	800809a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0320 	and.w	r3, r3, #32
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10b      	bne.n	800806c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 020a 	bic.w	r2, r2, #10
 8008062:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008070:	f003 021f 	and.w	r2, r3, #31
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008078:	2102      	movs	r1, #2
 800807a:	fa01 f202 	lsl.w	r2, r1, r2
 800807e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d038      	beq.n	8008102 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008098:	e033      	b.n	8008102 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809e:	f003 031f 	and.w	r3, r3, #31
 80080a2:	2208      	movs	r2, #8
 80080a4:	409a      	lsls	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d02a      	beq.n	8008104 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d025      	beq.n	8008104 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 020e 	bic.w	r2, r2, #14
 80080c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080cc:	f003 021f 	and.w	r2, r3, #31
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2101      	movs	r1, #1
 80080d6:	fa01 f202 	lsl.w	r2, r1, r2
 80080da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008102:	bf00      	nop
 8008104:	bf00      	nop
}
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800811a:	b2db      	uxtb	r3, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800813e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008150:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f003 021f 	and.w	r2, r3, #31
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2101      	movs	r1, #1
 8008160:	fa01 f202 	lsl.w	r2, r1, r2
 8008164:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b10      	cmp	r3, #16
 8008174:	d108      	bne.n	8008188 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008186:	e007      	b.n	8008198 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	60da      	str	r2, [r3, #12]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	4b16      	ldr	r3, [pc, #88]	; (800820c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d802      	bhi.n	80081be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	e001      	b.n	80081c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80081be:	4b15      	ldr	r3, [pc, #84]	; (8008214 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80081c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	3b08      	subs	r3, #8
 80081ce:	4a12      	ldr	r2, [pc, #72]	; (8008218 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80081d0:	fba2 2303 	umull	r2, r3, r2, r3
 80081d4:	091b      	lsrs	r3, r3, #4
 80081d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081dc:	089b      	lsrs	r3, r3, #2
 80081de:	009a      	lsls	r2, r3, #2
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	4413      	add	r3, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a0b      	ldr	r2, [pc, #44]	; (800821c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80081ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f003 031f 	and.w	r3, r3, #31
 80081f6:	2201      	movs	r2, #1
 80081f8:	409a      	lsls	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40020407 	.word	0x40020407
 8008210:	40020800 	.word	0x40020800
 8008214:	40020820 	.word	0x40020820
 8008218:	cccccccd 	.word	0xcccccccd
 800821c:	40020880 	.word	0x40020880

08008220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a08      	ldr	r2, [pc, #32]	; (8008264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008242:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3b01      	subs	r3, #1
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2201      	movs	r2, #1
 800824e:	409a      	lsls	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008254:	bf00      	nop
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	1000823f 	.word	0x1000823f
 8008264:	40020940 	.word	0x40020940

08008268 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800827a:	4b2f      	ldr	r3, [pc, #188]	; (8008338 <HAL_FLASH_Program+0xd0>)
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_FLASH_Program+0x1e>
 8008282:	2302      	movs	r3, #2
 8008284:	e053      	b.n	800832e <HAL_FLASH_Program+0xc6>
 8008286:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <HAL_FLASH_Program+0xd0>)
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800828c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008290:	f000 f892 	bl	80083b8 <FLASH_WaitForLastOperation>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d143      	bne.n	8008326 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <HAL_FLASH_Program+0xd0>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80082a4:	4b25      	ldr	r3, [pc, #148]	; (800833c <HAL_FLASH_Program+0xd4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80082b0:	4b22      	ldr	r3, [pc, #136]	; (800833c <HAL_FLASH_Program+0xd4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a21      	ldr	r2, [pc, #132]	; (800833c <HAL_FLASH_Program+0xd4>)
 80082b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80082bc:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <HAL_FLASH_Program+0xd0>)
 80082be:	2202      	movs	r2, #2
 80082c0:	771a      	strb	r2, [r3, #28]
 80082c2:	e002      	b.n	80082ca <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80082c4:	4b1c      	ldr	r3, [pc, #112]	; (8008338 <HAL_FLASH_Program+0xd0>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80082d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d4:	68b8      	ldr	r0, [r7, #8]
 80082d6:	f000 f8c3 	bl	8008460 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80082da:	2301      	movs	r3, #1
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	e010      	b.n	8008302 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d002      	beq.n	80082ec <HAL_FLASH_Program+0x84>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d10a      	bne.n	8008302 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	4619      	mov	r1, r3
 80082f0:	68b8      	ldr	r0, [r7, #8]
 80082f2:	f000 f8db 	bl	80084ac <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d102      	bne.n	8008302 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80082fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008300:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008306:	f000 f857 	bl	80083b8 <FLASH_WaitForLastOperation>
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d006      	beq.n	8008322 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <HAL_FLASH_Program+0xd4>)
 8008316:	695a      	ldr	r2, [r3, #20]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	43db      	mvns	r3, r3
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <HAL_FLASH_Program+0xd4>)
 800831e:	4013      	ands	r3, r2
 8008320:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008322:	f000 f9d3 	bl	80086cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008326:	4b04      	ldr	r3, [pc, #16]	; (8008338 <HAL_FLASH_Program+0xd0>)
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000184 	.word	0x20000184
 800833c:	40022000 	.word	0x40022000

08008340 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800834a:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <HAL_FLASH_Unlock+0x38>)
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	da0b      	bge.n	800836a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <HAL_FLASH_Unlock+0x38>)
 8008354:	4a09      	ldr	r2, [pc, #36]	; (800837c <HAL_FLASH_Unlock+0x3c>)
 8008356:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008358:	4b07      	ldr	r3, [pc, #28]	; (8008378 <HAL_FLASH_Unlock+0x38>)
 800835a:	4a09      	ldr	r2, [pc, #36]	; (8008380 <HAL_FLASH_Unlock+0x40>)
 800835c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_FLASH_Unlock+0x38>)
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	2b00      	cmp	r3, #0
 8008364:	da01      	bge.n	800836a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800836a:	79fb      	ldrb	r3, [r7, #7]
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	40022000 	.word	0x40022000
 800837c:	45670123 	.word	0x45670123
 8008380:	cdef89ab 	.word	0xcdef89ab

08008384 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <HAL_FLASH_Lock+0x30>)
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	4a08      	ldr	r2, [pc, #32]	; (80083b4 <HAL_FLASH_Lock+0x30>)
 8008394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008398:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800839a:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_FLASH_Lock+0x30>)
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da01      	bge.n	80083a6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80083a6:	79fb      	ldrb	r3, [r7, #7]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40022000 	.word	0x40022000

080083b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80083c0:	f7fd f932 	bl	8005628 <HAL_GetTick>
 80083c4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80083c6:	e009      	b.n	80083dc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80083c8:	f7fd f92e 	bl	8005628 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d201      	bcs.n	80083dc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e038      	b.n	800844e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80083dc:	4b1e      	ldr	r3, [pc, #120]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e8:	d0ee      	beq.n	80083c8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 80083ec:	691a      	ldr	r2, [r3, #16]
 80083ee:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80083f2:	4013      	ands	r3, r2
 80083f4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01e      	beq.n	800843a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80083fc:	4b17      	ldr	r3, [pc, #92]	; (800845c <FLASH_WaitForLastOperation+0xa4>)
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <FLASH_WaitForLastOperation+0xa4>)
 8008406:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <FLASH_WaitForLastOperation+0x6a>
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800841c:	490e      	ldr	r1, [pc, #56]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 800841e:	4313      	orrs	r3, r2
 8008420:	618b      	str	r3, [r1, #24]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <FLASH_WaitForLastOperation+0x7e>
 800842c:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008434:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e009      	b.n	800844e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800843a:	4b07      	ldr	r3, [pc, #28]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b01      	cmp	r3, #1
 8008444:	d102      	bne.n	800844c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008446:	4b04      	ldr	r3, [pc, #16]	; (8008458 <FLASH_WaitForLastOperation+0xa0>)
 8008448:	2201      	movs	r2, #1
 800844a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	40022000 	.word	0x40022000
 800845c:	20000184 	.word	0x20000184

08008460 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800846c:	4b0e      	ldr	r3, [pc, #56]	; (80084a8 <FLASH_Program_DoubleWord+0x48>)
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <FLASH_Program_DoubleWord+0x48>)
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800847e:	f3bf 8f6f 	isb	sy
}
 8008482:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	000a      	movs	r2, r1
 8008492:	2300      	movs	r3, #0
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	3104      	adds	r1, #4
 8008498:	4613      	mov	r3, r2
 800849a:	600b      	str	r3, [r1, #0]
}
 800849c:	bf00      	nop
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	40022000 	.word	0x40022000

080084ac <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b089      	sub	sp, #36	; 0x24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80084c2:	4b14      	ldr	r3, [pc, #80]	; (8008514 <FLASH_Program_Fast+0x68>)
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	4a13      	ldr	r2, [pc, #76]	; (8008514 <FLASH_Program_Fast+0x68>)
 80084c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ce:	f3ef 8310 	mrs	r3, PRIMASK
 80084d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80084d4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80084d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80084d8:	b672      	cpsid	i
}
 80084da:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	3304      	adds	r3, #4
 80084e8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	3304      	adds	r3, #4
 80084ee:	617b      	str	r3, [r7, #20]
    row_index--;
 80084f0:	7ffb      	ldrb	r3, [r7, #31]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80084f6:	7ffb      	ldrb	r3, [r7, #31]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1ef      	bne.n	80084dc <FLASH_Program_Fast+0x30>
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f383 8810 	msr	PRIMASK, r3
}
 8008506:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008508:	bf00      	nop
 800850a:	3724      	adds	r7, #36	; 0x24
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	40022000 	.word	0x40022000

08008518 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008522:	4b47      	ldr	r3, [pc, #284]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_FLASHEx_Erase+0x16>
 800852a:	2302      	movs	r3, #2
 800852c:	e083      	b.n	8008636 <HAL_FLASHEx_Erase+0x11e>
 800852e:	4b44      	ldr	r3, [pc, #272]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008538:	f7ff ff3e 	bl	80083b8 <FLASH_WaitForLastOperation>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d173      	bne.n	800862e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008546:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800854c:	4b3d      	ldr	r3, [pc, #244]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	2b00      	cmp	r3, #0
 8008556:	d013      	beq.n	8008580 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008558:	4b3a      	ldr	r3, [pc, #232]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008564:	4b37      	ldr	r3, [pc, #220]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a36      	ldr	r2, [pc, #216]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 800856a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800856e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008570:	4b33      	ldr	r3, [pc, #204]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 8008572:	2203      	movs	r2, #3
 8008574:	771a      	strb	r2, [r3, #28]
 8008576:	e016      	b.n	80085a6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008578:	4b31      	ldr	r3, [pc, #196]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 800857a:	2201      	movs	r2, #1
 800857c:	771a      	strb	r2, [r3, #28]
 800857e:	e012      	b.n	80085a6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008580:	4b30      	ldr	r3, [pc, #192]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800858c:	4b2d      	ldr	r3, [pc, #180]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a2c      	ldr	r2, [pc, #176]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 8008592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008596:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008598:	4b29      	ldr	r3, [pc, #164]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 800859a:	2202      	movs	r2, #2
 800859c:	771a      	strb	r2, [r3, #28]
 800859e:	e002      	b.n	80085a6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d111      	bne.n	80085d2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f848 	bl	8008648 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80085b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085bc:	f7ff fefc 	bl	80083b8 <FLASH_WaitForLastOperation>
 80085c0:	4603      	mov	r3, r0
 80085c2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80085c4:	4b1f      	ldr	r3, [pc, #124]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	4a1e      	ldr	r2, [pc, #120]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 80085ca:	f023 0304 	bic.w	r3, r3, #4
 80085ce:	6153      	str	r3, [r2, #20]
 80085d0:	e02b      	b.n	800862a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f04f 32ff 	mov.w	r2, #4294967295
 80085d8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	60bb      	str	r3, [r7, #8]
 80085e0:	e01b      	b.n	800861a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4619      	mov	r1, r3
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f000 f84b 	bl	8008684 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80085ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80085f2:	f7ff fee1 	bl	80083b8 <FLASH_WaitForLastOperation>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	4a11      	ldr	r2, [pc, #68]	; (8008644 <HAL_FLASHEx_Erase+0x12c>)
 8008600:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008604:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	601a      	str	r2, [r3, #0]
          break;
 8008612:	e00a      	b.n	800862a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3301      	adds	r3, #1
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	4413      	add	r3, r2
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	d3db      	bcc.n	80085e2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800862a:	f000 f84f 	bl	80086cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800862e:	4b04      	ldr	r3, [pc, #16]	; (8008640 <HAL_FLASHEx_Erase+0x128>)
 8008630:	2200      	movs	r2, #0
 8008632:	701a      	strb	r2, [r3, #0]

  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000184 	.word	0x20000184
 8008644:	40022000 	.word	0x40022000

08008648 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800865a:	4b09      	ldr	r3, [pc, #36]	; (8008680 <FLASH_MassErase+0x38>)
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	4a08      	ldr	r2, [pc, #32]	; (8008680 <FLASH_MassErase+0x38>)
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <FLASH_MassErase+0x38>)
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	4a05      	ldr	r2, [pc, #20]	; (8008680 <FLASH_MassErase+0x38>)
 800866c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008670:	6153      	str	r3, [r2, #20]
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40022000 	.word	0x40022000

08008684 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800868e:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <FLASH_PageErase+0x44>)
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800869e:	490a      	ldr	r1, [pc, #40]	; (80086c8 <FLASH_PageErase+0x44>)
 80086a0:	4313      	orrs	r3, r2
 80086a2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <FLASH_PageErase+0x44>)
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <FLASH_PageErase+0x44>)
 80086aa:	f043 0302 	orr.w	r3, r3, #2
 80086ae:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <FLASH_PageErase+0x44>)
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	4a04      	ldr	r2, [pc, #16]	; (80086c8 <FLASH_PageErase+0x44>)
 80086b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ba:	6153      	str	r3, [r2, #20]
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	40022000 	.word	0x40022000

080086cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80086d2:	4b21      	ldr	r3, [pc, #132]	; (8008758 <FLASH_FlushCaches+0x8c>)
 80086d4:	7f1b      	ldrb	r3, [r3, #28]
 80086d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d002      	beq.n	80086e4 <FLASH_FlushCaches+0x18>
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d117      	bne.n	8008714 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80086e4:	4b1d      	ldr	r3, [pc, #116]	; (800875c <FLASH_FlushCaches+0x90>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1c      	ldr	r2, [pc, #112]	; (800875c <FLASH_FlushCaches+0x90>)
 80086ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80086f0:	4b1a      	ldr	r3, [pc, #104]	; (800875c <FLASH_FlushCaches+0x90>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a19      	ldr	r2, [pc, #100]	; (800875c <FLASH_FlushCaches+0x90>)
 80086f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <FLASH_FlushCaches+0x90>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a16      	ldr	r2, [pc, #88]	; (800875c <FLASH_FlushCaches+0x90>)
 8008702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008706:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008708:	4b14      	ldr	r3, [pc, #80]	; (800875c <FLASH_FlushCaches+0x90>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a13      	ldr	r2, [pc, #76]	; (800875c <FLASH_FlushCaches+0x90>)
 800870e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008712:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d002      	beq.n	8008720 <FLASH_FlushCaches+0x54>
 800871a:	79fb      	ldrb	r3, [r7, #7]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d111      	bne.n	8008744 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008720:	4b0e      	ldr	r3, [pc, #56]	; (800875c <FLASH_FlushCaches+0x90>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <FLASH_FlushCaches+0x90>)
 8008726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <FLASH_FlushCaches+0x90>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0a      	ldr	r2, [pc, #40]	; (800875c <FLASH_FlushCaches+0x90>)
 8008732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008736:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008738:	4b08      	ldr	r3, [pc, #32]	; (800875c <FLASH_FlushCaches+0x90>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a07      	ldr	r2, [pc, #28]	; (800875c <FLASH_FlushCaches+0x90>)
 800873e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008742:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <FLASH_FlushCaches+0x8c>)
 8008746:	2200      	movs	r2, #0
 8008748:	771a      	strb	r2, [r3, #28]
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000184 	.word	0x20000184
 800875c:	40022000 	.word	0x40022000

08008760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800876e:	e15a      	b.n	8008a26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	2101      	movs	r1, #1
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	fa01 f303 	lsl.w	r3, r1, r3
 800877c:	4013      	ands	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 814c 	beq.w	8008a20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d005      	beq.n	80087a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800879c:	2b02      	cmp	r3, #2
 800879e:	d130      	bne.n	8008802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	2203      	movs	r2, #3
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	43db      	mvns	r3, r3
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4013      	ands	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	693a      	ldr	r2, [r7, #16]
 80087ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087d6:	2201      	movs	r2, #1
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4013      	ands	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	091b      	lsrs	r3, r3, #4
 80087ec:	f003 0201 	and.w	r2, r3, #1
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d017      	beq.n	800883e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	2203      	movs	r2, #3
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	43db      	mvns	r3, r3
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4013      	ands	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d123      	bne.n	8008892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	08da      	lsrs	r2, r3, #3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3208      	adds	r2, #8
 8008852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f003 0307 	and.w	r3, r3, #7
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	220f      	movs	r2, #15
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4013      	ands	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	08da      	lsrs	r2, r3, #3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3208      	adds	r2, #8
 800888c:	6939      	ldr	r1, [r7, #16]
 800888e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	2203      	movs	r2, #3
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43db      	mvns	r3, r3
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4013      	ands	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f003 0203 	and.w	r2, r3, #3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80a6 	beq.w	8008a20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088d4:	4b5b      	ldr	r3, [pc, #364]	; (8008a44 <HAL_GPIO_Init+0x2e4>)
 80088d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088d8:	4a5a      	ldr	r2, [pc, #360]	; (8008a44 <HAL_GPIO_Init+0x2e4>)
 80088da:	f043 0301 	orr.w	r3, r3, #1
 80088de:	6613      	str	r3, [r2, #96]	; 0x60
 80088e0:	4b58      	ldr	r3, [pc, #352]	; (8008a44 <HAL_GPIO_Init+0x2e4>)
 80088e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	60bb      	str	r3, [r7, #8]
 80088ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088ec:	4a56      	ldr	r2, [pc, #344]	; (8008a48 <HAL_GPIO_Init+0x2e8>)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	089b      	lsrs	r3, r3, #2
 80088f2:	3302      	adds	r3, #2
 80088f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	220f      	movs	r2, #15
 8008904:	fa02 f303 	lsl.w	r3, r2, r3
 8008908:	43db      	mvns	r3, r3
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4013      	ands	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008916:	d01f      	beq.n	8008958 <HAL_GPIO_Init+0x1f8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a4c      	ldr	r2, [pc, #304]	; (8008a4c <HAL_GPIO_Init+0x2ec>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d019      	beq.n	8008954 <HAL_GPIO_Init+0x1f4>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a4b      	ldr	r2, [pc, #300]	; (8008a50 <HAL_GPIO_Init+0x2f0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d013      	beq.n	8008950 <HAL_GPIO_Init+0x1f0>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a4a      	ldr	r2, [pc, #296]	; (8008a54 <HAL_GPIO_Init+0x2f4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00d      	beq.n	800894c <HAL_GPIO_Init+0x1ec>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a49      	ldr	r2, [pc, #292]	; (8008a58 <HAL_GPIO_Init+0x2f8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d007      	beq.n	8008948 <HAL_GPIO_Init+0x1e8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a48      	ldr	r2, [pc, #288]	; (8008a5c <HAL_GPIO_Init+0x2fc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d101      	bne.n	8008944 <HAL_GPIO_Init+0x1e4>
 8008940:	2305      	movs	r3, #5
 8008942:	e00a      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 8008944:	2306      	movs	r3, #6
 8008946:	e008      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 8008948:	2304      	movs	r3, #4
 800894a:	e006      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 800894c:	2303      	movs	r3, #3
 800894e:	e004      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 8008950:	2302      	movs	r3, #2
 8008952:	e002      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <HAL_GPIO_Init+0x1fa>
 8008958:	2300      	movs	r3, #0
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f002 0203 	and.w	r2, r2, #3
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	4093      	lsls	r3, r2
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800896a:	4937      	ldr	r1, [pc, #220]	; (8008a48 <HAL_GPIO_Init+0x2e8>)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	089b      	lsrs	r3, r3, #2
 8008970:	3302      	adds	r3, #2
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008978:	4b39      	ldr	r3, [pc, #228]	; (8008a60 <HAL_GPIO_Init+0x300>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	43db      	mvns	r3, r3
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4013      	ands	r3, r2
 8008986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d003      	beq.n	800899c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800899c:	4a30      	ldr	r2, [pc, #192]	; (8008a60 <HAL_GPIO_Init+0x300>)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80089a2:	4b2f      	ldr	r3, [pc, #188]	; (8008a60 <HAL_GPIO_Init+0x300>)
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	43db      	mvns	r3, r3
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4013      	ands	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80089c6:	4a26      	ldr	r2, [pc, #152]	; (8008a60 <HAL_GPIO_Init+0x300>)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80089cc:	4b24      	ldr	r3, [pc, #144]	; (8008a60 <HAL_GPIO_Init+0x300>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	43db      	mvns	r3, r3
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4013      	ands	r3, r2
 80089da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <HAL_GPIO_Init+0x300>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <HAL_GPIO_Init+0x300>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	43db      	mvns	r3, r3
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4013      	ands	r3, r2
 8008a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008a1a:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <HAL_GPIO_Init+0x300>)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	3301      	adds	r3, #1
 8008a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f47f ae9d 	bne.w	8008770 <HAL_GPIO_Init+0x10>
  }
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	40021000 	.word	0x40021000
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	48000400 	.word	0x48000400
 8008a50:	48000800 	.word	0x48000800
 8008a54:	48000c00 	.word	0x48000c00
 8008a58:	48001000 	.word	0x48001000
 8008a5c:	48001400 	.word	0x48001400
 8008a60:	40010400 	.word	0x40010400

08008a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	887b      	ldrh	r3, [r7, #2]
 8008a76:	4013      	ands	r3, r2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e001      	b.n	8008a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	807b      	strh	r3, [r7, #2]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008aa4:	787b      	ldrb	r3, [r7, #1]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008aaa:	887a      	ldrh	r2, [r7, #2]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ab0:	e002      	b.n	8008ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ab2:	887a      	ldrh	r2, [r7, #2]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008ace:	4b08      	ldr	r3, [pc, #32]	; (8008af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ad0:	695a      	ldr	r2, [r3, #20]
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ada:	4a05      	ldr	r2, [pc, #20]	; (8008af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008adc:	88fb      	ldrh	r3, [r7, #6]
 8008ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7f9 fb4e 	bl	8002184 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40010400 	.word	0x40010400

08008af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e08d      	b.n	8008c22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fb fd04 	bl	8004528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2224      	movs	r2, #36	; 0x24
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d107      	bne.n	8008b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b6a:	609a      	str	r2, [r3, #8]
 8008b6c:	e006      	b.n	8008b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689a      	ldr	r2, [r3, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d108      	bne.n	8008b96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b92:	605a      	str	r2, [r3, #4]
 8008b94:	e007      	b.n	8008ba6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ba4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691a      	ldr	r2, [r3, #16]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	69d9      	ldr	r1, [r3, #28]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a1a      	ldr	r2, [r3, #32]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0201 	orr.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d138      	bne.n	8008cb2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e032      	b.n	8008cb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2224      	movs	r2, #36	; 0x24
 8008c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0201 	orr.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e000      	b.n	8008cb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cb2:	2302      	movs	r3, #2
  }
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d139      	bne.n	8008d4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e033      	b.n	8008d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2224      	movs	r2, #36	; 0x24
 8008cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0201 	bic.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	e000      	b.n	8008d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d4a:	2302      	movs	r3, #2
  }
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e0c0      	b.n	8008eec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d106      	bne.n	8008d84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f00b fda2 	bl	80148c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f005 fcf8 	bl	800e786 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
 8008d9a:	e03e      	b.n	8008e1a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d9c:	7bfa      	ldrb	r2, [r7, #15]
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	440b      	add	r3, r1
 8008daa:	3311      	adds	r3, #17
 8008dac:	2201      	movs	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008db0:	7bfa      	ldrb	r2, [r7, #15]
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	440b      	add	r3, r1
 8008dbe:	3310      	adds	r3, #16
 8008dc0:	7bfa      	ldrb	r2, [r7, #15]
 8008dc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008dc4:	7bfa      	ldrb	r2, [r7, #15]
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	440b      	add	r3, r1
 8008dd2:	3313      	adds	r3, #19
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008dd8:	7bfa      	ldrb	r2, [r7, #15]
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	440b      	add	r3, r1
 8008de6:	3320      	adds	r3, #32
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008dec:	7bfa      	ldrb	r2, [r7, #15]
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	440b      	add	r3, r1
 8008dfa:	3324      	adds	r3, #36	; 0x24
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	440b      	add	r3, r1
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	3301      	adds	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	791b      	ldrb	r3, [r3, #4]
 8008e1e:	7bfa      	ldrb	r2, [r7, #15]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d3bb      	bcc.n	8008d9c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	e044      	b.n	8008eb4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008e2a:	7bfa      	ldrb	r2, [r7, #15]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	440b      	add	r3, r1
 8008e38:	f203 1351 	addw	r3, r3, #337	; 0x151
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008e40:	7bfa      	ldrb	r2, [r7, #15]
 8008e42:	6879      	ldr	r1, [r7, #4]
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	440b      	add	r3, r1
 8008e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e52:	7bfa      	ldrb	r2, [r7, #15]
 8008e54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e56:	7bfa      	ldrb	r2, [r7, #15]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	440b      	add	r3, r1
 8008e64:	f203 1353 	addw	r3, r3, #339	; 0x153
 8008e68:	2200      	movs	r2, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e6c:	7bfa      	ldrb	r2, [r7, #15]
 8008e6e:	6879      	ldr	r1, [r7, #4]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	440b      	add	r3, r1
 8008e7a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e82:	7bfa      	ldrb	r2, [r7, #15]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	440b      	add	r3, r1
 8008e90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e98:	7bfa      	ldrb	r2, [r7, #15]
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	440b      	add	r3, r1
 8008ea6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	7bfa      	ldrb	r2, [r7, #15]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d3b5      	bcc.n	8008e2a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008eca:	f005 fc77 	bl	800e7bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7a9b      	ldrb	r3, [r3, #10]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d102      	bne.n	8008eea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fc41 	bl	800a76c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_PCD_Start+0x16>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e012      	b.n	8008f30 <HAL_PCD_Start+0x3c>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f005 fc1e 	bl	800e758 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f007 fede 	bl	8010ce2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f007 fee3 	bl	8010d10 <USB_ReadInterrupts>
 8008f4a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fb04 	bl	8009564 <PCD_EP_ISR_Handler>

    return;
 8008f5c:	e110      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d013      	beq.n	8008f90 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f00b fd32 	bl	80149ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8fc 	bl	8009186 <HAL_PCD_SetAddress>

    return;
 8008f8e:	e0f7      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fac:	b292      	uxth	r2, r2
 8008fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008fb2:	e0e5      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fd0:	b292      	uxth	r2, r2
 8008fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008fd6:	e0d3      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d034      	beq.n	800904c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f022 0204 	bic.w	r2, r2, #4
 8008ff4:	b292      	uxth	r2, r2
 8008ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0208 	bic.w	r2, r2, #8
 800900c:	b292      	uxth	r2, r2
 800900e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009018:	2b01      	cmp	r3, #1
 800901a:	d107      	bne.n	800902c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009024:	2100      	movs	r1, #0
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f00b fed2 	bl	8014dd0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f00b fd15 	bl	8014a5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009044:	b292      	uxth	r2, r2
 8009046:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800904a:	e099      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009052:	2b00      	cmp	r3, #0
 8009054:	d027      	beq.n	80090a6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0208 	orr.w	r2, r2, #8
 8009068:	b292      	uxth	r2, r2
 800906a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009080:	b292      	uxth	r2, r2
 8009082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0204 	orr.w	r2, r2, #4
 8009098:	b292      	uxth	r2, r2
 800909a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f00b fcc2 	bl	8014a28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80090a4:	e06c      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d040      	beq.n	8009132 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090c2:	b292      	uxth	r2, r2
 80090c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d12b      	bne.n	800912a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090da:	b29a      	uxth	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0204 	orr.w	r2, r2, #4
 80090e4:	b292      	uxth	r2, r2
 80090e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0208 	orr.w	r2, r2, #8
 80090fc:	b292      	uxth	r2, r2
 80090fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009112:	b29b      	uxth	r3, r3
 8009114:	089b      	lsrs	r3, r3, #2
 8009116:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009120:	2101      	movs	r1, #1
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f00b fe54 	bl	8014dd0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009128:	e02a      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f00b fc7c 	bl	8014a28 <HAL_PCD_SuspendCallback>
    return;
 8009130:	e026      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00f      	beq.n	800915c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009144:	b29a      	uxth	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800914e:	b292      	uxth	r2, r2
 8009150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f00b fc3a 	bl	80149ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800915a:	e011      	b.n	8009180 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00c      	beq.n	8009180 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800916e:	b29a      	uxth	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009178:	b292      	uxth	r2, r2
 800917a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800917e:	bf00      	nop
  }
}
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009198:	2b01      	cmp	r3, #1
 800919a:	d101      	bne.n	80091a0 <HAL_PCD_SetAddress+0x1a>
 800919c:	2302      	movs	r3, #2
 800919e:	e012      	b.n	80091c6 <HAL_PCD_SetAddress+0x40>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	78fa      	ldrb	r2, [r7, #3]
 80091b4:	4611      	mov	r1, r2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f007 fd7f 	bl	8010cba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	461a      	mov	r2, r3
 80091dc:	4603      	mov	r3, r0
 80091de:	70fb      	strb	r3, [r7, #3]
 80091e0:	460b      	mov	r3, r1
 80091e2:	803b      	strh	r3, [r7, #0]
 80091e4:	4613      	mov	r3, r2
 80091e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	da0e      	bge.n	8009212 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	f003 0207 	and.w	r2, r3, #7
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	3310      	adds	r3, #16
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	705a      	strb	r2, [r3, #1]
 8009210:	e00e      	b.n	8009230 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 0207 	and.w	r2, r3, #7
 8009218:	4613      	mov	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	4413      	add	r3, r2
 8009228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	b2da      	uxtb	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800923c:	883a      	ldrh	r2, [r7, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	78ba      	ldrb	r2, [r7, #2]
 8009246:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009248:	78bb      	ldrb	r3, [r7, #2]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d102      	bne.n	8009254 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800925a:	2b01      	cmp	r3, #1
 800925c:	d101      	bne.n	8009262 <HAL_PCD_EP_Open+0x94>
 800925e:	2302      	movs	r3, #2
 8009260:	e00e      	b.n	8009280 <HAL_PCD_EP_Open+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4618      	mov	r0, r3
 8009272:	f005 fac1 	bl	800e7f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800927e:	7afb      	ldrb	r3, [r7, #11]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009298:	2b00      	cmp	r3, #0
 800929a:	da0e      	bge.n	80092ba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 0207 	and.w	r2, r3, #7
 80092a2:	4613      	mov	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	3310      	adds	r3, #16
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4413      	add	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	705a      	strb	r2, [r3, #1]
 80092b8:	e00e      	b.n	80092d8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	f003 0207 	and.w	r2, r3, #7
 80092c0:	4613      	mov	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	f003 0307 	and.w	r3, r3, #7
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_PCD_EP_Close+0x6a>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e00e      	b.n	8009310 <HAL_PCD_EP_Close+0x88>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	4618      	mov	r0, r3
 8009302:	f005 fe3d 	bl	800ef80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	607a      	str	r2, [r7, #4]
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	460b      	mov	r3, r1
 8009326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	f003 0207 	and.w	r2, r3, #7
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2200      	movs	r2, #0
 8009350:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2200      	movs	r2, #0
 8009356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	f003 0307 	and.w	r3, r3, #7
 800935e:	b2da      	uxtb	r2, r3
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6979      	ldr	r1, [r7, #20]
 800936a:	4618      	mov	r0, r3
 800936c:	f005 fff5 	bl	800f35a <USB_EPStartXfer>

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	f003 0207 	and.w	r2, r3, #7
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	440b      	add	r3, r1
 8009398:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800939c:	681b      	ldr	r3, [r3, #0]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	460b      	mov	r3, r1
 80093b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	f003 0207 	and.w	r2, r3, #7
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	3310      	adds	r3, #16
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4413      	add	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2200      	movs	r2, #0
 80093ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2201      	movs	r2, #1
 80093f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6979      	ldr	r1, [r7, #20]
 8009408:	4618      	mov	r0, r3
 800940a:	f005 ffa6 	bl	800f35a <USB_EPStartXfer>

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	7912      	ldrb	r2, [r2, #4]
 800942e:	4293      	cmp	r3, r2
 8009430:	d901      	bls.n	8009436 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e03e      	b.n	80094b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800943a:	2b00      	cmp	r3, #0
 800943c:	da0e      	bge.n	800945c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	f003 0207 	and.w	r2, r3, #7
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	3310      	adds	r3, #16
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	4413      	add	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	705a      	strb	r2, [r3, #1]
 800945a:	e00c      	b.n	8009476 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800945c:	78fa      	ldrb	r2, [r7, #3]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	b2da      	uxtb	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800948e:	2b01      	cmp	r3, #1
 8009490:	d101      	bne.n	8009496 <HAL_PCD_EP_SetStall+0x7e>
 8009492:	2302      	movs	r3, #2
 8009494:	e00e      	b.n	80094b4 <HAL_PCD_EP_SetStall+0x9c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f007 fb09 	bl	8010abc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	7912      	ldrb	r2, [r2, #4]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e040      	b.n	800955c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	da0e      	bge.n	8009500 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	f003 0207 	and.w	r2, r3, #7
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	00db      	lsls	r3, r3, #3
 80094f0:	3310      	adds	r3, #16
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	4413      	add	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	705a      	strb	r2, [r3, #1]
 80094fe:	e00e      	b.n	800951e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	f003 0207 	and.w	r2, r3, #7
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	b2da      	uxtb	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_PCD_EP_ClrStall+0x82>
 800953a:	2302      	movs	r3, #2
 800953c:	e00e      	b.n	800955c <HAL_PCD_EP_ClrStall+0xa0>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	4618      	mov	r0, r3
 800954e:	f007 fb06 	bl	8010b5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b096      	sub	sp, #88	; 0x58
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800956c:	e3ae      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009576:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800957a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009588:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 8170 	bne.w	8009872 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009596:	f003 0310 	and.w	r3, r3, #16
 800959a:	2b00      	cmp	r3, #0
 800959c:	d14d      	bne.n	800963a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80095aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ae:	81fb      	strh	r3, [r7, #14]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	89fb      	ldrh	r3, [r7, #14]
 80095b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095be:	b29b      	uxth	r3, r3
 80095c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3310      	adds	r3, #16
 80095c6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4413      	add	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	4413      	add	r3, r2
 80095e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80095f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f2:	695a      	ldr	r2, [r3, #20]
 80095f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	441a      	add	r2, r3
 80095fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80095fe:	2100      	movs	r1, #0
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f00b f9ca 	bl	801499a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7b1b      	ldrb	r3, [r3, #12]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 835d 	beq.w	8009ccc <PCD_EP_ISR_Handler+0x768>
 8009612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 8358 	bne.w	8009ccc <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7b1b      	ldrb	r3, [r3, #12]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009626:	b2da      	uxtb	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	b292      	uxth	r2, r2
 800962e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	731a      	strb	r2, [r3, #12]
 8009638:	e348      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009640:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800964c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009654:	2b00      	cmp	r3, #0
 8009656:	d032      	beq.n	80096be <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009660:	b29b      	uxth	r3, r3
 8009662:	461a      	mov	r2, r3
 8009664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	4413      	add	r3, r2
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6812      	ldr	r2, [r2, #0]
 8009670:	4413      	add	r3, r2
 8009672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800967c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800968a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800968c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800968e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009690:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009692:	b29b      	uxth	r3, r3
 8009694:	f007 fb8e 	bl	8010db4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	b29a      	uxth	r2, r3
 80096a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80096a4:	4013      	ands	r3, r2
 80096a6:	823b      	strh	r3, [r7, #16]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	8a3a      	ldrh	r2, [r7, #16]
 80096ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096b2:	b292      	uxth	r2, r2
 80096b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f00b f942 	bl	8014940 <HAL_PCD_SetupStageCallback>
 80096bc:	e306      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80096be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f280 8302 	bge.w	8009ccc <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80096d4:	4013      	ands	r3, r2
 80096d6:	83fb      	strh	r3, [r7, #30]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	8bfa      	ldrh	r2, [r7, #30]
 80096de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80096e2:	b292      	uxth	r2, r2
 80096e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	4413      	add	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	6812      	ldr	r2, [r2, #0]
 80096fe:	4413      	add	r3, r2
 8009700:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800970a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800970c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800970e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d019      	beq.n	800974a <PCD_EP_ISR_Handler+0x1e6>
 8009716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d015      	beq.n	800974a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009724:	6959      	ldr	r1, [r3, #20]
 8009726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009728:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800972a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800972c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800972e:	b29b      	uxth	r3, r3
 8009730:	f007 fb40 	bl	8010db4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	441a      	add	r2, r3
 800973e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009740:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009742:	2100      	movs	r1, #0
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f00b f90d 	bl	8014964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 82b5 	bne.w	8009ccc <PCD_EP_ISR_Handler+0x768>
 8009762:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009766:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800976a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800976e:	f000 82ad 	beq.w	8009ccc <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009780:	b29b      	uxth	r3, r3
 8009782:	461a      	mov	r2, r3
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	4413      	add	r3, r2
 8009788:	61bb      	str	r3, [r7, #24]
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800979c:	b29a      	uxth	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b3e      	cmp	r3, #62	; 0x3e
 80097a8:	d91d      	bls.n	80097e6 <PCD_EP_ISR_Handler+0x282>
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	647b      	str	r3, [r7, #68]	; 0x44
 80097b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d102      	bne.n	80097c4 <PCD_EP_ISR_Handler+0x260>
 80097be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c0:	3b01      	subs	r3, #1
 80097c2:	647b      	str	r3, [r7, #68]	; 0x44
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	029b      	lsls	r3, r3, #10
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	4313      	orrs	r3, r2
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097de:	b29a      	uxth	r2, r3
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	e026      	b.n	8009834 <PCD_EP_ISR_Handler+0x2d0>
 80097e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <PCD_EP_ISR_Handler+0x2a0>
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e017      	b.n	8009834 <PCD_EP_ISR_Handler+0x2d0>
 8009804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	085b      	lsrs	r3, r3, #1
 800980a:	647b      	str	r3, [r7, #68]	; 0x44
 800980c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <PCD_EP_ISR_Handler+0x2ba>
 8009818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981a:	3301      	adds	r3, #1
 800981c:	647b      	str	r3, [r7, #68]	; 0x44
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29a      	uxth	r2, r3
 8009824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009826:	b29b      	uxth	r3, r3
 8009828:	029b      	lsls	r3, r3, #10
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009844:	827b      	strh	r3, [r7, #18]
 8009846:	8a7b      	ldrh	r3, [r7, #18]
 8009848:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800984c:	827b      	strh	r3, [r7, #18]
 800984e:	8a7b      	ldrh	r3, [r7, #18]
 8009850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009854:	827b      	strh	r3, [r7, #18]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	8a7b      	ldrh	r3, [r7, #18]
 800985c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	b29b      	uxth	r3, r3
 800986e:	8013      	strh	r3, [r2, #0]
 8009870:	e22c      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009886:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800988a:	2b00      	cmp	r3, #0
 800988c:	f280 80f6 	bge.w	8009a7c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80098a6:	4013      	ands	r3, r2
 80098a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80098be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098c2:	b292      	uxth	r2, r2
 80098c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80098c6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80098dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098de:	7b1b      	ldrb	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d123      	bne.n	800992c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	4413      	add	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009908:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800990c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 808e 	beq.w	8009a32 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991c:	6959      	ldr	r1, [r3, #20]
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	88da      	ldrh	r2, [r3, #6]
 8009922:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009926:	f007 fa45 	bl	8010db4 <USB_ReadPMA>
 800992a:	e082      	b.n	8009a32 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	78db      	ldrb	r3, [r3, #3]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d10a      	bne.n	800994a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009934:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009938:	461a      	mov	r2, r3
 800993a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f9d3 	bl	8009ce8 <HAL_PCD_EP_DB_Receive>
 8009942:	4603      	mov	r3, r0
 8009944:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009948:	e073      	b.n	8009a32 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009964:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	441a      	add	r2, r3
 8009976:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800997a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800998a:	b29b      	uxth	r3, r3
 800998c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d022      	beq.n	80099ee <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	4413      	add	r3, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	4413      	add	r3, r2
 80099c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80099d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d02c      	beq.n	8009a32 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099de:	6959      	ldr	r1, [r3, #20]
 80099e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e2:	891a      	ldrh	r2, [r3, #8]
 80099e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099e8:	f007 f9e4 	bl	8010db4 <USB_ReadPMA>
 80099ec:	e021      	b.n	8009a32 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	461a      	mov	r2, r3
 80099fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	4413      	add	r3, r2
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	6812      	ldr	r2, [r2, #0]
 8009a06:	4413      	add	r3, r2
 8009a08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009a16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a24:	6959      	ldr	r1, [r3, #20]
 8009a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a28:	895a      	ldrh	r2, [r3, #10]
 8009a2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a2e:	f007 f9c1 	bl	8010db4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a34:	69da      	ldr	r2, [r3, #28]
 8009a36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a3a:	441a      	add	r2, r3
 8009a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a48:	441a      	add	r2, r3
 8009a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <PCD_EP_ISR_Handler+0x4fe>
 8009a56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d206      	bcs.n	8009a70 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f00a ff7b 	bl	8014964 <HAL_PCD_DataOutStageCallback>
 8009a6e:	e005      	b.n	8009a7c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a76:	4618      	mov	r0, r3
 8009a78:	f005 fc6f 	bl	800f35a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009a7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8121 	beq.w	8009ccc <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8009a8a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	3310      	adds	r3, #16
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	441a      	add	r2, r3
 8009aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	f040 80a2 	bne.w	8009c28 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8009ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aec:	7b1b      	ldrb	r3, [r3, #12]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 8093 	beq.w	8009c1a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009af4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d046      	beq.n	8009b8e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b02:	785b      	ldrb	r3, [r3, #1]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d126      	bne.n	8009b56 <PCD_EP_ISR_Handler+0x5f2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	4413      	add	r3, r2
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	00da      	lsls	r2, r3, #3
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	4413      	add	r3, r2
 8009b2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b2e:	623b      	str	r3, [r7, #32]
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	801a      	strh	r2, [r3, #0]
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	e061      	b.n	8009c1a <PCD_EP_ISR_Handler+0x6b6>
 8009b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b58:	785b      	ldrb	r3, [r3, #1]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d15d      	bne.n	8009c1a <PCD_EP_ISR_Handler+0x6b6>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	461a      	mov	r2, r3
 8009b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b72:	4413      	add	r3, r2
 8009b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	00da      	lsls	r2, r3, #3
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	4413      	add	r3, r2
 8009b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	2200      	movs	r2, #0
 8009b8a:	801a      	strh	r2, [r3, #0]
 8009b8c:	e045      	b.n	8009c1a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d126      	bne.n	8009bea <PCD_EP_ISR_Handler+0x686>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	461a      	mov	r2, r3
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	4413      	add	r3, r2
 8009bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	00da      	lsls	r2, r3, #3
 8009bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8009bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be6:	801a      	strh	r2, [r3, #0]
 8009be8:	e017      	b.n	8009c1a <PCD_EP_ISR_Handler+0x6b6>
 8009bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d113      	bne.n	8009c1a <PCD_EP_ISR_Handler+0x6b6>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c00:	4413      	add	r3, r2
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	00da      	lsls	r2, r3, #3
 8009c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	2200      	movs	r2, #0
 8009c18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f00a feba 	bl	801499a <HAL_PCD_DataInStageCallback>
 8009c26:	e051      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d144      	bne.n	8009cbe <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4413      	add	r3, r2
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d907      	bls.n	8009c78 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8009c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c70:	1ad2      	subs	r2, r2, r3
 8009c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c74:	619a      	str	r2, [r3, #24]
 8009c76:	e002      	b.n	8009c7e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8009c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f00a fe84 	bl	801499a <HAL_PCD_DataInStageCallback>
 8009c92:	e01b      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c96:	695a      	ldr	r2, [r3, #20]
 8009c98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c9c:	441a      	add	r2, r3
 8009c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca4:	69da      	ldr	r2, [r3, #28]
 8009ca6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009caa:	441a      	add	r2, r3
 8009cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f005 fb4f 	bl	800f35a <USB_EPStartXfer>
 8009cbc:	e006      	b.n	8009ccc <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009cbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f917 	bl	8009efa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	b21b      	sxth	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f6ff ac48 	blt.w	800956e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3758      	adds	r7, #88	; 0x58
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d07c      	beq.n	8009dfa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	4413      	add	r3, r2
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	6812      	ldr	r2, [r2, #0]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	8b7b      	ldrh	r3, [r7, #26]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d306      	bcc.n	8009d3e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	699a      	ldr	r2, [r3, #24]
 8009d34:	8b7b      	ldrh	r3, [r7, #26]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	619a      	str	r2, [r3, #24]
 8009d3c:	e002      	b.n	8009d44 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2200      	movs	r2, #0
 8009d42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d123      	bne.n	8009d94 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d66:	833b      	strh	r3, [r7, #24]
 8009d68:	8b3b      	ldrh	r3, [r7, #24]
 8009d6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d6e:	833b      	strh	r3, [r7, #24]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	441a      	add	r2, r3
 8009d7e:	8b3b      	ldrh	r3, [r7, #24]
 8009d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d01f      	beq.n	8009dde <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db8:	82fb      	strh	r3, [r7, #22]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	8afb      	ldrh	r3, [r7, #22]
 8009dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009dde:	8b7b      	ldrh	r3, [r7, #26]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8085 	beq.w	8009ef0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6959      	ldr	r1, [r3, #20]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	891a      	ldrh	r2, [r3, #8]
 8009df2:	8b7b      	ldrh	r3, [r7, #26]
 8009df4:	f006 ffde 	bl	8010db4 <USB_ReadPMA>
 8009df8:	e07a      	b.n	8009ef0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	4413      	add	r3, r2
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	6812      	ldr	r2, [r2, #0]
 8009e12:	4413      	add	r3, r2
 8009e14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	699a      	ldr	r2, [r3, #24]
 8009e24:	8b7b      	ldrh	r3, [r7, #26]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d306      	bcc.n	8009e38 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	8b7b      	ldrh	r3, [r7, #26]
 8009e30:	1ad2      	subs	r2, r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	619a      	str	r2, [r3, #24]
 8009e36:	e002      	b.n	8009e3e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d123      	bne.n	8009e8e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e60:	83fb      	strh	r3, [r7, #30]
 8009e62:	8bfb      	ldrh	r3, [r7, #30]
 8009e64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e68:	83fb      	strh	r3, [r7, #30]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	441a      	add	r2, r3
 8009e78:	8bfb      	ldrh	r3, [r7, #30]
 8009e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11f      	bne.n	8009ed8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	881b      	ldrh	r3, [r3, #0]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb2:	83bb      	strh	r3, [r7, #28]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	441a      	add	r2, r3
 8009ec2:	8bbb      	ldrh	r3, [r7, #28]
 8009ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009ed8:	8b7b      	ldrh	r3, [r7, #26]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d008      	beq.n	8009ef0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6818      	ldr	r0, [r3, #0]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	6959      	ldr	r1, [r3, #20]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	895a      	ldrh	r2, [r3, #10]
 8009eea:	8b7b      	ldrh	r3, [r7, #26]
 8009eec:	f006 ff62 	bl	8010db4 <USB_ReadPMA>
    }
  }

  return count;
 8009ef0:	8b7b      	ldrh	r3, [r7, #26]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b0a4      	sub	sp, #144	; 0x90
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	4613      	mov	r3, r2
 8009f06:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009f08:	88fb      	ldrh	r3, [r7, #6]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 81db 	beq.w	800a2ca <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	00db      	lsls	r3, r3, #3
 8009f26:	4413      	add	r3, r2
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	6812      	ldr	r2, [r2, #0]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d907      	bls.n	8009f58 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f50:	1ad2      	subs	r2, r2, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	619a      	str	r2, [r3, #24]
 8009f56:	e002      	b.n	8009f5e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 80b9 	bne.w	800a0da <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d126      	bne.n	8009fbe <HAL_PCD_EP_DB_Transmit+0xc4>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	461a      	mov	r2, r3
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	4413      	add	r3, r2
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	00da      	lsls	r2, r3, #3
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	4413      	add	r3, r2
 8009f92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	801a      	strh	r2, [r3, #0]
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	e01a      	b.n	8009ff4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	785b      	ldrb	r3, [r3, #1]
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d116      	bne.n	8009ff4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	637b      	str	r3, [r7, #52]	; 0x34
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fda:	4413      	add	r3, r2
 8009fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	00da      	lsls	r2, r3, #3
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fec:	633b      	str	r3, [r7, #48]	; 0x30
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d126      	bne.n	800a050 <HAL_PCD_EP_DB_Transmit+0x156>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a010:	b29b      	uxth	r3, r3
 800a012:	461a      	mov	r2, r3
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	4413      	add	r3, r2
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	00da      	lsls	r2, r3, #3
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a028:	61bb      	str	r3, [r7, #24]
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a034:	b29a      	uxth	r2, r3
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	801a      	strh	r2, [r3, #0]
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a048:	b29a      	uxth	r2, r3
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	e017      	b.n	800a080 <HAL_PCD_EP_DB_Transmit+0x186>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d113      	bne.n	800a080 <HAL_PCD_EP_DB_Transmit+0x186>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a060:	b29b      	uxth	r3, r3
 800a062:	461a      	mov	r2, r3
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	4413      	add	r3, r2
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	00da      	lsls	r2, r3, #3
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	4413      	add	r3, r2
 800a074:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a078:	623b      	str	r3, [r7, #32]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	2200      	movs	r2, #0
 800a07e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	4619      	mov	r1, r3
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f00a fc87 	bl	801499a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 82fa 	beq.w	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b2:	82fb      	strh	r3, [r7, #22]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	441a      	add	r2, r3
 800a0c2:	8afb      	ldrh	r3, [r7, #22]
 800a0c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	8013      	strh	r3, [r2, #0]
 800a0d8:	e2d8      	b.n	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d021      	beq.n	800a128 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	441a      	add	r2, r3
 800a110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a12e:	2b01      	cmp	r3, #1
 800a130:	f040 82ac 	bne.w	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	695a      	ldr	r2, [r3, #20]
 800a138:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a13c:	441a      	add	r2, r3
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	69da      	ldr	r2, [r3, #28]
 800a146:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a14a:	441a      	add	r2, r3
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6a1a      	ldr	r2, [r3, #32]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d30b      	bcc.n	800a174 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6a1a      	ldr	r2, [r3, #32]
 800a168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a16c:	1ad2      	subs	r2, r2, r3
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	621a      	str	r2, [r3, #32]
 800a172:	e017      	b.n	800a1a4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d108      	bne.n	800a18e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a17c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a18c:	e00a      	b.n	800a1a4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d165      	bne.n	800a278 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c0:	4413      	add	r3, r2
 800a1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	00da      	lsls	r2, r3, #3
 800a1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a1ea:	d91d      	bls.n	800a228 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a1ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1f0:	095b      	lsrs	r3, r3, #5
 800a1f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1f8:	f003 031f 	and.w	r3, r3, #31
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <HAL_PCD_EP_DB_Transmit+0x30c>
 800a200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a202:	3b01      	subs	r3, #1
 800a204:	64bb      	str	r3, [r7, #72]	; 0x48
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a20e:	b29b      	uxth	r3, r3
 800a210:	029b      	lsls	r3, r3, #10
 800a212:	b29b      	uxth	r3, r3
 800a214:	4313      	orrs	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a220:	b29a      	uxth	r2, r3
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	801a      	strh	r2, [r3, #0]
 800a226:	e044      	b.n	800a2b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	b29b      	uxth	r3, r3
 800a236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a23e:	b29a      	uxth	r2, r3
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	801a      	strh	r2, [r3, #0]
 800a244:	e035      	b.n	800a2b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <HAL_PCD_EP_DB_Transmit+0x366>
 800a25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25c:	3301      	adds	r3, #1
 800a25e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	b29a      	uxth	r2, r3
 800a266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a268:	b29b      	uxth	r3, r3
 800a26a:	029b      	lsls	r3, r3, #10
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4313      	orrs	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	801a      	strh	r2, [r3, #0]
 800a276:	e01c      	b.n	800a2b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	785b      	ldrb	r3, [r3, #1]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d118      	bne.n	800a2b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	647b      	str	r3, [r7, #68]	; 0x44
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a28e:	b29b      	uxth	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a294:	4413      	add	r3, r2
 800a296:	647b      	str	r3, [r7, #68]	; 0x44
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	00da      	lsls	r2, r3, #3
 800a29e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6818      	ldr	r0, [r3, #0]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6959      	ldr	r1, [r3, #20]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	891a      	ldrh	r2, [r3, #8]
 800a2be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f006 fd34 	bl	8010d30 <USB_WritePMA>
 800a2c8:	e1e0      	b.n	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	4413      	add	r3, r2
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	6812      	ldr	r2, [r2, #0]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	699a      	ldr	r2, [r3, #24]
 800a2f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d307      	bcc.n	800a30e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	699a      	ldr	r2, [r3, #24]
 800a302:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a306:	1ad2      	subs	r2, r2, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	619a      	str	r2, [r3, #24]
 800a30c:	e002      	b.n	800a314 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2200      	movs	r2, #0
 800a312:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f040 80c0 	bne.w	800a49e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	785b      	ldrb	r3, [r3, #1]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d126      	bne.n	800a374 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a334:	b29b      	uxth	r3, r3
 800a336:	461a      	mov	r2, r3
 800a338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a33a:	4413      	add	r3, r2
 800a33c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	00da      	lsls	r2, r3, #3
 800a344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a346:	4413      	add	r3, r2
 800a348:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a34c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a34e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a358:	b29a      	uxth	r2, r3
 800a35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a35c:	801a      	strh	r2, [r3, #0]
 800a35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	b29b      	uxth	r3, r3
 800a364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a370:	801a      	strh	r2, [r3, #0]
 800a372:	e01a      	b.n	800a3aa <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	785b      	ldrb	r3, [r3, #1]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d116      	bne.n	800a3aa <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	667b      	str	r3, [r7, #100]	; 0x64
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a390:	4413      	add	r3, r2
 800a392:	667b      	str	r3, [r7, #100]	; 0x64
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	00da      	lsls	r2, r3, #3
 800a39a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a39c:	4413      	add	r3, r2
 800a39e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3a2:	663b      	str	r3, [r7, #96]	; 0x60
 800a3a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	677b      	str	r3, [r7, #116]	; 0x74
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	785b      	ldrb	r3, [r3, #1]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d12b      	bne.n	800a410 <HAL_PCD_EP_DB_Transmit+0x516>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3cc:	4413      	add	r3, r2
 800a3ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	00da      	lsls	r2, r3, #3
 800a3d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3fa:	881b      	ldrh	r3, [r3, #0]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a406:	b29a      	uxth	r2, r3
 800a408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a40c:	801a      	strh	r2, [r3, #0]
 800a40e:	e017      	b.n	800a440 <HAL_PCD_EP_DB_Transmit+0x546>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d113      	bne.n	800a440 <HAL_PCD_EP_DB_Transmit+0x546>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a420:	b29b      	uxth	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a426:	4413      	add	r3, r2
 800a428:	677b      	str	r3, [r7, #116]	; 0x74
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	00da      	lsls	r2, r3, #3
 800a430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a432:	4413      	add	r3, r2
 800a434:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a438:	673b      	str	r3, [r7, #112]	; 0x70
 800a43a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a43c:	2200      	movs	r2, #0
 800a43e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	4619      	mov	r1, r3
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f00a faa7 	bl	801499a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a44c:	88fb      	ldrh	r3, [r7, #6]
 800a44e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a452:	2b00      	cmp	r3, #0
 800a454:	f040 811a 	bne.w	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a472:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	441a      	add	r2, r3
 800a484:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a48c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a498:	b29b      	uxth	r3, r3
 800a49a:	8013      	strh	r3, [r2, #0]
 800a49c:	e0f6      	b.n	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a49e:	88fb      	ldrh	r3, [r7, #6]
 800a4a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d121      	bne.n	800a4ec <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	441a      	add	r2, r3
 800a4d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	f040 80ca 	bne.w	800a68c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a500:	441a      	add	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	69da      	ldr	r2, [r3, #28]
 800a50a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a50e:	441a      	add	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6a1a      	ldr	r2, [r3, #32]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d30b      	bcc.n	800a538 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a530:	1ad2      	subs	r2, r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	621a      	str	r2, [r3, #32]
 800a536:	e017      	b.n	800a568 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d108      	bne.n	800a552 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a540:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a550:	e00a      	b.n	800a568 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	657b      	str	r3, [r7, #84]	; 0x54
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d165      	bne.n	800a642 <HAL_PCD_EP_DB_Transmit+0x748>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a584:	b29b      	uxth	r3, r3
 800a586:	461a      	mov	r2, r3
 800a588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a58a:	4413      	add	r3, r2
 800a58c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	00da      	lsls	r2, r3, #3
 800a594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a596:	4413      	add	r3, r2
 800a598:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a59c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5b2:	2b3e      	cmp	r3, #62	; 0x3e
 800a5b4:	d91d      	bls.n	800a5f2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ba:	095b      	lsrs	r3, r3, #5
 800a5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c2:	f003 031f 	and.w	r3, r3, #31
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a5ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	029b      	lsls	r3, r3, #10
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	e041      	b.n	800a676 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_PCD_EP_DB_Transmit+0x716>
 800a5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a608:	b29a      	uxth	r2, r3
 800a60a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	e032      	b.n	800a676 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a614:	085b      	lsrs	r3, r3, #1
 800a616:	66bb      	str	r3, [r7, #104]	; 0x68
 800a618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <HAL_PCD_EP_DB_Transmit+0x730>
 800a624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a626:	3301      	adds	r3, #1
 800a628:	66bb      	str	r3, [r7, #104]	; 0x68
 800a62a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	b29a      	uxth	r2, r3
 800a630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a632:	b29b      	uxth	r3, r3
 800a634:	029b      	lsls	r3, r3, #10
 800a636:	b29b      	uxth	r3, r3
 800a638:	4313      	orrs	r3, r2
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	e019      	b.n	800a676 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d115      	bne.n	800a676 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a652:	b29b      	uxth	r3, r3
 800a654:	461a      	mov	r2, r3
 800a656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a658:	4413      	add	r3, r2
 800a65a:	657b      	str	r3, [r7, #84]	; 0x54
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	00da      	lsls	r2, r3, #3
 800a662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a664:	4413      	add	r3, r2
 800a666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a66a:	653b      	str	r3, [r7, #80]	; 0x50
 800a66c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a670:	b29a      	uxth	r2, r3
 800a672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a674:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6959      	ldr	r1, [r3, #20]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	895a      	ldrh	r2, [r3, #10]
 800a682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a686:	b29b      	uxth	r3, r3
 800a688:	f006 fb52 	bl	8010d30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6a6:	82bb      	strh	r3, [r7, #20]
 800a6a8:	8abb      	ldrh	r3, [r7, #20]
 800a6aa:	f083 0310 	eor.w	r3, r3, #16
 800a6ae:	82bb      	strh	r3, [r7, #20]
 800a6b0:	8abb      	ldrh	r3, [r7, #20]
 800a6b2:	f083 0320 	eor.w	r3, r3, #32
 800a6b6:	82bb      	strh	r3, [r7, #20]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	441a      	add	r2, r3
 800a6c6:	8abb      	ldrh	r3, [r7, #20]
 800a6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3790      	adds	r7, #144	; 0x90
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	817b      	strh	r3, [r7, #10]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a704:	897b      	ldrh	r3, [r7, #10]
 800a706:	f003 0207 	and.w	r2, r3, #7
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	3310      	adds	r3, #16
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4413      	add	r3, r2
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e009      	b.n	800a730 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a71c:	897a      	ldrh	r2, [r7, #10]
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4413      	add	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a730:	893b      	ldrh	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d107      	bne.n	800a746 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2200      	movs	r2, #0
 800a73a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	b29a      	uxth	r2, r3
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	80da      	strh	r2, [r3, #6]
 800a744:	e00b      	b.n	800a75e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2201      	movs	r2, #1
 800a74a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	b29a      	uxth	r2, r3
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	0c1b      	lsrs	r3, r3, #16
 800a758:	b29a      	uxth	r2, r3
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a790:	b29b      	uxth	r3, r3
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f043 0302 	orr.w	r3, r3, #2
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d141      	bne.n	800a852 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7ce:	4b4b      	ldr	r3, [pc, #300]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7da:	d131      	bne.n	800a840 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a7dc:	4b47      	ldr	r3, [pc, #284]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e2:	4a46      	ldr	r2, [pc, #280]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a7ec:	4b43      	ldr	r3, [pc, #268]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7f4:	4a41      	ldr	r2, [pc, #260]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a7fc:	4b40      	ldr	r3, [pc, #256]	; (800a900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2232      	movs	r2, #50	; 0x32
 800a802:	fb02 f303 	mul.w	r3, r2, r3
 800a806:	4a3f      	ldr	r2, [pc, #252]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a808:	fba2 2303 	umull	r2, r3, r2, r3
 800a80c:	0c9b      	lsrs	r3, r3, #18
 800a80e:	3301      	adds	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a812:	e002      	b.n	800a81a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3b01      	subs	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a81a:	4b38      	ldr	r3, [pc, #224]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a826:	d102      	bne.n	800a82e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1f2      	bne.n	800a814 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a82e:	4b33      	ldr	r3, [pc, #204]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a83a:	d158      	bne.n	800a8ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e057      	b.n	800a8f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a840:	4b2e      	ldr	r3, [pc, #184]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a846:	4a2d      	ldr	r2, [pc, #180]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a84c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a850:	e04d      	b.n	800a8ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a858:	d141      	bne.n	800a8de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a85a:	4b28      	ldr	r3, [pc, #160]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a866:	d131      	bne.n	800a8cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a868:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86e:	4a23      	ldr	r2, [pc, #140]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a874:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a878:	4b20      	ldr	r3, [pc, #128]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a880:	4a1e      	ldr	r2, [pc, #120]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a888:	4b1d      	ldr	r3, [pc, #116]	; (800a900 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2232      	movs	r2, #50	; 0x32
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
 800a892:	4a1c      	ldr	r2, [pc, #112]	; (800a904 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a894:	fba2 2303 	umull	r2, r3, r2, r3
 800a898:	0c9b      	lsrs	r3, r3, #18
 800a89a:	3301      	adds	r3, #1
 800a89c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a89e:	e002      	b.n	800a8a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8b2:	d102      	bne.n	800a8ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1f2      	bne.n	800a8a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8ba:	4b10      	ldr	r3, [pc, #64]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c6:	d112      	bne.n	800a8ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e011      	b.n	800a8f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a8cc:	4b0b      	ldr	r3, [pc, #44]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8d2:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a8dc:	e007      	b.n	800a8ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a8de:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8e6:	4a05      	ldr	r2, [pc, #20]	; (800a8fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	40007000 	.word	0x40007000
 800a900:	20000168 	.word	0x20000168
 800a904:	431bde83 	.word	0x431bde83

0800a908 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a908:	b480      	push	{r7}
 800a90a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	4a04      	ldr	r2, [pc, #16]	; (800a924 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a916:	6093      	str	r3, [r2, #8]
}
 800a918:	bf00      	nop
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	40007000 	.word	0x40007000

0800a928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e2fe      	b.n	800af38 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d075      	beq.n	800aa32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a946:	4b97      	ldr	r3, [pc, #604]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	f003 030c 	and.w	r3, r3, #12
 800a94e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a950:	4b94      	ldr	r3, [pc, #592]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	2b0c      	cmp	r3, #12
 800a95e:	d102      	bne.n	800a966 <HAL_RCC_OscConfig+0x3e>
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2b03      	cmp	r3, #3
 800a964:	d002      	beq.n	800a96c <HAL_RCC_OscConfig+0x44>
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2b08      	cmp	r3, #8
 800a96a:	d10b      	bne.n	800a984 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a96c:	4b8d      	ldr	r3, [pc, #564]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d05b      	beq.n	800aa30 <HAL_RCC_OscConfig+0x108>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d157      	bne.n	800aa30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e2d9      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98c:	d106      	bne.n	800a99c <HAL_RCC_OscConfig+0x74>
 800a98e:	4b85      	ldr	r3, [pc, #532]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a84      	ldr	r2, [pc, #528]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e01d      	b.n	800a9d8 <HAL_RCC_OscConfig+0xb0>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9a4:	d10c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x98>
 800a9a6:	4b7f      	ldr	r3, [pc, #508]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a7e      	ldr	r2, [pc, #504]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	4b7c      	ldr	r3, [pc, #496]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a7b      	ldr	r2, [pc, #492]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	e00b      	b.n	800a9d8 <HAL_RCC_OscConfig+0xb0>
 800a9c0:	4b78      	ldr	r3, [pc, #480]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a77      	ldr	r2, [pc, #476]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	4b75      	ldr	r3, [pc, #468]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a74      	ldr	r2, [pc, #464]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d013      	beq.n	800aa08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa fe22 	bl	8005628 <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9e8:	f7fa fe1e 	bl	8005628 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b64      	cmp	r3, #100	; 0x64
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e29e      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9fa:	4b6a      	ldr	r3, [pc, #424]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0f0      	beq.n	800a9e8 <HAL_RCC_OscConfig+0xc0>
 800aa06:	e014      	b.n	800aa32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa08:	f7fa fe0e 	bl	8005628 <HAL_GetTick>
 800aa0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa0e:	e008      	b.n	800aa22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa10:	f7fa fe0a 	bl	8005628 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b64      	cmp	r3, #100	; 0x64
 800aa1c:	d901      	bls.n	800aa22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e28a      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa22:	4b60      	ldr	r3, [pc, #384]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d1f0      	bne.n	800aa10 <HAL_RCC_OscConfig+0xe8>
 800aa2e:	e000      	b.n	800aa32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d075      	beq.n	800ab2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa3e:	4b59      	ldr	r3, [pc, #356]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f003 030c 	and.w	r3, r3, #12
 800aa46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa48:	4b56      	ldr	r3, [pc, #344]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b0c      	cmp	r3, #12
 800aa56:	d102      	bne.n	800aa5e <HAL_RCC_OscConfig+0x136>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d002      	beq.n	800aa64 <HAL_RCC_OscConfig+0x13c>
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d11f      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa64:	4b4f      	ldr	r3, [pc, #316]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d005      	beq.n	800aa7c <HAL_RCC_OscConfig+0x154>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e25d      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa7c:	4b49      	ldr	r3, [pc, #292]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	061b      	lsls	r3, r3, #24
 800aa8a:	4946      	ldr	r1, [pc, #280]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aa90:	4b45      	ldr	r3, [pc, #276]	; (800aba8 <HAL_RCC_OscConfig+0x280>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fa fd7b 	bl	8005590 <HAL_InitTick>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d043      	beq.n	800ab28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e249      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d023      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aaac:	4b3d      	ldr	r3, [pc, #244]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a3c      	ldr	r2, [pc, #240]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab8:	f7fa fdb6 	bl	8005628 <HAL_GetTick>
 800aabc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aac0:	f7fa fdb2 	bl	8005628 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e232      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aad2:	4b34      	ldr	r3, [pc, #208]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aade:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	061b      	lsls	r3, r3, #24
 800aaec:	492d      	ldr	r1, [pc, #180]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	604b      	str	r3, [r1, #4]
 800aaf2:	e01a      	b.n	800ab2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaf4:	4b2b      	ldr	r3, [pc, #172]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a2a      	ldr	r2, [pc, #168]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800aafa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aafe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab00:	f7fa fd92 	bl	8005628 <HAL_GetTick>
 800ab04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab06:	e008      	b.n	800ab1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab08:	f7fa fd8e 	bl	8005628 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d901      	bls.n	800ab1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ab16:	2303      	movs	r3, #3
 800ab18:	e20e      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab1a:	4b22      	ldr	r3, [pc, #136]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f0      	bne.n	800ab08 <HAL_RCC_OscConfig+0x1e0>
 800ab26:	e000      	b.n	800ab2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f003 0308 	and.w	r3, r3, #8
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d041      	beq.n	800abba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	695b      	ldr	r3, [r3, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d01c      	beq.n	800ab78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab3e:	4b19      	ldr	r3, [pc, #100]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab44:	4a17      	ldr	r2, [pc, #92]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab46:	f043 0301 	orr.w	r3, r3, #1
 800ab4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab4e:	f7fa fd6b 	bl	8005628 <HAL_GetTick>
 800ab52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab54:	e008      	b.n	800ab68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab56:	f7fa fd67 	bl	8005628 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d901      	bls.n	800ab68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e1e7      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab68:	4b0e      	ldr	r3, [pc, #56]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab6e:	f003 0302 	and.w	r3, r3, #2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0ef      	beq.n	800ab56 <HAL_RCC_OscConfig+0x22e>
 800ab76:	e020      	b.n	800abba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab7e:	4a09      	ldr	r2, [pc, #36]	; (800aba4 <HAL_RCC_OscConfig+0x27c>)
 800ab80:	f023 0301 	bic.w	r3, r3, #1
 800ab84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab88:	f7fa fd4e 	bl	8005628 <HAL_GetTick>
 800ab8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab8e:	e00d      	b.n	800abac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab90:	f7fa fd4a 	bl	8005628 <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d906      	bls.n	800abac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e1ca      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
 800aba2:	bf00      	nop
 800aba4:	40021000 	.word	0x40021000
 800aba8:	2000017c 	.word	0x2000017c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800abac:	4b8c      	ldr	r3, [pc, #560]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800abae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1ea      	bne.n	800ab90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f000 80a6 	beq.w	800ad14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800abc8:	2300      	movs	r3, #0
 800abca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800abcc:	4b84      	ldr	r3, [pc, #528]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800abce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <HAL_RCC_OscConfig+0x2b4>
 800abd8:	2301      	movs	r3, #1
 800abda:	e000      	b.n	800abde <HAL_RCC_OscConfig+0x2b6>
 800abdc:	2300      	movs	r3, #0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00d      	beq.n	800abfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abe2:	4b7f      	ldr	r3, [pc, #508]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800abe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe6:	4a7e      	ldr	r2, [pc, #504]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800abe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abec:	6593      	str	r3, [r2, #88]	; 0x58
 800abee:	4b7c      	ldr	r3, [pc, #496]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800abf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800abfa:	2301      	movs	r3, #1
 800abfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abfe:	4b79      	ldr	r3, [pc, #484]	; (800ade4 <HAL_RCC_OscConfig+0x4bc>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d118      	bne.n	800ac3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac0a:	4b76      	ldr	r3, [pc, #472]	; (800ade4 <HAL_RCC_OscConfig+0x4bc>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a75      	ldr	r2, [pc, #468]	; (800ade4 <HAL_RCC_OscConfig+0x4bc>)
 800ac10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac16:	f7fa fd07 	bl	8005628 <HAL_GetTick>
 800ac1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac1c:	e008      	b.n	800ac30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac1e:	f7fa fd03 	bl	8005628 <HAL_GetTick>
 800ac22:	4602      	mov	r2, r0
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d901      	bls.n	800ac30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e183      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac30:	4b6c      	ldr	r3, [pc, #432]	; (800ade4 <HAL_RCC_OscConfig+0x4bc>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d0f0      	beq.n	800ac1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d108      	bne.n	800ac56 <HAL_RCC_OscConfig+0x32e>
 800ac44:	4b66      	ldr	r3, [pc, #408]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac4a:	4a65      	ldr	r2, [pc, #404]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac4c:	f043 0301 	orr.w	r3, r3, #1
 800ac50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac54:	e024      	b.n	800aca0 <HAL_RCC_OscConfig+0x378>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	2b05      	cmp	r3, #5
 800ac5c:	d110      	bne.n	800ac80 <HAL_RCC_OscConfig+0x358>
 800ac5e:	4b60      	ldr	r3, [pc, #384]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac64:	4a5e      	ldr	r2, [pc, #376]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac66:	f043 0304 	orr.w	r3, r3, #4
 800ac6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac6e:	4b5c      	ldr	r3, [pc, #368]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac74:	4a5a      	ldr	r2, [pc, #360]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac7e:	e00f      	b.n	800aca0 <HAL_RCC_OscConfig+0x378>
 800ac80:	4b57      	ldr	r3, [pc, #348]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac86:	4a56      	ldr	r2, [pc, #344]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac88:	f023 0301 	bic.w	r3, r3, #1
 800ac8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac90:	4b53      	ldr	r3, [pc, #332]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac96:	4a52      	ldr	r2, [pc, #328]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ac98:	f023 0304 	bic.w	r3, r3, #4
 800ac9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d016      	beq.n	800acd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca8:	f7fa fcbe 	bl	8005628 <HAL_GetTick>
 800acac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acae:	e00a      	b.n	800acc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb0:	f7fa fcba 	bl	8005628 <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	f241 3288 	movw	r2, #5000	; 0x1388
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d901      	bls.n	800acc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e138      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acc6:	4b46      	ldr	r3, [pc, #280]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800acc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800accc:	f003 0302 	and.w	r3, r3, #2
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0ed      	beq.n	800acb0 <HAL_RCC_OscConfig+0x388>
 800acd4:	e015      	b.n	800ad02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acd6:	f7fa fca7 	bl	8005628 <HAL_GetTick>
 800acda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acdc:	e00a      	b.n	800acf4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acde:	f7fa fca3 	bl	8005628 <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acec:	4293      	cmp	r3, r2
 800acee:	d901      	bls.n	800acf4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e121      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acf4:	4b3a      	ldr	r3, [pc, #232]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800acf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfa:	f003 0302 	and.w	r3, r3, #2
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1ed      	bne.n	800acde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad02:	7ffb      	ldrb	r3, [r7, #31]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d105      	bne.n	800ad14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad08:	4b35      	ldr	r3, [pc, #212]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad0c:	4a34      	ldr	r2, [pc, #208]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d03c      	beq.n	800ad9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	699b      	ldr	r3, [r3, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d01c      	beq.n	800ad62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad28:	4b2d      	ldr	r3, [pc, #180]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad2e:	4a2c      	ldr	r2, [pc, #176]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad30:	f043 0301 	orr.w	r3, r3, #1
 800ad34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad38:	f7fa fc76 	bl	8005628 <HAL_GetTick>
 800ad3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad40:	f7fa fc72 	bl	8005628 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e0f2      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad52:	4b23      	ldr	r3, [pc, #140]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0ef      	beq.n	800ad40 <HAL_RCC_OscConfig+0x418>
 800ad60:	e01b      	b.n	800ad9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad62:	4b1f      	ldr	r3, [pc, #124]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad68:	4a1d      	ldr	r2, [pc, #116]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad6a:	f023 0301 	bic.w	r3, r3, #1
 800ad6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad72:	f7fa fc59 	bl	8005628 <HAL_GetTick>
 800ad76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad78:	e008      	b.n	800ad8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad7a:	f7fa fc55 	bl	8005628 <HAL_GetTick>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	1ad3      	subs	r3, r2, r3
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d901      	bls.n	800ad8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e0d5      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad8c:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ad8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1ef      	bne.n	800ad7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 80c9 	beq.w	800af36 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ada4:	4b0e      	ldr	r3, [pc, #56]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f003 030c 	and.w	r3, r3, #12
 800adac:	2b0c      	cmp	r3, #12
 800adae:	f000 8083 	beq.w	800aeb8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d15e      	bne.n	800ae78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a08      	ldr	r2, [pc, #32]	; (800ade0 <HAL_RCC_OscConfig+0x4b8>)
 800adc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc6:	f7fa fc2f 	bl	8005628 <HAL_GetTick>
 800adca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adcc:	e00c      	b.n	800ade8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adce:	f7fa fc2b 	bl	8005628 <HAL_GetTick>
 800add2:	4602      	mov	r2, r0
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	2b02      	cmp	r3, #2
 800adda:	d905      	bls.n	800ade8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e0ab      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
 800ade0:	40021000 	.word	0x40021000
 800ade4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ade8:	4b55      	ldr	r3, [pc, #340]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1ec      	bne.n	800adce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adf4:	4b52      	ldr	r3, [pc, #328]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	4b52      	ldr	r3, [pc, #328]	; (800af44 <HAL_RCC_OscConfig+0x61c>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6a11      	ldr	r1, [r2, #32]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae04:	3a01      	subs	r2, #1
 800ae06:	0112      	lsls	r2, r2, #4
 800ae08:	4311      	orrs	r1, r2
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ae0e:	0212      	lsls	r2, r2, #8
 800ae10:	4311      	orrs	r1, r2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae16:	0852      	lsrs	r2, r2, #1
 800ae18:	3a01      	subs	r2, #1
 800ae1a:	0552      	lsls	r2, r2, #21
 800ae1c:	4311      	orrs	r1, r2
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae22:	0852      	lsrs	r2, r2, #1
 800ae24:	3a01      	subs	r2, #1
 800ae26:	0652      	lsls	r2, r2, #25
 800ae28:	4311      	orrs	r1, r2
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae2e:	06d2      	lsls	r2, r2, #27
 800ae30:	430a      	orrs	r2, r1
 800ae32:	4943      	ldr	r1, [pc, #268]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae38:	4b41      	ldr	r3, [pc, #260]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a40      	ldr	r2, [pc, #256]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae44:	4b3e      	ldr	r3, [pc, #248]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	4a3d      	ldr	r2, [pc, #244]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae50:	f7fa fbea 	bl	8005628 <HAL_GetTick>
 800ae54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae56:	e008      	b.n	800ae6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae58:	f7fa fbe6 	bl	8005628 <HAL_GetTick>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d901      	bls.n	800ae6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e066      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae6a:	4b35      	ldr	r3, [pc, #212]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0f0      	beq.n	800ae58 <HAL_RCC_OscConfig+0x530>
 800ae76:	e05e      	b.n	800af36 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae78:	4b31      	ldr	r3, [pc, #196]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a30      	ldr	r2, [pc, #192]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800ae7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae84:	f7fa fbd0 	bl	8005628 <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae8c:	f7fa fbcc 	bl	8005628 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e04c      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae9e:	4b28      	ldr	r3, [pc, #160]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800aeaa:	4b25      	ldr	r3, [pc, #148]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	4924      	ldr	r1, [pc, #144]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800aeb0:	4b25      	ldr	r3, [pc, #148]	; (800af48 <HAL_RCC_OscConfig+0x620>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	60cb      	str	r3, [r1, #12]
 800aeb6:	e03e      	b.n	800af36 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	69db      	ldr	r3, [r3, #28]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e039      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800aec4:	4b1e      	ldr	r3, [pc, #120]	; (800af40 <HAL_RCC_OscConfig+0x618>)
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f003 0203 	and.w	r2, r3, #3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d12c      	bne.n	800af32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee2:	3b01      	subs	r3, #1
 800aee4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d123      	bne.n	800af32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d11b      	bne.n	800af32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800af06:	429a      	cmp	r2, r3
 800af08:	d113      	bne.n	800af32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af14:	085b      	lsrs	r3, r3, #1
 800af16:	3b01      	subs	r3, #1
 800af18:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d109      	bne.n	800af32 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	085b      	lsrs	r3, r3, #1
 800af2a:	3b01      	subs	r3, #1
 800af2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af2e:	429a      	cmp	r2, r3
 800af30:	d001      	beq.n	800af36 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e000      	b.n	800af38 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	40021000 	.word	0x40021000
 800af44:	019f800c 	.word	0x019f800c
 800af48:	feeefffc 	.word	0xfeeefffc

0800af4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e11e      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af64:	4b91      	ldr	r3, [pc, #580]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 030f 	and.w	r3, r3, #15
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d910      	bls.n	800af94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af72:	4b8e      	ldr	r3, [pc, #568]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f023 020f 	bic.w	r2, r3, #15
 800af7a:	498c      	ldr	r1, [pc, #560]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	4313      	orrs	r3, r2
 800af80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af82:	4b8a      	ldr	r3, [pc, #552]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 030f 	and.w	r3, r3, #15
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d001      	beq.n	800af94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e106      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d073      	beq.n	800b088 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d129      	bne.n	800affc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afa8:	4b81      	ldr	r3, [pc, #516]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0f4      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800afb8:	f000 f99e 	bl	800b2f8 <RCC_GetSysClockFreqFromPLLSource>
 800afbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4a7c      	ldr	r2, [pc, #496]	; (800b1b4 <HAL_RCC_ClockConfig+0x268>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d93f      	bls.n	800b046 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afc6:	4b7a      	ldr	r3, [pc, #488]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d033      	beq.n	800b046 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d12f      	bne.n	800b046 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800afe6:	4b72      	ldr	r3, [pc, #456]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afee:	4a70      	ldr	r2, [pc, #448]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800aff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aff6:	2380      	movs	r3, #128	; 0x80
 800aff8:	617b      	str	r3, [r7, #20]
 800affa:	e024      	b.n	800b046 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d107      	bne.n	800b014 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b004:	4b6a      	ldr	r3, [pc, #424]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d109      	bne.n	800b024 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e0c6      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b014:	4b66      	ldr	r3, [pc, #408]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e0be      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b024:	f000 f8ce 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800b028:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	4a61      	ldr	r2, [pc, #388]	; (800b1b4 <HAL_RCC_ClockConfig+0x268>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d909      	bls.n	800b046 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b032:	4b5f      	ldr	r3, [pc, #380]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b03a:	4a5d      	ldr	r2, [pc, #372]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b040:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b042:	2380      	movs	r3, #128	; 0x80
 800b044:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b046:	4b5a      	ldr	r3, [pc, #360]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f023 0203 	bic.w	r2, r3, #3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	4957      	ldr	r1, [pc, #348]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b054:	4313      	orrs	r3, r2
 800b056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b058:	f7fa fae6 	bl	8005628 <HAL_GetTick>
 800b05c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b05e:	e00a      	b.n	800b076 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b060:	f7fa fae2 	bl	8005628 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06e:	4293      	cmp	r3, r2
 800b070:	d901      	bls.n	800b076 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b072:	2303      	movs	r3, #3
 800b074:	e095      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b076:	4b4e      	ldr	r3, [pc, #312]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	f003 020c 	and.w	r2, r3, #12
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	429a      	cmp	r2, r3
 800b086:	d1eb      	bne.n	800b060 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0302 	and.w	r3, r3, #2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d023      	beq.n	800b0dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d005      	beq.n	800b0ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0a0:	4b43      	ldr	r3, [pc, #268]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	4a42      	ldr	r2, [pc, #264]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0308 	and.w	r3, r3, #8
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b0b8:	4b3d      	ldr	r3, [pc, #244]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0c0:	4a3b      	ldr	r2, [pc, #236]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0c8:	4b39      	ldr	r3, [pc, #228]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	4936      	ldr	r1, [pc, #216]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	608b      	str	r3, [r1, #8]
 800b0da:	e008      	b.n	800b0ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d105      	bne.n	800b0ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b0e2:	4b33      	ldr	r3, [pc, #204]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	4a32      	ldr	r2, [pc, #200]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b0e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d21d      	bcs.n	800b138 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0fc:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f023 020f 	bic.w	r2, r3, #15
 800b104:	4929      	ldr	r1, [pc, #164]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	4313      	orrs	r3, r2
 800b10a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b10c:	f7fa fa8c 	bl	8005628 <HAL_GetTick>
 800b110:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b112:	e00a      	b.n	800b12a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b114:	f7fa fa88 	bl	8005628 <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b122:	4293      	cmp	r3, r2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e03b      	b.n	800b1a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b12a:	4b20      	ldr	r3, [pc, #128]	; (800b1ac <HAL_RCC_ClockConfig+0x260>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d1ed      	bne.n	800b114 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d008      	beq.n	800b156 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b144:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4917      	ldr	r1, [pc, #92]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b152:	4313      	orrs	r3, r2
 800b154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0308 	and.w	r3, r3, #8
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d009      	beq.n	800b176 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b162:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	490f      	ldr	r1, [pc, #60]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b172:	4313      	orrs	r3, r2
 800b174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b176:	f000 f825 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800b17a:	4602      	mov	r2, r0
 800b17c:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <HAL_RCC_ClockConfig+0x264>)
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	091b      	lsrs	r3, r3, #4
 800b182:	f003 030f 	and.w	r3, r3, #15
 800b186:	490c      	ldr	r1, [pc, #48]	; (800b1b8 <HAL_RCC_ClockConfig+0x26c>)
 800b188:	5ccb      	ldrb	r3, [r1, r3]
 800b18a:	f003 031f 	and.w	r3, r3, #31
 800b18e:	fa22 f303 	lsr.w	r3, r2, r3
 800b192:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <HAL_RCC_ClockConfig+0x270>)
 800b194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b196:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <HAL_RCC_ClockConfig+0x274>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fa f9f8 	bl	8005590 <HAL_InitTick>
 800b1a0:	4603      	mov	r3, r0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40022000 	.word	0x40022000
 800b1b0:	40021000 	.word	0x40021000
 800b1b4:	04c4b400 	.word	0x04c4b400
 800b1b8:	08018050 	.word	0x08018050
 800b1bc:	20000168 	.word	0x20000168
 800b1c0:	2000017c 	.word	0x2000017c

0800b1c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b1ca:	4b2c      	ldr	r3, [pc, #176]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f003 030c 	and.w	r3, r3, #12
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	d102      	bne.n	800b1dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1d6:	4b2a      	ldr	r3, [pc, #168]	; (800b280 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	e047      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b1dc:	4b27      	ldr	r3, [pc, #156]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	f003 030c 	and.w	r3, r3, #12
 800b1e4:	2b08      	cmp	r3, #8
 800b1e6:	d102      	bne.n	800b1ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b1e8:	4b26      	ldr	r3, [pc, #152]	; (800b284 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b1ea:	613b      	str	r3, [r7, #16]
 800b1ec:	e03e      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b1ee:	4b23      	ldr	r3, [pc, #140]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 030c 	and.w	r3, r3, #12
 800b1f6:	2b0c      	cmp	r3, #12
 800b1f8:	d136      	bne.n	800b268 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b1fa:	4b20      	ldr	r3, [pc, #128]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b204:	4b1d      	ldr	r3, [pc, #116]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	091b      	lsrs	r3, r3, #4
 800b20a:	f003 030f 	and.w	r3, r3, #15
 800b20e:	3301      	adds	r3, #1
 800b210:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b03      	cmp	r3, #3
 800b216:	d10c      	bne.n	800b232 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b218:	4a1a      	ldr	r2, [pc, #104]	; (800b284 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b220:	4a16      	ldr	r2, [pc, #88]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b222:	68d2      	ldr	r2, [r2, #12]
 800b224:	0a12      	lsrs	r2, r2, #8
 800b226:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b22a:	fb02 f303 	mul.w	r3, r2, r3
 800b22e:	617b      	str	r3, [r7, #20]
      break;
 800b230:	e00c      	b.n	800b24c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b232:	4a13      	ldr	r2, [pc, #76]	; (800b280 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	fbb2 f3f3 	udiv	r3, r2, r3
 800b23a:	4a10      	ldr	r2, [pc, #64]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b23c:	68d2      	ldr	r2, [r2, #12]
 800b23e:	0a12      	lsrs	r2, r2, #8
 800b240:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b244:	fb02 f303 	mul.w	r3, r2, r3
 800b248:	617b      	str	r3, [r7, #20]
      break;
 800b24a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b24c:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	0e5b      	lsrs	r3, r3, #25
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	3301      	adds	r3, #1
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	fbb2 f3f3 	udiv	r3, r2, r3
 800b264:	613b      	str	r3, [r7, #16]
 800b266:	e001      	b.n	800b26c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b26c:	693b      	ldr	r3, [r7, #16]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	371c      	adds	r7, #28
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	40021000 	.word	0x40021000
 800b280:	00f42400 	.word	0x00f42400
 800b284:	007a1200 	.word	0x007a1200

0800b288 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b288:	b480      	push	{r7}
 800b28a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b28c:	4b03      	ldr	r3, [pc, #12]	; (800b29c <HAL_RCC_GetHCLKFreq+0x14>)
 800b28e:	681b      	ldr	r3, [r3, #0]
}
 800b290:	4618      	mov	r0, r3
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20000168 	.word	0x20000168

0800b2a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b2a4:	f7ff fff0 	bl	800b288 <HAL_RCC_GetHCLKFreq>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	f003 0307 	and.w	r3, r3, #7
 800b2b4:	4904      	ldr	r1, [pc, #16]	; (800b2c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2b6:	5ccb      	ldrb	r3, [r1, r3]
 800b2b8:	f003 031f 	and.w	r3, r3, #31
 800b2bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	40021000 	.word	0x40021000
 800b2c8:	08018060 	.word	0x08018060

0800b2cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b2d0:	f7ff ffda 	bl	800b288 <HAL_RCC_GetHCLKFreq>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	4b06      	ldr	r3, [pc, #24]	; (800b2f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	0adb      	lsrs	r3, r3, #11
 800b2dc:	f003 0307 	and.w	r3, r3, #7
 800b2e0:	4904      	ldr	r1, [pc, #16]	; (800b2f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2e2:	5ccb      	ldrb	r3, [r1, r3]
 800b2e4:	f003 031f 	and.w	r3, r3, #31
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40021000 	.word	0x40021000
 800b2f4:	08018060 	.word	0x08018060

0800b2f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b2fe:	4b1e      	ldr	r3, [pc, #120]	; (800b378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b308:	4b1b      	ldr	r3, [pc, #108]	; (800b378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	091b      	lsrs	r3, r3, #4
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b03      	cmp	r3, #3
 800b31a:	d10c      	bne.n	800b336 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b31c:	4a17      	ldr	r2, [pc, #92]	; (800b37c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	fbb2 f3f3 	udiv	r3, r2, r3
 800b324:	4a14      	ldr	r2, [pc, #80]	; (800b378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b326:	68d2      	ldr	r2, [r2, #12]
 800b328:	0a12      	lsrs	r2, r2, #8
 800b32a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b32e:	fb02 f303 	mul.w	r3, r2, r3
 800b332:	617b      	str	r3, [r7, #20]
    break;
 800b334:	e00c      	b.n	800b350 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b336:	4a12      	ldr	r2, [pc, #72]	; (800b380 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b33e:	4a0e      	ldr	r2, [pc, #56]	; (800b378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b340:	68d2      	ldr	r2, [r2, #12]
 800b342:	0a12      	lsrs	r2, r2, #8
 800b344:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	617b      	str	r3, [r7, #20]
    break;
 800b34e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b350:	4b09      	ldr	r3, [pc, #36]	; (800b378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	0e5b      	lsrs	r3, r3, #25
 800b356:	f003 0303 	and.w	r3, r3, #3
 800b35a:	3301      	adds	r3, #1
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	fbb2 f3f3 	udiv	r3, r2, r3
 800b368:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b36a:	687b      	ldr	r3, [r7, #4]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	371c      	adds	r7, #28
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	40021000 	.word	0x40021000
 800b37c:	007a1200 	.word	0x007a1200
 800b380:	00f42400 	.word	0x00f42400

0800b384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b38c:	2300      	movs	r3, #0
 800b38e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b390:	2300      	movs	r3, #0
 800b392:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8098 	beq.w	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3a6:	4b43      	ldr	r3, [pc, #268]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10d      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3b2:	4b40      	ldr	r3, [pc, #256]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	4a3f      	ldr	r2, [pc, #252]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3bc:	6593      	str	r3, [r2, #88]	; 0x58
 800b3be:	4b3d      	ldr	r3, [pc, #244]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c6:	60bb      	str	r3, [r7, #8]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3ce:	4b3a      	ldr	r3, [pc, #232]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a39      	ldr	r2, [pc, #228]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3da:	f7fa f925 	bl	8005628 <HAL_GetTick>
 800b3de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3e0:	e009      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3e2:	f7fa f921 	bl	8005628 <HAL_GetTick>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d902      	bls.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	74fb      	strb	r3, [r7, #19]
        break;
 800b3f4:	e005      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3f6:	4b30      	ldr	r3, [pc, #192]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0ef      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b402:	7cfb      	ldrb	r3, [r7, #19]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d159      	bne.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b408:	4b2a      	ldr	r3, [pc, #168]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b40e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b412:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d01e      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	429a      	cmp	r2, r3
 800b422:	d019      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b424:	4b23      	ldr	r3, [pc, #140]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b42e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b430:	4b20      	ldr	r3, [pc, #128]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b436:	4a1f      	ldr	r2, [pc, #124]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b43c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b440:	4b1c      	ldr	r3, [pc, #112]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b446:	4a1b      	ldr	r2, [pc, #108]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b44c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b450:	4a18      	ldr	r2, [pc, #96]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d016      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b462:	f7fa f8e1 	bl	8005628 <HAL_GetTick>
 800b466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b468:	e00b      	b.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b46a:	f7fa f8dd 	bl	8005628 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f241 3288 	movw	r2, #5000	; 0x1388
 800b478:	4293      	cmp	r3, r2
 800b47a:	d902      	bls.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	74fb      	strb	r3, [r7, #19]
            break;
 800b480:	e006      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b482:	4b0c      	ldr	r3, [pc, #48]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0ec      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b490:	7cfb      	ldrb	r3, [r7, #19]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10b      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b49c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	4903      	ldr	r1, [pc, #12]	; (800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b4ac:	e008      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4ae:	7cfb      	ldrb	r3, [r7, #19]
 800b4b0:	74bb      	strb	r3, [r7, #18]
 800b4b2:	e005      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b4b4:	40021000 	.word	0x40021000
 800b4b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4bc:	7cfb      	ldrb	r3, [r7, #19]
 800b4be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b4c0:	7c7b      	ldrb	r3, [r7, #17]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d105      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4c6:	4ba6      	ldr	r3, [pc, #664]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ca:	4aa5      	ldr	r2, [pc, #660]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00a      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b4de:	4ba0      	ldr	r3, [pc, #640]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e4:	f023 0203 	bic.w	r2, r3, #3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	499c      	ldr	r1, [pc, #624]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f003 0302 	and.w	r3, r3, #2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00a      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b500:	4b97      	ldr	r3, [pc, #604]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b506:	f023 020c 	bic.w	r2, r3, #12
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	4994      	ldr	r1, [pc, #592]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b510:	4313      	orrs	r3, r2
 800b512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00a      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b522:	4b8f      	ldr	r3, [pc, #572]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b528:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	498b      	ldr	r1, [pc, #556]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b532:	4313      	orrs	r3, r2
 800b534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0308 	and.w	r3, r3, #8
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00a      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b544:	4b86      	ldr	r3, [pc, #536]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b54a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	4983      	ldr	r1, [pc, #524]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b554:	4313      	orrs	r3, r2
 800b556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b566:	4b7e      	ldr	r3, [pc, #504]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	497a      	ldr	r1, [pc, #488]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b576:	4313      	orrs	r3, r2
 800b578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b588:	4b75      	ldr	r3, [pc, #468]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b58e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	699b      	ldr	r3, [r3, #24]
 800b596:	4972      	ldr	r1, [pc, #456]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b598:	4313      	orrs	r3, r2
 800b59a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b5aa:	4b6d      	ldr	r3, [pc, #436]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	4969      	ldr	r1, [pc, #420]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b5cc:	4b64      	ldr	r3, [pc, #400]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	4961      	ldr	r1, [pc, #388]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5ee:	4b5c      	ldr	r3, [pc, #368]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	4958      	ldr	r1, [pc, #352]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d015      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b610:	4b53      	ldr	r3, [pc, #332]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	4950      	ldr	r1, [pc, #320]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b620:	4313      	orrs	r3, r2
 800b622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b62e:	d105      	bne.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b630:	4b4b      	ldr	r3, [pc, #300]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	4a4a      	ldr	r2, [pc, #296]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b63a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b644:	2b00      	cmp	r3, #0
 800b646:	d015      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b648:	4b45      	ldr	r3, [pc, #276]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	4942      	ldr	r1, [pc, #264]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b658:	4313      	orrs	r3, r2
 800b65a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b666:	d105      	bne.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b668:	4b3d      	ldr	r3, [pc, #244]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	4a3c      	ldr	r2, [pc, #240]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b672:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d015      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b680:	4b37      	ldr	r3, [pc, #220]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b686:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	4934      	ldr	r1, [pc, #208]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b690:	4313      	orrs	r3, r2
 800b692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b69e:	d105      	bne.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6a0:	4b2f      	ldr	r3, [pc, #188]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4a2e      	ldr	r2, [pc, #184]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d015      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6b8:	4b29      	ldr	r3, [pc, #164]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c6:	4926      	ldr	r1, [pc, #152]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6d6:	d105      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6d8:	4b21      	ldr	r3, [pc, #132]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	4a20      	ldr	r2, [pc, #128]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d015      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6f0:	4b1b      	ldr	r3, [pc, #108]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	4918      	ldr	r1, [pc, #96]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b70e:	d105      	bne.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b710:	4b13      	ldr	r3, [pc, #76]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	4a12      	ldr	r2, [pc, #72]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b71a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d015      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b728:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b736:	490a      	ldr	r1, [pc, #40]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b746:	d105      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	4a04      	ldr	r2, [pc, #16]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800b74e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b752:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b754:	7cbb      	ldrb	r3, [r7, #18]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	40021000 	.word	0x40021000

0800b764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e09d      	b.n	800b8b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d108      	bne.n	800b790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b786:	d009      	beq.n	800b79c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	61da      	str	r2, [r3, #28]
 800b78e:	e005      	b.n	800b79c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7f8 ff2e 	bl	8004618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7dc:	d902      	bls.n	800b7e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e002      	b.n	800b7ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b7e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7f2:	d007      	beq.n	800b804 <HAL_SPI_Init+0xa0>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7fc:	d002      	beq.n	800b804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	431a      	orrs	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b832:	431a      	orrs	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	69db      	ldr	r3, [r3, #28]
 800b838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b83c:	431a      	orrs	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b846:	ea42 0103 	orr.w	r1, r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	430a      	orrs	r2, r1
 800b858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	f003 0204 	and.w	r2, r3, #4
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	f003 0308 	and.w	r3, r3, #8
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b880:	ea42 0103 	orr.w	r1, r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69da      	ldr	r2, [r3, #28]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b088      	sub	sp, #32
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	603b      	str	r3, [r7, #0]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d101      	bne.n	800b8dc <HAL_SPI_Transmit+0x22>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	e15f      	b.n	800bb9c <HAL_SPI_Transmit+0x2e2>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8e4:	f7f9 fea0 	bl	8005628 <HAL_GetTick>
 800b8e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d002      	beq.n	800b900 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b8fa:	2302      	movs	r3, #2
 800b8fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b8fe:	e148      	b.n	800bb92 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <HAL_SPI_Transmit+0x52>
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b910:	e13f      	b.n	800bb92 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2203      	movs	r2, #3
 800b916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	88fa      	ldrh	r2, [r7, #6]
 800b930:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b95c:	d10f      	bne.n	800b97e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b96c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b97c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b988:	2b40      	cmp	r3, #64	; 0x40
 800b98a:	d007      	beq.n	800b99c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9a4:	d94f      	bls.n	800ba46 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <HAL_SPI_Transmit+0xfa>
 800b9ae:	8afb      	ldrh	r3, [r7, #22]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d142      	bne.n	800ba3a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b8:	881a      	ldrh	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	1c9a      	adds	r2, r3, #2
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9d8:	e02f      	b.n	800ba3a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	f003 0302 	and.w	r3, r3, #2
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d112      	bne.n	800ba0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ec:	881a      	ldrh	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f8:	1c9a      	adds	r2, r3, #2
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba0c:	e015      	b.n	800ba3a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba0e:	f7f9 fe0b 	bl	8005628 <HAL_GetTick>
 800ba12:	4602      	mov	r2, r0
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	683a      	ldr	r2, [r7, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d803      	bhi.n	800ba26 <HAL_SPI_Transmit+0x16c>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba24:	d102      	bne.n	800ba2c <HAL_SPI_Transmit+0x172>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ba38:	e0ab      	b.n	800bb92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1ca      	bne.n	800b9da <HAL_SPI_Transmit+0x120>
 800ba44:	e080      	b.n	800bb48 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d002      	beq.n	800ba54 <HAL_SPI_Transmit+0x19a>
 800ba4e:	8afb      	ldrh	r3, [r7, #22]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d174      	bne.n	800bb3e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d912      	bls.n	800ba84 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	881a      	ldrh	r2, [r3, #0]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6e:	1c9a      	adds	r2, r3, #2
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	3b02      	subs	r3, #2
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ba82:	e05c      	b.n	800bb3e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	7812      	ldrb	r2, [r2, #0]
 800ba90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	3b01      	subs	r3, #1
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800baaa:	e048      	b.n	800bb3e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689b      	ldr	r3, [r3, #8]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d12b      	bne.n	800bb12 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800babe:	b29b      	uxth	r3, r3
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d912      	bls.n	800baea <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac8:	881a      	ldrh	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad4:	1c9a      	adds	r2, r3, #2
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bade:	b29b      	uxth	r3, r3
 800bae0:	3b02      	subs	r3, #2
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bae8:	e029      	b.n	800bb3e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	330c      	adds	r3, #12
 800baf4:	7812      	ldrb	r2, [r2, #0]
 800baf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bb10:	e015      	b.n	800bb3e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb12:	f7f9 fd89 	bl	8005628 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d803      	bhi.n	800bb2a <HAL_SPI_Transmit+0x270>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb28:	d102      	bne.n	800bb30 <HAL_SPI_Transmit+0x276>
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d106      	bne.n	800bb3e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800bb30:	2303      	movs	r3, #3
 800bb32:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800bb3c:	e029      	b.n	800bb92 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1b1      	bne.n	800baac <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f000 fad7 	bl	800c100 <SPI_EndRxTxTransaction>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb66:	2300      	movs	r3, #0
 800bb68:	613b      	str	r3, [r7, #16]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	613b      	str	r3, [r7, #16]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	613b      	str	r3, [r7, #16]
 800bb7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	77fb      	strb	r3, [r7, #31]
 800bb88:	e003      	b.n	800bb92 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bb9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3720      	adds	r7, #32
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <HAL_SPI_Transmit_DMA+0x20>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e0d4      	b.n	800bd6e <HAL_SPI_Transmit_DMA+0x1ca>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d002      	beq.n	800bbde <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbdc:	e0c2      	b.n	800bd64 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <HAL_SPI_Transmit_DMA+0x46>
 800bbe4:	88fb      	ldrh	r3, [r7, #6]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bbee:	e0b9      	b.n	800bd64 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2203      	movs	r2, #3
 800bbf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	88fa      	ldrh	r2, [r7, #6]
 800bc0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc3a:	d10f      	bne.n	800bc5c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc60:	4a45      	ldr	r2, [pc, #276]	; (800bd78 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bc62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc68:	4a44      	ldr	r2, [pc, #272]	; (800bd7c <HAL_SPI_Transmit_DMA+0x1d8>)
 800bc6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc70:	4a43      	ldr	r2, [pc, #268]	; (800bd80 <HAL_SPI_Transmit_DMA+0x1dc>)
 800bc72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc78:	2200      	movs	r2, #0
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc8a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc94:	d82d      	bhi.n	800bcf2 <HAL_SPI_Transmit_DMA+0x14e>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bca0:	d127      	bne.n	800bcf2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10f      	bne.n	800bcd0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bcbe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcce:	e010      	b.n	800bcf2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685a      	ldr	r2, [r3, #4]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcde:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	085b      	lsrs	r3, r3, #1
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	3301      	adds	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	330c      	adds	r3, #12
 800bd02:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800bd0a:	f7fc f8d5 	bl	8007eb8 <HAL_DMA_Start_IT>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d008      	beq.n	800bd26 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd18:	f043 0210 	orr.w	r2, r3, #16
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	75fb      	strb	r3, [r7, #23]

    goto error;
 800bd24:	e01e      	b.n	800bd64 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd30:	2b40      	cmp	r3, #64	; 0x40
 800bd32:	d007      	beq.n	800bd44 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd42:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0220 	orr.w	r2, r2, #32
 800bd52:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0202 	orr.w	r2, r2, #2
 800bd62:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	0800be67 	.word	0x0800be67
 800bd7c:	0800bdc1 	.word	0x0800bdc1
 800bd80:	0800be83 	.word	0x0800be83

0800bd84 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdcc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdce:	f7f9 fc2b 	bl	8005628 <HAL_GetTick>
 800bdd2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d03b      	beq.n	800be5a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0220 	bic.w	r2, r2, #32
 800bdf0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f022 0202 	bic.w	r2, r2, #2
 800be00:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	2164      	movs	r1, #100	; 0x64
 800be06:	6978      	ldr	r0, [r7, #20]
 800be08:	f000 f97a 	bl	800c100 <SPI_EndRxTxTransaction>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d005      	beq.n	800be1e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be16:	f043 0220 	orr.w	r2, r3, #32
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10a      	bne.n	800be3c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be26:	2300      	movs	r3, #0
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	60fb      	str	r3, [r7, #12]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2200      	movs	r2, #0
 800be40:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800be52:	6978      	ldr	r0, [r7, #20]
 800be54:	f7ff ffaa 	bl	800bdac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800be58:	e002      	b.n	800be60 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	f7ff ff92 	bl	800bd84 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}

0800be66 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be66:	b580      	push	{r7, lr}
 800be68:	b084      	sub	sp, #16
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f7ff ff8f 	bl	800bd98 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f022 0203 	bic.w	r2, r2, #3
 800be9e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bea4:	f043 0210 	orr.w	r2, r3, #16
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7ff ff79 	bl	800bdac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af00      	add	r7, sp, #0
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bed4:	f7f9 fba8 	bl	8005628 <HAL_GetTick>
 800bed8:	4602      	mov	r2, r0
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4413      	add	r3, r2
 800bee2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bee4:	f7f9 fba0 	bl	8005628 <HAL_GetTick>
 800bee8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800beea:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	015b      	lsls	r3, r3, #5
 800bef0:	0d1b      	lsrs	r3, r3, #20
 800bef2:	69fa      	ldr	r2, [r7, #28]
 800bef4:	fb02 f303 	mul.w	r3, r2, r3
 800bef8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800befa:	e054      	b.n	800bfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d050      	beq.n	800bfa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bf04:	f7f9 fb90 	bl	8005628 <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	69fa      	ldr	r2, [r7, #28]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d902      	bls.n	800bf1a <SPI_WaitFlagStateUntilTimeout+0x56>
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d13d      	bne.n	800bf96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf32:	d111      	bne.n	800bf58 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf3c:	d004      	beq.n	800bf48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf46:	d107      	bne.n	800bf58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf60:	d10f      	bne.n	800bf82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bf80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e017      	b.n	800bfc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	79fb      	ldrb	r3, [r7, #7]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d19b      	bne.n	800befc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000168 	.word	0x20000168

0800bfd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	; 0x28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bfe6:	f7f9 fb1f 	bl	8005628 <HAL_GetTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	1a9b      	subs	r3, r3, r2
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	4413      	add	r3, r2
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800bff6:	f7f9 fb17 	bl	8005628 <HAL_GetTick>
 800bffa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c004:	4b3d      	ldr	r3, [pc, #244]	; (800c0fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	00da      	lsls	r2, r3, #3
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	0d1b      	lsrs	r3, r3, #20
 800c014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c016:	fb02 f303 	mul.w	r3, r2, r3
 800c01a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c01c:	e060      	b.n	800c0e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c024:	d107      	bne.n	800c036 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d104      	bne.n	800c036 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	b2db      	uxtb	r3, r3
 800c032:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c034:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03c:	d050      	beq.n	800c0e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c03e:	f7f9 faf3 	bl	8005628 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d902      	bls.n	800c054 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	2b00      	cmp	r3, #0
 800c052:	d13d      	bne.n	800c0d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c062:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c06c:	d111      	bne.n	800c092 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c076:	d004      	beq.n	800c082 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c080:	d107      	bne.n	800c092 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c090:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c09a:	d10f      	bne.n	800c0bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0aa:	601a      	str	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c0ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e010      	b.n	800c0f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689a      	ldr	r2, [r3, #8]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d196      	bne.n	800c01e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3728      	adds	r7, #40	; 0x28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000168 	.word	0x20000168

0800c100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2200      	movs	r2, #0
 800c114:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f7ff ff5b 	bl	800bfd4 <SPI_WaitFifoStateUntilTimeout>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d007      	beq.n	800c134 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c128:	f043 0220 	orr.w	r2, r3, #32
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c130:	2303      	movs	r3, #3
 800c132:	e027      	b.n	800c184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	2200      	movs	r2, #0
 800c13c:	2180      	movs	r1, #128	; 0x80
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7ff fec0 	bl	800bec4 <SPI_WaitFlagStateUntilTimeout>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d007      	beq.n	800c15a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14e:	f043 0220 	orr.w	r2, r3, #32
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e014      	b.n	800c184 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2200      	movs	r2, #0
 800c162:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f7ff ff34 	bl	800bfd4 <SPI_WaitFifoStateUntilTimeout>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c176:	f043 0220 	orr.w	r2, r3, #32
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e000      	b.n	800c184 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d101      	bne.n	800c19e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e049      	b.n	800c232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f8 fb52 	bl	800485c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f000 fe98 	bl	800cf00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
	...

0800c23c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d001      	beq.n	800c254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e04a      	b.n	800c2ea <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2202      	movs	r2, #2
 800c258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68da      	ldr	r2, [r3, #12]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f042 0201 	orr.w	r2, r2, #1
 800c26a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a21      	ldr	r2, [pc, #132]	; (800c2f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d018      	beq.n	800c2a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27e:	d013      	beq.n	800c2a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a1d      	ldr	r2, [pc, #116]	; (800c2fc <HAL_TIM_Base_Start_IT+0xc0>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00e      	beq.n	800c2a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a1c      	ldr	r2, [pc, #112]	; (800c300 <HAL_TIM_Base_Start_IT+0xc4>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d009      	beq.n	800c2a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a1a      	ldr	r2, [pc, #104]	; (800c304 <HAL_TIM_Base_Start_IT+0xc8>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d004      	beq.n	800c2a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a19      	ldr	r2, [pc, #100]	; (800c308 <HAL_TIM_Base_Start_IT+0xcc>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d115      	bne.n	800c2d4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	689a      	ldr	r2, [r3, #8]
 800c2ae:	4b17      	ldr	r3, [pc, #92]	; (800c30c <HAL_TIM_Base_Start_IT+0xd0>)
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2b06      	cmp	r3, #6
 800c2b8:	d015      	beq.n	800c2e6 <HAL_TIM_Base_Start_IT+0xaa>
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2c0:	d011      	beq.n	800c2e6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f042 0201 	orr.w	r2, r2, #1
 800c2d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2d2:	e008      	b.n	800c2e6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f042 0201 	orr.w	r2, r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
 800c2e4:	e000      	b.n	800c2e8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	40012c00 	.word	0x40012c00
 800c2fc:	40000400 	.word	0x40000400
 800c300:	40000800 	.word	0x40000800
 800c304:	40013400 	.word	0x40013400
 800c308:	40014000 	.word	0x40014000
 800c30c:	00010007 	.word	0x00010007

0800c310 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68da      	ldr	r2, [r3, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f022 0201 	bic.w	r2, r2, #1
 800c326:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6a1a      	ldr	r2, [r3, #32]
 800c32e:	f241 1311 	movw	r3, #4369	; 0x1111
 800c332:	4013      	ands	r3, r2
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10f      	bne.n	800c358 <HAL_TIM_Base_Stop_IT+0x48>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6a1a      	ldr	r2, [r3, #32]
 800c33e:	f244 4344 	movw	r3, #17476	; 0x4444
 800c342:	4013      	ands	r3, r2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d107      	bne.n	800c358 <HAL_TIM_Base_Stop_IT+0x48>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f022 0201 	bic.w	r2, r2, #1
 800c356:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e049      	b.n	800c414 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7f8 f9b1 	bl	80046fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2202      	movs	r2, #2
 800c39e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	f000 fda7 	bl	800cf00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d109      	bne.n	800c444 <HAL_TIM_PWM_Start_IT+0x28>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b01      	cmp	r3, #1
 800c43a:	bf14      	ite	ne
 800c43c:	2301      	movne	r3, #1
 800c43e:	2300      	moveq	r3, #0
 800c440:	b2db      	uxtb	r3, r3
 800c442:	e03c      	b.n	800c4be <HAL_TIM_PWM_Start_IT+0xa2>
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b04      	cmp	r3, #4
 800c448:	d109      	bne.n	800c45e <HAL_TIM_PWM_Start_IT+0x42>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b01      	cmp	r3, #1
 800c454:	bf14      	ite	ne
 800c456:	2301      	movne	r3, #1
 800c458:	2300      	moveq	r3, #0
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	e02f      	b.n	800c4be <HAL_TIM_PWM_Start_IT+0xa2>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b08      	cmp	r3, #8
 800c462:	d109      	bne.n	800c478 <HAL_TIM_PWM_Start_IT+0x5c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	bf14      	ite	ne
 800c470:	2301      	movne	r3, #1
 800c472:	2300      	moveq	r3, #0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	e022      	b.n	800c4be <HAL_TIM_PWM_Start_IT+0xa2>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b0c      	cmp	r3, #12
 800c47c:	d109      	bne.n	800c492 <HAL_TIM_PWM_Start_IT+0x76>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b01      	cmp	r3, #1
 800c488:	bf14      	ite	ne
 800c48a:	2301      	movne	r3, #1
 800c48c:	2300      	moveq	r3, #0
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	e015      	b.n	800c4be <HAL_TIM_PWM_Start_IT+0xa2>
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	2b10      	cmp	r3, #16
 800c496:	d109      	bne.n	800c4ac <HAL_TIM_PWM_Start_IT+0x90>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	bf14      	ite	ne
 800c4a4:	2301      	movne	r3, #1
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	e008      	b.n	800c4be <HAL_TIM_PWM_Start_IT+0xa2>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	bf14      	ite	ne
 800c4b8:	2301      	movne	r3, #1
 800c4ba:	2300      	moveq	r3, #0
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e0e2      	b.n	800c68c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d104      	bne.n	800c4d6 <HAL_TIM_PWM_Start_IT+0xba>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4d4:	e023      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x102>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b04      	cmp	r3, #4
 800c4da:	d104      	bne.n	800c4e6 <HAL_TIM_PWM_Start_IT+0xca>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4e4:	e01b      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x102>
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d104      	bne.n	800c4f6 <HAL_TIM_PWM_Start_IT+0xda>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4f4:	e013      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x102>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b0c      	cmp	r3, #12
 800c4fa:	d104      	bne.n	800c506 <HAL_TIM_PWM_Start_IT+0xea>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2202      	movs	r2, #2
 800c500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c504:	e00b      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x102>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b10      	cmp	r3, #16
 800c50a:	d104      	bne.n	800c516 <HAL_TIM_PWM_Start_IT+0xfa>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2202      	movs	r2, #2
 800c510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c514:	e003      	b.n	800c51e <HAL_TIM_PWM_Start_IT+0x102>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2202      	movs	r2, #2
 800c51a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b0c      	cmp	r3, #12
 800c522:	d841      	bhi.n	800c5a8 <HAL_TIM_PWM_Start_IT+0x18c>
 800c524:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <HAL_TIM_PWM_Start_IT+0x110>)
 800c526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52a:	bf00      	nop
 800c52c:	0800c561 	.word	0x0800c561
 800c530:	0800c5a9 	.word	0x0800c5a9
 800c534:	0800c5a9 	.word	0x0800c5a9
 800c538:	0800c5a9 	.word	0x0800c5a9
 800c53c:	0800c573 	.word	0x0800c573
 800c540:	0800c5a9 	.word	0x0800c5a9
 800c544:	0800c5a9 	.word	0x0800c5a9
 800c548:	0800c5a9 	.word	0x0800c5a9
 800c54c:	0800c585 	.word	0x0800c585
 800c550:	0800c5a9 	.word	0x0800c5a9
 800c554:	0800c5a9 	.word	0x0800c5a9
 800c558:	0800c5a9 	.word	0x0800c5a9
 800c55c:	0800c597 	.word	0x0800c597
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f042 0202 	orr.w	r2, r2, #2
 800c56e:	60da      	str	r2, [r3, #12]
      break;
 800c570:	e01d      	b.n	800c5ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f042 0204 	orr.w	r2, r2, #4
 800c580:	60da      	str	r2, [r3, #12]
      break;
 800c582:	e014      	b.n	800c5ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68da      	ldr	r2, [r3, #12]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f042 0208 	orr.w	r2, r2, #8
 800c592:	60da      	str	r2, [r3, #12]
      break;
 800c594:	e00b      	b.n	800c5ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68da      	ldr	r2, [r3, #12]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f042 0210 	orr.w	r2, r2, #16
 800c5a4:	60da      	str	r2, [r3, #12]
      break;
 800c5a6:	e002      	b.n	800c5ae <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ac:	bf00      	nop
  }

  if (status == HAL_OK)
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d16a      	bne.n	800c68a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	6839      	ldr	r1, [r7, #0]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f001 f831 	bl	800d624 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a33      	ldr	r2, [pc, #204]	; (800c694 <HAL_TIM_PWM_Start_IT+0x278>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a31      	ldr	r2, [pc, #196]	; (800c698 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00e      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a30      	ldr	r2, [pc, #192]	; (800c69c <HAL_TIM_PWM_Start_IT+0x280>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a2e      	ldr	r2, [pc, #184]	; (800c6a0 <HAL_TIM_PWM_Start_IT+0x284>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a2d      	ldr	r2, [pc, #180]	; (800c6a4 <HAL_TIM_PWM_Start_IT+0x288>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d101      	bne.n	800c5f8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e000      	b.n	800c5fa <HAL_TIM_PWM_Start_IT+0x1de>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c60c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a20      	ldr	r2, [pc, #128]	; (800c694 <HAL_TIM_PWM_Start_IT+0x278>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d018      	beq.n	800c64a <HAL_TIM_PWM_Start_IT+0x22e>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c620:	d013      	beq.n	800c64a <HAL_TIM_PWM_Start_IT+0x22e>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a20      	ldr	r2, [pc, #128]	; (800c6a8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00e      	beq.n	800c64a <HAL_TIM_PWM_Start_IT+0x22e>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a1e      	ldr	r2, [pc, #120]	; (800c6ac <HAL_TIM_PWM_Start_IT+0x290>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d009      	beq.n	800c64a <HAL_TIM_PWM_Start_IT+0x22e>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a17      	ldr	r2, [pc, #92]	; (800c698 <HAL_TIM_PWM_Start_IT+0x27c>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d004      	beq.n	800c64a <HAL_TIM_PWM_Start_IT+0x22e>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a15      	ldr	r2, [pc, #84]	; (800c69c <HAL_TIM_PWM_Start_IT+0x280>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d115      	bne.n	800c676 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689a      	ldr	r2, [r3, #8]
 800c650:	4b17      	ldr	r3, [pc, #92]	; (800c6b0 <HAL_TIM_PWM_Start_IT+0x294>)
 800c652:	4013      	ands	r3, r2
 800c654:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	2b06      	cmp	r3, #6
 800c65a:	d015      	beq.n	800c688 <HAL_TIM_PWM_Start_IT+0x26c>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c662:	d011      	beq.n	800c688 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f042 0201 	orr.w	r2, r2, #1
 800c672:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c674:	e008      	b.n	800c688 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f042 0201 	orr.w	r2, r2, #1
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	e000      	b.n	800c68a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c688:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	40012c00 	.word	0x40012c00
 800c698:	40013400 	.word	0x40013400
 800c69c:	40014000 	.word	0x40014000
 800c6a0:	40014400 	.word	0x40014400
 800c6a4:	40014800 	.word	0x40014800
 800c6a8:	40000400 	.word	0x40000400
 800c6ac:	40000800 	.word	0x40000800
 800c6b0:	00010007 	.word	0x00010007

0800c6b4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e041      	b.n	800c74c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d106      	bne.n	800c6e2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f839 	bl	800c754 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2202      	movs	r2, #2
 800c6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	f000 fc03 	bl	800cf00 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 0208 	bic.w	r2, r2, #8
 800c708:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d101      	bne.n	800c77c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e097      	b.n	800c8ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d106      	bne.n	800c796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7f7 fffd 	bl	8004790 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2202      	movs	r2, #2
 800c79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	6812      	ldr	r2, [r2, #0]
 800c7a8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c7ac:	f023 0307 	bic.w	r3, r3, #7
 800c7b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f000 fb9f 	bl	800cf00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7ea:	f023 0303 	bic.w	r3, r3, #3
 800c7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	689a      	ldr	r2, [r3, #8]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	021b      	lsls	r3, r3, #8
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c808:	f023 030c 	bic.w	r3, r3, #12
 800c80c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68da      	ldr	r2, [r3, #12]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	69db      	ldr	r3, [r3, #28]
 800c822:	021b      	lsls	r3, r3, #8
 800c824:	4313      	orrs	r3, r2
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	4313      	orrs	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	011a      	lsls	r2, r3, #4
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	6a1b      	ldr	r3, [r3, #32]
 800c836:	031b      	lsls	r3, r3, #12
 800c838:	4313      	orrs	r3, r2
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c84e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685a      	ldr	r2, [r3, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	011b      	lsls	r3, r3, #4
 800c85a:	4313      	orrs	r3, r2
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c8c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c8cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d110      	bne.n	800c906 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d102      	bne.n	800c8f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c8ea:	7b7b      	ldrb	r3, [r7, #13]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d001      	beq.n	800c8f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e089      	b.n	800ca08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c904:	e031      	b.n	800c96a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2b04      	cmp	r3, #4
 800c90a:	d110      	bne.n	800c92e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d102      	bne.n	800c918 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c912:	7b3b      	ldrb	r3, [r7, #12]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d001      	beq.n	800c91c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e075      	b.n	800ca08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2202      	movs	r2, #2
 800c928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c92c:	e01d      	b.n	800c96a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d108      	bne.n	800c946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d105      	bne.n	800c946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c93a:	7b7b      	ldrb	r3, [r7, #13]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d102      	bne.n	800c946 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c940:	7b3b      	ldrb	r3, [r7, #12]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e05e      	b.n	800ca08 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2202      	movs	r2, #2
 800c94e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2202      	movs	r2, #2
 800c956:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2202      	movs	r2, #2
 800c95e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2202      	movs	r2, #2
 800c966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <HAL_TIM_Encoder_Start_IT+0xc4>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	2b04      	cmp	r3, #4
 800c974:	d010      	beq.n	800c998 <HAL_TIM_Encoder_Start_IT+0xe4>
 800c976:	e01f      	b.n	800c9b8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2201      	movs	r2, #1
 800c97e:	2100      	movs	r1, #0
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fe4f 	bl	800d624 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0202 	orr.w	r2, r2, #2
 800c994:	60da      	str	r2, [r3, #12]
      break;
 800c996:	e02e      	b.n	800c9f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2201      	movs	r2, #1
 800c99e:	2104      	movs	r1, #4
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fe3f 	bl	800d624 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68da      	ldr	r2, [r3, #12]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f042 0204 	orr.w	r2, r2, #4
 800c9b4:	60da      	str	r2, [r3, #12]
      break;
 800c9b6:	e01e      	b.n	800c9f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fe2f 	bl	800d624 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	2104      	movs	r1, #4
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fe28 	bl	800d624 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68da      	ldr	r2, [r3, #12]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f042 0202 	orr.w	r2, r2, #2
 800c9e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f042 0204 	orr.w	r2, r2, #4
 800c9f2:	60da      	str	r2, [r3, #12]
      break;
 800c9f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f042 0201 	orr.w	r2, r2, #1
 800ca04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f003 0302 	and.w	r3, r3, #2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d020      	beq.n	800ca74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f003 0302 	and.w	r3, r3, #2
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d01b      	beq.n	800ca74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f06f 0202 	mvn.w	r2, #2
 800ca44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	f003 0303 	and.w	r3, r3, #3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f5 fbb2 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800ca60:	e005      	b.n	800ca6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa38 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7f5 fbcf 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f003 0304 	and.w	r3, r3, #4
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d020      	beq.n	800cac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f003 0304 	and.w	r3, r3, #4
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d01b      	beq.n	800cac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f06f 0204 	mvn.w	r2, #4
 800ca90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2202      	movs	r2, #2
 800ca96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d003      	beq.n	800caae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7f5 fb8c 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800caac:	e005      	b.n	800caba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fa12 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7f5 fba9 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	f003 0308 	and.w	r3, r3, #8
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d020      	beq.n	800cb0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f003 0308 	and.w	r3, r3, #8
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d01b      	beq.n	800cb0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f06f 0208 	mvn.w	r2, #8
 800cadc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2204      	movs	r2, #4
 800cae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	f003 0303 	and.w	r3, r3, #3
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7f5 fb66 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800caf8:	e005      	b.n	800cb06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f9ec 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7f5 fb83 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f003 0310 	and.w	r3, r3, #16
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d020      	beq.n	800cb58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f003 0310 	and.w	r3, r3, #16
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d01b      	beq.n	800cb58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f06f 0210 	mvn.w	r2, #16
 800cb28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2208      	movs	r2, #8
 800cb2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7f5 fb40 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800cb44:	e005      	b.n	800cb52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 f9c6 	bl	800ced8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7f5 fb5d 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00c      	beq.n	800cb7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f06f 0201 	mvn.w	r2, #1
 800cb74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7f5 fb70 	bl	800225c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d104      	bne.n	800cb90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00c      	beq.n	800cbaa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d007      	beq.n	800cbaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800cba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 ff2f 	bl	800da08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00c      	beq.n	800cbce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d007      	beq.n	800cbce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cbc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 ff27 	bl	800da1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00c      	beq.n	800cbf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f000 f97d 	bl	800ceec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	f003 0320 	and.w	r3, r3, #32
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00c      	beq.n	800cc16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f003 0320 	and.w	r3, r3, #32
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d007      	beq.n	800cc16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f06f 0220 	mvn.w	r2, #32
 800cc0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 feef 	bl	800d9f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00c      	beq.n	800cc3a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cc32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fefb 	bl	800da30 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00c      	beq.n	800cc5e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d007      	beq.n	800cc5e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fef3 	bl	800da44 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00c      	beq.n	800cc82 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d007      	beq.n	800cc82 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 feeb 	bl	800da58 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00c      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d007      	beq.n	800cca6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cc9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fee3 	bl	800da6c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cca6:	bf00      	nop
 800cca8:	3710      	adds	r7, #16
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d101      	bne.n	800ccce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e0ff      	b.n	800cece <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b14      	cmp	r3, #20
 800ccda:	f200 80f0 	bhi.w	800cebe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ccde:	a201      	add	r2, pc, #4	; (adr r2, 800cce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce4:	0800cd39 	.word	0x0800cd39
 800cce8:	0800cebf 	.word	0x0800cebf
 800ccec:	0800cebf 	.word	0x0800cebf
 800ccf0:	0800cebf 	.word	0x0800cebf
 800ccf4:	0800cd79 	.word	0x0800cd79
 800ccf8:	0800cebf 	.word	0x0800cebf
 800ccfc:	0800cebf 	.word	0x0800cebf
 800cd00:	0800cebf 	.word	0x0800cebf
 800cd04:	0800cdbb 	.word	0x0800cdbb
 800cd08:	0800cebf 	.word	0x0800cebf
 800cd0c:	0800cebf 	.word	0x0800cebf
 800cd10:	0800cebf 	.word	0x0800cebf
 800cd14:	0800cdfb 	.word	0x0800cdfb
 800cd18:	0800cebf 	.word	0x0800cebf
 800cd1c:	0800cebf 	.word	0x0800cebf
 800cd20:	0800cebf 	.word	0x0800cebf
 800cd24:	0800ce3d 	.word	0x0800ce3d
 800cd28:	0800cebf 	.word	0x0800cebf
 800cd2c:	0800cebf 	.word	0x0800cebf
 800cd30:	0800cebf 	.word	0x0800cebf
 800cd34:	0800ce7d 	.word	0x0800ce7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f97a 	bl	800d038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	699a      	ldr	r2, [r3, #24]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0208 	orr.w	r2, r2, #8
 800cd52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f022 0204 	bic.w	r2, r2, #4
 800cd62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	6999      	ldr	r1, [r3, #24]
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	691a      	ldr	r2, [r3, #16]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	430a      	orrs	r2, r1
 800cd74:	619a      	str	r2, [r3, #24]
      break;
 800cd76:	e0a5      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68b9      	ldr	r1, [r7, #8]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 f9ea 	bl	800d158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699a      	ldr	r2, [r3, #24]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	699a      	ldr	r2, [r3, #24]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cda2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6999      	ldr	r1, [r3, #24]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	021a      	lsls	r2, r3, #8
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	619a      	str	r2, [r3, #24]
      break;
 800cdb8:	e084      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68b9      	ldr	r1, [r7, #8]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fa53 	bl	800d26c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	69da      	ldr	r2, [r3, #28]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f042 0208 	orr.w	r2, r2, #8
 800cdd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	69da      	ldr	r2, [r3, #28]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 0204 	bic.w	r2, r2, #4
 800cde4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69d9      	ldr	r1, [r3, #28]
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	691a      	ldr	r2, [r3, #16]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	430a      	orrs	r2, r1
 800cdf6:	61da      	str	r2, [r3, #28]
      break;
 800cdf8:	e064      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f000 fabb 	bl	800d37c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69da      	ldr	r2, [r3, #28]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	69da      	ldr	r2, [r3, #28]
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	69d9      	ldr	r1, [r3, #28]
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	021a      	lsls	r2, r3, #8
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	61da      	str	r2, [r3, #28]
      break;
 800ce3a:	e043      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 fb24 	bl	800d490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f042 0208 	orr.w	r2, r2, #8
 800ce56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f022 0204 	bic.w	r2, r2, #4
 800ce66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	691a      	ldr	r2, [r3, #16]
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ce7a:	e023      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68b9      	ldr	r1, [r7, #8]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fb68 	bl	800d558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cea6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	021a      	lsls	r2, r3, #8
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cebc:	e002      	b.n	800cec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	75fb      	strb	r3, [r7, #23]
      break;
 800cec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop

0800ced8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a42      	ldr	r2, [pc, #264]	; (800d01c <TIM_Base_SetConfig+0x11c>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d00f      	beq.n	800cf38 <TIM_Base_SetConfig+0x38>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf1e:	d00b      	beq.n	800cf38 <TIM_Base_SetConfig+0x38>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4a3f      	ldr	r2, [pc, #252]	; (800d020 <TIM_Base_SetConfig+0x120>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d007      	beq.n	800cf38 <TIM_Base_SetConfig+0x38>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a3e      	ldr	r2, [pc, #248]	; (800d024 <TIM_Base_SetConfig+0x124>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d003      	beq.n	800cf38 <TIM_Base_SetConfig+0x38>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a3d      	ldr	r2, [pc, #244]	; (800d028 <TIM_Base_SetConfig+0x128>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d108      	bne.n	800cf4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a33      	ldr	r2, [pc, #204]	; (800d01c <TIM_Base_SetConfig+0x11c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d01b      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf58:	d017      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a30      	ldr	r2, [pc, #192]	; (800d020 <TIM_Base_SetConfig+0x120>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d013      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a2f      	ldr	r2, [pc, #188]	; (800d024 <TIM_Base_SetConfig+0x124>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d00f      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a2e      	ldr	r2, [pc, #184]	; (800d028 <TIM_Base_SetConfig+0x128>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d00b      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a2d      	ldr	r2, [pc, #180]	; (800d02c <TIM_Base_SetConfig+0x12c>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d007      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a2c      	ldr	r2, [pc, #176]	; (800d030 <TIM_Base_SetConfig+0x130>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d003      	beq.n	800cf8a <TIM_Base_SetConfig+0x8a>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2b      	ldr	r2, [pc, #172]	; (800d034 <TIM_Base_SetConfig+0x134>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d108      	bne.n	800cf9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	689a      	ldr	r2, [r3, #8]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	4a16      	ldr	r2, [pc, #88]	; (800d01c <TIM_Base_SetConfig+0x11c>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d00f      	beq.n	800cfe8 <TIM_Base_SetConfig+0xe8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a17      	ldr	r2, [pc, #92]	; (800d028 <TIM_Base_SetConfig+0x128>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d00b      	beq.n	800cfe8 <TIM_Base_SetConfig+0xe8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a16      	ldr	r2, [pc, #88]	; (800d02c <TIM_Base_SetConfig+0x12c>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d007      	beq.n	800cfe8 <TIM_Base_SetConfig+0xe8>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a15      	ldr	r2, [pc, #84]	; (800d030 <TIM_Base_SetConfig+0x130>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d003      	beq.n	800cfe8 <TIM_Base_SetConfig+0xe8>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a14      	ldr	r2, [pc, #80]	; (800d034 <TIM_Base_SetConfig+0x134>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d103      	bne.n	800cff0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	691a      	ldr	r2, [r3, #16]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d105      	bne.n	800d00e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	f023 0201 	bic.w	r2, r3, #1
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	611a      	str	r2, [r3, #16]
  }
}
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	40012c00 	.word	0x40012c00
 800d020:	40000400 	.word	0x40000400
 800d024:	40000800 	.word	0x40000800
 800d028:	40013400 	.word	0x40013400
 800d02c:	40014000 	.word	0x40014000
 800d030:	40014400 	.word	0x40014400
 800d034:	40014800 	.word	0x40014800

0800d038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d038:	b480      	push	{r7}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	f023 0201 	bic.w	r2, r3, #1
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	699b      	ldr	r3, [r3, #24]
 800d05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f023 0303 	bic.w	r3, r3, #3
 800d072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f023 0302 	bic.w	r3, r3, #2
 800d084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	697a      	ldr	r2, [r7, #20]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a2c      	ldr	r2, [pc, #176]	; (800d144 <TIM_OC1_SetConfig+0x10c>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d00f      	beq.n	800d0b8 <TIM_OC1_SetConfig+0x80>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a2b      	ldr	r2, [pc, #172]	; (800d148 <TIM_OC1_SetConfig+0x110>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d00b      	beq.n	800d0b8 <TIM_OC1_SetConfig+0x80>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4a2a      	ldr	r2, [pc, #168]	; (800d14c <TIM_OC1_SetConfig+0x114>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d007      	beq.n	800d0b8 <TIM_OC1_SetConfig+0x80>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4a29      	ldr	r2, [pc, #164]	; (800d150 <TIM_OC1_SetConfig+0x118>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d003      	beq.n	800d0b8 <TIM_OC1_SetConfig+0x80>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a28      	ldr	r2, [pc, #160]	; (800d154 <TIM_OC1_SetConfig+0x11c>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d10c      	bne.n	800d0d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f023 0308 	bic.w	r3, r3, #8
 800d0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f023 0304 	bic.w	r3, r3, #4
 800d0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a1b      	ldr	r2, [pc, #108]	; (800d144 <TIM_OC1_SetConfig+0x10c>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d00f      	beq.n	800d0fa <TIM_OC1_SetConfig+0xc2>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a1a      	ldr	r2, [pc, #104]	; (800d148 <TIM_OC1_SetConfig+0x110>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d00b      	beq.n	800d0fa <TIM_OC1_SetConfig+0xc2>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a19      	ldr	r2, [pc, #100]	; (800d14c <TIM_OC1_SetConfig+0x114>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d007      	beq.n	800d0fa <TIM_OC1_SetConfig+0xc2>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a18      	ldr	r2, [pc, #96]	; (800d150 <TIM_OC1_SetConfig+0x118>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d003      	beq.n	800d0fa <TIM_OC1_SetConfig+0xc2>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a17      	ldr	r2, [pc, #92]	; (800d154 <TIM_OC1_SetConfig+0x11c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d111      	bne.n	800d11e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	695b      	ldr	r3, [r3, #20]
 800d10e:	693a      	ldr	r2, [r7, #16]
 800d110:	4313      	orrs	r3, r2
 800d112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	693a      	ldr	r2, [r7, #16]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	697a      	ldr	r2, [r7, #20]
 800d136:	621a      	str	r2, [r3, #32]
}
 800d138:	bf00      	nop
 800d13a:	371c      	adds	r7, #28
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	40012c00 	.word	0x40012c00
 800d148:	40013400 	.word	0x40013400
 800d14c:	40014000 	.word	0x40014000
 800d150:	40014400 	.word	0x40014400
 800d154:	40014800 	.word	0x40014800

0800d158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d158:	b480      	push	{r7}
 800d15a:	b087      	sub	sp, #28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a1b      	ldr	r3, [r3, #32]
 800d16c:	f023 0210 	bic.w	r2, r3, #16
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	021b      	lsls	r3, r3, #8
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	f023 0320 	bic.w	r3, r3, #32
 800d1a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	689b      	ldr	r3, [r3, #8]
 800d1ac:	011b      	lsls	r3, r3, #4
 800d1ae:	697a      	ldr	r2, [r7, #20]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a28      	ldr	r2, [pc, #160]	; (800d258 <TIM_OC2_SetConfig+0x100>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d003      	beq.n	800d1c4 <TIM_OC2_SetConfig+0x6c>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a27      	ldr	r2, [pc, #156]	; (800d25c <TIM_OC2_SetConfig+0x104>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d10d      	bne.n	800d1e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	011b      	lsls	r3, r3, #4
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a1d      	ldr	r2, [pc, #116]	; (800d258 <TIM_OC2_SetConfig+0x100>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00f      	beq.n	800d208 <TIM_OC2_SetConfig+0xb0>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a1c      	ldr	r2, [pc, #112]	; (800d25c <TIM_OC2_SetConfig+0x104>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d00b      	beq.n	800d208 <TIM_OC2_SetConfig+0xb0>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a1b      	ldr	r2, [pc, #108]	; (800d260 <TIM_OC2_SetConfig+0x108>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d007      	beq.n	800d208 <TIM_OC2_SetConfig+0xb0>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a1a      	ldr	r2, [pc, #104]	; (800d264 <TIM_OC2_SetConfig+0x10c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d003      	beq.n	800d208 <TIM_OC2_SetConfig+0xb0>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a19      	ldr	r2, [pc, #100]	; (800d268 <TIM_OC2_SetConfig+0x110>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d113      	bne.n	800d230 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d20e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	4313      	orrs	r3, r2
 800d222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	699b      	ldr	r3, [r3, #24]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	40012c00 	.word	0x40012c00
 800d25c:	40013400 	.word	0x40013400
 800d260:	40014000 	.word	0x40014000
 800d264:	40014400 	.word	0x40014400
 800d268:	40014800 	.word	0x40014800

0800d26c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a1b      	ldr	r3, [r3, #32]
 800d280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	69db      	ldr	r3, [r3, #28]
 800d292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f023 0303 	bic.w	r3, r3, #3
 800d2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	021b      	lsls	r3, r3, #8
 800d2c0:	697a      	ldr	r2, [r7, #20]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a27      	ldr	r2, [pc, #156]	; (800d368 <TIM_OC3_SetConfig+0xfc>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d003      	beq.n	800d2d6 <TIM_OC3_SetConfig+0x6a>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a26      	ldr	r2, [pc, #152]	; (800d36c <TIM_OC3_SetConfig+0x100>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d10d      	bne.n	800d2f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	021b      	lsls	r3, r3, #8
 800d2e4:	697a      	ldr	r2, [r7, #20]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4a1c      	ldr	r2, [pc, #112]	; (800d368 <TIM_OC3_SetConfig+0xfc>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d00f      	beq.n	800d31a <TIM_OC3_SetConfig+0xae>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a1b      	ldr	r2, [pc, #108]	; (800d36c <TIM_OC3_SetConfig+0x100>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d00b      	beq.n	800d31a <TIM_OC3_SetConfig+0xae>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a1a      	ldr	r2, [pc, #104]	; (800d370 <TIM_OC3_SetConfig+0x104>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d007      	beq.n	800d31a <TIM_OC3_SetConfig+0xae>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4a19      	ldr	r2, [pc, #100]	; (800d374 <TIM_OC3_SetConfig+0x108>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d003      	beq.n	800d31a <TIM_OC3_SetConfig+0xae>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4a18      	ldr	r2, [pc, #96]	; (800d378 <TIM_OC3_SetConfig+0x10c>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d113      	bne.n	800d342 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	011b      	lsls	r3, r3, #4
 800d330:	693a      	ldr	r2, [r7, #16]
 800d332:	4313      	orrs	r3, r2
 800d334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	011b      	lsls	r3, r3, #4
 800d33c:	693a      	ldr	r2, [r7, #16]
 800d33e:	4313      	orrs	r3, r2
 800d340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	697a      	ldr	r2, [r7, #20]
 800d35a:	621a      	str	r2, [r3, #32]
}
 800d35c:	bf00      	nop
 800d35e:	371c      	adds	r7, #28
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	40012c00 	.word	0x40012c00
 800d36c:	40013400 	.word	0x40013400
 800d370:	40014000 	.word	0x40014000
 800d374:	40014400 	.word	0x40014400
 800d378:	40014800 	.word	0x40014800

0800d37c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b087      	sub	sp, #28
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a1b      	ldr	r3, [r3, #32]
 800d38a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d3aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	021b      	lsls	r3, r3, #8
 800d3be:	68fa      	ldr	r2, [r7, #12]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	031b      	lsls	r3, r3, #12
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	4a28      	ldr	r2, [pc, #160]	; (800d47c <TIM_OC4_SetConfig+0x100>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d003      	beq.n	800d3e8 <TIM_OC4_SetConfig+0x6c>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a27      	ldr	r2, [pc, #156]	; (800d480 <TIM_OC4_SetConfig+0x104>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d10d      	bne.n	800d404 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	031b      	lsls	r3, r3, #12
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	4313      	orrs	r3, r2
 800d3fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a1d      	ldr	r2, [pc, #116]	; (800d47c <TIM_OC4_SetConfig+0x100>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d00f      	beq.n	800d42c <TIM_OC4_SetConfig+0xb0>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a1c      	ldr	r2, [pc, #112]	; (800d480 <TIM_OC4_SetConfig+0x104>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d00b      	beq.n	800d42c <TIM_OC4_SetConfig+0xb0>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a1b      	ldr	r2, [pc, #108]	; (800d484 <TIM_OC4_SetConfig+0x108>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d007      	beq.n	800d42c <TIM_OC4_SetConfig+0xb0>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a1a      	ldr	r2, [pc, #104]	; (800d488 <TIM_OC4_SetConfig+0x10c>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d003      	beq.n	800d42c <TIM_OC4_SetConfig+0xb0>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a19      	ldr	r2, [pc, #100]	; (800d48c <TIM_OC4_SetConfig+0x110>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d113      	bne.n	800d454 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d432:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d43a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	019b      	lsls	r3, r3, #6
 800d442:	693a      	ldr	r2, [r7, #16]
 800d444:	4313      	orrs	r3, r2
 800d446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	019b      	lsls	r3, r3, #6
 800d44e:	693a      	ldr	r2, [r7, #16]
 800d450:	4313      	orrs	r3, r2
 800d452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	621a      	str	r2, [r3, #32]
}
 800d46e:	bf00      	nop
 800d470:	371c      	adds	r7, #28
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	40012c00 	.word	0x40012c00
 800d480:	40013400 	.word	0x40013400
 800d484:	40014000 	.word	0x40014000
 800d488:	40014400 	.word	0x40014400
 800d48c:	40014800 	.word	0x40014800

0800d490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d490:	b480      	push	{r7}
 800d492:	b087      	sub	sp, #28
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a1b      	ldr	r3, [r3, #32]
 800d4a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d4d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	041b      	lsls	r3, r3, #16
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a17      	ldr	r2, [pc, #92]	; (800d544 <TIM_OC5_SetConfig+0xb4>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d00f      	beq.n	800d50a <TIM_OC5_SetConfig+0x7a>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a16      	ldr	r2, [pc, #88]	; (800d548 <TIM_OC5_SetConfig+0xb8>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d00b      	beq.n	800d50a <TIM_OC5_SetConfig+0x7a>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a15      	ldr	r2, [pc, #84]	; (800d54c <TIM_OC5_SetConfig+0xbc>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d007      	beq.n	800d50a <TIM_OC5_SetConfig+0x7a>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a14      	ldr	r2, [pc, #80]	; (800d550 <TIM_OC5_SetConfig+0xc0>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d003      	beq.n	800d50a <TIM_OC5_SetConfig+0x7a>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a13      	ldr	r2, [pc, #76]	; (800d554 <TIM_OC5_SetConfig+0xc4>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d109      	bne.n	800d51e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	697a      	ldr	r2, [r7, #20]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	621a      	str	r2, [r3, #32]
}
 800d538:	bf00      	nop
 800d53a:	371c      	adds	r7, #28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	40012c00 	.word	0x40012c00
 800d548:	40013400 	.word	0x40013400
 800d54c:	40014000 	.word	0x40014000
 800d550:	40014400 	.word	0x40014400
 800d554:	40014800 	.word	0x40014800

0800d558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d558:	b480      	push	{r7}
 800d55a:	b087      	sub	sp, #28
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a1b      	ldr	r3, [r3, #32]
 800d566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a1b      	ldr	r3, [r3, #32]
 800d56c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	021b      	lsls	r3, r3, #8
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	4313      	orrs	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d59e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	051b      	lsls	r3, r3, #20
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a18      	ldr	r2, [pc, #96]	; (800d610 <TIM_OC6_SetConfig+0xb8>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d00f      	beq.n	800d5d4 <TIM_OC6_SetConfig+0x7c>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a17      	ldr	r2, [pc, #92]	; (800d614 <TIM_OC6_SetConfig+0xbc>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d00b      	beq.n	800d5d4 <TIM_OC6_SetConfig+0x7c>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a16      	ldr	r2, [pc, #88]	; (800d618 <TIM_OC6_SetConfig+0xc0>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d007      	beq.n	800d5d4 <TIM_OC6_SetConfig+0x7c>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a15      	ldr	r2, [pc, #84]	; (800d61c <TIM_OC6_SetConfig+0xc4>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d003      	beq.n	800d5d4 <TIM_OC6_SetConfig+0x7c>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a14      	ldr	r2, [pc, #80]	; (800d620 <TIM_OC6_SetConfig+0xc8>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d109      	bne.n	800d5e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d5da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	695b      	ldr	r3, [r3, #20]
 800d5e0:	029b      	lsls	r3, r3, #10
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	693a      	ldr	r2, [r7, #16]
 800d600:	621a      	str	r2, [r3, #32]
}
 800d602:	bf00      	nop
 800d604:	371c      	adds	r7, #28
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop
 800d610:	40012c00 	.word	0x40012c00
 800d614:	40013400 	.word	0x40013400
 800d618:	40014000 	.word	0x40014000
 800d61c:	40014400 	.word	0x40014400
 800d620:	40014800 	.word	0x40014800

0800d624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	f003 031f 	and.w	r3, r3, #31
 800d636:	2201      	movs	r2, #1
 800d638:	fa02 f303 	lsl.w	r3, r2, r3
 800d63c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a1a      	ldr	r2, [r3, #32]
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	43db      	mvns	r3, r3
 800d646:	401a      	ands	r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6a1a      	ldr	r2, [r3, #32]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	f003 031f 	and.w	r3, r3, #31
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	fa01 f303 	lsl.w	r3, r1, r3
 800d65c:	431a      	orrs	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	621a      	str	r2, [r3, #32]
}
 800d662:	bf00      	nop
 800d664:	371c      	adds	r7, #28
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
	...

0800d670 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d109      	bne.n	800d694 <HAL_TIMEx_PWMN_Start+0x24>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2b01      	cmp	r3, #1
 800d68a:	bf14      	ite	ne
 800d68c:	2301      	movne	r3, #1
 800d68e:	2300      	moveq	r3, #0
 800d690:	b2db      	uxtb	r3, r3
 800d692:	e022      	b.n	800d6da <HAL_TIMEx_PWMN_Start+0x6a>
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	2b04      	cmp	r3, #4
 800d698:	d109      	bne.n	800d6ae <HAL_TIMEx_PWMN_Start+0x3e>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	bf14      	ite	ne
 800d6a6:	2301      	movne	r3, #1
 800d6a8:	2300      	moveq	r3, #0
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	e015      	b.n	800d6da <HAL_TIMEx_PWMN_Start+0x6a>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	d109      	bne.n	800d6c8 <HAL_TIMEx_PWMN_Start+0x58>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	bf14      	ite	ne
 800d6c0:	2301      	movne	r3, #1
 800d6c2:	2300      	moveq	r3, #0
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	e008      	b.n	800d6da <HAL_TIMEx_PWMN_Start+0x6a>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	bf14      	ite	ne
 800d6d4:	2301      	movne	r3, #1
 800d6d6:	2300      	moveq	r3, #0
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e069      	b.n	800d7b6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <HAL_TIMEx_PWMN_Start+0x82>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6f0:	e013      	b.n	800d71a <HAL_TIMEx_PWMN_Start+0xaa>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	d104      	bne.n	800d702 <HAL_TIMEx_PWMN_Start+0x92>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d700:	e00b      	b.n	800d71a <HAL_TIMEx_PWMN_Start+0xaa>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b08      	cmp	r3, #8
 800d706:	d104      	bne.n	800d712 <HAL_TIMEx_PWMN_Start+0xa2>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d710:	e003      	b.n	800d71a <HAL_TIMEx_PWMN_Start+0xaa>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2202      	movs	r2, #2
 800d716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2204      	movs	r2, #4
 800d720:	6839      	ldr	r1, [r7, #0]
 800d722:	4618      	mov	r0, r3
 800d724:	f000 f9ac 	bl	800da80 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a20      	ldr	r2, [pc, #128]	; (800d7c0 <HAL_TIMEx_PWMN_Start+0x150>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d018      	beq.n	800d774 <HAL_TIMEx_PWMN_Start+0x104>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d74a:	d013      	beq.n	800d774 <HAL_TIMEx_PWMN_Start+0x104>
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a1c      	ldr	r2, [pc, #112]	; (800d7c4 <HAL_TIMEx_PWMN_Start+0x154>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d00e      	beq.n	800d774 <HAL_TIMEx_PWMN_Start+0x104>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a1b      	ldr	r2, [pc, #108]	; (800d7c8 <HAL_TIMEx_PWMN_Start+0x158>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d009      	beq.n	800d774 <HAL_TIMEx_PWMN_Start+0x104>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a19      	ldr	r2, [pc, #100]	; (800d7cc <HAL_TIMEx_PWMN_Start+0x15c>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d004      	beq.n	800d774 <HAL_TIMEx_PWMN_Start+0x104>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a18      	ldr	r2, [pc, #96]	; (800d7d0 <HAL_TIMEx_PWMN_Start+0x160>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d115      	bne.n	800d7a0 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689a      	ldr	r2, [r3, #8]
 800d77a:	4b16      	ldr	r3, [pc, #88]	; (800d7d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800d77c:	4013      	ands	r3, r2
 800d77e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b06      	cmp	r3, #6
 800d784:	d015      	beq.n	800d7b2 <HAL_TIMEx_PWMN_Start+0x142>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d78c:	d011      	beq.n	800d7b2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f042 0201 	orr.w	r2, r2, #1
 800d79c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d79e:	e008      	b.n	800d7b2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f042 0201 	orr.w	r2, r2, #1
 800d7ae:	601a      	str	r2, [r3, #0]
 800d7b0:	e000      	b.n	800d7b4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	40012c00 	.word	0x40012c00
 800d7c4:	40000400 	.word	0x40000400
 800d7c8:	40000800 	.word	0x40000800
 800d7cc:	40013400 	.word	0x40013400
 800d7d0:	40014000 	.word	0x40014000
 800d7d4:	00010007 	.word	0x00010007

0800d7d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	e065      	b.n	800d8bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2202      	movs	r2, #2
 800d7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a2c      	ldr	r2, [pc, #176]	; (800d8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d004      	beq.n	800d824 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a2b      	ldr	r2, [pc, #172]	; (800d8cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d108      	bne.n	800d836 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d82a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	4313      	orrs	r3, r2
 800d834:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	4313      	orrs	r3, r2
 800d84a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a1b      	ldr	r2, [pc, #108]	; (800d8c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d018      	beq.n	800d890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d866:	d013      	beq.n	800d890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a18      	ldr	r2, [pc, #96]	; (800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d00e      	beq.n	800d890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a17      	ldr	r2, [pc, #92]	; (800d8d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d009      	beq.n	800d890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a12      	ldr	r2, [pc, #72]	; (800d8cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d004      	beq.n	800d890 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a13      	ldr	r2, [pc, #76]	; (800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d10c      	bne.n	800d8aa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	40012c00 	.word	0x40012c00
 800d8cc:	40013400 	.word	0x40013400
 800d8d0:	40000400 	.word	0x40000400
 800d8d4:	40000800 	.word	0x40000800
 800d8d8:	40014000 	.word	0x40014000

0800d8dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d101      	bne.n	800d8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e073      	b.n	800d9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	4313      	orrs	r3, r2
 800d91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	4313      	orrs	r3, r2
 800d928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4313      	orrs	r3, r2
 800d936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	4313      	orrs	r3, r2
 800d944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	4313      	orrs	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	4313      	orrs	r3, r2
 800d960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	041b      	lsls	r3, r3, #16
 800d96e:	4313      	orrs	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	69db      	ldr	r3, [r3, #28]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a19      	ldr	r2, [pc, #100]	; (800d9ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d004      	beq.n	800d994 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a18      	ldr	r2, [pc, #96]	; (800d9f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d11c      	bne.n	800d9ce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99e:	051b      	lsls	r3, r3, #20
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	40012c00 	.word	0x40012c00
 800d9f0:	40013400 	.word	0x40013400

0800d9f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr

0800da44 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800da74:	bf00      	nop
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	f003 030f 	and.w	r3, r3, #15
 800da92:	2204      	movs	r2, #4
 800da94:	fa02 f303 	lsl.w	r3, r2, r3
 800da98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6a1a      	ldr	r2, [r3, #32]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	43db      	mvns	r3, r3
 800daa2:	401a      	ands	r2, r3
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6a1a      	ldr	r2, [r3, #32]
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f003 030f 	and.w	r3, r3, #15
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	fa01 f303 	lsl.w	r3, r1, r3
 800dab8:	431a      	orrs	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	621a      	str	r2, [r3, #32]
}
 800dabe:	bf00      	nop
 800dac0:	371c      	adds	r7, #28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr

0800daca <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800dad8:	2301      	movs	r3, #1
 800dada:	e04a      	b.n	800db72 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f6 ff54 	bl	800499c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2224      	movs	r2, #36	; 0x24
 800daf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f022 0201 	bic.w	r2, r2, #1
 800db0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fafd 	bl	800e114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f82e 	bl	800db7c <UART_SetConfig>
 800db20:	4603      	mov	r3, r0
 800db22:	2b01      	cmp	r3, #1
 800db24:	d101      	bne.n	800db2a <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e023      	b.n	800db72 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	689a      	ldr	r2, [r3, #8]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800db48:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	689a      	ldr	r2, [r3, #8]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f042 0208 	orr.w	r2, r2, #8
 800db58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f042 0201 	orr.w	r2, r2, #1
 800db68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fb74 	bl	800e258 <UART_CheckIdleState>
 800db70:	4603      	mov	r3, r0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db80:	b08c      	sub	sp, #48	; 0x30
 800db82:	af00      	add	r7, sp, #0
 800db84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	689a      	ldr	r2, [r3, #8]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	431a      	orrs	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	431a      	orrs	r2, r3
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	69db      	ldr	r3, [r3, #28]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	4bab      	ldr	r3, [pc, #684]	; (800de58 <UART_SetConfig+0x2dc>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	6812      	ldr	r2, [r2, #0]
 800dbb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb4:	430b      	orrs	r3, r1
 800dbb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	699b      	ldr	r3, [r3, #24]
 800dbd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4aa0      	ldr	r2, [pc, #640]	; (800de5c <UART_SetConfig+0x2e0>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d004      	beq.n	800dbe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800dbf2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	6812      	ldr	r2, [r2, #0]
 800dbfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbfc:	430b      	orrs	r3, r1
 800dbfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc06:	f023 010f 	bic.w	r1, r3, #15
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a91      	ldr	r2, [pc, #580]	; (800de60 <UART_SetConfig+0x2e4>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d125      	bne.n	800dc6c <UART_SetConfig+0xf0>
 800dc20:	4b90      	ldr	r3, [pc, #576]	; (800de64 <UART_SetConfig+0x2e8>)
 800dc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d81a      	bhi.n	800dc64 <UART_SetConfig+0xe8>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <UART_SetConfig+0xb8>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dc45 	.word	0x0800dc45
 800dc38:	0800dc55 	.word	0x0800dc55
 800dc3c:	0800dc4d 	.word	0x0800dc4d
 800dc40:	0800dc5d 	.word	0x0800dc5d
 800dc44:	2301      	movs	r3, #1
 800dc46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc4a:	e0d6      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc52:	e0d2      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dc54:	2304      	movs	r3, #4
 800dc56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc5a:	e0ce      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc62:	e0ca      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dc64:	2310      	movs	r3, #16
 800dc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc6a:	e0c6      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a7d      	ldr	r2, [pc, #500]	; (800de68 <UART_SetConfig+0x2ec>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d138      	bne.n	800dce8 <UART_SetConfig+0x16c>
 800dc76:	4b7b      	ldr	r3, [pc, #492]	; (800de64 <UART_SetConfig+0x2e8>)
 800dc78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc7c:	f003 030c 	and.w	r3, r3, #12
 800dc80:	2b0c      	cmp	r3, #12
 800dc82:	d82d      	bhi.n	800dce0 <UART_SetConfig+0x164>
 800dc84:	a201      	add	r2, pc, #4	; (adr r2, 800dc8c <UART_SetConfig+0x110>)
 800dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8a:	bf00      	nop
 800dc8c:	0800dcc1 	.word	0x0800dcc1
 800dc90:	0800dce1 	.word	0x0800dce1
 800dc94:	0800dce1 	.word	0x0800dce1
 800dc98:	0800dce1 	.word	0x0800dce1
 800dc9c:	0800dcd1 	.word	0x0800dcd1
 800dca0:	0800dce1 	.word	0x0800dce1
 800dca4:	0800dce1 	.word	0x0800dce1
 800dca8:	0800dce1 	.word	0x0800dce1
 800dcac:	0800dcc9 	.word	0x0800dcc9
 800dcb0:	0800dce1 	.word	0x0800dce1
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	0800dce1 	.word	0x0800dce1
 800dcbc:	0800dcd9 	.word	0x0800dcd9
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dcc6:	e098      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dcc8:	2302      	movs	r3, #2
 800dcca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dcce:	e094      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dcd0:	2304      	movs	r3, #4
 800dcd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dcd6:	e090      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dcd8:	2308      	movs	r3, #8
 800dcda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dcde:	e08c      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dce0:	2310      	movs	r3, #16
 800dce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dce6:	e088      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a5f      	ldr	r2, [pc, #380]	; (800de6c <UART_SetConfig+0x2f0>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d125      	bne.n	800dd3e <UART_SetConfig+0x1c2>
 800dcf2:	4b5c      	ldr	r3, [pc, #368]	; (800de64 <UART_SetConfig+0x2e8>)
 800dcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dcfc:	2b30      	cmp	r3, #48	; 0x30
 800dcfe:	d016      	beq.n	800dd2e <UART_SetConfig+0x1b2>
 800dd00:	2b30      	cmp	r3, #48	; 0x30
 800dd02:	d818      	bhi.n	800dd36 <UART_SetConfig+0x1ba>
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	d00a      	beq.n	800dd1e <UART_SetConfig+0x1a2>
 800dd08:	2b20      	cmp	r3, #32
 800dd0a:	d814      	bhi.n	800dd36 <UART_SetConfig+0x1ba>
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <UART_SetConfig+0x19a>
 800dd10:	2b10      	cmp	r3, #16
 800dd12:	d008      	beq.n	800dd26 <UART_SetConfig+0x1aa>
 800dd14:	e00f      	b.n	800dd36 <UART_SetConfig+0x1ba>
 800dd16:	2300      	movs	r3, #0
 800dd18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd1c:	e06d      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd1e:	2302      	movs	r3, #2
 800dd20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd24:	e069      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd26:	2304      	movs	r3, #4
 800dd28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd2c:	e065      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd2e:	2308      	movs	r3, #8
 800dd30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd34:	e061      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd36:	2310      	movs	r3, #16
 800dd38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd3c:	e05d      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a4b      	ldr	r2, [pc, #300]	; (800de70 <UART_SetConfig+0x2f4>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d125      	bne.n	800dd94 <UART_SetConfig+0x218>
 800dd48:	4b46      	ldr	r3, [pc, #280]	; (800de64 <UART_SetConfig+0x2e8>)
 800dd4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dd52:	2bc0      	cmp	r3, #192	; 0xc0
 800dd54:	d016      	beq.n	800dd84 <UART_SetConfig+0x208>
 800dd56:	2bc0      	cmp	r3, #192	; 0xc0
 800dd58:	d818      	bhi.n	800dd8c <UART_SetConfig+0x210>
 800dd5a:	2b80      	cmp	r3, #128	; 0x80
 800dd5c:	d00a      	beq.n	800dd74 <UART_SetConfig+0x1f8>
 800dd5e:	2b80      	cmp	r3, #128	; 0x80
 800dd60:	d814      	bhi.n	800dd8c <UART_SetConfig+0x210>
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <UART_SetConfig+0x1f0>
 800dd66:	2b40      	cmp	r3, #64	; 0x40
 800dd68:	d008      	beq.n	800dd7c <UART_SetConfig+0x200>
 800dd6a:	e00f      	b.n	800dd8c <UART_SetConfig+0x210>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd72:	e042      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd74:	2302      	movs	r3, #2
 800dd76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd7a:	e03e      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd7c:	2304      	movs	r3, #4
 800dd7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd82:	e03a      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd84:	2308      	movs	r3, #8
 800dd86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd8a:	e036      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd8c:	2310      	movs	r3, #16
 800dd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd92:	e032      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a30      	ldr	r2, [pc, #192]	; (800de5c <UART_SetConfig+0x2e0>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d12a      	bne.n	800ddf4 <UART_SetConfig+0x278>
 800dd9e:	4b31      	ldr	r3, [pc, #196]	; (800de64 <UART_SetConfig+0x2e8>)
 800dda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dda4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dda8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ddac:	d01a      	beq.n	800dde4 <UART_SetConfig+0x268>
 800ddae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ddb2:	d81b      	bhi.n	800ddec <UART_SetConfig+0x270>
 800ddb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddb8:	d00c      	beq.n	800ddd4 <UART_SetConfig+0x258>
 800ddba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddbe:	d815      	bhi.n	800ddec <UART_SetConfig+0x270>
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <UART_SetConfig+0x250>
 800ddc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddc8:	d008      	beq.n	800dddc <UART_SetConfig+0x260>
 800ddca:	e00f      	b.n	800ddec <UART_SetConfig+0x270>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddd2:	e012      	b.n	800ddfa <UART_SetConfig+0x27e>
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddda:	e00e      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dddc:	2304      	movs	r3, #4
 800ddde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dde2:	e00a      	b.n	800ddfa <UART_SetConfig+0x27e>
 800dde4:	2308      	movs	r3, #8
 800dde6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddea:	e006      	b.n	800ddfa <UART_SetConfig+0x27e>
 800ddec:	2310      	movs	r3, #16
 800ddee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ddf2:	e002      	b.n	800ddfa <UART_SetConfig+0x27e>
 800ddf4:	2310      	movs	r3, #16
 800ddf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a17      	ldr	r2, [pc, #92]	; (800de5c <UART_SetConfig+0x2e0>)
 800de00:	4293      	cmp	r3, r2
 800de02:	f040 80a8 	bne.w	800df56 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de0a:	2b08      	cmp	r3, #8
 800de0c:	d834      	bhi.n	800de78 <UART_SetConfig+0x2fc>
 800de0e:	a201      	add	r2, pc, #4	; (adr r2, 800de14 <UART_SetConfig+0x298>)
 800de10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de14:	0800de39 	.word	0x0800de39
 800de18:	0800de79 	.word	0x0800de79
 800de1c:	0800de41 	.word	0x0800de41
 800de20:	0800de79 	.word	0x0800de79
 800de24:	0800de47 	.word	0x0800de47
 800de28:	0800de79 	.word	0x0800de79
 800de2c:	0800de79 	.word	0x0800de79
 800de30:	0800de79 	.word	0x0800de79
 800de34:	0800de4f 	.word	0x0800de4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de38:	f7fd fa32 	bl	800b2a0 <HAL_RCC_GetPCLK1Freq>
 800de3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de3e:	e021      	b.n	800de84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de40:	4b0c      	ldr	r3, [pc, #48]	; (800de74 <UART_SetConfig+0x2f8>)
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de44:	e01e      	b.n	800de84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de46:	f7fd f9bd 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800de4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de4c:	e01a      	b.n	800de84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de54:	e016      	b.n	800de84 <UART_SetConfig+0x308>
 800de56:	bf00      	nop
 800de58:	cfff69f3 	.word	0xcfff69f3
 800de5c:	40008000 	.word	0x40008000
 800de60:	40013800 	.word	0x40013800
 800de64:	40021000 	.word	0x40021000
 800de68:	40004400 	.word	0x40004400
 800de6c:	40004800 	.word	0x40004800
 800de70:	40004c00 	.word	0x40004c00
 800de74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800de82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	2b00      	cmp	r3, #0
 800de88:	f000 812a 	beq.w	800e0e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	4a9e      	ldr	r2, [pc, #632]	; (800e10c <UART_SetConfig+0x590>)
 800de92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de96:	461a      	mov	r2, r3
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de9e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	685a      	ldr	r2, [r3, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	69ba      	ldr	r2, [r7, #24]
 800deac:	429a      	cmp	r2, r3
 800deae:	d305      	bcc.n	800debc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d903      	bls.n	800dec4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dec2:	e10d      	b.n	800e0e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	2200      	movs	r2, #0
 800dec8:	60bb      	str	r3, [r7, #8]
 800deca:	60fa      	str	r2, [r7, #12]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	4a8e      	ldr	r2, [pc, #568]	; (800e10c <UART_SetConfig+0x590>)
 800ded2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2200      	movs	r2, #0
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	607a      	str	r2, [r7, #4]
 800dede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dee6:	f7f2 fef7 	bl	8000cd8 <__aeabi_uldivmod>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4610      	mov	r0, r2
 800def0:	4619      	mov	r1, r3
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	020b      	lsls	r3, r1, #8
 800defc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df00:	0202      	lsls	r2, r0, #8
 800df02:	6979      	ldr	r1, [r7, #20]
 800df04:	6849      	ldr	r1, [r1, #4]
 800df06:	0849      	lsrs	r1, r1, #1
 800df08:	2000      	movs	r0, #0
 800df0a:	460c      	mov	r4, r1
 800df0c:	4605      	mov	r5, r0
 800df0e:	eb12 0804 	adds.w	r8, r2, r4
 800df12:	eb43 0905 	adc.w	r9, r3, r5
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	469a      	mov	sl, r3
 800df1e:	4693      	mov	fp, r2
 800df20:	4652      	mov	r2, sl
 800df22:	465b      	mov	r3, fp
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 fed6 	bl	8000cd8 <__aeabi_uldivmod>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4613      	mov	r3, r2
 800df32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df3a:	d308      	bcc.n	800df4e <UART_SetConfig+0x3d2>
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df42:	d204      	bcs.n	800df4e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6a3a      	ldr	r2, [r7, #32]
 800df4a:	60da      	str	r2, [r3, #12]
 800df4c:	e0c8      	b.n	800e0e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800df54:	e0c4      	b.n	800e0e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df5e:	d167      	bne.n	800e030 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800df60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df64:	2b08      	cmp	r3, #8
 800df66:	d828      	bhi.n	800dfba <UART_SetConfig+0x43e>
 800df68:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <UART_SetConfig+0x3f4>)
 800df6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df6e:	bf00      	nop
 800df70:	0800df95 	.word	0x0800df95
 800df74:	0800df9d 	.word	0x0800df9d
 800df78:	0800dfa5 	.word	0x0800dfa5
 800df7c:	0800dfbb 	.word	0x0800dfbb
 800df80:	0800dfab 	.word	0x0800dfab
 800df84:	0800dfbb 	.word	0x0800dfbb
 800df88:	0800dfbb 	.word	0x0800dfbb
 800df8c:	0800dfbb 	.word	0x0800dfbb
 800df90:	0800dfb3 	.word	0x0800dfb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df94:	f7fd f984 	bl	800b2a0 <HAL_RCC_GetPCLK1Freq>
 800df98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800df9a:	e014      	b.n	800dfc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df9c:	f7fd f996 	bl	800b2cc <HAL_RCC_GetPCLK2Freq>
 800dfa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dfa2:	e010      	b.n	800dfc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dfa4:	4b5a      	ldr	r3, [pc, #360]	; (800e110 <UART_SetConfig+0x594>)
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dfa8:	e00d      	b.n	800dfc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dfaa:	f7fd f90b 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800dfae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dfb0:	e009      	b.n	800dfc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dfb8:	e005      	b.n	800dfc6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dfc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 8089 	beq.w	800e0e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd2:	4a4e      	ldr	r2, [pc, #312]	; (800e10c <UART_SetConfig+0x590>)
 800dfd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfe0:	005a      	lsls	r2, r3, #1
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	085b      	lsrs	r3, r3, #1
 800dfe8:	441a      	add	r2, r3
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	2b0f      	cmp	r3, #15
 800dff8:	d916      	bls.n	800e028 <UART_SetConfig+0x4ac>
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e000:	d212      	bcs.n	800e028 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	b29b      	uxth	r3, r3
 800e006:	f023 030f 	bic.w	r3, r3, #15
 800e00a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	085b      	lsrs	r3, r3, #1
 800e010:	b29b      	uxth	r3, r3
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	b29a      	uxth	r2, r3
 800e018:	8bfb      	ldrh	r3, [r7, #30]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	8bfa      	ldrh	r2, [r7, #30]
 800e024:	60da      	str	r2, [r3, #12]
 800e026:	e05b      	b.n	800e0e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e028:	2301      	movs	r3, #1
 800e02a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e02e:	e057      	b.n	800e0e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e034:	2b08      	cmp	r3, #8
 800e036:	d828      	bhi.n	800e08a <UART_SetConfig+0x50e>
 800e038:	a201      	add	r2, pc, #4	; (adr r2, 800e040 <UART_SetConfig+0x4c4>)
 800e03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03e:	bf00      	nop
 800e040:	0800e065 	.word	0x0800e065
 800e044:	0800e06d 	.word	0x0800e06d
 800e048:	0800e075 	.word	0x0800e075
 800e04c:	0800e08b 	.word	0x0800e08b
 800e050:	0800e07b 	.word	0x0800e07b
 800e054:	0800e08b 	.word	0x0800e08b
 800e058:	0800e08b 	.word	0x0800e08b
 800e05c:	0800e08b 	.word	0x0800e08b
 800e060:	0800e083 	.word	0x0800e083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e064:	f7fd f91c 	bl	800b2a0 <HAL_RCC_GetPCLK1Freq>
 800e068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e06a:	e014      	b.n	800e096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e06c:	f7fd f92e 	bl	800b2cc <HAL_RCC_GetPCLK2Freq>
 800e070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e072:	e010      	b.n	800e096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e074:	4b26      	ldr	r3, [pc, #152]	; (800e110 <UART_SetConfig+0x594>)
 800e076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e078:	e00d      	b.n	800e096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e07a:	f7fd f8a3 	bl	800b1c4 <HAL_RCC_GetSysClockFreq>
 800e07e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e080:	e009      	b.n	800e096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e088:	e005      	b.n	800e096 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800e08a:	2300      	movs	r3, #0
 800e08c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e094:	bf00      	nop
    }

    if (pclk != 0U)
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d021      	beq.n	800e0e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a0:	4a1a      	ldr	r2, [pc, #104]	; (800e10c <UART_SetConfig+0x590>)
 800e0a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	085b      	lsrs	r3, r3, #1
 800e0b4:	441a      	add	r2, r3
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	2b0f      	cmp	r3, #15
 800e0c4:	d909      	bls.n	800e0da <UART_SetConfig+0x55e>
 800e0c6:	6a3b      	ldr	r3, [r7, #32]
 800e0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0cc:	d205      	bcs.n	800e0da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e0ce:	6a3b      	ldr	r3, [r7, #32]
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	60da      	str	r2, [r3, #12]
 800e0d8:	e002      	b.n	800e0e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e0fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e100:	4618      	mov	r0, r3
 800e102:	3730      	adds	r7, #48	; 0x30
 800e104:	46bd      	mov	sp, r7
 800e106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e10a:	bf00      	nop
 800e10c:	080180b4 	.word	0x080180b4
 800e110:	00f42400 	.word	0x00f42400

0800e114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e120:	f003 0308 	and.w	r3, r3, #8
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00a      	beq.n	800e13e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	430a      	orrs	r2, r1
 800e13c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00a      	beq.n	800e160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	430a      	orrs	r2, r1
 800e15e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	f003 0302 	and.w	r3, r3, #2
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00a      	beq.n	800e182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	430a      	orrs	r2, r1
 800e180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e186:	f003 0304 	and.w	r3, r3, #4
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00a      	beq.n	800e1a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a8:	f003 0310 	and.w	r3, r3, #16
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00a      	beq.n	800e1c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ca:	f003 0320 	and.w	r3, r3, #32
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	430a      	orrs	r2, r1
 800e1e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d01a      	beq.n	800e22a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e20e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e212:	d10a      	bne.n	800e22a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	430a      	orrs	r2, r1
 800e228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00a      	beq.n	800e24c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	430a      	orrs	r2, r1
 800e24a:	605a      	str	r2, [r3, #4]
  }
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b098      	sub	sp, #96	; 0x60
 800e25c:	af02      	add	r7, sp, #8
 800e25e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e268:	f7f7 f9de 	bl	8005628 <HAL_GetTick>
 800e26c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f003 0308 	and.w	r3, r3, #8
 800e278:	2b08      	cmp	r3, #8
 800e27a:	d12f      	bne.n	800e2dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e27c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e284:	2200      	movs	r2, #0
 800e286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f000 f88e 	bl	800e3ac <UART_WaitOnFlagUntilTimeout>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d022      	beq.n	800e2dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	e853 3f00 	ldrex	r3, [r3]
 800e2a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b4:	647b      	str	r3, [r7, #68]	; 0x44
 800e2b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e2ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2bc:	e841 2300 	strex	r3, r2, [r1]
 800e2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1e6      	bne.n	800e296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2220      	movs	r2, #32
 800e2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2d8:	2303      	movs	r3, #3
 800e2da:	e063      	b.n	800e3a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0304 	and.w	r3, r3, #4
 800e2e6:	2b04      	cmp	r3, #4
 800e2e8:	d149      	bne.n	800e37e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 f857 	bl	800e3ac <UART_WaitOnFlagUntilTimeout>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d03c      	beq.n	800e37e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	e853 3f00 	ldrex	r3, [r3]
 800e310:	623b      	str	r3, [r7, #32]
   return(result);
 800e312:	6a3b      	ldr	r3, [r7, #32]
 800e314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e322:	633b      	str	r3, [r7, #48]	; 0x30
 800e324:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e32a:	e841 2300 	strex	r3, r2, [r1]
 800e32e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e6      	bne.n	800e304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3308      	adds	r3, #8
 800e33c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	e853 3f00 	ldrex	r3, [r3]
 800e344:	60fb      	str	r3, [r7, #12]
   return(result);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f023 0301 	bic.w	r3, r3, #1
 800e34c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3308      	adds	r3, #8
 800e354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e356:	61fa      	str	r2, [r7, #28]
 800e358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e35a:	69b9      	ldr	r1, [r7, #24]
 800e35c:	69fa      	ldr	r2, [r7, #28]
 800e35e:	e841 2300 	strex	r3, r2, [r1]
 800e362:	617b      	str	r3, [r7, #20]
   return(result);
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1e5      	bne.n	800e336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2220      	movs	r2, #32
 800e36e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e37a:	2303      	movs	r3, #3
 800e37c:	e012      	b.n	800e3a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2220      	movs	r2, #32
 800e382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2220      	movs	r2, #32
 800e38a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3758      	adds	r7, #88	; 0x58
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3bc:	e04f      	b.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c4:	d04b      	beq.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3c6:	f7f7 f92f 	bl	8005628 <HAL_GetTick>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	69ba      	ldr	r2, [r7, #24]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d302      	bcc.n	800e3dc <UART_WaitOnFlagUntilTimeout+0x30>
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d101      	bne.n	800e3e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	e04e      	b.n	800e47e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f003 0304 	and.w	r3, r3, #4
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d037      	beq.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b80      	cmp	r3, #128	; 0x80
 800e3f2:	d034      	beq.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b40      	cmp	r3, #64	; 0x40
 800e3f8:	d031      	beq.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69db      	ldr	r3, [r3, #28]
 800e400:	f003 0308 	and.w	r3, r3, #8
 800e404:	2b08      	cmp	r3, #8
 800e406:	d110      	bne.n	800e42a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2208      	movs	r2, #8
 800e40e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f000 f838 	bl	800e486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2208      	movs	r2, #8
 800e41a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e426:	2301      	movs	r3, #1
 800e428:	e029      	b.n	800e47e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69db      	ldr	r3, [r3, #28]
 800e430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e438:	d111      	bne.n	800e45e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f81e 	bl	800e486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e45a:	2303      	movs	r3, #3
 800e45c:	e00f      	b.n	800e47e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	69da      	ldr	r2, [r3, #28]
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	4013      	ands	r3, r2
 800e468:	68ba      	ldr	r2, [r7, #8]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	bf0c      	ite	eq
 800e46e:	2301      	moveq	r3, #1
 800e470:	2300      	movne	r3, #0
 800e472:	b2db      	uxtb	r3, r3
 800e474:	461a      	mov	r2, r3
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d0a0      	beq.n	800e3be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e486:	b480      	push	{r7}
 800e488:	b095      	sub	sp, #84	; 0x54
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e496:	e853 3f00 	ldrex	r3, [r3]
 800e49a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ac:	643b      	str	r3, [r7, #64]	; 0x40
 800e4ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4b4:	e841 2300 	strex	r3, r2, [r1]
 800e4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1e6      	bne.n	800e48e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	e853 3f00 	ldrex	r3, [r3]
 800e4ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4d6:	f023 0301 	bic.w	r3, r3, #1
 800e4da:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ec:	e841 2300 	strex	r3, r2, [r1]
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1e3      	bne.n	800e4c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d118      	bne.n	800e532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	f023 0310 	bic.w	r3, r3, #16
 800e514:	647b      	str	r3, [r7, #68]	; 0x44
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	461a      	mov	r2, r3
 800e51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e51e:	61bb      	str	r3, [r7, #24]
 800e520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e522:	6979      	ldr	r1, [r7, #20]
 800e524:	69ba      	ldr	r2, [r7, #24]
 800e526:	e841 2300 	strex	r3, r2, [r1]
 800e52a:	613b      	str	r3, [r7, #16]
   return(result);
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1e6      	bne.n	800e500 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e546:	bf00      	nop
 800e548:	3754      	adds	r7, #84	; 0x54
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr

0800e552 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e552:	b480      	push	{r7}
 800e554:	b085      	sub	sp, #20
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e560:	2b01      	cmp	r3, #1
 800e562:	d101      	bne.n	800e568 <HAL_UARTEx_DisableFifoMode+0x16>
 800e564:	2302      	movs	r3, #2
 800e566:	e027      	b.n	800e5b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2224      	movs	r2, #36	; 0x24
 800e574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f022 0201 	bic.w	r2, r2, #1
 800e58e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e596:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2220      	movs	r2, #32
 800e5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d101      	bne.n	800e5dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e5d8:	2302      	movs	r3, #2
 800e5da:	e02d      	b.n	800e638 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2224      	movs	r2, #36	; 0x24
 800e5e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f022 0201 	bic.w	r2, r2, #1
 800e602:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f84f 	bl	800e6bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2220      	movs	r2, #32
 800e62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e650:	2b01      	cmp	r3, #1
 800e652:	d101      	bne.n	800e658 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e654:	2302      	movs	r3, #2
 800e656:	e02d      	b.n	800e6b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2224      	movs	r2, #36	; 0x24
 800e664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f022 0201 	bic.w	r2, r2, #1
 800e67e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	689b      	ldr	r3, [r3, #8]
 800e686:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	430a      	orrs	r2, r1
 800e692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f811 	bl	800e6bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d108      	bne.n	800e6de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e6dc:	e031      	b.n	800e742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e6de:	2308      	movs	r3, #8
 800e6e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e6e2:	2308      	movs	r3, #8
 800e6e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	0e5b      	lsrs	r3, r3, #25
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	f003 0307 	and.w	r3, r3, #7
 800e6f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	0f5b      	lsrs	r3, r3, #29
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	f003 0307 	and.w	r3, r3, #7
 800e704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	7b3a      	ldrb	r2, [r7, #12]
 800e70a:	4911      	ldr	r1, [pc, #68]	; (800e750 <UARTEx_SetNbDataToProcess+0x94>)
 800e70c:	5c8a      	ldrb	r2, [r1, r2]
 800e70e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e712:	7b3a      	ldrb	r2, [r7, #12]
 800e714:	490f      	ldr	r1, [pc, #60]	; (800e754 <UARTEx_SetNbDataToProcess+0x98>)
 800e716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e718:	fb93 f3f2 	sdiv	r3, r3, r2
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e724:	7bfb      	ldrb	r3, [r7, #15]
 800e726:	7b7a      	ldrb	r2, [r7, #13]
 800e728:	4909      	ldr	r1, [pc, #36]	; (800e750 <UARTEx_SetNbDataToProcess+0x94>)
 800e72a:	5c8a      	ldrb	r2, [r1, r2]
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e730:	7b7a      	ldrb	r2, [r7, #13]
 800e732:	4908      	ldr	r1, [pc, #32]	; (800e754 <UARTEx_SetNbDataToProcess+0x98>)
 800e734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e736:	fb93 f3f2 	sdiv	r3, r3, r2
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e742:	bf00      	nop
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	080180cc 	.word	0x080180cc
 800e754:	080180d4 	.word	0x080180d4

0800e758 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e768:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e76c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	b29a      	uxth	r2, r3
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e786:	b480      	push	{r7}
 800e788:	b085      	sub	sp, #20
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e78e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800e792:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	43db      	mvns	r3, r3
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	1d3b      	adds	r3, r7, #4
 800e7c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b09d      	sub	sp, #116	; 0x74
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	b29b      	uxth	r3, r3
 800e816:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800e81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e81e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	78db      	ldrb	r3, [r3, #3]
 800e826:	2b03      	cmp	r3, #3
 800e828:	d81f      	bhi.n	800e86a <USB_ActivateEndpoint+0x72>
 800e82a:	a201      	add	r2, pc, #4	; (adr r2, 800e830 <USB_ActivateEndpoint+0x38>)
 800e82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e830:	0800e841 	.word	0x0800e841
 800e834:	0800e85d 	.word	0x0800e85d
 800e838:	0800e873 	.word	0x0800e873
 800e83c:	0800e84f 	.word	0x0800e84f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e840:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e848:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e84c:	e012      	b.n	800e874 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e84e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e852:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800e856:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e85a:	e00b      	b.n	800e874 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e85c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e864:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e868:	e004      	b.n	800e874 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800e870:	e000      	b.n	800e874 <USB_ActivateEndpoint+0x7c>
      break;
 800e872:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	441a      	add	r2, r3
 800e87e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e88a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e892:	b29b      	uxth	r3, r3
 800e894:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4413      	add	r3, r2
 800e8a0:	881b      	ldrh	r3, [r3, #0]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	b21b      	sxth	r3, r3
 800e8a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8ae:	b21a      	sxth	r2, r3
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	b21b      	sxth	r3, r3
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	b21b      	sxth	r3, r3
 800e8ba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	441a      	add	r2, r3
 800e8c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	7b1b      	ldrb	r3, [r3, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 8178 	bne.w	800ebda <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	785b      	ldrb	r3, [r3, #1]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 8084 	beq.w	800e9fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	61bb      	str	r3, [r7, #24]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	461a      	mov	r2, r3
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	4413      	add	r3, r2
 800e906:	61bb      	str	r3, [r7, #24]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	00da      	lsls	r2, r3, #3
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	4413      	add	r3, r2
 800e912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e916:	617b      	str	r3, [r7, #20]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	88db      	ldrh	r3, [r3, #6]
 800e91c:	085b      	lsrs	r3, r3, #1
 800e91e:	b29b      	uxth	r3, r3
 800e920:	005b      	lsls	r3, r3, #1
 800e922:	b29a      	uxth	r2, r3
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	009b      	lsls	r3, r3, #2
 800e930:	4413      	add	r3, r2
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	827b      	strh	r3, [r7, #18]
 800e936:	8a7b      	ldrh	r3, [r7, #18]
 800e938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d01b      	beq.n	800e978 <USB_ActivateEndpoint+0x180>
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	4413      	add	r3, r2
 800e94a:	881b      	ldrh	r3, [r3, #0]
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e956:	823b      	strh	r3, [r7, #16]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	441a      	add	r2, r3
 800e962:	8a3b      	ldrh	r3, [r7, #16]
 800e964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e974:	b29b      	uxth	r3, r3
 800e976:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	78db      	ldrb	r3, [r3, #3]
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d020      	beq.n	800e9c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	4413      	add	r3, r2
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e996:	81bb      	strh	r3, [r7, #12]
 800e998:	89bb      	ldrh	r3, [r7, #12]
 800e99a:	f083 0320 	eor.w	r3, r3, #32
 800e99e:	81bb      	strh	r3, [r7, #12]
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	441a      	add	r2, r3
 800e9aa:	89bb      	ldrh	r3, [r7, #12]
 800e9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	8013      	strh	r3, [r2, #0]
 800e9c0:	e2d5      	b.n	800ef6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	4413      	add	r3, r2
 800e9cc:	881b      	ldrh	r3, [r3, #0]
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9d8:	81fb      	strh	r3, [r7, #14]
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	441a      	add	r2, r3
 800e9e4:	89fb      	ldrh	r3, [r7, #14]
 800e9e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	8013      	strh	r3, [r2, #0]
 800e9fa:	e2b8      	b.n	800ef6e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	633b      	str	r3, [r7, #48]	; 0x30
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0c:	4413      	add	r3, r2
 800ea0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	00da      	lsls	r2, r3, #3
 800ea16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea18:	4413      	add	r3, r2
 800ea1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ea1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	88db      	ldrh	r3, [r3, #6]
 800ea24:	085b      	lsrs	r3, r3, #1
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	4413      	add	r3, r2
 800ea42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	00da      	lsls	r2, r3, #3
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	4413      	add	r3, r2
 800ea4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea52:	627b      	str	r3, [r7, #36]	; 0x24
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea62:	801a      	strh	r2, [r3, #0]
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	2b3e      	cmp	r3, #62	; 0x3e
 800ea6a:	d91d      	bls.n	800eaa8 <USB_ActivateEndpoint+0x2b0>
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	095b      	lsrs	r3, r3, #5
 800ea72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	f003 031f 	and.w	r3, r3, #31
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d102      	bne.n	800ea86 <USB_ActivateEndpoint+0x28e>
 800ea80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea82:	3b01      	subs	r3, #1
 800ea84:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	881b      	ldrh	r3, [r3, #0]
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	029b      	lsls	r3, r3, #10
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4313      	orrs	r3, r2
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	801a      	strh	r2, [r3, #0]
 800eaa6:	e026      	b.n	800eaf6 <USB_ActivateEndpoint+0x2fe>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d10a      	bne.n	800eac6 <USB_ActivateEndpoint+0x2ce>
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	801a      	strh	r2, [r3, #0]
 800eac4:	e017      	b.n	800eaf6 <USB_ActivateEndpoint+0x2fe>
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	085b      	lsrs	r3, r3, #1
 800eacc:	66bb      	str	r3, [r7, #104]	; 0x68
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	f003 0301 	and.w	r3, r3, #1
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <USB_ActivateEndpoint+0x2e8>
 800eada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eadc:	3301      	adds	r3, #1
 800eade:	66bb      	str	r3, [r7, #104]	; 0x68
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	029b      	lsls	r3, r3, #10
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4413      	add	r3, r2
 800eb00:	881b      	ldrh	r3, [r3, #0]
 800eb02:	847b      	strh	r3, [r7, #34]	; 0x22
 800eb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d01b      	beq.n	800eb46 <USB_ActivateEndpoint+0x34e>
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb24:	843b      	strh	r3, [r7, #32]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	441a      	add	r2, r3
 800eb30:	8c3b      	ldrh	r3, [r7, #32]
 800eb32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d124      	bne.n	800eb98 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb64:	83bb      	strh	r3, [r7, #28]
 800eb66:	8bbb      	ldrh	r3, [r7, #28]
 800eb68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800eb6c:	83bb      	strh	r3, [r7, #28]
 800eb6e:	8bbb      	ldrh	r3, [r7, #28]
 800eb70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eb74:	83bb      	strh	r3, [r7, #28]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	009b      	lsls	r3, r3, #2
 800eb7e:	441a      	add	r2, r3
 800eb80:	8bbb      	ldrh	r3, [r7, #28]
 800eb82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	8013      	strh	r3, [r2, #0]
 800eb96:	e1ea      	b.n	800ef6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	4413      	add	r3, r2
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ebaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebae:	83fb      	strh	r3, [r7, #30]
 800ebb0:	8bfb      	ldrh	r3, [r7, #30]
 800ebb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ebb6:	83fb      	strh	r3, [r7, #30]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	441a      	add	r2, r3
 800ebc2:	8bfb      	ldrh	r3, [r7, #30]
 800ebc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	8013      	strh	r3, [r2, #0]
 800ebd8:	e1c9      	b.n	800ef6e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	78db      	ldrb	r3, [r3, #3]
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d11e      	bne.n	800ec20 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	4413      	add	r3, r2
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebf8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	441a      	add	r2, r3
 800ec06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ec0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ec16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	8013      	strh	r3, [r2, #0]
 800ec1e:	e01d      	b.n	800ec5c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4413      	add	r3, r2
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ec32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	441a      	add	r2, r3
 800ec44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800ec48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	461a      	mov	r2, r3
 800ec6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec6c:	4413      	add	r3, r2
 800ec6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	00da      	lsls	r2, r3, #3
 800ec76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec7e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	891b      	ldrh	r3, [r3, #8]
 800ec84:	085b      	lsrs	r3, r3, #1
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec8e:	801a      	strh	r2, [r3, #0]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	657b      	str	r3, [r7, #84]	; 0x54
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eca0:	4413      	add	r3, r2
 800eca2:	657b      	str	r3, [r7, #84]	; 0x54
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	00da      	lsls	r2, r3, #3
 800ecaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecac:	4413      	add	r3, r2
 800ecae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ecb2:	653b      	str	r3, [r7, #80]	; 0x50
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	895b      	ldrh	r3, [r3, #10]
 800ecb8:	085b      	lsrs	r3, r3, #1
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	005b      	lsls	r3, r3, #1
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	785b      	ldrb	r3, [r3, #1]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f040 8093 	bne.w	800edf4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4413      	add	r3, r2
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ecde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ece2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d01b      	beq.n	800ed22 <USB_ActivateEndpoint+0x52a>
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	441a      	add	r2, r3
 800ed0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ed1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	4413      	add	r3, r2
 800ed2c:	881b      	ldrh	r3, [r3, #0]
 800ed2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ed30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d01b      	beq.n	800ed72 <USB_ActivateEndpoint+0x57a>
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed50:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	441a      	add	r2, r3
 800ed5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed88:	873b      	strh	r3, [r7, #56]	; 0x38
 800ed8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ed8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ed90:	873b      	strh	r3, [r7, #56]	; 0x38
 800ed92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ed94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ed98:	873b      	strh	r3, [r7, #56]	; 0x38
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	009b      	lsls	r3, r3, #2
 800eda2:	441a      	add	r2, r3
 800eda4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800eda6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4413      	add	r3, r2
 800edc4:	881b      	ldrh	r3, [r3, #0]
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	441a      	add	r2, r3
 800eddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800edde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ede2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ede6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edee:	b29b      	uxth	r3, r3
 800edf0:	8013      	strh	r3, [r2, #0]
 800edf2:	e0bc      	b.n	800ef6e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ee04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ee08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d01d      	beq.n	800ee4c <USB_ActivateEndpoint+0x654>
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	4413      	add	r3, r2
 800ee1a:	881b      	ldrh	r3, [r3, #0]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	441a      	add	r2, r3
 800ee34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ee38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ee5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ee60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01d      	beq.n	800eea4 <USB_ActivateEndpoint+0x6ac>
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	441a      	add	r2, r3
 800ee8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ee90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	78db      	ldrb	r3, [r3, #3]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d024      	beq.n	800eef6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eec2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800eec6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eeca:	f083 0320 	eor.w	r3, r3, #32
 800eece:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	441a      	add	r2, r3
 800eedc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	8013      	strh	r3, [r2, #0]
 800eef4:	e01d      	b.n	800ef32 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	881b      	ldrh	r3, [r3, #0]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef0c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	009b      	lsls	r3, r3, #2
 800ef18:	441a      	add	r2, r3
 800ef1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4413      	add	r3, r2
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	441a      	add	r2, r3
 800ef56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ef6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3774      	adds	r7, #116	; 0x74
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop

0800ef80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b08d      	sub	sp, #52	; 0x34
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	7b1b      	ldrb	r3, [r3, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 808e 	bne.w	800f0b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	785b      	ldrb	r3, [r3, #1]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d044      	beq.n	800f026 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	4413      	add	r3, r2
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	81bb      	strh	r3, [r7, #12]
 800efaa:	89bb      	ldrh	r3, [r7, #12]
 800efac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d01b      	beq.n	800efec <USB_DeactivateEndpoint+0x6c>
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4413      	add	r3, r2
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efca:	817b      	strh	r3, [r7, #10]
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	441a      	add	r2, r3
 800efd6:	897b      	ldrh	r3, [r7, #10]
 800efd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800efdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800efe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800efe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800efe8:	b29b      	uxth	r3, r3
 800efea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	781b      	ldrb	r3, [r3, #0]
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	4413      	add	r3, r2
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	b29b      	uxth	r3, r3
 800effa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800effe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f002:	813b      	strh	r3, [r7, #8]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	441a      	add	r2, r3
 800f00e:	893b      	ldrh	r3, [r7, #8]
 800f010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f01c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f020:	b29b      	uxth	r3, r3
 800f022:	8013      	strh	r3, [r2, #0]
 800f024:	e192      	b.n	800f34c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	4413      	add	r3, r2
 800f030:	881b      	ldrh	r3, [r3, #0]
 800f032:	827b      	strh	r3, [r7, #18]
 800f034:	8a7b      	ldrh	r3, [r7, #18]
 800f036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d01b      	beq.n	800f076 <USB_DeactivateEndpoint+0xf6>
 800f03e:	687a      	ldr	r2, [r7, #4]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	4413      	add	r3, r2
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f054:	823b      	strh	r3, [r7, #16]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	441a      	add	r2, r3
 800f060:	8a3b      	ldrh	r3, [r7, #16]
 800f062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f06a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f072:	b29b      	uxth	r3, r3
 800f074:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	b29b      	uxth	r3, r3
 800f084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f08c:	81fb      	strh	r3, [r7, #14]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	441a      	add	r2, r3
 800f098:	89fb      	ldrh	r3, [r7, #14]
 800f09a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f09e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	8013      	strh	r3, [r2, #0]
 800f0ae:	e14d      	b.n	800f34c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	785b      	ldrb	r3, [r3, #1]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f040 80a5 	bne.w	800f204 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	881b      	ldrh	r3, [r3, #0]
 800f0c6:	843b      	strh	r3, [r7, #32]
 800f0c8:	8c3b      	ldrh	r3, [r7, #32]
 800f0ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d01b      	beq.n	800f10a <USB_DeactivateEndpoint+0x18a>
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e8:	83fb      	strh	r3, [r7, #30]
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	441a      	add	r2, r3
 800f0f4:	8bfb      	ldrh	r3, [r7, #30]
 800f0f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f106:	b29b      	uxth	r3, r3
 800f108:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	4413      	add	r3, r2
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	83bb      	strh	r3, [r7, #28]
 800f118:	8bbb      	ldrh	r3, [r7, #28]
 800f11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d01b      	beq.n	800f15a <USB_DeactivateEndpoint+0x1da>
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4413      	add	r3, r2
 800f12c:	881b      	ldrh	r3, [r3, #0]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f138:	837b      	strh	r3, [r7, #26]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	441a      	add	r2, r3
 800f144:	8b7b      	ldrh	r3, [r7, #26]
 800f146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f14a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f156:	b29b      	uxth	r3, r3
 800f158:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f15a:	687a      	ldr	r2, [r7, #4]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	881b      	ldrh	r3, [r3, #0]
 800f166:	b29b      	uxth	r3, r3
 800f168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f16c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f170:	833b      	strh	r3, [r7, #24]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	441a      	add	r2, r3
 800f17c:	8b3b      	ldrh	r3, [r7, #24]
 800f17e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f18a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f18e:	b29b      	uxth	r3, r3
 800f190:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	4413      	add	r3, r2
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1a8:	82fb      	strh	r3, [r7, #22]
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	441a      	add	r2, r3
 800f1b4:	8afb      	ldrh	r3, [r7, #22]
 800f1b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f1ca:	687a      	ldr	r2, [r7, #4]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4413      	add	r3, r2
 800f1d4:	881b      	ldrh	r3, [r3, #0]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1e0:	82bb      	strh	r3, [r7, #20]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	441a      	add	r2, r3
 800f1ec:	8abb      	ldrh	r3, [r7, #20]
 800f1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	8013      	strh	r3, [r2, #0]
 800f202:	e0a3      	b.n	800f34c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01b      	beq.n	800f254 <USB_DeactivateEndpoint+0x2d4>
 800f21c:	687a      	ldr	r2, [r7, #4]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	4413      	add	r3, r2
 800f226:	881b      	ldrh	r3, [r3, #0]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f232:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	441a      	add	r2, r3
 800f23e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f250:	b29b      	uxth	r3, r3
 800f252:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	009b      	lsls	r3, r3, #2
 800f25c:	4413      	add	r3, r2
 800f25e:	881b      	ldrh	r3, [r3, #0]
 800f260:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d01b      	beq.n	800f2a4 <USB_DeactivateEndpoint+0x324>
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f282:	853b      	strh	r3, [r7, #40]	; 0x28
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	441a      	add	r2, r3
 800f28e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f29c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	441a      	add	r2, r3
 800f2c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f2c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	009b      	lsls	r3, r3, #2
 800f2e4:	4413      	add	r3, r2
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	b29b      	uxth	r3, r3
 800f2ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	441a      	add	r2, r3
 800f2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f310:	b29b      	uxth	r3, r3
 800f312:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	4413      	add	r3, r2
 800f31e:	881b      	ldrh	r3, [r3, #0]
 800f320:	b29b      	uxth	r3, r3
 800f322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f32a:	847b      	strh	r3, [r7, #34]	; 0x22
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	441a      	add	r2, r3
 800f336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f33c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f348:	b29b      	uxth	r3, r3
 800f34a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f34c:	2300      	movs	r3, #0
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3734      	adds	r7, #52	; 0x34
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr

0800f35a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f35a:	b580      	push	{r7, lr}
 800f35c:	b0c2      	sub	sp, #264	; 0x108
 800f35e:	af00      	add	r7, sp, #0
 800f360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f368:	6018      	str	r0, [r3, #0]
 800f36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f36e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f372:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	785b      	ldrb	r3, [r3, #1]
 800f380:	2b01      	cmp	r3, #1
 800f382:	f040 86b7 	bne.w	80100f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	699a      	ldr	r2, [r3, #24]
 800f392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	691b      	ldr	r3, [r3, #16]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d908      	bls.n	800f3b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f3b2:	e007      	b.n	800f3c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	7b1b      	ldrb	r3, [r3, #12]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d13a      	bne.n	800f44a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6959      	ldr	r1, [r3, #20]
 800f3e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	88da      	ldrh	r2, [r3, #6]
 800f3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f3f6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f3fa:	6800      	ldr	r0, [r0, #0]
 800f3fc:	f001 fc98 	bl	8010d30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	613b      	str	r3, [r7, #16]
 800f40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	461a      	mov	r2, r3
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	4413      	add	r3, r2
 800f422:	613b      	str	r3, [r7, #16]
 800f424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	00da      	lsls	r2, r3, #3
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	4413      	add	r3, r2
 800f436:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f440:	b29a      	uxth	r2, r3
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	801a      	strh	r2, [r3, #0]
 800f446:	f000 be1f 	b.w	8010088 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	78db      	ldrb	r3, [r3, #3]
 800f456:	2b02      	cmp	r3, #2
 800f458:	f040 8462 	bne.w	800fd20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6a1a      	ldr	r2, [r3, #32]
 800f468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	429a      	cmp	r2, r3
 800f476:	f240 83df 	bls.w	800fc38 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f47e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	881b      	ldrh	r3, [r3, #0]
 800f496:	b29b      	uxth	r3, r3
 800f498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f49c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	441a      	add	r2, r3
 800f4be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f4c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6a1a      	ldr	r2, [r3, #32]
 800f4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4e6:	1ad2      	subs	r2, r2, r3
 800f4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	781b      	ldrb	r3, [r3, #0]
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4413      	add	r3, r2
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	b29b      	uxth	r3, r3
 800f512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f516:	2b00      	cmp	r3, #0
 800f518:	f000 81c7 	beq.w	800f8aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	633b      	str	r3, [r7, #48]	; 0x30
 800f528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	785b      	ldrb	r3, [r3, #1]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d177      	bne.n	800f628 <USB_EPStartXfer+0x2ce>
 800f538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f53c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	62bb      	str	r3, [r7, #40]	; 0x28
 800f544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f552:	b29b      	uxth	r3, r3
 800f554:	461a      	mov	r2, r3
 800f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f558:	4413      	add	r3, r2
 800f55a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	00da      	lsls	r2, r3, #3
 800f56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56c:	4413      	add	r3, r2
 800f56e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f572:	627b      	str	r3, [r7, #36]	; 0x24
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f57e:	b29a      	uxth	r2, r3
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	801a      	strh	r2, [r3, #0]
 800f584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f588:	2b3e      	cmp	r3, #62	; 0x3e
 800f58a:	d921      	bls.n	800f5d0 <USB_EPStartXfer+0x276>
 800f58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f590:	095b      	lsrs	r3, r3, #5
 800f592:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f59a:	f003 031f 	and.w	r3, r3, #31
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d104      	bne.n	800f5ac <USB_EPStartXfer+0x252>
 800f5a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	029b      	lsls	r3, r3, #10
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	801a      	strh	r2, [r3, #0]
 800f5ce:	e050      	b.n	800f672 <USB_EPStartXfer+0x318>
 800f5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10a      	bne.n	800f5ee <USB_EPStartXfer+0x294>
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ea:	801a      	strh	r2, [r3, #0]
 800f5ec:	e041      	b.n	800f672 <USB_EPStartXfer+0x318>
 800f5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5f2:	085b      	lsrs	r3, r3, #1
 800f5f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5fc:	f003 0301 	and.w	r3, r3, #1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d004      	beq.n	800f60e <USB_EPStartXfer+0x2b4>
 800f604:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f608:	3301      	adds	r3, #1
 800f60a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	b29a      	uxth	r2, r3
 800f614:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f618:	b29b      	uxth	r3, r3
 800f61a:	029b      	lsls	r3, r3, #10
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	4313      	orrs	r3, r2
 800f620:	b29a      	uxth	r2, r3
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	801a      	strh	r2, [r3, #0]
 800f626:	e024      	b.n	800f672 <USB_EPStartXfer+0x318>
 800f628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f62c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	785b      	ldrb	r3, [r3, #1]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d11c      	bne.n	800f672 <USB_EPStartXfer+0x318>
 800f638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f63c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f646:	b29b      	uxth	r3, r3
 800f648:	461a      	mov	r2, r3
 800f64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64c:	4413      	add	r3, r2
 800f64e:	633b      	str	r3, [r7, #48]	; 0x30
 800f650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	00da      	lsls	r2, r3, #3
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	4413      	add	r3, r2
 800f662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	895b      	ldrh	r3, [r3, #10]
 800f67e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6959      	ldr	r1, [r3, #20]
 800f68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f692:	b29b      	uxth	r3, r3
 800f694:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f698:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f69c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f6a0:	6800      	ldr	r0, [r0, #0]
 800f6a2:	f001 fb45 	bl	8010d30 <USB_WritePMA>
            ep->xfer_buff += len;
 800f6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	695a      	ldr	r2, [r3, #20]
 800f6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6b6:	441a      	add	r2, r3
 800f6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	6a1a      	ldr	r2, [r3, #32]
 800f6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d90f      	bls.n	800f700 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800f6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	6a1a      	ldr	r2, [r3, #32]
 800f6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6f0:	1ad2      	subs	r2, r2, r3
 800f6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	621a      	str	r2, [r3, #32]
 800f6fe:	e00e      	b.n	800f71e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800f700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2200      	movs	r2, #0
 800f71c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	785b      	ldrb	r3, [r3, #1]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d177      	bne.n	800f81e <USB_EPStartXfer+0x4c4>
 800f72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	61bb      	str	r3, [r7, #24]
 800f73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f748:	b29b      	uxth	r3, r3
 800f74a:	461a      	mov	r2, r3
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	4413      	add	r3, r2
 800f750:	61bb      	str	r3, [r7, #24]
 800f752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	00da      	lsls	r2, r3, #3
 800f760:	69bb      	ldr	r3, [r7, #24]
 800f762:	4413      	add	r3, r2
 800f764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f768:	617b      	str	r3, [r7, #20]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	b29b      	uxth	r3, r3
 800f770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f774:	b29a      	uxth	r2, r3
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	801a      	strh	r2, [r3, #0]
 800f77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f77e:	2b3e      	cmp	r3, #62	; 0x3e
 800f780:	d921      	bls.n	800f7c6 <USB_EPStartXfer+0x46c>
 800f782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f786:	095b      	lsrs	r3, r3, #5
 800f788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f790:	f003 031f 	and.w	r3, r3, #31
 800f794:	2b00      	cmp	r3, #0
 800f796:	d104      	bne.n	800f7a2 <USB_EPStartXfer+0x448>
 800f798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f79c:	3b01      	subs	r3, #1
 800f79e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	029b      	lsls	r3, r3, #10
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7be:	b29a      	uxth	r2, r3
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	801a      	strh	r2, [r3, #0]
 800f7c4:	e056      	b.n	800f874 <USB_EPStartXfer+0x51a>
 800f7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10a      	bne.n	800f7e4 <USB_EPStartXfer+0x48a>
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f7d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	801a      	strh	r2, [r3, #0]
 800f7e2:	e047      	b.n	800f874 <USB_EPStartXfer+0x51a>
 800f7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7e8:	085b      	lsrs	r3, r3, #1
 800f7ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7f2:	f003 0301 	and.w	r3, r3, #1
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d004      	beq.n	800f804 <USB_EPStartXfer+0x4aa>
 800f7fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f7fe:	3301      	adds	r3, #1
 800f800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	881b      	ldrh	r3, [r3, #0]
 800f808:	b29a      	uxth	r2, r3
 800f80a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f80e:	b29b      	uxth	r3, r3
 800f810:	029b      	lsls	r3, r3, #10
 800f812:	b29b      	uxth	r3, r3
 800f814:	4313      	orrs	r3, r2
 800f816:	b29a      	uxth	r2, r3
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	801a      	strh	r2, [r3, #0]
 800f81c:	e02a      	b.n	800f874 <USB_EPStartXfer+0x51a>
 800f81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	785b      	ldrb	r3, [r3, #1]
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d122      	bne.n	800f874 <USB_EPStartXfer+0x51a>
 800f82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	623b      	str	r3, [r7, #32]
 800f83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f83e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f848:	b29b      	uxth	r3, r3
 800f84a:	461a      	mov	r2, r3
 800f84c:	6a3b      	ldr	r3, [r7, #32]
 800f84e:	4413      	add	r3, r2
 800f850:	623b      	str	r3, [r7, #32]
 800f852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	00da      	lsls	r2, r3, #3
 800f860:	6a3b      	ldr	r3, [r7, #32]
 800f862:	4413      	add	r3, r2
 800f864:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f868:	61fb      	str	r3, [r7, #28]
 800f86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f86e:	b29a      	uxth	r2, r3
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	891b      	ldrh	r3, [r3, #8]
 800f880:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6959      	ldr	r1, [r3, #20]
 800f890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f894:	b29b      	uxth	r3, r3
 800f896:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f89a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f89e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f8a2:	6800      	ldr	r0, [r0, #0]
 800f8a4:	f001 fa44 	bl	8010d30 <USB_WritePMA>
 800f8a8:	e3ee      	b.n	8010088 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f8aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	785b      	ldrb	r3, [r3, #1]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d177      	bne.n	800f9aa <USB_EPStartXfer+0x650>
 800f8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8da:	4413      	add	r3, r2
 800f8dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	00da      	lsls	r2, r3, #3
 800f8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f8f4:	647b      	str	r3, [r7, #68]	; 0x44
 800f8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f900:	b29a      	uxth	r2, r3
 800f902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f904:	801a      	strh	r2, [r3, #0]
 800f906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f90a:	2b3e      	cmp	r3, #62	; 0x3e
 800f90c:	d921      	bls.n	800f952 <USB_EPStartXfer+0x5f8>
 800f90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f912:	095b      	lsrs	r3, r3, #5
 800f914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f91c:	f003 031f 	and.w	r3, r3, #31
 800f920:	2b00      	cmp	r3, #0
 800f922:	d104      	bne.n	800f92e <USB_EPStartXfer+0x5d4>
 800f924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f928:	3b01      	subs	r3, #1
 800f92a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f92e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	b29a      	uxth	r2, r3
 800f934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f938:	b29b      	uxth	r3, r3
 800f93a:	029b      	lsls	r3, r3, #10
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	4313      	orrs	r3, r2
 800f940:	b29b      	uxth	r3, r3
 800f942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f94e:	801a      	strh	r2, [r3, #0]
 800f950:	e056      	b.n	800fa00 <USB_EPStartXfer+0x6a6>
 800f952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f956:	2b00      	cmp	r3, #0
 800f958:	d10a      	bne.n	800f970 <USB_EPStartXfer+0x616>
 800f95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	b29b      	uxth	r3, r3
 800f960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f968:	b29a      	uxth	r2, r3
 800f96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f96c:	801a      	strh	r2, [r3, #0]
 800f96e:	e047      	b.n	800fa00 <USB_EPStartXfer+0x6a6>
 800f970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f974:	085b      	lsrs	r3, r3, #1
 800f976:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <USB_EPStartXfer+0x636>
 800f986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f98a:	3301      	adds	r3, #1
 800f98c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	b29a      	uxth	r2, r3
 800f996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	029b      	lsls	r3, r3, #10
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9a6:	801a      	strh	r2, [r3, #0]
 800f9a8:	e02a      	b.n	800fa00 <USB_EPStartXfer+0x6a6>
 800f9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	785b      	ldrb	r3, [r3, #1]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d122      	bne.n	800fa00 <USB_EPStartXfer+0x6a6>
 800f9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	653b      	str	r3, [r7, #80]	; 0x50
 800f9c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	461a      	mov	r2, r3
 800f9d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9da:	4413      	add	r3, r2
 800f9dc:	653b      	str	r3, [r7, #80]	; 0x50
 800f9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	00da      	lsls	r2, r3, #3
 800f9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ee:	4413      	add	r3, r2
 800f9f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fa00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	891b      	ldrh	r3, [r3, #8]
 800fa0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fa10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	6959      	ldr	r1, [r3, #20]
 800fa1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fa26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fa2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fa2e:	6800      	ldr	r0, [r0, #0]
 800fa30:	f001 f97e 	bl	8010d30 <USB_WritePMA>
            ep->xfer_buff += len;
 800fa34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	695a      	ldr	r2, [r3, #20]
 800fa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa44:	441a      	add	r2, r3
 800fa46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fa52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6a1a      	ldr	r2, [r3, #32]
 800fa5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d90f      	bls.n	800fa8e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800fa6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6a1a      	ldr	r2, [r3, #32]
 800fa7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa7e:	1ad2      	subs	r2, r2, r3
 800fa80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	621a      	str	r2, [r3, #32]
 800fa8c:	e00e      	b.n	800faac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800fa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2200      	movs	r2, #0
 800faaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800faac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	643b      	str	r3, [r7, #64]	; 0x40
 800fab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	785b      	ldrb	r3, [r3, #1]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d177      	bne.n	800fbb8 <USB_EPStartXfer+0x85e>
 800fac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800facc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	461a      	mov	r2, r3
 800fae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae8:	4413      	add	r3, r2
 800faea:	63bb      	str	r3, [r7, #56]	; 0x38
 800faec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	00da      	lsls	r2, r3, #3
 800fafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafc:	4413      	add	r3, r2
 800fafe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb02:	637b      	str	r3, [r7, #52]	; 0x34
 800fb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb12:	801a      	strh	r2, [r3, #0]
 800fb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb18:	2b3e      	cmp	r3, #62	; 0x3e
 800fb1a:	d921      	bls.n	800fb60 <USB_EPStartXfer+0x806>
 800fb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb20:	095b      	lsrs	r3, r3, #5
 800fb22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb2a:	f003 031f 	and.w	r3, r3, #31
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d104      	bne.n	800fb3c <USB_EPStartXfer+0x7e2>
 800fb32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb36:	3b01      	subs	r3, #1
 800fb38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	881b      	ldrh	r3, [r3, #0]
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	029b      	lsls	r3, r3, #10
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5c:	801a      	strh	r2, [r3, #0]
 800fb5e:	e050      	b.n	800fc02 <USB_EPStartXfer+0x8a8>
 800fb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10a      	bne.n	800fb7e <USB_EPStartXfer+0x824>
 800fb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb6a:	881b      	ldrh	r3, [r3, #0]
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb7a:	801a      	strh	r2, [r3, #0]
 800fb7c:	e041      	b.n	800fc02 <USB_EPStartXfer+0x8a8>
 800fb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb82:	085b      	lsrs	r3, r3, #1
 800fb84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb8c:	f003 0301 	and.w	r3, r3, #1
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d004      	beq.n	800fb9e <USB_EPStartXfer+0x844>
 800fb94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb98:	3301      	adds	r3, #1
 800fb9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800fb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba0:	881b      	ldrh	r3, [r3, #0]
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	029b      	lsls	r3, r3, #10
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb4:	801a      	strh	r2, [r3, #0]
 800fbb6:	e024      	b.n	800fc02 <USB_EPStartXfer+0x8a8>
 800fbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	785b      	ldrb	r3, [r3, #1]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d11c      	bne.n	800fc02 <USB_EPStartXfer+0x8a8>
 800fbc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbd6:	b29b      	uxth	r3, r3
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbdc:	4413      	add	r3, r2
 800fbde:	643b      	str	r3, [r7, #64]	; 0x40
 800fbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	00da      	lsls	r2, r3, #3
 800fbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbf0:	4413      	add	r3, r2
 800fbf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	895b      	ldrh	r3, [r3, #10]
 800fc0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6959      	ldr	r1, [r3, #20]
 800fc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc30:	6800      	ldr	r0, [r0, #0]
 800fc32:	f001 f87d 	bl	8010d30 <USB_WritePMA>
 800fc36:	e227      	b.n	8010088 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800fc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800fc48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	781b      	ldrb	r3, [r3, #0]
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4413      	add	r3, r2
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fc6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fc72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	441a      	add	r2, r3
 800fc8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fc90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fc9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800fca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcc4:	4413      	add	r3, r2
 800fcc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	00da      	lsls	r2, r3, #3
 800fcd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcd8:	4413      	add	r3, r2
 800fcda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fcde:	65bb      	str	r3, [r7, #88]	; 0x58
 800fce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fce8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fcea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	891b      	ldrh	r3, [r3, #8]
 800fcf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fcfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6959      	ldr	r1, [r3, #20]
 800fd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fd10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fd14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fd18:	6800      	ldr	r0, [r0, #0]
 800fd1a:	f001 f809 	bl	8010d30 <USB_WritePMA>
 800fd1e:	e1b3      	b.n	8010088 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800fd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6a1a      	ldr	r2, [r3, #32]
 800fd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd30:	1ad2      	subs	r2, r2, r3
 800fd32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fd3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 80c6 	beq.w	800fef2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fd66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	673b      	str	r3, [r7, #112]	; 0x70
 800fd72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	785b      	ldrb	r3, [r3, #1]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d177      	bne.n	800fe72 <USB_EPStartXfer+0xb18>
 800fd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fda2:	4413      	add	r3, r2
 800fda4:	66bb      	str	r3, [r7, #104]	; 0x68
 800fda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	00da      	lsls	r2, r3, #3
 800fdb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fdbc:	667b      	str	r3, [r7, #100]	; 0x64
 800fdbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fdc8:	b29a      	uxth	r2, r3
 800fdca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdcc:	801a      	strh	r2, [r3, #0]
 800fdce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdd2:	2b3e      	cmp	r3, #62	; 0x3e
 800fdd4:	d921      	bls.n	800fe1a <USB_EPStartXfer+0xac0>
 800fdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdda:	095b      	lsrs	r3, r3, #5
 800fddc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fde4:	f003 031f 	and.w	r3, r3, #31
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d104      	bne.n	800fdf6 <USB_EPStartXfer+0xa9c>
 800fdec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fdf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	029b      	lsls	r3, r3, #10
 800fe04:	b29b      	uxth	r3, r3
 800fe06:	4313      	orrs	r3, r2
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe16:	801a      	strh	r2, [r3, #0]
 800fe18:	e050      	b.n	800febc <USB_EPStartXfer+0xb62>
 800fe1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10a      	bne.n	800fe38 <USB_EPStartXfer+0xade>
 800fe22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe34:	801a      	strh	r2, [r3, #0]
 800fe36:	e041      	b.n	800febc <USB_EPStartXfer+0xb62>
 800fe38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe3c:	085b      	lsrs	r3, r3, #1
 800fe3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe46:	f003 0301 	and.w	r3, r3, #1
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d004      	beq.n	800fe58 <USB_EPStartXfer+0xafe>
 800fe4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe52:	3301      	adds	r3, #1
 800fe54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fe58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fe62:	b29b      	uxth	r3, r3
 800fe64:	029b      	lsls	r3, r3, #10
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe6e:	801a      	strh	r2, [r3, #0]
 800fe70:	e024      	b.n	800febc <USB_EPStartXfer+0xb62>
 800fe72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	785b      	ldrb	r3, [r3, #1]
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d11c      	bne.n	800febc <USB_EPStartXfer+0xb62>
 800fe82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	461a      	mov	r2, r3
 800fe94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe96:	4413      	add	r3, r2
 800fe98:	673b      	str	r3, [r7, #112]	; 0x70
 800fe9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	00da      	lsls	r2, r3, #3
 800fea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feaa:	4413      	add	r3, r2
 800feac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800feb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800feb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800feba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800febc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	895b      	ldrh	r3, [r3, #10]
 800fec8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6959      	ldr	r1, [r3, #20]
 800fed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fedc:	b29b      	uxth	r3, r3
 800fede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fee2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fee6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800feea:	6800      	ldr	r0, [r0, #0]
 800feec:	f000 ff20 	bl	8010d30 <USB_WritePMA>
 800fef0:	e0ca      	b.n	8010088 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	785b      	ldrb	r3, [r3, #1]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d177      	bne.n	800fff2 <USB_EPStartXfer+0xc98>
 800ff02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff22:	4413      	add	r3, r2
 800ff24:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ff26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	00da      	lsls	r2, r3, #3
 800ff34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff36:	4413      	add	r3, r2
 800ff38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ff3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff40:	881b      	ldrh	r3, [r3, #0]
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff4c:	801a      	strh	r2, [r3, #0]
 800ff4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff52:	2b3e      	cmp	r3, #62	; 0x3e
 800ff54:	d921      	bls.n	800ff9a <USB_EPStartXfer+0xc40>
 800ff56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff5a:	095b      	lsrs	r3, r3, #5
 800ff5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ff60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff64:	f003 031f 	and.w	r3, r3, #31
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d104      	bne.n	800ff76 <USB_EPStartXfer+0xc1c>
 800ff6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ff70:	3b01      	subs	r3, #1
 800ff72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ff76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	029b      	lsls	r3, r3, #10
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	4313      	orrs	r3, r2
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff92:	b29a      	uxth	r2, r3
 800ff94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff96:	801a      	strh	r2, [r3, #0]
 800ff98:	e05c      	b.n	8010054 <USB_EPStartXfer+0xcfa>
 800ff9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d10a      	bne.n	800ffb8 <USB_EPStartXfer+0xc5e>
 800ffa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ffac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffb4:	801a      	strh	r2, [r3, #0]
 800ffb6:	e04d      	b.n	8010054 <USB_EPStartXfer+0xcfa>
 800ffb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffbc:	085b      	lsrs	r3, r3, #1
 800ffbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d004      	beq.n	800ffd8 <USB_EPStartXfer+0xc7e>
 800ffce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ffd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	029b      	lsls	r3, r3, #10
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffee:	801a      	strh	r2, [r3, #0]
 800fff0:	e030      	b.n	8010054 <USB_EPStartXfer+0xcfa>
 800fff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	785b      	ldrb	r3, [r3, #1]
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d128      	bne.n	8010054 <USB_EPStartXfer+0xcfa>
 8010002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801001e:	b29b      	uxth	r3, r3
 8010020:	461a      	mov	r2, r3
 8010022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010026:	4413      	add	r3, r2
 8010028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801002c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	00da      	lsls	r2, r3, #3
 801003a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801003e:	4413      	add	r3, r2
 8010040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801004c:	b29a      	uxth	r2, r3
 801004e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010052:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	891b      	ldrh	r3, [r3, #8]
 8010060:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	6959      	ldr	r1, [r3, #20]
 8010070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010074:	b29b      	uxth	r3, r3
 8010076:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801007a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801007e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010082:	6800      	ldr	r0, [r0, #0]
 8010084:	f000 fe54 	bl	8010d30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801008c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80100aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100ae:	817b      	strh	r3, [r7, #10]
 80100b0:	897b      	ldrh	r3, [r7, #10]
 80100b2:	f083 0310 	eor.w	r3, r3, #16
 80100b6:	817b      	strh	r3, [r7, #10]
 80100b8:	897b      	ldrh	r3, [r7, #10]
 80100ba:	f083 0320 	eor.w	r3, r3, #32
 80100be:	817b      	strh	r3, [r7, #10]
 80100c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	441a      	add	r2, r3
 80100da:	897b      	ldrh	r3, [r7, #10]
 80100dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80100e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80100e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	8013      	strh	r3, [r2, #0]
 80100f0:	f000 bcde 	b.w	8010ab0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80100f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	7b1b      	ldrb	r3, [r3, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	f040 80bb 	bne.w	801027c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801010a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	699a      	ldr	r2, [r3, #24]
 8010112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	429a      	cmp	r2, r3
 8010120:	d917      	bls.n	8010152 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8010132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	699a      	ldr	r2, [r3, #24]
 801013e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010142:	1ad2      	subs	r2, r2, r3
 8010144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	619a      	str	r2, [r3, #24]
 8010150:	e00e      	b.n	8010170 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8010162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2200      	movs	r2, #0
 801016e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801017e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801018c:	b29b      	uxth	r3, r3
 801018e:	461a      	mov	r2, r3
 8010190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010194:	4413      	add	r3, r2
 8010196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801019a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801019e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	00da      	lsls	r2, r3, #3
 80101a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101ac:	4413      	add	r3, r2
 80101ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80101b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80101b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	b29b      	uxth	r3, r3
 80101be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101c8:	801a      	strh	r2, [r3, #0]
 80101ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101ce:	2b3e      	cmp	r3, #62	; 0x3e
 80101d0:	d924      	bls.n	801021c <USB_EPStartXfer+0xec2>
 80101d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101d6:	095b      	lsrs	r3, r3, #5
 80101d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80101dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101e0:	f003 031f 	and.w	r3, r3, #31
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <USB_EPStartXfer+0xe98>
 80101e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80101ec:	3b01      	subs	r3, #1
 80101ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80101f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80101fe:	b29b      	uxth	r3, r3
 8010200:	029b      	lsls	r3, r3, #10
 8010202:	b29b      	uxth	r3, r3
 8010204:	4313      	orrs	r3, r2
 8010206:	b29b      	uxth	r3, r3
 8010208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801020c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010210:	b29a      	uxth	r2, r3
 8010212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010216:	801a      	strh	r2, [r3, #0]
 8010218:	f000 bc10 	b.w	8010a3c <USB_EPStartXfer+0x16e2>
 801021c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10c      	bne.n	801023e <USB_EPStartXfer+0xee4>
 8010224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	b29b      	uxth	r3, r3
 801022c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010234:	b29a      	uxth	r2, r3
 8010236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801023a:	801a      	strh	r2, [r3, #0]
 801023c:	e3fe      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
 801023e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010242:	085b      	lsrs	r3, r3, #1
 8010244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	d004      	beq.n	801025e <USB_EPStartXfer+0xf04>
 8010254:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010258:	3301      	adds	r3, #1
 801025a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801025e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	b29a      	uxth	r2, r3
 8010266:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801026a:	b29b      	uxth	r3, r3
 801026c:	029b      	lsls	r3, r3, #10
 801026e:	b29b      	uxth	r3, r3
 8010270:	4313      	orrs	r3, r2
 8010272:	b29a      	uxth	r2, r3
 8010274:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010278:	801a      	strh	r2, [r3, #0]
 801027a:	e3df      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801027c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	78db      	ldrb	r3, [r3, #3]
 8010288:	2b02      	cmp	r3, #2
 801028a:	f040 8218 	bne.w	80106be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801028e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	785b      	ldrb	r3, [r3, #1]
 801029a:	2b00      	cmp	r3, #0
 801029c:	f040 809d 	bne.w	80103da <USB_EPStartXfer+0x1080>
 80102a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80102bc:	b29b      	uxth	r3, r3
 80102be:	461a      	mov	r2, r3
 80102c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102c4:	4413      	add	r3, r2
 80102c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	00da      	lsls	r2, r3, #3
 80102d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80102dc:	4413      	add	r3, r2
 80102de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80102e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80102e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102f8:	801a      	strh	r2, [r3, #0]
 80102fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	691b      	ldr	r3, [r3, #16]
 8010306:	2b3e      	cmp	r3, #62	; 0x3e
 8010308:	d92b      	bls.n	8010362 <USB_EPStartXfer+0x1008>
 801030a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801030e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	095b      	lsrs	r3, r3, #5
 8010318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801031c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	691b      	ldr	r3, [r3, #16]
 8010328:	f003 031f 	and.w	r3, r3, #31
 801032c:	2b00      	cmp	r3, #0
 801032e:	d104      	bne.n	801033a <USB_EPStartXfer+0xfe0>
 8010330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010334:	3b01      	subs	r3, #1
 8010336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801033a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801033e:	881b      	ldrh	r3, [r3, #0]
 8010340:	b29a      	uxth	r2, r3
 8010342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010346:	b29b      	uxth	r3, r3
 8010348:	029b      	lsls	r3, r3, #10
 801034a:	b29b      	uxth	r3, r3
 801034c:	4313      	orrs	r3, r2
 801034e:	b29b      	uxth	r3, r3
 8010350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010358:	b29a      	uxth	r2, r3
 801035a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801035e:	801a      	strh	r2, [r3, #0]
 8010360:	e070      	b.n	8010444 <USB_EPStartXfer+0x10ea>
 8010362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10c      	bne.n	801038c <USB_EPStartXfer+0x1032>
 8010372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	b29b      	uxth	r3, r3
 801037a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801037e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010382:	b29a      	uxth	r2, r3
 8010384:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010388:	801a      	strh	r2, [r3, #0]
 801038a:	e05b      	b.n	8010444 <USB_EPStartXfer+0x10ea>
 801038c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	691b      	ldr	r3, [r3, #16]
 8010398:	085b      	lsrs	r3, r3, #1
 801039a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801039e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	f003 0301 	and.w	r3, r3, #1
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d004      	beq.n	80103bc <USB_EPStartXfer+0x1062>
 80103b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103b6:	3301      	adds	r3, #1
 80103b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80103bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	029b      	lsls	r3, r3, #10
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	4313      	orrs	r3, r2
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103d6:	801a      	strh	r2, [r3, #0]
 80103d8:	e034      	b.n	8010444 <USB_EPStartXfer+0x10ea>
 80103da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	785b      	ldrb	r3, [r3, #1]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d12c      	bne.n	8010444 <USB_EPStartXfer+0x10ea>
 80103ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80103f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010406:	b29b      	uxth	r3, r3
 8010408:	461a      	mov	r2, r3
 801040a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801040e:	4413      	add	r3, r2
 8010410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	00da      	lsls	r2, r3, #3
 8010422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010426:	4413      	add	r3, r2
 8010428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801042c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	691b      	ldr	r3, [r3, #16]
 801043c:	b29a      	uxth	r2, r3
 801043e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010442:	801a      	strh	r2, [r3, #0]
 8010444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	785b      	ldrb	r3, [r3, #1]
 801045e:	2b00      	cmp	r3, #0
 8010460:	f040 809d 	bne.w	801059e <USB_EPStartXfer+0x1244>
 8010464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010480:	b29b      	uxth	r3, r3
 8010482:	461a      	mov	r2, r3
 8010484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010488:	4413      	add	r3, r2
 801048a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801048e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	00da      	lsls	r2, r3, #3
 801049c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80104a0:	4413      	add	r3, r2
 80104a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80104a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80104aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104bc:	801a      	strh	r2, [r3, #0]
 80104be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	691b      	ldr	r3, [r3, #16]
 80104ca:	2b3e      	cmp	r3, #62	; 0x3e
 80104cc:	d92b      	bls.n	8010526 <USB_EPStartXfer+0x11cc>
 80104ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	095b      	lsrs	r3, r3, #5
 80104dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80104e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	691b      	ldr	r3, [r3, #16]
 80104ec:	f003 031f 	and.w	r3, r3, #31
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d104      	bne.n	80104fe <USB_EPStartXfer+0x11a4>
 80104f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80104f8:	3b01      	subs	r3, #1
 80104fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80104fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	b29a      	uxth	r2, r3
 8010506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801050a:	b29b      	uxth	r3, r3
 801050c:	029b      	lsls	r3, r3, #10
 801050e:	b29b      	uxth	r3, r3
 8010510:	4313      	orrs	r3, r2
 8010512:	b29b      	uxth	r3, r3
 8010514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801051c:	b29a      	uxth	r2, r3
 801051e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010522:	801a      	strh	r2, [r3, #0]
 8010524:	e069      	b.n	80105fa <USB_EPStartXfer+0x12a0>
 8010526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801052a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	691b      	ldr	r3, [r3, #16]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10c      	bne.n	8010550 <USB_EPStartXfer+0x11f6>
 8010536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	b29b      	uxth	r3, r3
 801053e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010546:	b29a      	uxth	r2, r3
 8010548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801054c:	801a      	strh	r2, [r3, #0]
 801054e:	e054      	b.n	80105fa <USB_EPStartXfer+0x12a0>
 8010550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	691b      	ldr	r3, [r3, #16]
 801055c:	085b      	lsrs	r3, r3, #1
 801055e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	691b      	ldr	r3, [r3, #16]
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	2b00      	cmp	r3, #0
 8010574:	d004      	beq.n	8010580 <USB_EPStartXfer+0x1226>
 8010576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801057a:	3301      	adds	r3, #1
 801057c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010580:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	b29a      	uxth	r2, r3
 8010588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801058c:	b29b      	uxth	r3, r3
 801058e:	029b      	lsls	r3, r3, #10
 8010590:	b29b      	uxth	r3, r3
 8010592:	4313      	orrs	r3, r2
 8010594:	b29a      	uxth	r2, r3
 8010596:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801059a:	801a      	strh	r2, [r3, #0]
 801059c:	e02d      	b.n	80105fa <USB_EPStartXfer+0x12a0>
 801059e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	785b      	ldrb	r3, [r3, #1]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d125      	bne.n	80105fa <USB_EPStartXfer+0x12a0>
 80105ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105bc:	b29b      	uxth	r3, r3
 80105be:	461a      	mov	r2, r3
 80105c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80105c4:	4413      	add	r3, r2
 80105c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80105ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	00da      	lsls	r2, r3, #3
 80105d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80105dc:	4413      	add	r3, r2
 80105de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80105e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80105e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80105f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80105fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	69db      	ldr	r3, [r3, #28]
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 8218 	beq.w	8010a3c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801060c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801062c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <USB_EPStartXfer+0x12ea>
 8010638:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801063c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10d      	bne.n	8010660 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010644:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801064c:	2b00      	cmp	r3, #0
 801064e:	f040 81f5 	bne.w	8010a3c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010652:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801065a:	2b00      	cmp	r3, #0
 801065c:	f040 81ee 	bne.w	8010a3c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801066e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	009b      	lsls	r3, r3, #2
 8010678:	4413      	add	r3, r2
 801067a:	881b      	ldrh	r3, [r3, #0]
 801067c:	b29b      	uxth	r3, r3
 801067e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010686:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 801068a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801068e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	441a      	add	r2, r3
 80106a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80106a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	8013      	strh	r3, [r2, #0]
 80106bc:	e1be      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80106be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	78db      	ldrb	r3, [r3, #3]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	f040 81b4 	bne.w	8010a38 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80106d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	699a      	ldr	r2, [r3, #24]
 80106dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	691b      	ldr	r3, [r3, #16]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d917      	bls.n	801071c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80106ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	691b      	ldr	r3, [r3, #16]
 80106f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80106fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	699a      	ldr	r2, [r3, #24]
 8010708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801070c:	1ad2      	subs	r2, r2, r3
 801070e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	619a      	str	r2, [r3, #24]
 801071a:	e00e      	b.n	801073a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 801071c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801072c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2200      	movs	r2, #0
 8010738:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801073a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801073e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	785b      	ldrb	r3, [r3, #1]
 8010746:	2b00      	cmp	r3, #0
 8010748:	f040 8085 	bne.w	8010856 <USB_EPStartXfer+0x14fc>
 801074c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801075a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801075e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010768:	b29b      	uxth	r3, r3
 801076a:	461a      	mov	r2, r3
 801076c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010770:	4413      	add	r3, r2
 8010772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801077a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	00da      	lsls	r2, r3, #3
 8010784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010788:	4413      	add	r3, r2
 801078a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801078e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	b29b      	uxth	r3, r3
 801079a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801079e:	b29a      	uxth	r2, r3
 80107a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107a4:	801a      	strh	r2, [r3, #0]
 80107a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107aa:	2b3e      	cmp	r3, #62	; 0x3e
 80107ac:	d923      	bls.n	80107f6 <USB_EPStartXfer+0x149c>
 80107ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107b2:	095b      	lsrs	r3, r3, #5
 80107b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107bc:	f003 031f 	and.w	r3, r3, #31
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d104      	bne.n	80107ce <USB_EPStartXfer+0x1474>
 80107c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107c8:	3b01      	subs	r3, #1
 80107ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107d2:	881b      	ldrh	r3, [r3, #0]
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107da:	b29b      	uxth	r3, r3
 80107dc:	029b      	lsls	r3, r3, #10
 80107de:	b29b      	uxth	r3, r3
 80107e0:	4313      	orrs	r3, r2
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80107f2:	801a      	strh	r2, [r3, #0]
 80107f4:	e060      	b.n	80108b8 <USB_EPStartXfer+0x155e>
 80107f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d10c      	bne.n	8010818 <USB_EPStartXfer+0x14be>
 80107fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010802:	881b      	ldrh	r3, [r3, #0]
 8010804:	b29b      	uxth	r3, r3
 8010806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801080a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801080e:	b29a      	uxth	r2, r3
 8010810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010814:	801a      	strh	r2, [r3, #0]
 8010816:	e04f      	b.n	80108b8 <USB_EPStartXfer+0x155e>
 8010818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801081c:	085b      	lsrs	r3, r3, #1
 801081e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010826:	f003 0301 	and.w	r3, r3, #1
 801082a:	2b00      	cmp	r3, #0
 801082c:	d004      	beq.n	8010838 <USB_EPStartXfer+0x14de>
 801082e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010832:	3301      	adds	r3, #1
 8010834:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	b29a      	uxth	r2, r3
 8010840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010844:	b29b      	uxth	r3, r3
 8010846:	029b      	lsls	r3, r3, #10
 8010848:	b29b      	uxth	r3, r3
 801084a:	4313      	orrs	r3, r2
 801084c:	b29a      	uxth	r2, r3
 801084e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010852:	801a      	strh	r2, [r3, #0]
 8010854:	e030      	b.n	80108b8 <USB_EPStartXfer+0x155e>
 8010856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	785b      	ldrb	r3, [r3, #1]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d128      	bne.n	80108b8 <USB_EPStartXfer+0x155e>
 8010866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010882:	b29b      	uxth	r3, r3
 8010884:	461a      	mov	r2, r3
 8010886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801088a:	4413      	add	r3, r2
 801088c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	00da      	lsls	r2, r3, #3
 801089e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80108a2:	4413      	add	r3, r2
 80108a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80108ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108b6:	801a      	strh	r2, [r3, #0]
 80108b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80108c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	785b      	ldrb	r3, [r3, #1]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	f040 8085 	bne.w	80109e2 <USB_EPStartXfer+0x1688>
 80108d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80108e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	461a      	mov	r2, r3
 80108f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80108fc:	4413      	add	r3, r2
 80108fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	00da      	lsls	r2, r3, #3
 8010910:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010914:	4413      	add	r3, r2
 8010916:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801091a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801091e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010922:	881b      	ldrh	r3, [r3, #0]
 8010924:	b29b      	uxth	r3, r3
 8010926:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801092a:	b29a      	uxth	r2, r3
 801092c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010930:	801a      	strh	r2, [r3, #0]
 8010932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010936:	2b3e      	cmp	r3, #62	; 0x3e
 8010938:	d923      	bls.n	8010982 <USB_EPStartXfer+0x1628>
 801093a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801093e:	095b      	lsrs	r3, r3, #5
 8010940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010948:	f003 031f 	and.w	r3, r3, #31
 801094c:	2b00      	cmp	r3, #0
 801094e:	d104      	bne.n	801095a <USB_EPStartXfer+0x1600>
 8010950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010954:	3b01      	subs	r3, #1
 8010956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801095a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	b29a      	uxth	r2, r3
 8010962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010966:	b29b      	uxth	r3, r3
 8010968:	029b      	lsls	r3, r3, #10
 801096a:	b29b      	uxth	r3, r3
 801096c:	4313      	orrs	r3, r2
 801096e:	b29b      	uxth	r3, r3
 8010970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010978:	b29a      	uxth	r2, r3
 801097a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801097e:	801a      	strh	r2, [r3, #0]
 8010980:	e05c      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
 8010982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010986:	2b00      	cmp	r3, #0
 8010988:	d10c      	bne.n	80109a4 <USB_EPStartXfer+0x164a>
 801098a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	b29b      	uxth	r3, r3
 8010992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801099a:	b29a      	uxth	r2, r3
 801099c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109a0:	801a      	strh	r2, [r3, #0]
 80109a2:	e04b      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
 80109a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109a8:	085b      	lsrs	r3, r3, #1
 80109aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80109ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109b2:	f003 0301 	and.w	r3, r3, #1
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d004      	beq.n	80109c4 <USB_EPStartXfer+0x166a>
 80109ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80109be:	3301      	adds	r3, #1
 80109c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80109c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109c8:	881b      	ldrh	r3, [r3, #0]
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	029b      	lsls	r3, r3, #10
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	4313      	orrs	r3, r2
 80109d8:	b29a      	uxth	r2, r3
 80109da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109de:	801a      	strh	r2, [r3, #0]
 80109e0:	e02c      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
 80109e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	785b      	ldrb	r3, [r3, #1]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d124      	bne.n	8010a3c <USB_EPStartXfer+0x16e2>
 80109f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	461a      	mov	r2, r3
 8010a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a08:	4413      	add	r3, r2
 8010a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	00da      	lsls	r2, r3, #3
 8010a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010a20:	4413      	add	r3, r2
 8010a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010a34:	801a      	strh	r2, [r3, #0]
 8010a36:	e001      	b.n	8010a3c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e03a      	b.n	8010ab2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	881b      	ldrh	r3, [r3, #0]
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a62:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010a6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010a7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	441a      	add	r2, r3
 8010a98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010ab0:	2300      	movs	r3, #0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b085      	sub	sp, #20
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	785b      	ldrb	r3, [r3, #1]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d020      	beq.n	8010b10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ae4:	81bb      	strh	r3, [r7, #12]
 8010ae6:	89bb      	ldrh	r3, [r7, #12]
 8010ae8:	f083 0310 	eor.w	r3, r3, #16
 8010aec:	81bb      	strh	r3, [r7, #12]
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	441a      	add	r2, r3
 8010af8:	89bb      	ldrh	r3, [r7, #12]
 8010afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	8013      	strh	r3, [r2, #0]
 8010b0e:	e01f      	b.n	8010b50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	4413      	add	r3, r2
 8010b1a:	881b      	ldrh	r3, [r3, #0]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b26:	81fb      	strh	r3, [r7, #14]
 8010b28:	89fb      	ldrh	r3, [r7, #14]
 8010b2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010b2e:	81fb      	strh	r3, [r7, #14]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	009b      	lsls	r3, r3, #2
 8010b38:	441a      	add	r2, r3
 8010b3a:	89fb      	ldrh	r3, [r7, #14]
 8010b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b5e:	b480      	push	{r7}
 8010b60:	b087      	sub	sp, #28
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	7b1b      	ldrb	r3, [r3, #12]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	f040 809d 	bne.w	8010cac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	785b      	ldrb	r3, [r3, #1]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d04c      	beq.n	8010c14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	009b      	lsls	r3, r3, #2
 8010b82:	4413      	add	r3, r2
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	823b      	strh	r3, [r7, #16]
 8010b88:	8a3b      	ldrh	r3, [r7, #16]
 8010b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d01b      	beq.n	8010bca <USB_EPClearStall+0x6c>
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	4413      	add	r3, r2
 8010b9c:	881b      	ldrh	r3, [r3, #0]
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ba8:	81fb      	strh	r3, [r7, #14]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	441a      	add	r2, r3
 8010bb4:	89fb      	ldrh	r3, [r7, #14]
 8010bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	78db      	ldrb	r3, [r3, #3]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d06c      	beq.n	8010cac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	4413      	add	r3, r2
 8010bdc:	881b      	ldrh	r3, [r3, #0]
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010be8:	81bb      	strh	r3, [r7, #12]
 8010bea:	89bb      	ldrh	r3, [r7, #12]
 8010bec:	f083 0320 	eor.w	r3, r3, #32
 8010bf0:	81bb      	strh	r3, [r7, #12]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	441a      	add	r2, r3
 8010bfc:	89bb      	ldrh	r3, [r7, #12]
 8010bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	8013      	strh	r3, [r2, #0]
 8010c12:	e04b      	b.n	8010cac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	82fb      	strh	r3, [r7, #22]
 8010c22:	8afb      	ldrh	r3, [r7, #22]
 8010c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d01b      	beq.n	8010c64 <USB_EPClearStall+0x106>
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c42:	82bb      	strh	r3, [r7, #20]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	441a      	add	r2, r3
 8010c4e:	8abb      	ldrh	r3, [r7, #20]
 8010c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	4413      	add	r3, r2
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c7a:	827b      	strh	r3, [r7, #18]
 8010c7c:	8a7b      	ldrh	r3, [r7, #18]
 8010c7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010c82:	827b      	strh	r3, [r7, #18]
 8010c84:	8a7b      	ldrh	r3, [r7, #18]
 8010c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010c8a:	827b      	strh	r3, [r7, #18]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	441a      	add	r2, r3
 8010c96:	8a7b      	ldrh	r3, [r7, #18]
 8010c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010cac:	2300      	movs	r3, #0
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	371c      	adds	r7, #28
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr

08010cba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010cba:	b480      	push	{r7}
 8010cbc:	b083      	sub	sp, #12
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8010cc6:	78fb      	ldrb	r3, [r7, #3]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d103      	bne.n	8010cd4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2280      	movs	r2, #128	; 0x80
 8010cd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	370c      	adds	r7, #12
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr

08010ce2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8010ce2:	b480      	push	{r7}
 8010ce4:	b083      	sub	sp, #12
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010d02:	2300      	movs	r3, #0
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b085      	sub	sp, #20
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8010d22:	68fb      	ldr	r3, [r7, #12]
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3714      	adds	r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b08b      	sub	sp, #44	; 0x2c
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	460b      	mov	r3, r1
 8010d40:	80fb      	strh	r3, [r7, #6]
 8010d42:	4613      	mov	r3, r2
 8010d44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8010d46:	88bb      	ldrh	r3, [r7, #4]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	085b      	lsrs	r3, r3, #1
 8010d4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010d56:	88fa      	ldrh	r2, [r7, #6]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	4413      	add	r3, r2
 8010d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010d60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	627b      	str	r3, [r7, #36]	; 0x24
 8010d66:	e01b      	b.n	8010da0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	3301      	adds	r3, #1
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	021b      	lsls	r3, r3, #8
 8010d76:	b21a      	sxth	r2, r3
 8010d78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	b21b      	sxth	r3, r3
 8010d80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8010d82:	6a3b      	ldr	r3, [r7, #32]
 8010d84:	8a7a      	ldrh	r2, [r7, #18]
 8010d86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	3302      	adds	r3, #2
 8010d8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	3301      	adds	r3, #1
 8010d92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	3301      	adds	r3, #1
 8010d98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d1e0      	bne.n	8010d68 <USB_WritePMA+0x38>
  }
}
 8010da6:	bf00      	nop
 8010da8:	bf00      	nop
 8010daa:	372c      	adds	r7, #44	; 0x2c
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b08b      	sub	sp, #44	; 0x2c
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	60f8      	str	r0, [r7, #12]
 8010dbc:	60b9      	str	r1, [r7, #8]
 8010dbe:	4611      	mov	r1, r2
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	80fb      	strh	r3, [r7, #6]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8010dca:	88bb      	ldrh	r3, [r7, #4]
 8010dcc:	085b      	lsrs	r3, r3, #1
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8010dda:	88fa      	ldrh	r2, [r7, #6]
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	4413      	add	r3, r2
 8010de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010de4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	627b      	str	r3, [r7, #36]	; 0x24
 8010dea:	e018      	b.n	8010e1e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8010dec:	6a3b      	ldr	r3, [r7, #32]
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	3302      	adds	r3, #2
 8010df8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	3301      	adds	r3, #1
 8010e06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	0a1b      	lsrs	r3, r3, #8
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	3301      	adds	r3, #1
 8010e16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1a:	3b01      	subs	r3, #1
 8010e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1e3      	bne.n	8010dec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010e24:	88bb      	ldrh	r3, [r7, #4]
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d007      	beq.n	8010e40 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	881b      	ldrh	r3, [r3, #0]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	701a      	strb	r2, [r3, #0]
  }
}
 8010e40:	bf00      	nop
 8010e42:	372c      	adds	r7, #44	; 0x2c
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	1c5a      	adds	r2, r3, #1
 8010e58:	607a      	str	r2, [r7, #4]
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8010e5e:	89fb      	ldrh	r3, [r7, #14]
 8010e60:	021b      	lsls	r3, r3, #8
 8010e62:	b21a      	sxth	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	b21b      	sxth	r3, r3
 8010e6e:	b29b      	uxth	r3, r3
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3714      	adds	r7, #20
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b085      	sub	sp, #20
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	683a      	ldr	r2, [r7, #0]
 8010e8a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2204      	movs	r2, #4
 8010e90:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2204      	movs	r2, #4
 8010e96:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ea0:	b29a      	uxth	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	b29b      	uxth	r3, r3
 8010eb2:	b21a      	sxth	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	b21a      	sxth	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8010f42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2200      	movs	r2, #0
 8010f68:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	73fb      	strb	r3, [r7, #15]
 8010f6e:	e010      	b.n	8010f92 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8010f70:	7bfb      	ldrb	r3, [r7, #15]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	330a      	adds	r3, #10
 8010f76:	00db      	lsls	r3, r3, #3
 8010f78:	4413      	add	r3, r2
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8010f7e:	7bfb      	ldrb	r3, [r7, #15]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	330a      	adds	r3, #10
 8010f84:	00db      	lsls	r3, r3, #3
 8010f86:	4413      	add	r3, r2
 8010f88:	2200      	movs	r2, #0
 8010f8a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	73fb      	strb	r3, [r7, #15]
 8010f92:	7bfb      	ldrb	r3, [r7, #15]
 8010f94:	2b03      	cmp	r3, #3
 8010f96:	d9eb      	bls.n	8010f70 <UG_Init+0xf4>
   }

   gui = g;
 8010f98:	4a04      	ldr	r2, [pc, #16]	; (8010fac <UG_Init+0x130>)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6013      	str	r3, [r2, #0]
   return 1;
 8010f9e:	2301      	movs	r3, #1
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr
 8010fac:	20001ba0 	.word	0x20001ba0

08010fb0 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8010fb8:	4b04      	ldr	r3, [pc, #16]	; (8010fcc <UG_FontSelect+0x1c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010fc0:	bf00      	nop
 8010fc2:	370c      	adds	r7, #12
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr
 8010fcc:	20001ba0 	.word	0x20001ba0

08010fd0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af02      	add	r7, sp, #8
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8010fda:	4b0e      	ldr	r3, [pc, #56]	; (8011014 <UG_FillScreen+0x44>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	3b01      	subs	r3, #1
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	b21a      	sxth	r2, r3
 8010fec:	4b09      	ldr	r3, [pc, #36]	; (8011014 <UG_FillScreen+0x44>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	b219      	sxth	r1, r3
 8010ffe:	88fb      	ldrh	r3, [r7, #6]
 8011000:	9300      	str	r3, [sp, #0]
 8011002:	460b      	mov	r3, r1
 8011004:	2100      	movs	r1, #0
 8011006:	2000      	movs	r0, #0
 8011008:	f000 f806 	bl	8011018 <UG_FillFrame>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	20001ba0 	.word	0x20001ba0

08011018 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8011018:	b5b0      	push	{r4, r5, r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af02      	add	r7, sp, #8
 801101e:	4604      	mov	r4, r0
 8011020:	4608      	mov	r0, r1
 8011022:	4611      	mov	r1, r2
 8011024:	461a      	mov	r2, r3
 8011026:	4623      	mov	r3, r4
 8011028:	80fb      	strh	r3, [r7, #6]
 801102a:	4603      	mov	r3, r0
 801102c:	80bb      	strh	r3, [r7, #4]
 801102e:	460b      	mov	r3, r1
 8011030:	807b      	strh	r3, [r7, #2]
 8011032:	4613      	mov	r3, r2
 8011034:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8011036:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801103e:	429a      	cmp	r2, r3
 8011040:	da05      	bge.n	801104e <UG_FillFrame+0x36>
     swap(x1,x2);
 8011042:	88fb      	ldrh	r3, [r7, #6]
 8011044:	817b      	strh	r3, [r7, #10]
 8011046:	887b      	ldrh	r3, [r7, #2]
 8011048:	80fb      	strh	r3, [r7, #6]
 801104a:	897b      	ldrh	r3, [r7, #10]
 801104c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 801104e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011052:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011056:	429a      	cmp	r2, r3
 8011058:	da05      	bge.n	8011066 <UG_FillFrame+0x4e>
     swap(y1,y2);
 801105a:	88bb      	ldrh	r3, [r7, #4]
 801105c:	813b      	strh	r3, [r7, #8]
 801105e:	883b      	ldrh	r3, [r7, #0]
 8011060:	80bb      	strh	r3, [r7, #4]
 8011062:	893b      	ldrh	r3, [r7, #8]
 8011064:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8011066:	4b24      	ldr	r3, [pc, #144]	; (80110f8 <UG_FillFrame+0xe0>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 801106e:	f003 0302 	and.w	r3, r3, #2
 8011072:	2b00      	cmp	r3, #0
 8011074:	d012      	beq.n	801109c <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011076:	4b20      	ldr	r3, [pc, #128]	; (80110f8 <UG_FillFrame+0xe0>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801107c:	461d      	mov	r5, r3
 801107e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011082:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011086:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801108a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801108e:	8c3b      	ldrh	r3, [r7, #32]
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	4623      	mov	r3, r4
 8011094:	47a8      	blx	r5
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d028      	beq.n	80110ee <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 801109c:	88bb      	ldrh	r3, [r7, #4]
 801109e:	81bb      	strh	r3, [r7, #12]
 80110a0:	e01e      	b.n	80110e0 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80110a2:	88fb      	ldrh	r3, [r7, #6]
 80110a4:	81fb      	strh	r3, [r7, #14]
 80110a6:	e00f      	b.n	80110c8 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80110a8:	4b13      	ldr	r3, [pc, #76]	; (80110f8 <UG_FillFrame+0xe0>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	8c3a      	ldrh	r2, [r7, #32]
 80110b2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80110b6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80110ba:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80110bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	3301      	adds	r3, #1
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	81fb      	strh	r3, [r7, #14]
 80110c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80110cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	dde9      	ble.n	80110a8 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80110d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80110d8:	b29b      	uxth	r3, r3
 80110da:	3301      	adds	r3, #1
 80110dc:	b29b      	uxth	r3, r3
 80110de:	81bb      	strh	r3, [r7, #12]
 80110e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80110e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	ddda      	ble.n	80110a2 <UG_FillFrame+0x8a>
 80110ec:	e000      	b.n	80110f0 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80110ee:	bf00      	nop
      }
   }
}
 80110f0:	3710      	adds	r7, #16
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bdb0      	pop	{r4, r5, r7, pc}
 80110f6:	bf00      	nop
 80110f8:	20001ba0 	.word	0x20001ba0

080110fc <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80110fc:	b590      	push	{r4, r7, lr}
 80110fe:	b085      	sub	sp, #20
 8011100:	af02      	add	r7, sp, #8
 8011102:	4604      	mov	r4, r0
 8011104:	4608      	mov	r0, r1
 8011106:	4611      	mov	r1, r2
 8011108:	461a      	mov	r2, r3
 801110a:	4623      	mov	r3, r4
 801110c:	80fb      	strh	r3, [r7, #6]
 801110e:	4603      	mov	r3, r0
 8011110:	80bb      	strh	r3, [r7, #4]
 8011112:	460b      	mov	r3, r1
 8011114:	807b      	strh	r3, [r7, #2]
 8011116:	4613      	mov	r3, r2
 8011118:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 801111a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 801111e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011122:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011126:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801112a:	8b3b      	ldrh	r3, [r7, #24]
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	4623      	mov	r3, r4
 8011130:	f000 f912 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8011134:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011138:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801113c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8011140:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011144:	8b3b      	ldrh	r3, [r7, #24]
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	4623      	mov	r3, r4
 801114a:	f000 f905 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 801114e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011152:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011156:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801115a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801115e:	8b3b      	ldrh	r3, [r7, #24]
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	4623      	mov	r3, r4
 8011164:	f000 f8f8 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8011168:	f9b7 4000 	ldrsh.w	r4, [r7]
 801116c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011170:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011174:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8011178:	8b3b      	ldrh	r3, [r7, #24]
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4623      	mov	r3, r4
 801117e:	f000 f8eb 	bl	8011358 <UG_DrawLine>
}
 8011182:	bf00      	nop
 8011184:	370c      	adds	r7, #12
 8011186:	46bd      	mov	sp, r7
 8011188:	bd90      	pop	{r4, r7, pc}
	...

0801118c <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 801118c:	b590      	push	{r4, r7, lr}
 801118e:	b087      	sub	sp, #28
 8011190:	af00      	add	r7, sp, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	4611      	mov	r1, r2
 8011198:	461a      	mov	r2, r3
 801119a:	4623      	mov	r3, r4
 801119c:	80fb      	strh	r3, [r7, #6]
 801119e:	4603      	mov	r3, r0
 80111a0:	80bb      	strh	r3, [r7, #4]
 80111a2:	460b      	mov	r3, r1
 80111a4:	807b      	strh	r3, [r7, #2]
 80111a6:	4613      	mov	r3, r2
 80111a8:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 80111aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f2c0 80c8 	blt.w	8011344 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 80111b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f2c0 80c5 	blt.w	8011348 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 80111be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f340 80c2 	ble.w	801134c <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 80111c8:	887b      	ldrh	r3, [r7, #2]
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	f1c3 0301 	rsb	r3, r3, #1
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	827b      	strh	r3, [r7, #18]
   yd = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	823b      	strh	r3, [r7, #16]
   e = 0;
 80111da:	2300      	movs	r3, #0
 80111dc:	81fb      	strh	r3, [r7, #14]
   x = r;
 80111de:	887b      	ldrh	r3, [r7, #2]
 80111e0:	82fb      	strh	r3, [r7, #22]
   y = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 80111e6:	e0a5      	b.n	8011334 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 80111e8:	4b5a      	ldr	r3, [pc, #360]	; (8011354 <UG_DrawCircle+0x1c8>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	88f9      	ldrh	r1, [r7, #6]
 80111f2:	8afa      	ldrh	r2, [r7, #22]
 80111f4:	1a8a      	subs	r2, r1, r2
 80111f6:	b292      	uxth	r2, r2
 80111f8:	b210      	sxth	r0, r2
 80111fa:	88b9      	ldrh	r1, [r7, #4]
 80111fc:	8aba      	ldrh	r2, [r7, #20]
 80111fe:	440a      	add	r2, r1
 8011200:	b292      	uxth	r2, r2
 8011202:	b211      	sxth	r1, r2
 8011204:	883a      	ldrh	r2, [r7, #0]
 8011206:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8011208:	4b52      	ldr	r3, [pc, #328]	; (8011354 <UG_DrawCircle+0x1c8>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	88f9      	ldrh	r1, [r7, #6]
 8011212:	8afa      	ldrh	r2, [r7, #22]
 8011214:	1a8a      	subs	r2, r1, r2
 8011216:	b292      	uxth	r2, r2
 8011218:	b210      	sxth	r0, r2
 801121a:	88b9      	ldrh	r1, [r7, #4]
 801121c:	8aba      	ldrh	r2, [r7, #20]
 801121e:	1a8a      	subs	r2, r1, r2
 8011220:	b292      	uxth	r2, r2
 8011222:	b211      	sxth	r1, r2
 8011224:	883a      	ldrh	r2, [r7, #0]
 8011226:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8011228:	4b4a      	ldr	r3, [pc, #296]	; (8011354 <UG_DrawCircle+0x1c8>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	88f9      	ldrh	r1, [r7, #6]
 8011232:	8afa      	ldrh	r2, [r7, #22]
 8011234:	440a      	add	r2, r1
 8011236:	b292      	uxth	r2, r2
 8011238:	b210      	sxth	r0, r2
 801123a:	88b9      	ldrh	r1, [r7, #4]
 801123c:	8aba      	ldrh	r2, [r7, #20]
 801123e:	440a      	add	r2, r1
 8011240:	b292      	uxth	r2, r2
 8011242:	b211      	sxth	r1, r2
 8011244:	883a      	ldrh	r2, [r7, #0]
 8011246:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8011248:	4b42      	ldr	r3, [pc, #264]	; (8011354 <UG_DrawCircle+0x1c8>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	88f9      	ldrh	r1, [r7, #6]
 8011252:	8afa      	ldrh	r2, [r7, #22]
 8011254:	440a      	add	r2, r1
 8011256:	b292      	uxth	r2, r2
 8011258:	b210      	sxth	r0, r2
 801125a:	88b9      	ldrh	r1, [r7, #4]
 801125c:	8aba      	ldrh	r2, [r7, #20]
 801125e:	1a8a      	subs	r2, r1, r2
 8011260:	b292      	uxth	r2, r2
 8011262:	b211      	sxth	r1, r2
 8011264:	883a      	ldrh	r2, [r7, #0]
 8011266:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8011268:	4b3a      	ldr	r3, [pc, #232]	; (8011354 <UG_DrawCircle+0x1c8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	88f9      	ldrh	r1, [r7, #6]
 8011272:	8aba      	ldrh	r2, [r7, #20]
 8011274:	1a8a      	subs	r2, r1, r2
 8011276:	b292      	uxth	r2, r2
 8011278:	b210      	sxth	r0, r2
 801127a:	88b9      	ldrh	r1, [r7, #4]
 801127c:	8afa      	ldrh	r2, [r7, #22]
 801127e:	440a      	add	r2, r1
 8011280:	b292      	uxth	r2, r2
 8011282:	b211      	sxth	r1, r2
 8011284:	883a      	ldrh	r2, [r7, #0]
 8011286:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8011288:	4b32      	ldr	r3, [pc, #200]	; (8011354 <UG_DrawCircle+0x1c8>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	88f9      	ldrh	r1, [r7, #6]
 8011292:	8aba      	ldrh	r2, [r7, #20]
 8011294:	1a8a      	subs	r2, r1, r2
 8011296:	b292      	uxth	r2, r2
 8011298:	b210      	sxth	r0, r2
 801129a:	88b9      	ldrh	r1, [r7, #4]
 801129c:	8afa      	ldrh	r2, [r7, #22]
 801129e:	1a8a      	subs	r2, r1, r2
 80112a0:	b292      	uxth	r2, r2
 80112a2:	b211      	sxth	r1, r2
 80112a4:	883a      	ldrh	r2, [r7, #0]
 80112a6:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 80112a8:	4b2a      	ldr	r3, [pc, #168]	; (8011354 <UG_DrawCircle+0x1c8>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	88f9      	ldrh	r1, [r7, #6]
 80112b2:	8aba      	ldrh	r2, [r7, #20]
 80112b4:	440a      	add	r2, r1
 80112b6:	b292      	uxth	r2, r2
 80112b8:	b210      	sxth	r0, r2
 80112ba:	88b9      	ldrh	r1, [r7, #4]
 80112bc:	8afa      	ldrh	r2, [r7, #22]
 80112be:	440a      	add	r2, r1
 80112c0:	b292      	uxth	r2, r2
 80112c2:	b211      	sxth	r1, r2
 80112c4:	883a      	ldrh	r2, [r7, #0]
 80112c6:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 80112c8:	4b22      	ldr	r3, [pc, #136]	; (8011354 <UG_DrawCircle+0x1c8>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	88f9      	ldrh	r1, [r7, #6]
 80112d2:	8aba      	ldrh	r2, [r7, #20]
 80112d4:	440a      	add	r2, r1
 80112d6:	b292      	uxth	r2, r2
 80112d8:	b210      	sxth	r0, r2
 80112da:	88b9      	ldrh	r1, [r7, #4]
 80112dc:	8afa      	ldrh	r2, [r7, #22]
 80112de:	1a8a      	subs	r2, r1, r2
 80112e0:	b292      	uxth	r2, r2
 80112e2:	b211      	sxth	r1, r2
 80112e4:	883a      	ldrh	r2, [r7, #0]
 80112e6:	4798      	blx	r3

      y++;
 80112e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	3301      	adds	r3, #1
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	82bb      	strh	r3, [r7, #20]
      e += yd;
 80112f4:	89fa      	ldrh	r2, [r7, #14]
 80112f6:	8a3b      	ldrh	r3, [r7, #16]
 80112f8:	4413      	add	r3, r2
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 80112fe:	8a3b      	ldrh	r3, [r7, #16]
 8011300:	3302      	adds	r3, #2
 8011302:	b29b      	uxth	r3, r3
 8011304:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8011306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801130a:	005a      	lsls	r2, r3, #1
 801130c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011310:	4413      	add	r3, r2
 8011312:	2b00      	cmp	r3, #0
 8011314:	dd0e      	ble.n	8011334 <UG_DrawCircle+0x1a8>
      {
         x--;
 8011316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801131a:	b29b      	uxth	r3, r3
 801131c:	3b01      	subs	r3, #1
 801131e:	b29b      	uxth	r3, r3
 8011320:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8011322:	89fa      	ldrh	r2, [r7, #14]
 8011324:	8a7b      	ldrh	r3, [r7, #18]
 8011326:	4413      	add	r3, r2
 8011328:	b29b      	uxth	r3, r3
 801132a:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 801132c:	8a7b      	ldrh	r3, [r7, #18]
 801132e:	3302      	adds	r3, #2
 8011330:	b29b      	uxth	r3, r3
 8011332:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8011334:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011338:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801133c:	429a      	cmp	r2, r3
 801133e:	f6bf af53 	bge.w	80111e8 <UG_DrawCircle+0x5c>
 8011342:	e004      	b.n	801134e <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8011344:	bf00      	nop
 8011346:	e002      	b.n	801134e <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8011348:	bf00      	nop
 801134a:	e000      	b.n	801134e <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 801134c:	bf00      	nop
      }
   }
}
 801134e:	371c      	adds	r7, #28
 8011350:	46bd      	mov	sp, r7
 8011352:	bd90      	pop	{r4, r7, pc}
 8011354:	20001ba0 	.word	0x20001ba0

08011358 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8011358:	b5b0      	push	{r4, r5, r7, lr}
 801135a:	b08a      	sub	sp, #40	; 0x28
 801135c:	af02      	add	r7, sp, #8
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	4611      	mov	r1, r2
 8011364:	461a      	mov	r2, r3
 8011366:	4623      	mov	r3, r4
 8011368:	80fb      	strh	r3, [r7, #6]
 801136a:	4603      	mov	r3, r0
 801136c:	80bb      	strh	r3, [r7, #4]
 801136e:	460b      	mov	r3, r1
 8011370:	807b      	strh	r3, [r7, #2]
 8011372:	4613      	mov	r3, r2
 8011374:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8011376:	4b67      	ldr	r3, [pc, #412]	; (8011514 <UG_DrawLine+0x1bc>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801137e:	f003 0302 	and.w	r3, r3, #2
 8011382:	2b00      	cmp	r3, #0
 8011384:	d013      	beq.n	80113ae <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8011386:	4b63      	ldr	r3, [pc, #396]	; (8011514 <UG_DrawLine+0x1bc>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801138c:	461d      	mov	r5, r3
 801138e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8011392:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011396:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801139a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801139e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	4623      	mov	r3, r4
 80113a4:	47a8      	blx	r5
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 80ae 	beq.w	801150a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80113ae:	887a      	ldrh	r2, [r7, #2]
 80113b0:	88fb      	ldrh	r3, [r7, #6]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80113b8:	883a      	ldrh	r2, [r7, #0]
 80113ba:	88bb      	ldrh	r3, [r7, #4]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	b29b      	uxth	r3, r3
 80113c0:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80113c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	bfb8      	it	lt
 80113ca:	425b      	neglt	r3, r3
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80113d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	bfb8      	it	lt
 80113d8:	425b      	neglt	r3, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80113de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	dd01      	ble.n	80113ea <UG_DrawLine+0x92>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e001      	b.n	80113ee <UG_DrawLine+0x96>
 80113ea:	f04f 33ff 	mov.w	r3, #4294967295
 80113ee:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80113f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	dd01      	ble.n	80113fc <UG_DrawLine+0xa4>
 80113f8:	2301      	movs	r3, #1
 80113fa:	e001      	b.n	8011400 <UG_DrawLine+0xa8>
 80113fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011400:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8011402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011406:	105b      	asrs	r3, r3, #1
 8011408:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 801140a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801140e:	105b      	asrs	r3, r3, #1
 8011410:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8011412:	88fb      	ldrh	r3, [r7, #6]
 8011414:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8011416:	88bb      	ldrh	r3, [r7, #4]
 8011418:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 801141a:	4b3e      	ldr	r3, [pc, #248]	; (8011514 <UG_DrawLine+0x1bc>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011424:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011428:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801142c:	4798      	blx	r3

   if( dxabs >= dyabs )
 801142e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011436:	429a      	cmp	r2, r3
 8011438:	db33      	blt.n	80114a2 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 801143a:	2300      	movs	r3, #0
 801143c:	83fb      	strh	r3, [r7, #30]
 801143e:	e029      	b.n	8011494 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8011440:	8b7a      	ldrh	r2, [r7, #26]
 8011442:	89fb      	ldrh	r3, [r7, #14]
 8011444:	4413      	add	r3, r2
 8011446:	b29b      	uxth	r3, r3
 8011448:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 801144a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801144e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011452:	429a      	cmp	r2, r3
 8011454:	db09      	blt.n	801146a <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8011456:	8b7a      	ldrh	r2, [r7, #26]
 8011458:	8a3b      	ldrh	r3, [r7, #16]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	b29b      	uxth	r3, r3
 801145e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8011460:	8afa      	ldrh	r2, [r7, #22]
 8011462:	897b      	ldrh	r3, [r7, #10]
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 801146a:	8b3a      	ldrh	r2, [r7, #24]
 801146c:	89bb      	ldrh	r3, [r7, #12]
 801146e:	4413      	add	r3, r2
 8011470:	b29b      	uxth	r3, r3
 8011472:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8011474:	4b27      	ldr	r3, [pc, #156]	; (8011514 <UG_DrawLine+0x1bc>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801147e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8011482:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8011486:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8011488:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801148c:	b29b      	uxth	r3, r3
 801148e:	3301      	adds	r3, #1
 8011490:	b29b      	uxth	r3, r3
 8011492:	83fb      	strh	r3, [r7, #30]
 8011494:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011498:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801149c:	429a      	cmp	r2, r3
 801149e:	dbcf      	blt.n	8011440 <UG_DrawLine+0xe8>
 80114a0:	e034      	b.n	801150c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80114a2:	2300      	movs	r3, #0
 80114a4:	83fb      	strh	r3, [r7, #30]
 80114a6:	e029      	b.n	80114fc <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80114a8:	8bba      	ldrh	r2, [r7, #28]
 80114aa:	8a3b      	ldrh	r3, [r7, #16]
 80114ac:	4413      	add	r3, r2
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80114b2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80114b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	db09      	blt.n	80114d2 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80114be:	8bba      	ldrh	r2, [r7, #28]
 80114c0:	89fb      	ldrh	r3, [r7, #14]
 80114c2:	1ad3      	subs	r3, r2, r3
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80114c8:	8b3a      	ldrh	r2, [r7, #24]
 80114ca:	89bb      	ldrh	r3, [r7, #12]
 80114cc:	4413      	add	r3, r2
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80114d2:	8afa      	ldrh	r2, [r7, #22]
 80114d4:	897b      	ldrh	r3, [r7, #10]
 80114d6:	4413      	add	r3, r2
 80114d8:	b29b      	uxth	r3, r3
 80114da:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 80114dc:	4b0d      	ldr	r3, [pc, #52]	; (8011514 <UG_DrawLine+0x1bc>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80114e6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80114ea:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80114ee:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80114f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	3301      	adds	r3, #1
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	83fb      	strh	r3, [r7, #30]
 80114fc:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011504:	429a      	cmp	r2, r3
 8011506:	dbcf      	blt.n	80114a8 <UG_DrawLine+0x150>
 8011508:	e000      	b.n	801150c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801150a:	bf00      	nop
      }
   }  
}
 801150c:	3720      	adds	r7, #32
 801150e:	46bd      	mov	sp, r7
 8011510:	bdb0      	pop	{r4, r5, r7, pc}
 8011512:	bf00      	nop
 8011514:	20001ba0 	.word	0x20001ba0

08011518 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b087      	sub	sp, #28
 801151c:	af02      	add	r7, sp, #8
 801151e:	4603      	mov	r3, r0
 8011520:	603a      	str	r2, [r7, #0]
 8011522:	80fb      	strh	r3, [r7, #6]
 8011524:	460b      	mov	r3, r1
 8011526:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8011528:	88fb      	ldrh	r3, [r7, #6]
 801152a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 801152c:	88bb      	ldrh	r3, [r7, #4]
 801152e:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8011530:	4b44      	ldr	r3, [pc, #272]	; (8011644 <UG_PutString+0x12c>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011536:	4618      	mov	r0, r3
 8011538:	f000 fa96 	bl	8011a68 <_UG_FontSelect>
   while ( *str != 0 )
 801153c:	e064      	b.n	8011608 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801153e:	4b41      	ldr	r3, [pc, #260]	; (8011644 <UG_PutString+0x12c>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011546:	2b00      	cmp	r3, #0
 8011548:	d106      	bne.n	8011558 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 801154a:	463b      	mov	r3, r7
 801154c:	4618      	mov	r0, r3
 801154e:	f000 f8c7 	bl	80116e0 <_UG_DecodeUTF8>
 8011552:	4603      	mov	r3, r0
 8011554:	817b      	strh	r3, [r7, #10]
 8011556:	e004      	b.n	8011562 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	1c5a      	adds	r2, r3, #1
 801155c:	603a      	str	r2, [r7, #0]
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8011562:	897b      	ldrh	r3, [r7, #10]
 8011564:	2b0a      	cmp	r3, #10
 8011566:	d105      	bne.n	8011574 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8011568:	4b36      	ldr	r3, [pc, #216]	; (8011644 <UG_PutString+0x12c>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	81fb      	strh	r3, [r7, #14]
         continue;
 8011572:	e049      	b.n	8011608 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8011574:	897b      	ldrh	r3, [r7, #10]
 8011576:	2100      	movs	r1, #0
 8011578:	4618      	mov	r0, r3
 801157a:	f000 f929 	bl	80117d0 <_UG_GetCharData>
 801157e:	4603      	mov	r3, r0
 8011580:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8011582:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801158a:	d100      	bne.n	801158e <UG_PutString+0x76>
 801158c:	e03c      	b.n	8011608 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 801158e:	4b2d      	ldr	r3, [pc, #180]	; (8011644 <UG_PutString+0x12c>)
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011598:	4619      	mov	r1, r3
 801159a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801159e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80115a2:	4413      	add	r3, r2
 80115a4:	4299      	cmp	r1, r3
 80115a6:	dc12      	bgt.n	80115ce <UG_PutString+0xb6>
      {
         xp = x;
 80115a8:	88fb      	ldrh	r3, [r7, #6]
 80115aa:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80115ac:	4b25      	ldr	r3, [pc, #148]	; (8011644 <UG_PutString+0x12c>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80115b4:	b21a      	sxth	r2, r3
 80115b6:	4b23      	ldr	r3, [pc, #140]	; (8011644 <UG_PutString+0x12c>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80115be:	b21b      	sxth	r3, r3
 80115c0:	4413      	add	r3, r2
 80115c2:	b21b      	sxth	r3, r3
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	89bb      	ldrh	r3, [r7, #12]
 80115c8:	4413      	add	r3, r2
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80115ce:	4b1d      	ldr	r3, [pc, #116]	; (8011644 <UG_PutString+0x12c>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 80115d6:	4b1b      	ldr	r3, [pc, #108]	; (8011644 <UG_PutString+0x12c>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80115de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80115e2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80115e6:	8978      	ldrh	r0, [r7, #10]
 80115e8:	9300      	str	r3, [sp, #0]
 80115ea:	4623      	mov	r3, r4
 80115ec:	f000 fabe 	bl	8011b6c <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80115f0:	4b14      	ldr	r3, [pc, #80]	; (8011644 <UG_PutString+0x12c>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	893b      	ldrh	r3, [r7, #8]
 80115fc:	4413      	add	r3, r2
 80115fe:	b29a      	uxth	r2, r3
 8011600:	89fb      	ldrh	r3, [r7, #14]
 8011602:	4413      	add	r3, r2
 8011604:	b29b      	uxth	r3, r3
 8011606:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d196      	bne.n	801153e <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8011610:	4b0c      	ldr	r3, [pc, #48]	; (8011644 <UG_PutString+0x12c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011618:	f003 0302 	and.w	r3, r3, #2
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00c      	beq.n	801163a <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8011620:	4b08      	ldr	r3, [pc, #32]	; (8011644 <UG_PutString+0x12c>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011626:	461c      	mov	r4, r3
 8011628:	f04f 33ff 	mov.w	r3, #4294967295
 801162c:	f04f 32ff 	mov.w	r2, #4294967295
 8011630:	f04f 31ff 	mov.w	r1, #4294967295
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	47a0      	blx	r4
}
 801163a:	bf00      	nop
 801163c:	3714      	adds	r7, #20
 801163e:	46bd      	mov	sp, r7
 8011640:	bd90      	pop	{r4, r7, pc}
 8011642:	bf00      	nop
 8011644:	20001ba0 	.word	0x20001ba0

08011648 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	4603      	mov	r3, r0
 8011650:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8011652:	4b05      	ldr	r3, [pc, #20]	; (8011668 <UG_SetForecolor+0x20>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	88fa      	ldrh	r2, [r7, #6]
 8011658:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 801165c:	bf00      	nop
 801165e:	370c      	adds	r7, #12
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr
 8011668:	20001ba0 	.word	0x20001ba0

0801166c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	4603      	mov	r3, r0
 8011674:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8011676:	4b05      	ldr	r3, [pc, #20]	; (801168c <UG_SetBackcolor+0x20>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	88fa      	ldrh	r2, [r7, #6]
 801167c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8011680:	bf00      	nop
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr
 801168c:	20001ba0 	.word	0x20001ba0

08011690 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 801169a:	4b06      	ldr	r3, [pc, #24]	; (80116b4 <UG_FontSetHSpace+0x24>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	88fa      	ldrh	r2, [r7, #6]
 80116a0:	b252      	sxtb	r2, r2
 80116a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80116a6:	bf00      	nop
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	20001ba0 	.word	0x20001ba0

080116b8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80116c2:	4b06      	ldr	r3, [pc, #24]	; (80116dc <UG_FontSetVSpace+0x24>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	88fa      	ldrh	r2, [r7, #6]
 80116c8:	b252      	sxtb	r2, r2
 80116ca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80116ce:	bf00      	nop
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d8:	4770      	bx	lr
 80116da:	bf00      	nop
 80116dc:	20001ba0 	.word	0x20001ba0

080116e0 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]

  char c=**str;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80116f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	db07      	blt.n	8011708 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	1c5a      	adds	r2, r3, #1
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	601a      	str	r2, [r3, #0]
    return c;
 8011702:	7bfb      	ldrb	r3, [r7, #15]
 8011704:	b29b      	uxth	r3, r3
 8011706:	e05c      	b.n	80117c2 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8011708:	2300      	movs	r3, #0
 801170a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 801170c:	2300      	movs	r3, #0
 801170e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8011710:	e04f      	b.n	80117b2 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	1c5a      	adds	r2, r3, #1
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8011724:	7bbb      	ldrb	r3, [r7, #14]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d130      	bne.n	801178c <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 801172a:	7bfb      	ldrb	r3, [r7, #15]
 801172c:	2bdf      	cmp	r3, #223	; 0xdf
 801172e:	d806      	bhi.n	801173e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8011730:	2301      	movs	r3, #1
 8011732:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8011734:	7bfb      	ldrb	r3, [r7, #15]
 8011736:	f003 031f 	and.w	r3, r3, #31
 801173a:	73fb      	strb	r3, [r7, #15]
 801173c:	e023      	b.n	8011786 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801173e:	7bfb      	ldrb	r3, [r7, #15]
 8011740:	2bef      	cmp	r3, #239	; 0xef
 8011742:	d806      	bhi.n	8011752 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8011744:	2302      	movs	r3, #2
 8011746:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
 801174a:	f003 030f 	and.w	r3, r3, #15
 801174e:	73fb      	strb	r3, [r7, #15]
 8011750:	e019      	b.n	8011786 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8011752:	7bfb      	ldrb	r3, [r7, #15]
 8011754:	2bf7      	cmp	r3, #247	; 0xf7
 8011756:	d806      	bhi.n	8011766 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8011758:	2303      	movs	r3, #3
 801175a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	f003 0307 	and.w	r3, r3, #7
 8011762:	73fb      	strb	r3, [r7, #15]
 8011764:	e00f      	b.n	8011786 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8011766:	7bfb      	ldrb	r3, [r7, #15]
 8011768:	2bfb      	cmp	r3, #251	; 0xfb
 801176a:	d806      	bhi.n	801177a <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 801176c:	2304      	movs	r3, #4
 801176e:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8011770:	7bfb      	ldrb	r3, [r7, #15]
 8011772:	f003 0303 	and.w	r3, r3, #3
 8011776:	73fb      	strb	r3, [r7, #15]
 8011778:	e005      	b.n	8011786 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 801177a:	2305      	movs	r3, #5
 801177c:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 801177e:	7bfb      	ldrb	r3, [r7, #15]
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	81bb      	strh	r3, [r7, #12]
 801178a:	e012      	b.n	80117b2 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 801178c:	89bb      	ldrh	r3, [r7, #12]
 801178e:	019b      	lsls	r3, r3, #6
 8011790:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8011792:	7bfb      	ldrb	r3, [r7, #15]
 8011794:	b21b      	sxth	r3, r3
 8011796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801179a:	b21a      	sxth	r2, r3
 801179c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	b21b      	sxth	r3, r3
 80117a4:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80117a6:	7bbb      	ldrb	r3, [r7, #14]
 80117a8:	3b01      	subs	r3, #1
 80117aa:	73bb      	strb	r3, [r7, #14]
 80117ac:	7bbb      	ldrb	r3, [r7, #14]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d005      	beq.n	80117be <_UG_DecodeUTF8+0xde>
  while(**str)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d1aa      	bne.n	8011712 <_UG_DecodeUTF8+0x32>
 80117bc:	e000      	b.n	80117c0 <_UG_DecodeUTF8+0xe0>
        break;
 80117be:	bf00      	nop
    }
  }
  return encoding;
 80117c0:	89bb      	ldrh	r3, [r7, #12]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
	...

080117d0 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	4603      	mov	r3, r0
 80117d8:	6039      	str	r1, [r7, #0]
 80117da:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80117dc:	2300      	movs	r3, #0
 80117de:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80117e0:	2300      	movs	r3, #0
 80117e2:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80117e8:	2300      	movs	r3, #0
 80117ea:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80117ec:	2300      	movs	r3, #0
 80117ee:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80117f0:	4b98      	ldr	r3, [pc, #608]	; (8011a54 <_UG_GetCharData+0x284>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80117f6:	4b98      	ldr	r3, [pc, #608]	; (8011a58 <_UG_GetCharData+0x288>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d10f      	bne.n	801181e <_UG_GetCharData+0x4e>
 80117fe:	4b97      	ldr	r3, [pc, #604]	; (8011a5c <_UG_GetCharData+0x28c>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	88fa      	ldrh	r2, [r7, #6]
 8011804:	429a      	cmp	r2, r3
 8011806:	d10a      	bne.n	801181e <_UG_GetCharData+0x4e>
    if(p){
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d003      	beq.n	8011816 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801180e:	4b94      	ldr	r3, [pc, #592]	; (8011a60 <_UG_GetCharData+0x290>)
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8011816:	4b93      	ldr	r3, [pc, #588]	; (8011a64 <_UG_GetCharData+0x294>)
 8011818:	f9b3 3000 	ldrsh.w	r3, [r3]
 801181c:	e116      	b.n	8011a4c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 801181e:	4b8d      	ldr	r3, [pc, #564]	; (8011a54 <_UG_GetCharData+0x284>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011826:	2b00      	cmp	r3, #0
 8011828:	f000 80cc 	beq.w	80119c4 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 801182c:	88fb      	ldrh	r3, [r7, #6]
 801182e:	2bfc      	cmp	r3, #252	; 0xfc
 8011830:	f300 80c8 	bgt.w	80119c4 <_UG_GetCharData+0x1f4>
 8011834:	2bd6      	cmp	r3, #214	; 0xd6
 8011836:	da09      	bge.n	801184c <_UG_GetCharData+0x7c>
 8011838:	2bc4      	cmp	r3, #196	; 0xc4
 801183a:	d06c      	beq.n	8011916 <_UG_GetCharData+0x146>
 801183c:	2bc4      	cmp	r3, #196	; 0xc4
 801183e:	f300 80c1 	bgt.w	80119c4 <_UG_GetCharData+0x1f4>
 8011842:	2bb0      	cmp	r3, #176	; 0xb0
 8011844:	d06d      	beq.n	8011922 <_UG_GetCharData+0x152>
 8011846:	2bb5      	cmp	r3, #181	; 0xb5
 8011848:	d068      	beq.n	801191c <_UG_GetCharData+0x14c>
 801184a:	e06e      	b.n	801192a <_UG_GetCharData+0x15a>
 801184c:	3bd6      	subs	r3, #214	; 0xd6
 801184e:	2b26      	cmp	r3, #38	; 0x26
 8011850:	f200 80b8 	bhi.w	80119c4 <_UG_GetCharData+0x1f4>
 8011854:	a201      	add	r2, pc, #4	; (adr r2, 801185c <_UG_GetCharData+0x8c>)
 8011856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801185a:	bf00      	nop
 801185c:	080118ff 	.word	0x080118ff
 8011860:	080119c5 	.word	0x080119c5
 8011864:	080119c5 	.word	0x080119c5
 8011868:	080119c5 	.word	0x080119c5
 801186c:	080119c5 	.word	0x080119c5
 8011870:	080119c5 	.word	0x080119c5
 8011874:	0801190b 	.word	0x0801190b
 8011878:	080119c5 	.word	0x080119c5
 801187c:	080119c5 	.word	0x080119c5
 8011880:	080119c5 	.word	0x080119c5
 8011884:	080119c5 	.word	0x080119c5
 8011888:	080119c5 	.word	0x080119c5
 801188c:	080119c5 	.word	0x080119c5
 8011890:	080119c5 	.word	0x080119c5
 8011894:	08011911 	.word	0x08011911
 8011898:	080119c5 	.word	0x080119c5
 801189c:	080119c5 	.word	0x080119c5
 80118a0:	080119c5 	.word	0x080119c5
 80118a4:	080119c5 	.word	0x080119c5
 80118a8:	080119c5 	.word	0x080119c5
 80118ac:	080119c5 	.word	0x080119c5
 80118b0:	080119c5 	.word	0x080119c5
 80118b4:	080119c5 	.word	0x080119c5
 80118b8:	080119c5 	.word	0x080119c5
 80118bc:	080119c5 	.word	0x080119c5
 80118c0:	080119c5 	.word	0x080119c5
 80118c4:	080119c5 	.word	0x080119c5
 80118c8:	080119c5 	.word	0x080119c5
 80118cc:	080119c5 	.word	0x080119c5
 80118d0:	080119c5 	.word	0x080119c5
 80118d4:	080119c5 	.word	0x080119c5
 80118d8:	080119c5 	.word	0x080119c5
 80118dc:	080118f9 	.word	0x080118f9
 80118e0:	080119c5 	.word	0x080119c5
 80118e4:	080119c5 	.word	0x080119c5
 80118e8:	080119c5 	.word	0x080119c5
 80118ec:	080119c5 	.word	0x080119c5
 80118f0:	080119c5 	.word	0x080119c5
 80118f4:	08011905 	.word	0x08011905
    {
       case 0xF6: encoding = 0x94; break; // ö
 80118f8:	2394      	movs	r3, #148	; 0x94
 80118fa:	80fb      	strh	r3, [r7, #6]
 80118fc:	e015      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80118fe:	2399      	movs	r3, #153	; 0x99
 8011900:	80fb      	strh	r3, [r7, #6]
 8011902:	e012      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8011904:	2381      	movs	r3, #129	; 0x81
 8011906:	80fb      	strh	r3, [r7, #6]
 8011908:	e00f      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 801190a:	239a      	movs	r3, #154	; 0x9a
 801190c:	80fb      	strh	r3, [r7, #6]
 801190e:	e00c      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8011910:	2384      	movs	r3, #132	; 0x84
 8011912:	80fb      	strh	r3, [r7, #6]
 8011914:	e009      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8011916:	238e      	movs	r3, #142	; 0x8e
 8011918:	80fb      	strh	r3, [r7, #6]
 801191a:	e006      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 801191c:	23e6      	movs	r3, #230	; 0xe6
 801191e:	80fb      	strh	r3, [r7, #6]
 8011920:	e003      	b.n	801192a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8011922:	23f8      	movs	r3, #248	; 0xf8
 8011924:	80fb      	strh	r3, [r7, #6]
 8011926:	bf00      	nop
 8011928:	e04c      	b.n	80119c4 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 801192a:	e04b      	b.n	80119c4 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 801192c:	4b49      	ldr	r3, [pc, #292]	; (8011a54 <_UG_GetCharData+0x284>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011932:	8a7a      	ldrh	r2, [r7, #18]
 8011934:	0052      	lsls	r2, r2, #1
 8011936:	4413      	add	r3, r2
 8011938:	4618      	mov	r0, r3
 801193a:	f7ff fa87 	bl	8010e4c <ptr_8to16>
 801193e:	4603      	mov	r3, r0
 8011940:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8011942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011946:	2b00      	cmp	r3, #0
 8011948:	da06      	bge.n	8011958 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 801194a:	89fb      	ldrh	r3, [r7, #14]
 801194c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011950:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8011952:	2301      	movs	r3, #1
 8011954:	747b      	strb	r3, [r7, #17]
 8011956:	e032      	b.n	80119be <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8011958:	7c7b      	ldrb	r3, [r7, #17]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d021      	beq.n	80119a2 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 801195e:	88fa      	ldrh	r2, [r7, #6]
 8011960:	8afb      	ldrh	r3, [r7, #22]
 8011962:	429a      	cmp	r2, r3
 8011964:	d30d      	bcc.n	8011982 <_UG_GetCharData+0x1b2>
 8011966:	88fa      	ldrh	r2, [r7, #6]
 8011968:	89fb      	ldrh	r3, [r7, #14]
 801196a:	429a      	cmp	r2, r3
 801196c:	d809      	bhi.n	8011982 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 801196e:	88fa      	ldrh	r2, [r7, #6]
 8011970:	8afb      	ldrh	r3, [r7, #22]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	b29a      	uxth	r2, r3
 8011976:	8abb      	ldrh	r3, [r7, #20]
 8011978:	4413      	add	r3, r2
 801197a:	82bb      	strh	r3, [r7, #20]
        found=1;
 801197c:	2301      	movs	r3, #1
 801197e:	743b      	strb	r3, [r7, #16]
        break;
 8011980:	e02a      	b.n	80119d8 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8011982:	88fa      	ldrh	r2, [r7, #6]
 8011984:	8afb      	ldrh	r3, [r7, #22]
 8011986:	429a      	cmp	r2, r3
 8011988:	d323      	bcc.n	80119d2 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 801198a:	89fa      	ldrh	r2, [r7, #14]
 801198c:	8afb      	ldrh	r3, [r7, #22]
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	b29a      	uxth	r2, r3
 8011992:	8abb      	ldrh	r3, [r7, #20]
 8011994:	4413      	add	r3, r2
 8011996:	b29b      	uxth	r3, r3
 8011998:	3301      	adds	r3, #1
 801199a:	82bb      	strh	r3, [r7, #20]
      range=0;
 801199c:	2300      	movs	r3, #0
 801199e:	747b      	strb	r3, [r7, #17]
 80119a0:	e00d      	b.n	80119be <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80119a2:	88fa      	ldrh	r2, [r7, #6]
 80119a4:	89fb      	ldrh	r3, [r7, #14]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d102      	bne.n	80119b0 <_UG_GetCharData+0x1e0>
      {
        found=1;
 80119aa:	2301      	movs	r3, #1
 80119ac:	743b      	strb	r3, [r7, #16]
        break;
 80119ae:	e013      	b.n	80119d8 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80119b0:	88fa      	ldrh	r2, [r7, #6]
 80119b2:	89fb      	ldrh	r3, [r7, #14]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d30e      	bcc.n	80119d6 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80119b8:	8abb      	ldrh	r3, [r7, #20]
 80119ba:	3301      	adds	r3, #1
 80119bc:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80119be:	8a7b      	ldrh	r3, [r7, #18]
 80119c0:	3301      	adds	r3, #1
 80119c2:	827b      	strh	r3, [r7, #18]
 80119c4:	4b23      	ldr	r3, [pc, #140]	; (8011a54 <_UG_GetCharData+0x284>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80119ca:	8a7a      	ldrh	r2, [r7, #18]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d3ad      	bcc.n	801192c <_UG_GetCharData+0x15c>
 80119d0:	e002      	b.n	80119d8 <_UG_GetCharData+0x208>
        break;
 80119d2:	bf00      	nop
 80119d4:	e000      	b.n	80119d8 <_UG_GetCharData+0x208>
        break;
 80119d6:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80119d8:	7c3b      	ldrb	r3, [r7, #16]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d034      	beq.n	8011a48 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80119de:	4b1d      	ldr	r3, [pc, #116]	; (8011a54 <_UG_GetCharData+0x284>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119e4:	4a1c      	ldr	r2, [pc, #112]	; (8011a58 <_UG_GetCharData+0x288>)
 80119e6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80119e8:	4a1c      	ldr	r2, [pc, #112]	; (8011a5c <_UG_GetCharData+0x28c>)
 80119ea:	88fb      	ldrh	r3, [r7, #6]
 80119ec:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80119ee:	4b19      	ldr	r3, [pc, #100]	; (8011a54 <_UG_GetCharData+0x284>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119f4:	8aba      	ldrh	r2, [r7, #20]
 80119f6:	4917      	ldr	r1, [pc, #92]	; (8011a54 <_UG_GetCharData+0x284>)
 80119f8:	6809      	ldr	r1, [r1, #0]
 80119fa:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 80119fc:	fb01 f202 	mul.w	r2, r1, r2
 8011a00:	4413      	add	r3, r2
 8011a02:	4a17      	ldr	r2, [pc, #92]	; (8011a60 <_UG_GetCharData+0x290>)
 8011a04:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8011a06:	4b13      	ldr	r3, [pc, #76]	; (8011a54 <_UG_GetCharData+0x284>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d009      	beq.n	8011a24 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8011a10:	4b10      	ldr	r3, [pc, #64]	; (8011a54 <_UG_GetCharData+0x284>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a16:	8abb      	ldrh	r3, [r7, #20]
 8011a18:	4413      	add	r3, r2
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	b21a      	sxth	r2, r3
 8011a1e:	4b11      	ldr	r3, [pc, #68]	; (8011a64 <_UG_GetCharData+0x294>)
 8011a20:	801a      	strh	r2, [r3, #0]
 8011a22:	e006      	b.n	8011a32 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8011a24:	4b0b      	ldr	r3, [pc, #44]	; (8011a54 <_UG_GetCharData+0x284>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011a2c:	b21a      	sxth	r2, r3
 8011a2e:	4b0d      	ldr	r3, [pc, #52]	; (8011a64 <_UG_GetCharData+0x294>)
 8011a30:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d003      	beq.n	8011a40 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8011a38:	4b09      	ldr	r3, [pc, #36]	; (8011a60 <_UG_GetCharData+0x290>)
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8011a40:	4b08      	ldr	r3, [pc, #32]	; (8011a64 <_UG_GetCharData+0x294>)
 8011a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a46:	e001      	b.n	8011a4c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8011a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3718      	adds	r7, #24
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	20001ba0 	.word	0x20001ba0
 8011a58:	20001ba4 	.word	0x20001ba4
 8011a5c:	20001ba8 	.word	0x20001ba8
 8011a60:	20001bac 	.word	0x20001bac
 8011a64:	20001bb0 	.word	0x20001bb0

08011a68 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8011a68:	b590      	push	{r4, r7, lr}
 8011a6a:	b083      	sub	sp, #12
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8011a70:	4b3d      	ldr	r3, [pc, #244]	; (8011b68 <_UG_FontSelect+0x100>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d070      	beq.n	8011b5e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8011a7c:	4b3a      	ldr	r3, [pc, #232]	; (8011b68 <_UG_FontSelect+0x100>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	781a      	ldrb	r2, [r3, #0]
 8011a88:	4b37      	ldr	r3, [pc, #220]	; (8011b68 <_UG_FontSelect+0x100>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011a90:	b2d2      	uxtb	r2, r2
 8011a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	1c5a      	adds	r2, r3, #1
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	b25b      	sxtb	r3, r3
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	da01      	bge.n	8011aa8 <_UG_FontSelect+0x40>
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	e000      	b.n	8011aaa <_UG_FontSelect+0x42>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	4b2f      	ldr	r3, [pc, #188]	; (8011b68 <_UG_FontSelect+0x100>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	b2d2      	uxtb	r2, r2
 8011ab0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	1c5a      	adds	r2, r3, #1
 8011ab8:	607a      	str	r2, [r7, #4]
 8011aba:	4a2b      	ldr	r2, [pc, #172]	; (8011b68 <_UG_FontSelect+0x100>)
 8011abc:	6812      	ldr	r2, [r2, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	1c5a      	adds	r2, r3, #1
 8011ac8:	607a      	str	r2, [r7, #4]
 8011aca:	4a27      	ldr	r2, [pc, #156]	; (8011b68 <_UG_FontSelect+0x100>)
 8011acc:	6812      	ldr	r2, [r2, #0]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8011ad4:	4b24      	ldr	r3, [pc, #144]	; (8011b68 <_UG_FontSelect+0x100>)
 8011ad6:	681c      	ldr	r4, [r3, #0]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	f7ff f9b7 	bl	8010e4c <ptr_8to16>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	3302      	adds	r3, #2
 8011ae6:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8011ae8:	4b1f      	ldr	r3, [pc, #124]	; (8011b68 <_UG_FontSelect+0x100>)
 8011aea:	681c      	ldr	r4, [r3, #0]
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f7ff f9ad 	bl	8010e4c <ptr_8to16>
 8011af2:	4603      	mov	r3, r0
 8011af4:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	3302      	adds	r3, #2
 8011afa:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8011afc:	4b1a      	ldr	r3, [pc, #104]	; (8011b68 <_UG_FontSelect+0x100>)
 8011afe:	681c      	ldr	r4, [r3, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff f9a3 	bl	8010e4c <ptr_8to16>
 8011b06:	4603      	mov	r3, r0
 8011b08:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	3302      	adds	r3, #2
 8011b0e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	607a      	str	r2, [r7, #4]
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d00b      	beq.n	8011b34 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8011b1c:	4b12      	ldr	r3, [pc, #72]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8011b24:	4b10      	ldr	r3, [pc, #64]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4413      	add	r3, r2
 8011b30:	607b      	str	r3, [r7, #4]
 8011b32:	e003      	b.n	8011b3c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8011b34:	4b0c      	ldr	r3, [pc, #48]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8011b3c:	4b0a      	ldr	r3, [pc, #40]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8011b44:	4b08      	ldr	r3, [pc, #32]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8011b4a:	005b      	lsls	r3, r3, #1
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4413      	add	r3, r2
 8011b52:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8011b54:	4b04      	ldr	r3, [pc, #16]	; (8011b68 <_UG_FontSelect+0x100>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8011b5c:	e000      	b.n	8011b60 <_UG_FontSelect+0xf8>
    return;
 8011b5e:	bf00      	nop
}
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd90      	pop	{r4, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	20001ba0 	.word	0x20001ba0

08011b6c <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8011b6c:	b5b0      	push	{r4, r5, r7, lr}
 8011b6e:	b08c      	sub	sp, #48	; 0x30
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	4604      	mov	r4, r0
 8011b74:	4608      	mov	r0, r1
 8011b76:	4611      	mov	r1, r2
 8011b78:	461a      	mov	r2, r3
 8011b7a:	4623      	mov	r3, r4
 8011b7c:	80fb      	strh	r3, [r7, #6]
 8011b7e:	4603      	mov	r3, r0
 8011b80:	80bb      	strh	r3, [r7, #4]
 8011b82:	460b      	mov	r3, r1
 8011b84:	807b      	strh	r3, [r7, #2]
 8011b86:	4613      	mov	r3, r2
 8011b88:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011b8e:	2300      	movs	r3, #0
 8011b90:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011b92:	2300      	movs	r3, #0
 8011b94:	847b      	strh	r3, [r7, #34]	; 0x22
 8011b96:	2300      	movs	r3, #0
 8011b98:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8011b9a:	4b8c      	ldr	r3, [pc, #560]	; (8011dcc <_UG_PutChar+0x260>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ba2:	75fb      	strb	r3, [r7, #23]
 8011ba4:	4b89      	ldr	r3, [pc, #548]	; (8011dcc <_UG_PutChar+0x260>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011bac:	f003 0302 	and.w	r3, r3, #2
 8011bb0:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8011bb6:	f107 0208 	add.w	r2, r7, #8
 8011bba:	88fb      	ldrh	r3, [r7, #6]
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ff fe06 	bl	80117d0 <_UG_GetCharData>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8011bc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd0:	d102      	bne.n	8011bd8 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8011bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd6:	e226      	b.n	8012026 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8011bd8:	4b7c      	ldr	r3, [pc, #496]	; (8011dcc <_UG_PutChar+0x260>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011be0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8011be2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d101      	bne.n	8011bec <_UG_PutChar+0x80>
     return 0;
 8011be8:	2300      	movs	r3, #0
 8011bea:	e21c      	b.n	8012026 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8011bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bee:	08db      	lsrs	r3, r3, #3
 8011bf0:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8011bf2:	4b76      	ldr	r3, [pc, #472]	; (8011dcc <_UG_PutChar+0x260>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011bfa:	f003 0307 	and.w	r3, r3, #7
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <_UG_PutChar+0x9e>
 8011c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c06:	3301      	adds	r3, #1
 8011c08:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8011c0a:	7dbb      	ldrb	r3, [r7, #22]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d01d      	beq.n	8011c4c <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8011c10:	4b6e      	ldr	r3, [pc, #440]	; (8011dcc <_UG_PutChar+0x260>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c16:	461d      	mov	r5, r3
 8011c18:	88ba      	ldrh	r2, [r7, #4]
 8011c1a:	8abb      	ldrh	r3, [r7, #20]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	3b01      	subs	r3, #1
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	b21c      	sxth	r4, r3
 8011c26:	4b69      	ldr	r3, [pc, #420]	; (8011dcc <_UG_PutChar+0x260>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	887b      	ldrh	r3, [r7, #2]
 8011c32:	4413      	add	r3, r2
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	3b01      	subs	r3, #1
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	b21b      	sxth	r3, r3
 8011c3c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011c40:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8011c44:	4622      	mov	r2, r4
 8011c46:	47a8      	blx	r5
 8011c48:	4603      	mov	r3, r0
 8011c4a:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8011c4c:	4b5f      	ldr	r3, [pc, #380]	; (8011dcc <_UG_PutChar+0x260>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f040 8172 	bne.w	8011f3e <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	853b      	strh	r3, [r7, #40]	; 0x28
 8011c5e:	e0ec      	b.n	8011e3a <_UG_PutChar+0x2ce>
     {
       c=0;
 8011c60:	2300      	movs	r3, #0
 8011c62:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8011c64:	2300      	movs	r3, #0
 8011c66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011c68:	e0df      	b.n	8011e2a <_UG_PutChar+0x2be>
       {
         b = *data++;
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	1c5a      	adds	r2, r3, #1
 8011c6e:	60ba      	str	r2, [r7, #8]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8011c74:	2300      	movs	r3, #0
 8011c76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011c78:	e0ca      	b.n	8011e10 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8011c7a:	7f7b      	ldrb	r3, [r7, #29]
 8011c7c:	f003 0301 	and.w	r3, r3, #1
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d033      	beq.n	8011cec <_UG_PutChar+0x180>
           {
             if(driver)
 8011c84:	7dbb      	ldrb	r3, [r7, #22]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d01f      	beq.n	8011cca <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8011c8a:	8c3b      	ldrh	r3, [r7, #32]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00a      	beq.n	8011ca6 <_UG_PutChar+0x13a>
 8011c90:	7dfb      	ldrb	r3, [r7, #23]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d107      	bne.n	8011ca6 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8011c96:	8c3a      	ldrh	r2, [r7, #32]
 8011c98:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011c9c:	69bb      	ldr	r3, [r7, #24]
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	4798      	blx	r3
                 bpixels=0;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8011ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d10a      	bne.n	8011cc2 <_UG_PutChar+0x156>
 8011cac:	7dfb      	ldrb	r3, [r7, #23]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8011cb2:	88ba      	ldrh	r2, [r7, #4]
 8011cb4:	8bfb      	ldrh	r3, [r7, #30]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8011cba:	887a      	ldrh	r2, [r7, #2]
 8011cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011cbe:	4413      	add	r3, r2
 8011cc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8011cc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8011cc8:	e096      	b.n	8011df8 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8011cca:	4b40      	ldr	r3, [pc, #256]	; (8011dcc <_UG_PutChar+0x260>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	88b9      	ldrh	r1, [r7, #4]
 8011cd4:	8bfa      	ldrh	r2, [r7, #30]
 8011cd6:	440a      	add	r2, r1
 8011cd8:	b292      	uxth	r2, r2
 8011cda:	b210      	sxth	r0, r2
 8011cdc:	8879      	ldrh	r1, [r7, #2]
 8011cde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011ce0:	440a      	add	r2, r1
 8011ce2:	b292      	uxth	r2, r2
 8011ce4:	b211      	sxth	r1, r2
 8011ce6:	883a      	ldrh	r2, [r7, #0]
 8011ce8:	4798      	blx	r3
 8011cea:	e085      	b.n	8011df8 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8011cec:	7dbb      	ldrb	r3, [r7, #22]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d06e      	beq.n	8011dd0 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8011cf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d064      	beq.n	8011dc2 <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8011cf8:	7dfb      	ldrb	r3, [r7, #23]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d15e      	bne.n	8011dbc <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8011cfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d00:	8839      	ldrh	r1, [r7, #0]
 8011d02:	69bb      	ldr	r3, [r7, #24]
 8011d04:	4610      	mov	r0, r2
 8011d06:	4798      	blx	r3
                   fpixels=0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8011d0c:	e059      	b.n	8011dc2 <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8011d0e:	88ba      	ldrh	r2, [r7, #4]
 8011d10:	8abb      	ldrh	r3, [r7, #20]
 8011d12:	4413      	add	r3, r2
 8011d14:	b29a      	uxth	r2, r3
 8011d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8011d1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d003      	beq.n	8011d2e <_UG_PutChar+0x1c2>
 8011d26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d28:	89fb      	ldrh	r3, [r7, #14]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d224      	bcs.n	8011d78 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8011d2e:	4b27      	ldr	r3, [pc, #156]	; (8011dcc <_UG_PutChar+0x260>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d34:	461d      	mov	r5, r3
 8011d36:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011d3a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8011d3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d40:	89fb      	ldrh	r3, [r7, #14]
 8011d42:	4413      	add	r3, r2
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	3b01      	subs	r3, #1
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	b21c      	sxth	r4, r3
 8011d4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011d5a:	4413      	add	r3, r2
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	b21b      	sxth	r3, r3
 8011d60:	4622      	mov	r2, r4
 8011d62:	47a8      	blx	r5
 8011d64:	4603      	mov	r3, r0
 8011d66:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8011d68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011d6a:	8839      	ldrh	r1, [r7, #0]
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	4610      	mov	r0, r2
 8011d70:	4798      	blx	r3
                       fpixels=0;
 8011d72:	2300      	movs	r3, #0
 8011d74:	847b      	strh	r3, [r7, #34]	; 0x22
 8011d76:	e021      	b.n	8011dbc <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8011d78:	4b14      	ldr	r3, [pc, #80]	; (8011dcc <_UG_PutChar+0x260>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d7e:	461c      	mov	r4, r3
 8011d80:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011d84:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8011d88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d8a:	89fb      	ldrh	r3, [r7, #14]
 8011d8c:	4413      	add	r3, r2
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	3b01      	subs	r3, #1
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	b21a      	sxth	r2, r3
 8011d96:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8011d9a:	47a0      	blx	r4
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8011da0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011da2:	8839      	ldrh	r1, [r7, #0]
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	4610      	mov	r0, r2
 8011da8:	4798      	blx	r3
                       fpixels -= width;
 8011daa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8011db2:	88bb      	ldrh	r3, [r7, #4]
 8011db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8011db6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011db8:	3301      	adds	r3, #1
 8011dba:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8011dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1a5      	bne.n	8011d0e <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8011dc2:	8c3b      	ldrh	r3, [r7, #32]
 8011dc4:	3301      	adds	r3, #1
 8011dc6:	843b      	strh	r3, [r7, #32]
 8011dc8:	e016      	b.n	8011df8 <_UG_PutChar+0x28c>
 8011dca:	bf00      	nop
 8011dcc:	20001ba0 	.word	0x20001ba0
             }
             else if(!trans)                           // Not accelerated output
 8011dd0:	7dfb      	ldrb	r3, [r7, #23]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d110      	bne.n	8011df8 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8011dd6:	4b96      	ldr	r3, [pc, #600]	; (8012030 <_UG_PutChar+0x4c4>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	88b9      	ldrh	r1, [r7, #4]
 8011de0:	8bfa      	ldrh	r2, [r7, #30]
 8011de2:	440a      	add	r2, r1
 8011de4:	b292      	uxth	r2, r2
 8011de6:	b210      	sxth	r0, r2
 8011de8:	8879      	ldrh	r1, [r7, #2]
 8011dea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011dec:	440a      	add	r2, r1
 8011dee:	b292      	uxth	r2, r2
 8011df0:	b211      	sxth	r1, r2
 8011df2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011df6:	4798      	blx	r3
             }
           }
           b >>= 1;
 8011df8:	7f7b      	ldrb	r3, [r7, #29]
 8011dfa:	085b      	lsrs	r3, r3, #1
 8011dfc:	777b      	strb	r3, [r7, #29]
           c++;
 8011dfe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011e02:	b29b      	uxth	r3, r3
 8011e04:	3301      	adds	r3, #1
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8011e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011e10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	d806      	bhi.n	8011e24 <_UG_PutChar+0x2b8>
 8011e16:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8011e1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	f6ff af2b 	blt.w	8011c7a <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8011e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e26:	3301      	adds	r3, #1
 8011e28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011e2a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	f4ff af1b 	bcc.w	8011c6a <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8011e34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011e36:	3301      	adds	r3, #1
 8011e38:	853b      	strh	r3, [r7, #40]	; 0x28
 8011e3a:	4b7d      	ldr	r3, [pc, #500]	; (8012030 <_UG_PutChar+0x4c4>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011e46:	429a      	cmp	r2, r3
 8011e48:	f4ff af0a 	bcc.w	8011c60 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8011e4c:	7dbb      	ldrb	r3, [r7, #22]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f000 80e7 	beq.w	8012022 <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8011e54:	8c3b      	ldrh	r3, [r7, #32]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d009      	beq.n	8011e6e <_UG_PutChar+0x302>
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d106      	bne.n	8011e6e <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8011e60:	8c3a      	ldrh	r2, [r7, #32]
 8011e62:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011e66:	69bb      	ldr	r3, [r7, #24]
 8011e68:	4610      	mov	r0, r2
 8011e6a:	4798      	blx	r3
 8011e6c:	e0d9      	b.n	8012022 <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8011e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	f000 80d6 	beq.w	8012022 <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d15c      	bne.n	8011f36 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8011e7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e7e:	8839      	ldrh	r1, [r7, #0]
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	4610      	mov	r0, r2
 8011e84:	4798      	blx	r3
 8011e86:	e0cc      	b.n	8012022 <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8011e88:	88ba      	ldrh	r2, [r7, #4]
 8011e8a:	8abb      	ldrh	r3, [r7, #20]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8011e96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d003      	beq.n	8011ea8 <_UG_PutChar+0x33c>
 8011ea0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ea2:	8a3b      	ldrh	r3, [r7, #16]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d224      	bcs.n	8011ef2 <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8011ea8:	4b61      	ldr	r3, [pc, #388]	; (8012030 <_UG_PutChar+0x4c4>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eae:	461d      	mov	r5, r3
 8011eb0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011eb4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8011eb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011eba:	8a3b      	ldrh	r3, [r7, #16]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	b21c      	sxth	r4, r3
 8011ec6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ec8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011ecc:	fb92 f3f3 	sdiv	r3, r2, r3
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ed4:	4413      	add	r3, r2
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	b21b      	sxth	r3, r3
 8011eda:	4622      	mov	r2, r4
 8011edc:	47a8      	blx	r5
 8011ede:	4603      	mov	r3, r0
 8011ee0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8011ee2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011ee4:	8839      	ldrh	r1, [r7, #0]
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	4610      	mov	r0, r2
 8011eea:	4798      	blx	r3
               fpixels=0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	847b      	strh	r3, [r7, #34]	; 0x22
 8011ef0:	e021      	b.n	8011f36 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8011ef2:	4b4f      	ldr	r3, [pc, #316]	; (8012030 <_UG_PutChar+0x4c4>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ef8:	461c      	mov	r4, r3
 8011efa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8011efe:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8011f02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f04:	8a3b      	ldrh	r3, [r7, #16]
 8011f06:	4413      	add	r3, r2
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	b21a      	sxth	r2, r3
 8011f10:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8011f14:	47a0      	blx	r4
 8011f16:	4603      	mov	r3, r0
 8011f18:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8011f1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011f1c:	8839      	ldrh	r1, [r7, #0]
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	4610      	mov	r0, r2
 8011f22:	4798      	blx	r3
               fpixels -= width;
 8011f24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011f26:	8a3b      	ldrh	r3, [r7, #16]
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8011f2c:	88bb      	ldrh	r3, [r7, #4]
 8011f2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8011f30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011f32:	3301      	adds	r3, #1
 8011f34:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8011f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1a5      	bne.n	8011e88 <_UG_PutChar+0x31c>
 8011f3c:	e071      	b.n	8012022 <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8011f3e:	4b3c      	ldr	r3, [pc, #240]	; (8012030 <_UG_PutChar+0x4c4>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d16b      	bne.n	8012022 <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	853b      	strh	r3, [r7, #40]	; 0x28
 8011f4e:	e060      	b.n	8012012 <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8011f50:	2300      	movs	r3, #0
 8011f52:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011f54:	e04a      	b.n	8011fec <_UG_PutChar+0x480>
       {
         b = *data++;
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	60ba      	str	r2, [r7, #8]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8011f60:	883b      	ldrh	r3, [r7, #0]
 8011f62:	b2db      	uxtb	r3, r3
 8011f64:	7f7a      	ldrb	r2, [r7, #29]
 8011f66:	fb03 f202 	mul.w	r2, r3, r2
 8011f6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	7f79      	ldrb	r1, [r7, #29]
 8011f72:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8011f76:	fb01 f303 	mul.w	r3, r1, r3
 8011f7a:	4413      	add	r3, r2
 8011f7c:	121b      	asrs	r3, r3, #8
 8011f7e:	b21b      	sxth	r3, r3
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8011f84:	883b      	ldrh	r3, [r7, #0]
 8011f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011f8a:	7f79      	ldrb	r1, [r7, #29]
 8011f8c:	fb03 f101 	mul.w	r1, r3, r1
 8011f90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011f98:	7f78      	ldrb	r0, [r7, #29]
 8011f9a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8011f9e:	fb00 f303 	mul.w	r3, r0, r3
 8011fa2:	440b      	add	r3, r1
 8011fa4:	121b      	asrs	r3, r3, #8
 8011fa6:	b21b      	sxth	r3, r3
 8011fa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011fac:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8011fae:	4313      	orrs	r3, r2
 8011fb0:	b21b      	sxth	r3, r3
 8011fb2:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8011fb4:	7dbb      	ldrb	r3, [r7, #22]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d005      	beq.n	8011fc6 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8011fba:	8a7a      	ldrh	r2, [r7, #18]
 8011fbc:	69bb      	ldr	r3, [r7, #24]
 8011fbe:	4611      	mov	r1, r2
 8011fc0:	2001      	movs	r0, #1
 8011fc2:	4798      	blx	r3
 8011fc4:	e00f      	b.n	8011fe6 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8011fc6:	4b1a      	ldr	r3, [pc, #104]	; (8012030 <_UG_PutChar+0x4c4>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	88b9      	ldrh	r1, [r7, #4]
 8011fd0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011fd2:	440a      	add	r2, r1
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	b210      	sxth	r0, r2
 8011fd8:	8879      	ldrh	r1, [r7, #2]
 8011fda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011fdc:	440a      	add	r2, r1
 8011fde:	b292      	uxth	r2, r2
 8011fe0:	b211      	sxth	r1, r2
 8011fe2:	8a7a      	ldrh	r2, [r7, #18]
 8011fe4:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8011fe6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011fe8:	3301      	adds	r3, #1
 8011fea:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011fec:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	dbaf      	blt.n	8011f56 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	4a0d      	ldr	r2, [pc, #52]	; (8012030 <_UG_PutChar+0x4c4>)
 8011ffa:	6812      	ldr	r2, [r2, #0]
 8011ffc:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8012000:	4611      	mov	r1, r2
 8012002:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8012006:	1a8a      	subs	r2, r1, r2
 8012008:	4413      	add	r3, r2
 801200a:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 801200c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801200e:	3301      	adds	r3, #1
 8012010:	853b      	strh	r3, [r7, #40]	; 0x28
 8012012:	4b07      	ldr	r3, [pc, #28]	; (8012030 <_UG_PutChar+0x4c4>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801201a:	b29b      	uxth	r3, r3
 801201c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801201e:	429a      	cmp	r2, r3
 8012020:	d396      	bcc.n	8011f50 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8012022:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3730      	adds	r7, #48	; 0x30
 801202a:	46bd      	mov	sp, r7
 801202c:	bdb0      	pop	{r4, r5, r7, pc}
 801202e:	bf00      	nop
 8012030:	20001ba0 	.word	0x20001ba0

08012034 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8012034:	b480      	push	{r7}
 8012036:	b089      	sub	sp, #36	; 0x24
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 801203c:	4b57      	ldr	r3, [pc, #348]	; (801219c <_UG_ProcessTouchData+0x168>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	88db      	ldrh	r3, [r3, #6]
 8012042:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8012044:	4b55      	ldr	r3, [pc, #340]	; (801219c <_UG_ProcessTouchData+0x168>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	891b      	ldrh	r3, [r3, #8]
 801204a:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 801204c:	4b53      	ldr	r3, [pc, #332]	; (801219c <_UG_ProcessTouchData+0x168>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	791b      	ldrb	r3, [r3, #4]
 8012052:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801205a:	2300      	movs	r3, #0
 801205c:	83fb      	strh	r3, [r7, #30]
 801205e:	e090      	b.n	8012182 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685a      	ldr	r2, [r3, #4]
 8012064:	8bfb      	ldrh	r3, [r7, #30]
 8012066:	015b      	lsls	r3, r3, #5
 8012068:	4413      	add	r3, r2
 801206a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	785b      	ldrb	r3, [r3, #1]
 8012076:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8012078:	7bfb      	ldrb	r3, [r7, #15]
 801207a:	f003 0301 	and.w	r3, r3, #1
 801207e:	2b00      	cmp	r3, #0
 8012080:	d179      	bne.n	8012176 <_UG_ProcessTouchData+0x142>
 8012082:	7bfb      	ldrb	r3, [r7, #15]
 8012084:	f003 0302 	and.w	r3, r3, #2
 8012088:	2b00      	cmp	r3, #0
 801208a:	d074      	beq.n	8012176 <_UG_ProcessTouchData+0x142>
 801208c:	7bfb      	ldrb	r3, [r7, #15]
 801208e:	f003 0308 	and.w	r3, r3, #8
 8012092:	2b00      	cmp	r3, #0
 8012094:	d06f      	beq.n	8012176 <_UG_ProcessTouchData+0x142>
 8012096:	7bfb      	ldrb	r3, [r7, #15]
 8012098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801209c:	2b00      	cmp	r3, #0
 801209e:	d16a      	bne.n	8012176 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80120a0:	7dfb      	ldrb	r3, [r7, #23]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d047      	beq.n	8012136 <_UG_ProcessTouchData+0x102>
 80120a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80120aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ae:	d042      	beq.n	8012136 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80120b0:	7f7b      	ldrb	r3, [r7, #29]
 80120b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d107      	bne.n	80120ca <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80120ba:	7f7b      	ldrb	r3, [r7, #29]
 80120bc:	f043 0305 	orr.w	r3, r3, #5
 80120c0:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80120c2:	7f7b      	ldrb	r3, [r7, #29]
 80120c4:	f023 0318 	bic.w	r3, r3, #24
 80120c8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80120ca:	7f7b      	ldrb	r3, [r7, #29]
 80120cc:	f023 0320 	bic.w	r3, r3, #32
 80120d0:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80120d8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80120dc:	429a      	cmp	r2, r3
 80120de:	db25      	blt.n	801212c <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80120e6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	dc1e      	bgt.n	801212c <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80120f4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	db17      	blt.n	801212c <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80120fc:	693b      	ldr	r3, [r7, #16]
 80120fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012102:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8012106:	429a      	cmp	r2, r3
 8012108:	dc10      	bgt.n	801212c <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 801210a:	7f7b      	ldrb	r3, [r7, #29]
 801210c:	f043 0320 	orr.w	r3, r3, #32
 8012110:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8012112:	7f7b      	ldrb	r3, [r7, #29]
 8012114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012118:	2b00      	cmp	r3, #0
 801211a:	d107      	bne.n	801212c <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 801211c:	7f7b      	ldrb	r3, [r7, #29]
 801211e:	f023 0304 	bic.w	r3, r3, #4
 8012122:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8012124:	7f7b      	ldrb	r3, [r7, #29]
 8012126:	f043 0302 	orr.w	r3, r3, #2
 801212a:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 801212c:	7f7b      	ldrb	r3, [r7, #29]
 801212e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012132:	777b      	strb	r3, [r7, #29]
 8012134:	e01f      	b.n	8012176 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8012136:	7f7b      	ldrb	r3, [r7, #29]
 8012138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801213c:	2b00      	cmp	r3, #0
 801213e:	d01a      	beq.n	8012176 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8012140:	7f7b      	ldrb	r3, [r7, #29]
 8012142:	f003 0320 	and.w	r3, r3, #32
 8012146:	2b00      	cmp	r3, #0
 8012148:	d004      	beq.n	8012154 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 801214a:	7f7b      	ldrb	r3, [r7, #29]
 801214c:	f043 0308 	orr.w	r3, r3, #8
 8012150:	777b      	strb	r3, [r7, #29]
 8012152:	e003      	b.n	801215c <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8012154:	7f7b      	ldrb	r3, [r7, #29]
 8012156:	f043 0310 	orr.w	r3, r3, #16
 801215a:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 801215c:	7f7b      	ldrb	r3, [r7, #29]
 801215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012162:	2b00      	cmp	r3, #0
 8012164:	d003      	beq.n	801216e <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8012166:	7f7b      	ldrb	r3, [r7, #29]
 8012168:	f043 0301 	orr.w	r3, r3, #1
 801216c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 801216e:	7f7b      	ldrb	r3, [r7, #29]
 8012170:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8012174:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	7f7a      	ldrb	r2, [r7, #29]
 801217a:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 801217c:	8bfb      	ldrh	r3, [r7, #30]
 801217e:	3301      	adds	r3, #1
 8012180:	83fb      	strh	r3, [r7, #30]
 8012182:	8bfa      	ldrh	r2, [r7, #30]
 8012184:	8abb      	ldrh	r3, [r7, #20]
 8012186:	429a      	cmp	r2, r3
 8012188:	f4ff af6a 	bcc.w	8012060 <_UG_ProcessTouchData+0x2c>
   }
}
 801218c:	bf00      	nop
 801218e:	bf00      	nop
 8012190:	3724      	adds	r7, #36	; 0x24
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop
 801219c:	20001ba0 	.word	0x20001ba0

080121a0 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b086      	sub	sp, #24
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80121ae:	2300      	movs	r3, #0
 80121b0:	82fb      	strh	r3, [r7, #22]
 80121b2:	e035      	b.n	8012220 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	685a      	ldr	r2, [r3, #4]
 80121b8:	8afb      	ldrh	r3, [r7, #22]
 80121ba:	015b      	lsls	r3, r3, #5
 80121bc:	4413      	add	r3, r2
 80121be:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	785b      	ldrb	r3, [r3, #1]
 80121ca:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	f003 0301 	and.w	r3, r3, #1
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d121      	bne.n	801221a <_UG_UpdateObjects+0x7a>
 80121d6:	7bfb      	ldrb	r3, [r7, #15]
 80121d8:	f003 0302 	and.w	r3, r3, #2
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d01c      	beq.n	801221a <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80121e0:	7bfb      	ldrb	r3, [r7, #15]
 80121e2:	f003 0320 	and.w	r3, r3, #32
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d004      	beq.n	80121f4 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	6939      	ldr	r1, [r7, #16]
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
 80121f6:	f003 0308 	and.w	r3, r3, #8
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d00d      	beq.n	801221a <_UG_UpdateObjects+0x7a>
 80121fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012202:	2b00      	cmp	r3, #0
 8012204:	da09      	bge.n	801221a <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8012206:	7bbb      	ldrb	r3, [r7, #14]
 8012208:	f003 0341 	and.w	r3, r3, #65	; 0x41
 801220c:	2b00      	cmp	r3, #0
 801220e:	d004      	beq.n	801221a <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8012210:	693b      	ldr	r3, [r7, #16]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	6939      	ldr	r1, [r7, #16]
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 801221a:	8afb      	ldrh	r3, [r7, #22]
 801221c:	3301      	adds	r3, #1
 801221e:	82fb      	strh	r3, [r7, #22]
 8012220:	8afa      	ldrh	r2, [r7, #22]
 8012222:	8abb      	ldrh	r3, [r7, #20]
 8012224:	429a      	cmp	r2, r3
 8012226:	d3c5      	bcc.n	80121b4 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8012228:	bf00      	nop
 801222a:	bf00      	nop
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
	...

08012234 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b086      	sub	sp, #24
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 801223c:	4b22      	ldr	r3, [pc, #136]	; (80122c8 <_UG_HandleEvents+0x94>)
 801223e:	2200      	movs	r2, #0
 8012240:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8012242:	4b21      	ldr	r3, [pc, #132]	; (80122c8 <_UG_HandleEvents+0x94>)
 8012244:	2202      	movs	r2, #2
 8012246:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801224e:	2300      	movs	r3, #0
 8012250:	82fb      	strh	r3, [r7, #22]
 8012252:	e02f      	b.n	80122b4 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	685a      	ldr	r2, [r3, #4]
 8012258:	8afb      	ldrh	r3, [r7, #22]
 801225a:	015b      	lsls	r3, r3, #5
 801225c:	4413      	add	r3, r2
 801225e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8012266:	7bfb      	ldrb	r3, [r7, #15]
 8012268:	f003 0301 	and.w	r3, r3, #1
 801226c:	2b00      	cmp	r3, #0
 801226e:	d11e      	bne.n	80122ae <_UG_HandleEvents+0x7a>
 8012270:	7bfb      	ldrb	r3, [r7, #15]
 8012272:	f003 0302 	and.w	r3, r3, #2
 8012276:	2b00      	cmp	r3, #0
 8012278:	d019      	beq.n	80122ae <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	7e9b      	ldrb	r3, [r3, #26]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d015      	beq.n	80122ae <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8012282:	4a11      	ldr	r2, [pc, #68]	; (80122c8 <_UG_HandleEvents+0x94>)
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	7e1a      	ldrb	r2, [r3, #24]
 801228c:	4b0e      	ldr	r3, [pc, #56]	; (80122c8 <_UG_HandleEvents+0x94>)
 801228e:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	7e5a      	ldrb	r2, [r3, #25]
 8012294:	4b0c      	ldr	r3, [pc, #48]	; (80122c8 <_UG_HandleEvents+0x94>)
 8012296:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	7e9a      	ldrb	r2, [r3, #26]
 801229c:	4b0a      	ldr	r3, [pc, #40]	; (80122c8 <_UG_HandleEvents+0x94>)
 801229e:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a4:	4808      	ldr	r0, [pc, #32]	; (80122c8 <_UG_HandleEvents+0x94>)
 80122a6:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	2200      	movs	r2, #0
 80122ac:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80122ae:	8afb      	ldrh	r3, [r7, #22]
 80122b0:	3301      	adds	r3, #1
 80122b2:	82fb      	strh	r3, [r7, #22]
 80122b4:	8afa      	ldrh	r2, [r7, #22]
 80122b6:	8abb      	ldrh	r3, [r7, #20]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d3cb      	bcc.n	8012254 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80122bc:	bf00      	nop
 80122be:	bf00      	nop
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	20001bb4 	.word	0x20001bb4

080122cc <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80122cc:	b590      	push	{r4, r7, lr}
 80122ce:	b08f      	sub	sp, #60	; 0x3c
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	685b      	ldr	r3, [r3, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f000 812c 	beq.w	8012536 <_UG_PutText+0x26a>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f000 8127 	beq.w	8012536 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	89db      	ldrh	r3, [r3, #14]
 80122ec:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	895b      	ldrh	r3, [r3, #10]
 80122f2:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	3302      	adds	r3, #2
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80122fe:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8012302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012306:	1ad2      	subs	r2, r2, r3
 8012308:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801230c:	429a      	cmp	r2, r3
 801230e:	f2c0 8114 	blt.w	801253a <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	891b      	ldrh	r3, [r3, #8]
 8012316:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	899b      	ldrh	r3, [r3, #12]
 801231c:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	7d1b      	ldrb	r3, [r3, #20]
 8012322:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	8adb      	ldrh	r3, [r3, #22]
 8012328:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	8b1b      	ldrh	r3, [r3, #24]
 801232e:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f7ff fb92 	bl	8011a68 <_UG_FontSelect>

   rc=1;
 8012344:	2301      	movs	r3, #1
 8012346:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801234c:	4b80      	ldr	r3, [pc, #512]	; (8012550 <_UG_PutText+0x284>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012354:	2b00      	cmp	r3, #0
 8012356:	d107      	bne.n	8012368 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8012358:	f107 0308 	add.w	r3, r7, #8
 801235c:	4618      	mov	r0, r3
 801235e:	f7ff f9bf 	bl	80116e0 <_UG_DecodeUTF8>
 8012362:	4603      	mov	r3, r0
 8012364:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012366:	e004      	b.n	8012372 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	1c5a      	adds	r2, r3, #1
 801236c:	60ba      	str	r2, [r7, #8]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8012372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012374:	2b00      	cmp	r3, #0
 8012376:	d006      	beq.n	8012386 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8012378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801237a:	2b0a      	cmp	r3, #10
 801237c:	d1e6      	bne.n	801234c <_UG_PutText+0x80>
 801237e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012380:	3301      	adds	r3, #1
 8012382:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012384:	e7e2      	b.n	801234c <_UG_PutText+0x80>
     if(!chr) break;
 8012386:	bf00      	nop
   }

   yp = 0;
 8012388:	2300      	movs	r3, #0
 801238a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 801238c:	7e7b      	ldrb	r3, [r7, #25]
 801238e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012392:	2b00      	cmp	r3, #0
 8012394:	d01f      	beq.n	80123d6 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8012396:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012398:	8c3b      	ldrh	r3, [r7, #32]
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	b29b      	uxth	r3, r3
 801239e:	3301      	adds	r3, #1
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80123a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123a6:	8bfb      	ldrh	r3, [r7, #30]
 80123a8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80123aa:	fb11 f303 	smulbb	r3, r1, r3
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 80123b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123ba:	3b01      	subs	r3, #1
 80123bc:	b299      	uxth	r1, r3
 80123be:	8abb      	ldrh	r3, [r7, #20]
 80123c0:	fb11 f303 	smulbb	r3, r1, r3
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 80123cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f2c0 80b4 	blt.w	801253e <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80123d6:	7e7b      	ldrb	r3, [r7, #25]
 80123d8:	f003 0310 	and.w	r3, r3, #16
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d003      	beq.n	80123e8 <_UG_PutText+0x11c>
 80123e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80123e4:	105b      	asrs	r3, r3, #1
 80123e6:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 80123e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80123ea:	8c3b      	ldrh	r3, [r7, #32]
 80123ec:	4413      	add	r3, r2
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80123fe:	4b54      	ldr	r3, [pc, #336]	; (8012550 <_UG_PutText+0x284>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012406:	2b00      	cmp	r3, #0
 8012408:	d107      	bne.n	801241a <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 801240a:	f107 0308 	add.w	r3, r7, #8
 801240e:	4618      	mov	r0, r3
 8012410:	f7ff f966 	bl	80116e0 <_UG_DecodeUTF8>
 8012414:	4603      	mov	r3, r0
 8012416:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012418:	e004      	b.n	8012424 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	1c5a      	adds	r2, r3, #1
 801241e:	60ba      	str	r2, [r7, #8]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8012424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012426:	2b00      	cmp	r3, #0
 8012428:	d01b      	beq.n	8012462 <_UG_PutText+0x196>
 801242a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801242c:	2b0a      	cmp	r3, #10
 801242e:	d018      	beq.n	8012462 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8012430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012432:	2100      	movs	r1, #0
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff f9cb 	bl	80117d0 <_UG_GetCharData>
 801243a:	4603      	mov	r3, r0
 801243c:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 801243e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012446:	d00a      	beq.n	801245e <_UG_PutText+0x192>
         sl++;
 8012448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801244a:	3301      	adds	r3, #1
 801244c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 801244e:	8a7a      	ldrh	r2, [r7, #18]
 8012450:	8afb      	ldrh	r3, [r7, #22]
 8012452:	4413      	add	r3, r2
 8012454:	b29a      	uxth	r2, r3
 8012456:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012458:	4413      	add	r3, r2
 801245a:	857b      	strh	r3, [r7, #42]	; 0x2a
 801245c:	e7cf      	b.n	80123fe <_UG_PutText+0x132>
         if (w == -1){continue;}
 801245e:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012460:	e7cd      	b.n	80123fe <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8012462:	8afb      	ldrh	r3, [r7, #22]
 8012464:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 801246a:	8b7a      	ldrh	r2, [r7, #26]
 801246c:	8bbb      	ldrh	r3, [r7, #28]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	b29b      	uxth	r3, r3
 8012472:	3301      	adds	r3, #1
 8012474:	b29b      	uxth	r3, r3
 8012476:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8012478:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801247a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	b29b      	uxth	r3, r3
 8012480:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8012482:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8012486:	2b00      	cmp	r3, #0
 8012488:	db5b      	blt.n	8012542 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 801248a:	7e7b      	ldrb	r3, [r7, #25]
 801248c:	f003 0301 	and.w	r3, r3, #1
 8012490:	2b00      	cmp	r3, #0
 8012492:	d002      	beq.n	801249a <_UG_PutText+0x1ce>
 8012494:	2300      	movs	r3, #0
 8012496:	853b      	strh	r3, [r7, #40]	; 0x28
 8012498:	e008      	b.n	80124ac <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 801249a:	7e7b      	ldrb	r3, [r7, #25]
 801249c:	f003 0302 	and.w	r3, r3, #2
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d003      	beq.n	80124ac <_UG_PutText+0x1e0>
 80124a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80124a8:	105b      	asrs	r3, r3, #1
 80124aa:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80124ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80124ae:	8bbb      	ldrh	r3, [r7, #28]
 80124b0:	4413      	add	r3, r2
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80124b6:	4b26      	ldr	r3, [pc, #152]	; (8012550 <_UG_PutText+0x284>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d107      	bne.n	80124d2 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80124c2:	f107 030c 	add.w	r3, r7, #12
 80124c6:	4618      	mov	r0, r3
 80124c8:	f7ff f90a 	bl	80116e0 <_UG_DecodeUTF8>
 80124cc:	4603      	mov	r3, r0
 80124ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80124d0:	e004      	b.n	80124dc <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	1c5a      	adds	r2, r3, #1
 80124d6:	60fa      	str	r2, [r7, #12]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80124dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d031      	beq.n	8012546 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80124e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124e4:	2b0a      	cmp	r3, #10
 80124e6:	d01c      	beq.n	8012522 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	8a1c      	ldrh	r4, [r3, #16]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	8a5b      	ldrh	r3, [r3, #18]
 80124f0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80124f4:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 80124f8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	4623      	mov	r3, r4
 80124fe:	f7ff fb35 	bl	8011b6c <_UG_PutChar>
 8012502:	4603      	mov	r3, r0
 8012504:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8012506:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250e:	d0d2      	beq.n	80124b6 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8012510:	8a7a      	ldrh	r2, [r7, #18]
 8012512:	8afb      	ldrh	r3, [r7, #22]
 8012514:	4413      	add	r3, r2
 8012516:	b29a      	uxth	r2, r3
 8012518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801251a:	4413      	add	r3, r2
 801251c:	b29b      	uxth	r3, r3
 801251e:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8012520:	e7c9      	b.n	80124b6 <_UG_PutText+0x1ea>
           break;
 8012522:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8012524:	8bfa      	ldrh	r2, [r7, #30]
 8012526:	8abb      	ldrh	r3, [r7, #20]
 8012528:	4413      	add	r3, r2
 801252a:	b29a      	uxth	r2, r3
 801252c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801252e:	4413      	add	r3, r2
 8012530:	b29b      	uxth	r3, r3
 8012532:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8012534:	e75d      	b.n	80123f2 <_UG_PutText+0x126>
     return;
 8012536:	bf00      	nop
 8012538:	e006      	b.n	8012548 <_UG_PutText+0x27c>
     return;
 801253a:	bf00      	nop
 801253c:	e004      	b.n	8012548 <_UG_PutText+0x27c>
        return;
 801253e:	bf00      	nop
 8012540:	e002      	b.n	8012548 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8012542:	bf00      	nop
 8012544:	e000      	b.n	8012548 <_UG_PutText+0x27c>
           return;
 8012546:	bf00      	nop
   }
}
 8012548:	3734      	adds	r7, #52	; 0x34
 801254a:	46bd      	mov	sp, r7
 801254c:	bd90      	pop	{r4, r7, pc}
 801254e:	bf00      	nop
 8012550:	20001ba0 	.word	0x20001ba0

08012554 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8012554:	b5b0      	push	{r4, r5, r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af02      	add	r7, sp, #8
 801255a:	4604      	mov	r4, r0
 801255c:	4608      	mov	r0, r1
 801255e:	4611      	mov	r1, r2
 8012560:	461a      	mov	r2, r3
 8012562:	4623      	mov	r3, r4
 8012564:	80fb      	strh	r3, [r7, #6]
 8012566:	4603      	mov	r3, r0
 8012568:	80bb      	strh	r3, [r7, #4]
 801256a:	460b      	mov	r3, r1
 801256c:	807b      	strh	r3, [r7, #2]
 801256e:	4613      	mov	r3, r2
 8012570:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8012572:	887b      	ldrh	r3, [r7, #2]
 8012574:	3b01      	subs	r3, #1
 8012576:	b29b      	uxth	r3, r3
 8012578:	b21c      	sxth	r4, r3
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	1c9a      	adds	r2, r3, #2
 801257e:	61ba      	str	r2, [r7, #24]
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012586:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801258a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	4613      	mov	r3, r2
 8012592:	4622      	mov	r2, r4
 8012594:	f7fe fee0 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8012598:	88bb      	ldrh	r3, [r7, #4]
 801259a:	3301      	adds	r3, #1
 801259c:	b29b      	uxth	r3, r3
 801259e:	b219      	sxth	r1, r3
 80125a0:	883b      	ldrh	r3, [r7, #0]
 80125a2:	3b01      	subs	r3, #1
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	b21c      	sxth	r4, r3
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	1c9a      	adds	r2, r3, #2
 80125ac:	61ba      	str	r2, [r7, #24]
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80125b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	4623      	mov	r3, r4
 80125bc:	f7fe fecc 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	1c9a      	adds	r2, r3, #2
 80125c4:	61ba      	str	r2, [r7, #24]
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80125cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80125d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80125d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	4623      	mov	r3, r4
 80125dc:	f7fe febc 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80125e0:	883b      	ldrh	r3, [r7, #0]
 80125e2:	3b01      	subs	r3, #1
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	b21c      	sxth	r4, r3
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	1c9a      	adds	r2, r3, #2
 80125ec:	61ba      	str	r2, [r7, #24]
 80125ee:	881b      	ldrh	r3, [r3, #0]
 80125f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80125f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80125f8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80125fc:	9300      	str	r3, [sp, #0]
 80125fe:	4623      	mov	r3, r4
 8012600:	f7fe feaa 	bl	8011358 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8012604:	88fb      	ldrh	r3, [r7, #6]
 8012606:	3301      	adds	r3, #1
 8012608:	b29b      	uxth	r3, r3
 801260a:	b218      	sxth	r0, r3
 801260c:	88bb      	ldrh	r3, [r7, #4]
 801260e:	3301      	adds	r3, #1
 8012610:	b29b      	uxth	r3, r3
 8012612:	b219      	sxth	r1, r3
 8012614:	887b      	ldrh	r3, [r7, #2]
 8012616:	3b02      	subs	r3, #2
 8012618:	b29b      	uxth	r3, r3
 801261a:	b21c      	sxth	r4, r3
 801261c:	88bb      	ldrh	r3, [r7, #4]
 801261e:	3301      	adds	r3, #1
 8012620:	b29b      	uxth	r3, r3
 8012622:	b21d      	sxth	r5, r3
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	1c9a      	adds	r2, r3, #2
 8012628:	61ba      	str	r2, [r7, #24]
 801262a:	881b      	ldrh	r3, [r3, #0]
 801262c:	9300      	str	r3, [sp, #0]
 801262e:	462b      	mov	r3, r5
 8012630:	4622      	mov	r2, r4
 8012632:	f7fe fe91 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8012636:	88fb      	ldrh	r3, [r7, #6]
 8012638:	3301      	adds	r3, #1
 801263a:	b29b      	uxth	r3, r3
 801263c:	b218      	sxth	r0, r3
 801263e:	88bb      	ldrh	r3, [r7, #4]
 8012640:	3302      	adds	r3, #2
 8012642:	b29b      	uxth	r3, r3
 8012644:	b219      	sxth	r1, r3
 8012646:	88fb      	ldrh	r3, [r7, #6]
 8012648:	3301      	adds	r3, #1
 801264a:	b29b      	uxth	r3, r3
 801264c:	b21c      	sxth	r4, r3
 801264e:	883b      	ldrh	r3, [r7, #0]
 8012650:	3b02      	subs	r3, #2
 8012652:	b29b      	uxth	r3, r3
 8012654:	b21d      	sxth	r5, r3
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	1c9a      	adds	r2, r3, #2
 801265a:	61ba      	str	r2, [r7, #24]
 801265c:	881b      	ldrh	r3, [r3, #0]
 801265e:	9300      	str	r3, [sp, #0]
 8012660:	462b      	mov	r3, r5
 8012662:	4622      	mov	r2, r4
 8012664:	f7fe fe78 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8012668:	88fb      	ldrh	r3, [r7, #6]
 801266a:	3301      	adds	r3, #1
 801266c:	b29b      	uxth	r3, r3
 801266e:	b218      	sxth	r0, r3
 8012670:	883b      	ldrh	r3, [r7, #0]
 8012672:	3b01      	subs	r3, #1
 8012674:	b29b      	uxth	r3, r3
 8012676:	b219      	sxth	r1, r3
 8012678:	887b      	ldrh	r3, [r7, #2]
 801267a:	3b01      	subs	r3, #1
 801267c:	b29b      	uxth	r3, r3
 801267e:	b21c      	sxth	r4, r3
 8012680:	883b      	ldrh	r3, [r7, #0]
 8012682:	3b01      	subs	r3, #1
 8012684:	b29b      	uxth	r3, r3
 8012686:	b21d      	sxth	r5, r3
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	1c9a      	adds	r2, r3, #2
 801268c:	61ba      	str	r2, [r7, #24]
 801268e:	881b      	ldrh	r3, [r3, #0]
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	462b      	mov	r3, r5
 8012694:	4622      	mov	r2, r4
 8012696:	f7fe fe5f 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 801269a:	887b      	ldrh	r3, [r7, #2]
 801269c:	3b01      	subs	r3, #1
 801269e:	b29b      	uxth	r3, r3
 80126a0:	b218      	sxth	r0, r3
 80126a2:	88bb      	ldrh	r3, [r7, #4]
 80126a4:	3301      	adds	r3, #1
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	b219      	sxth	r1, r3
 80126aa:	887b      	ldrh	r3, [r7, #2]
 80126ac:	3b01      	subs	r3, #1
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	b21c      	sxth	r4, r3
 80126b2:	883b      	ldrh	r3, [r7, #0]
 80126b4:	3b02      	subs	r3, #2
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	b21d      	sxth	r5, r3
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	1c9a      	adds	r2, r3, #2
 80126be:	61ba      	str	r2, [r7, #24]
 80126c0:	881b      	ldrh	r3, [r3, #0]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	462b      	mov	r3, r5
 80126c6:	4622      	mov	r2, r4
 80126c8:	f7fe fe46 	bl	8011358 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80126cc:	88fb      	ldrh	r3, [r7, #6]
 80126ce:	3302      	adds	r3, #2
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	b218      	sxth	r0, r3
 80126d4:	88bb      	ldrh	r3, [r7, #4]
 80126d6:	3302      	adds	r3, #2
 80126d8:	b29b      	uxth	r3, r3
 80126da:	b219      	sxth	r1, r3
 80126dc:	887b      	ldrh	r3, [r7, #2]
 80126de:	3b03      	subs	r3, #3
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	b21c      	sxth	r4, r3
 80126e4:	88bb      	ldrh	r3, [r7, #4]
 80126e6:	3302      	adds	r3, #2
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	b21d      	sxth	r5, r3
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	1c9a      	adds	r2, r3, #2
 80126f0:	61ba      	str	r2, [r7, #24]
 80126f2:	881b      	ldrh	r3, [r3, #0]
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	462b      	mov	r3, r5
 80126f8:	4622      	mov	r2, r4
 80126fa:	f7fe fe2d 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80126fe:	88fb      	ldrh	r3, [r7, #6]
 8012700:	3302      	adds	r3, #2
 8012702:	b29b      	uxth	r3, r3
 8012704:	b218      	sxth	r0, r3
 8012706:	88bb      	ldrh	r3, [r7, #4]
 8012708:	3303      	adds	r3, #3
 801270a:	b29b      	uxth	r3, r3
 801270c:	b219      	sxth	r1, r3
 801270e:	88fb      	ldrh	r3, [r7, #6]
 8012710:	3302      	adds	r3, #2
 8012712:	b29b      	uxth	r3, r3
 8012714:	b21c      	sxth	r4, r3
 8012716:	883b      	ldrh	r3, [r7, #0]
 8012718:	3b03      	subs	r3, #3
 801271a:	b29b      	uxth	r3, r3
 801271c:	b21d      	sxth	r5, r3
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	1c9a      	adds	r2, r3, #2
 8012722:	61ba      	str	r2, [r7, #24]
 8012724:	881b      	ldrh	r3, [r3, #0]
 8012726:	9300      	str	r3, [sp, #0]
 8012728:	462b      	mov	r3, r5
 801272a:	4622      	mov	r2, r4
 801272c:	f7fe fe14 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8012730:	88fb      	ldrh	r3, [r7, #6]
 8012732:	3302      	adds	r3, #2
 8012734:	b29b      	uxth	r3, r3
 8012736:	b218      	sxth	r0, r3
 8012738:	883b      	ldrh	r3, [r7, #0]
 801273a:	3b02      	subs	r3, #2
 801273c:	b29b      	uxth	r3, r3
 801273e:	b219      	sxth	r1, r3
 8012740:	887b      	ldrh	r3, [r7, #2]
 8012742:	3b02      	subs	r3, #2
 8012744:	b29b      	uxth	r3, r3
 8012746:	b21c      	sxth	r4, r3
 8012748:	883b      	ldrh	r3, [r7, #0]
 801274a:	3b02      	subs	r3, #2
 801274c:	b29b      	uxth	r3, r3
 801274e:	b21d      	sxth	r5, r3
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	1c9a      	adds	r2, r3, #2
 8012754:	61ba      	str	r2, [r7, #24]
 8012756:	881b      	ldrh	r3, [r3, #0]
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	462b      	mov	r3, r5
 801275c:	4622      	mov	r2, r4
 801275e:	f7fe fdfb 	bl	8011358 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8012762:	887b      	ldrh	r3, [r7, #2]
 8012764:	3b02      	subs	r3, #2
 8012766:	b29b      	uxth	r3, r3
 8012768:	b218      	sxth	r0, r3
 801276a:	88bb      	ldrh	r3, [r7, #4]
 801276c:	3302      	adds	r3, #2
 801276e:	b29b      	uxth	r3, r3
 8012770:	b219      	sxth	r1, r3
 8012772:	887b      	ldrh	r3, [r7, #2]
 8012774:	3b02      	subs	r3, #2
 8012776:	b29b      	uxth	r3, r3
 8012778:	b21a      	sxth	r2, r3
 801277a:	883b      	ldrh	r3, [r7, #0]
 801277c:	3b03      	subs	r3, #3
 801277e:	b29b      	uxth	r3, r3
 8012780:	b21c      	sxth	r4, r3
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	4623      	mov	r3, r4
 801278a:	f7fe fde5 	bl	8011358 <UG_DrawLine>
}
 801278e:	bf00      	nop
 8012790:	3708      	adds	r7, #8
 8012792:	46bd      	mov	sp, r7
 8012794:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012798 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
 801279e:	4603      	mov	r3, r0
 80127a0:	6039      	str	r1, [r7, #0]
 80127a2:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80127a4:	79fb      	ldrb	r3, [r7, #7]
 80127a6:	2b03      	cmp	r3, #3
 80127a8:	d810      	bhi.n	80127cc <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80127aa:	4b0b      	ldr	r3, [pc, #44]	; (80127d8 <UG_DriverRegister+0x40>)
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	79fb      	ldrb	r3, [r7, #7]
 80127b0:	330a      	adds	r3, #10
 80127b2:	00db      	lsls	r3, r3, #3
 80127b4:	4413      	add	r3, r2
 80127b6:	683a      	ldr	r2, [r7, #0]
 80127b8:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80127ba:	4b07      	ldr	r3, [pc, #28]	; (80127d8 <UG_DriverRegister+0x40>)
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	79fb      	ldrb	r3, [r7, #7]
 80127c0:	330a      	adds	r3, #10
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	4413      	add	r3, r2
 80127c6:	2203      	movs	r2, #3
 80127c8:	721a      	strb	r2, [r3, #8]
 80127ca:	e000      	b.n	80127ce <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80127cc:	bf00      	nop
}
 80127ce:	370c      	adds	r7, #12
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr
 80127d8:	20001ba0 	.word	0x20001ba0

080127dc <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80127e2:	4b5e      	ldr	r3, [pc, #376]	; (801295c <UG_Update+0x180>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00a      	beq.n	8012808 <UG_Update+0x2c>
 80127f2:	4b5a      	ldr	r3, [pc, #360]	; (801295c <UG_Update+0x180>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80127fa:	4b58      	ldr	r3, [pc, #352]	; (801295c <UG_Update+0x180>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f022 0201 	bic.w	r2, r2, #1
 8012802:	b2d2      	uxtb	r2, r2
 8012804:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8012808:	4b54      	ldr	r3, [pc, #336]	; (801295c <UG_Update+0x180>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	68da      	ldr	r2, [r3, #12]
 801280e:	4b53      	ldr	r3, [pc, #332]	; (801295c <UG_Update+0x180>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	429a      	cmp	r2, r3
 8012816:	d071      	beq.n	80128fc <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8012818:	4b50      	ldr	r3, [pc, #320]	; (801295c <UG_Update+0x180>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d06c      	beq.n	80128fc <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8012822:	4b4e      	ldr	r3, [pc, #312]	; (801295c <UG_Update+0x180>)
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	4b4d      	ldr	r3, [pc, #308]	; (801295c <UG_Update+0x180>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	6912      	ldr	r2, [r2, #16]
 801282c:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 801282e:	4b4b      	ldr	r3, [pc, #300]	; (801295c <UG_Update+0x180>)
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	4b4a      	ldr	r3, [pc, #296]	; (801295c <UG_Update+0x180>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	68d2      	ldr	r2, [r2, #12]
 8012838:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 801283a:	4b48      	ldr	r3, [pc, #288]	; (801295c <UG_Update+0x180>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	695b      	ldr	r3, [r3, #20]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d045      	beq.n	80128d0 <UG_Update+0xf4>
 8012844:	4b45      	ldr	r3, [pc, #276]	; (801295c <UG_Update+0x180>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	695b      	ldr	r3, [r3, #20]
 801284a:	7d9b      	ldrb	r3, [r3, #22]
 801284c:	f003 0302 	and.w	r3, r3, #2
 8012850:	2b00      	cmp	r3, #0
 8012852:	d03d      	beq.n	80128d0 <UG_Update+0xf4>
 8012854:	4b41      	ldr	r3, [pc, #260]	; (801295c <UG_Update+0x180>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	695b      	ldr	r3, [r3, #20]
 801285a:	7a1b      	ldrb	r3, [r3, #8]
 801285c:	f003 0308 	and.w	r3, r3, #8
 8012860:	2b00      	cmp	r3, #0
 8012862:	d035      	beq.n	80128d0 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8012864:	4b3d      	ldr	r3, [pc, #244]	; (801295c <UG_Update+0x180>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	695b      	ldr	r3, [r3, #20]
 801286a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801286e:	4b3b      	ldr	r3, [pc, #236]	; (801295c <UG_Update+0x180>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	691b      	ldr	r3, [r3, #16]
 8012874:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8012878:	429a      	cmp	r2, r3
 801287a:	d123      	bne.n	80128c4 <UG_Update+0xe8>
 801287c:	4b37      	ldr	r3, [pc, #220]	; (801295c <UG_Update+0x180>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	695b      	ldr	r3, [r3, #20]
 8012882:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012886:	4b35      	ldr	r3, [pc, #212]	; (801295c <UG_Update+0x180>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	691b      	ldr	r3, [r3, #16]
 801288c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8012890:	429a      	cmp	r2, r3
 8012892:	d117      	bne.n	80128c4 <UG_Update+0xe8>
 8012894:	4b31      	ldr	r3, [pc, #196]	; (801295c <UG_Update+0x180>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	695b      	ldr	r3, [r3, #20]
 801289a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801289e:	4b2f      	ldr	r3, [pc, #188]	; (801295c <UG_Update+0x180>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	691b      	ldr	r3, [r3, #16]
 80128a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d10b      	bne.n	80128c4 <UG_Update+0xe8>
 80128ac:	4b2b      	ldr	r3, [pc, #172]	; (801295c <UG_Update+0x180>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	695b      	ldr	r3, [r3, #20]
 80128b2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80128b6:	4b29      	ldr	r3, [pc, #164]	; (801295c <UG_Update+0x180>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d005      	beq.n	80128d0 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80128c4:	4b25      	ldr	r3, [pc, #148]	; (801295c <UG_Update+0x180>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	4618      	mov	r0, r3
 80128cc:	f000 f848 	bl	8012960 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80128d0:	4b22      	ldr	r3, [pc, #136]	; (801295c <UG_Update+0x180>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	7a1a      	ldrb	r2, [r3, #8]
 80128d8:	4b20      	ldr	r3, [pc, #128]	; (801295c <UG_Update+0x180>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	691b      	ldr	r3, [r3, #16]
 80128de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128e2:	b2d2      	uxtb	r2, r2
 80128e4:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80128e6:	4b1d      	ldr	r3, [pc, #116]	; (801295c <UG_Update+0x180>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	691b      	ldr	r3, [r3, #16]
 80128ec:	7a1a      	ldrb	r2, [r3, #8]
 80128ee:	4b1b      	ldr	r3, [pc, #108]	; (801295c <UG_Update+0x180>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80128f8:	b2d2      	uxtb	r2, r2
 80128fa:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80128fc:	4b17      	ldr	r3, [pc, #92]	; (801295c <UG_Update+0x180>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	691b      	ldr	r3, [r3, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d01b      	beq.n	801293e <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8012906:	4b15      	ldr	r3, [pc, #84]	; (801295c <UG_Update+0x180>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	691b      	ldr	r3, [r3, #16]
 801290c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	7a1b      	ldrb	r3, [r3, #8]
 8012912:	f003 0320 	and.w	r3, r3, #32
 8012916:	2b00      	cmp	r3, #0
 8012918:	d002      	beq.n	8012920 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f000 f8ca 	bl	8012ab4 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	7a1b      	ldrb	r3, [r3, #8]
 8012924:	f003 0308 	and.w	r3, r3, #8
 8012928:	2b00      	cmp	r3, #0
 801292a:	d008      	beq.n	801293e <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f7ff fb81 	bl	8012034 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7ff fc34 	bl	80121a0 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f7ff fc7b 	bl	8012234 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 801293e:	4b07      	ldr	r3, [pc, #28]	; (801295c <UG_Update+0x180>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	689b      	ldr	r3, [r3, #8]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d004      	beq.n	8012954 <UG_Update+0x178>
     gui->device->flush();
 801294a:	4b04      	ldr	r3, [pc, #16]	; (801295c <UG_Update+0x180>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	4798      	blx	r3
   }
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	20001ba0 	.word	0x20001ba0

08012960 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b08f      	sub	sp, #60	; 0x3c
 8012964:	af02      	add	r7, sp, #8
 8012966:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	f000 809a 	beq.w	8012aa4 <_UG_WindowDrawTitle+0x144>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	7a1b      	ldrb	r3, [r3, #8]
 8012974:	f003 0302 	and.w	r3, r3, #2
 8012978:	2b00      	cmp	r3, #0
 801297a:	f000 8093 	beq.w	8012aa4 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	89db      	ldrh	r3, [r3, #14]
 8012982:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	8a1b      	ldrh	r3, [r3, #16]
 8012988:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	8a5b      	ldrh	r3, [r3, #18]
 801298e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	8a9b      	ldrh	r3, [r3, #20]
 8012994:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7d9b      	ldrb	r3, [r3, #22]
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d00f      	beq.n	80129c2 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 80129a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129a4:	3303      	adds	r3, #3
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 80129aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129ac:	3303      	adds	r3, #3
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 80129b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129b4:	3b03      	subs	r3, #3
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 80129ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80129bc:	3b03      	subs	r3, #3
 80129be:	b29b      	uxth	r3, r3
 80129c0:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80129c2:	4b3b      	ldr	r3, [pc, #236]	; (8012ab0 <_UG_WindowDrawTitle+0x150>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	691b      	ldr	r3, [r3, #16]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d106      	bne.n	80129dc <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80129d2:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80129d8:	83bb      	strh	r3, [r7, #28]
 80129da:	e005      	b.n	80129e8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129e0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129e6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80129f2:	4413      	add	r3, r2
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	3b01      	subs	r3, #1
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	b21c      	sxth	r4, r3
 80129fc:	8bfb      	ldrh	r3, [r7, #30]
 80129fe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8012a02:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012a06:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012a0a:	9300      	str	r3, [sp, #0]
 8012a0c:	4623      	mov	r3, r4
 8012a0e:	f7fe fb03 	bl	8011018 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8012a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a20:	3303      	adds	r3, #3
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	b21b      	sxth	r3, r3
 8012a26:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8012a28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a2a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8012a2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a2e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a3a:	4413      	add	r3, r2
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	b21b      	sxth	r3, r3
 8012a44:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012a4c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8012a56:	b21b      	sxth	r3, r3
 8012a58:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8012a60:	b21b      	sxth	r3, r3
 8012a62:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8012a64:	f107 030c 	add.w	r3, r7, #12
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff fc2f 	bl	80122cc <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a78:	4413      	add	r3, r2
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	b219      	sxth	r1, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a88:	4413      	add	r3, r2
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	b21b      	sxth	r3, r3
 8012a8e:	f649 5413 	movw	r4, #40211	; 0x9d13
 8012a92:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8012a96:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012a9a:	9400      	str	r4, [sp, #0]
 8012a9c:	f7fe fc5c 	bl	8011358 <UG_DrawLine>
      return UG_RESULT_OK;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	e001      	b.n	8012aa8 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8012aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3734      	adds	r7, #52	; 0x34
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd90      	pop	{r4, r7, pc}
 8012ab0:	20001ba0 	.word	0x20001ba0

08012ab4 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8012ab4:	b590      	push	{r4, r7, lr}
 8012ab6:	b089      	sub	sp, #36	; 0x24
 8012ab8:	af02      	add	r7, sp, #8
 8012aba:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	89db      	ldrh	r3, [r3, #14]
 8012ac0:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	8a1b      	ldrh	r3, [r3, #16]
 8012ac6:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	8a5b      	ldrh	r3, [r3, #18]
 8012acc:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8a9b      	ldrh	r3, [r3, #20]
 8012ad2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	7a1b      	ldrb	r3, [r3, #8]
 8012ad8:	f023 0320 	bic.w	r3, r3, #32
 8012adc:	b2da      	uxtb	r2, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	7a1b      	ldrb	r3, [r3, #8]
 8012ae6:	f003 0308 	and.w	r3, r3, #8
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f000 8084 	beq.w	8012bf8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	7d9b      	ldrb	r3, [r3, #22]
 8012af4:	f003 0301 	and.w	r3, r3, #1
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d021      	beq.n	8012b40 <_UG_WindowUpdate+0x8c>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	7a1b      	ldrb	r3, [r3, #8]
 8012b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d11b      	bne.n	8012b40 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8012b08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b0c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012b10:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8012b14:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8012b18:	4c43      	ldr	r4, [pc, #268]	; (8012c28 <_UG_WindowUpdate+0x174>)
 8012b1a:	9400      	str	r4, [sp, #0]
 8012b1c:	f7ff fd1a 	bl	8012554 <_UG_DrawObjectFrame>
         xs+=3;
 8012b20:	8abb      	ldrh	r3, [r7, #20]
 8012b22:	3303      	adds	r3, #3
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8012b28:	8a7b      	ldrh	r3, [r7, #18]
 8012b2a:	3303      	adds	r3, #3
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8012b30:	8a3b      	ldrh	r3, [r7, #16]
 8012b32:	3b03      	subs	r3, #3
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8012b38:	89fb      	ldrh	r3, [r7, #14]
 8012b3a:	3b03      	subs	r3, #3
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	7d9b      	ldrb	r3, [r3, #22]
 8012b44:	f003 0302 	and.w	r3, r3, #2
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d01a      	beq.n	8012b82 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f7ff ff07 	bl	8012960 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	8a7b      	ldrh	r3, [r7, #18]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	3301      	adds	r3, #1
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	7a1b      	ldrb	r3, [r3, #8]
 8012b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d007      	beq.n	8012b82 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	7a1b      	ldrb	r3, [r3, #8]
 8012b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b7a:	b2da      	uxtb	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	721a      	strb	r2, [r3, #8]
            return;
 8012b80:	e04e      	b.n	8012c20 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8012b8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012b8e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8012b92:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	4623      	mov	r3, r4
 8012b9a:	f7fe fa3d 	bl	8011018 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	82fb      	strh	r3, [r7, #22]
 8012ba8:	e021      	b.n	8012bee <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	685a      	ldr	r2, [r3, #4]
 8012bae:	8afb      	ldrh	r3, [r7, #22]
 8012bb0:	015b      	lsls	r3, r3, #5
 8012bb2:	4413      	add	r3, r2
 8012bb4:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d112      	bne.n	8012be8 <_UG_WindowUpdate+0x134>
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	f003 0302 	and.w	r3, r3, #2
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00c      	beq.n	8012be8 <_UG_WindowUpdate+0x134>
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	f003 0308 	and.w	r3, r3, #8
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d006      	beq.n	8012be8 <_UG_WindowUpdate+0x134>
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012be2:	b2da      	uxtb	r2, r3
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8012be8:	8afb      	ldrh	r3, [r7, #22]
 8012bea:	3301      	adds	r3, #1
 8012bec:	82fb      	strh	r3, [r7, #22]
 8012bee:	8afa      	ldrh	r2, [r7, #22]
 8012bf0:	89bb      	ldrh	r3, [r7, #12]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d3d9      	bcc.n	8012baa <_UG_WindowUpdate+0xf6>
 8012bf6:	e013      	b.n	8012c20 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8012c10:	4b06      	ldr	r3, [pc, #24]	; (8012c2c <_UG_WindowUpdate+0x178>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	4623      	mov	r3, r4
 8012c1c:	f7fe f9fc 	bl	8011018 <UG_FillFrame>
   }
}
 8012c20:	371c      	adds	r7, #28
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd90      	pop	{r4, r7, pc}
 8012c26:	bf00      	nop
 8012c28:	0801b594 	.word	0x0801b594
 8012c2c:	20001ba0 	.word	0x20001ba0

08012c30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	460b      	mov	r3, r1
 8012c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012c3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012c40:	f002 f8fc 	bl	8014e3c <USBD_static_malloc>
 8012c44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d105      	bne.n	8012c58 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012c54:	2302      	movs	r3, #2
 8012c56:	e066      	b.n	8012d26 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7c1b      	ldrb	r3, [r3, #16]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d119      	bne.n	8012c9c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c6c:	2202      	movs	r2, #2
 8012c6e:	2181      	movs	r1, #129	; 0x81
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f001 ff8a 	bl	8014b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c80:	2202      	movs	r2, #2
 8012c82:	2101      	movs	r1, #1
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f001 ff80 	bl	8014b8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2210      	movs	r2, #16
 8012c96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012c9a:	e016      	b.n	8012cca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012c9c:	2340      	movs	r3, #64	; 0x40
 8012c9e:	2202      	movs	r2, #2
 8012ca0:	2181      	movs	r1, #129	; 0x81
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f001 ff71 	bl	8014b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2201      	movs	r2, #1
 8012cac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012cae:	2340      	movs	r3, #64	; 0x40
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	2101      	movs	r1, #1
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f001 ff68 	bl	8014b8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2210      	movs	r2, #16
 8012cc6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012cca:	2308      	movs	r3, #8
 8012ccc:	2203      	movs	r2, #3
 8012cce:	2182      	movs	r1, #130	; 0x82
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f001 ff5a 	bl	8014b8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2201      	movs	r2, #1
 8012cda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	7c1b      	ldrb	r3, [r3, #16]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d109      	bne.n	8012d14 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d0a:	2101      	movs	r1, #1
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f002 f82b 	bl	8014d68 <USBD_LL_PrepareReceive>
 8012d12:	e007      	b.n	8012d24 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012d1a:	2340      	movs	r3, #64	; 0x40
 8012d1c:	2101      	movs	r1, #1
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f002 f822 	bl	8014d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}

08012d2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
 8012d36:	460b      	mov	r3, r1
 8012d38:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012d3a:	2181      	movs	r1, #129	; 0x81
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f001 ff4a 	bl	8014bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2200      	movs	r2, #0
 8012d46:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012d48:	2101      	movs	r1, #1
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f001 ff43 	bl	8014bd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012d58:	2182      	movs	r1, #130	; 0x82
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f001 ff3b 	bl	8014bd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2200      	movs	r2, #0
 8012d64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00e      	beq.n	8012d98 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f002 f864 	bl	8014e58 <USBD_static_free>
    pdev->pClassData = NULL;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012d98:	2300      	movs	r3, #0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
	...

08012da4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012db4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012db6:	2300      	movs	r3, #0
 8012db8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d101      	bne.n	8012dcc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012dc8:	2303      	movs	r3, #3
 8012dca:	e0af      	b.n	8012f2c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d03f      	beq.n	8012e58 <USBD_CDC_Setup+0xb4>
 8012dd8:	2b20      	cmp	r3, #32
 8012dda:	f040 809f 	bne.w	8012f1c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	88db      	ldrh	r3, [r3, #6]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d02e      	beq.n	8012e44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	b25b      	sxtb	r3, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	da16      	bge.n	8012e1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	683a      	ldr	r2, [r7, #0]
 8012dfa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012dfc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012dfe:	683a      	ldr	r2, [r7, #0]
 8012e00:	88d2      	ldrh	r2, [r2, #6]
 8012e02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	88db      	ldrh	r3, [r3, #6]
 8012e08:	2b07      	cmp	r3, #7
 8012e0a:	bf28      	it	cs
 8012e0c:	2307      	movcs	r3, #7
 8012e0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	89fa      	ldrh	r2, [r7, #14]
 8012e14:	4619      	mov	r1, r3
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f001 facf 	bl	80143ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012e1c:	e085      	b.n	8012f2a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	785a      	ldrb	r2, [r3, #1]
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	88db      	ldrh	r3, [r3, #6]
 8012e2c:	b2da      	uxtb	r2, r3
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012e34:	6939      	ldr	r1, [r7, #16]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	88db      	ldrh	r3, [r3, #6]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f001 fae8 	bl	8014412 <USBD_CtlPrepareRx>
      break;
 8012e42:	e072      	b.n	8012f2a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	7850      	ldrb	r0, [r2, #1]
 8012e50:	2200      	movs	r2, #0
 8012e52:	6839      	ldr	r1, [r7, #0]
 8012e54:	4798      	blx	r3
      break;
 8012e56:	e068      	b.n	8012f2a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	785b      	ldrb	r3, [r3, #1]
 8012e5c:	2b0b      	cmp	r3, #11
 8012e5e:	d852      	bhi.n	8012f06 <USBD_CDC_Setup+0x162>
 8012e60:	a201      	add	r2, pc, #4	; (adr r2, 8012e68 <USBD_CDC_Setup+0xc4>)
 8012e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e66:	bf00      	nop
 8012e68:	08012e99 	.word	0x08012e99
 8012e6c:	08012f15 	.word	0x08012f15
 8012e70:	08012f07 	.word	0x08012f07
 8012e74:	08012f07 	.word	0x08012f07
 8012e78:	08012f07 	.word	0x08012f07
 8012e7c:	08012f07 	.word	0x08012f07
 8012e80:	08012f07 	.word	0x08012f07
 8012e84:	08012f07 	.word	0x08012f07
 8012e88:	08012f07 	.word	0x08012f07
 8012e8c:	08012f07 	.word	0x08012f07
 8012e90:	08012ec3 	.word	0x08012ec3
 8012e94:	08012eed 	.word	0x08012eed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	2b03      	cmp	r3, #3
 8012ea2:	d107      	bne.n	8012eb4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012ea4:	f107 030a 	add.w	r3, r7, #10
 8012ea8:	2202      	movs	r2, #2
 8012eaa:	4619      	mov	r1, r3
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f001 fa84 	bl	80143ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012eb2:	e032      	b.n	8012f1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f001 fa0e 	bl	80142d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012ebc:	2303      	movs	r3, #3
 8012ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8012ec0:	e02b      	b.n	8012f1a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b03      	cmp	r3, #3
 8012ecc:	d107      	bne.n	8012ede <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012ece:	f107 030d 	add.w	r3, r7, #13
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f001 fa6f 	bl	80143ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012edc:	e01d      	b.n	8012f1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012ede:	6839      	ldr	r1, [r7, #0]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f001 f9f9 	bl	80142d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012ee6:	2303      	movs	r3, #3
 8012ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8012eea:	e016      	b.n	8012f1a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	2b03      	cmp	r3, #3
 8012ef6:	d00f      	beq.n	8012f18 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f001 f9ec 	bl	80142d8 <USBD_CtlError>
            ret = USBD_FAIL;
 8012f00:	2303      	movs	r3, #3
 8012f02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012f04:	e008      	b.n	8012f18 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012f06:	6839      	ldr	r1, [r7, #0]
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f001 f9e5 	bl	80142d8 <USBD_CtlError>
          ret = USBD_FAIL;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	75fb      	strb	r3, [r7, #23]
          break;
 8012f12:	e002      	b.n	8012f1a <USBD_CDC_Setup+0x176>
          break;
 8012f14:	bf00      	nop
 8012f16:	e008      	b.n	8012f2a <USBD_CDC_Setup+0x186>
          break;
 8012f18:	bf00      	nop
      }
      break;
 8012f1a:	e006      	b.n	8012f2a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f001 f9da 	bl	80142d8 <USBD_CtlError>
      ret = USBD_FAIL;
 8012f24:	2303      	movs	r3, #3
 8012f26:	75fb      	strb	r3, [r7, #23]
      break;
 8012f28:	bf00      	nop
  }

  return (uint8_t)ret;
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3718      	adds	r7, #24
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d101      	bne.n	8012f56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012f52:	2303      	movs	r3, #3
 8012f54:	e04f      	b.n	8012ff6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012f5e:	78fa      	ldrb	r2, [r7, #3]
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	4613      	mov	r3, r2
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	440b      	add	r3, r1
 8012f6c:	3318      	adds	r3, #24
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d029      	beq.n	8012fc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012f74:	78fa      	ldrb	r2, [r7, #3]
 8012f76:	6879      	ldr	r1, [r7, #4]
 8012f78:	4613      	mov	r3, r2
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	4413      	add	r3, r2
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	440b      	add	r3, r1
 8012f82:	3318      	adds	r3, #24
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	78f9      	ldrb	r1, [r7, #3]
 8012f88:	68f8      	ldr	r0, [r7, #12]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	009b      	lsls	r3, r3, #2
 8012f8e:	440b      	add	r3, r1
 8012f90:	00db      	lsls	r3, r3, #3
 8012f92:	4403      	add	r3, r0
 8012f94:	3320      	adds	r3, #32
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8012f9c:	fb01 f303 	mul.w	r3, r1, r3
 8012fa0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d110      	bne.n	8012fc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012fa6:	78fa      	ldrb	r2, [r7, #3]
 8012fa8:	6879      	ldr	r1, [r7, #4]
 8012faa:	4613      	mov	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	440b      	add	r3, r1
 8012fb4:	3318      	adds	r3, #24
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012fba:	78f9      	ldrb	r1, [r7, #3]
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f001 feb0 	bl	8014d26 <USBD_LL_Transmit>
 8012fc6:	e015      	b.n	8012ff4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012fd6:	691b      	ldr	r3, [r3, #16]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00b      	beq.n	8012ff4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012fe2:	691b      	ldr	r3, [r3, #16]
 8012fe4:	68ba      	ldr	r2, [r7, #8]
 8012fe6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012fea:	68ba      	ldr	r2, [r7, #8]
 8012fec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012ff0:	78fa      	ldrb	r2, [r7, #3]
 8012ff2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b084      	sub	sp, #16
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	460b      	mov	r3, r1
 8013008:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013010:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013018:	2b00      	cmp	r3, #0
 801301a:	d101      	bne.n	8013020 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801301c:	2303      	movs	r3, #3
 801301e:	e015      	b.n	801304c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	4619      	mov	r1, r3
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f001 fec0 	bl	8014daa <USBD_LL_GetRxDataSize>
 801302a:	4602      	mov	r2, r0
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013038:	68db      	ldr	r3, [r3, #12]
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013040:	68fa      	ldr	r2, [r7, #12]
 8013042:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013046:	4611      	mov	r1, r2
 8013048:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801304a:	2300      	movs	r3, #0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013062:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d101      	bne.n	801306e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801306a:	2303      	movs	r3, #3
 801306c:	e01b      	b.n	80130a6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d015      	beq.n	80130a4 <USBD_CDC_EP0_RxReady+0x50>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801307e:	2bff      	cmp	r3, #255	; 0xff
 8013080:	d010      	beq.n	80130a4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013090:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013098:	b292      	uxth	r2, r2
 801309a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	22ff      	movs	r2, #255	; 0xff
 80130a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80130a4:	2300      	movs	r3, #0
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3710      	adds	r7, #16
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
	...

080130b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2243      	movs	r2, #67	; 0x43
 80130bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80130be:	4b03      	ldr	r3, [pc, #12]	; (80130cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	370c      	adds	r7, #12
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr
 80130cc:	2000022c 	.word	0x2000022c

080130d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2243      	movs	r2, #67	; 0x43
 80130dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80130de:	4b03      	ldr	r3, [pc, #12]	; (80130ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr
 80130ec:	200001e8 	.word	0x200001e8

080130f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2243      	movs	r2, #67	; 0x43
 80130fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80130fe:	4b03      	ldr	r3, [pc, #12]	; (801310c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013100:	4618      	mov	r0, r3
 8013102:	370c      	adds	r7, #12
 8013104:	46bd      	mov	sp, r7
 8013106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310a:	4770      	bx	lr
 801310c:	20000270 	.word	0x20000270

08013110 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	220a      	movs	r2, #10
 801311c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801311e:	4b03      	ldr	r3, [pc, #12]	; (801312c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013120:	4618      	mov	r0, r3
 8013122:	370c      	adds	r7, #12
 8013124:	46bd      	mov	sp, r7
 8013126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312a:	4770      	bx	lr
 801312c:	200001a4 	.word	0x200001a4

08013130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013130:	b480      	push	{r7}
 8013132:	b083      	sub	sp, #12
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d101      	bne.n	8013144 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013140:	2303      	movs	r3, #3
 8013142:	e004      	b.n	801314e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	683a      	ldr	r2, [r7, #0]
 8013148:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	370c      	adds	r7, #12
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801315a:	b480      	push	{r7}
 801315c:	b087      	sub	sp, #28
 801315e:	af00      	add	r7, sp, #0
 8013160:	60f8      	str	r0, [r7, #12]
 8013162:	60b9      	str	r1, [r7, #8]
 8013164:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801316c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013174:	2303      	movs	r3, #3
 8013176:	e008      	b.n	801318a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	68ba      	ldr	r2, [r7, #8]
 801317c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013188:	2300      	movs	r3, #0
}
 801318a:	4618      	mov	r0, r3
 801318c:	371c      	adds	r7, #28
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr

08013196 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013196:	b480      	push	{r7}
 8013198:	b085      	sub	sp, #20
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d101      	bne.n	80131b2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80131ae:	2303      	movs	r3, #3
 80131b0:	e004      	b.n	80131bc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	683a      	ldr	r2, [r7, #0]
 80131b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3714      	adds	r7, #20
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80131d8:	2301      	movs	r3, #1
 80131da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80131e6:	2303      	movs	r3, #3
 80131e8:	e01a      	b.n	8013220 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d114      	bne.n	801321e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	2201      	movs	r2, #1
 80131f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013212:	2181      	movs	r1, #129	; 0x81
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f001 fd86 	bl	8014d26 <USBD_LL_Transmit>

    ret = USBD_OK;
 801321a:	2300      	movs	r3, #0
 801321c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013236:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013242:	2303      	movs	r3, #3
 8013244:	e016      	b.n	8013274 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	7c1b      	ldrb	r3, [r3, #16]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d109      	bne.n	8013262 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013258:	2101      	movs	r1, #1
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f001 fd84 	bl	8014d68 <USBD_LL_PrepareReceive>
 8013260:	e007      	b.n	8013272 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013268:	2340      	movs	r3, #64	; 0x40
 801326a:	2101      	movs	r1, #1
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f001 fd7b 	bl	8014d68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013272:	2300      	movs	r3, #0
}
 8013274:	4618      	mov	r0, r3
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	60b9      	str	r1, [r7, #8]
 8013286:	4613      	mov	r3, r2
 8013288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d101      	bne.n	8013294 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013290:	2303      	movs	r3, #3
 8013292:	e01f      	b.n	80132d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2200      	movs	r2, #0
 80132a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d003      	beq.n	80132ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	68ba      	ldr	r2, [r7, #8]
 80132b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2201      	movs	r2, #1
 80132be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	79fa      	ldrb	r2, [r7, #7]
 80132c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f001 fbe3 	bl	8014a94 <USBD_LL_Init>
 80132ce:	4603      	mov	r3, r0
 80132d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80132d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3718      	adds	r7, #24
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80132e6:	2300      	movs	r3, #0
 80132e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80132f0:	2303      	movs	r3, #3
 80132f2:	e016      	b.n	8013322 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	683a      	ldr	r2, [r7, #0]
 80132f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00b      	beq.n	8013320 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013310:	f107 020e 	add.w	r2, r7, #14
 8013314:	4610      	mov	r0, r2
 8013316:	4798      	blx	r3
 8013318:	4602      	mov	r2, r0
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013320:	2300      	movs	r3, #0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}

0801332a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801332a:	b580      	push	{r7, lr}
 801332c:	b082      	sub	sp, #8
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f001 fc0e 	bl	8014b54 <USBD_LL_Start>
 8013338:	4603      	mov	r3, r0
}
 801333a:	4618      	mov	r0, r3
 801333c:	3708      	adds	r7, #8
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}

08013342 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013342:	b480      	push	{r7}
 8013344:	b083      	sub	sp, #12
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013364:	2303      	movs	r3, #3
 8013366:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801336e:	2b00      	cmp	r3, #0
 8013370:	d009      	beq.n	8013386 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	78fa      	ldrb	r2, [r7, #3]
 801337c:	4611      	mov	r1, r2
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	4798      	blx	r3
 8013382:	4603      	mov	r3, r0
 8013384:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013386:	7bfb      	ldrb	r3, [r7, #15]
}
 8013388:	4618      	mov	r0, r3
 801338a:	3710      	adds	r7, #16
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}

08013390 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	460b      	mov	r3, r1
 801339a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d007      	beq.n	80133b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	78fa      	ldrb	r2, [r7, #3]
 80133b0:	4611      	mov	r1, r2
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	4798      	blx	r3
  }

  return USBD_OK;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	4618      	mov	r0, r3
 80133d4:	f000 ff46 	bl	8014264 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2201      	movs	r2, #1
 80133dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80133e6:	461a      	mov	r2, r3
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80133f4:	f003 031f 	and.w	r3, r3, #31
 80133f8:	2b02      	cmp	r3, #2
 80133fa:	d01a      	beq.n	8013432 <USBD_LL_SetupStage+0x72>
 80133fc:	2b02      	cmp	r3, #2
 80133fe:	d822      	bhi.n	8013446 <USBD_LL_SetupStage+0x86>
 8013400:	2b00      	cmp	r3, #0
 8013402:	d002      	beq.n	801340a <USBD_LL_SetupStage+0x4a>
 8013404:	2b01      	cmp	r3, #1
 8013406:	d00a      	beq.n	801341e <USBD_LL_SetupStage+0x5e>
 8013408:	e01d      	b.n	8013446 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013410:	4619      	mov	r1, r3
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 f9ee 	bl	80137f4 <USBD_StdDevReq>
 8013418:	4603      	mov	r3, r0
 801341a:	73fb      	strb	r3, [r7, #15]
      break;
 801341c:	e020      	b.n	8013460 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013424:	4619      	mov	r1, r3
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 fa52 	bl	80138d0 <USBD_StdItfReq>
 801342c:	4603      	mov	r3, r0
 801342e:	73fb      	strb	r3, [r7, #15]
      break;
 8013430:	e016      	b.n	8013460 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013438:	4619      	mov	r1, r3
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f000 fa91 	bl	8013962 <USBD_StdEPReq>
 8013440:	4603      	mov	r3, r0
 8013442:	73fb      	strb	r3, [r7, #15]
      break;
 8013444:	e00c      	b.n	8013460 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801344c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013450:	b2db      	uxtb	r3, r3
 8013452:	4619      	mov	r1, r3
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f001 fbdd 	bl	8014c14 <USBD_LL_StallEP>
 801345a:	4603      	mov	r3, r0
 801345c:	73fb      	strb	r3, [r7, #15]
      break;
 801345e:	bf00      	nop
  }

  return ret;
 8013460:	7bfb      	ldrb	r3, [r7, #15]
}
 8013462:	4618      	mov	r0, r3
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}

0801346a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801346a:	b580      	push	{r7, lr}
 801346c:	b086      	sub	sp, #24
 801346e:	af00      	add	r7, sp, #0
 8013470:	60f8      	str	r0, [r7, #12]
 8013472:	460b      	mov	r3, r1
 8013474:	607a      	str	r2, [r7, #4]
 8013476:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013478:	7afb      	ldrb	r3, [r7, #11]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d138      	bne.n	80134f0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801348c:	2b03      	cmp	r3, #3
 801348e:	d14a      	bne.n	8013526 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	689a      	ldr	r2, [r3, #8]
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	429a      	cmp	r2, r3
 801349a:	d913      	bls.n	80134c4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	689a      	ldr	r2, [r3, #8]
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	1ad2      	subs	r2, r2, r3
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	68da      	ldr	r2, [r3, #12]
 80134ae:	693b      	ldr	r3, [r7, #16]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	4293      	cmp	r3, r2
 80134b4:	bf28      	it	cs
 80134b6:	4613      	movcs	r3, r2
 80134b8:	461a      	mov	r2, r3
 80134ba:	6879      	ldr	r1, [r7, #4]
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 ffc5 	bl	801444c <USBD_CtlContinueRx>
 80134c2:	e030      	b.n	8013526 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	2b03      	cmp	r3, #3
 80134ce:	d10b      	bne.n	80134e8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d005      	beq.n	80134e8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	68f8      	ldr	r0, [r7, #12]
 80134e6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f000 ffc0 	bl	801446e <USBD_CtlSendStatus>
 80134ee:	e01a      	b.n	8013526 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d114      	bne.n	8013526 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013502:	699b      	ldr	r3, [r3, #24]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00e      	beq.n	8013526 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	7afa      	ldrb	r2, [r7, #11]
 8013512:	4611      	mov	r1, r2
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	4798      	blx	r3
 8013518:	4603      	mov	r3, r0
 801351a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801351c:	7dfb      	ldrb	r3, [r7, #23]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	e000      	b.n	8013528 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013526:	2300      	movs	r3, #0
}
 8013528:	4618      	mov	r0, r3
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	460b      	mov	r3, r1
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801353e:	7afb      	ldrb	r3, [r7, #11]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d16b      	bne.n	801361c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	3314      	adds	r3, #20
 8013548:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013550:	2b02      	cmp	r3, #2
 8013552:	d156      	bne.n	8013602 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	689a      	ldr	r2, [r3, #8]
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	429a      	cmp	r2, r3
 801355e:	d914      	bls.n	801358a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013560:	693b      	ldr	r3, [r7, #16]
 8013562:	689a      	ldr	r2, [r3, #8]
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	68db      	ldr	r3, [r3, #12]
 8013568:	1ad2      	subs	r2, r2, r3
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	461a      	mov	r2, r3
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	68f8      	ldr	r0, [r7, #12]
 8013578:	f000 ff3a 	bl	80143f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801357c:	2300      	movs	r3, #0
 801357e:	2200      	movs	r2, #0
 8013580:	2100      	movs	r1, #0
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f001 fbf0 	bl	8014d68 <USBD_LL_PrepareReceive>
 8013588:	e03b      	b.n	8013602 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	68da      	ldr	r2, [r3, #12]
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	689b      	ldr	r3, [r3, #8]
 8013592:	429a      	cmp	r2, r3
 8013594:	d11c      	bne.n	80135d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	685a      	ldr	r2, [r3, #4]
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801359e:	429a      	cmp	r2, r3
 80135a0:	d316      	bcc.n	80135d0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	685a      	ldr	r2, [r3, #4]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d20f      	bcs.n	80135d0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80135b0:	2200      	movs	r2, #0
 80135b2:	2100      	movs	r1, #0
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f000 ff1b 	bl	80143f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2200      	movs	r2, #0
 80135be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80135c2:	2300      	movs	r3, #0
 80135c4:	2200      	movs	r2, #0
 80135c6:	2100      	movs	r1, #0
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f001 fbcd 	bl	8014d68 <USBD_LL_PrepareReceive>
 80135ce:	e018      	b.n	8013602 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80135d6:	b2db      	uxtb	r3, r3
 80135d8:	2b03      	cmp	r3, #3
 80135da:	d10b      	bne.n	80135f4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135e2:	68db      	ldr	r3, [r3, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d005      	beq.n	80135f4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80135f4:	2180      	movs	r1, #128	; 0x80
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f001 fb0c 	bl	8014c14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f000 ff49 	bl	8014494 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013608:	2b01      	cmp	r3, #1
 801360a:	d122      	bne.n	8013652 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801360c:	68f8      	ldr	r0, [r7, #12]
 801360e:	f7ff fe98 	bl	8013342 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2200      	movs	r2, #0
 8013616:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801361a:	e01a      	b.n	8013652 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013622:	b2db      	uxtb	r3, r3
 8013624:	2b03      	cmp	r3, #3
 8013626:	d114      	bne.n	8013652 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801362e:	695b      	ldr	r3, [r3, #20]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d00e      	beq.n	8013652 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801363a:	695b      	ldr	r3, [r3, #20]
 801363c:	7afa      	ldrb	r2, [r7, #11]
 801363e:	4611      	mov	r1, r2
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	4798      	blx	r3
 8013644:	4603      	mov	r3, r0
 8013646:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013648:	7dfb      	ldrb	r3, [r7, #23]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801364e:	7dfb      	ldrb	r3, [r7, #23]
 8013650:	e000      	b.n	8013654 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013652:	2300      	movs	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	3718      	adds	r7, #24
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2201      	movs	r2, #1
 8013668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2200      	movs	r2, #0
 8013670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2200      	movs	r2, #0
 801367e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013688:	2b00      	cmp	r3, #0
 801368a:	d101      	bne.n	8013690 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801368c:	2303      	movs	r3, #3
 801368e:	e02f      	b.n	80136f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013696:	2b00      	cmp	r3, #0
 8013698:	d00f      	beq.n	80136ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d009      	beq.n	80136ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	6852      	ldr	r2, [r2, #4]
 80136b2:	b2d2      	uxtb	r2, r2
 80136b4:	4611      	mov	r1, r2
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136ba:	2340      	movs	r3, #64	; 0x40
 80136bc:	2200      	movs	r2, #0
 80136be:	2100      	movs	r1, #0
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f001 fa62 	bl	8014b8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2201      	movs	r2, #1
 80136ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2240      	movs	r2, #64	; 0x40
 80136d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80136d6:	2340      	movs	r3, #64	; 0x40
 80136d8:	2200      	movs	r2, #0
 80136da:	2180      	movs	r1, #128	; 0x80
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f001 fa54 	bl	8014b8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2201      	movs	r2, #1
 80136e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2240      	movs	r2, #64	; 0x40
 80136ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	460b      	mov	r3, r1
 8013702:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	78fa      	ldrb	r2, [r7, #3]
 8013708:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801370a:	2300      	movs	r3, #0
}
 801370c:	4618      	mov	r0, r3
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013726:	b2da      	uxtb	r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2204      	movs	r2, #4
 8013732:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013736:	2300      	movs	r3, #0
}
 8013738:	4618      	mov	r0, r3
 801373a:	370c      	adds	r7, #12
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr

08013744 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b04      	cmp	r3, #4
 8013756:	d106      	bne.n	8013766 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801375e:	b2da      	uxtb	r2, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013766:	2300      	movs	r3, #0
}
 8013768:	4618      	mov	r0, r3
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr

08013774 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013786:	2303      	movs	r3, #3
 8013788:	e012      	b.n	80137b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b03      	cmp	r3, #3
 8013794:	d10b      	bne.n	80137ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801379c:	69db      	ldr	r3, [r3, #28]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d005      	beq.n	80137ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80137a8:	69db      	ldr	r3, [r3, #28]
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80137ae:	2300      	movs	r3, #0
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b087      	sub	sp, #28
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	781b      	ldrb	r3, [r3, #0]
 80137c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	3301      	adds	r3, #1
 80137ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80137d6:	8a3b      	ldrh	r3, [r7, #16]
 80137d8:	021b      	lsls	r3, r3, #8
 80137da:	b21a      	sxth	r2, r3
 80137dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80137e0:	4313      	orrs	r3, r2
 80137e2:	b21b      	sxth	r3, r3
 80137e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80137e6:	89fb      	ldrh	r3, [r7, #14]
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	371c      	adds	r7, #28
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr

080137f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b084      	sub	sp, #16
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80137fe:	2300      	movs	r3, #0
 8013800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	781b      	ldrb	r3, [r3, #0]
 8013806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801380a:	2b40      	cmp	r3, #64	; 0x40
 801380c:	d005      	beq.n	801381a <USBD_StdDevReq+0x26>
 801380e:	2b40      	cmp	r3, #64	; 0x40
 8013810:	d853      	bhi.n	80138ba <USBD_StdDevReq+0xc6>
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00b      	beq.n	801382e <USBD_StdDevReq+0x3a>
 8013816:	2b20      	cmp	r3, #32
 8013818:	d14f      	bne.n	80138ba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013820:	689b      	ldr	r3, [r3, #8]
 8013822:	6839      	ldr	r1, [r7, #0]
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	4798      	blx	r3
 8013828:	4603      	mov	r3, r0
 801382a:	73fb      	strb	r3, [r7, #15]
      break;
 801382c:	e04a      	b.n	80138c4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	785b      	ldrb	r3, [r3, #1]
 8013832:	2b09      	cmp	r3, #9
 8013834:	d83b      	bhi.n	80138ae <USBD_StdDevReq+0xba>
 8013836:	a201      	add	r2, pc, #4	; (adr r2, 801383c <USBD_StdDevReq+0x48>)
 8013838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801383c:	08013891 	.word	0x08013891
 8013840:	080138a5 	.word	0x080138a5
 8013844:	080138af 	.word	0x080138af
 8013848:	0801389b 	.word	0x0801389b
 801384c:	080138af 	.word	0x080138af
 8013850:	0801386f 	.word	0x0801386f
 8013854:	08013865 	.word	0x08013865
 8013858:	080138af 	.word	0x080138af
 801385c:	08013887 	.word	0x08013887
 8013860:	08013879 	.word	0x08013879
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013864:	6839      	ldr	r1, [r7, #0]
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f000 f9de 	bl	8013c28 <USBD_GetDescriptor>
          break;
 801386c:	e024      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 fb6d 	bl	8013f50 <USBD_SetAddress>
          break;
 8013876:	e01f      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013878:	6839      	ldr	r1, [r7, #0]
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 fbac 	bl	8013fd8 <USBD_SetConfig>
 8013880:	4603      	mov	r3, r0
 8013882:	73fb      	strb	r3, [r7, #15]
          break;
 8013884:	e018      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013886:	6839      	ldr	r1, [r7, #0]
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f000 fc4b 	bl	8014124 <USBD_GetConfig>
          break;
 801388e:	e013      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 fc7c 	bl	8014190 <USBD_GetStatus>
          break;
 8013898:	e00e      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 fcab 	bl	80141f8 <USBD_SetFeature>
          break;
 80138a2:	e009      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80138a4:	6839      	ldr	r1, [r7, #0]
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f000 fcba 	bl	8014220 <USBD_ClrFeature>
          break;
 80138ac:	e004      	b.n	80138b8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f000 fd11 	bl	80142d8 <USBD_CtlError>
          break;
 80138b6:	bf00      	nop
      }
      break;
 80138b8:	e004      	b.n	80138c4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80138ba:	6839      	ldr	r1, [r7, #0]
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 fd0b 	bl	80142d8 <USBD_CtlError>
      break;
 80138c2:	bf00      	nop
  }

  return ret;
 80138c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3710      	adds	r7, #16
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	bf00      	nop

080138d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80138da:	2300      	movs	r3, #0
 80138dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138e6:	2b40      	cmp	r3, #64	; 0x40
 80138e8:	d005      	beq.n	80138f6 <USBD_StdItfReq+0x26>
 80138ea:	2b40      	cmp	r3, #64	; 0x40
 80138ec:	d82f      	bhi.n	801394e <USBD_StdItfReq+0x7e>
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <USBD_StdItfReq+0x26>
 80138f2:	2b20      	cmp	r3, #32
 80138f4:	d12b      	bne.n	801394e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	3b01      	subs	r3, #1
 8013900:	2b02      	cmp	r3, #2
 8013902:	d81d      	bhi.n	8013940 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	889b      	ldrh	r3, [r3, #4]
 8013908:	b2db      	uxtb	r3, r3
 801390a:	2b01      	cmp	r3, #1
 801390c:	d813      	bhi.n	8013936 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	4798      	blx	r3
 801391c:	4603      	mov	r3, r0
 801391e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	88db      	ldrh	r3, [r3, #6]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d110      	bne.n	801394a <USBD_StdItfReq+0x7a>
 8013928:	7bfb      	ldrb	r3, [r7, #15]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d10d      	bne.n	801394a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f000 fd9d 	bl	801446e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013934:	e009      	b.n	801394a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8013936:	6839      	ldr	r1, [r7, #0]
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f000 fccd 	bl	80142d8 <USBD_CtlError>
          break;
 801393e:	e004      	b.n	801394a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013940:	6839      	ldr	r1, [r7, #0]
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 fcc8 	bl	80142d8 <USBD_CtlError>
          break;
 8013948:	e000      	b.n	801394c <USBD_StdItfReq+0x7c>
          break;
 801394a:	bf00      	nop
      }
      break;
 801394c:	e004      	b.n	8013958 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f000 fcc1 	bl	80142d8 <USBD_CtlError>
      break;
 8013956:	bf00      	nop
  }

  return ret;
 8013958:	7bfb      	ldrb	r3, [r7, #15]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3710      	adds	r7, #16
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b084      	sub	sp, #16
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
 801396a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	889b      	ldrh	r3, [r3, #4]
 8013974:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801397e:	2b40      	cmp	r3, #64	; 0x40
 8013980:	d007      	beq.n	8013992 <USBD_StdEPReq+0x30>
 8013982:	2b40      	cmp	r3, #64	; 0x40
 8013984:	f200 8145 	bhi.w	8013c12 <USBD_StdEPReq+0x2b0>
 8013988:	2b00      	cmp	r3, #0
 801398a:	d00c      	beq.n	80139a6 <USBD_StdEPReq+0x44>
 801398c:	2b20      	cmp	r3, #32
 801398e:	f040 8140 	bne.w	8013c12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	6839      	ldr	r1, [r7, #0]
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	4798      	blx	r3
 80139a0:	4603      	mov	r3, r0
 80139a2:	73fb      	strb	r3, [r7, #15]
      break;
 80139a4:	e13a      	b.n	8013c1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	785b      	ldrb	r3, [r3, #1]
 80139aa:	2b03      	cmp	r3, #3
 80139ac:	d007      	beq.n	80139be <USBD_StdEPReq+0x5c>
 80139ae:	2b03      	cmp	r3, #3
 80139b0:	f300 8129 	bgt.w	8013c06 <USBD_StdEPReq+0x2a4>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d07f      	beq.n	8013ab8 <USBD_StdEPReq+0x156>
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d03c      	beq.n	8013a36 <USBD_StdEPReq+0xd4>
 80139bc:	e123      	b.n	8013c06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b02      	cmp	r3, #2
 80139c8:	d002      	beq.n	80139d0 <USBD_StdEPReq+0x6e>
 80139ca:	2b03      	cmp	r3, #3
 80139cc:	d016      	beq.n	80139fc <USBD_StdEPReq+0x9a>
 80139ce:	e02c      	b.n	8013a2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139d0:	7bbb      	ldrb	r3, [r7, #14]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00d      	beq.n	80139f2 <USBD_StdEPReq+0x90>
 80139d6:	7bbb      	ldrb	r3, [r7, #14]
 80139d8:	2b80      	cmp	r3, #128	; 0x80
 80139da:	d00a      	beq.n	80139f2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80139dc:	7bbb      	ldrb	r3, [r7, #14]
 80139de:	4619      	mov	r1, r3
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f001 f917 	bl	8014c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80139e6:	2180      	movs	r1, #128	; 0x80
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f001 f913 	bl	8014c14 <USBD_LL_StallEP>
 80139ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80139f0:	e020      	b.n	8013a34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80139f2:	6839      	ldr	r1, [r7, #0]
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f000 fc6f 	bl	80142d8 <USBD_CtlError>
              break;
 80139fa:	e01b      	b.n	8013a34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	885b      	ldrh	r3, [r3, #2]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10e      	bne.n	8013a22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013a04:	7bbb      	ldrb	r3, [r7, #14]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00b      	beq.n	8013a22 <USBD_StdEPReq+0xc0>
 8013a0a:	7bbb      	ldrb	r3, [r7, #14]
 8013a0c:	2b80      	cmp	r3, #128	; 0x80
 8013a0e:	d008      	beq.n	8013a22 <USBD_StdEPReq+0xc0>
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	88db      	ldrh	r3, [r3, #6]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d104      	bne.n	8013a22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a18:	7bbb      	ldrb	r3, [r7, #14]
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f001 f8f9 	bl	8014c14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f000 fd23 	bl	801446e <USBD_CtlSendStatus>

              break;
 8013a28:	e004      	b.n	8013a34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013a2a:	6839      	ldr	r1, [r7, #0]
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 fc53 	bl	80142d8 <USBD_CtlError>
              break;
 8013a32:	bf00      	nop
          }
          break;
 8013a34:	e0ec      	b.n	8013c10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d002      	beq.n	8013a48 <USBD_StdEPReq+0xe6>
 8013a42:	2b03      	cmp	r3, #3
 8013a44:	d016      	beq.n	8013a74 <USBD_StdEPReq+0x112>
 8013a46:	e030      	b.n	8013aaa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a48:	7bbb      	ldrb	r3, [r7, #14]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d00d      	beq.n	8013a6a <USBD_StdEPReq+0x108>
 8013a4e:	7bbb      	ldrb	r3, [r7, #14]
 8013a50:	2b80      	cmp	r3, #128	; 0x80
 8013a52:	d00a      	beq.n	8013a6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a54:	7bbb      	ldrb	r3, [r7, #14]
 8013a56:	4619      	mov	r1, r3
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f001 f8db 	bl	8014c14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a5e:	2180      	movs	r1, #128	; 0x80
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f001 f8d7 	bl	8014c14 <USBD_LL_StallEP>
 8013a66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a68:	e025      	b.n	8013ab6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013a6a:	6839      	ldr	r1, [r7, #0]
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f000 fc33 	bl	80142d8 <USBD_CtlError>
              break;
 8013a72:	e020      	b.n	8013ab6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	885b      	ldrh	r3, [r3, #2]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d11b      	bne.n	8013ab4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013a7c:	7bbb      	ldrb	r3, [r7, #14]
 8013a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d004      	beq.n	8013a90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013a86:	7bbb      	ldrb	r3, [r7, #14]
 8013a88:	4619      	mov	r1, r3
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f001 f8e1 	bl	8014c52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f000 fcec 	bl	801446e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a9c:	689b      	ldr	r3, [r3, #8]
 8013a9e:	6839      	ldr	r1, [r7, #0]
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	4798      	blx	r3
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013aa8:	e004      	b.n	8013ab4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013aaa:	6839      	ldr	r1, [r7, #0]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 fc13 	bl	80142d8 <USBD_CtlError>
              break;
 8013ab2:	e000      	b.n	8013ab6 <USBD_StdEPReq+0x154>
              break;
 8013ab4:	bf00      	nop
          }
          break;
 8013ab6:	e0ab      	b.n	8013c10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	d002      	beq.n	8013aca <USBD_StdEPReq+0x168>
 8013ac4:	2b03      	cmp	r3, #3
 8013ac6:	d032      	beq.n	8013b2e <USBD_StdEPReq+0x1cc>
 8013ac8:	e097      	b.n	8013bfa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013aca:	7bbb      	ldrb	r3, [r7, #14]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d007      	beq.n	8013ae0 <USBD_StdEPReq+0x17e>
 8013ad0:	7bbb      	ldrb	r3, [r7, #14]
 8013ad2:	2b80      	cmp	r3, #128	; 0x80
 8013ad4:	d004      	beq.n	8013ae0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 fbfd 	bl	80142d8 <USBD_CtlError>
                break;
 8013ade:	e091      	b.n	8013c04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	da0b      	bge.n	8013b00 <USBD_StdEPReq+0x19e>
 8013ae8:	7bbb      	ldrb	r3, [r7, #14]
 8013aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013aee:	4613      	mov	r3, r2
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	4413      	add	r3, r2
 8013af4:	009b      	lsls	r3, r3, #2
 8013af6:	3310      	adds	r3, #16
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	4413      	add	r3, r2
 8013afc:	3304      	adds	r3, #4
 8013afe:	e00b      	b.n	8013b18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b00:	7bbb      	ldrb	r3, [r7, #14]
 8013b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b06:	4613      	mov	r3, r2
 8013b08:	009b      	lsls	r3, r3, #2
 8013b0a:	4413      	add	r3, r2
 8013b0c:	009b      	lsls	r3, r3, #2
 8013b0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	4413      	add	r3, r2
 8013b16:	3304      	adds	r3, #4
 8013b18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2202      	movs	r2, #2
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 fc47 	bl	80143ba <USBD_CtlSendData>
              break;
 8013b2c:	e06a      	b.n	8013c04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	da11      	bge.n	8013b5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013b36:	7bbb      	ldrb	r3, [r7, #14]
 8013b38:	f003 020f 	and.w	r2, r3, #15
 8013b3c:	6879      	ldr	r1, [r7, #4]
 8013b3e:	4613      	mov	r3, r2
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	4413      	add	r3, r2
 8013b44:	009b      	lsls	r3, r3, #2
 8013b46:	440b      	add	r3, r1
 8013b48:	3324      	adds	r3, #36	; 0x24
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d117      	bne.n	8013b80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013b50:	6839      	ldr	r1, [r7, #0]
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 fbc0 	bl	80142d8 <USBD_CtlError>
                  break;
 8013b58:	e054      	b.n	8013c04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013b5a:	7bbb      	ldrb	r3, [r7, #14]
 8013b5c:	f003 020f 	and.w	r2, r3, #15
 8013b60:	6879      	ldr	r1, [r7, #4]
 8013b62:	4613      	mov	r3, r2
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	4413      	add	r3, r2
 8013b68:	009b      	lsls	r3, r3, #2
 8013b6a:	440b      	add	r3, r1
 8013b6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013b70:	881b      	ldrh	r3, [r3, #0]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d104      	bne.n	8013b80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013b76:	6839      	ldr	r1, [r7, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 fbad 	bl	80142d8 <USBD_CtlError>
                  break;
 8013b7e:	e041      	b.n	8013c04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	da0b      	bge.n	8013ba0 <USBD_StdEPReq+0x23e>
 8013b88:	7bbb      	ldrb	r3, [r7, #14]
 8013b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b8e:	4613      	mov	r3, r2
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	4413      	add	r3, r2
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	3310      	adds	r3, #16
 8013b98:	687a      	ldr	r2, [r7, #4]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	3304      	adds	r3, #4
 8013b9e:	e00b      	b.n	8013bb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013ba0:	7bbb      	ldrb	r3, [r7, #14]
 8013ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ba6:	4613      	mov	r3, r2
 8013ba8:	009b      	lsls	r3, r3, #2
 8013baa:	4413      	add	r3, r2
 8013bac:	009b      	lsls	r3, r3, #2
 8013bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	3304      	adds	r3, #4
 8013bb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013bba:	7bbb      	ldrb	r3, [r7, #14]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d002      	beq.n	8013bc6 <USBD_StdEPReq+0x264>
 8013bc0:	7bbb      	ldrb	r3, [r7, #14]
 8013bc2:	2b80      	cmp	r3, #128	; 0x80
 8013bc4:	d103      	bne.n	8013bce <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	601a      	str	r2, [r3, #0]
 8013bcc:	e00e      	b.n	8013bec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013bce:	7bbb      	ldrb	r3, [r7, #14]
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f001 f85c 	bl	8014c90 <USBD_LL_IsStallEP>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d003      	beq.n	8013be6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	2201      	movs	r2, #1
 8013be2:	601a      	str	r2, [r3, #0]
 8013be4:	e002      	b.n	8013bec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	2200      	movs	r2, #0
 8013bea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	2202      	movs	r2, #2
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f000 fbe1 	bl	80143ba <USBD_CtlSendData>
              break;
 8013bf8:	e004      	b.n	8013c04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013bfa:	6839      	ldr	r1, [r7, #0]
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 fb6b 	bl	80142d8 <USBD_CtlError>
              break;
 8013c02:	bf00      	nop
          }
          break;
 8013c04:	e004      	b.n	8013c10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013c06:	6839      	ldr	r1, [r7, #0]
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 fb65 	bl	80142d8 <USBD_CtlError>
          break;
 8013c0e:	bf00      	nop
      }
      break;
 8013c10:	e004      	b.n	8013c1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013c12:	6839      	ldr	r1, [r7, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 fb5f 	bl	80142d8 <USBD_CtlError>
      break;
 8013c1a:	bf00      	nop
  }

  return ret;
 8013c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3710      	adds	r7, #16
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
	...

08013c28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013c36:	2300      	movs	r3, #0
 8013c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	885b      	ldrh	r3, [r3, #2]
 8013c42:	0a1b      	lsrs	r3, r3, #8
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	3b01      	subs	r3, #1
 8013c48:	2b0e      	cmp	r3, #14
 8013c4a:	f200 8152 	bhi.w	8013ef2 <USBD_GetDescriptor+0x2ca>
 8013c4e:	a201      	add	r2, pc, #4	; (adr r2, 8013c54 <USBD_GetDescriptor+0x2c>)
 8013c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c54:	08013cc5 	.word	0x08013cc5
 8013c58:	08013cdd 	.word	0x08013cdd
 8013c5c:	08013d1d 	.word	0x08013d1d
 8013c60:	08013ef3 	.word	0x08013ef3
 8013c64:	08013ef3 	.word	0x08013ef3
 8013c68:	08013e93 	.word	0x08013e93
 8013c6c:	08013ebf 	.word	0x08013ebf
 8013c70:	08013ef3 	.word	0x08013ef3
 8013c74:	08013ef3 	.word	0x08013ef3
 8013c78:	08013ef3 	.word	0x08013ef3
 8013c7c:	08013ef3 	.word	0x08013ef3
 8013c80:	08013ef3 	.word	0x08013ef3
 8013c84:	08013ef3 	.word	0x08013ef3
 8013c88:	08013ef3 	.word	0x08013ef3
 8013c8c:	08013c91 	.word	0x08013c91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c96:	69db      	ldr	r3, [r3, #28]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00b      	beq.n	8013cb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013ca2:	69db      	ldr	r3, [r3, #28]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	7c12      	ldrb	r2, [r2, #16]
 8013ca8:	f107 0108 	add.w	r1, r7, #8
 8013cac:	4610      	mov	r0, r2
 8013cae:	4798      	blx	r3
 8013cb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013cb2:	e126      	b.n	8013f02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013cb4:	6839      	ldr	r1, [r7, #0]
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fb0e 	bl	80142d8 <USBD_CtlError>
        err++;
 8013cbc:	7afb      	ldrb	r3, [r7, #11]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	72fb      	strb	r3, [r7, #11]
      break;
 8013cc2:	e11e      	b.n	8013f02 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	7c12      	ldrb	r2, [r2, #16]
 8013cd0:	f107 0108 	add.w	r1, r7, #8
 8013cd4:	4610      	mov	r0, r2
 8013cd6:	4798      	blx	r3
 8013cd8:	60f8      	str	r0, [r7, #12]
      break;
 8013cda:	e112      	b.n	8013f02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	7c1b      	ldrb	r3, [r3, #16]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d10d      	bne.n	8013d00 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cec:	f107 0208 	add.w	r2, r7, #8
 8013cf0:	4610      	mov	r0, r2
 8013cf2:	4798      	blx	r3
 8013cf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	2202      	movs	r2, #2
 8013cfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013cfe:	e100      	b.n	8013f02 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d08:	f107 0208 	add.w	r2, r7, #8
 8013d0c:	4610      	mov	r0, r2
 8013d0e:	4798      	blx	r3
 8013d10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	3301      	adds	r3, #1
 8013d16:	2202      	movs	r2, #2
 8013d18:	701a      	strb	r2, [r3, #0]
      break;
 8013d1a:	e0f2      	b.n	8013f02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	885b      	ldrh	r3, [r3, #2]
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	2b05      	cmp	r3, #5
 8013d24:	f200 80ac 	bhi.w	8013e80 <USBD_GetDescriptor+0x258>
 8013d28:	a201      	add	r2, pc, #4	; (adr r2, 8013d30 <USBD_GetDescriptor+0x108>)
 8013d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d2e:	bf00      	nop
 8013d30:	08013d49 	.word	0x08013d49
 8013d34:	08013d7d 	.word	0x08013d7d
 8013d38:	08013db1 	.word	0x08013db1
 8013d3c:	08013de5 	.word	0x08013de5
 8013d40:	08013e19 	.word	0x08013e19
 8013d44:	08013e4d 	.word	0x08013e4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d00b      	beq.n	8013d6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	687a      	ldr	r2, [r7, #4]
 8013d5e:	7c12      	ldrb	r2, [r2, #16]
 8013d60:	f107 0108 	add.w	r1, r7, #8
 8013d64:	4610      	mov	r0, r2
 8013d66:	4798      	blx	r3
 8013d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d6a:	e091      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d6c:	6839      	ldr	r1, [r7, #0]
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 fab2 	bl	80142d8 <USBD_CtlError>
            err++;
 8013d74:	7afb      	ldrb	r3, [r7, #11]
 8013d76:	3301      	adds	r3, #1
 8013d78:	72fb      	strb	r3, [r7, #11]
          break;
 8013d7a:	e089      	b.n	8013e90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d82:	689b      	ldr	r3, [r3, #8]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00b      	beq.n	8013da0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	7c12      	ldrb	r2, [r2, #16]
 8013d94:	f107 0108 	add.w	r1, r7, #8
 8013d98:	4610      	mov	r0, r2
 8013d9a:	4798      	blx	r3
 8013d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d9e:	e077      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013da0:	6839      	ldr	r1, [r7, #0]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fa98 	bl	80142d8 <USBD_CtlError>
            err++;
 8013da8:	7afb      	ldrb	r3, [r7, #11]
 8013daa:	3301      	adds	r3, #1
 8013dac:	72fb      	strb	r3, [r7, #11]
          break;
 8013dae:	e06f      	b.n	8013e90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00b      	beq.n	8013dd4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	687a      	ldr	r2, [r7, #4]
 8013dc6:	7c12      	ldrb	r2, [r2, #16]
 8013dc8:	f107 0108 	add.w	r1, r7, #8
 8013dcc:	4610      	mov	r0, r2
 8013dce:	4798      	blx	r3
 8013dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dd2:	e05d      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f000 fa7e 	bl	80142d8 <USBD_CtlError>
            err++;
 8013ddc:	7afb      	ldrb	r3, [r7, #11]
 8013dde:	3301      	adds	r3, #1
 8013de0:	72fb      	strb	r3, [r7, #11]
          break;
 8013de2:	e055      	b.n	8013e90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dea:	691b      	ldr	r3, [r3, #16]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00b      	beq.n	8013e08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	687a      	ldr	r2, [r7, #4]
 8013dfa:	7c12      	ldrb	r2, [r2, #16]
 8013dfc:	f107 0108 	add.w	r1, r7, #8
 8013e00:	4610      	mov	r0, r2
 8013e02:	4798      	blx	r3
 8013e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e06:	e043      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e08:	6839      	ldr	r1, [r7, #0]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 fa64 	bl	80142d8 <USBD_CtlError>
            err++;
 8013e10:	7afb      	ldrb	r3, [r7, #11]
 8013e12:	3301      	adds	r3, #1
 8013e14:	72fb      	strb	r3, [r7, #11]
          break;
 8013e16:	e03b      	b.n	8013e90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e1e:	695b      	ldr	r3, [r3, #20]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00b      	beq.n	8013e3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e2a:	695b      	ldr	r3, [r3, #20]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	7c12      	ldrb	r2, [r2, #16]
 8013e30:	f107 0108 	add.w	r1, r7, #8
 8013e34:	4610      	mov	r0, r2
 8013e36:	4798      	blx	r3
 8013e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e3a:	e029      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e3c:	6839      	ldr	r1, [r7, #0]
 8013e3e:	6878      	ldr	r0, [r7, #4]
 8013e40:	f000 fa4a 	bl	80142d8 <USBD_CtlError>
            err++;
 8013e44:	7afb      	ldrb	r3, [r7, #11]
 8013e46:	3301      	adds	r3, #1
 8013e48:	72fb      	strb	r3, [r7, #11]
          break;
 8013e4a:	e021      	b.n	8013e90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00b      	beq.n	8013e70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e5e:	699b      	ldr	r3, [r3, #24]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	7c12      	ldrb	r2, [r2, #16]
 8013e64:	f107 0108 	add.w	r1, r7, #8
 8013e68:	4610      	mov	r0, r2
 8013e6a:	4798      	blx	r3
 8013e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e6e:	e00f      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f000 fa30 	bl	80142d8 <USBD_CtlError>
            err++;
 8013e78:	7afb      	ldrb	r3, [r7, #11]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e7e:	e007      	b.n	8013e90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013e80:	6839      	ldr	r1, [r7, #0]
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 fa28 	bl	80142d8 <USBD_CtlError>
          err++;
 8013e88:	7afb      	ldrb	r3, [r7, #11]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013e8e:	bf00      	nop
      }
      break;
 8013e90:	e037      	b.n	8013f02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	7c1b      	ldrb	r3, [r3, #16]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d109      	bne.n	8013eae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ea2:	f107 0208 	add.w	r2, r7, #8
 8013ea6:	4610      	mov	r0, r2
 8013ea8:	4798      	blx	r3
 8013eaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013eac:	e029      	b.n	8013f02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013eae:	6839      	ldr	r1, [r7, #0]
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 fa11 	bl	80142d8 <USBD_CtlError>
        err++;
 8013eb6:	7afb      	ldrb	r3, [r7, #11]
 8013eb8:	3301      	adds	r3, #1
 8013eba:	72fb      	strb	r3, [r7, #11]
      break;
 8013ebc:	e021      	b.n	8013f02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	7c1b      	ldrb	r3, [r3, #16]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d10d      	bne.n	8013ee2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ece:	f107 0208 	add.w	r2, r7, #8
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	4798      	blx	r3
 8013ed6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3301      	adds	r3, #1
 8013edc:	2207      	movs	r2, #7
 8013ede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ee0:	e00f      	b.n	8013f02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ee2:	6839      	ldr	r1, [r7, #0]
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f000 f9f7 	bl	80142d8 <USBD_CtlError>
        err++;
 8013eea:	7afb      	ldrb	r3, [r7, #11]
 8013eec:	3301      	adds	r3, #1
 8013eee:	72fb      	strb	r3, [r7, #11]
      break;
 8013ef0:	e007      	b.n	8013f02 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013ef2:	6839      	ldr	r1, [r7, #0]
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f000 f9ef 	bl	80142d8 <USBD_CtlError>
      err++;
 8013efa:	7afb      	ldrb	r3, [r7, #11]
 8013efc:	3301      	adds	r3, #1
 8013efe:	72fb      	strb	r3, [r7, #11]
      break;
 8013f00:	bf00      	nop
  }

  if (err != 0U)
 8013f02:	7afb      	ldrb	r3, [r7, #11]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d11e      	bne.n	8013f46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	88db      	ldrh	r3, [r3, #6]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d016      	beq.n	8013f3e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f10:	893b      	ldrh	r3, [r7, #8]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d00e      	beq.n	8013f34 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	88da      	ldrh	r2, [r3, #6]
 8013f1a:	893b      	ldrh	r3, [r7, #8]
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	bf28      	it	cs
 8013f20:	4613      	movcs	r3, r2
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f26:	893b      	ldrh	r3, [r7, #8]
 8013f28:	461a      	mov	r2, r3
 8013f2a:	68f9      	ldr	r1, [r7, #12]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f000 fa44 	bl	80143ba <USBD_CtlSendData>
 8013f32:	e009      	b.n	8013f48 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013f34:	6839      	ldr	r1, [r7, #0]
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 f9ce 	bl	80142d8 <USBD_CtlError>
 8013f3c:	e004      	b.n	8013f48 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 fa95 	bl	801446e <USBD_CtlSendStatus>
 8013f44:	e000      	b.n	8013f48 <USBD_GetDescriptor+0x320>
    return;
 8013f46:	bf00      	nop
  }
}
 8013f48:	3710      	adds	r7, #16
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop

08013f50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b084      	sub	sp, #16
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	889b      	ldrh	r3, [r3, #4]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d131      	bne.n	8013fc6 <USBD_SetAddress+0x76>
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	88db      	ldrh	r3, [r3, #6]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d12d      	bne.n	8013fc6 <USBD_SetAddress+0x76>
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	885b      	ldrh	r3, [r3, #2]
 8013f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8013f70:	d829      	bhi.n	8013fc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	885b      	ldrh	r3, [r3, #2]
 8013f76:	b2db      	uxtb	r3, r3
 8013f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	2b03      	cmp	r3, #3
 8013f88:	d104      	bne.n	8013f94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013f8a:	6839      	ldr	r1, [r7, #0]
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 f9a3 	bl	80142d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f92:	e01d      	b.n	8013fd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	7bfa      	ldrb	r2, [r7, #15]
 8013f98:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013f9c:	7bfb      	ldrb	r3, [r7, #15]
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f000 fea1 	bl	8014ce8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f000 fa61 	bl	801446e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013fac:	7bfb      	ldrb	r3, [r7, #15]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d004      	beq.n	8013fbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2202      	movs	r2, #2
 8013fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fba:	e009      	b.n	8013fd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fc4:	e004      	b.n	8013fd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013fc6:	6839      	ldr	r1, [r7, #0]
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f000 f985 	bl	80142d8 <USBD_CtlError>
  }
}
 8013fce:	bf00      	nop
 8013fd0:	bf00      	nop
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b084      	sub	sp, #16
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	885b      	ldrh	r3, [r3, #2]
 8013fea:	b2da      	uxtb	r2, r3
 8013fec:	4b4c      	ldr	r3, [pc, #304]	; (8014120 <USBD_SetConfig+0x148>)
 8013fee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013ff0:	4b4b      	ldr	r3, [pc, #300]	; (8014120 <USBD_SetConfig+0x148>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d905      	bls.n	8014004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013ff8:	6839      	ldr	r1, [r7, #0]
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f000 f96c 	bl	80142d8 <USBD_CtlError>
    return USBD_FAIL;
 8014000:	2303      	movs	r3, #3
 8014002:	e088      	b.n	8014116 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801400a:	b2db      	uxtb	r3, r3
 801400c:	2b02      	cmp	r3, #2
 801400e:	d002      	beq.n	8014016 <USBD_SetConfig+0x3e>
 8014010:	2b03      	cmp	r3, #3
 8014012:	d025      	beq.n	8014060 <USBD_SetConfig+0x88>
 8014014:	e071      	b.n	80140fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014016:	4b42      	ldr	r3, [pc, #264]	; (8014120 <USBD_SetConfig+0x148>)
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d01c      	beq.n	8014058 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801401e:	4b40      	ldr	r3, [pc, #256]	; (8014120 <USBD_SetConfig+0x148>)
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	461a      	mov	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014028:	4b3d      	ldr	r3, [pc, #244]	; (8014120 <USBD_SetConfig+0x148>)
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	4619      	mov	r1, r3
 801402e:	6878      	ldr	r0, [r7, #4]
 8014030:	f7ff f992 	bl	8013358 <USBD_SetClassConfig>
 8014034:	4603      	mov	r3, r0
 8014036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014038:	7bfb      	ldrb	r3, [r7, #15]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d004      	beq.n	8014048 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801403e:	6839      	ldr	r1, [r7, #0]
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 f949 	bl	80142d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014046:	e065      	b.n	8014114 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fa10 	bl	801446e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2203      	movs	r2, #3
 8014052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014056:	e05d      	b.n	8014114 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f000 fa08 	bl	801446e <USBD_CtlSendStatus>
      break;
 801405e:	e059      	b.n	8014114 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014060:	4b2f      	ldr	r3, [pc, #188]	; (8014120 <USBD_SetConfig+0x148>)
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d112      	bne.n	801408e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2202      	movs	r2, #2
 801406c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014070:	4b2b      	ldr	r3, [pc, #172]	; (8014120 <USBD_SetConfig+0x148>)
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	461a      	mov	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801407a:	4b29      	ldr	r3, [pc, #164]	; (8014120 <USBD_SetConfig+0x148>)
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	4619      	mov	r1, r3
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7ff f985 	bl	8013390 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f000 f9f1 	bl	801446e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801408c:	e042      	b.n	8014114 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801408e:	4b24      	ldr	r3, [pc, #144]	; (8014120 <USBD_SetConfig+0x148>)
 8014090:	781b      	ldrb	r3, [r3, #0]
 8014092:	461a      	mov	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	429a      	cmp	r2, r3
 801409a:	d02a      	beq.n	80140f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	4619      	mov	r1, r3
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff f973 	bl	8013390 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80140aa:	4b1d      	ldr	r3, [pc, #116]	; (8014120 <USBD_SetConfig+0x148>)
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	461a      	mov	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80140b4:	4b1a      	ldr	r3, [pc, #104]	; (8014120 <USBD_SetConfig+0x148>)
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	4619      	mov	r1, r3
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7ff f94c 	bl	8013358 <USBD_SetClassConfig>
 80140c0:	4603      	mov	r3, r0
 80140c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80140c4:	7bfb      	ldrb	r3, [r7, #15]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00f      	beq.n	80140ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80140ca:	6839      	ldr	r1, [r7, #0]
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f000 f903 	bl	80142d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	4619      	mov	r1, r3
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f7ff f958 	bl	8013390 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2202      	movs	r2, #2
 80140e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80140e8:	e014      	b.n	8014114 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 f9bf 	bl	801446e <USBD_CtlSendStatus>
      break;
 80140f0:	e010      	b.n	8014114 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f9bb 	bl	801446e <USBD_CtlSendStatus>
      break;
 80140f8:	e00c      	b.n	8014114 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80140fa:	6839      	ldr	r1, [r7, #0]
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f000 f8eb 	bl	80142d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014102:	4b07      	ldr	r3, [pc, #28]	; (8014120 <USBD_SetConfig+0x148>)
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	4619      	mov	r1, r3
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7ff f941 	bl	8013390 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801410e:	2303      	movs	r3, #3
 8014110:	73fb      	strb	r3, [r7, #15]
      break;
 8014112:	bf00      	nop
  }

  return ret;
 8014114:	7bfb      	ldrb	r3, [r7, #15]
}
 8014116:	4618      	mov	r0, r3
 8014118:	3710      	adds	r7, #16
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	20001bbc 	.word	0x20001bbc

08014124 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	88db      	ldrh	r3, [r3, #6]
 8014132:	2b01      	cmp	r3, #1
 8014134:	d004      	beq.n	8014140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	f000 f8cd 	bl	80142d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801413e:	e023      	b.n	8014188 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014146:	b2db      	uxtb	r3, r3
 8014148:	2b02      	cmp	r3, #2
 801414a:	dc02      	bgt.n	8014152 <USBD_GetConfig+0x2e>
 801414c:	2b00      	cmp	r3, #0
 801414e:	dc03      	bgt.n	8014158 <USBD_GetConfig+0x34>
 8014150:	e015      	b.n	801417e <USBD_GetConfig+0x5a>
 8014152:	2b03      	cmp	r3, #3
 8014154:	d00b      	beq.n	801416e <USBD_GetConfig+0x4a>
 8014156:	e012      	b.n	801417e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2200      	movs	r2, #0
 801415c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	3308      	adds	r3, #8
 8014162:	2201      	movs	r2, #1
 8014164:	4619      	mov	r1, r3
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 f927 	bl	80143ba <USBD_CtlSendData>
        break;
 801416c:	e00c      	b.n	8014188 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	3304      	adds	r3, #4
 8014172:	2201      	movs	r2, #1
 8014174:	4619      	mov	r1, r3
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f000 f91f 	bl	80143ba <USBD_CtlSendData>
        break;
 801417c:	e004      	b.n	8014188 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801417e:	6839      	ldr	r1, [r7, #0]
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f000 f8a9 	bl	80142d8 <USBD_CtlError>
        break;
 8014186:	bf00      	nop
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141a0:	b2db      	uxtb	r3, r3
 80141a2:	3b01      	subs	r3, #1
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	d81e      	bhi.n	80141e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	88db      	ldrh	r3, [r3, #6]
 80141ac:	2b02      	cmp	r3, #2
 80141ae:	d004      	beq.n	80141ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80141b0:	6839      	ldr	r1, [r7, #0]
 80141b2:	6878      	ldr	r0, [r7, #4]
 80141b4:	f000 f890 	bl	80142d8 <USBD_CtlError>
        break;
 80141b8:	e01a      	b.n	80141f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2201      	movs	r2, #1
 80141be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d005      	beq.n	80141d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	f043 0202 	orr.w	r2, r3, #2
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	330c      	adds	r3, #12
 80141da:	2202      	movs	r2, #2
 80141dc:	4619      	mov	r1, r3
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f000 f8eb 	bl	80143ba <USBD_CtlSendData>
      break;
 80141e4:	e004      	b.n	80141f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80141e6:	6839      	ldr	r1, [r7, #0]
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f000 f875 	bl	80142d8 <USBD_CtlError>
      break;
 80141ee:	bf00      	nop
  }
}
 80141f0:	bf00      	nop
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}

080141f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	885b      	ldrh	r3, [r3, #2]
 8014206:	2b01      	cmp	r3, #1
 8014208:	d106      	bne.n	8014218 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2201      	movs	r2, #1
 801420e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f000 f92b 	bl	801446e <USBD_CtlSendStatus>
  }
}
 8014218:	bf00      	nop
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014230:	b2db      	uxtb	r3, r3
 8014232:	3b01      	subs	r3, #1
 8014234:	2b02      	cmp	r3, #2
 8014236:	d80b      	bhi.n	8014250 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	885b      	ldrh	r3, [r3, #2]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d10c      	bne.n	801425a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2200      	movs	r2, #0
 8014244:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f000 f910 	bl	801446e <USBD_CtlSendStatus>
      }
      break;
 801424e:	e004      	b.n	801425a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f000 f840 	bl	80142d8 <USBD_CtlError>
      break;
 8014258:	e000      	b.n	801425c <USBD_ClrFeature+0x3c>
      break;
 801425a:	bf00      	nop
  }
}
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	781a      	ldrb	r2, [r3, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	3301      	adds	r3, #1
 801427e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	781a      	ldrb	r2, [r3, #0]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	3301      	adds	r3, #1
 801428c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7ff fa92 	bl	80137b8 <SWAPBYTE>
 8014294:	4603      	mov	r3, r0
 8014296:	461a      	mov	r2, r3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	3301      	adds	r3, #1
 80142a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	3301      	adds	r3, #1
 80142a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f7ff fa85 	bl	80137b8 <SWAPBYTE>
 80142ae:	4603      	mov	r3, r0
 80142b0:	461a      	mov	r2, r3
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	3301      	adds	r3, #1
 80142ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	3301      	adds	r3, #1
 80142c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80142c2:	68f8      	ldr	r0, [r7, #12]
 80142c4:	f7ff fa78 	bl	80137b8 <SWAPBYTE>
 80142c8:	4603      	mov	r3, r0
 80142ca:	461a      	mov	r2, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	80da      	strh	r2, [r3, #6]
}
 80142d0:	bf00      	nop
 80142d2:	3710      	adds	r7, #16
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80142e2:	2180      	movs	r1, #128	; 0x80
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f000 fc95 	bl	8014c14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80142ea:	2100      	movs	r1, #0
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f000 fc91 	bl	8014c14 <USBD_LL_StallEP>
}
 80142f2:	bf00      	nop
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b086      	sub	sp, #24
 80142fe:	af00      	add	r7, sp, #0
 8014300:	60f8      	str	r0, [r7, #12]
 8014302:	60b9      	str	r1, [r7, #8]
 8014304:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014306:	2300      	movs	r3, #0
 8014308:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d036      	beq.n	801437e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014314:	6938      	ldr	r0, [r7, #16]
 8014316:	f000 f836 	bl	8014386 <USBD_GetLen>
 801431a:	4603      	mov	r3, r0
 801431c:	3301      	adds	r3, #1
 801431e:	b29b      	uxth	r3, r3
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	b29a      	uxth	r2, r3
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014328:	7dfb      	ldrb	r3, [r7, #23]
 801432a:	68ba      	ldr	r2, [r7, #8]
 801432c:	4413      	add	r3, r2
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	7812      	ldrb	r2, [r2, #0]
 8014332:	701a      	strb	r2, [r3, #0]
  idx++;
 8014334:	7dfb      	ldrb	r3, [r7, #23]
 8014336:	3301      	adds	r3, #1
 8014338:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801433a:	7dfb      	ldrb	r3, [r7, #23]
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	4413      	add	r3, r2
 8014340:	2203      	movs	r2, #3
 8014342:	701a      	strb	r2, [r3, #0]
  idx++;
 8014344:	7dfb      	ldrb	r3, [r7, #23]
 8014346:	3301      	adds	r3, #1
 8014348:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801434a:	e013      	b.n	8014374 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801434c:	7dfb      	ldrb	r3, [r7, #23]
 801434e:	68ba      	ldr	r2, [r7, #8]
 8014350:	4413      	add	r3, r2
 8014352:	693a      	ldr	r2, [r7, #16]
 8014354:	7812      	ldrb	r2, [r2, #0]
 8014356:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	3301      	adds	r3, #1
 801435c:	613b      	str	r3, [r7, #16]
    idx++;
 801435e:	7dfb      	ldrb	r3, [r7, #23]
 8014360:	3301      	adds	r3, #1
 8014362:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014364:	7dfb      	ldrb	r3, [r7, #23]
 8014366:	68ba      	ldr	r2, [r7, #8]
 8014368:	4413      	add	r3, r2
 801436a:	2200      	movs	r2, #0
 801436c:	701a      	strb	r2, [r3, #0]
    idx++;
 801436e:	7dfb      	ldrb	r3, [r7, #23]
 8014370:	3301      	adds	r3, #1
 8014372:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1e7      	bne.n	801434c <USBD_GetString+0x52>
 801437c:	e000      	b.n	8014380 <USBD_GetString+0x86>
    return;
 801437e:	bf00      	nop
  }
}
 8014380:	3718      	adds	r7, #24
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}

08014386 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014386:	b480      	push	{r7}
 8014388:	b085      	sub	sp, #20
 801438a:	af00      	add	r7, sp, #0
 801438c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801438e:	2300      	movs	r3, #0
 8014390:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014396:	e005      	b.n	80143a4 <USBD_GetLen+0x1e>
  {
    len++;
 8014398:	7bfb      	ldrb	r3, [r7, #15]
 801439a:	3301      	adds	r3, #1
 801439c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	3301      	adds	r3, #1
 80143a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	781b      	ldrb	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1f5      	bne.n	8014398 <USBD_GetLen+0x12>
  }

  return len;
 80143ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	3714      	adds	r7, #20
 80143b2:	46bd      	mov	sp, r7
 80143b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b8:	4770      	bx	lr

080143ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b084      	sub	sp, #16
 80143be:	af00      	add	r7, sp, #0
 80143c0:	60f8      	str	r0, [r7, #12]
 80143c2:	60b9      	str	r1, [r7, #8]
 80143c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2202      	movs	r2, #2
 80143ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	2100      	movs	r1, #0
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f000 fca0 	bl	8014d26 <USBD_LL_Transmit>

  return USBD_OK;
 80143e6:	2300      	movs	r3, #0
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	3710      	adds	r7, #16
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}

080143f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b084      	sub	sp, #16
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	60f8      	str	r0, [r7, #12]
 80143f8:	60b9      	str	r1, [r7, #8]
 80143fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	68ba      	ldr	r2, [r7, #8]
 8014400:	2100      	movs	r1, #0
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f000 fc8f 	bl	8014d26 <USBD_LL_Transmit>

  return USBD_OK;
 8014408:	2300      	movs	r3, #0
}
 801440a:	4618      	mov	r0, r3
 801440c:	3710      	adds	r7, #16
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014412:	b580      	push	{r7, lr}
 8014414:	b084      	sub	sp, #16
 8014416:	af00      	add	r7, sp, #0
 8014418:	60f8      	str	r0, [r7, #12]
 801441a:	60b9      	str	r1, [r7, #8]
 801441c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2203      	movs	r2, #3
 8014422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	68ba      	ldr	r2, [r7, #8]
 801443a:	2100      	movs	r1, #0
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	f000 fc93 	bl	8014d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014442:	2300      	movs	r3, #0
}
 8014444:	4618      	mov	r0, r3
 8014446:	3710      	adds	r7, #16
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b084      	sub	sp, #16
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	60b9      	str	r1, [r7, #8]
 8014456:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	2100      	movs	r1, #0
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	f000 fc82 	bl	8014d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014464:	2300      	movs	r3, #0
}
 8014466:	4618      	mov	r0, r3
 8014468:	3710      	adds	r7, #16
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b082      	sub	sp, #8
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2204      	movs	r2, #4
 801447a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801447e:	2300      	movs	r3, #0
 8014480:	2200      	movs	r2, #0
 8014482:	2100      	movs	r1, #0
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 fc4e 	bl	8014d26 <USBD_LL_Transmit>

  return USBD_OK;
 801448a:	2300      	movs	r3, #0
}
 801448c:	4618      	mov	r0, r3
 801448e:	3708      	adds	r7, #8
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2205      	movs	r2, #5
 80144a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144a4:	2300      	movs	r3, #0
 80144a6:	2200      	movs	r2, #0
 80144a8:	2100      	movs	r1, #0
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 fc5c 	bl	8014d68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
	...

080144bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80144c0:	2200      	movs	r2, #0
 80144c2:	4912      	ldr	r1, [pc, #72]	; (801450c <MX_USB_Device_Init+0x50>)
 80144c4:	4812      	ldr	r0, [pc, #72]	; (8014510 <MX_USB_Device_Init+0x54>)
 80144c6:	f7fe fed9 	bl	801327c <USBD_Init>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d001      	beq.n	80144d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80144d0:	f7ef fa76 	bl	80039c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80144d4:	490f      	ldr	r1, [pc, #60]	; (8014514 <MX_USB_Device_Init+0x58>)
 80144d6:	480e      	ldr	r0, [pc, #56]	; (8014510 <MX_USB_Device_Init+0x54>)
 80144d8:	f7fe ff00 	bl	80132dc <USBD_RegisterClass>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d001      	beq.n	80144e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80144e2:	f7ef fa6d 	bl	80039c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80144e6:	490c      	ldr	r1, [pc, #48]	; (8014518 <MX_USB_Device_Init+0x5c>)
 80144e8:	4809      	ldr	r0, [pc, #36]	; (8014510 <MX_USB_Device_Init+0x54>)
 80144ea:	f7fe fe21 	bl	8013130 <USBD_CDC_RegisterInterface>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d001      	beq.n	80144f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80144f4:	f7ef fa64 	bl	80039c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80144f8:	4805      	ldr	r0, [pc, #20]	; (8014510 <MX_USB_Device_Init+0x54>)
 80144fa:	f7fe ff16 	bl	801332a <USBD_Start>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014504:	f7ef fa5c 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014508:	bf00      	nop
 801450a:	bd80      	pop	{r7, pc}
 801450c:	200002c8 	.word	0x200002c8
 8014510:	20001bc0 	.word	0x20001bc0
 8014514:	200001b0 	.word	0x200001b0
 8014518:	200002b4 	.word	0x200002b4

0801451c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014520:	2200      	movs	r2, #0
 8014522:	4905      	ldr	r1, [pc, #20]	; (8014538 <CDC_Init_FS+0x1c>)
 8014524:	4805      	ldr	r0, [pc, #20]	; (801453c <CDC_Init_FS+0x20>)
 8014526:	f7fe fe18 	bl	801315a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801452a:	4905      	ldr	r1, [pc, #20]	; (8014540 <CDC_Init_FS+0x24>)
 801452c:	4803      	ldr	r0, [pc, #12]	; (801453c <CDC_Init_FS+0x20>)
 801452e:	f7fe fe32 	bl	8013196 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014532:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014534:	4618      	mov	r0, r3
 8014536:	bd80      	pop	{r7, pc}
 8014538:	20002290 	.word	0x20002290
 801453c:	20001bc0 	.word	0x20001bc0
 8014540:	20001e90 	.word	0x20001e90

08014544 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014544:	b480      	push	{r7}
 8014546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014548:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801454a:	4618      	mov	r0, r3
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	4603      	mov	r3, r0
 801455c:	6039      	str	r1, [r7, #0]
 801455e:	71fb      	strb	r3, [r7, #7]
 8014560:	4613      	mov	r3, r2
 8014562:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014564:	79fb      	ldrb	r3, [r7, #7]
 8014566:	2b23      	cmp	r3, #35	; 0x23
 8014568:	d84a      	bhi.n	8014600 <CDC_Control_FS+0xac>
 801456a:	a201      	add	r2, pc, #4	; (adr r2, 8014570 <CDC_Control_FS+0x1c>)
 801456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014570:	08014601 	.word	0x08014601
 8014574:	08014601 	.word	0x08014601
 8014578:	08014601 	.word	0x08014601
 801457c:	08014601 	.word	0x08014601
 8014580:	08014601 	.word	0x08014601
 8014584:	08014601 	.word	0x08014601
 8014588:	08014601 	.word	0x08014601
 801458c:	08014601 	.word	0x08014601
 8014590:	08014601 	.word	0x08014601
 8014594:	08014601 	.word	0x08014601
 8014598:	08014601 	.word	0x08014601
 801459c:	08014601 	.word	0x08014601
 80145a0:	08014601 	.word	0x08014601
 80145a4:	08014601 	.word	0x08014601
 80145a8:	08014601 	.word	0x08014601
 80145ac:	08014601 	.word	0x08014601
 80145b0:	08014601 	.word	0x08014601
 80145b4:	08014601 	.word	0x08014601
 80145b8:	08014601 	.word	0x08014601
 80145bc:	08014601 	.word	0x08014601
 80145c0:	08014601 	.word	0x08014601
 80145c4:	08014601 	.word	0x08014601
 80145c8:	08014601 	.word	0x08014601
 80145cc:	08014601 	.word	0x08014601
 80145d0:	08014601 	.word	0x08014601
 80145d4:	08014601 	.word	0x08014601
 80145d8:	08014601 	.word	0x08014601
 80145dc:	08014601 	.word	0x08014601
 80145e0:	08014601 	.word	0x08014601
 80145e4:	08014601 	.word	0x08014601
 80145e8:	08014601 	.word	0x08014601
 80145ec:	08014601 	.word	0x08014601
 80145f0:	08014601 	.word	0x08014601
 80145f4:	08014601 	.word	0x08014601
 80145f8:	08014601 	.word	0x08014601
 80145fc:	08014601 	.word	0x08014601
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014600:	bf00      	nop
  }

  return (USBD_OK);
 8014602:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014604:	4618      	mov	r0, r3
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr

08014610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801461a:	6879      	ldr	r1, [r7, #4]
 801461c:	4805      	ldr	r0, [pc, #20]	; (8014634 <CDC_Receive_FS+0x24>)
 801461e:	f7fe fdba 	bl	8013196 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014622:	4804      	ldr	r0, [pc, #16]	; (8014634 <CDC_Receive_FS+0x24>)
 8014624:	f7fe fe00 	bl	8013228 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801462a:	4618      	mov	r0, r3
 801462c:	3708      	adds	r7, #8
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}
 8014632:	bf00      	nop
 8014634:	20001bc0 	.word	0x20001bc0

08014638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	460b      	mov	r3, r1
 8014642:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014644:	2300      	movs	r3, #0
 8014646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014648:	4b0d      	ldr	r3, [pc, #52]	; (8014680 <CDC_Transmit_FS+0x48>)
 801464a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801464e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014656:	2b00      	cmp	r3, #0
 8014658:	d001      	beq.n	801465e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801465a:	2301      	movs	r3, #1
 801465c:	e00b      	b.n	8014676 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801465e:	887b      	ldrh	r3, [r7, #2]
 8014660:	461a      	mov	r2, r3
 8014662:	6879      	ldr	r1, [r7, #4]
 8014664:	4806      	ldr	r0, [pc, #24]	; (8014680 <CDC_Transmit_FS+0x48>)
 8014666:	f7fe fd78 	bl	801315a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801466a:	4805      	ldr	r0, [pc, #20]	; (8014680 <CDC_Transmit_FS+0x48>)
 801466c:	f7fe fdac 	bl	80131c8 <USBD_CDC_TransmitPacket>
 8014670:	4603      	mov	r3, r0
 8014672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014674:	7bfb      	ldrb	r3, [r7, #15]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3710      	adds	r7, #16
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	20001bc0 	.word	0x20001bc0

08014684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014684:	b480      	push	{r7}
 8014686:	b087      	sub	sp, #28
 8014688:	af00      	add	r7, sp, #0
 801468a:	60f8      	str	r0, [r7, #12]
 801468c:	60b9      	str	r1, [r7, #8]
 801468e:	4613      	mov	r3, r2
 8014690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014692:	2300      	movs	r3, #0
 8014694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801469a:	4618      	mov	r0, r3
 801469c:	371c      	adds	r7, #28
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr
	...

080146a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	4603      	mov	r3, r0
 80146b0:	6039      	str	r1, [r7, #0]
 80146b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	2212      	movs	r2, #18
 80146b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80146ba:	4b03      	ldr	r3, [pc, #12]	; (80146c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80146bc:	4618      	mov	r0, r3
 80146be:	370c      	adds	r7, #12
 80146c0:	46bd      	mov	sp, r7
 80146c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c6:	4770      	bx	lr
 80146c8:	200002e8 	.word	0x200002e8

080146cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146cc:	b480      	push	{r7}
 80146ce:	b083      	sub	sp, #12
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	4603      	mov	r3, r0
 80146d4:	6039      	str	r1, [r7, #0]
 80146d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	2204      	movs	r2, #4
 80146dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80146de:	4b03      	ldr	r3, [pc, #12]	; (80146ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	370c      	adds	r7, #12
 80146e4:	46bd      	mov	sp, r7
 80146e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ea:	4770      	bx	lr
 80146ec:	200002fc 	.word	0x200002fc

080146f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	6039      	str	r1, [r7, #0]
 80146fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d105      	bne.n	801470e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	4907      	ldr	r1, [pc, #28]	; (8014724 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014706:	4808      	ldr	r0, [pc, #32]	; (8014728 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014708:	f7ff fdf7 	bl	80142fa <USBD_GetString>
 801470c:	e004      	b.n	8014718 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	4904      	ldr	r1, [pc, #16]	; (8014724 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014712:	4805      	ldr	r0, [pc, #20]	; (8014728 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014714:	f7ff fdf1 	bl	80142fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8014718:	4b02      	ldr	r3, [pc, #8]	; (8014724 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20002690 	.word	0x20002690
 8014728:	08018008 	.word	0x08018008

0801472c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	4603      	mov	r3, r0
 8014734:	6039      	str	r1, [r7, #0]
 8014736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	4904      	ldr	r1, [pc, #16]	; (801474c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801473c:	4804      	ldr	r0, [pc, #16]	; (8014750 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801473e:	f7ff fddc 	bl	80142fa <USBD_GetString>
  return USBD_StrDesc;
 8014742:	4b02      	ldr	r3, [pc, #8]	; (801474c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014744:	4618      	mov	r0, r3
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	20002690 	.word	0x20002690
 8014750:	08018020 	.word	0x08018020

08014754 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	4603      	mov	r3, r0
 801475c:	6039      	str	r1, [r7, #0]
 801475e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	221a      	movs	r2, #26
 8014764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014766:	f000 f843 	bl	80147f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801476a:	4b02      	ldr	r3, [pc, #8]	; (8014774 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801476c:	4618      	mov	r0, r3
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	20000300 	.word	0x20000300

08014778 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b082      	sub	sp, #8
 801477c:	af00      	add	r7, sp, #0
 801477e:	4603      	mov	r3, r0
 8014780:	6039      	str	r1, [r7, #0]
 8014782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014784:	79fb      	ldrb	r3, [r7, #7]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d105      	bne.n	8014796 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801478a:	683a      	ldr	r2, [r7, #0]
 801478c:	4907      	ldr	r1, [pc, #28]	; (80147ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801478e:	4808      	ldr	r0, [pc, #32]	; (80147b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014790:	f7ff fdb3 	bl	80142fa <USBD_GetString>
 8014794:	e004      	b.n	80147a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014796:	683a      	ldr	r2, [r7, #0]
 8014798:	4904      	ldr	r1, [pc, #16]	; (80147ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 801479a:	4805      	ldr	r0, [pc, #20]	; (80147b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801479c:	f7ff fdad 	bl	80142fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80147a0:	4b02      	ldr	r3, [pc, #8]	; (80147ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	20002690 	.word	0x20002690
 80147b0:	08018034 	.word	0x08018034

080147b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	4603      	mov	r3, r0
 80147bc:	6039      	str	r1, [r7, #0]
 80147be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147c0:	79fb      	ldrb	r3, [r7, #7]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d105      	bne.n	80147d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	4907      	ldr	r1, [pc, #28]	; (80147e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80147ca:	4808      	ldr	r0, [pc, #32]	; (80147ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80147cc:	f7ff fd95 	bl	80142fa <USBD_GetString>
 80147d0:	e004      	b.n	80147dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	4904      	ldr	r1, [pc, #16]	; (80147e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80147d6:	4805      	ldr	r0, [pc, #20]	; (80147ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80147d8:	f7ff fd8f 	bl	80142fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80147dc:	4b02      	ldr	r3, [pc, #8]	; (80147e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	20002690 	.word	0x20002690
 80147ec:	08018040 	.word	0x08018040

080147f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80147f6:	4b0f      	ldr	r3, [pc, #60]	; (8014834 <Get_SerialNum+0x44>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80147fc:	4b0e      	ldr	r3, [pc, #56]	; (8014838 <Get_SerialNum+0x48>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014802:	4b0e      	ldr	r3, [pc, #56]	; (801483c <Get_SerialNum+0x4c>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014808:	68fa      	ldr	r2, [r7, #12]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4413      	add	r3, r2
 801480e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d009      	beq.n	801482a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014816:	2208      	movs	r2, #8
 8014818:	4909      	ldr	r1, [pc, #36]	; (8014840 <Get_SerialNum+0x50>)
 801481a:	68f8      	ldr	r0, [r7, #12]
 801481c:	f000 f814 	bl	8014848 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014820:	2204      	movs	r2, #4
 8014822:	4908      	ldr	r1, [pc, #32]	; (8014844 <Get_SerialNum+0x54>)
 8014824:	68b8      	ldr	r0, [r7, #8]
 8014826:	f000 f80f 	bl	8014848 <IntToUnicode>
  }
}
 801482a:	bf00      	nop
 801482c:	3710      	adds	r7, #16
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}
 8014832:	bf00      	nop
 8014834:	1fff7590 	.word	0x1fff7590
 8014838:	1fff7594 	.word	0x1fff7594
 801483c:	1fff7598 	.word	0x1fff7598
 8014840:	20000302 	.word	0x20000302
 8014844:	20000312 	.word	0x20000312

08014848 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014848:	b480      	push	{r7}
 801484a:	b087      	sub	sp, #28
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	4613      	mov	r3, r2
 8014854:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801485a:	2300      	movs	r3, #0
 801485c:	75fb      	strb	r3, [r7, #23]
 801485e:	e027      	b.n	80148b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	0f1b      	lsrs	r3, r3, #28
 8014864:	2b09      	cmp	r3, #9
 8014866:	d80b      	bhi.n	8014880 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	0f1b      	lsrs	r3, r3, #28
 801486c:	b2da      	uxtb	r2, r3
 801486e:	7dfb      	ldrb	r3, [r7, #23]
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	4619      	mov	r1, r3
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	440b      	add	r3, r1
 8014878:	3230      	adds	r2, #48	; 0x30
 801487a:	b2d2      	uxtb	r2, r2
 801487c:	701a      	strb	r2, [r3, #0]
 801487e:	e00a      	b.n	8014896 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	0f1b      	lsrs	r3, r3, #28
 8014884:	b2da      	uxtb	r2, r3
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4619      	mov	r1, r3
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	440b      	add	r3, r1
 8014890:	3237      	adds	r2, #55	; 0x37
 8014892:	b2d2      	uxtb	r2, r2
 8014894:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	011b      	lsls	r3, r3, #4
 801489a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801489c:	7dfb      	ldrb	r3, [r7, #23]
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	3301      	adds	r3, #1
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	4413      	add	r3, r2
 80148a6:	2200      	movs	r2, #0
 80148a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	3301      	adds	r3, #1
 80148ae:	75fb      	strb	r3, [r7, #23]
 80148b0:	7dfa      	ldrb	r2, [r7, #23]
 80148b2:	79fb      	ldrb	r3, [r7, #7]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d3d3      	bcc.n	8014860 <IntToUnicode+0x18>
  }
}
 80148b8:	bf00      	nop
 80148ba:	bf00      	nop
 80148bc:	371c      	adds	r7, #28
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr
	...

080148c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b094      	sub	sp, #80	; 0x50
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80148d0:	f107 030c 	add.w	r3, r7, #12
 80148d4:	2244      	movs	r2, #68	; 0x44
 80148d6:	2100      	movs	r1, #0
 80148d8:	4618      	mov	r0, r3
 80148da:	f001 f884 	bl	80159e6 <memset>
  if(pcdHandle->Instance==USB)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	4a15      	ldr	r2, [pc, #84]	; (8014938 <HAL_PCD_MspInit+0x70>)
 80148e4:	4293      	cmp	r3, r2
 80148e6:	d122      	bne.n	801492e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80148e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80148ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80148ee:	2300      	movs	r3, #0
 80148f0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80148f2:	f107 030c 	add.w	r3, r7, #12
 80148f6:	4618      	mov	r0, r3
 80148f8:	f7f6 fd44 	bl	800b384 <HAL_RCCEx_PeriphCLKConfig>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d001      	beq.n	8014906 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8014902:	f7ef f85d 	bl	80039c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014906:	4b0d      	ldr	r3, [pc, #52]	; (801493c <HAL_PCD_MspInit+0x74>)
 8014908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801490a:	4a0c      	ldr	r2, [pc, #48]	; (801493c <HAL_PCD_MspInit+0x74>)
 801490c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014910:	6593      	str	r3, [r2, #88]	; 0x58
 8014912:	4b0a      	ldr	r3, [pc, #40]	; (801493c <HAL_PCD_MspInit+0x74>)
 8014914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801491a:	60bb      	str	r3, [r7, #8]
 801491c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801491e:	2200      	movs	r2, #0
 8014920:	2100      	movs	r1, #0
 8014922:	2014      	movs	r0, #20
 8014924:	f7f2 ffe5 	bl	80078f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014928:	2014      	movs	r0, #20
 801492a:	f7f2 fffc 	bl	8007926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801492e:	bf00      	nop
 8014930:	3750      	adds	r7, #80	; 0x50
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}
 8014936:	bf00      	nop
 8014938:	40005c00 	.word	0x40005c00
 801493c:	40021000 	.word	0x40021000

08014940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8014954:	4619      	mov	r1, r3
 8014956:	4610      	mov	r0, r2
 8014958:	f7fe fd32 	bl	80133c0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801495c:	bf00      	nop
 801495e:	3708      	adds	r7, #8
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}

08014964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b082      	sub	sp, #8
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	460b      	mov	r3, r1
 801496e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8014976:	78fa      	ldrb	r2, [r7, #3]
 8014978:	6879      	ldr	r1, [r7, #4]
 801497a:	4613      	mov	r3, r2
 801497c:	009b      	lsls	r3, r3, #2
 801497e:	4413      	add	r3, r2
 8014980:	00db      	lsls	r3, r3, #3
 8014982:	440b      	add	r3, r1
 8014984:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	78fb      	ldrb	r3, [r7, #3]
 801498c:	4619      	mov	r1, r3
 801498e:	f7fe fd6c 	bl	801346a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014992:	bf00      	nop
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801499a:	b580      	push	{r7, lr}
 801499c:	b082      	sub	sp, #8
 801499e:	af00      	add	r7, sp, #0
 80149a0:	6078      	str	r0, [r7, #4]
 80149a2:	460b      	mov	r3, r1
 80149a4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80149ac:	78fa      	ldrb	r2, [r7, #3]
 80149ae:	6879      	ldr	r1, [r7, #4]
 80149b0:	4613      	mov	r3, r2
 80149b2:	009b      	lsls	r3, r3, #2
 80149b4:	4413      	add	r3, r2
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	440b      	add	r3, r1
 80149ba:	3324      	adds	r3, #36	; 0x24
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	78fb      	ldrb	r3, [r7, #3]
 80149c0:	4619      	mov	r1, r3
 80149c2:	f7fe fdb5 	bl	8013530 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80149c6:	bf00      	nop
 80149c8:	3708      	adds	r7, #8
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}

080149ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149ce:	b580      	push	{r7, lr}
 80149d0:	b082      	sub	sp, #8
 80149d2:	af00      	add	r7, sp, #0
 80149d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fe fec9 	bl	8013774 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80149e2:	bf00      	nop
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b084      	sub	sp, #16
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149f2:	2301      	movs	r3, #1
 80149f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	795b      	ldrb	r3, [r3, #5]
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	d001      	beq.n	8014a02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80149fe:	f7ee ffdf 	bl	80039c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a08:	7bfa      	ldrb	r2, [r7, #15]
 8014a0a:	4611      	mov	r1, r2
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7fe fe73 	bl	80136f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7fe fe1f 	bl	801365c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014a1e:	bf00      	nop
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
	...

08014a28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe fe6e 	bl	8013718 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	7a5b      	ldrb	r3, [r3, #9]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d005      	beq.n	8014a50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a44:	4b04      	ldr	r3, [pc, #16]	; (8014a58 <HAL_PCD_SuspendCallback+0x30>)
 8014a46:	691b      	ldr	r3, [r3, #16]
 8014a48:	4a03      	ldr	r2, [pc, #12]	; (8014a58 <HAL_PCD_SuspendCallback+0x30>)
 8014a4a:	f043 0306 	orr.w	r3, r3, #6
 8014a4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014a50:	bf00      	nop
 8014a52:	3708      	adds	r7, #8
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	e000ed00 	.word	0xe000ed00

08014a5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	7a5b      	ldrb	r3, [r3, #9]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d007      	beq.n	8014a7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a6c:	4b08      	ldr	r3, [pc, #32]	; (8014a90 <HAL_PCD_ResumeCallback+0x34>)
 8014a6e:	691b      	ldr	r3, [r3, #16]
 8014a70:	4a07      	ldr	r2, [pc, #28]	; (8014a90 <HAL_PCD_ResumeCallback+0x34>)
 8014a72:	f023 0306 	bic.w	r3, r3, #6
 8014a76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014a78:	f000 f9f8 	bl	8014e6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7fe fe5e 	bl	8013744 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014a88:	bf00      	nop
 8014a8a:	3708      	adds	r7, #8
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	e000ed00 	.word	0xe000ed00

08014a94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b082      	sub	sp, #8
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014a9c:	4a2b      	ldr	r2, [pc, #172]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	4a29      	ldr	r2, [pc, #164]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014aa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8014aac:	4b27      	ldr	r3, [pc, #156]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014aae:	4a28      	ldr	r2, [pc, #160]	; (8014b50 <USBD_LL_Init+0xbc>)
 8014ab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014ab2:	4b26      	ldr	r3, [pc, #152]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ab4:	2208      	movs	r2, #8
 8014ab6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014ab8:	4b24      	ldr	r3, [pc, #144]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014aba:	2202      	movs	r2, #2
 8014abc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014abe:	4b23      	ldr	r3, [pc, #140]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ac0:	2202      	movs	r2, #2
 8014ac2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014ac4:	4b21      	ldr	r3, [pc, #132]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014aca:	4b20      	ldr	r3, [pc, #128]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014acc:	2200      	movs	r2, #0
 8014ace:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014ad0:	4b1e      	ldr	r3, [pc, #120]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014ad6:	4b1d      	ldr	r3, [pc, #116]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ad8:	2200      	movs	r2, #0
 8014ada:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014adc:	481b      	ldr	r0, [pc, #108]	; (8014b4c <USBD_LL_Init+0xb8>)
 8014ade:	f7f4 f93b 	bl	8008d58 <HAL_PCD_Init>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8014ae8:	f7ee ff6a 	bl	80039c0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014af2:	2318      	movs	r3, #24
 8014af4:	2200      	movs	r2, #0
 8014af6:	2100      	movs	r1, #0
 8014af8:	f7f5 fdf5 	bl	800a6e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b02:	2358      	movs	r3, #88	; 0x58
 8014b04:	2200      	movs	r2, #0
 8014b06:	2180      	movs	r1, #128	; 0x80
 8014b08:	f7f5 fded 	bl	800a6e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b12:	23c0      	movs	r3, #192	; 0xc0
 8014b14:	2200      	movs	r2, #0
 8014b16:	2181      	movs	r1, #129	; 0x81
 8014b18:	f7f5 fde5 	bl	800a6e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b26:	2200      	movs	r2, #0
 8014b28:	2101      	movs	r1, #1
 8014b2a:	f7f5 fddc 	bl	800a6e6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014b38:	2200      	movs	r2, #0
 8014b3a:	2182      	movs	r1, #130	; 0x82
 8014b3c:	f7f5 fdd3 	bl	800a6e6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014b40:	2300      	movs	r3, #0
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3708      	adds	r7, #8
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	20002890 	.word	0x20002890
 8014b50:	40005c00 	.word	0x40005c00

08014b54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b084      	sub	sp, #16
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b60:	2300      	movs	r3, #0
 8014b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f4 f9c2 	bl	8008ef4 <HAL_PCD_Start>
 8014b70:	4603      	mov	r3, r0
 8014b72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b74:	7bfb      	ldrb	r3, [r7, #15]
 8014b76:	4618      	mov	r0, r3
 8014b78:	f000 f97e 	bl	8014e78 <USBD_Get_USB_Status>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b80:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	4608      	mov	r0, r1
 8014b94:	4611      	mov	r1, r2
 8014b96:	461a      	mov	r2, r3
 8014b98:	4603      	mov	r3, r0
 8014b9a:	70fb      	strb	r3, [r7, #3]
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	70bb      	strb	r3, [r7, #2]
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bb2:	78bb      	ldrb	r3, [r7, #2]
 8014bb4:	883a      	ldrh	r2, [r7, #0]
 8014bb6:	78f9      	ldrb	r1, [r7, #3]
 8014bb8:	f7f4 fb09 	bl	80091ce <HAL_PCD_EP_Open>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bc0:	7bfb      	ldrb	r3, [r7, #15]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f000 f958 	bl	8014e78 <USBD_Get_USB_Status>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b084      	sub	sp, #16
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	460b      	mov	r3, r1
 8014be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014be2:	2300      	movs	r3, #0
 8014be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014be6:	2300      	movs	r3, #0
 8014be8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014bf0:	78fa      	ldrb	r2, [r7, #3]
 8014bf2:	4611      	mov	r1, r2
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7f4 fb47 	bl	8009288 <HAL_PCD_EP_Close>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bfe:	7bfb      	ldrb	r3, [r7, #15]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f000 f939 	bl	8014e78 <USBD_Get_USB_Status>
 8014c06:	4603      	mov	r3, r0
 8014c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3710      	adds	r7, #16
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd80      	pop	{r7, pc}

08014c14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c20:	2300      	movs	r3, #0
 8014c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c24:	2300      	movs	r3, #0
 8014c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c2e:	78fa      	ldrb	r2, [r7, #3]
 8014c30:	4611      	mov	r1, r2
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7f4 fbf0 	bl	8009418 <HAL_PCD_EP_SetStall>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f000 f91a 	bl	8014e78 <USBD_Get_USB_Status>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3710      	adds	r7, #16
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}

08014c52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c52:	b580      	push	{r7, lr}
 8014c54:	b084      	sub	sp, #16
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c62:	2300      	movs	r3, #0
 8014c64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c6c:	78fa      	ldrb	r2, [r7, #3]
 8014c6e:	4611      	mov	r1, r2
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7f4 fc23 	bl	80094bc <HAL_PCD_EP_ClrStall>
 8014c76:	4603      	mov	r3, r0
 8014c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c7a:	7bfb      	ldrb	r3, [r7, #15]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f000 f8fb 	bl	8014e78 <USBD_Get_USB_Status>
 8014c82:	4603      	mov	r3, r0
 8014c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	3710      	adds	r7, #16
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}

08014c90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	460b      	mov	r3, r1
 8014c9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	da0b      	bge.n	8014cc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014cac:	78fb      	ldrb	r3, [r7, #3]
 8014cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cb2:	68f9      	ldr	r1, [r7, #12]
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	4413      	add	r3, r2
 8014cba:	00db      	lsls	r3, r3, #3
 8014cbc:	440b      	add	r3, r1
 8014cbe:	3312      	adds	r3, #18
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	e00b      	b.n	8014cdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014cc4:	78fb      	ldrb	r3, [r7, #3]
 8014cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cca:	68f9      	ldr	r1, [r7, #12]
 8014ccc:	4613      	mov	r3, r2
 8014cce:	009b      	lsls	r3, r3, #2
 8014cd0:	4413      	add	r3, r2
 8014cd2:	00db      	lsls	r3, r3, #3
 8014cd4:	440b      	add	r3, r1
 8014cd6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8014cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3714      	adds	r7, #20
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b084      	sub	sp, #16
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d02:	78fa      	ldrb	r2, [r7, #3]
 8014d04:	4611      	mov	r1, r2
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7f4 fa3d 	bl	8009186 <HAL_PCD_SetAddress>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d10:	7bfb      	ldrb	r3, [r7, #15]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f000 f8b0 	bl	8014e78 <USBD_Get_USB_Status>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3710      	adds	r7, #16
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}

08014d26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014d26:	b580      	push	{r7, lr}
 8014d28:	b086      	sub	sp, #24
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	60f8      	str	r0, [r7, #12]
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	603b      	str	r3, [r7, #0]
 8014d32:	460b      	mov	r3, r1
 8014d34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d36:	2300      	movs	r3, #0
 8014d38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014d44:	7af9      	ldrb	r1, [r7, #11]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	f7f4 fb2e 	bl	80093aa <HAL_PCD_EP_Transmit>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d52:	7dfb      	ldrb	r3, [r7, #23]
 8014d54:	4618      	mov	r0, r3
 8014d56:	f000 f88f 	bl	8014e78 <USBD_Get_USB_Status>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b086      	sub	sp, #24
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	607a      	str	r2, [r7, #4]
 8014d72:	603b      	str	r3, [r7, #0]
 8014d74:	460b      	mov	r3, r1
 8014d76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014d86:	7af9      	ldrb	r1, [r7, #11]
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	f7f4 fac4 	bl	8009318 <HAL_PCD_EP_Receive>
 8014d90:	4603      	mov	r3, r0
 8014d92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d94:	7dfb      	ldrb	r3, [r7, #23]
 8014d96:	4618      	mov	r0, r3
 8014d98:	f000 f86e 	bl	8014e78 <USBD_Get_USB_Status>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014da0:	7dbb      	ldrb	r3, [r7, #22]
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3718      	adds	r7, #24
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}

08014daa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014daa:	b580      	push	{r7, lr}
 8014dac:	b082      	sub	sp, #8
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	460b      	mov	r3, r1
 8014db4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dbc:	78fa      	ldrb	r2, [r7, #3]
 8014dbe:	4611      	mov	r1, r2
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f4 fada 	bl	800937a <HAL_PCD_EP_GetRxCount>
 8014dc6:	4603      	mov	r3, r0
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8014ddc:	78fb      	ldrb	r3, [r7, #3]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d002      	beq.n	8014de8 <HAL_PCDEx_LPM_Callback+0x18>
 8014de2:	2b01      	cmp	r3, #1
 8014de4:	d013      	beq.n	8014e0e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8014de6:	e023      	b.n	8014e30 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	7a5b      	ldrb	r3, [r3, #9]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d007      	beq.n	8014e00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014df0:	f000 f83c 	bl	8014e6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014df4:	4b10      	ldr	r3, [pc, #64]	; (8014e38 <HAL_PCDEx_LPM_Callback+0x68>)
 8014df6:	691b      	ldr	r3, [r3, #16]
 8014df8:	4a0f      	ldr	r2, [pc, #60]	; (8014e38 <HAL_PCDEx_LPM_Callback+0x68>)
 8014dfa:	f023 0306 	bic.w	r3, r3, #6
 8014dfe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e06:	4618      	mov	r0, r3
 8014e08:	f7fe fc9c 	bl	8013744 <USBD_LL_Resume>
    break;
 8014e0c:	e010      	b.n	8014e30 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7fe fc7f 	bl	8013718 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	7a5b      	ldrb	r3, [r3, #9]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d005      	beq.n	8014e2e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014e22:	4b05      	ldr	r3, [pc, #20]	; (8014e38 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	4a04      	ldr	r2, [pc, #16]	; (8014e38 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e28:	f043 0306 	orr.w	r3, r3, #6
 8014e2c:	6113      	str	r3, [r2, #16]
    break;
 8014e2e:	bf00      	nop
}
 8014e30:	bf00      	nop
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	e000ed00 	.word	0xe000ed00

08014e3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014e3c:	b480      	push	{r7}
 8014e3e:	b083      	sub	sp, #12
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014e44:	4b03      	ldr	r3, [pc, #12]	; (8014e54 <USBD_static_malloc+0x18>)
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	370c      	adds	r7, #12
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop
 8014e54:	20002b6c 	.word	0x20002b6c

08014e58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]

}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014e70:	f7ee f8f0 	bl	8003054 <SystemClock_Config>
}
 8014e74:	bf00      	nop
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014e78:	b480      	push	{r7}
 8014e7a:	b085      	sub	sp, #20
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	4603      	mov	r3, r0
 8014e80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e82:	2300      	movs	r3, #0
 8014e84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014e86:	79fb      	ldrb	r3, [r7, #7]
 8014e88:	2b03      	cmp	r3, #3
 8014e8a:	d817      	bhi.n	8014ebc <USBD_Get_USB_Status+0x44>
 8014e8c:	a201      	add	r2, pc, #4	; (adr r2, 8014e94 <USBD_Get_USB_Status+0x1c>)
 8014e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e92:	bf00      	nop
 8014e94:	08014ea5 	.word	0x08014ea5
 8014e98:	08014eab 	.word	0x08014eab
 8014e9c:	08014eb1 	.word	0x08014eb1
 8014ea0:	08014eb7 	.word	0x08014eb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8014ea8:	e00b      	b.n	8014ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014eaa:	2303      	movs	r3, #3
 8014eac:	73fb      	strb	r3, [r7, #15]
    break;
 8014eae:	e008      	b.n	8014ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8014eb4:	e005      	b.n	8014ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8014eba:	e002      	b.n	8014ec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014ebc:	2303      	movs	r3, #3
 8014ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8014ec0:	bf00      	nop
  }
  return usb_status;
 8014ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3714      	adds	r7, #20
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ece:	4770      	bx	lr

08014ed0 <__cvt>:
 8014ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ed4:	ec55 4b10 	vmov	r4, r5, d0
 8014ed8:	2d00      	cmp	r5, #0
 8014eda:	460e      	mov	r6, r1
 8014edc:	4619      	mov	r1, r3
 8014ede:	462b      	mov	r3, r5
 8014ee0:	bfbb      	ittet	lt
 8014ee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014ee6:	461d      	movlt	r5, r3
 8014ee8:	2300      	movge	r3, #0
 8014eea:	232d      	movlt	r3, #45	; 0x2d
 8014eec:	700b      	strb	r3, [r1, #0]
 8014eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014ef4:	4691      	mov	r9, r2
 8014ef6:	f023 0820 	bic.w	r8, r3, #32
 8014efa:	bfbc      	itt	lt
 8014efc:	4622      	movlt	r2, r4
 8014efe:	4614      	movlt	r4, r2
 8014f00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014f04:	d005      	beq.n	8014f12 <__cvt+0x42>
 8014f06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014f0a:	d100      	bne.n	8014f0e <__cvt+0x3e>
 8014f0c:	3601      	adds	r6, #1
 8014f0e:	2102      	movs	r1, #2
 8014f10:	e000      	b.n	8014f14 <__cvt+0x44>
 8014f12:	2103      	movs	r1, #3
 8014f14:	ab03      	add	r3, sp, #12
 8014f16:	9301      	str	r3, [sp, #4]
 8014f18:	ab02      	add	r3, sp, #8
 8014f1a:	9300      	str	r3, [sp, #0]
 8014f1c:	ec45 4b10 	vmov	d0, r4, r5
 8014f20:	4653      	mov	r3, sl
 8014f22:	4632      	mov	r2, r6
 8014f24:	f000 fe68 	bl	8015bf8 <_dtoa_r>
 8014f28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014f2c:	4607      	mov	r7, r0
 8014f2e:	d102      	bne.n	8014f36 <__cvt+0x66>
 8014f30:	f019 0f01 	tst.w	r9, #1
 8014f34:	d022      	beq.n	8014f7c <__cvt+0xac>
 8014f36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014f3a:	eb07 0906 	add.w	r9, r7, r6
 8014f3e:	d110      	bne.n	8014f62 <__cvt+0x92>
 8014f40:	783b      	ldrb	r3, [r7, #0]
 8014f42:	2b30      	cmp	r3, #48	; 0x30
 8014f44:	d10a      	bne.n	8014f5c <__cvt+0x8c>
 8014f46:	2200      	movs	r2, #0
 8014f48:	2300      	movs	r3, #0
 8014f4a:	4620      	mov	r0, r4
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	f7eb fde3 	bl	8000b18 <__aeabi_dcmpeq>
 8014f52:	b918      	cbnz	r0, 8014f5c <__cvt+0x8c>
 8014f54:	f1c6 0601 	rsb	r6, r6, #1
 8014f58:	f8ca 6000 	str.w	r6, [sl]
 8014f5c:	f8da 3000 	ldr.w	r3, [sl]
 8014f60:	4499      	add	r9, r3
 8014f62:	2200      	movs	r2, #0
 8014f64:	2300      	movs	r3, #0
 8014f66:	4620      	mov	r0, r4
 8014f68:	4629      	mov	r1, r5
 8014f6a:	f7eb fdd5 	bl	8000b18 <__aeabi_dcmpeq>
 8014f6e:	b108      	cbz	r0, 8014f74 <__cvt+0xa4>
 8014f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8014f74:	2230      	movs	r2, #48	; 0x30
 8014f76:	9b03      	ldr	r3, [sp, #12]
 8014f78:	454b      	cmp	r3, r9
 8014f7a:	d307      	bcc.n	8014f8c <__cvt+0xbc>
 8014f7c:	9b03      	ldr	r3, [sp, #12]
 8014f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f80:	1bdb      	subs	r3, r3, r7
 8014f82:	4638      	mov	r0, r7
 8014f84:	6013      	str	r3, [r2, #0]
 8014f86:	b004      	add	sp, #16
 8014f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f8c:	1c59      	adds	r1, r3, #1
 8014f8e:	9103      	str	r1, [sp, #12]
 8014f90:	701a      	strb	r2, [r3, #0]
 8014f92:	e7f0      	b.n	8014f76 <__cvt+0xa6>

08014f94 <__exponent>:
 8014f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f96:	4603      	mov	r3, r0
 8014f98:	2900      	cmp	r1, #0
 8014f9a:	bfb8      	it	lt
 8014f9c:	4249      	neglt	r1, r1
 8014f9e:	f803 2b02 	strb.w	r2, [r3], #2
 8014fa2:	bfb4      	ite	lt
 8014fa4:	222d      	movlt	r2, #45	; 0x2d
 8014fa6:	222b      	movge	r2, #43	; 0x2b
 8014fa8:	2909      	cmp	r1, #9
 8014faa:	7042      	strb	r2, [r0, #1]
 8014fac:	dd2a      	ble.n	8015004 <__exponent+0x70>
 8014fae:	f10d 0207 	add.w	r2, sp, #7
 8014fb2:	4617      	mov	r7, r2
 8014fb4:	260a      	movs	r6, #10
 8014fb6:	4694      	mov	ip, r2
 8014fb8:	fb91 f5f6 	sdiv	r5, r1, r6
 8014fbc:	fb06 1415 	mls	r4, r6, r5, r1
 8014fc0:	3430      	adds	r4, #48	; 0x30
 8014fc2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014fc6:	460c      	mov	r4, r1
 8014fc8:	2c63      	cmp	r4, #99	; 0x63
 8014fca:	f102 32ff 	add.w	r2, r2, #4294967295
 8014fce:	4629      	mov	r1, r5
 8014fd0:	dcf1      	bgt.n	8014fb6 <__exponent+0x22>
 8014fd2:	3130      	adds	r1, #48	; 0x30
 8014fd4:	f1ac 0402 	sub.w	r4, ip, #2
 8014fd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014fdc:	1c41      	adds	r1, r0, #1
 8014fde:	4622      	mov	r2, r4
 8014fe0:	42ba      	cmp	r2, r7
 8014fe2:	d30a      	bcc.n	8014ffa <__exponent+0x66>
 8014fe4:	f10d 0209 	add.w	r2, sp, #9
 8014fe8:	eba2 020c 	sub.w	r2, r2, ip
 8014fec:	42bc      	cmp	r4, r7
 8014fee:	bf88      	it	hi
 8014ff0:	2200      	movhi	r2, #0
 8014ff2:	4413      	add	r3, r2
 8014ff4:	1a18      	subs	r0, r3, r0
 8014ff6:	b003      	add	sp, #12
 8014ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ffa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014ffe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015002:	e7ed      	b.n	8014fe0 <__exponent+0x4c>
 8015004:	2330      	movs	r3, #48	; 0x30
 8015006:	3130      	adds	r1, #48	; 0x30
 8015008:	7083      	strb	r3, [r0, #2]
 801500a:	70c1      	strb	r1, [r0, #3]
 801500c:	1d03      	adds	r3, r0, #4
 801500e:	e7f1      	b.n	8014ff4 <__exponent+0x60>

08015010 <_printf_float>:
 8015010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015014:	ed2d 8b02 	vpush	{d8}
 8015018:	b08d      	sub	sp, #52	; 0x34
 801501a:	460c      	mov	r4, r1
 801501c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015020:	4616      	mov	r6, r2
 8015022:	461f      	mov	r7, r3
 8015024:	4605      	mov	r5, r0
 8015026:	f000 fce7 	bl	80159f8 <_localeconv_r>
 801502a:	f8d0 a000 	ldr.w	sl, [r0]
 801502e:	4650      	mov	r0, sl
 8015030:	f7eb f946 	bl	80002c0 <strlen>
 8015034:	2300      	movs	r3, #0
 8015036:	930a      	str	r3, [sp, #40]	; 0x28
 8015038:	6823      	ldr	r3, [r4, #0]
 801503a:	9305      	str	r3, [sp, #20]
 801503c:	f8d8 3000 	ldr.w	r3, [r8]
 8015040:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015044:	3307      	adds	r3, #7
 8015046:	f023 0307 	bic.w	r3, r3, #7
 801504a:	f103 0208 	add.w	r2, r3, #8
 801504e:	f8c8 2000 	str.w	r2, [r8]
 8015052:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801505a:	9307      	str	r3, [sp, #28]
 801505c:	f8cd 8018 	str.w	r8, [sp, #24]
 8015060:	ee08 0a10 	vmov	s16, r0
 8015064:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801506c:	4b9e      	ldr	r3, [pc, #632]	; (80152e8 <_printf_float+0x2d8>)
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	f7eb fd83 	bl	8000b7c <__aeabi_dcmpun>
 8015076:	bb88      	cbnz	r0, 80150dc <_printf_float+0xcc>
 8015078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801507c:	4b9a      	ldr	r3, [pc, #616]	; (80152e8 <_printf_float+0x2d8>)
 801507e:	f04f 32ff 	mov.w	r2, #4294967295
 8015082:	f7eb fd5d 	bl	8000b40 <__aeabi_dcmple>
 8015086:	bb48      	cbnz	r0, 80150dc <_printf_float+0xcc>
 8015088:	2200      	movs	r2, #0
 801508a:	2300      	movs	r3, #0
 801508c:	4640      	mov	r0, r8
 801508e:	4649      	mov	r1, r9
 8015090:	f7eb fd4c 	bl	8000b2c <__aeabi_dcmplt>
 8015094:	b110      	cbz	r0, 801509c <_printf_float+0x8c>
 8015096:	232d      	movs	r3, #45	; 0x2d
 8015098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801509c:	4a93      	ldr	r2, [pc, #588]	; (80152ec <_printf_float+0x2dc>)
 801509e:	4b94      	ldr	r3, [pc, #592]	; (80152f0 <_printf_float+0x2e0>)
 80150a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80150a4:	bf94      	ite	ls
 80150a6:	4690      	movls	r8, r2
 80150a8:	4698      	movhi	r8, r3
 80150aa:	2303      	movs	r3, #3
 80150ac:	6123      	str	r3, [r4, #16]
 80150ae:	9b05      	ldr	r3, [sp, #20]
 80150b0:	f023 0304 	bic.w	r3, r3, #4
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	f04f 0900 	mov.w	r9, #0
 80150ba:	9700      	str	r7, [sp, #0]
 80150bc:	4633      	mov	r3, r6
 80150be:	aa0b      	add	r2, sp, #44	; 0x2c
 80150c0:	4621      	mov	r1, r4
 80150c2:	4628      	mov	r0, r5
 80150c4:	f000 f9da 	bl	801547c <_printf_common>
 80150c8:	3001      	adds	r0, #1
 80150ca:	f040 8090 	bne.w	80151ee <_printf_float+0x1de>
 80150ce:	f04f 30ff 	mov.w	r0, #4294967295
 80150d2:	b00d      	add	sp, #52	; 0x34
 80150d4:	ecbd 8b02 	vpop	{d8}
 80150d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150dc:	4642      	mov	r2, r8
 80150de:	464b      	mov	r3, r9
 80150e0:	4640      	mov	r0, r8
 80150e2:	4649      	mov	r1, r9
 80150e4:	f7eb fd4a 	bl	8000b7c <__aeabi_dcmpun>
 80150e8:	b140      	cbz	r0, 80150fc <_printf_float+0xec>
 80150ea:	464b      	mov	r3, r9
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	bfbc      	itt	lt
 80150f0:	232d      	movlt	r3, #45	; 0x2d
 80150f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80150f6:	4a7f      	ldr	r2, [pc, #508]	; (80152f4 <_printf_float+0x2e4>)
 80150f8:	4b7f      	ldr	r3, [pc, #508]	; (80152f8 <_printf_float+0x2e8>)
 80150fa:	e7d1      	b.n	80150a0 <_printf_float+0x90>
 80150fc:	6863      	ldr	r3, [r4, #4]
 80150fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015102:	9206      	str	r2, [sp, #24]
 8015104:	1c5a      	adds	r2, r3, #1
 8015106:	d13f      	bne.n	8015188 <_printf_float+0x178>
 8015108:	2306      	movs	r3, #6
 801510a:	6063      	str	r3, [r4, #4]
 801510c:	9b05      	ldr	r3, [sp, #20]
 801510e:	6861      	ldr	r1, [r4, #4]
 8015110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015114:	2300      	movs	r3, #0
 8015116:	9303      	str	r3, [sp, #12]
 8015118:	ab0a      	add	r3, sp, #40	; 0x28
 801511a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801511e:	ab09      	add	r3, sp, #36	; 0x24
 8015120:	ec49 8b10 	vmov	d0, r8, r9
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	6022      	str	r2, [r4, #0]
 8015128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801512c:	4628      	mov	r0, r5
 801512e:	f7ff fecf 	bl	8014ed0 <__cvt>
 8015132:	9b06      	ldr	r3, [sp, #24]
 8015134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015136:	2b47      	cmp	r3, #71	; 0x47
 8015138:	4680      	mov	r8, r0
 801513a:	d108      	bne.n	801514e <_printf_float+0x13e>
 801513c:	1cc8      	adds	r0, r1, #3
 801513e:	db02      	blt.n	8015146 <_printf_float+0x136>
 8015140:	6863      	ldr	r3, [r4, #4]
 8015142:	4299      	cmp	r1, r3
 8015144:	dd41      	ble.n	80151ca <_printf_float+0x1ba>
 8015146:	f1ab 0302 	sub.w	r3, fp, #2
 801514a:	fa5f fb83 	uxtb.w	fp, r3
 801514e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015152:	d820      	bhi.n	8015196 <_printf_float+0x186>
 8015154:	3901      	subs	r1, #1
 8015156:	465a      	mov	r2, fp
 8015158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801515c:	9109      	str	r1, [sp, #36]	; 0x24
 801515e:	f7ff ff19 	bl	8014f94 <__exponent>
 8015162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015164:	1813      	adds	r3, r2, r0
 8015166:	2a01      	cmp	r2, #1
 8015168:	4681      	mov	r9, r0
 801516a:	6123      	str	r3, [r4, #16]
 801516c:	dc02      	bgt.n	8015174 <_printf_float+0x164>
 801516e:	6822      	ldr	r2, [r4, #0]
 8015170:	07d2      	lsls	r2, r2, #31
 8015172:	d501      	bpl.n	8015178 <_printf_float+0x168>
 8015174:	3301      	adds	r3, #1
 8015176:	6123      	str	r3, [r4, #16]
 8015178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801517c:	2b00      	cmp	r3, #0
 801517e:	d09c      	beq.n	80150ba <_printf_float+0xaa>
 8015180:	232d      	movs	r3, #45	; 0x2d
 8015182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015186:	e798      	b.n	80150ba <_printf_float+0xaa>
 8015188:	9a06      	ldr	r2, [sp, #24]
 801518a:	2a47      	cmp	r2, #71	; 0x47
 801518c:	d1be      	bne.n	801510c <_printf_float+0xfc>
 801518e:	2b00      	cmp	r3, #0
 8015190:	d1bc      	bne.n	801510c <_printf_float+0xfc>
 8015192:	2301      	movs	r3, #1
 8015194:	e7b9      	b.n	801510a <_printf_float+0xfa>
 8015196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801519a:	d118      	bne.n	80151ce <_printf_float+0x1be>
 801519c:	2900      	cmp	r1, #0
 801519e:	6863      	ldr	r3, [r4, #4]
 80151a0:	dd0b      	ble.n	80151ba <_printf_float+0x1aa>
 80151a2:	6121      	str	r1, [r4, #16]
 80151a4:	b913      	cbnz	r3, 80151ac <_printf_float+0x19c>
 80151a6:	6822      	ldr	r2, [r4, #0]
 80151a8:	07d0      	lsls	r0, r2, #31
 80151aa:	d502      	bpl.n	80151b2 <_printf_float+0x1a2>
 80151ac:	3301      	adds	r3, #1
 80151ae:	440b      	add	r3, r1
 80151b0:	6123      	str	r3, [r4, #16]
 80151b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80151b4:	f04f 0900 	mov.w	r9, #0
 80151b8:	e7de      	b.n	8015178 <_printf_float+0x168>
 80151ba:	b913      	cbnz	r3, 80151c2 <_printf_float+0x1b2>
 80151bc:	6822      	ldr	r2, [r4, #0]
 80151be:	07d2      	lsls	r2, r2, #31
 80151c0:	d501      	bpl.n	80151c6 <_printf_float+0x1b6>
 80151c2:	3302      	adds	r3, #2
 80151c4:	e7f4      	b.n	80151b0 <_printf_float+0x1a0>
 80151c6:	2301      	movs	r3, #1
 80151c8:	e7f2      	b.n	80151b0 <_printf_float+0x1a0>
 80151ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80151ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151d0:	4299      	cmp	r1, r3
 80151d2:	db05      	blt.n	80151e0 <_printf_float+0x1d0>
 80151d4:	6823      	ldr	r3, [r4, #0]
 80151d6:	6121      	str	r1, [r4, #16]
 80151d8:	07d8      	lsls	r0, r3, #31
 80151da:	d5ea      	bpl.n	80151b2 <_printf_float+0x1a2>
 80151dc:	1c4b      	adds	r3, r1, #1
 80151de:	e7e7      	b.n	80151b0 <_printf_float+0x1a0>
 80151e0:	2900      	cmp	r1, #0
 80151e2:	bfd4      	ite	le
 80151e4:	f1c1 0202 	rsble	r2, r1, #2
 80151e8:	2201      	movgt	r2, #1
 80151ea:	4413      	add	r3, r2
 80151ec:	e7e0      	b.n	80151b0 <_printf_float+0x1a0>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	055a      	lsls	r2, r3, #21
 80151f2:	d407      	bmi.n	8015204 <_printf_float+0x1f4>
 80151f4:	6923      	ldr	r3, [r4, #16]
 80151f6:	4642      	mov	r2, r8
 80151f8:	4631      	mov	r1, r6
 80151fa:	4628      	mov	r0, r5
 80151fc:	47b8      	blx	r7
 80151fe:	3001      	adds	r0, #1
 8015200:	d12c      	bne.n	801525c <_printf_float+0x24c>
 8015202:	e764      	b.n	80150ce <_printf_float+0xbe>
 8015204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015208:	f240 80e0 	bls.w	80153cc <_printf_float+0x3bc>
 801520c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015210:	2200      	movs	r2, #0
 8015212:	2300      	movs	r3, #0
 8015214:	f7eb fc80 	bl	8000b18 <__aeabi_dcmpeq>
 8015218:	2800      	cmp	r0, #0
 801521a:	d034      	beq.n	8015286 <_printf_float+0x276>
 801521c:	4a37      	ldr	r2, [pc, #220]	; (80152fc <_printf_float+0x2ec>)
 801521e:	2301      	movs	r3, #1
 8015220:	4631      	mov	r1, r6
 8015222:	4628      	mov	r0, r5
 8015224:	47b8      	blx	r7
 8015226:	3001      	adds	r0, #1
 8015228:	f43f af51 	beq.w	80150ce <_printf_float+0xbe>
 801522c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015230:	429a      	cmp	r2, r3
 8015232:	db02      	blt.n	801523a <_printf_float+0x22a>
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	07d8      	lsls	r0, r3, #31
 8015238:	d510      	bpl.n	801525c <_printf_float+0x24c>
 801523a:	ee18 3a10 	vmov	r3, s16
 801523e:	4652      	mov	r2, sl
 8015240:	4631      	mov	r1, r6
 8015242:	4628      	mov	r0, r5
 8015244:	47b8      	blx	r7
 8015246:	3001      	adds	r0, #1
 8015248:	f43f af41 	beq.w	80150ce <_printf_float+0xbe>
 801524c:	f04f 0800 	mov.w	r8, #0
 8015250:	f104 091a 	add.w	r9, r4, #26
 8015254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015256:	3b01      	subs	r3, #1
 8015258:	4543      	cmp	r3, r8
 801525a:	dc09      	bgt.n	8015270 <_printf_float+0x260>
 801525c:	6823      	ldr	r3, [r4, #0]
 801525e:	079b      	lsls	r3, r3, #30
 8015260:	f100 8107 	bmi.w	8015472 <_printf_float+0x462>
 8015264:	68e0      	ldr	r0, [r4, #12]
 8015266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015268:	4298      	cmp	r0, r3
 801526a:	bfb8      	it	lt
 801526c:	4618      	movlt	r0, r3
 801526e:	e730      	b.n	80150d2 <_printf_float+0xc2>
 8015270:	2301      	movs	r3, #1
 8015272:	464a      	mov	r2, r9
 8015274:	4631      	mov	r1, r6
 8015276:	4628      	mov	r0, r5
 8015278:	47b8      	blx	r7
 801527a:	3001      	adds	r0, #1
 801527c:	f43f af27 	beq.w	80150ce <_printf_float+0xbe>
 8015280:	f108 0801 	add.w	r8, r8, #1
 8015284:	e7e6      	b.n	8015254 <_printf_float+0x244>
 8015286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015288:	2b00      	cmp	r3, #0
 801528a:	dc39      	bgt.n	8015300 <_printf_float+0x2f0>
 801528c:	4a1b      	ldr	r2, [pc, #108]	; (80152fc <_printf_float+0x2ec>)
 801528e:	2301      	movs	r3, #1
 8015290:	4631      	mov	r1, r6
 8015292:	4628      	mov	r0, r5
 8015294:	47b8      	blx	r7
 8015296:	3001      	adds	r0, #1
 8015298:	f43f af19 	beq.w	80150ce <_printf_float+0xbe>
 801529c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80152a0:	4313      	orrs	r3, r2
 80152a2:	d102      	bne.n	80152aa <_printf_float+0x29a>
 80152a4:	6823      	ldr	r3, [r4, #0]
 80152a6:	07d9      	lsls	r1, r3, #31
 80152a8:	d5d8      	bpl.n	801525c <_printf_float+0x24c>
 80152aa:	ee18 3a10 	vmov	r3, s16
 80152ae:	4652      	mov	r2, sl
 80152b0:	4631      	mov	r1, r6
 80152b2:	4628      	mov	r0, r5
 80152b4:	47b8      	blx	r7
 80152b6:	3001      	adds	r0, #1
 80152b8:	f43f af09 	beq.w	80150ce <_printf_float+0xbe>
 80152bc:	f04f 0900 	mov.w	r9, #0
 80152c0:	f104 0a1a 	add.w	sl, r4, #26
 80152c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c6:	425b      	negs	r3, r3
 80152c8:	454b      	cmp	r3, r9
 80152ca:	dc01      	bgt.n	80152d0 <_printf_float+0x2c0>
 80152cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152ce:	e792      	b.n	80151f6 <_printf_float+0x1e6>
 80152d0:	2301      	movs	r3, #1
 80152d2:	4652      	mov	r2, sl
 80152d4:	4631      	mov	r1, r6
 80152d6:	4628      	mov	r0, r5
 80152d8:	47b8      	blx	r7
 80152da:	3001      	adds	r0, #1
 80152dc:	f43f aef7 	beq.w	80150ce <_printf_float+0xbe>
 80152e0:	f109 0901 	add.w	r9, r9, #1
 80152e4:	e7ee      	b.n	80152c4 <_printf_float+0x2b4>
 80152e6:	bf00      	nop
 80152e8:	7fefffff 	.word	0x7fefffff
 80152ec:	0801b5ac 	.word	0x0801b5ac
 80152f0:	0801b5b0 	.word	0x0801b5b0
 80152f4:	0801b5b4 	.word	0x0801b5b4
 80152f8:	0801b5b8 	.word	0x0801b5b8
 80152fc:	0801b5bc 	.word	0x0801b5bc
 8015300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015304:	429a      	cmp	r2, r3
 8015306:	bfa8      	it	ge
 8015308:	461a      	movge	r2, r3
 801530a:	2a00      	cmp	r2, #0
 801530c:	4691      	mov	r9, r2
 801530e:	dc37      	bgt.n	8015380 <_printf_float+0x370>
 8015310:	f04f 0b00 	mov.w	fp, #0
 8015314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015318:	f104 021a 	add.w	r2, r4, #26
 801531c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801531e:	9305      	str	r3, [sp, #20]
 8015320:	eba3 0309 	sub.w	r3, r3, r9
 8015324:	455b      	cmp	r3, fp
 8015326:	dc33      	bgt.n	8015390 <_printf_float+0x380>
 8015328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801532c:	429a      	cmp	r2, r3
 801532e:	db3b      	blt.n	80153a8 <_printf_float+0x398>
 8015330:	6823      	ldr	r3, [r4, #0]
 8015332:	07da      	lsls	r2, r3, #31
 8015334:	d438      	bmi.n	80153a8 <_printf_float+0x398>
 8015336:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801533a:	eba2 0903 	sub.w	r9, r2, r3
 801533e:	9b05      	ldr	r3, [sp, #20]
 8015340:	1ad2      	subs	r2, r2, r3
 8015342:	4591      	cmp	r9, r2
 8015344:	bfa8      	it	ge
 8015346:	4691      	movge	r9, r2
 8015348:	f1b9 0f00 	cmp.w	r9, #0
 801534c:	dc35      	bgt.n	80153ba <_printf_float+0x3aa>
 801534e:	f04f 0800 	mov.w	r8, #0
 8015352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015356:	f104 0a1a 	add.w	sl, r4, #26
 801535a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801535e:	1a9b      	subs	r3, r3, r2
 8015360:	eba3 0309 	sub.w	r3, r3, r9
 8015364:	4543      	cmp	r3, r8
 8015366:	f77f af79 	ble.w	801525c <_printf_float+0x24c>
 801536a:	2301      	movs	r3, #1
 801536c:	4652      	mov	r2, sl
 801536e:	4631      	mov	r1, r6
 8015370:	4628      	mov	r0, r5
 8015372:	47b8      	blx	r7
 8015374:	3001      	adds	r0, #1
 8015376:	f43f aeaa 	beq.w	80150ce <_printf_float+0xbe>
 801537a:	f108 0801 	add.w	r8, r8, #1
 801537e:	e7ec      	b.n	801535a <_printf_float+0x34a>
 8015380:	4613      	mov	r3, r2
 8015382:	4631      	mov	r1, r6
 8015384:	4642      	mov	r2, r8
 8015386:	4628      	mov	r0, r5
 8015388:	47b8      	blx	r7
 801538a:	3001      	adds	r0, #1
 801538c:	d1c0      	bne.n	8015310 <_printf_float+0x300>
 801538e:	e69e      	b.n	80150ce <_printf_float+0xbe>
 8015390:	2301      	movs	r3, #1
 8015392:	4631      	mov	r1, r6
 8015394:	4628      	mov	r0, r5
 8015396:	9205      	str	r2, [sp, #20]
 8015398:	47b8      	blx	r7
 801539a:	3001      	adds	r0, #1
 801539c:	f43f ae97 	beq.w	80150ce <_printf_float+0xbe>
 80153a0:	9a05      	ldr	r2, [sp, #20]
 80153a2:	f10b 0b01 	add.w	fp, fp, #1
 80153a6:	e7b9      	b.n	801531c <_printf_float+0x30c>
 80153a8:	ee18 3a10 	vmov	r3, s16
 80153ac:	4652      	mov	r2, sl
 80153ae:	4631      	mov	r1, r6
 80153b0:	4628      	mov	r0, r5
 80153b2:	47b8      	blx	r7
 80153b4:	3001      	adds	r0, #1
 80153b6:	d1be      	bne.n	8015336 <_printf_float+0x326>
 80153b8:	e689      	b.n	80150ce <_printf_float+0xbe>
 80153ba:	9a05      	ldr	r2, [sp, #20]
 80153bc:	464b      	mov	r3, r9
 80153be:	4442      	add	r2, r8
 80153c0:	4631      	mov	r1, r6
 80153c2:	4628      	mov	r0, r5
 80153c4:	47b8      	blx	r7
 80153c6:	3001      	adds	r0, #1
 80153c8:	d1c1      	bne.n	801534e <_printf_float+0x33e>
 80153ca:	e680      	b.n	80150ce <_printf_float+0xbe>
 80153cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153ce:	2a01      	cmp	r2, #1
 80153d0:	dc01      	bgt.n	80153d6 <_printf_float+0x3c6>
 80153d2:	07db      	lsls	r3, r3, #31
 80153d4:	d53a      	bpl.n	801544c <_printf_float+0x43c>
 80153d6:	2301      	movs	r3, #1
 80153d8:	4642      	mov	r2, r8
 80153da:	4631      	mov	r1, r6
 80153dc:	4628      	mov	r0, r5
 80153de:	47b8      	blx	r7
 80153e0:	3001      	adds	r0, #1
 80153e2:	f43f ae74 	beq.w	80150ce <_printf_float+0xbe>
 80153e6:	ee18 3a10 	vmov	r3, s16
 80153ea:	4652      	mov	r2, sl
 80153ec:	4631      	mov	r1, r6
 80153ee:	4628      	mov	r0, r5
 80153f0:	47b8      	blx	r7
 80153f2:	3001      	adds	r0, #1
 80153f4:	f43f ae6b 	beq.w	80150ce <_printf_float+0xbe>
 80153f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80153fc:	2200      	movs	r2, #0
 80153fe:	2300      	movs	r3, #0
 8015400:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015404:	f7eb fb88 	bl	8000b18 <__aeabi_dcmpeq>
 8015408:	b9d8      	cbnz	r0, 8015442 <_printf_float+0x432>
 801540a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801540e:	f108 0201 	add.w	r2, r8, #1
 8015412:	4631      	mov	r1, r6
 8015414:	4628      	mov	r0, r5
 8015416:	47b8      	blx	r7
 8015418:	3001      	adds	r0, #1
 801541a:	d10e      	bne.n	801543a <_printf_float+0x42a>
 801541c:	e657      	b.n	80150ce <_printf_float+0xbe>
 801541e:	2301      	movs	r3, #1
 8015420:	4652      	mov	r2, sl
 8015422:	4631      	mov	r1, r6
 8015424:	4628      	mov	r0, r5
 8015426:	47b8      	blx	r7
 8015428:	3001      	adds	r0, #1
 801542a:	f43f ae50 	beq.w	80150ce <_printf_float+0xbe>
 801542e:	f108 0801 	add.w	r8, r8, #1
 8015432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015434:	3b01      	subs	r3, #1
 8015436:	4543      	cmp	r3, r8
 8015438:	dcf1      	bgt.n	801541e <_printf_float+0x40e>
 801543a:	464b      	mov	r3, r9
 801543c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015440:	e6da      	b.n	80151f8 <_printf_float+0x1e8>
 8015442:	f04f 0800 	mov.w	r8, #0
 8015446:	f104 0a1a 	add.w	sl, r4, #26
 801544a:	e7f2      	b.n	8015432 <_printf_float+0x422>
 801544c:	2301      	movs	r3, #1
 801544e:	4642      	mov	r2, r8
 8015450:	e7df      	b.n	8015412 <_printf_float+0x402>
 8015452:	2301      	movs	r3, #1
 8015454:	464a      	mov	r2, r9
 8015456:	4631      	mov	r1, r6
 8015458:	4628      	mov	r0, r5
 801545a:	47b8      	blx	r7
 801545c:	3001      	adds	r0, #1
 801545e:	f43f ae36 	beq.w	80150ce <_printf_float+0xbe>
 8015462:	f108 0801 	add.w	r8, r8, #1
 8015466:	68e3      	ldr	r3, [r4, #12]
 8015468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801546a:	1a5b      	subs	r3, r3, r1
 801546c:	4543      	cmp	r3, r8
 801546e:	dcf0      	bgt.n	8015452 <_printf_float+0x442>
 8015470:	e6f8      	b.n	8015264 <_printf_float+0x254>
 8015472:	f04f 0800 	mov.w	r8, #0
 8015476:	f104 0919 	add.w	r9, r4, #25
 801547a:	e7f4      	b.n	8015466 <_printf_float+0x456>

0801547c <_printf_common>:
 801547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015480:	4616      	mov	r6, r2
 8015482:	4699      	mov	r9, r3
 8015484:	688a      	ldr	r2, [r1, #8]
 8015486:	690b      	ldr	r3, [r1, #16]
 8015488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801548c:	4293      	cmp	r3, r2
 801548e:	bfb8      	it	lt
 8015490:	4613      	movlt	r3, r2
 8015492:	6033      	str	r3, [r6, #0]
 8015494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015498:	4607      	mov	r7, r0
 801549a:	460c      	mov	r4, r1
 801549c:	b10a      	cbz	r2, 80154a2 <_printf_common+0x26>
 801549e:	3301      	adds	r3, #1
 80154a0:	6033      	str	r3, [r6, #0]
 80154a2:	6823      	ldr	r3, [r4, #0]
 80154a4:	0699      	lsls	r1, r3, #26
 80154a6:	bf42      	ittt	mi
 80154a8:	6833      	ldrmi	r3, [r6, #0]
 80154aa:	3302      	addmi	r3, #2
 80154ac:	6033      	strmi	r3, [r6, #0]
 80154ae:	6825      	ldr	r5, [r4, #0]
 80154b0:	f015 0506 	ands.w	r5, r5, #6
 80154b4:	d106      	bne.n	80154c4 <_printf_common+0x48>
 80154b6:	f104 0a19 	add.w	sl, r4, #25
 80154ba:	68e3      	ldr	r3, [r4, #12]
 80154bc:	6832      	ldr	r2, [r6, #0]
 80154be:	1a9b      	subs	r3, r3, r2
 80154c0:	42ab      	cmp	r3, r5
 80154c2:	dc26      	bgt.n	8015512 <_printf_common+0x96>
 80154c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80154c8:	1e13      	subs	r3, r2, #0
 80154ca:	6822      	ldr	r2, [r4, #0]
 80154cc:	bf18      	it	ne
 80154ce:	2301      	movne	r3, #1
 80154d0:	0692      	lsls	r2, r2, #26
 80154d2:	d42b      	bmi.n	801552c <_printf_common+0xb0>
 80154d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154d8:	4649      	mov	r1, r9
 80154da:	4638      	mov	r0, r7
 80154dc:	47c0      	blx	r8
 80154de:	3001      	adds	r0, #1
 80154e0:	d01e      	beq.n	8015520 <_printf_common+0xa4>
 80154e2:	6823      	ldr	r3, [r4, #0]
 80154e4:	6922      	ldr	r2, [r4, #16]
 80154e6:	f003 0306 	and.w	r3, r3, #6
 80154ea:	2b04      	cmp	r3, #4
 80154ec:	bf02      	ittt	eq
 80154ee:	68e5      	ldreq	r5, [r4, #12]
 80154f0:	6833      	ldreq	r3, [r6, #0]
 80154f2:	1aed      	subeq	r5, r5, r3
 80154f4:	68a3      	ldr	r3, [r4, #8]
 80154f6:	bf0c      	ite	eq
 80154f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80154fc:	2500      	movne	r5, #0
 80154fe:	4293      	cmp	r3, r2
 8015500:	bfc4      	itt	gt
 8015502:	1a9b      	subgt	r3, r3, r2
 8015504:	18ed      	addgt	r5, r5, r3
 8015506:	2600      	movs	r6, #0
 8015508:	341a      	adds	r4, #26
 801550a:	42b5      	cmp	r5, r6
 801550c:	d11a      	bne.n	8015544 <_printf_common+0xc8>
 801550e:	2000      	movs	r0, #0
 8015510:	e008      	b.n	8015524 <_printf_common+0xa8>
 8015512:	2301      	movs	r3, #1
 8015514:	4652      	mov	r2, sl
 8015516:	4649      	mov	r1, r9
 8015518:	4638      	mov	r0, r7
 801551a:	47c0      	blx	r8
 801551c:	3001      	adds	r0, #1
 801551e:	d103      	bne.n	8015528 <_printf_common+0xac>
 8015520:	f04f 30ff 	mov.w	r0, #4294967295
 8015524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015528:	3501      	adds	r5, #1
 801552a:	e7c6      	b.n	80154ba <_printf_common+0x3e>
 801552c:	18e1      	adds	r1, r4, r3
 801552e:	1c5a      	adds	r2, r3, #1
 8015530:	2030      	movs	r0, #48	; 0x30
 8015532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015536:	4422      	add	r2, r4
 8015538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801553c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015540:	3302      	adds	r3, #2
 8015542:	e7c7      	b.n	80154d4 <_printf_common+0x58>
 8015544:	2301      	movs	r3, #1
 8015546:	4622      	mov	r2, r4
 8015548:	4649      	mov	r1, r9
 801554a:	4638      	mov	r0, r7
 801554c:	47c0      	blx	r8
 801554e:	3001      	adds	r0, #1
 8015550:	d0e6      	beq.n	8015520 <_printf_common+0xa4>
 8015552:	3601      	adds	r6, #1
 8015554:	e7d9      	b.n	801550a <_printf_common+0x8e>
	...

08015558 <_printf_i>:
 8015558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801555c:	7e0f      	ldrb	r7, [r1, #24]
 801555e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015560:	2f78      	cmp	r7, #120	; 0x78
 8015562:	4691      	mov	r9, r2
 8015564:	4680      	mov	r8, r0
 8015566:	460c      	mov	r4, r1
 8015568:	469a      	mov	sl, r3
 801556a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801556e:	d807      	bhi.n	8015580 <_printf_i+0x28>
 8015570:	2f62      	cmp	r7, #98	; 0x62
 8015572:	d80a      	bhi.n	801558a <_printf_i+0x32>
 8015574:	2f00      	cmp	r7, #0
 8015576:	f000 80d4 	beq.w	8015722 <_printf_i+0x1ca>
 801557a:	2f58      	cmp	r7, #88	; 0x58
 801557c:	f000 80c0 	beq.w	8015700 <_printf_i+0x1a8>
 8015580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015588:	e03a      	b.n	8015600 <_printf_i+0xa8>
 801558a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801558e:	2b15      	cmp	r3, #21
 8015590:	d8f6      	bhi.n	8015580 <_printf_i+0x28>
 8015592:	a101      	add	r1, pc, #4	; (adr r1, 8015598 <_printf_i+0x40>)
 8015594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015598:	080155f1 	.word	0x080155f1
 801559c:	08015605 	.word	0x08015605
 80155a0:	08015581 	.word	0x08015581
 80155a4:	08015581 	.word	0x08015581
 80155a8:	08015581 	.word	0x08015581
 80155ac:	08015581 	.word	0x08015581
 80155b0:	08015605 	.word	0x08015605
 80155b4:	08015581 	.word	0x08015581
 80155b8:	08015581 	.word	0x08015581
 80155bc:	08015581 	.word	0x08015581
 80155c0:	08015581 	.word	0x08015581
 80155c4:	08015709 	.word	0x08015709
 80155c8:	08015631 	.word	0x08015631
 80155cc:	080156c3 	.word	0x080156c3
 80155d0:	08015581 	.word	0x08015581
 80155d4:	08015581 	.word	0x08015581
 80155d8:	0801572b 	.word	0x0801572b
 80155dc:	08015581 	.word	0x08015581
 80155e0:	08015631 	.word	0x08015631
 80155e4:	08015581 	.word	0x08015581
 80155e8:	08015581 	.word	0x08015581
 80155ec:	080156cb 	.word	0x080156cb
 80155f0:	682b      	ldr	r3, [r5, #0]
 80155f2:	1d1a      	adds	r2, r3, #4
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	602a      	str	r2, [r5, #0]
 80155f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015600:	2301      	movs	r3, #1
 8015602:	e09f      	b.n	8015744 <_printf_i+0x1ec>
 8015604:	6820      	ldr	r0, [r4, #0]
 8015606:	682b      	ldr	r3, [r5, #0]
 8015608:	0607      	lsls	r7, r0, #24
 801560a:	f103 0104 	add.w	r1, r3, #4
 801560e:	6029      	str	r1, [r5, #0]
 8015610:	d501      	bpl.n	8015616 <_printf_i+0xbe>
 8015612:	681e      	ldr	r6, [r3, #0]
 8015614:	e003      	b.n	801561e <_printf_i+0xc6>
 8015616:	0646      	lsls	r6, r0, #25
 8015618:	d5fb      	bpl.n	8015612 <_printf_i+0xba>
 801561a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801561e:	2e00      	cmp	r6, #0
 8015620:	da03      	bge.n	801562a <_printf_i+0xd2>
 8015622:	232d      	movs	r3, #45	; 0x2d
 8015624:	4276      	negs	r6, r6
 8015626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801562a:	485a      	ldr	r0, [pc, #360]	; (8015794 <_printf_i+0x23c>)
 801562c:	230a      	movs	r3, #10
 801562e:	e012      	b.n	8015656 <_printf_i+0xfe>
 8015630:	682b      	ldr	r3, [r5, #0]
 8015632:	6820      	ldr	r0, [r4, #0]
 8015634:	1d19      	adds	r1, r3, #4
 8015636:	6029      	str	r1, [r5, #0]
 8015638:	0605      	lsls	r5, r0, #24
 801563a:	d501      	bpl.n	8015640 <_printf_i+0xe8>
 801563c:	681e      	ldr	r6, [r3, #0]
 801563e:	e002      	b.n	8015646 <_printf_i+0xee>
 8015640:	0641      	lsls	r1, r0, #25
 8015642:	d5fb      	bpl.n	801563c <_printf_i+0xe4>
 8015644:	881e      	ldrh	r6, [r3, #0]
 8015646:	4853      	ldr	r0, [pc, #332]	; (8015794 <_printf_i+0x23c>)
 8015648:	2f6f      	cmp	r7, #111	; 0x6f
 801564a:	bf0c      	ite	eq
 801564c:	2308      	moveq	r3, #8
 801564e:	230a      	movne	r3, #10
 8015650:	2100      	movs	r1, #0
 8015652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015656:	6865      	ldr	r5, [r4, #4]
 8015658:	60a5      	str	r5, [r4, #8]
 801565a:	2d00      	cmp	r5, #0
 801565c:	bfa2      	ittt	ge
 801565e:	6821      	ldrge	r1, [r4, #0]
 8015660:	f021 0104 	bicge.w	r1, r1, #4
 8015664:	6021      	strge	r1, [r4, #0]
 8015666:	b90e      	cbnz	r6, 801566c <_printf_i+0x114>
 8015668:	2d00      	cmp	r5, #0
 801566a:	d04b      	beq.n	8015704 <_printf_i+0x1ac>
 801566c:	4615      	mov	r5, r2
 801566e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015672:	fb03 6711 	mls	r7, r3, r1, r6
 8015676:	5dc7      	ldrb	r7, [r0, r7]
 8015678:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801567c:	4637      	mov	r7, r6
 801567e:	42bb      	cmp	r3, r7
 8015680:	460e      	mov	r6, r1
 8015682:	d9f4      	bls.n	801566e <_printf_i+0x116>
 8015684:	2b08      	cmp	r3, #8
 8015686:	d10b      	bne.n	80156a0 <_printf_i+0x148>
 8015688:	6823      	ldr	r3, [r4, #0]
 801568a:	07de      	lsls	r6, r3, #31
 801568c:	d508      	bpl.n	80156a0 <_printf_i+0x148>
 801568e:	6923      	ldr	r3, [r4, #16]
 8015690:	6861      	ldr	r1, [r4, #4]
 8015692:	4299      	cmp	r1, r3
 8015694:	bfde      	ittt	le
 8015696:	2330      	movle	r3, #48	; 0x30
 8015698:	f805 3c01 	strble.w	r3, [r5, #-1]
 801569c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80156a0:	1b52      	subs	r2, r2, r5
 80156a2:	6122      	str	r2, [r4, #16]
 80156a4:	f8cd a000 	str.w	sl, [sp]
 80156a8:	464b      	mov	r3, r9
 80156aa:	aa03      	add	r2, sp, #12
 80156ac:	4621      	mov	r1, r4
 80156ae:	4640      	mov	r0, r8
 80156b0:	f7ff fee4 	bl	801547c <_printf_common>
 80156b4:	3001      	adds	r0, #1
 80156b6:	d14a      	bne.n	801574e <_printf_i+0x1f6>
 80156b8:	f04f 30ff 	mov.w	r0, #4294967295
 80156bc:	b004      	add	sp, #16
 80156be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156c2:	6823      	ldr	r3, [r4, #0]
 80156c4:	f043 0320 	orr.w	r3, r3, #32
 80156c8:	6023      	str	r3, [r4, #0]
 80156ca:	4833      	ldr	r0, [pc, #204]	; (8015798 <_printf_i+0x240>)
 80156cc:	2778      	movs	r7, #120	; 0x78
 80156ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80156d2:	6823      	ldr	r3, [r4, #0]
 80156d4:	6829      	ldr	r1, [r5, #0]
 80156d6:	061f      	lsls	r7, r3, #24
 80156d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80156dc:	d402      	bmi.n	80156e4 <_printf_i+0x18c>
 80156de:	065f      	lsls	r7, r3, #25
 80156e0:	bf48      	it	mi
 80156e2:	b2b6      	uxthmi	r6, r6
 80156e4:	07df      	lsls	r7, r3, #31
 80156e6:	bf48      	it	mi
 80156e8:	f043 0320 	orrmi.w	r3, r3, #32
 80156ec:	6029      	str	r1, [r5, #0]
 80156ee:	bf48      	it	mi
 80156f0:	6023      	strmi	r3, [r4, #0]
 80156f2:	b91e      	cbnz	r6, 80156fc <_printf_i+0x1a4>
 80156f4:	6823      	ldr	r3, [r4, #0]
 80156f6:	f023 0320 	bic.w	r3, r3, #32
 80156fa:	6023      	str	r3, [r4, #0]
 80156fc:	2310      	movs	r3, #16
 80156fe:	e7a7      	b.n	8015650 <_printf_i+0xf8>
 8015700:	4824      	ldr	r0, [pc, #144]	; (8015794 <_printf_i+0x23c>)
 8015702:	e7e4      	b.n	80156ce <_printf_i+0x176>
 8015704:	4615      	mov	r5, r2
 8015706:	e7bd      	b.n	8015684 <_printf_i+0x12c>
 8015708:	682b      	ldr	r3, [r5, #0]
 801570a:	6826      	ldr	r6, [r4, #0]
 801570c:	6961      	ldr	r1, [r4, #20]
 801570e:	1d18      	adds	r0, r3, #4
 8015710:	6028      	str	r0, [r5, #0]
 8015712:	0635      	lsls	r5, r6, #24
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	d501      	bpl.n	801571c <_printf_i+0x1c4>
 8015718:	6019      	str	r1, [r3, #0]
 801571a:	e002      	b.n	8015722 <_printf_i+0x1ca>
 801571c:	0670      	lsls	r0, r6, #25
 801571e:	d5fb      	bpl.n	8015718 <_printf_i+0x1c0>
 8015720:	8019      	strh	r1, [r3, #0]
 8015722:	2300      	movs	r3, #0
 8015724:	6123      	str	r3, [r4, #16]
 8015726:	4615      	mov	r5, r2
 8015728:	e7bc      	b.n	80156a4 <_printf_i+0x14c>
 801572a:	682b      	ldr	r3, [r5, #0]
 801572c:	1d1a      	adds	r2, r3, #4
 801572e:	602a      	str	r2, [r5, #0]
 8015730:	681d      	ldr	r5, [r3, #0]
 8015732:	6862      	ldr	r2, [r4, #4]
 8015734:	2100      	movs	r1, #0
 8015736:	4628      	mov	r0, r5
 8015738:	f7ea fd72 	bl	8000220 <memchr>
 801573c:	b108      	cbz	r0, 8015742 <_printf_i+0x1ea>
 801573e:	1b40      	subs	r0, r0, r5
 8015740:	6060      	str	r0, [r4, #4]
 8015742:	6863      	ldr	r3, [r4, #4]
 8015744:	6123      	str	r3, [r4, #16]
 8015746:	2300      	movs	r3, #0
 8015748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801574c:	e7aa      	b.n	80156a4 <_printf_i+0x14c>
 801574e:	6923      	ldr	r3, [r4, #16]
 8015750:	462a      	mov	r2, r5
 8015752:	4649      	mov	r1, r9
 8015754:	4640      	mov	r0, r8
 8015756:	47d0      	blx	sl
 8015758:	3001      	adds	r0, #1
 801575a:	d0ad      	beq.n	80156b8 <_printf_i+0x160>
 801575c:	6823      	ldr	r3, [r4, #0]
 801575e:	079b      	lsls	r3, r3, #30
 8015760:	d413      	bmi.n	801578a <_printf_i+0x232>
 8015762:	68e0      	ldr	r0, [r4, #12]
 8015764:	9b03      	ldr	r3, [sp, #12]
 8015766:	4298      	cmp	r0, r3
 8015768:	bfb8      	it	lt
 801576a:	4618      	movlt	r0, r3
 801576c:	e7a6      	b.n	80156bc <_printf_i+0x164>
 801576e:	2301      	movs	r3, #1
 8015770:	4632      	mov	r2, r6
 8015772:	4649      	mov	r1, r9
 8015774:	4640      	mov	r0, r8
 8015776:	47d0      	blx	sl
 8015778:	3001      	adds	r0, #1
 801577a:	d09d      	beq.n	80156b8 <_printf_i+0x160>
 801577c:	3501      	adds	r5, #1
 801577e:	68e3      	ldr	r3, [r4, #12]
 8015780:	9903      	ldr	r1, [sp, #12]
 8015782:	1a5b      	subs	r3, r3, r1
 8015784:	42ab      	cmp	r3, r5
 8015786:	dcf2      	bgt.n	801576e <_printf_i+0x216>
 8015788:	e7eb      	b.n	8015762 <_printf_i+0x20a>
 801578a:	2500      	movs	r5, #0
 801578c:	f104 0619 	add.w	r6, r4, #25
 8015790:	e7f5      	b.n	801577e <_printf_i+0x226>
 8015792:	bf00      	nop
 8015794:	0801b5be 	.word	0x0801b5be
 8015798:	0801b5cf 	.word	0x0801b5cf

0801579c <std>:
 801579c:	2300      	movs	r3, #0
 801579e:	b510      	push	{r4, lr}
 80157a0:	4604      	mov	r4, r0
 80157a2:	e9c0 3300 	strd	r3, r3, [r0]
 80157a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80157aa:	6083      	str	r3, [r0, #8]
 80157ac:	8181      	strh	r1, [r0, #12]
 80157ae:	6643      	str	r3, [r0, #100]	; 0x64
 80157b0:	81c2      	strh	r2, [r0, #14]
 80157b2:	6183      	str	r3, [r0, #24]
 80157b4:	4619      	mov	r1, r3
 80157b6:	2208      	movs	r2, #8
 80157b8:	305c      	adds	r0, #92	; 0x5c
 80157ba:	f000 f914 	bl	80159e6 <memset>
 80157be:	4b0d      	ldr	r3, [pc, #52]	; (80157f4 <std+0x58>)
 80157c0:	6263      	str	r3, [r4, #36]	; 0x24
 80157c2:	4b0d      	ldr	r3, [pc, #52]	; (80157f8 <std+0x5c>)
 80157c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80157c6:	4b0d      	ldr	r3, [pc, #52]	; (80157fc <std+0x60>)
 80157c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80157ca:	4b0d      	ldr	r3, [pc, #52]	; (8015800 <std+0x64>)
 80157cc:	6323      	str	r3, [r4, #48]	; 0x30
 80157ce:	4b0d      	ldr	r3, [pc, #52]	; (8015804 <std+0x68>)
 80157d0:	6224      	str	r4, [r4, #32]
 80157d2:	429c      	cmp	r4, r3
 80157d4:	d006      	beq.n	80157e4 <std+0x48>
 80157d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80157da:	4294      	cmp	r4, r2
 80157dc:	d002      	beq.n	80157e4 <std+0x48>
 80157de:	33d0      	adds	r3, #208	; 0xd0
 80157e0:	429c      	cmp	r4, r3
 80157e2:	d105      	bne.n	80157f0 <std+0x54>
 80157e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80157e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157ec:	f000 b978 	b.w	8015ae0 <__retarget_lock_init_recursive>
 80157f0:	bd10      	pop	{r4, pc}
 80157f2:	bf00      	nop
 80157f4:	08015961 	.word	0x08015961
 80157f8:	08015983 	.word	0x08015983
 80157fc:	080159bb 	.word	0x080159bb
 8015800:	080159df 	.word	0x080159df
 8015804:	20002d8c 	.word	0x20002d8c

08015808 <stdio_exit_handler>:
 8015808:	4a02      	ldr	r2, [pc, #8]	; (8015814 <stdio_exit_handler+0xc>)
 801580a:	4903      	ldr	r1, [pc, #12]	; (8015818 <stdio_exit_handler+0x10>)
 801580c:	4803      	ldr	r0, [pc, #12]	; (801581c <stdio_exit_handler+0x14>)
 801580e:	f000 b869 	b.w	80158e4 <_fwalk_sglue>
 8015812:	bf00      	nop
 8015814:	2000031c 	.word	0x2000031c
 8015818:	08017491 	.word	0x08017491
 801581c:	20000328 	.word	0x20000328

08015820 <cleanup_stdio>:
 8015820:	6841      	ldr	r1, [r0, #4]
 8015822:	4b0c      	ldr	r3, [pc, #48]	; (8015854 <cleanup_stdio+0x34>)
 8015824:	4299      	cmp	r1, r3
 8015826:	b510      	push	{r4, lr}
 8015828:	4604      	mov	r4, r0
 801582a:	d001      	beq.n	8015830 <cleanup_stdio+0x10>
 801582c:	f001 fe30 	bl	8017490 <_fflush_r>
 8015830:	68a1      	ldr	r1, [r4, #8]
 8015832:	4b09      	ldr	r3, [pc, #36]	; (8015858 <cleanup_stdio+0x38>)
 8015834:	4299      	cmp	r1, r3
 8015836:	d002      	beq.n	801583e <cleanup_stdio+0x1e>
 8015838:	4620      	mov	r0, r4
 801583a:	f001 fe29 	bl	8017490 <_fflush_r>
 801583e:	68e1      	ldr	r1, [r4, #12]
 8015840:	4b06      	ldr	r3, [pc, #24]	; (801585c <cleanup_stdio+0x3c>)
 8015842:	4299      	cmp	r1, r3
 8015844:	d004      	beq.n	8015850 <cleanup_stdio+0x30>
 8015846:	4620      	mov	r0, r4
 8015848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801584c:	f001 be20 	b.w	8017490 <_fflush_r>
 8015850:	bd10      	pop	{r4, pc}
 8015852:	bf00      	nop
 8015854:	20002d8c 	.word	0x20002d8c
 8015858:	20002df4 	.word	0x20002df4
 801585c:	20002e5c 	.word	0x20002e5c

08015860 <global_stdio_init.part.0>:
 8015860:	b510      	push	{r4, lr}
 8015862:	4b0b      	ldr	r3, [pc, #44]	; (8015890 <global_stdio_init.part.0+0x30>)
 8015864:	4c0b      	ldr	r4, [pc, #44]	; (8015894 <global_stdio_init.part.0+0x34>)
 8015866:	4a0c      	ldr	r2, [pc, #48]	; (8015898 <global_stdio_init.part.0+0x38>)
 8015868:	601a      	str	r2, [r3, #0]
 801586a:	4620      	mov	r0, r4
 801586c:	2200      	movs	r2, #0
 801586e:	2104      	movs	r1, #4
 8015870:	f7ff ff94 	bl	801579c <std>
 8015874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015878:	2201      	movs	r2, #1
 801587a:	2109      	movs	r1, #9
 801587c:	f7ff ff8e 	bl	801579c <std>
 8015880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015884:	2202      	movs	r2, #2
 8015886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801588a:	2112      	movs	r1, #18
 801588c:	f7ff bf86 	b.w	801579c <std>
 8015890:	20002ec4 	.word	0x20002ec4
 8015894:	20002d8c 	.word	0x20002d8c
 8015898:	08015809 	.word	0x08015809

0801589c <__sfp_lock_acquire>:
 801589c:	4801      	ldr	r0, [pc, #4]	; (80158a4 <__sfp_lock_acquire+0x8>)
 801589e:	f000 b920 	b.w	8015ae2 <__retarget_lock_acquire_recursive>
 80158a2:	bf00      	nop
 80158a4:	20002ecd 	.word	0x20002ecd

080158a8 <__sfp_lock_release>:
 80158a8:	4801      	ldr	r0, [pc, #4]	; (80158b0 <__sfp_lock_release+0x8>)
 80158aa:	f000 b91b 	b.w	8015ae4 <__retarget_lock_release_recursive>
 80158ae:	bf00      	nop
 80158b0:	20002ecd 	.word	0x20002ecd

080158b4 <__sinit>:
 80158b4:	b510      	push	{r4, lr}
 80158b6:	4604      	mov	r4, r0
 80158b8:	f7ff fff0 	bl	801589c <__sfp_lock_acquire>
 80158bc:	6a23      	ldr	r3, [r4, #32]
 80158be:	b11b      	cbz	r3, 80158c8 <__sinit+0x14>
 80158c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158c4:	f7ff bff0 	b.w	80158a8 <__sfp_lock_release>
 80158c8:	4b04      	ldr	r3, [pc, #16]	; (80158dc <__sinit+0x28>)
 80158ca:	6223      	str	r3, [r4, #32]
 80158cc:	4b04      	ldr	r3, [pc, #16]	; (80158e0 <__sinit+0x2c>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1f5      	bne.n	80158c0 <__sinit+0xc>
 80158d4:	f7ff ffc4 	bl	8015860 <global_stdio_init.part.0>
 80158d8:	e7f2      	b.n	80158c0 <__sinit+0xc>
 80158da:	bf00      	nop
 80158dc:	08015821 	.word	0x08015821
 80158e0:	20002ec4 	.word	0x20002ec4

080158e4 <_fwalk_sglue>:
 80158e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158e8:	4607      	mov	r7, r0
 80158ea:	4688      	mov	r8, r1
 80158ec:	4614      	mov	r4, r2
 80158ee:	2600      	movs	r6, #0
 80158f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80158f4:	f1b9 0901 	subs.w	r9, r9, #1
 80158f8:	d505      	bpl.n	8015906 <_fwalk_sglue+0x22>
 80158fa:	6824      	ldr	r4, [r4, #0]
 80158fc:	2c00      	cmp	r4, #0
 80158fe:	d1f7      	bne.n	80158f0 <_fwalk_sglue+0xc>
 8015900:	4630      	mov	r0, r6
 8015902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015906:	89ab      	ldrh	r3, [r5, #12]
 8015908:	2b01      	cmp	r3, #1
 801590a:	d907      	bls.n	801591c <_fwalk_sglue+0x38>
 801590c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015910:	3301      	adds	r3, #1
 8015912:	d003      	beq.n	801591c <_fwalk_sglue+0x38>
 8015914:	4629      	mov	r1, r5
 8015916:	4638      	mov	r0, r7
 8015918:	47c0      	blx	r8
 801591a:	4306      	orrs	r6, r0
 801591c:	3568      	adds	r5, #104	; 0x68
 801591e:	e7e9      	b.n	80158f4 <_fwalk_sglue+0x10>

08015920 <siprintf>:
 8015920:	b40e      	push	{r1, r2, r3}
 8015922:	b500      	push	{lr}
 8015924:	b09c      	sub	sp, #112	; 0x70
 8015926:	ab1d      	add	r3, sp, #116	; 0x74
 8015928:	9002      	str	r0, [sp, #8]
 801592a:	9006      	str	r0, [sp, #24]
 801592c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015930:	4809      	ldr	r0, [pc, #36]	; (8015958 <siprintf+0x38>)
 8015932:	9107      	str	r1, [sp, #28]
 8015934:	9104      	str	r1, [sp, #16]
 8015936:	4909      	ldr	r1, [pc, #36]	; (801595c <siprintf+0x3c>)
 8015938:	f853 2b04 	ldr.w	r2, [r3], #4
 801593c:	9105      	str	r1, [sp, #20]
 801593e:	6800      	ldr	r0, [r0, #0]
 8015940:	9301      	str	r3, [sp, #4]
 8015942:	a902      	add	r1, sp, #8
 8015944:	f001 fc20 	bl	8017188 <_svfiprintf_r>
 8015948:	9b02      	ldr	r3, [sp, #8]
 801594a:	2200      	movs	r2, #0
 801594c:	701a      	strb	r2, [r3, #0]
 801594e:	b01c      	add	sp, #112	; 0x70
 8015950:	f85d eb04 	ldr.w	lr, [sp], #4
 8015954:	b003      	add	sp, #12
 8015956:	4770      	bx	lr
 8015958:	20000374 	.word	0x20000374
 801595c:	ffff0208 	.word	0xffff0208

08015960 <__sread>:
 8015960:	b510      	push	{r4, lr}
 8015962:	460c      	mov	r4, r1
 8015964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015968:	f000 f86c 	bl	8015a44 <_read_r>
 801596c:	2800      	cmp	r0, #0
 801596e:	bfab      	itete	ge
 8015970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015972:	89a3      	ldrhlt	r3, [r4, #12]
 8015974:	181b      	addge	r3, r3, r0
 8015976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801597a:	bfac      	ite	ge
 801597c:	6563      	strge	r3, [r4, #84]	; 0x54
 801597e:	81a3      	strhlt	r3, [r4, #12]
 8015980:	bd10      	pop	{r4, pc}

08015982 <__swrite>:
 8015982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015986:	461f      	mov	r7, r3
 8015988:	898b      	ldrh	r3, [r1, #12]
 801598a:	05db      	lsls	r3, r3, #23
 801598c:	4605      	mov	r5, r0
 801598e:	460c      	mov	r4, r1
 8015990:	4616      	mov	r6, r2
 8015992:	d505      	bpl.n	80159a0 <__swrite+0x1e>
 8015994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015998:	2302      	movs	r3, #2
 801599a:	2200      	movs	r2, #0
 801599c:	f000 f840 	bl	8015a20 <_lseek_r>
 80159a0:	89a3      	ldrh	r3, [r4, #12]
 80159a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80159aa:	81a3      	strh	r3, [r4, #12]
 80159ac:	4632      	mov	r2, r6
 80159ae:	463b      	mov	r3, r7
 80159b0:	4628      	mov	r0, r5
 80159b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159b6:	f000 b857 	b.w	8015a68 <_write_r>

080159ba <__sseek>:
 80159ba:	b510      	push	{r4, lr}
 80159bc:	460c      	mov	r4, r1
 80159be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159c2:	f000 f82d 	bl	8015a20 <_lseek_r>
 80159c6:	1c43      	adds	r3, r0, #1
 80159c8:	89a3      	ldrh	r3, [r4, #12]
 80159ca:	bf15      	itete	ne
 80159cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80159ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80159d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80159d6:	81a3      	strheq	r3, [r4, #12]
 80159d8:	bf18      	it	ne
 80159da:	81a3      	strhne	r3, [r4, #12]
 80159dc:	bd10      	pop	{r4, pc}

080159de <__sclose>:
 80159de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159e2:	f000 b80d 	b.w	8015a00 <_close_r>

080159e6 <memset>:
 80159e6:	4402      	add	r2, r0
 80159e8:	4603      	mov	r3, r0
 80159ea:	4293      	cmp	r3, r2
 80159ec:	d100      	bne.n	80159f0 <memset+0xa>
 80159ee:	4770      	bx	lr
 80159f0:	f803 1b01 	strb.w	r1, [r3], #1
 80159f4:	e7f9      	b.n	80159ea <memset+0x4>
	...

080159f8 <_localeconv_r>:
 80159f8:	4800      	ldr	r0, [pc, #0]	; (80159fc <_localeconv_r+0x4>)
 80159fa:	4770      	bx	lr
 80159fc:	20000468 	.word	0x20000468

08015a00 <_close_r>:
 8015a00:	b538      	push	{r3, r4, r5, lr}
 8015a02:	4d06      	ldr	r5, [pc, #24]	; (8015a1c <_close_r+0x1c>)
 8015a04:	2300      	movs	r3, #0
 8015a06:	4604      	mov	r4, r0
 8015a08:	4608      	mov	r0, r1
 8015a0a:	602b      	str	r3, [r5, #0]
 8015a0c:	f7ef f90f 	bl	8004c2e <_close>
 8015a10:	1c43      	adds	r3, r0, #1
 8015a12:	d102      	bne.n	8015a1a <_close_r+0x1a>
 8015a14:	682b      	ldr	r3, [r5, #0]
 8015a16:	b103      	cbz	r3, 8015a1a <_close_r+0x1a>
 8015a18:	6023      	str	r3, [r4, #0]
 8015a1a:	bd38      	pop	{r3, r4, r5, pc}
 8015a1c:	20002ec8 	.word	0x20002ec8

08015a20 <_lseek_r>:
 8015a20:	b538      	push	{r3, r4, r5, lr}
 8015a22:	4d07      	ldr	r5, [pc, #28]	; (8015a40 <_lseek_r+0x20>)
 8015a24:	4604      	mov	r4, r0
 8015a26:	4608      	mov	r0, r1
 8015a28:	4611      	mov	r1, r2
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	602a      	str	r2, [r5, #0]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	f7ef f924 	bl	8004c7c <_lseek>
 8015a34:	1c43      	adds	r3, r0, #1
 8015a36:	d102      	bne.n	8015a3e <_lseek_r+0x1e>
 8015a38:	682b      	ldr	r3, [r5, #0]
 8015a3a:	b103      	cbz	r3, 8015a3e <_lseek_r+0x1e>
 8015a3c:	6023      	str	r3, [r4, #0]
 8015a3e:	bd38      	pop	{r3, r4, r5, pc}
 8015a40:	20002ec8 	.word	0x20002ec8

08015a44 <_read_r>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	4d07      	ldr	r5, [pc, #28]	; (8015a64 <_read_r+0x20>)
 8015a48:	4604      	mov	r4, r0
 8015a4a:	4608      	mov	r0, r1
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	2200      	movs	r2, #0
 8015a50:	602a      	str	r2, [r5, #0]
 8015a52:	461a      	mov	r2, r3
 8015a54:	f7ef f8b2 	bl	8004bbc <_read>
 8015a58:	1c43      	adds	r3, r0, #1
 8015a5a:	d102      	bne.n	8015a62 <_read_r+0x1e>
 8015a5c:	682b      	ldr	r3, [r5, #0]
 8015a5e:	b103      	cbz	r3, 8015a62 <_read_r+0x1e>
 8015a60:	6023      	str	r3, [r4, #0]
 8015a62:	bd38      	pop	{r3, r4, r5, pc}
 8015a64:	20002ec8 	.word	0x20002ec8

08015a68 <_write_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	4d07      	ldr	r5, [pc, #28]	; (8015a88 <_write_r+0x20>)
 8015a6c:	4604      	mov	r4, r0
 8015a6e:	4608      	mov	r0, r1
 8015a70:	4611      	mov	r1, r2
 8015a72:	2200      	movs	r2, #0
 8015a74:	602a      	str	r2, [r5, #0]
 8015a76:	461a      	mov	r2, r3
 8015a78:	f7ef f8bd 	bl	8004bf6 <_write>
 8015a7c:	1c43      	adds	r3, r0, #1
 8015a7e:	d102      	bne.n	8015a86 <_write_r+0x1e>
 8015a80:	682b      	ldr	r3, [r5, #0]
 8015a82:	b103      	cbz	r3, 8015a86 <_write_r+0x1e>
 8015a84:	6023      	str	r3, [r4, #0]
 8015a86:	bd38      	pop	{r3, r4, r5, pc}
 8015a88:	20002ec8 	.word	0x20002ec8

08015a8c <__errno>:
 8015a8c:	4b01      	ldr	r3, [pc, #4]	; (8015a94 <__errno+0x8>)
 8015a8e:	6818      	ldr	r0, [r3, #0]
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop
 8015a94:	20000374 	.word	0x20000374

08015a98 <__libc_init_array>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	4d0d      	ldr	r5, [pc, #52]	; (8015ad0 <__libc_init_array+0x38>)
 8015a9c:	4c0d      	ldr	r4, [pc, #52]	; (8015ad4 <__libc_init_array+0x3c>)
 8015a9e:	1b64      	subs	r4, r4, r5
 8015aa0:	10a4      	asrs	r4, r4, #2
 8015aa2:	2600      	movs	r6, #0
 8015aa4:	42a6      	cmp	r6, r4
 8015aa6:	d109      	bne.n	8015abc <__libc_init_array+0x24>
 8015aa8:	4d0b      	ldr	r5, [pc, #44]	; (8015ad8 <__libc_init_array+0x40>)
 8015aaa:	4c0c      	ldr	r4, [pc, #48]	; (8015adc <__libc_init_array+0x44>)
 8015aac:	f002 fa18 	bl	8017ee0 <_init>
 8015ab0:	1b64      	subs	r4, r4, r5
 8015ab2:	10a4      	asrs	r4, r4, #2
 8015ab4:	2600      	movs	r6, #0
 8015ab6:	42a6      	cmp	r6, r4
 8015ab8:	d105      	bne.n	8015ac6 <__libc_init_array+0x2e>
 8015aba:	bd70      	pop	{r4, r5, r6, pc}
 8015abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ac0:	4798      	blx	r3
 8015ac2:	3601      	adds	r6, #1
 8015ac4:	e7ee      	b.n	8015aa4 <__libc_init_array+0xc>
 8015ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015aca:	4798      	blx	r3
 8015acc:	3601      	adds	r6, #1
 8015ace:	e7f2      	b.n	8015ab6 <__libc_init_array+0x1e>
 8015ad0:	0801b938 	.word	0x0801b938
 8015ad4:	0801b938 	.word	0x0801b938
 8015ad8:	0801b938 	.word	0x0801b938
 8015adc:	0801b93c 	.word	0x0801b93c

08015ae0 <__retarget_lock_init_recursive>:
 8015ae0:	4770      	bx	lr

08015ae2 <__retarget_lock_acquire_recursive>:
 8015ae2:	4770      	bx	lr

08015ae4 <__retarget_lock_release_recursive>:
 8015ae4:	4770      	bx	lr

08015ae6 <quorem>:
 8015ae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aea:	6903      	ldr	r3, [r0, #16]
 8015aec:	690c      	ldr	r4, [r1, #16]
 8015aee:	42a3      	cmp	r3, r4
 8015af0:	4607      	mov	r7, r0
 8015af2:	db7e      	blt.n	8015bf2 <quorem+0x10c>
 8015af4:	3c01      	subs	r4, #1
 8015af6:	f101 0814 	add.w	r8, r1, #20
 8015afa:	f100 0514 	add.w	r5, r0, #20
 8015afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015b02:	9301      	str	r3, [sp, #4]
 8015b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015b14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015b18:	fbb2 f6f3 	udiv	r6, r2, r3
 8015b1c:	d331      	bcc.n	8015b82 <quorem+0x9c>
 8015b1e:	f04f 0e00 	mov.w	lr, #0
 8015b22:	4640      	mov	r0, r8
 8015b24:	46ac      	mov	ip, r5
 8015b26:	46f2      	mov	sl, lr
 8015b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8015b2c:	b293      	uxth	r3, r2
 8015b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8015b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015b36:	0c1a      	lsrs	r2, r3, #16
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8015b3e:	f8dc a000 	ldr.w	sl, [ip]
 8015b42:	fa13 f38a 	uxtah	r3, r3, sl
 8015b46:	fb06 220e 	mla	r2, r6, lr, r2
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	9b00      	ldr	r3, [sp, #0]
 8015b4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015b52:	b292      	uxth	r2, r2
 8015b54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015b58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015b5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8015b60:	4581      	cmp	r9, r0
 8015b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015b66:	f84c 3b04 	str.w	r3, [ip], #4
 8015b6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015b6e:	d2db      	bcs.n	8015b28 <quorem+0x42>
 8015b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8015b74:	b92b      	cbnz	r3, 8015b82 <quorem+0x9c>
 8015b76:	9b01      	ldr	r3, [sp, #4]
 8015b78:	3b04      	subs	r3, #4
 8015b7a:	429d      	cmp	r5, r3
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	d32c      	bcc.n	8015bda <quorem+0xf4>
 8015b80:	613c      	str	r4, [r7, #16]
 8015b82:	4638      	mov	r0, r7
 8015b84:	f001 f9a6 	bl	8016ed4 <__mcmp>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	db22      	blt.n	8015bd2 <quorem+0xec>
 8015b8c:	3601      	adds	r6, #1
 8015b8e:	4629      	mov	r1, r5
 8015b90:	2000      	movs	r0, #0
 8015b92:	f858 2b04 	ldr.w	r2, [r8], #4
 8015b96:	f8d1 c000 	ldr.w	ip, [r1]
 8015b9a:	b293      	uxth	r3, r2
 8015b9c:	1ac3      	subs	r3, r0, r3
 8015b9e:	0c12      	lsrs	r2, r2, #16
 8015ba0:	fa13 f38c 	uxtah	r3, r3, ip
 8015ba4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015ba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015bb2:	45c1      	cmp	r9, r8
 8015bb4:	f841 3b04 	str.w	r3, [r1], #4
 8015bb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015bbc:	d2e9      	bcs.n	8015b92 <quorem+0xac>
 8015bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015bc6:	b922      	cbnz	r2, 8015bd2 <quorem+0xec>
 8015bc8:	3b04      	subs	r3, #4
 8015bca:	429d      	cmp	r5, r3
 8015bcc:	461a      	mov	r2, r3
 8015bce:	d30a      	bcc.n	8015be6 <quorem+0x100>
 8015bd0:	613c      	str	r4, [r7, #16]
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	b003      	add	sp, #12
 8015bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bda:	6812      	ldr	r2, [r2, #0]
 8015bdc:	3b04      	subs	r3, #4
 8015bde:	2a00      	cmp	r2, #0
 8015be0:	d1ce      	bne.n	8015b80 <quorem+0x9a>
 8015be2:	3c01      	subs	r4, #1
 8015be4:	e7c9      	b.n	8015b7a <quorem+0x94>
 8015be6:	6812      	ldr	r2, [r2, #0]
 8015be8:	3b04      	subs	r3, #4
 8015bea:	2a00      	cmp	r2, #0
 8015bec:	d1f0      	bne.n	8015bd0 <quorem+0xea>
 8015bee:	3c01      	subs	r4, #1
 8015bf0:	e7eb      	b.n	8015bca <quorem+0xe4>
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	e7ee      	b.n	8015bd4 <quorem+0xee>
	...

08015bf8 <_dtoa_r>:
 8015bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfc:	ed2d 8b04 	vpush	{d8-d9}
 8015c00:	69c5      	ldr	r5, [r0, #28]
 8015c02:	b093      	sub	sp, #76	; 0x4c
 8015c04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015c08:	ec57 6b10 	vmov	r6, r7, d0
 8015c0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015c10:	9107      	str	r1, [sp, #28]
 8015c12:	4604      	mov	r4, r0
 8015c14:	920a      	str	r2, [sp, #40]	; 0x28
 8015c16:	930d      	str	r3, [sp, #52]	; 0x34
 8015c18:	b975      	cbnz	r5, 8015c38 <_dtoa_r+0x40>
 8015c1a:	2010      	movs	r0, #16
 8015c1c:	f000 fe2a 	bl	8016874 <malloc>
 8015c20:	4602      	mov	r2, r0
 8015c22:	61e0      	str	r0, [r4, #28]
 8015c24:	b920      	cbnz	r0, 8015c30 <_dtoa_r+0x38>
 8015c26:	4bae      	ldr	r3, [pc, #696]	; (8015ee0 <_dtoa_r+0x2e8>)
 8015c28:	21ef      	movs	r1, #239	; 0xef
 8015c2a:	48ae      	ldr	r0, [pc, #696]	; (8015ee4 <_dtoa_r+0x2ec>)
 8015c2c:	f001 fc90 	bl	8017550 <__assert_func>
 8015c30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015c34:	6005      	str	r5, [r0, #0]
 8015c36:	60c5      	str	r5, [r0, #12]
 8015c38:	69e3      	ldr	r3, [r4, #28]
 8015c3a:	6819      	ldr	r1, [r3, #0]
 8015c3c:	b151      	cbz	r1, 8015c54 <_dtoa_r+0x5c>
 8015c3e:	685a      	ldr	r2, [r3, #4]
 8015c40:	604a      	str	r2, [r1, #4]
 8015c42:	2301      	movs	r3, #1
 8015c44:	4093      	lsls	r3, r2
 8015c46:	608b      	str	r3, [r1, #8]
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f000 ff07 	bl	8016a5c <_Bfree>
 8015c4e:	69e3      	ldr	r3, [r4, #28]
 8015c50:	2200      	movs	r2, #0
 8015c52:	601a      	str	r2, [r3, #0]
 8015c54:	1e3b      	subs	r3, r7, #0
 8015c56:	bfbb      	ittet	lt
 8015c58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015c5c:	9303      	strlt	r3, [sp, #12]
 8015c5e:	2300      	movge	r3, #0
 8015c60:	2201      	movlt	r2, #1
 8015c62:	bfac      	ite	ge
 8015c64:	f8c8 3000 	strge.w	r3, [r8]
 8015c68:	f8c8 2000 	strlt.w	r2, [r8]
 8015c6c:	4b9e      	ldr	r3, [pc, #632]	; (8015ee8 <_dtoa_r+0x2f0>)
 8015c6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015c72:	ea33 0308 	bics.w	r3, r3, r8
 8015c76:	d11b      	bne.n	8015cb0 <_dtoa_r+0xb8>
 8015c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8015c7e:	6013      	str	r3, [r2, #0]
 8015c80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8015c84:	4333      	orrs	r3, r6
 8015c86:	f000 8593 	beq.w	80167b0 <_dtoa_r+0xbb8>
 8015c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c8c:	b963      	cbnz	r3, 8015ca8 <_dtoa_r+0xb0>
 8015c8e:	4b97      	ldr	r3, [pc, #604]	; (8015eec <_dtoa_r+0x2f4>)
 8015c90:	e027      	b.n	8015ce2 <_dtoa_r+0xea>
 8015c92:	4b97      	ldr	r3, [pc, #604]	; (8015ef0 <_dtoa_r+0x2f8>)
 8015c94:	9300      	str	r3, [sp, #0]
 8015c96:	3308      	adds	r3, #8
 8015c98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c9a:	6013      	str	r3, [r2, #0]
 8015c9c:	9800      	ldr	r0, [sp, #0]
 8015c9e:	b013      	add	sp, #76	; 0x4c
 8015ca0:	ecbd 8b04 	vpop	{d8-d9}
 8015ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca8:	4b90      	ldr	r3, [pc, #576]	; (8015eec <_dtoa_r+0x2f4>)
 8015caa:	9300      	str	r3, [sp, #0]
 8015cac:	3303      	adds	r3, #3
 8015cae:	e7f3      	b.n	8015c98 <_dtoa_r+0xa0>
 8015cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	ec51 0b17 	vmov	r0, r1, d7
 8015cba:	eeb0 8a47 	vmov.f32	s16, s14
 8015cbe:	eef0 8a67 	vmov.f32	s17, s15
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	f7ea ff28 	bl	8000b18 <__aeabi_dcmpeq>
 8015cc8:	4681      	mov	r9, r0
 8015cca:	b160      	cbz	r0, 8015ce6 <_dtoa_r+0xee>
 8015ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015cce:	2301      	movs	r3, #1
 8015cd0:	6013      	str	r3, [r2, #0]
 8015cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f000 8568 	beq.w	80167aa <_dtoa_r+0xbb2>
 8015cda:	4b86      	ldr	r3, [pc, #536]	; (8015ef4 <_dtoa_r+0x2fc>)
 8015cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015cde:	6013      	str	r3, [r2, #0]
 8015ce0:	3b01      	subs	r3, #1
 8015ce2:	9300      	str	r3, [sp, #0]
 8015ce4:	e7da      	b.n	8015c9c <_dtoa_r+0xa4>
 8015ce6:	aa10      	add	r2, sp, #64	; 0x40
 8015ce8:	a911      	add	r1, sp, #68	; 0x44
 8015cea:	4620      	mov	r0, r4
 8015cec:	eeb0 0a48 	vmov.f32	s0, s16
 8015cf0:	eef0 0a68 	vmov.f32	s1, s17
 8015cf4:	f001 f994 	bl	8017020 <__d2b>
 8015cf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015cfc:	4682      	mov	sl, r0
 8015cfe:	2d00      	cmp	r5, #0
 8015d00:	d07f      	beq.n	8015e02 <_dtoa_r+0x20a>
 8015d02:	ee18 3a90 	vmov	r3, s17
 8015d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015d0e:	ec51 0b18 	vmov	r0, r1, d8
 8015d12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015d1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015d1e:	4619      	mov	r1, r3
 8015d20:	2200      	movs	r2, #0
 8015d22:	4b75      	ldr	r3, [pc, #468]	; (8015ef8 <_dtoa_r+0x300>)
 8015d24:	f7ea fad8 	bl	80002d8 <__aeabi_dsub>
 8015d28:	a367      	add	r3, pc, #412	; (adr r3, 8015ec8 <_dtoa_r+0x2d0>)
 8015d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2e:	f7ea fc8b 	bl	8000648 <__aeabi_dmul>
 8015d32:	a367      	add	r3, pc, #412	; (adr r3, 8015ed0 <_dtoa_r+0x2d8>)
 8015d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d38:	f7ea fad0 	bl	80002dc <__adddf3>
 8015d3c:	4606      	mov	r6, r0
 8015d3e:	4628      	mov	r0, r5
 8015d40:	460f      	mov	r7, r1
 8015d42:	f7ea fc17 	bl	8000574 <__aeabi_i2d>
 8015d46:	a364      	add	r3, pc, #400	; (adr r3, 8015ed8 <_dtoa_r+0x2e0>)
 8015d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4c:	f7ea fc7c 	bl	8000648 <__aeabi_dmul>
 8015d50:	4602      	mov	r2, r0
 8015d52:	460b      	mov	r3, r1
 8015d54:	4630      	mov	r0, r6
 8015d56:	4639      	mov	r1, r7
 8015d58:	f7ea fac0 	bl	80002dc <__adddf3>
 8015d5c:	4606      	mov	r6, r0
 8015d5e:	460f      	mov	r7, r1
 8015d60:	f7ea ff22 	bl	8000ba8 <__aeabi_d2iz>
 8015d64:	2200      	movs	r2, #0
 8015d66:	4683      	mov	fp, r0
 8015d68:	2300      	movs	r3, #0
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	4639      	mov	r1, r7
 8015d6e:	f7ea fedd 	bl	8000b2c <__aeabi_dcmplt>
 8015d72:	b148      	cbz	r0, 8015d88 <_dtoa_r+0x190>
 8015d74:	4658      	mov	r0, fp
 8015d76:	f7ea fbfd 	bl	8000574 <__aeabi_i2d>
 8015d7a:	4632      	mov	r2, r6
 8015d7c:	463b      	mov	r3, r7
 8015d7e:	f7ea fecb 	bl	8000b18 <__aeabi_dcmpeq>
 8015d82:	b908      	cbnz	r0, 8015d88 <_dtoa_r+0x190>
 8015d84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015d88:	f1bb 0f16 	cmp.w	fp, #22
 8015d8c:	d857      	bhi.n	8015e3e <_dtoa_r+0x246>
 8015d8e:	4b5b      	ldr	r3, [pc, #364]	; (8015efc <_dtoa_r+0x304>)
 8015d90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d98:	ec51 0b18 	vmov	r0, r1, d8
 8015d9c:	f7ea fec6 	bl	8000b2c <__aeabi_dcmplt>
 8015da0:	2800      	cmp	r0, #0
 8015da2:	d04e      	beq.n	8015e42 <_dtoa_r+0x24a>
 8015da4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015da8:	2300      	movs	r3, #0
 8015daa:	930c      	str	r3, [sp, #48]	; 0x30
 8015dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dae:	1b5b      	subs	r3, r3, r5
 8015db0:	1e5a      	subs	r2, r3, #1
 8015db2:	bf45      	ittet	mi
 8015db4:	f1c3 0301 	rsbmi	r3, r3, #1
 8015db8:	9305      	strmi	r3, [sp, #20]
 8015dba:	2300      	movpl	r3, #0
 8015dbc:	2300      	movmi	r3, #0
 8015dbe:	9206      	str	r2, [sp, #24]
 8015dc0:	bf54      	ite	pl
 8015dc2:	9305      	strpl	r3, [sp, #20]
 8015dc4:	9306      	strmi	r3, [sp, #24]
 8015dc6:	f1bb 0f00 	cmp.w	fp, #0
 8015dca:	db3c      	blt.n	8015e46 <_dtoa_r+0x24e>
 8015dcc:	9b06      	ldr	r3, [sp, #24]
 8015dce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015dd2:	445b      	add	r3, fp
 8015dd4:	9306      	str	r3, [sp, #24]
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	9308      	str	r3, [sp, #32]
 8015dda:	9b07      	ldr	r3, [sp, #28]
 8015ddc:	2b09      	cmp	r3, #9
 8015dde:	d868      	bhi.n	8015eb2 <_dtoa_r+0x2ba>
 8015de0:	2b05      	cmp	r3, #5
 8015de2:	bfc4      	itt	gt
 8015de4:	3b04      	subgt	r3, #4
 8015de6:	9307      	strgt	r3, [sp, #28]
 8015de8:	9b07      	ldr	r3, [sp, #28]
 8015dea:	f1a3 0302 	sub.w	r3, r3, #2
 8015dee:	bfcc      	ite	gt
 8015df0:	2500      	movgt	r5, #0
 8015df2:	2501      	movle	r5, #1
 8015df4:	2b03      	cmp	r3, #3
 8015df6:	f200 8085 	bhi.w	8015f04 <_dtoa_r+0x30c>
 8015dfa:	e8df f003 	tbb	[pc, r3]
 8015dfe:	3b2e      	.short	0x3b2e
 8015e00:	5839      	.short	0x5839
 8015e02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015e06:	441d      	add	r5, r3
 8015e08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015e0c:	2b20      	cmp	r3, #32
 8015e0e:	bfc1      	itttt	gt
 8015e10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015e14:	fa08 f803 	lslgt.w	r8, r8, r3
 8015e18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015e1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015e20:	bfd6      	itet	le
 8015e22:	f1c3 0320 	rsble	r3, r3, #32
 8015e26:	ea48 0003 	orrgt.w	r0, r8, r3
 8015e2a:	fa06 f003 	lslle.w	r0, r6, r3
 8015e2e:	f7ea fb91 	bl	8000554 <__aeabi_ui2d>
 8015e32:	2201      	movs	r2, #1
 8015e34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015e38:	3d01      	subs	r5, #1
 8015e3a:	920e      	str	r2, [sp, #56]	; 0x38
 8015e3c:	e76f      	b.n	8015d1e <_dtoa_r+0x126>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e7b3      	b.n	8015daa <_dtoa_r+0x1b2>
 8015e42:	900c      	str	r0, [sp, #48]	; 0x30
 8015e44:	e7b2      	b.n	8015dac <_dtoa_r+0x1b4>
 8015e46:	9b05      	ldr	r3, [sp, #20]
 8015e48:	eba3 030b 	sub.w	r3, r3, fp
 8015e4c:	9305      	str	r3, [sp, #20]
 8015e4e:	f1cb 0300 	rsb	r3, fp, #0
 8015e52:	9308      	str	r3, [sp, #32]
 8015e54:	2300      	movs	r3, #0
 8015e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e58:	e7bf      	b.n	8015dda <_dtoa_r+0x1e2>
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	dc52      	bgt.n	8015f0a <_dtoa_r+0x312>
 8015e64:	2301      	movs	r3, #1
 8015e66:	9301      	str	r3, [sp, #4]
 8015e68:	9304      	str	r3, [sp, #16]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8015e6e:	e00b      	b.n	8015e88 <_dtoa_r+0x290>
 8015e70:	2301      	movs	r3, #1
 8015e72:	e7f3      	b.n	8015e5c <_dtoa_r+0x264>
 8015e74:	2300      	movs	r3, #0
 8015e76:	9309      	str	r3, [sp, #36]	; 0x24
 8015e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e7a:	445b      	add	r3, fp
 8015e7c:	9301      	str	r3, [sp, #4]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	2b01      	cmp	r3, #1
 8015e82:	9304      	str	r3, [sp, #16]
 8015e84:	bfb8      	it	lt
 8015e86:	2301      	movlt	r3, #1
 8015e88:	69e0      	ldr	r0, [r4, #28]
 8015e8a:	2100      	movs	r1, #0
 8015e8c:	2204      	movs	r2, #4
 8015e8e:	f102 0614 	add.w	r6, r2, #20
 8015e92:	429e      	cmp	r6, r3
 8015e94:	d93d      	bls.n	8015f12 <_dtoa_r+0x31a>
 8015e96:	6041      	str	r1, [r0, #4]
 8015e98:	4620      	mov	r0, r4
 8015e9a:	f000 fd9f 	bl	80169dc <_Balloc>
 8015e9e:	9000      	str	r0, [sp, #0]
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d139      	bne.n	8015f18 <_dtoa_r+0x320>
 8015ea4:	4b16      	ldr	r3, [pc, #88]	; (8015f00 <_dtoa_r+0x308>)
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	f240 11af 	movw	r1, #431	; 0x1af
 8015eac:	e6bd      	b.n	8015c2a <_dtoa_r+0x32>
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e7e1      	b.n	8015e76 <_dtoa_r+0x27e>
 8015eb2:	2501      	movs	r5, #1
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9307      	str	r3, [sp, #28]
 8015eb8:	9509      	str	r5, [sp, #36]	; 0x24
 8015eba:	f04f 33ff 	mov.w	r3, #4294967295
 8015ebe:	9301      	str	r3, [sp, #4]
 8015ec0:	9304      	str	r3, [sp, #16]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	2312      	movs	r3, #18
 8015ec6:	e7d1      	b.n	8015e6c <_dtoa_r+0x274>
 8015ec8:	636f4361 	.word	0x636f4361
 8015ecc:	3fd287a7 	.word	0x3fd287a7
 8015ed0:	8b60c8b3 	.word	0x8b60c8b3
 8015ed4:	3fc68a28 	.word	0x3fc68a28
 8015ed8:	509f79fb 	.word	0x509f79fb
 8015edc:	3fd34413 	.word	0x3fd34413
 8015ee0:	0801b5ed 	.word	0x0801b5ed
 8015ee4:	0801b604 	.word	0x0801b604
 8015ee8:	7ff00000 	.word	0x7ff00000
 8015eec:	0801b5e9 	.word	0x0801b5e9
 8015ef0:	0801b5e0 	.word	0x0801b5e0
 8015ef4:	0801b5bd 	.word	0x0801b5bd
 8015ef8:	3ff80000 	.word	0x3ff80000
 8015efc:	0801b6f0 	.word	0x0801b6f0
 8015f00:	0801b65c 	.word	0x0801b65c
 8015f04:	2301      	movs	r3, #1
 8015f06:	9309      	str	r3, [sp, #36]	; 0x24
 8015f08:	e7d7      	b.n	8015eba <_dtoa_r+0x2c2>
 8015f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f0c:	9301      	str	r3, [sp, #4]
 8015f0e:	9304      	str	r3, [sp, #16]
 8015f10:	e7ba      	b.n	8015e88 <_dtoa_r+0x290>
 8015f12:	3101      	adds	r1, #1
 8015f14:	0052      	lsls	r2, r2, #1
 8015f16:	e7ba      	b.n	8015e8e <_dtoa_r+0x296>
 8015f18:	69e3      	ldr	r3, [r4, #28]
 8015f1a:	9a00      	ldr	r2, [sp, #0]
 8015f1c:	601a      	str	r2, [r3, #0]
 8015f1e:	9b04      	ldr	r3, [sp, #16]
 8015f20:	2b0e      	cmp	r3, #14
 8015f22:	f200 80a8 	bhi.w	8016076 <_dtoa_r+0x47e>
 8015f26:	2d00      	cmp	r5, #0
 8015f28:	f000 80a5 	beq.w	8016076 <_dtoa_r+0x47e>
 8015f2c:	f1bb 0f00 	cmp.w	fp, #0
 8015f30:	dd38      	ble.n	8015fa4 <_dtoa_r+0x3ac>
 8015f32:	4bc0      	ldr	r3, [pc, #768]	; (8016234 <_dtoa_r+0x63c>)
 8015f34:	f00b 020f 	and.w	r2, fp, #15
 8015f38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015f40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015f44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015f48:	d019      	beq.n	8015f7e <_dtoa_r+0x386>
 8015f4a:	4bbb      	ldr	r3, [pc, #748]	; (8016238 <_dtoa_r+0x640>)
 8015f4c:	ec51 0b18 	vmov	r0, r1, d8
 8015f50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015f54:	f7ea fca2 	bl	800089c <__aeabi_ddiv>
 8015f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f5c:	f008 080f 	and.w	r8, r8, #15
 8015f60:	2503      	movs	r5, #3
 8015f62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016238 <_dtoa_r+0x640>
 8015f66:	f1b8 0f00 	cmp.w	r8, #0
 8015f6a:	d10a      	bne.n	8015f82 <_dtoa_r+0x38a>
 8015f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015f70:	4632      	mov	r2, r6
 8015f72:	463b      	mov	r3, r7
 8015f74:	f7ea fc92 	bl	800089c <__aeabi_ddiv>
 8015f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015f7c:	e02b      	b.n	8015fd6 <_dtoa_r+0x3de>
 8015f7e:	2502      	movs	r5, #2
 8015f80:	e7ef      	b.n	8015f62 <_dtoa_r+0x36a>
 8015f82:	f018 0f01 	tst.w	r8, #1
 8015f86:	d008      	beq.n	8015f9a <_dtoa_r+0x3a2>
 8015f88:	4630      	mov	r0, r6
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015f90:	f7ea fb5a 	bl	8000648 <__aeabi_dmul>
 8015f94:	3501      	adds	r5, #1
 8015f96:	4606      	mov	r6, r0
 8015f98:	460f      	mov	r7, r1
 8015f9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f9e:	f109 0908 	add.w	r9, r9, #8
 8015fa2:	e7e0      	b.n	8015f66 <_dtoa_r+0x36e>
 8015fa4:	f000 809f 	beq.w	80160e6 <_dtoa_r+0x4ee>
 8015fa8:	f1cb 0600 	rsb	r6, fp, #0
 8015fac:	4ba1      	ldr	r3, [pc, #644]	; (8016234 <_dtoa_r+0x63c>)
 8015fae:	4fa2      	ldr	r7, [pc, #648]	; (8016238 <_dtoa_r+0x640>)
 8015fb0:	f006 020f 	and.w	r2, r6, #15
 8015fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fbc:	ec51 0b18 	vmov	r0, r1, d8
 8015fc0:	f7ea fb42 	bl	8000648 <__aeabi_dmul>
 8015fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fc8:	1136      	asrs	r6, r6, #4
 8015fca:	2300      	movs	r3, #0
 8015fcc:	2502      	movs	r5, #2
 8015fce:	2e00      	cmp	r6, #0
 8015fd0:	d17e      	bne.n	80160d0 <_dtoa_r+0x4d8>
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d1d0      	bne.n	8015f78 <_dtoa_r+0x380>
 8015fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f000 8084 	beq.w	80160ea <_dtoa_r+0x4f2>
 8015fe2:	4b96      	ldr	r3, [pc, #600]	; (801623c <_dtoa_r+0x644>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	4640      	mov	r0, r8
 8015fe8:	4649      	mov	r1, r9
 8015fea:	f7ea fd9f 	bl	8000b2c <__aeabi_dcmplt>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d07b      	beq.n	80160ea <_dtoa_r+0x4f2>
 8015ff2:	9b04      	ldr	r3, [sp, #16]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d078      	beq.n	80160ea <_dtoa_r+0x4f2>
 8015ff8:	9b01      	ldr	r3, [sp, #4]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	dd39      	ble.n	8016072 <_dtoa_r+0x47a>
 8015ffe:	4b90      	ldr	r3, [pc, #576]	; (8016240 <_dtoa_r+0x648>)
 8016000:	2200      	movs	r2, #0
 8016002:	4640      	mov	r0, r8
 8016004:	4649      	mov	r1, r9
 8016006:	f7ea fb1f 	bl	8000648 <__aeabi_dmul>
 801600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801600e:	9e01      	ldr	r6, [sp, #4]
 8016010:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016014:	3501      	adds	r5, #1
 8016016:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801601a:	4628      	mov	r0, r5
 801601c:	f7ea faaa 	bl	8000574 <__aeabi_i2d>
 8016020:	4642      	mov	r2, r8
 8016022:	464b      	mov	r3, r9
 8016024:	f7ea fb10 	bl	8000648 <__aeabi_dmul>
 8016028:	4b86      	ldr	r3, [pc, #536]	; (8016244 <_dtoa_r+0x64c>)
 801602a:	2200      	movs	r2, #0
 801602c:	f7ea f956 	bl	80002dc <__adddf3>
 8016030:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016038:	9303      	str	r3, [sp, #12]
 801603a:	2e00      	cmp	r6, #0
 801603c:	d158      	bne.n	80160f0 <_dtoa_r+0x4f8>
 801603e:	4b82      	ldr	r3, [pc, #520]	; (8016248 <_dtoa_r+0x650>)
 8016040:	2200      	movs	r2, #0
 8016042:	4640      	mov	r0, r8
 8016044:	4649      	mov	r1, r9
 8016046:	f7ea f947 	bl	80002d8 <__aeabi_dsub>
 801604a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801604e:	4680      	mov	r8, r0
 8016050:	4689      	mov	r9, r1
 8016052:	f7ea fd89 	bl	8000b68 <__aeabi_dcmpgt>
 8016056:	2800      	cmp	r0, #0
 8016058:	f040 8296 	bne.w	8016588 <_dtoa_r+0x990>
 801605c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016060:	4640      	mov	r0, r8
 8016062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016066:	4649      	mov	r1, r9
 8016068:	f7ea fd60 	bl	8000b2c <__aeabi_dcmplt>
 801606c:	2800      	cmp	r0, #0
 801606e:	f040 8289 	bne.w	8016584 <_dtoa_r+0x98c>
 8016072:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016076:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016078:	2b00      	cmp	r3, #0
 801607a:	f2c0 814e 	blt.w	801631a <_dtoa_r+0x722>
 801607e:	f1bb 0f0e 	cmp.w	fp, #14
 8016082:	f300 814a 	bgt.w	801631a <_dtoa_r+0x722>
 8016086:	4b6b      	ldr	r3, [pc, #428]	; (8016234 <_dtoa_r+0x63c>)
 8016088:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801608c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016092:	2b00      	cmp	r3, #0
 8016094:	f280 80dc 	bge.w	8016250 <_dtoa_r+0x658>
 8016098:	9b04      	ldr	r3, [sp, #16]
 801609a:	2b00      	cmp	r3, #0
 801609c:	f300 80d8 	bgt.w	8016250 <_dtoa_r+0x658>
 80160a0:	f040 826f 	bne.w	8016582 <_dtoa_r+0x98a>
 80160a4:	4b68      	ldr	r3, [pc, #416]	; (8016248 <_dtoa_r+0x650>)
 80160a6:	2200      	movs	r2, #0
 80160a8:	4640      	mov	r0, r8
 80160aa:	4649      	mov	r1, r9
 80160ac:	f7ea facc 	bl	8000648 <__aeabi_dmul>
 80160b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160b4:	f7ea fd4e 	bl	8000b54 <__aeabi_dcmpge>
 80160b8:	9e04      	ldr	r6, [sp, #16]
 80160ba:	4637      	mov	r7, r6
 80160bc:	2800      	cmp	r0, #0
 80160be:	f040 8245 	bne.w	801654c <_dtoa_r+0x954>
 80160c2:	9d00      	ldr	r5, [sp, #0]
 80160c4:	2331      	movs	r3, #49	; 0x31
 80160c6:	f805 3b01 	strb.w	r3, [r5], #1
 80160ca:	f10b 0b01 	add.w	fp, fp, #1
 80160ce:	e241      	b.n	8016554 <_dtoa_r+0x95c>
 80160d0:	07f2      	lsls	r2, r6, #31
 80160d2:	d505      	bpl.n	80160e0 <_dtoa_r+0x4e8>
 80160d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80160d8:	f7ea fab6 	bl	8000648 <__aeabi_dmul>
 80160dc:	3501      	adds	r5, #1
 80160de:	2301      	movs	r3, #1
 80160e0:	1076      	asrs	r6, r6, #1
 80160e2:	3708      	adds	r7, #8
 80160e4:	e773      	b.n	8015fce <_dtoa_r+0x3d6>
 80160e6:	2502      	movs	r5, #2
 80160e8:	e775      	b.n	8015fd6 <_dtoa_r+0x3de>
 80160ea:	9e04      	ldr	r6, [sp, #16]
 80160ec:	465f      	mov	r7, fp
 80160ee:	e792      	b.n	8016016 <_dtoa_r+0x41e>
 80160f0:	9900      	ldr	r1, [sp, #0]
 80160f2:	4b50      	ldr	r3, [pc, #320]	; (8016234 <_dtoa_r+0x63c>)
 80160f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80160f8:	4431      	add	r1, r6
 80160fa:	9102      	str	r1, [sp, #8]
 80160fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160fe:	eeb0 9a47 	vmov.f32	s18, s14
 8016102:	eef0 9a67 	vmov.f32	s19, s15
 8016106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801610a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801610e:	2900      	cmp	r1, #0
 8016110:	d044      	beq.n	801619c <_dtoa_r+0x5a4>
 8016112:	494e      	ldr	r1, [pc, #312]	; (801624c <_dtoa_r+0x654>)
 8016114:	2000      	movs	r0, #0
 8016116:	f7ea fbc1 	bl	800089c <__aeabi_ddiv>
 801611a:	ec53 2b19 	vmov	r2, r3, d9
 801611e:	f7ea f8db 	bl	80002d8 <__aeabi_dsub>
 8016122:	9d00      	ldr	r5, [sp, #0]
 8016124:	ec41 0b19 	vmov	d9, r0, r1
 8016128:	4649      	mov	r1, r9
 801612a:	4640      	mov	r0, r8
 801612c:	f7ea fd3c 	bl	8000ba8 <__aeabi_d2iz>
 8016130:	4606      	mov	r6, r0
 8016132:	f7ea fa1f 	bl	8000574 <__aeabi_i2d>
 8016136:	4602      	mov	r2, r0
 8016138:	460b      	mov	r3, r1
 801613a:	4640      	mov	r0, r8
 801613c:	4649      	mov	r1, r9
 801613e:	f7ea f8cb 	bl	80002d8 <__aeabi_dsub>
 8016142:	3630      	adds	r6, #48	; 0x30
 8016144:	f805 6b01 	strb.w	r6, [r5], #1
 8016148:	ec53 2b19 	vmov	r2, r3, d9
 801614c:	4680      	mov	r8, r0
 801614e:	4689      	mov	r9, r1
 8016150:	f7ea fcec 	bl	8000b2c <__aeabi_dcmplt>
 8016154:	2800      	cmp	r0, #0
 8016156:	d164      	bne.n	8016222 <_dtoa_r+0x62a>
 8016158:	4642      	mov	r2, r8
 801615a:	464b      	mov	r3, r9
 801615c:	4937      	ldr	r1, [pc, #220]	; (801623c <_dtoa_r+0x644>)
 801615e:	2000      	movs	r0, #0
 8016160:	f7ea f8ba 	bl	80002d8 <__aeabi_dsub>
 8016164:	ec53 2b19 	vmov	r2, r3, d9
 8016168:	f7ea fce0 	bl	8000b2c <__aeabi_dcmplt>
 801616c:	2800      	cmp	r0, #0
 801616e:	f040 80b6 	bne.w	80162de <_dtoa_r+0x6e6>
 8016172:	9b02      	ldr	r3, [sp, #8]
 8016174:	429d      	cmp	r5, r3
 8016176:	f43f af7c 	beq.w	8016072 <_dtoa_r+0x47a>
 801617a:	4b31      	ldr	r3, [pc, #196]	; (8016240 <_dtoa_r+0x648>)
 801617c:	ec51 0b19 	vmov	r0, r1, d9
 8016180:	2200      	movs	r2, #0
 8016182:	f7ea fa61 	bl	8000648 <__aeabi_dmul>
 8016186:	4b2e      	ldr	r3, [pc, #184]	; (8016240 <_dtoa_r+0x648>)
 8016188:	ec41 0b19 	vmov	d9, r0, r1
 801618c:	2200      	movs	r2, #0
 801618e:	4640      	mov	r0, r8
 8016190:	4649      	mov	r1, r9
 8016192:	f7ea fa59 	bl	8000648 <__aeabi_dmul>
 8016196:	4680      	mov	r8, r0
 8016198:	4689      	mov	r9, r1
 801619a:	e7c5      	b.n	8016128 <_dtoa_r+0x530>
 801619c:	ec51 0b17 	vmov	r0, r1, d7
 80161a0:	f7ea fa52 	bl	8000648 <__aeabi_dmul>
 80161a4:	9b02      	ldr	r3, [sp, #8]
 80161a6:	9d00      	ldr	r5, [sp, #0]
 80161a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80161aa:	ec41 0b19 	vmov	d9, r0, r1
 80161ae:	4649      	mov	r1, r9
 80161b0:	4640      	mov	r0, r8
 80161b2:	f7ea fcf9 	bl	8000ba8 <__aeabi_d2iz>
 80161b6:	4606      	mov	r6, r0
 80161b8:	f7ea f9dc 	bl	8000574 <__aeabi_i2d>
 80161bc:	3630      	adds	r6, #48	; 0x30
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	4640      	mov	r0, r8
 80161c4:	4649      	mov	r1, r9
 80161c6:	f7ea f887 	bl	80002d8 <__aeabi_dsub>
 80161ca:	f805 6b01 	strb.w	r6, [r5], #1
 80161ce:	9b02      	ldr	r3, [sp, #8]
 80161d0:	429d      	cmp	r5, r3
 80161d2:	4680      	mov	r8, r0
 80161d4:	4689      	mov	r9, r1
 80161d6:	f04f 0200 	mov.w	r2, #0
 80161da:	d124      	bne.n	8016226 <_dtoa_r+0x62e>
 80161dc:	4b1b      	ldr	r3, [pc, #108]	; (801624c <_dtoa_r+0x654>)
 80161de:	ec51 0b19 	vmov	r0, r1, d9
 80161e2:	f7ea f87b 	bl	80002dc <__adddf3>
 80161e6:	4602      	mov	r2, r0
 80161e8:	460b      	mov	r3, r1
 80161ea:	4640      	mov	r0, r8
 80161ec:	4649      	mov	r1, r9
 80161ee:	f7ea fcbb 	bl	8000b68 <__aeabi_dcmpgt>
 80161f2:	2800      	cmp	r0, #0
 80161f4:	d173      	bne.n	80162de <_dtoa_r+0x6e6>
 80161f6:	ec53 2b19 	vmov	r2, r3, d9
 80161fa:	4914      	ldr	r1, [pc, #80]	; (801624c <_dtoa_r+0x654>)
 80161fc:	2000      	movs	r0, #0
 80161fe:	f7ea f86b 	bl	80002d8 <__aeabi_dsub>
 8016202:	4602      	mov	r2, r0
 8016204:	460b      	mov	r3, r1
 8016206:	4640      	mov	r0, r8
 8016208:	4649      	mov	r1, r9
 801620a:	f7ea fc8f 	bl	8000b2c <__aeabi_dcmplt>
 801620e:	2800      	cmp	r0, #0
 8016210:	f43f af2f 	beq.w	8016072 <_dtoa_r+0x47a>
 8016214:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016216:	1e6b      	subs	r3, r5, #1
 8016218:	930f      	str	r3, [sp, #60]	; 0x3c
 801621a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801621e:	2b30      	cmp	r3, #48	; 0x30
 8016220:	d0f8      	beq.n	8016214 <_dtoa_r+0x61c>
 8016222:	46bb      	mov	fp, r7
 8016224:	e04a      	b.n	80162bc <_dtoa_r+0x6c4>
 8016226:	4b06      	ldr	r3, [pc, #24]	; (8016240 <_dtoa_r+0x648>)
 8016228:	f7ea fa0e 	bl	8000648 <__aeabi_dmul>
 801622c:	4680      	mov	r8, r0
 801622e:	4689      	mov	r9, r1
 8016230:	e7bd      	b.n	80161ae <_dtoa_r+0x5b6>
 8016232:	bf00      	nop
 8016234:	0801b6f0 	.word	0x0801b6f0
 8016238:	0801b6c8 	.word	0x0801b6c8
 801623c:	3ff00000 	.word	0x3ff00000
 8016240:	40240000 	.word	0x40240000
 8016244:	401c0000 	.word	0x401c0000
 8016248:	40140000 	.word	0x40140000
 801624c:	3fe00000 	.word	0x3fe00000
 8016250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016254:	9d00      	ldr	r5, [sp, #0]
 8016256:	4642      	mov	r2, r8
 8016258:	464b      	mov	r3, r9
 801625a:	4630      	mov	r0, r6
 801625c:	4639      	mov	r1, r7
 801625e:	f7ea fb1d 	bl	800089c <__aeabi_ddiv>
 8016262:	f7ea fca1 	bl	8000ba8 <__aeabi_d2iz>
 8016266:	9001      	str	r0, [sp, #4]
 8016268:	f7ea f984 	bl	8000574 <__aeabi_i2d>
 801626c:	4642      	mov	r2, r8
 801626e:	464b      	mov	r3, r9
 8016270:	f7ea f9ea 	bl	8000648 <__aeabi_dmul>
 8016274:	4602      	mov	r2, r0
 8016276:	460b      	mov	r3, r1
 8016278:	4630      	mov	r0, r6
 801627a:	4639      	mov	r1, r7
 801627c:	f7ea f82c 	bl	80002d8 <__aeabi_dsub>
 8016280:	9e01      	ldr	r6, [sp, #4]
 8016282:	9f04      	ldr	r7, [sp, #16]
 8016284:	3630      	adds	r6, #48	; 0x30
 8016286:	f805 6b01 	strb.w	r6, [r5], #1
 801628a:	9e00      	ldr	r6, [sp, #0]
 801628c:	1bae      	subs	r6, r5, r6
 801628e:	42b7      	cmp	r7, r6
 8016290:	4602      	mov	r2, r0
 8016292:	460b      	mov	r3, r1
 8016294:	d134      	bne.n	8016300 <_dtoa_r+0x708>
 8016296:	f7ea f821 	bl	80002dc <__adddf3>
 801629a:	4642      	mov	r2, r8
 801629c:	464b      	mov	r3, r9
 801629e:	4606      	mov	r6, r0
 80162a0:	460f      	mov	r7, r1
 80162a2:	f7ea fc61 	bl	8000b68 <__aeabi_dcmpgt>
 80162a6:	b9c8      	cbnz	r0, 80162dc <_dtoa_r+0x6e4>
 80162a8:	4642      	mov	r2, r8
 80162aa:	464b      	mov	r3, r9
 80162ac:	4630      	mov	r0, r6
 80162ae:	4639      	mov	r1, r7
 80162b0:	f7ea fc32 	bl	8000b18 <__aeabi_dcmpeq>
 80162b4:	b110      	cbz	r0, 80162bc <_dtoa_r+0x6c4>
 80162b6:	9b01      	ldr	r3, [sp, #4]
 80162b8:	07db      	lsls	r3, r3, #31
 80162ba:	d40f      	bmi.n	80162dc <_dtoa_r+0x6e4>
 80162bc:	4651      	mov	r1, sl
 80162be:	4620      	mov	r0, r4
 80162c0:	f000 fbcc 	bl	8016a5c <_Bfree>
 80162c4:	2300      	movs	r3, #0
 80162c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162c8:	702b      	strb	r3, [r5, #0]
 80162ca:	f10b 0301 	add.w	r3, fp, #1
 80162ce:	6013      	str	r3, [r2, #0]
 80162d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f43f ace2 	beq.w	8015c9c <_dtoa_r+0xa4>
 80162d8:	601d      	str	r5, [r3, #0]
 80162da:	e4df      	b.n	8015c9c <_dtoa_r+0xa4>
 80162dc:	465f      	mov	r7, fp
 80162de:	462b      	mov	r3, r5
 80162e0:	461d      	mov	r5, r3
 80162e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80162e6:	2a39      	cmp	r2, #57	; 0x39
 80162e8:	d106      	bne.n	80162f8 <_dtoa_r+0x700>
 80162ea:	9a00      	ldr	r2, [sp, #0]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d1f7      	bne.n	80162e0 <_dtoa_r+0x6e8>
 80162f0:	9900      	ldr	r1, [sp, #0]
 80162f2:	2230      	movs	r2, #48	; 0x30
 80162f4:	3701      	adds	r7, #1
 80162f6:	700a      	strb	r2, [r1, #0]
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	3201      	adds	r2, #1
 80162fc:	701a      	strb	r2, [r3, #0]
 80162fe:	e790      	b.n	8016222 <_dtoa_r+0x62a>
 8016300:	4ba3      	ldr	r3, [pc, #652]	; (8016590 <_dtoa_r+0x998>)
 8016302:	2200      	movs	r2, #0
 8016304:	f7ea f9a0 	bl	8000648 <__aeabi_dmul>
 8016308:	2200      	movs	r2, #0
 801630a:	2300      	movs	r3, #0
 801630c:	4606      	mov	r6, r0
 801630e:	460f      	mov	r7, r1
 8016310:	f7ea fc02 	bl	8000b18 <__aeabi_dcmpeq>
 8016314:	2800      	cmp	r0, #0
 8016316:	d09e      	beq.n	8016256 <_dtoa_r+0x65e>
 8016318:	e7d0      	b.n	80162bc <_dtoa_r+0x6c4>
 801631a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801631c:	2a00      	cmp	r2, #0
 801631e:	f000 80ca 	beq.w	80164b6 <_dtoa_r+0x8be>
 8016322:	9a07      	ldr	r2, [sp, #28]
 8016324:	2a01      	cmp	r2, #1
 8016326:	f300 80ad 	bgt.w	8016484 <_dtoa_r+0x88c>
 801632a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801632c:	2a00      	cmp	r2, #0
 801632e:	f000 80a5 	beq.w	801647c <_dtoa_r+0x884>
 8016332:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016336:	9e08      	ldr	r6, [sp, #32]
 8016338:	9d05      	ldr	r5, [sp, #20]
 801633a:	9a05      	ldr	r2, [sp, #20]
 801633c:	441a      	add	r2, r3
 801633e:	9205      	str	r2, [sp, #20]
 8016340:	9a06      	ldr	r2, [sp, #24]
 8016342:	2101      	movs	r1, #1
 8016344:	441a      	add	r2, r3
 8016346:	4620      	mov	r0, r4
 8016348:	9206      	str	r2, [sp, #24]
 801634a:	f000 fc3d 	bl	8016bc8 <__i2b>
 801634e:	4607      	mov	r7, r0
 8016350:	b165      	cbz	r5, 801636c <_dtoa_r+0x774>
 8016352:	9b06      	ldr	r3, [sp, #24]
 8016354:	2b00      	cmp	r3, #0
 8016356:	dd09      	ble.n	801636c <_dtoa_r+0x774>
 8016358:	42ab      	cmp	r3, r5
 801635a:	9a05      	ldr	r2, [sp, #20]
 801635c:	bfa8      	it	ge
 801635e:	462b      	movge	r3, r5
 8016360:	1ad2      	subs	r2, r2, r3
 8016362:	9205      	str	r2, [sp, #20]
 8016364:	9a06      	ldr	r2, [sp, #24]
 8016366:	1aed      	subs	r5, r5, r3
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	9306      	str	r3, [sp, #24]
 801636c:	9b08      	ldr	r3, [sp, #32]
 801636e:	b1f3      	cbz	r3, 80163ae <_dtoa_r+0x7b6>
 8016370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016372:	2b00      	cmp	r3, #0
 8016374:	f000 80a3 	beq.w	80164be <_dtoa_r+0x8c6>
 8016378:	2e00      	cmp	r6, #0
 801637a:	dd10      	ble.n	801639e <_dtoa_r+0x7a6>
 801637c:	4639      	mov	r1, r7
 801637e:	4632      	mov	r2, r6
 8016380:	4620      	mov	r0, r4
 8016382:	f000 fce1 	bl	8016d48 <__pow5mult>
 8016386:	4652      	mov	r2, sl
 8016388:	4601      	mov	r1, r0
 801638a:	4607      	mov	r7, r0
 801638c:	4620      	mov	r0, r4
 801638e:	f000 fc31 	bl	8016bf4 <__multiply>
 8016392:	4651      	mov	r1, sl
 8016394:	4680      	mov	r8, r0
 8016396:	4620      	mov	r0, r4
 8016398:	f000 fb60 	bl	8016a5c <_Bfree>
 801639c:	46c2      	mov	sl, r8
 801639e:	9b08      	ldr	r3, [sp, #32]
 80163a0:	1b9a      	subs	r2, r3, r6
 80163a2:	d004      	beq.n	80163ae <_dtoa_r+0x7b6>
 80163a4:	4651      	mov	r1, sl
 80163a6:	4620      	mov	r0, r4
 80163a8:	f000 fcce 	bl	8016d48 <__pow5mult>
 80163ac:	4682      	mov	sl, r0
 80163ae:	2101      	movs	r1, #1
 80163b0:	4620      	mov	r0, r4
 80163b2:	f000 fc09 	bl	8016bc8 <__i2b>
 80163b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	4606      	mov	r6, r0
 80163bc:	f340 8081 	ble.w	80164c2 <_dtoa_r+0x8ca>
 80163c0:	461a      	mov	r2, r3
 80163c2:	4601      	mov	r1, r0
 80163c4:	4620      	mov	r0, r4
 80163c6:	f000 fcbf 	bl	8016d48 <__pow5mult>
 80163ca:	9b07      	ldr	r3, [sp, #28]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	4606      	mov	r6, r0
 80163d0:	dd7a      	ble.n	80164c8 <_dtoa_r+0x8d0>
 80163d2:	f04f 0800 	mov.w	r8, #0
 80163d6:	6933      	ldr	r3, [r6, #16]
 80163d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80163dc:	6918      	ldr	r0, [r3, #16]
 80163de:	f000 fba5 	bl	8016b2c <__hi0bits>
 80163e2:	f1c0 0020 	rsb	r0, r0, #32
 80163e6:	9b06      	ldr	r3, [sp, #24]
 80163e8:	4418      	add	r0, r3
 80163ea:	f010 001f 	ands.w	r0, r0, #31
 80163ee:	f000 8094 	beq.w	801651a <_dtoa_r+0x922>
 80163f2:	f1c0 0320 	rsb	r3, r0, #32
 80163f6:	2b04      	cmp	r3, #4
 80163f8:	f340 8085 	ble.w	8016506 <_dtoa_r+0x90e>
 80163fc:	9b05      	ldr	r3, [sp, #20]
 80163fe:	f1c0 001c 	rsb	r0, r0, #28
 8016402:	4403      	add	r3, r0
 8016404:	9305      	str	r3, [sp, #20]
 8016406:	9b06      	ldr	r3, [sp, #24]
 8016408:	4403      	add	r3, r0
 801640a:	4405      	add	r5, r0
 801640c:	9306      	str	r3, [sp, #24]
 801640e:	9b05      	ldr	r3, [sp, #20]
 8016410:	2b00      	cmp	r3, #0
 8016412:	dd05      	ble.n	8016420 <_dtoa_r+0x828>
 8016414:	4651      	mov	r1, sl
 8016416:	461a      	mov	r2, r3
 8016418:	4620      	mov	r0, r4
 801641a:	f000 fcef 	bl	8016dfc <__lshift>
 801641e:	4682      	mov	sl, r0
 8016420:	9b06      	ldr	r3, [sp, #24]
 8016422:	2b00      	cmp	r3, #0
 8016424:	dd05      	ble.n	8016432 <_dtoa_r+0x83a>
 8016426:	4631      	mov	r1, r6
 8016428:	461a      	mov	r2, r3
 801642a:	4620      	mov	r0, r4
 801642c:	f000 fce6 	bl	8016dfc <__lshift>
 8016430:	4606      	mov	r6, r0
 8016432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016434:	2b00      	cmp	r3, #0
 8016436:	d072      	beq.n	801651e <_dtoa_r+0x926>
 8016438:	4631      	mov	r1, r6
 801643a:	4650      	mov	r0, sl
 801643c:	f000 fd4a 	bl	8016ed4 <__mcmp>
 8016440:	2800      	cmp	r0, #0
 8016442:	da6c      	bge.n	801651e <_dtoa_r+0x926>
 8016444:	2300      	movs	r3, #0
 8016446:	4651      	mov	r1, sl
 8016448:	220a      	movs	r2, #10
 801644a:	4620      	mov	r0, r4
 801644c:	f000 fb28 	bl	8016aa0 <__multadd>
 8016450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016456:	4682      	mov	sl, r0
 8016458:	2b00      	cmp	r3, #0
 801645a:	f000 81b0 	beq.w	80167be <_dtoa_r+0xbc6>
 801645e:	2300      	movs	r3, #0
 8016460:	4639      	mov	r1, r7
 8016462:	220a      	movs	r2, #10
 8016464:	4620      	mov	r0, r4
 8016466:	f000 fb1b 	bl	8016aa0 <__multadd>
 801646a:	9b01      	ldr	r3, [sp, #4]
 801646c:	2b00      	cmp	r3, #0
 801646e:	4607      	mov	r7, r0
 8016470:	f300 8096 	bgt.w	80165a0 <_dtoa_r+0x9a8>
 8016474:	9b07      	ldr	r3, [sp, #28]
 8016476:	2b02      	cmp	r3, #2
 8016478:	dc59      	bgt.n	801652e <_dtoa_r+0x936>
 801647a:	e091      	b.n	80165a0 <_dtoa_r+0x9a8>
 801647c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801647e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016482:	e758      	b.n	8016336 <_dtoa_r+0x73e>
 8016484:	9b04      	ldr	r3, [sp, #16]
 8016486:	1e5e      	subs	r6, r3, #1
 8016488:	9b08      	ldr	r3, [sp, #32]
 801648a:	42b3      	cmp	r3, r6
 801648c:	bfbf      	itttt	lt
 801648e:	9b08      	ldrlt	r3, [sp, #32]
 8016490:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8016492:	9608      	strlt	r6, [sp, #32]
 8016494:	1af3      	sublt	r3, r6, r3
 8016496:	bfb4      	ite	lt
 8016498:	18d2      	addlt	r2, r2, r3
 801649a:	1b9e      	subge	r6, r3, r6
 801649c:	9b04      	ldr	r3, [sp, #16]
 801649e:	bfbc      	itt	lt
 80164a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80164a2:	2600      	movlt	r6, #0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	bfb7      	itett	lt
 80164a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80164ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80164b0:	1a9d      	sublt	r5, r3, r2
 80164b2:	2300      	movlt	r3, #0
 80164b4:	e741      	b.n	801633a <_dtoa_r+0x742>
 80164b6:	9e08      	ldr	r6, [sp, #32]
 80164b8:	9d05      	ldr	r5, [sp, #20]
 80164ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80164bc:	e748      	b.n	8016350 <_dtoa_r+0x758>
 80164be:	9a08      	ldr	r2, [sp, #32]
 80164c0:	e770      	b.n	80163a4 <_dtoa_r+0x7ac>
 80164c2:	9b07      	ldr	r3, [sp, #28]
 80164c4:	2b01      	cmp	r3, #1
 80164c6:	dc19      	bgt.n	80164fc <_dtoa_r+0x904>
 80164c8:	9b02      	ldr	r3, [sp, #8]
 80164ca:	b9bb      	cbnz	r3, 80164fc <_dtoa_r+0x904>
 80164cc:	9b03      	ldr	r3, [sp, #12]
 80164ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80164d2:	b99b      	cbnz	r3, 80164fc <_dtoa_r+0x904>
 80164d4:	9b03      	ldr	r3, [sp, #12]
 80164d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164da:	0d1b      	lsrs	r3, r3, #20
 80164dc:	051b      	lsls	r3, r3, #20
 80164de:	b183      	cbz	r3, 8016502 <_dtoa_r+0x90a>
 80164e0:	9b05      	ldr	r3, [sp, #20]
 80164e2:	3301      	adds	r3, #1
 80164e4:	9305      	str	r3, [sp, #20]
 80164e6:	9b06      	ldr	r3, [sp, #24]
 80164e8:	3301      	adds	r3, #1
 80164ea:	9306      	str	r3, [sp, #24]
 80164ec:	f04f 0801 	mov.w	r8, #1
 80164f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	f47f af6f 	bne.w	80163d6 <_dtoa_r+0x7de>
 80164f8:	2001      	movs	r0, #1
 80164fa:	e774      	b.n	80163e6 <_dtoa_r+0x7ee>
 80164fc:	f04f 0800 	mov.w	r8, #0
 8016500:	e7f6      	b.n	80164f0 <_dtoa_r+0x8f8>
 8016502:	4698      	mov	r8, r3
 8016504:	e7f4      	b.n	80164f0 <_dtoa_r+0x8f8>
 8016506:	d082      	beq.n	801640e <_dtoa_r+0x816>
 8016508:	9a05      	ldr	r2, [sp, #20]
 801650a:	331c      	adds	r3, #28
 801650c:	441a      	add	r2, r3
 801650e:	9205      	str	r2, [sp, #20]
 8016510:	9a06      	ldr	r2, [sp, #24]
 8016512:	441a      	add	r2, r3
 8016514:	441d      	add	r5, r3
 8016516:	9206      	str	r2, [sp, #24]
 8016518:	e779      	b.n	801640e <_dtoa_r+0x816>
 801651a:	4603      	mov	r3, r0
 801651c:	e7f4      	b.n	8016508 <_dtoa_r+0x910>
 801651e:	9b04      	ldr	r3, [sp, #16]
 8016520:	2b00      	cmp	r3, #0
 8016522:	dc37      	bgt.n	8016594 <_dtoa_r+0x99c>
 8016524:	9b07      	ldr	r3, [sp, #28]
 8016526:	2b02      	cmp	r3, #2
 8016528:	dd34      	ble.n	8016594 <_dtoa_r+0x99c>
 801652a:	9b04      	ldr	r3, [sp, #16]
 801652c:	9301      	str	r3, [sp, #4]
 801652e:	9b01      	ldr	r3, [sp, #4]
 8016530:	b963      	cbnz	r3, 801654c <_dtoa_r+0x954>
 8016532:	4631      	mov	r1, r6
 8016534:	2205      	movs	r2, #5
 8016536:	4620      	mov	r0, r4
 8016538:	f000 fab2 	bl	8016aa0 <__multadd>
 801653c:	4601      	mov	r1, r0
 801653e:	4606      	mov	r6, r0
 8016540:	4650      	mov	r0, sl
 8016542:	f000 fcc7 	bl	8016ed4 <__mcmp>
 8016546:	2800      	cmp	r0, #0
 8016548:	f73f adbb 	bgt.w	80160c2 <_dtoa_r+0x4ca>
 801654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801654e:	9d00      	ldr	r5, [sp, #0]
 8016550:	ea6f 0b03 	mvn.w	fp, r3
 8016554:	f04f 0800 	mov.w	r8, #0
 8016558:	4631      	mov	r1, r6
 801655a:	4620      	mov	r0, r4
 801655c:	f000 fa7e 	bl	8016a5c <_Bfree>
 8016560:	2f00      	cmp	r7, #0
 8016562:	f43f aeab 	beq.w	80162bc <_dtoa_r+0x6c4>
 8016566:	f1b8 0f00 	cmp.w	r8, #0
 801656a:	d005      	beq.n	8016578 <_dtoa_r+0x980>
 801656c:	45b8      	cmp	r8, r7
 801656e:	d003      	beq.n	8016578 <_dtoa_r+0x980>
 8016570:	4641      	mov	r1, r8
 8016572:	4620      	mov	r0, r4
 8016574:	f000 fa72 	bl	8016a5c <_Bfree>
 8016578:	4639      	mov	r1, r7
 801657a:	4620      	mov	r0, r4
 801657c:	f000 fa6e 	bl	8016a5c <_Bfree>
 8016580:	e69c      	b.n	80162bc <_dtoa_r+0x6c4>
 8016582:	2600      	movs	r6, #0
 8016584:	4637      	mov	r7, r6
 8016586:	e7e1      	b.n	801654c <_dtoa_r+0x954>
 8016588:	46bb      	mov	fp, r7
 801658a:	4637      	mov	r7, r6
 801658c:	e599      	b.n	80160c2 <_dtoa_r+0x4ca>
 801658e:	bf00      	nop
 8016590:	40240000 	.word	0x40240000
 8016594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016596:	2b00      	cmp	r3, #0
 8016598:	f000 80c8 	beq.w	801672c <_dtoa_r+0xb34>
 801659c:	9b04      	ldr	r3, [sp, #16]
 801659e:	9301      	str	r3, [sp, #4]
 80165a0:	2d00      	cmp	r5, #0
 80165a2:	dd05      	ble.n	80165b0 <_dtoa_r+0x9b8>
 80165a4:	4639      	mov	r1, r7
 80165a6:	462a      	mov	r2, r5
 80165a8:	4620      	mov	r0, r4
 80165aa:	f000 fc27 	bl	8016dfc <__lshift>
 80165ae:	4607      	mov	r7, r0
 80165b0:	f1b8 0f00 	cmp.w	r8, #0
 80165b4:	d05b      	beq.n	801666e <_dtoa_r+0xa76>
 80165b6:	6879      	ldr	r1, [r7, #4]
 80165b8:	4620      	mov	r0, r4
 80165ba:	f000 fa0f 	bl	80169dc <_Balloc>
 80165be:	4605      	mov	r5, r0
 80165c0:	b928      	cbnz	r0, 80165ce <_dtoa_r+0x9d6>
 80165c2:	4b83      	ldr	r3, [pc, #524]	; (80167d0 <_dtoa_r+0xbd8>)
 80165c4:	4602      	mov	r2, r0
 80165c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80165ca:	f7ff bb2e 	b.w	8015c2a <_dtoa_r+0x32>
 80165ce:	693a      	ldr	r2, [r7, #16]
 80165d0:	3202      	adds	r2, #2
 80165d2:	0092      	lsls	r2, r2, #2
 80165d4:	f107 010c 	add.w	r1, r7, #12
 80165d8:	300c      	adds	r0, #12
 80165da:	f000 ffab 	bl	8017534 <memcpy>
 80165de:	2201      	movs	r2, #1
 80165e0:	4629      	mov	r1, r5
 80165e2:	4620      	mov	r0, r4
 80165e4:	f000 fc0a 	bl	8016dfc <__lshift>
 80165e8:	9b00      	ldr	r3, [sp, #0]
 80165ea:	3301      	adds	r3, #1
 80165ec:	9304      	str	r3, [sp, #16]
 80165ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165f2:	4413      	add	r3, r2
 80165f4:	9308      	str	r3, [sp, #32]
 80165f6:	9b02      	ldr	r3, [sp, #8]
 80165f8:	f003 0301 	and.w	r3, r3, #1
 80165fc:	46b8      	mov	r8, r7
 80165fe:	9306      	str	r3, [sp, #24]
 8016600:	4607      	mov	r7, r0
 8016602:	9b04      	ldr	r3, [sp, #16]
 8016604:	4631      	mov	r1, r6
 8016606:	3b01      	subs	r3, #1
 8016608:	4650      	mov	r0, sl
 801660a:	9301      	str	r3, [sp, #4]
 801660c:	f7ff fa6b 	bl	8015ae6 <quorem>
 8016610:	4641      	mov	r1, r8
 8016612:	9002      	str	r0, [sp, #8]
 8016614:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016618:	4650      	mov	r0, sl
 801661a:	f000 fc5b 	bl	8016ed4 <__mcmp>
 801661e:	463a      	mov	r2, r7
 8016620:	9005      	str	r0, [sp, #20]
 8016622:	4631      	mov	r1, r6
 8016624:	4620      	mov	r0, r4
 8016626:	f000 fc71 	bl	8016f0c <__mdiff>
 801662a:	68c2      	ldr	r2, [r0, #12]
 801662c:	4605      	mov	r5, r0
 801662e:	bb02      	cbnz	r2, 8016672 <_dtoa_r+0xa7a>
 8016630:	4601      	mov	r1, r0
 8016632:	4650      	mov	r0, sl
 8016634:	f000 fc4e 	bl	8016ed4 <__mcmp>
 8016638:	4602      	mov	r2, r0
 801663a:	4629      	mov	r1, r5
 801663c:	4620      	mov	r0, r4
 801663e:	9209      	str	r2, [sp, #36]	; 0x24
 8016640:	f000 fa0c 	bl	8016a5c <_Bfree>
 8016644:	9b07      	ldr	r3, [sp, #28]
 8016646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016648:	9d04      	ldr	r5, [sp, #16]
 801664a:	ea43 0102 	orr.w	r1, r3, r2
 801664e:	9b06      	ldr	r3, [sp, #24]
 8016650:	4319      	orrs	r1, r3
 8016652:	d110      	bne.n	8016676 <_dtoa_r+0xa7e>
 8016654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016658:	d029      	beq.n	80166ae <_dtoa_r+0xab6>
 801665a:	9b05      	ldr	r3, [sp, #20]
 801665c:	2b00      	cmp	r3, #0
 801665e:	dd02      	ble.n	8016666 <_dtoa_r+0xa6e>
 8016660:	9b02      	ldr	r3, [sp, #8]
 8016662:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8016666:	9b01      	ldr	r3, [sp, #4]
 8016668:	f883 9000 	strb.w	r9, [r3]
 801666c:	e774      	b.n	8016558 <_dtoa_r+0x960>
 801666e:	4638      	mov	r0, r7
 8016670:	e7ba      	b.n	80165e8 <_dtoa_r+0x9f0>
 8016672:	2201      	movs	r2, #1
 8016674:	e7e1      	b.n	801663a <_dtoa_r+0xa42>
 8016676:	9b05      	ldr	r3, [sp, #20]
 8016678:	2b00      	cmp	r3, #0
 801667a:	db04      	blt.n	8016686 <_dtoa_r+0xa8e>
 801667c:	9907      	ldr	r1, [sp, #28]
 801667e:	430b      	orrs	r3, r1
 8016680:	9906      	ldr	r1, [sp, #24]
 8016682:	430b      	orrs	r3, r1
 8016684:	d120      	bne.n	80166c8 <_dtoa_r+0xad0>
 8016686:	2a00      	cmp	r2, #0
 8016688:	dded      	ble.n	8016666 <_dtoa_r+0xa6e>
 801668a:	4651      	mov	r1, sl
 801668c:	2201      	movs	r2, #1
 801668e:	4620      	mov	r0, r4
 8016690:	f000 fbb4 	bl	8016dfc <__lshift>
 8016694:	4631      	mov	r1, r6
 8016696:	4682      	mov	sl, r0
 8016698:	f000 fc1c 	bl	8016ed4 <__mcmp>
 801669c:	2800      	cmp	r0, #0
 801669e:	dc03      	bgt.n	80166a8 <_dtoa_r+0xab0>
 80166a0:	d1e1      	bne.n	8016666 <_dtoa_r+0xa6e>
 80166a2:	f019 0f01 	tst.w	r9, #1
 80166a6:	d0de      	beq.n	8016666 <_dtoa_r+0xa6e>
 80166a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80166ac:	d1d8      	bne.n	8016660 <_dtoa_r+0xa68>
 80166ae:	9a01      	ldr	r2, [sp, #4]
 80166b0:	2339      	movs	r3, #57	; 0x39
 80166b2:	7013      	strb	r3, [r2, #0]
 80166b4:	462b      	mov	r3, r5
 80166b6:	461d      	mov	r5, r3
 80166b8:	3b01      	subs	r3, #1
 80166ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80166be:	2a39      	cmp	r2, #57	; 0x39
 80166c0:	d06c      	beq.n	801679c <_dtoa_r+0xba4>
 80166c2:	3201      	adds	r2, #1
 80166c4:	701a      	strb	r2, [r3, #0]
 80166c6:	e747      	b.n	8016558 <_dtoa_r+0x960>
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	dd07      	ble.n	80166dc <_dtoa_r+0xae4>
 80166cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80166d0:	d0ed      	beq.n	80166ae <_dtoa_r+0xab6>
 80166d2:	9a01      	ldr	r2, [sp, #4]
 80166d4:	f109 0301 	add.w	r3, r9, #1
 80166d8:	7013      	strb	r3, [r2, #0]
 80166da:	e73d      	b.n	8016558 <_dtoa_r+0x960>
 80166dc:	9b04      	ldr	r3, [sp, #16]
 80166de:	9a08      	ldr	r2, [sp, #32]
 80166e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80166e4:	4293      	cmp	r3, r2
 80166e6:	d043      	beq.n	8016770 <_dtoa_r+0xb78>
 80166e8:	4651      	mov	r1, sl
 80166ea:	2300      	movs	r3, #0
 80166ec:	220a      	movs	r2, #10
 80166ee:	4620      	mov	r0, r4
 80166f0:	f000 f9d6 	bl	8016aa0 <__multadd>
 80166f4:	45b8      	cmp	r8, r7
 80166f6:	4682      	mov	sl, r0
 80166f8:	f04f 0300 	mov.w	r3, #0
 80166fc:	f04f 020a 	mov.w	r2, #10
 8016700:	4641      	mov	r1, r8
 8016702:	4620      	mov	r0, r4
 8016704:	d107      	bne.n	8016716 <_dtoa_r+0xb1e>
 8016706:	f000 f9cb 	bl	8016aa0 <__multadd>
 801670a:	4680      	mov	r8, r0
 801670c:	4607      	mov	r7, r0
 801670e:	9b04      	ldr	r3, [sp, #16]
 8016710:	3301      	adds	r3, #1
 8016712:	9304      	str	r3, [sp, #16]
 8016714:	e775      	b.n	8016602 <_dtoa_r+0xa0a>
 8016716:	f000 f9c3 	bl	8016aa0 <__multadd>
 801671a:	4639      	mov	r1, r7
 801671c:	4680      	mov	r8, r0
 801671e:	2300      	movs	r3, #0
 8016720:	220a      	movs	r2, #10
 8016722:	4620      	mov	r0, r4
 8016724:	f000 f9bc 	bl	8016aa0 <__multadd>
 8016728:	4607      	mov	r7, r0
 801672a:	e7f0      	b.n	801670e <_dtoa_r+0xb16>
 801672c:	9b04      	ldr	r3, [sp, #16]
 801672e:	9301      	str	r3, [sp, #4]
 8016730:	9d00      	ldr	r5, [sp, #0]
 8016732:	4631      	mov	r1, r6
 8016734:	4650      	mov	r0, sl
 8016736:	f7ff f9d6 	bl	8015ae6 <quorem>
 801673a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801673e:	9b00      	ldr	r3, [sp, #0]
 8016740:	f805 9b01 	strb.w	r9, [r5], #1
 8016744:	1aea      	subs	r2, r5, r3
 8016746:	9b01      	ldr	r3, [sp, #4]
 8016748:	4293      	cmp	r3, r2
 801674a:	dd07      	ble.n	801675c <_dtoa_r+0xb64>
 801674c:	4651      	mov	r1, sl
 801674e:	2300      	movs	r3, #0
 8016750:	220a      	movs	r2, #10
 8016752:	4620      	mov	r0, r4
 8016754:	f000 f9a4 	bl	8016aa0 <__multadd>
 8016758:	4682      	mov	sl, r0
 801675a:	e7ea      	b.n	8016732 <_dtoa_r+0xb3a>
 801675c:	9b01      	ldr	r3, [sp, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	bfc8      	it	gt
 8016762:	461d      	movgt	r5, r3
 8016764:	9b00      	ldr	r3, [sp, #0]
 8016766:	bfd8      	it	le
 8016768:	2501      	movle	r5, #1
 801676a:	441d      	add	r5, r3
 801676c:	f04f 0800 	mov.w	r8, #0
 8016770:	4651      	mov	r1, sl
 8016772:	2201      	movs	r2, #1
 8016774:	4620      	mov	r0, r4
 8016776:	f000 fb41 	bl	8016dfc <__lshift>
 801677a:	4631      	mov	r1, r6
 801677c:	4682      	mov	sl, r0
 801677e:	f000 fba9 	bl	8016ed4 <__mcmp>
 8016782:	2800      	cmp	r0, #0
 8016784:	dc96      	bgt.n	80166b4 <_dtoa_r+0xabc>
 8016786:	d102      	bne.n	801678e <_dtoa_r+0xb96>
 8016788:	f019 0f01 	tst.w	r9, #1
 801678c:	d192      	bne.n	80166b4 <_dtoa_r+0xabc>
 801678e:	462b      	mov	r3, r5
 8016790:	461d      	mov	r5, r3
 8016792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016796:	2a30      	cmp	r2, #48	; 0x30
 8016798:	d0fa      	beq.n	8016790 <_dtoa_r+0xb98>
 801679a:	e6dd      	b.n	8016558 <_dtoa_r+0x960>
 801679c:	9a00      	ldr	r2, [sp, #0]
 801679e:	429a      	cmp	r2, r3
 80167a0:	d189      	bne.n	80166b6 <_dtoa_r+0xabe>
 80167a2:	f10b 0b01 	add.w	fp, fp, #1
 80167a6:	2331      	movs	r3, #49	; 0x31
 80167a8:	e796      	b.n	80166d8 <_dtoa_r+0xae0>
 80167aa:	4b0a      	ldr	r3, [pc, #40]	; (80167d4 <_dtoa_r+0xbdc>)
 80167ac:	f7ff ba99 	b.w	8015ce2 <_dtoa_r+0xea>
 80167b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	f47f aa6d 	bne.w	8015c92 <_dtoa_r+0x9a>
 80167b8:	4b07      	ldr	r3, [pc, #28]	; (80167d8 <_dtoa_r+0xbe0>)
 80167ba:	f7ff ba92 	b.w	8015ce2 <_dtoa_r+0xea>
 80167be:	9b01      	ldr	r3, [sp, #4]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dcb5      	bgt.n	8016730 <_dtoa_r+0xb38>
 80167c4:	9b07      	ldr	r3, [sp, #28]
 80167c6:	2b02      	cmp	r3, #2
 80167c8:	f73f aeb1 	bgt.w	801652e <_dtoa_r+0x936>
 80167cc:	e7b0      	b.n	8016730 <_dtoa_r+0xb38>
 80167ce:	bf00      	nop
 80167d0:	0801b65c 	.word	0x0801b65c
 80167d4:	0801b5bc 	.word	0x0801b5bc
 80167d8:	0801b5e0 	.word	0x0801b5e0

080167dc <_free_r>:
 80167dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80167de:	2900      	cmp	r1, #0
 80167e0:	d044      	beq.n	801686c <_free_r+0x90>
 80167e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167e6:	9001      	str	r0, [sp, #4]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f1a1 0404 	sub.w	r4, r1, #4
 80167ee:	bfb8      	it	lt
 80167f0:	18e4      	addlt	r4, r4, r3
 80167f2:	f000 f8e7 	bl	80169c4 <__malloc_lock>
 80167f6:	4a1e      	ldr	r2, [pc, #120]	; (8016870 <_free_r+0x94>)
 80167f8:	9801      	ldr	r0, [sp, #4]
 80167fa:	6813      	ldr	r3, [r2, #0]
 80167fc:	b933      	cbnz	r3, 801680c <_free_r+0x30>
 80167fe:	6063      	str	r3, [r4, #4]
 8016800:	6014      	str	r4, [r2, #0]
 8016802:	b003      	add	sp, #12
 8016804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016808:	f000 b8e2 	b.w	80169d0 <__malloc_unlock>
 801680c:	42a3      	cmp	r3, r4
 801680e:	d908      	bls.n	8016822 <_free_r+0x46>
 8016810:	6825      	ldr	r5, [r4, #0]
 8016812:	1961      	adds	r1, r4, r5
 8016814:	428b      	cmp	r3, r1
 8016816:	bf01      	itttt	eq
 8016818:	6819      	ldreq	r1, [r3, #0]
 801681a:	685b      	ldreq	r3, [r3, #4]
 801681c:	1949      	addeq	r1, r1, r5
 801681e:	6021      	streq	r1, [r4, #0]
 8016820:	e7ed      	b.n	80167fe <_free_r+0x22>
 8016822:	461a      	mov	r2, r3
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	b10b      	cbz	r3, 801682c <_free_r+0x50>
 8016828:	42a3      	cmp	r3, r4
 801682a:	d9fa      	bls.n	8016822 <_free_r+0x46>
 801682c:	6811      	ldr	r1, [r2, #0]
 801682e:	1855      	adds	r5, r2, r1
 8016830:	42a5      	cmp	r5, r4
 8016832:	d10b      	bne.n	801684c <_free_r+0x70>
 8016834:	6824      	ldr	r4, [r4, #0]
 8016836:	4421      	add	r1, r4
 8016838:	1854      	adds	r4, r2, r1
 801683a:	42a3      	cmp	r3, r4
 801683c:	6011      	str	r1, [r2, #0]
 801683e:	d1e0      	bne.n	8016802 <_free_r+0x26>
 8016840:	681c      	ldr	r4, [r3, #0]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	6053      	str	r3, [r2, #4]
 8016846:	440c      	add	r4, r1
 8016848:	6014      	str	r4, [r2, #0]
 801684a:	e7da      	b.n	8016802 <_free_r+0x26>
 801684c:	d902      	bls.n	8016854 <_free_r+0x78>
 801684e:	230c      	movs	r3, #12
 8016850:	6003      	str	r3, [r0, #0]
 8016852:	e7d6      	b.n	8016802 <_free_r+0x26>
 8016854:	6825      	ldr	r5, [r4, #0]
 8016856:	1961      	adds	r1, r4, r5
 8016858:	428b      	cmp	r3, r1
 801685a:	bf04      	itt	eq
 801685c:	6819      	ldreq	r1, [r3, #0]
 801685e:	685b      	ldreq	r3, [r3, #4]
 8016860:	6063      	str	r3, [r4, #4]
 8016862:	bf04      	itt	eq
 8016864:	1949      	addeq	r1, r1, r5
 8016866:	6021      	streq	r1, [r4, #0]
 8016868:	6054      	str	r4, [r2, #4]
 801686a:	e7ca      	b.n	8016802 <_free_r+0x26>
 801686c:	b003      	add	sp, #12
 801686e:	bd30      	pop	{r4, r5, pc}
 8016870:	20002ed0 	.word	0x20002ed0

08016874 <malloc>:
 8016874:	4b02      	ldr	r3, [pc, #8]	; (8016880 <malloc+0xc>)
 8016876:	4601      	mov	r1, r0
 8016878:	6818      	ldr	r0, [r3, #0]
 801687a:	f000 b823 	b.w	80168c4 <_malloc_r>
 801687e:	bf00      	nop
 8016880:	20000374 	.word	0x20000374

08016884 <sbrk_aligned>:
 8016884:	b570      	push	{r4, r5, r6, lr}
 8016886:	4e0e      	ldr	r6, [pc, #56]	; (80168c0 <sbrk_aligned+0x3c>)
 8016888:	460c      	mov	r4, r1
 801688a:	6831      	ldr	r1, [r6, #0]
 801688c:	4605      	mov	r5, r0
 801688e:	b911      	cbnz	r1, 8016896 <sbrk_aligned+0x12>
 8016890:	f000 fe40 	bl	8017514 <_sbrk_r>
 8016894:	6030      	str	r0, [r6, #0]
 8016896:	4621      	mov	r1, r4
 8016898:	4628      	mov	r0, r5
 801689a:	f000 fe3b 	bl	8017514 <_sbrk_r>
 801689e:	1c43      	adds	r3, r0, #1
 80168a0:	d00a      	beq.n	80168b8 <sbrk_aligned+0x34>
 80168a2:	1cc4      	adds	r4, r0, #3
 80168a4:	f024 0403 	bic.w	r4, r4, #3
 80168a8:	42a0      	cmp	r0, r4
 80168aa:	d007      	beq.n	80168bc <sbrk_aligned+0x38>
 80168ac:	1a21      	subs	r1, r4, r0
 80168ae:	4628      	mov	r0, r5
 80168b0:	f000 fe30 	bl	8017514 <_sbrk_r>
 80168b4:	3001      	adds	r0, #1
 80168b6:	d101      	bne.n	80168bc <sbrk_aligned+0x38>
 80168b8:	f04f 34ff 	mov.w	r4, #4294967295
 80168bc:	4620      	mov	r0, r4
 80168be:	bd70      	pop	{r4, r5, r6, pc}
 80168c0:	20002ed4 	.word	0x20002ed4

080168c4 <_malloc_r>:
 80168c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168c8:	1ccd      	adds	r5, r1, #3
 80168ca:	f025 0503 	bic.w	r5, r5, #3
 80168ce:	3508      	adds	r5, #8
 80168d0:	2d0c      	cmp	r5, #12
 80168d2:	bf38      	it	cc
 80168d4:	250c      	movcc	r5, #12
 80168d6:	2d00      	cmp	r5, #0
 80168d8:	4607      	mov	r7, r0
 80168da:	db01      	blt.n	80168e0 <_malloc_r+0x1c>
 80168dc:	42a9      	cmp	r1, r5
 80168de:	d905      	bls.n	80168ec <_malloc_r+0x28>
 80168e0:	230c      	movs	r3, #12
 80168e2:	603b      	str	r3, [r7, #0]
 80168e4:	2600      	movs	r6, #0
 80168e6:	4630      	mov	r0, r6
 80168e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80169c0 <_malloc_r+0xfc>
 80168f0:	f000 f868 	bl	80169c4 <__malloc_lock>
 80168f4:	f8d8 3000 	ldr.w	r3, [r8]
 80168f8:	461c      	mov	r4, r3
 80168fa:	bb5c      	cbnz	r4, 8016954 <_malloc_r+0x90>
 80168fc:	4629      	mov	r1, r5
 80168fe:	4638      	mov	r0, r7
 8016900:	f7ff ffc0 	bl	8016884 <sbrk_aligned>
 8016904:	1c43      	adds	r3, r0, #1
 8016906:	4604      	mov	r4, r0
 8016908:	d155      	bne.n	80169b6 <_malloc_r+0xf2>
 801690a:	f8d8 4000 	ldr.w	r4, [r8]
 801690e:	4626      	mov	r6, r4
 8016910:	2e00      	cmp	r6, #0
 8016912:	d145      	bne.n	80169a0 <_malloc_r+0xdc>
 8016914:	2c00      	cmp	r4, #0
 8016916:	d048      	beq.n	80169aa <_malloc_r+0xe6>
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	4631      	mov	r1, r6
 801691c:	4638      	mov	r0, r7
 801691e:	eb04 0903 	add.w	r9, r4, r3
 8016922:	f000 fdf7 	bl	8017514 <_sbrk_r>
 8016926:	4581      	cmp	r9, r0
 8016928:	d13f      	bne.n	80169aa <_malloc_r+0xe6>
 801692a:	6821      	ldr	r1, [r4, #0]
 801692c:	1a6d      	subs	r5, r5, r1
 801692e:	4629      	mov	r1, r5
 8016930:	4638      	mov	r0, r7
 8016932:	f7ff ffa7 	bl	8016884 <sbrk_aligned>
 8016936:	3001      	adds	r0, #1
 8016938:	d037      	beq.n	80169aa <_malloc_r+0xe6>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	442b      	add	r3, r5
 801693e:	6023      	str	r3, [r4, #0]
 8016940:	f8d8 3000 	ldr.w	r3, [r8]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d038      	beq.n	80169ba <_malloc_r+0xf6>
 8016948:	685a      	ldr	r2, [r3, #4]
 801694a:	42a2      	cmp	r2, r4
 801694c:	d12b      	bne.n	80169a6 <_malloc_r+0xe2>
 801694e:	2200      	movs	r2, #0
 8016950:	605a      	str	r2, [r3, #4]
 8016952:	e00f      	b.n	8016974 <_malloc_r+0xb0>
 8016954:	6822      	ldr	r2, [r4, #0]
 8016956:	1b52      	subs	r2, r2, r5
 8016958:	d41f      	bmi.n	801699a <_malloc_r+0xd6>
 801695a:	2a0b      	cmp	r2, #11
 801695c:	d917      	bls.n	801698e <_malloc_r+0xca>
 801695e:	1961      	adds	r1, r4, r5
 8016960:	42a3      	cmp	r3, r4
 8016962:	6025      	str	r5, [r4, #0]
 8016964:	bf18      	it	ne
 8016966:	6059      	strne	r1, [r3, #4]
 8016968:	6863      	ldr	r3, [r4, #4]
 801696a:	bf08      	it	eq
 801696c:	f8c8 1000 	streq.w	r1, [r8]
 8016970:	5162      	str	r2, [r4, r5]
 8016972:	604b      	str	r3, [r1, #4]
 8016974:	4638      	mov	r0, r7
 8016976:	f104 060b 	add.w	r6, r4, #11
 801697a:	f000 f829 	bl	80169d0 <__malloc_unlock>
 801697e:	f026 0607 	bic.w	r6, r6, #7
 8016982:	1d23      	adds	r3, r4, #4
 8016984:	1af2      	subs	r2, r6, r3
 8016986:	d0ae      	beq.n	80168e6 <_malloc_r+0x22>
 8016988:	1b9b      	subs	r3, r3, r6
 801698a:	50a3      	str	r3, [r4, r2]
 801698c:	e7ab      	b.n	80168e6 <_malloc_r+0x22>
 801698e:	42a3      	cmp	r3, r4
 8016990:	6862      	ldr	r2, [r4, #4]
 8016992:	d1dd      	bne.n	8016950 <_malloc_r+0x8c>
 8016994:	f8c8 2000 	str.w	r2, [r8]
 8016998:	e7ec      	b.n	8016974 <_malloc_r+0xb0>
 801699a:	4623      	mov	r3, r4
 801699c:	6864      	ldr	r4, [r4, #4]
 801699e:	e7ac      	b.n	80168fa <_malloc_r+0x36>
 80169a0:	4634      	mov	r4, r6
 80169a2:	6876      	ldr	r6, [r6, #4]
 80169a4:	e7b4      	b.n	8016910 <_malloc_r+0x4c>
 80169a6:	4613      	mov	r3, r2
 80169a8:	e7cc      	b.n	8016944 <_malloc_r+0x80>
 80169aa:	230c      	movs	r3, #12
 80169ac:	603b      	str	r3, [r7, #0]
 80169ae:	4638      	mov	r0, r7
 80169b0:	f000 f80e 	bl	80169d0 <__malloc_unlock>
 80169b4:	e797      	b.n	80168e6 <_malloc_r+0x22>
 80169b6:	6025      	str	r5, [r4, #0]
 80169b8:	e7dc      	b.n	8016974 <_malloc_r+0xb0>
 80169ba:	605b      	str	r3, [r3, #4]
 80169bc:	deff      	udf	#255	; 0xff
 80169be:	bf00      	nop
 80169c0:	20002ed0 	.word	0x20002ed0

080169c4 <__malloc_lock>:
 80169c4:	4801      	ldr	r0, [pc, #4]	; (80169cc <__malloc_lock+0x8>)
 80169c6:	f7ff b88c 	b.w	8015ae2 <__retarget_lock_acquire_recursive>
 80169ca:	bf00      	nop
 80169cc:	20002ecc 	.word	0x20002ecc

080169d0 <__malloc_unlock>:
 80169d0:	4801      	ldr	r0, [pc, #4]	; (80169d8 <__malloc_unlock+0x8>)
 80169d2:	f7ff b887 	b.w	8015ae4 <__retarget_lock_release_recursive>
 80169d6:	bf00      	nop
 80169d8:	20002ecc 	.word	0x20002ecc

080169dc <_Balloc>:
 80169dc:	b570      	push	{r4, r5, r6, lr}
 80169de:	69c6      	ldr	r6, [r0, #28]
 80169e0:	4604      	mov	r4, r0
 80169e2:	460d      	mov	r5, r1
 80169e4:	b976      	cbnz	r6, 8016a04 <_Balloc+0x28>
 80169e6:	2010      	movs	r0, #16
 80169e8:	f7ff ff44 	bl	8016874 <malloc>
 80169ec:	4602      	mov	r2, r0
 80169ee:	61e0      	str	r0, [r4, #28]
 80169f0:	b920      	cbnz	r0, 80169fc <_Balloc+0x20>
 80169f2:	4b18      	ldr	r3, [pc, #96]	; (8016a54 <_Balloc+0x78>)
 80169f4:	4818      	ldr	r0, [pc, #96]	; (8016a58 <_Balloc+0x7c>)
 80169f6:	216b      	movs	r1, #107	; 0x6b
 80169f8:	f000 fdaa 	bl	8017550 <__assert_func>
 80169fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a00:	6006      	str	r6, [r0, #0]
 8016a02:	60c6      	str	r6, [r0, #12]
 8016a04:	69e6      	ldr	r6, [r4, #28]
 8016a06:	68f3      	ldr	r3, [r6, #12]
 8016a08:	b183      	cbz	r3, 8016a2c <_Balloc+0x50>
 8016a0a:	69e3      	ldr	r3, [r4, #28]
 8016a0c:	68db      	ldr	r3, [r3, #12]
 8016a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016a12:	b9b8      	cbnz	r0, 8016a44 <_Balloc+0x68>
 8016a14:	2101      	movs	r1, #1
 8016a16:	fa01 f605 	lsl.w	r6, r1, r5
 8016a1a:	1d72      	adds	r2, r6, #5
 8016a1c:	0092      	lsls	r2, r2, #2
 8016a1e:	4620      	mov	r0, r4
 8016a20:	f000 fdb4 	bl	801758c <_calloc_r>
 8016a24:	b160      	cbz	r0, 8016a40 <_Balloc+0x64>
 8016a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016a2a:	e00e      	b.n	8016a4a <_Balloc+0x6e>
 8016a2c:	2221      	movs	r2, #33	; 0x21
 8016a2e:	2104      	movs	r1, #4
 8016a30:	4620      	mov	r0, r4
 8016a32:	f000 fdab 	bl	801758c <_calloc_r>
 8016a36:	69e3      	ldr	r3, [r4, #28]
 8016a38:	60f0      	str	r0, [r6, #12]
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d1e4      	bne.n	8016a0a <_Balloc+0x2e>
 8016a40:	2000      	movs	r0, #0
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	6802      	ldr	r2, [r0, #0]
 8016a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016a50:	e7f7      	b.n	8016a42 <_Balloc+0x66>
 8016a52:	bf00      	nop
 8016a54:	0801b5ed 	.word	0x0801b5ed
 8016a58:	0801b66d 	.word	0x0801b66d

08016a5c <_Bfree>:
 8016a5c:	b570      	push	{r4, r5, r6, lr}
 8016a5e:	69c6      	ldr	r6, [r0, #28]
 8016a60:	4605      	mov	r5, r0
 8016a62:	460c      	mov	r4, r1
 8016a64:	b976      	cbnz	r6, 8016a84 <_Bfree+0x28>
 8016a66:	2010      	movs	r0, #16
 8016a68:	f7ff ff04 	bl	8016874 <malloc>
 8016a6c:	4602      	mov	r2, r0
 8016a6e:	61e8      	str	r0, [r5, #28]
 8016a70:	b920      	cbnz	r0, 8016a7c <_Bfree+0x20>
 8016a72:	4b09      	ldr	r3, [pc, #36]	; (8016a98 <_Bfree+0x3c>)
 8016a74:	4809      	ldr	r0, [pc, #36]	; (8016a9c <_Bfree+0x40>)
 8016a76:	218f      	movs	r1, #143	; 0x8f
 8016a78:	f000 fd6a 	bl	8017550 <__assert_func>
 8016a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a80:	6006      	str	r6, [r0, #0]
 8016a82:	60c6      	str	r6, [r0, #12]
 8016a84:	b13c      	cbz	r4, 8016a96 <_Bfree+0x3a>
 8016a86:	69eb      	ldr	r3, [r5, #28]
 8016a88:	6862      	ldr	r2, [r4, #4]
 8016a8a:	68db      	ldr	r3, [r3, #12]
 8016a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016a90:	6021      	str	r1, [r4, #0]
 8016a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016a96:	bd70      	pop	{r4, r5, r6, pc}
 8016a98:	0801b5ed 	.word	0x0801b5ed
 8016a9c:	0801b66d 	.word	0x0801b66d

08016aa0 <__multadd>:
 8016aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa4:	690d      	ldr	r5, [r1, #16]
 8016aa6:	4607      	mov	r7, r0
 8016aa8:	460c      	mov	r4, r1
 8016aaa:	461e      	mov	r6, r3
 8016aac:	f101 0c14 	add.w	ip, r1, #20
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	f8dc 3000 	ldr.w	r3, [ip]
 8016ab6:	b299      	uxth	r1, r3
 8016ab8:	fb02 6101 	mla	r1, r2, r1, r6
 8016abc:	0c1e      	lsrs	r6, r3, #16
 8016abe:	0c0b      	lsrs	r3, r1, #16
 8016ac0:	fb02 3306 	mla	r3, r2, r6, r3
 8016ac4:	b289      	uxth	r1, r1
 8016ac6:	3001      	adds	r0, #1
 8016ac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016acc:	4285      	cmp	r5, r0
 8016ace:	f84c 1b04 	str.w	r1, [ip], #4
 8016ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016ad6:	dcec      	bgt.n	8016ab2 <__multadd+0x12>
 8016ad8:	b30e      	cbz	r6, 8016b1e <__multadd+0x7e>
 8016ada:	68a3      	ldr	r3, [r4, #8]
 8016adc:	42ab      	cmp	r3, r5
 8016ade:	dc19      	bgt.n	8016b14 <__multadd+0x74>
 8016ae0:	6861      	ldr	r1, [r4, #4]
 8016ae2:	4638      	mov	r0, r7
 8016ae4:	3101      	adds	r1, #1
 8016ae6:	f7ff ff79 	bl	80169dc <_Balloc>
 8016aea:	4680      	mov	r8, r0
 8016aec:	b928      	cbnz	r0, 8016afa <__multadd+0x5a>
 8016aee:	4602      	mov	r2, r0
 8016af0:	4b0c      	ldr	r3, [pc, #48]	; (8016b24 <__multadd+0x84>)
 8016af2:	480d      	ldr	r0, [pc, #52]	; (8016b28 <__multadd+0x88>)
 8016af4:	21ba      	movs	r1, #186	; 0xba
 8016af6:	f000 fd2b 	bl	8017550 <__assert_func>
 8016afa:	6922      	ldr	r2, [r4, #16]
 8016afc:	3202      	adds	r2, #2
 8016afe:	f104 010c 	add.w	r1, r4, #12
 8016b02:	0092      	lsls	r2, r2, #2
 8016b04:	300c      	adds	r0, #12
 8016b06:	f000 fd15 	bl	8017534 <memcpy>
 8016b0a:	4621      	mov	r1, r4
 8016b0c:	4638      	mov	r0, r7
 8016b0e:	f7ff ffa5 	bl	8016a5c <_Bfree>
 8016b12:	4644      	mov	r4, r8
 8016b14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016b18:	3501      	adds	r5, #1
 8016b1a:	615e      	str	r6, [r3, #20]
 8016b1c:	6125      	str	r5, [r4, #16]
 8016b1e:	4620      	mov	r0, r4
 8016b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b24:	0801b65c 	.word	0x0801b65c
 8016b28:	0801b66d 	.word	0x0801b66d

08016b2c <__hi0bits>:
 8016b2c:	0c03      	lsrs	r3, r0, #16
 8016b2e:	041b      	lsls	r3, r3, #16
 8016b30:	b9d3      	cbnz	r3, 8016b68 <__hi0bits+0x3c>
 8016b32:	0400      	lsls	r0, r0, #16
 8016b34:	2310      	movs	r3, #16
 8016b36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016b3a:	bf04      	itt	eq
 8016b3c:	0200      	lsleq	r0, r0, #8
 8016b3e:	3308      	addeq	r3, #8
 8016b40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016b44:	bf04      	itt	eq
 8016b46:	0100      	lsleq	r0, r0, #4
 8016b48:	3304      	addeq	r3, #4
 8016b4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016b4e:	bf04      	itt	eq
 8016b50:	0080      	lsleq	r0, r0, #2
 8016b52:	3302      	addeq	r3, #2
 8016b54:	2800      	cmp	r0, #0
 8016b56:	db05      	blt.n	8016b64 <__hi0bits+0x38>
 8016b58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016b5c:	f103 0301 	add.w	r3, r3, #1
 8016b60:	bf08      	it	eq
 8016b62:	2320      	moveq	r3, #32
 8016b64:	4618      	mov	r0, r3
 8016b66:	4770      	bx	lr
 8016b68:	2300      	movs	r3, #0
 8016b6a:	e7e4      	b.n	8016b36 <__hi0bits+0xa>

08016b6c <__lo0bits>:
 8016b6c:	6803      	ldr	r3, [r0, #0]
 8016b6e:	f013 0207 	ands.w	r2, r3, #7
 8016b72:	d00c      	beq.n	8016b8e <__lo0bits+0x22>
 8016b74:	07d9      	lsls	r1, r3, #31
 8016b76:	d422      	bmi.n	8016bbe <__lo0bits+0x52>
 8016b78:	079a      	lsls	r2, r3, #30
 8016b7a:	bf49      	itett	mi
 8016b7c:	085b      	lsrmi	r3, r3, #1
 8016b7e:	089b      	lsrpl	r3, r3, #2
 8016b80:	6003      	strmi	r3, [r0, #0]
 8016b82:	2201      	movmi	r2, #1
 8016b84:	bf5c      	itt	pl
 8016b86:	6003      	strpl	r3, [r0, #0]
 8016b88:	2202      	movpl	r2, #2
 8016b8a:	4610      	mov	r0, r2
 8016b8c:	4770      	bx	lr
 8016b8e:	b299      	uxth	r1, r3
 8016b90:	b909      	cbnz	r1, 8016b96 <__lo0bits+0x2a>
 8016b92:	0c1b      	lsrs	r3, r3, #16
 8016b94:	2210      	movs	r2, #16
 8016b96:	b2d9      	uxtb	r1, r3
 8016b98:	b909      	cbnz	r1, 8016b9e <__lo0bits+0x32>
 8016b9a:	3208      	adds	r2, #8
 8016b9c:	0a1b      	lsrs	r3, r3, #8
 8016b9e:	0719      	lsls	r1, r3, #28
 8016ba0:	bf04      	itt	eq
 8016ba2:	091b      	lsreq	r3, r3, #4
 8016ba4:	3204      	addeq	r2, #4
 8016ba6:	0799      	lsls	r1, r3, #30
 8016ba8:	bf04      	itt	eq
 8016baa:	089b      	lsreq	r3, r3, #2
 8016bac:	3202      	addeq	r2, #2
 8016bae:	07d9      	lsls	r1, r3, #31
 8016bb0:	d403      	bmi.n	8016bba <__lo0bits+0x4e>
 8016bb2:	085b      	lsrs	r3, r3, #1
 8016bb4:	f102 0201 	add.w	r2, r2, #1
 8016bb8:	d003      	beq.n	8016bc2 <__lo0bits+0x56>
 8016bba:	6003      	str	r3, [r0, #0]
 8016bbc:	e7e5      	b.n	8016b8a <__lo0bits+0x1e>
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	e7e3      	b.n	8016b8a <__lo0bits+0x1e>
 8016bc2:	2220      	movs	r2, #32
 8016bc4:	e7e1      	b.n	8016b8a <__lo0bits+0x1e>
	...

08016bc8 <__i2b>:
 8016bc8:	b510      	push	{r4, lr}
 8016bca:	460c      	mov	r4, r1
 8016bcc:	2101      	movs	r1, #1
 8016bce:	f7ff ff05 	bl	80169dc <_Balloc>
 8016bd2:	4602      	mov	r2, r0
 8016bd4:	b928      	cbnz	r0, 8016be2 <__i2b+0x1a>
 8016bd6:	4b05      	ldr	r3, [pc, #20]	; (8016bec <__i2b+0x24>)
 8016bd8:	4805      	ldr	r0, [pc, #20]	; (8016bf0 <__i2b+0x28>)
 8016bda:	f240 1145 	movw	r1, #325	; 0x145
 8016bde:	f000 fcb7 	bl	8017550 <__assert_func>
 8016be2:	2301      	movs	r3, #1
 8016be4:	6144      	str	r4, [r0, #20]
 8016be6:	6103      	str	r3, [r0, #16]
 8016be8:	bd10      	pop	{r4, pc}
 8016bea:	bf00      	nop
 8016bec:	0801b65c 	.word	0x0801b65c
 8016bf0:	0801b66d 	.word	0x0801b66d

08016bf4 <__multiply>:
 8016bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf8:	4691      	mov	r9, r2
 8016bfa:	690a      	ldr	r2, [r1, #16]
 8016bfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	bfb8      	it	lt
 8016c04:	460b      	movlt	r3, r1
 8016c06:	460c      	mov	r4, r1
 8016c08:	bfbc      	itt	lt
 8016c0a:	464c      	movlt	r4, r9
 8016c0c:	4699      	movlt	r9, r3
 8016c0e:	6927      	ldr	r7, [r4, #16]
 8016c10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016c14:	68a3      	ldr	r3, [r4, #8]
 8016c16:	6861      	ldr	r1, [r4, #4]
 8016c18:	eb07 060a 	add.w	r6, r7, sl
 8016c1c:	42b3      	cmp	r3, r6
 8016c1e:	b085      	sub	sp, #20
 8016c20:	bfb8      	it	lt
 8016c22:	3101      	addlt	r1, #1
 8016c24:	f7ff feda 	bl	80169dc <_Balloc>
 8016c28:	b930      	cbnz	r0, 8016c38 <__multiply+0x44>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	4b44      	ldr	r3, [pc, #272]	; (8016d40 <__multiply+0x14c>)
 8016c2e:	4845      	ldr	r0, [pc, #276]	; (8016d44 <__multiply+0x150>)
 8016c30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016c34:	f000 fc8c 	bl	8017550 <__assert_func>
 8016c38:	f100 0514 	add.w	r5, r0, #20
 8016c3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016c40:	462b      	mov	r3, r5
 8016c42:	2200      	movs	r2, #0
 8016c44:	4543      	cmp	r3, r8
 8016c46:	d321      	bcc.n	8016c8c <__multiply+0x98>
 8016c48:	f104 0314 	add.w	r3, r4, #20
 8016c4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016c50:	f109 0314 	add.w	r3, r9, #20
 8016c54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016c58:	9202      	str	r2, [sp, #8]
 8016c5a:	1b3a      	subs	r2, r7, r4
 8016c5c:	3a15      	subs	r2, #21
 8016c5e:	f022 0203 	bic.w	r2, r2, #3
 8016c62:	3204      	adds	r2, #4
 8016c64:	f104 0115 	add.w	r1, r4, #21
 8016c68:	428f      	cmp	r7, r1
 8016c6a:	bf38      	it	cc
 8016c6c:	2204      	movcc	r2, #4
 8016c6e:	9201      	str	r2, [sp, #4]
 8016c70:	9a02      	ldr	r2, [sp, #8]
 8016c72:	9303      	str	r3, [sp, #12]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d80c      	bhi.n	8016c92 <__multiply+0x9e>
 8016c78:	2e00      	cmp	r6, #0
 8016c7a:	dd03      	ble.n	8016c84 <__multiply+0x90>
 8016c7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d05b      	beq.n	8016d3c <__multiply+0x148>
 8016c84:	6106      	str	r6, [r0, #16]
 8016c86:	b005      	add	sp, #20
 8016c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8c:	f843 2b04 	str.w	r2, [r3], #4
 8016c90:	e7d8      	b.n	8016c44 <__multiply+0x50>
 8016c92:	f8b3 a000 	ldrh.w	sl, [r3]
 8016c96:	f1ba 0f00 	cmp.w	sl, #0
 8016c9a:	d024      	beq.n	8016ce6 <__multiply+0xf2>
 8016c9c:	f104 0e14 	add.w	lr, r4, #20
 8016ca0:	46a9      	mov	r9, r5
 8016ca2:	f04f 0c00 	mov.w	ip, #0
 8016ca6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016caa:	f8d9 1000 	ldr.w	r1, [r9]
 8016cae:	fa1f fb82 	uxth.w	fp, r2
 8016cb2:	b289      	uxth	r1, r1
 8016cb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8016cb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8016cc0:	4461      	add	r1, ip
 8016cc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016cc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8016cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016cce:	b289      	uxth	r1, r1
 8016cd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016cd4:	4577      	cmp	r7, lr
 8016cd6:	f849 1b04 	str.w	r1, [r9], #4
 8016cda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016cde:	d8e2      	bhi.n	8016ca6 <__multiply+0xb2>
 8016ce0:	9a01      	ldr	r2, [sp, #4]
 8016ce2:	f845 c002 	str.w	ip, [r5, r2]
 8016ce6:	9a03      	ldr	r2, [sp, #12]
 8016ce8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016cec:	3304      	adds	r3, #4
 8016cee:	f1b9 0f00 	cmp.w	r9, #0
 8016cf2:	d021      	beq.n	8016d38 <__multiply+0x144>
 8016cf4:	6829      	ldr	r1, [r5, #0]
 8016cf6:	f104 0c14 	add.w	ip, r4, #20
 8016cfa:	46ae      	mov	lr, r5
 8016cfc:	f04f 0a00 	mov.w	sl, #0
 8016d00:	f8bc b000 	ldrh.w	fp, [ip]
 8016d04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016d08:	fb09 220b 	mla	r2, r9, fp, r2
 8016d0c:	4452      	add	r2, sl
 8016d0e:	b289      	uxth	r1, r1
 8016d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016d14:	f84e 1b04 	str.w	r1, [lr], #4
 8016d18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016d1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016d20:	f8be 1000 	ldrh.w	r1, [lr]
 8016d24:	fb09 110a 	mla	r1, r9, sl, r1
 8016d28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016d2c:	4567      	cmp	r7, ip
 8016d2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016d32:	d8e5      	bhi.n	8016d00 <__multiply+0x10c>
 8016d34:	9a01      	ldr	r2, [sp, #4]
 8016d36:	50a9      	str	r1, [r5, r2]
 8016d38:	3504      	adds	r5, #4
 8016d3a:	e799      	b.n	8016c70 <__multiply+0x7c>
 8016d3c:	3e01      	subs	r6, #1
 8016d3e:	e79b      	b.n	8016c78 <__multiply+0x84>
 8016d40:	0801b65c 	.word	0x0801b65c
 8016d44:	0801b66d 	.word	0x0801b66d

08016d48 <__pow5mult>:
 8016d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d4c:	4615      	mov	r5, r2
 8016d4e:	f012 0203 	ands.w	r2, r2, #3
 8016d52:	4606      	mov	r6, r0
 8016d54:	460f      	mov	r7, r1
 8016d56:	d007      	beq.n	8016d68 <__pow5mult+0x20>
 8016d58:	4c25      	ldr	r4, [pc, #148]	; (8016df0 <__pow5mult+0xa8>)
 8016d5a:	3a01      	subs	r2, #1
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016d62:	f7ff fe9d 	bl	8016aa0 <__multadd>
 8016d66:	4607      	mov	r7, r0
 8016d68:	10ad      	asrs	r5, r5, #2
 8016d6a:	d03d      	beq.n	8016de8 <__pow5mult+0xa0>
 8016d6c:	69f4      	ldr	r4, [r6, #28]
 8016d6e:	b97c      	cbnz	r4, 8016d90 <__pow5mult+0x48>
 8016d70:	2010      	movs	r0, #16
 8016d72:	f7ff fd7f 	bl	8016874 <malloc>
 8016d76:	4602      	mov	r2, r0
 8016d78:	61f0      	str	r0, [r6, #28]
 8016d7a:	b928      	cbnz	r0, 8016d88 <__pow5mult+0x40>
 8016d7c:	4b1d      	ldr	r3, [pc, #116]	; (8016df4 <__pow5mult+0xac>)
 8016d7e:	481e      	ldr	r0, [pc, #120]	; (8016df8 <__pow5mult+0xb0>)
 8016d80:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016d84:	f000 fbe4 	bl	8017550 <__assert_func>
 8016d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d8c:	6004      	str	r4, [r0, #0]
 8016d8e:	60c4      	str	r4, [r0, #12]
 8016d90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016d98:	b94c      	cbnz	r4, 8016dae <__pow5mult+0x66>
 8016d9a:	f240 2171 	movw	r1, #625	; 0x271
 8016d9e:	4630      	mov	r0, r6
 8016da0:	f7ff ff12 	bl	8016bc8 <__i2b>
 8016da4:	2300      	movs	r3, #0
 8016da6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016daa:	4604      	mov	r4, r0
 8016dac:	6003      	str	r3, [r0, #0]
 8016dae:	f04f 0900 	mov.w	r9, #0
 8016db2:	07eb      	lsls	r3, r5, #31
 8016db4:	d50a      	bpl.n	8016dcc <__pow5mult+0x84>
 8016db6:	4639      	mov	r1, r7
 8016db8:	4622      	mov	r2, r4
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7ff ff1a 	bl	8016bf4 <__multiply>
 8016dc0:	4639      	mov	r1, r7
 8016dc2:	4680      	mov	r8, r0
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f7ff fe49 	bl	8016a5c <_Bfree>
 8016dca:	4647      	mov	r7, r8
 8016dcc:	106d      	asrs	r5, r5, #1
 8016dce:	d00b      	beq.n	8016de8 <__pow5mult+0xa0>
 8016dd0:	6820      	ldr	r0, [r4, #0]
 8016dd2:	b938      	cbnz	r0, 8016de4 <__pow5mult+0x9c>
 8016dd4:	4622      	mov	r2, r4
 8016dd6:	4621      	mov	r1, r4
 8016dd8:	4630      	mov	r0, r6
 8016dda:	f7ff ff0b 	bl	8016bf4 <__multiply>
 8016dde:	6020      	str	r0, [r4, #0]
 8016de0:	f8c0 9000 	str.w	r9, [r0]
 8016de4:	4604      	mov	r4, r0
 8016de6:	e7e4      	b.n	8016db2 <__pow5mult+0x6a>
 8016de8:	4638      	mov	r0, r7
 8016dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dee:	bf00      	nop
 8016df0:	0801b7b8 	.word	0x0801b7b8
 8016df4:	0801b5ed 	.word	0x0801b5ed
 8016df8:	0801b66d 	.word	0x0801b66d

08016dfc <__lshift>:
 8016dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e00:	460c      	mov	r4, r1
 8016e02:	6849      	ldr	r1, [r1, #4]
 8016e04:	6923      	ldr	r3, [r4, #16]
 8016e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016e0a:	68a3      	ldr	r3, [r4, #8]
 8016e0c:	4607      	mov	r7, r0
 8016e0e:	4691      	mov	r9, r2
 8016e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016e14:	f108 0601 	add.w	r6, r8, #1
 8016e18:	42b3      	cmp	r3, r6
 8016e1a:	db0b      	blt.n	8016e34 <__lshift+0x38>
 8016e1c:	4638      	mov	r0, r7
 8016e1e:	f7ff fddd 	bl	80169dc <_Balloc>
 8016e22:	4605      	mov	r5, r0
 8016e24:	b948      	cbnz	r0, 8016e3a <__lshift+0x3e>
 8016e26:	4602      	mov	r2, r0
 8016e28:	4b28      	ldr	r3, [pc, #160]	; (8016ecc <__lshift+0xd0>)
 8016e2a:	4829      	ldr	r0, [pc, #164]	; (8016ed0 <__lshift+0xd4>)
 8016e2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016e30:	f000 fb8e 	bl	8017550 <__assert_func>
 8016e34:	3101      	adds	r1, #1
 8016e36:	005b      	lsls	r3, r3, #1
 8016e38:	e7ee      	b.n	8016e18 <__lshift+0x1c>
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f100 0114 	add.w	r1, r0, #20
 8016e40:	f100 0210 	add.w	r2, r0, #16
 8016e44:	4618      	mov	r0, r3
 8016e46:	4553      	cmp	r3, sl
 8016e48:	db33      	blt.n	8016eb2 <__lshift+0xb6>
 8016e4a:	6920      	ldr	r0, [r4, #16]
 8016e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016e50:	f104 0314 	add.w	r3, r4, #20
 8016e54:	f019 091f 	ands.w	r9, r9, #31
 8016e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016e60:	d02b      	beq.n	8016eba <__lshift+0xbe>
 8016e62:	f1c9 0e20 	rsb	lr, r9, #32
 8016e66:	468a      	mov	sl, r1
 8016e68:	2200      	movs	r2, #0
 8016e6a:	6818      	ldr	r0, [r3, #0]
 8016e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8016e70:	4310      	orrs	r0, r2
 8016e72:	f84a 0b04 	str.w	r0, [sl], #4
 8016e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e7a:	459c      	cmp	ip, r3
 8016e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016e80:	d8f3      	bhi.n	8016e6a <__lshift+0x6e>
 8016e82:	ebac 0304 	sub.w	r3, ip, r4
 8016e86:	3b15      	subs	r3, #21
 8016e88:	f023 0303 	bic.w	r3, r3, #3
 8016e8c:	3304      	adds	r3, #4
 8016e8e:	f104 0015 	add.w	r0, r4, #21
 8016e92:	4584      	cmp	ip, r0
 8016e94:	bf38      	it	cc
 8016e96:	2304      	movcc	r3, #4
 8016e98:	50ca      	str	r2, [r1, r3]
 8016e9a:	b10a      	cbz	r2, 8016ea0 <__lshift+0xa4>
 8016e9c:	f108 0602 	add.w	r6, r8, #2
 8016ea0:	3e01      	subs	r6, #1
 8016ea2:	4638      	mov	r0, r7
 8016ea4:	612e      	str	r6, [r5, #16]
 8016ea6:	4621      	mov	r1, r4
 8016ea8:	f7ff fdd8 	bl	8016a5c <_Bfree>
 8016eac:	4628      	mov	r0, r5
 8016eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016eb6:	3301      	adds	r3, #1
 8016eb8:	e7c5      	b.n	8016e46 <__lshift+0x4a>
 8016eba:	3904      	subs	r1, #4
 8016ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ec0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ec4:	459c      	cmp	ip, r3
 8016ec6:	d8f9      	bhi.n	8016ebc <__lshift+0xc0>
 8016ec8:	e7ea      	b.n	8016ea0 <__lshift+0xa4>
 8016eca:	bf00      	nop
 8016ecc:	0801b65c 	.word	0x0801b65c
 8016ed0:	0801b66d 	.word	0x0801b66d

08016ed4 <__mcmp>:
 8016ed4:	b530      	push	{r4, r5, lr}
 8016ed6:	6902      	ldr	r2, [r0, #16]
 8016ed8:	690c      	ldr	r4, [r1, #16]
 8016eda:	1b12      	subs	r2, r2, r4
 8016edc:	d10e      	bne.n	8016efc <__mcmp+0x28>
 8016ede:	f100 0314 	add.w	r3, r0, #20
 8016ee2:	3114      	adds	r1, #20
 8016ee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016ee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016eec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016ef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016ef4:	42a5      	cmp	r5, r4
 8016ef6:	d003      	beq.n	8016f00 <__mcmp+0x2c>
 8016ef8:	d305      	bcc.n	8016f06 <__mcmp+0x32>
 8016efa:	2201      	movs	r2, #1
 8016efc:	4610      	mov	r0, r2
 8016efe:	bd30      	pop	{r4, r5, pc}
 8016f00:	4283      	cmp	r3, r0
 8016f02:	d3f3      	bcc.n	8016eec <__mcmp+0x18>
 8016f04:	e7fa      	b.n	8016efc <__mcmp+0x28>
 8016f06:	f04f 32ff 	mov.w	r2, #4294967295
 8016f0a:	e7f7      	b.n	8016efc <__mcmp+0x28>

08016f0c <__mdiff>:
 8016f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f10:	460c      	mov	r4, r1
 8016f12:	4606      	mov	r6, r0
 8016f14:	4611      	mov	r1, r2
 8016f16:	4620      	mov	r0, r4
 8016f18:	4690      	mov	r8, r2
 8016f1a:	f7ff ffdb 	bl	8016ed4 <__mcmp>
 8016f1e:	1e05      	subs	r5, r0, #0
 8016f20:	d110      	bne.n	8016f44 <__mdiff+0x38>
 8016f22:	4629      	mov	r1, r5
 8016f24:	4630      	mov	r0, r6
 8016f26:	f7ff fd59 	bl	80169dc <_Balloc>
 8016f2a:	b930      	cbnz	r0, 8016f3a <__mdiff+0x2e>
 8016f2c:	4b3a      	ldr	r3, [pc, #232]	; (8017018 <__mdiff+0x10c>)
 8016f2e:	4602      	mov	r2, r0
 8016f30:	f240 2137 	movw	r1, #567	; 0x237
 8016f34:	4839      	ldr	r0, [pc, #228]	; (801701c <__mdiff+0x110>)
 8016f36:	f000 fb0b 	bl	8017550 <__assert_func>
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f44:	bfa4      	itt	ge
 8016f46:	4643      	movge	r3, r8
 8016f48:	46a0      	movge	r8, r4
 8016f4a:	4630      	mov	r0, r6
 8016f4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016f50:	bfa6      	itte	ge
 8016f52:	461c      	movge	r4, r3
 8016f54:	2500      	movge	r5, #0
 8016f56:	2501      	movlt	r5, #1
 8016f58:	f7ff fd40 	bl	80169dc <_Balloc>
 8016f5c:	b920      	cbnz	r0, 8016f68 <__mdiff+0x5c>
 8016f5e:	4b2e      	ldr	r3, [pc, #184]	; (8017018 <__mdiff+0x10c>)
 8016f60:	4602      	mov	r2, r0
 8016f62:	f240 2145 	movw	r1, #581	; 0x245
 8016f66:	e7e5      	b.n	8016f34 <__mdiff+0x28>
 8016f68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016f6c:	6926      	ldr	r6, [r4, #16]
 8016f6e:	60c5      	str	r5, [r0, #12]
 8016f70:	f104 0914 	add.w	r9, r4, #20
 8016f74:	f108 0514 	add.w	r5, r8, #20
 8016f78:	f100 0e14 	add.w	lr, r0, #20
 8016f7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016f80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016f84:	f108 0210 	add.w	r2, r8, #16
 8016f88:	46f2      	mov	sl, lr
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016f90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016f94:	fa11 f88b 	uxtah	r8, r1, fp
 8016f98:	b299      	uxth	r1, r3
 8016f9a:	0c1b      	lsrs	r3, r3, #16
 8016f9c:	eba8 0801 	sub.w	r8, r8, r1
 8016fa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016fa4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016fa8:	fa1f f888 	uxth.w	r8, r8
 8016fac:	1419      	asrs	r1, r3, #16
 8016fae:	454e      	cmp	r6, r9
 8016fb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016fb4:	f84a 3b04 	str.w	r3, [sl], #4
 8016fb8:	d8e8      	bhi.n	8016f8c <__mdiff+0x80>
 8016fba:	1b33      	subs	r3, r6, r4
 8016fbc:	3b15      	subs	r3, #21
 8016fbe:	f023 0303 	bic.w	r3, r3, #3
 8016fc2:	3304      	adds	r3, #4
 8016fc4:	3415      	adds	r4, #21
 8016fc6:	42a6      	cmp	r6, r4
 8016fc8:	bf38      	it	cc
 8016fca:	2304      	movcc	r3, #4
 8016fcc:	441d      	add	r5, r3
 8016fce:	4473      	add	r3, lr
 8016fd0:	469e      	mov	lr, r3
 8016fd2:	462e      	mov	r6, r5
 8016fd4:	4566      	cmp	r6, ip
 8016fd6:	d30e      	bcc.n	8016ff6 <__mdiff+0xea>
 8016fd8:	f10c 0203 	add.w	r2, ip, #3
 8016fdc:	1b52      	subs	r2, r2, r5
 8016fde:	f022 0203 	bic.w	r2, r2, #3
 8016fe2:	3d03      	subs	r5, #3
 8016fe4:	45ac      	cmp	ip, r5
 8016fe6:	bf38      	it	cc
 8016fe8:	2200      	movcc	r2, #0
 8016fea:	4413      	add	r3, r2
 8016fec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016ff0:	b17a      	cbz	r2, 8017012 <__mdiff+0x106>
 8016ff2:	6107      	str	r7, [r0, #16]
 8016ff4:	e7a4      	b.n	8016f40 <__mdiff+0x34>
 8016ff6:	f856 8b04 	ldr.w	r8, [r6], #4
 8016ffa:	fa11 f288 	uxtah	r2, r1, r8
 8016ffe:	1414      	asrs	r4, r2, #16
 8017000:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017004:	b292      	uxth	r2, r2
 8017006:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801700a:	f84e 2b04 	str.w	r2, [lr], #4
 801700e:	1421      	asrs	r1, r4, #16
 8017010:	e7e0      	b.n	8016fd4 <__mdiff+0xc8>
 8017012:	3f01      	subs	r7, #1
 8017014:	e7ea      	b.n	8016fec <__mdiff+0xe0>
 8017016:	bf00      	nop
 8017018:	0801b65c 	.word	0x0801b65c
 801701c:	0801b66d 	.word	0x0801b66d

08017020 <__d2b>:
 8017020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017024:	460f      	mov	r7, r1
 8017026:	2101      	movs	r1, #1
 8017028:	ec59 8b10 	vmov	r8, r9, d0
 801702c:	4616      	mov	r6, r2
 801702e:	f7ff fcd5 	bl	80169dc <_Balloc>
 8017032:	4604      	mov	r4, r0
 8017034:	b930      	cbnz	r0, 8017044 <__d2b+0x24>
 8017036:	4602      	mov	r2, r0
 8017038:	4b24      	ldr	r3, [pc, #144]	; (80170cc <__d2b+0xac>)
 801703a:	4825      	ldr	r0, [pc, #148]	; (80170d0 <__d2b+0xb0>)
 801703c:	f240 310f 	movw	r1, #783	; 0x30f
 8017040:	f000 fa86 	bl	8017550 <__assert_func>
 8017044:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017048:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801704c:	bb2d      	cbnz	r5, 801709a <__d2b+0x7a>
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	f1b8 0300 	subs.w	r3, r8, #0
 8017054:	d026      	beq.n	80170a4 <__d2b+0x84>
 8017056:	4668      	mov	r0, sp
 8017058:	9300      	str	r3, [sp, #0]
 801705a:	f7ff fd87 	bl	8016b6c <__lo0bits>
 801705e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017062:	b1e8      	cbz	r0, 80170a0 <__d2b+0x80>
 8017064:	f1c0 0320 	rsb	r3, r0, #32
 8017068:	fa02 f303 	lsl.w	r3, r2, r3
 801706c:	430b      	orrs	r3, r1
 801706e:	40c2      	lsrs	r2, r0
 8017070:	6163      	str	r3, [r4, #20]
 8017072:	9201      	str	r2, [sp, #4]
 8017074:	9b01      	ldr	r3, [sp, #4]
 8017076:	61a3      	str	r3, [r4, #24]
 8017078:	2b00      	cmp	r3, #0
 801707a:	bf14      	ite	ne
 801707c:	2202      	movne	r2, #2
 801707e:	2201      	moveq	r2, #1
 8017080:	6122      	str	r2, [r4, #16]
 8017082:	b1bd      	cbz	r5, 80170b4 <__d2b+0x94>
 8017084:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017088:	4405      	add	r5, r0
 801708a:	603d      	str	r5, [r7, #0]
 801708c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017090:	6030      	str	r0, [r6, #0]
 8017092:	4620      	mov	r0, r4
 8017094:	b003      	add	sp, #12
 8017096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801709a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801709e:	e7d6      	b.n	801704e <__d2b+0x2e>
 80170a0:	6161      	str	r1, [r4, #20]
 80170a2:	e7e7      	b.n	8017074 <__d2b+0x54>
 80170a4:	a801      	add	r0, sp, #4
 80170a6:	f7ff fd61 	bl	8016b6c <__lo0bits>
 80170aa:	9b01      	ldr	r3, [sp, #4]
 80170ac:	6163      	str	r3, [r4, #20]
 80170ae:	3020      	adds	r0, #32
 80170b0:	2201      	movs	r2, #1
 80170b2:	e7e5      	b.n	8017080 <__d2b+0x60>
 80170b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80170b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80170bc:	6038      	str	r0, [r7, #0]
 80170be:	6918      	ldr	r0, [r3, #16]
 80170c0:	f7ff fd34 	bl	8016b2c <__hi0bits>
 80170c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80170c8:	e7e2      	b.n	8017090 <__d2b+0x70>
 80170ca:	bf00      	nop
 80170cc:	0801b65c 	.word	0x0801b65c
 80170d0:	0801b66d 	.word	0x0801b66d

080170d4 <__ssputs_r>:
 80170d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170d8:	688e      	ldr	r6, [r1, #8]
 80170da:	461f      	mov	r7, r3
 80170dc:	42be      	cmp	r6, r7
 80170de:	680b      	ldr	r3, [r1, #0]
 80170e0:	4682      	mov	sl, r0
 80170e2:	460c      	mov	r4, r1
 80170e4:	4690      	mov	r8, r2
 80170e6:	d82c      	bhi.n	8017142 <__ssputs_r+0x6e>
 80170e8:	898a      	ldrh	r2, [r1, #12]
 80170ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80170ee:	d026      	beq.n	801713e <__ssputs_r+0x6a>
 80170f0:	6965      	ldr	r5, [r4, #20]
 80170f2:	6909      	ldr	r1, [r1, #16]
 80170f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170f8:	eba3 0901 	sub.w	r9, r3, r1
 80170fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017100:	1c7b      	adds	r3, r7, #1
 8017102:	444b      	add	r3, r9
 8017104:	106d      	asrs	r5, r5, #1
 8017106:	429d      	cmp	r5, r3
 8017108:	bf38      	it	cc
 801710a:	461d      	movcc	r5, r3
 801710c:	0553      	lsls	r3, r2, #21
 801710e:	d527      	bpl.n	8017160 <__ssputs_r+0x8c>
 8017110:	4629      	mov	r1, r5
 8017112:	f7ff fbd7 	bl	80168c4 <_malloc_r>
 8017116:	4606      	mov	r6, r0
 8017118:	b360      	cbz	r0, 8017174 <__ssputs_r+0xa0>
 801711a:	6921      	ldr	r1, [r4, #16]
 801711c:	464a      	mov	r2, r9
 801711e:	f000 fa09 	bl	8017534 <memcpy>
 8017122:	89a3      	ldrh	r3, [r4, #12]
 8017124:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801712c:	81a3      	strh	r3, [r4, #12]
 801712e:	6126      	str	r6, [r4, #16]
 8017130:	6165      	str	r5, [r4, #20]
 8017132:	444e      	add	r6, r9
 8017134:	eba5 0509 	sub.w	r5, r5, r9
 8017138:	6026      	str	r6, [r4, #0]
 801713a:	60a5      	str	r5, [r4, #8]
 801713c:	463e      	mov	r6, r7
 801713e:	42be      	cmp	r6, r7
 8017140:	d900      	bls.n	8017144 <__ssputs_r+0x70>
 8017142:	463e      	mov	r6, r7
 8017144:	6820      	ldr	r0, [r4, #0]
 8017146:	4632      	mov	r2, r6
 8017148:	4641      	mov	r1, r8
 801714a:	f000 f9c9 	bl	80174e0 <memmove>
 801714e:	68a3      	ldr	r3, [r4, #8]
 8017150:	1b9b      	subs	r3, r3, r6
 8017152:	60a3      	str	r3, [r4, #8]
 8017154:	6823      	ldr	r3, [r4, #0]
 8017156:	4433      	add	r3, r6
 8017158:	6023      	str	r3, [r4, #0]
 801715a:	2000      	movs	r0, #0
 801715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017160:	462a      	mov	r2, r5
 8017162:	f000 fa3b 	bl	80175dc <_realloc_r>
 8017166:	4606      	mov	r6, r0
 8017168:	2800      	cmp	r0, #0
 801716a:	d1e0      	bne.n	801712e <__ssputs_r+0x5a>
 801716c:	6921      	ldr	r1, [r4, #16]
 801716e:	4650      	mov	r0, sl
 8017170:	f7ff fb34 	bl	80167dc <_free_r>
 8017174:	230c      	movs	r3, #12
 8017176:	f8ca 3000 	str.w	r3, [sl]
 801717a:	89a3      	ldrh	r3, [r4, #12]
 801717c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017180:	81a3      	strh	r3, [r4, #12]
 8017182:	f04f 30ff 	mov.w	r0, #4294967295
 8017186:	e7e9      	b.n	801715c <__ssputs_r+0x88>

08017188 <_svfiprintf_r>:
 8017188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801718c:	4698      	mov	r8, r3
 801718e:	898b      	ldrh	r3, [r1, #12]
 8017190:	061b      	lsls	r3, r3, #24
 8017192:	b09d      	sub	sp, #116	; 0x74
 8017194:	4607      	mov	r7, r0
 8017196:	460d      	mov	r5, r1
 8017198:	4614      	mov	r4, r2
 801719a:	d50e      	bpl.n	80171ba <_svfiprintf_r+0x32>
 801719c:	690b      	ldr	r3, [r1, #16]
 801719e:	b963      	cbnz	r3, 80171ba <_svfiprintf_r+0x32>
 80171a0:	2140      	movs	r1, #64	; 0x40
 80171a2:	f7ff fb8f 	bl	80168c4 <_malloc_r>
 80171a6:	6028      	str	r0, [r5, #0]
 80171a8:	6128      	str	r0, [r5, #16]
 80171aa:	b920      	cbnz	r0, 80171b6 <_svfiprintf_r+0x2e>
 80171ac:	230c      	movs	r3, #12
 80171ae:	603b      	str	r3, [r7, #0]
 80171b0:	f04f 30ff 	mov.w	r0, #4294967295
 80171b4:	e0d0      	b.n	8017358 <_svfiprintf_r+0x1d0>
 80171b6:	2340      	movs	r3, #64	; 0x40
 80171b8:	616b      	str	r3, [r5, #20]
 80171ba:	2300      	movs	r3, #0
 80171bc:	9309      	str	r3, [sp, #36]	; 0x24
 80171be:	2320      	movs	r3, #32
 80171c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80171c8:	2330      	movs	r3, #48	; 0x30
 80171ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017370 <_svfiprintf_r+0x1e8>
 80171ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171d2:	f04f 0901 	mov.w	r9, #1
 80171d6:	4623      	mov	r3, r4
 80171d8:	469a      	mov	sl, r3
 80171da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171de:	b10a      	cbz	r2, 80171e4 <_svfiprintf_r+0x5c>
 80171e0:	2a25      	cmp	r2, #37	; 0x25
 80171e2:	d1f9      	bne.n	80171d8 <_svfiprintf_r+0x50>
 80171e4:	ebba 0b04 	subs.w	fp, sl, r4
 80171e8:	d00b      	beq.n	8017202 <_svfiprintf_r+0x7a>
 80171ea:	465b      	mov	r3, fp
 80171ec:	4622      	mov	r2, r4
 80171ee:	4629      	mov	r1, r5
 80171f0:	4638      	mov	r0, r7
 80171f2:	f7ff ff6f 	bl	80170d4 <__ssputs_r>
 80171f6:	3001      	adds	r0, #1
 80171f8:	f000 80a9 	beq.w	801734e <_svfiprintf_r+0x1c6>
 80171fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171fe:	445a      	add	r2, fp
 8017200:	9209      	str	r2, [sp, #36]	; 0x24
 8017202:	f89a 3000 	ldrb.w	r3, [sl]
 8017206:	2b00      	cmp	r3, #0
 8017208:	f000 80a1 	beq.w	801734e <_svfiprintf_r+0x1c6>
 801720c:	2300      	movs	r3, #0
 801720e:	f04f 32ff 	mov.w	r2, #4294967295
 8017212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017216:	f10a 0a01 	add.w	sl, sl, #1
 801721a:	9304      	str	r3, [sp, #16]
 801721c:	9307      	str	r3, [sp, #28]
 801721e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017222:	931a      	str	r3, [sp, #104]	; 0x68
 8017224:	4654      	mov	r4, sl
 8017226:	2205      	movs	r2, #5
 8017228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801722c:	4850      	ldr	r0, [pc, #320]	; (8017370 <_svfiprintf_r+0x1e8>)
 801722e:	f7e8 fff7 	bl	8000220 <memchr>
 8017232:	9a04      	ldr	r2, [sp, #16]
 8017234:	b9d8      	cbnz	r0, 801726e <_svfiprintf_r+0xe6>
 8017236:	06d0      	lsls	r0, r2, #27
 8017238:	bf44      	itt	mi
 801723a:	2320      	movmi	r3, #32
 801723c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017240:	0711      	lsls	r1, r2, #28
 8017242:	bf44      	itt	mi
 8017244:	232b      	movmi	r3, #43	; 0x2b
 8017246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801724a:	f89a 3000 	ldrb.w	r3, [sl]
 801724e:	2b2a      	cmp	r3, #42	; 0x2a
 8017250:	d015      	beq.n	801727e <_svfiprintf_r+0xf6>
 8017252:	9a07      	ldr	r2, [sp, #28]
 8017254:	4654      	mov	r4, sl
 8017256:	2000      	movs	r0, #0
 8017258:	f04f 0c0a 	mov.w	ip, #10
 801725c:	4621      	mov	r1, r4
 801725e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017262:	3b30      	subs	r3, #48	; 0x30
 8017264:	2b09      	cmp	r3, #9
 8017266:	d94d      	bls.n	8017304 <_svfiprintf_r+0x17c>
 8017268:	b1b0      	cbz	r0, 8017298 <_svfiprintf_r+0x110>
 801726a:	9207      	str	r2, [sp, #28]
 801726c:	e014      	b.n	8017298 <_svfiprintf_r+0x110>
 801726e:	eba0 0308 	sub.w	r3, r0, r8
 8017272:	fa09 f303 	lsl.w	r3, r9, r3
 8017276:	4313      	orrs	r3, r2
 8017278:	9304      	str	r3, [sp, #16]
 801727a:	46a2      	mov	sl, r4
 801727c:	e7d2      	b.n	8017224 <_svfiprintf_r+0x9c>
 801727e:	9b03      	ldr	r3, [sp, #12]
 8017280:	1d19      	adds	r1, r3, #4
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	9103      	str	r1, [sp, #12]
 8017286:	2b00      	cmp	r3, #0
 8017288:	bfbb      	ittet	lt
 801728a:	425b      	neglt	r3, r3
 801728c:	f042 0202 	orrlt.w	r2, r2, #2
 8017290:	9307      	strge	r3, [sp, #28]
 8017292:	9307      	strlt	r3, [sp, #28]
 8017294:	bfb8      	it	lt
 8017296:	9204      	strlt	r2, [sp, #16]
 8017298:	7823      	ldrb	r3, [r4, #0]
 801729a:	2b2e      	cmp	r3, #46	; 0x2e
 801729c:	d10c      	bne.n	80172b8 <_svfiprintf_r+0x130>
 801729e:	7863      	ldrb	r3, [r4, #1]
 80172a0:	2b2a      	cmp	r3, #42	; 0x2a
 80172a2:	d134      	bne.n	801730e <_svfiprintf_r+0x186>
 80172a4:	9b03      	ldr	r3, [sp, #12]
 80172a6:	1d1a      	adds	r2, r3, #4
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	9203      	str	r2, [sp, #12]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	bfb8      	it	lt
 80172b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80172b4:	3402      	adds	r4, #2
 80172b6:	9305      	str	r3, [sp, #20]
 80172b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017380 <_svfiprintf_r+0x1f8>
 80172bc:	7821      	ldrb	r1, [r4, #0]
 80172be:	2203      	movs	r2, #3
 80172c0:	4650      	mov	r0, sl
 80172c2:	f7e8 ffad 	bl	8000220 <memchr>
 80172c6:	b138      	cbz	r0, 80172d8 <_svfiprintf_r+0x150>
 80172c8:	9b04      	ldr	r3, [sp, #16]
 80172ca:	eba0 000a 	sub.w	r0, r0, sl
 80172ce:	2240      	movs	r2, #64	; 0x40
 80172d0:	4082      	lsls	r2, r0
 80172d2:	4313      	orrs	r3, r2
 80172d4:	3401      	adds	r4, #1
 80172d6:	9304      	str	r3, [sp, #16]
 80172d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172dc:	4825      	ldr	r0, [pc, #148]	; (8017374 <_svfiprintf_r+0x1ec>)
 80172de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172e2:	2206      	movs	r2, #6
 80172e4:	f7e8 ff9c 	bl	8000220 <memchr>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d038      	beq.n	801735e <_svfiprintf_r+0x1d6>
 80172ec:	4b22      	ldr	r3, [pc, #136]	; (8017378 <_svfiprintf_r+0x1f0>)
 80172ee:	bb1b      	cbnz	r3, 8017338 <_svfiprintf_r+0x1b0>
 80172f0:	9b03      	ldr	r3, [sp, #12]
 80172f2:	3307      	adds	r3, #7
 80172f4:	f023 0307 	bic.w	r3, r3, #7
 80172f8:	3308      	adds	r3, #8
 80172fa:	9303      	str	r3, [sp, #12]
 80172fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172fe:	4433      	add	r3, r6
 8017300:	9309      	str	r3, [sp, #36]	; 0x24
 8017302:	e768      	b.n	80171d6 <_svfiprintf_r+0x4e>
 8017304:	fb0c 3202 	mla	r2, ip, r2, r3
 8017308:	460c      	mov	r4, r1
 801730a:	2001      	movs	r0, #1
 801730c:	e7a6      	b.n	801725c <_svfiprintf_r+0xd4>
 801730e:	2300      	movs	r3, #0
 8017310:	3401      	adds	r4, #1
 8017312:	9305      	str	r3, [sp, #20]
 8017314:	4619      	mov	r1, r3
 8017316:	f04f 0c0a 	mov.w	ip, #10
 801731a:	4620      	mov	r0, r4
 801731c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017320:	3a30      	subs	r2, #48	; 0x30
 8017322:	2a09      	cmp	r2, #9
 8017324:	d903      	bls.n	801732e <_svfiprintf_r+0x1a6>
 8017326:	2b00      	cmp	r3, #0
 8017328:	d0c6      	beq.n	80172b8 <_svfiprintf_r+0x130>
 801732a:	9105      	str	r1, [sp, #20]
 801732c:	e7c4      	b.n	80172b8 <_svfiprintf_r+0x130>
 801732e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017332:	4604      	mov	r4, r0
 8017334:	2301      	movs	r3, #1
 8017336:	e7f0      	b.n	801731a <_svfiprintf_r+0x192>
 8017338:	ab03      	add	r3, sp, #12
 801733a:	9300      	str	r3, [sp, #0]
 801733c:	462a      	mov	r2, r5
 801733e:	4b0f      	ldr	r3, [pc, #60]	; (801737c <_svfiprintf_r+0x1f4>)
 8017340:	a904      	add	r1, sp, #16
 8017342:	4638      	mov	r0, r7
 8017344:	f7fd fe64 	bl	8015010 <_printf_float>
 8017348:	1c42      	adds	r2, r0, #1
 801734a:	4606      	mov	r6, r0
 801734c:	d1d6      	bne.n	80172fc <_svfiprintf_r+0x174>
 801734e:	89ab      	ldrh	r3, [r5, #12]
 8017350:	065b      	lsls	r3, r3, #25
 8017352:	f53f af2d 	bmi.w	80171b0 <_svfiprintf_r+0x28>
 8017356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017358:	b01d      	add	sp, #116	; 0x74
 801735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735e:	ab03      	add	r3, sp, #12
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	462a      	mov	r2, r5
 8017364:	4b05      	ldr	r3, [pc, #20]	; (801737c <_svfiprintf_r+0x1f4>)
 8017366:	a904      	add	r1, sp, #16
 8017368:	4638      	mov	r0, r7
 801736a:	f7fe f8f5 	bl	8015558 <_printf_i>
 801736e:	e7eb      	b.n	8017348 <_svfiprintf_r+0x1c0>
 8017370:	0801b7c4 	.word	0x0801b7c4
 8017374:	0801b7ce 	.word	0x0801b7ce
 8017378:	08015011 	.word	0x08015011
 801737c:	080170d5 	.word	0x080170d5
 8017380:	0801b7ca 	.word	0x0801b7ca

08017384 <__sflush_r>:
 8017384:	898a      	ldrh	r2, [r1, #12]
 8017386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801738a:	4605      	mov	r5, r0
 801738c:	0710      	lsls	r0, r2, #28
 801738e:	460c      	mov	r4, r1
 8017390:	d458      	bmi.n	8017444 <__sflush_r+0xc0>
 8017392:	684b      	ldr	r3, [r1, #4]
 8017394:	2b00      	cmp	r3, #0
 8017396:	dc05      	bgt.n	80173a4 <__sflush_r+0x20>
 8017398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801739a:	2b00      	cmp	r3, #0
 801739c:	dc02      	bgt.n	80173a4 <__sflush_r+0x20>
 801739e:	2000      	movs	r0, #0
 80173a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173a6:	2e00      	cmp	r6, #0
 80173a8:	d0f9      	beq.n	801739e <__sflush_r+0x1a>
 80173aa:	2300      	movs	r3, #0
 80173ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80173b0:	682f      	ldr	r7, [r5, #0]
 80173b2:	6a21      	ldr	r1, [r4, #32]
 80173b4:	602b      	str	r3, [r5, #0]
 80173b6:	d032      	beq.n	801741e <__sflush_r+0x9a>
 80173b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173ba:	89a3      	ldrh	r3, [r4, #12]
 80173bc:	075a      	lsls	r2, r3, #29
 80173be:	d505      	bpl.n	80173cc <__sflush_r+0x48>
 80173c0:	6863      	ldr	r3, [r4, #4]
 80173c2:	1ac0      	subs	r0, r0, r3
 80173c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173c6:	b10b      	cbz	r3, 80173cc <__sflush_r+0x48>
 80173c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173ca:	1ac0      	subs	r0, r0, r3
 80173cc:	2300      	movs	r3, #0
 80173ce:	4602      	mov	r2, r0
 80173d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173d2:	6a21      	ldr	r1, [r4, #32]
 80173d4:	4628      	mov	r0, r5
 80173d6:	47b0      	blx	r6
 80173d8:	1c43      	adds	r3, r0, #1
 80173da:	89a3      	ldrh	r3, [r4, #12]
 80173dc:	d106      	bne.n	80173ec <__sflush_r+0x68>
 80173de:	6829      	ldr	r1, [r5, #0]
 80173e0:	291d      	cmp	r1, #29
 80173e2:	d82b      	bhi.n	801743c <__sflush_r+0xb8>
 80173e4:	4a29      	ldr	r2, [pc, #164]	; (801748c <__sflush_r+0x108>)
 80173e6:	410a      	asrs	r2, r1
 80173e8:	07d6      	lsls	r6, r2, #31
 80173ea:	d427      	bmi.n	801743c <__sflush_r+0xb8>
 80173ec:	2200      	movs	r2, #0
 80173ee:	6062      	str	r2, [r4, #4]
 80173f0:	04d9      	lsls	r1, r3, #19
 80173f2:	6922      	ldr	r2, [r4, #16]
 80173f4:	6022      	str	r2, [r4, #0]
 80173f6:	d504      	bpl.n	8017402 <__sflush_r+0x7e>
 80173f8:	1c42      	adds	r2, r0, #1
 80173fa:	d101      	bne.n	8017400 <__sflush_r+0x7c>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	b903      	cbnz	r3, 8017402 <__sflush_r+0x7e>
 8017400:	6560      	str	r0, [r4, #84]	; 0x54
 8017402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017404:	602f      	str	r7, [r5, #0]
 8017406:	2900      	cmp	r1, #0
 8017408:	d0c9      	beq.n	801739e <__sflush_r+0x1a>
 801740a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801740e:	4299      	cmp	r1, r3
 8017410:	d002      	beq.n	8017418 <__sflush_r+0x94>
 8017412:	4628      	mov	r0, r5
 8017414:	f7ff f9e2 	bl	80167dc <_free_r>
 8017418:	2000      	movs	r0, #0
 801741a:	6360      	str	r0, [r4, #52]	; 0x34
 801741c:	e7c0      	b.n	80173a0 <__sflush_r+0x1c>
 801741e:	2301      	movs	r3, #1
 8017420:	4628      	mov	r0, r5
 8017422:	47b0      	blx	r6
 8017424:	1c41      	adds	r1, r0, #1
 8017426:	d1c8      	bne.n	80173ba <__sflush_r+0x36>
 8017428:	682b      	ldr	r3, [r5, #0]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d0c5      	beq.n	80173ba <__sflush_r+0x36>
 801742e:	2b1d      	cmp	r3, #29
 8017430:	d001      	beq.n	8017436 <__sflush_r+0xb2>
 8017432:	2b16      	cmp	r3, #22
 8017434:	d101      	bne.n	801743a <__sflush_r+0xb6>
 8017436:	602f      	str	r7, [r5, #0]
 8017438:	e7b1      	b.n	801739e <__sflush_r+0x1a>
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	e7ad      	b.n	80173a0 <__sflush_r+0x1c>
 8017444:	690f      	ldr	r7, [r1, #16]
 8017446:	2f00      	cmp	r7, #0
 8017448:	d0a9      	beq.n	801739e <__sflush_r+0x1a>
 801744a:	0793      	lsls	r3, r2, #30
 801744c:	680e      	ldr	r6, [r1, #0]
 801744e:	bf08      	it	eq
 8017450:	694b      	ldreq	r3, [r1, #20]
 8017452:	600f      	str	r7, [r1, #0]
 8017454:	bf18      	it	ne
 8017456:	2300      	movne	r3, #0
 8017458:	eba6 0807 	sub.w	r8, r6, r7
 801745c:	608b      	str	r3, [r1, #8]
 801745e:	f1b8 0f00 	cmp.w	r8, #0
 8017462:	dd9c      	ble.n	801739e <__sflush_r+0x1a>
 8017464:	6a21      	ldr	r1, [r4, #32]
 8017466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017468:	4643      	mov	r3, r8
 801746a:	463a      	mov	r2, r7
 801746c:	4628      	mov	r0, r5
 801746e:	47b0      	blx	r6
 8017470:	2800      	cmp	r0, #0
 8017472:	dc06      	bgt.n	8017482 <__sflush_r+0xfe>
 8017474:	89a3      	ldrh	r3, [r4, #12]
 8017476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801747a:	81a3      	strh	r3, [r4, #12]
 801747c:	f04f 30ff 	mov.w	r0, #4294967295
 8017480:	e78e      	b.n	80173a0 <__sflush_r+0x1c>
 8017482:	4407      	add	r7, r0
 8017484:	eba8 0800 	sub.w	r8, r8, r0
 8017488:	e7e9      	b.n	801745e <__sflush_r+0xda>
 801748a:	bf00      	nop
 801748c:	dfbffffe 	.word	0xdfbffffe

08017490 <_fflush_r>:
 8017490:	b538      	push	{r3, r4, r5, lr}
 8017492:	690b      	ldr	r3, [r1, #16]
 8017494:	4605      	mov	r5, r0
 8017496:	460c      	mov	r4, r1
 8017498:	b913      	cbnz	r3, 80174a0 <_fflush_r+0x10>
 801749a:	2500      	movs	r5, #0
 801749c:	4628      	mov	r0, r5
 801749e:	bd38      	pop	{r3, r4, r5, pc}
 80174a0:	b118      	cbz	r0, 80174aa <_fflush_r+0x1a>
 80174a2:	6a03      	ldr	r3, [r0, #32]
 80174a4:	b90b      	cbnz	r3, 80174aa <_fflush_r+0x1a>
 80174a6:	f7fe fa05 	bl	80158b4 <__sinit>
 80174aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d0f3      	beq.n	801749a <_fflush_r+0xa>
 80174b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174b4:	07d0      	lsls	r0, r2, #31
 80174b6:	d404      	bmi.n	80174c2 <_fflush_r+0x32>
 80174b8:	0599      	lsls	r1, r3, #22
 80174ba:	d402      	bmi.n	80174c2 <_fflush_r+0x32>
 80174bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174be:	f7fe fb10 	bl	8015ae2 <__retarget_lock_acquire_recursive>
 80174c2:	4628      	mov	r0, r5
 80174c4:	4621      	mov	r1, r4
 80174c6:	f7ff ff5d 	bl	8017384 <__sflush_r>
 80174ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174cc:	07da      	lsls	r2, r3, #31
 80174ce:	4605      	mov	r5, r0
 80174d0:	d4e4      	bmi.n	801749c <_fflush_r+0xc>
 80174d2:	89a3      	ldrh	r3, [r4, #12]
 80174d4:	059b      	lsls	r3, r3, #22
 80174d6:	d4e1      	bmi.n	801749c <_fflush_r+0xc>
 80174d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174da:	f7fe fb03 	bl	8015ae4 <__retarget_lock_release_recursive>
 80174de:	e7dd      	b.n	801749c <_fflush_r+0xc>

080174e0 <memmove>:
 80174e0:	4288      	cmp	r0, r1
 80174e2:	b510      	push	{r4, lr}
 80174e4:	eb01 0402 	add.w	r4, r1, r2
 80174e8:	d902      	bls.n	80174f0 <memmove+0x10>
 80174ea:	4284      	cmp	r4, r0
 80174ec:	4623      	mov	r3, r4
 80174ee:	d807      	bhi.n	8017500 <memmove+0x20>
 80174f0:	1e43      	subs	r3, r0, #1
 80174f2:	42a1      	cmp	r1, r4
 80174f4:	d008      	beq.n	8017508 <memmove+0x28>
 80174f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80174fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80174fe:	e7f8      	b.n	80174f2 <memmove+0x12>
 8017500:	4402      	add	r2, r0
 8017502:	4601      	mov	r1, r0
 8017504:	428a      	cmp	r2, r1
 8017506:	d100      	bne.n	801750a <memmove+0x2a>
 8017508:	bd10      	pop	{r4, pc}
 801750a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801750e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017512:	e7f7      	b.n	8017504 <memmove+0x24>

08017514 <_sbrk_r>:
 8017514:	b538      	push	{r3, r4, r5, lr}
 8017516:	4d06      	ldr	r5, [pc, #24]	; (8017530 <_sbrk_r+0x1c>)
 8017518:	2300      	movs	r3, #0
 801751a:	4604      	mov	r4, r0
 801751c:	4608      	mov	r0, r1
 801751e:	602b      	str	r3, [r5, #0]
 8017520:	f7ed fbba 	bl	8004c98 <_sbrk>
 8017524:	1c43      	adds	r3, r0, #1
 8017526:	d102      	bne.n	801752e <_sbrk_r+0x1a>
 8017528:	682b      	ldr	r3, [r5, #0]
 801752a:	b103      	cbz	r3, 801752e <_sbrk_r+0x1a>
 801752c:	6023      	str	r3, [r4, #0]
 801752e:	bd38      	pop	{r3, r4, r5, pc}
 8017530:	20002ec8 	.word	0x20002ec8

08017534 <memcpy>:
 8017534:	440a      	add	r2, r1
 8017536:	4291      	cmp	r1, r2
 8017538:	f100 33ff 	add.w	r3, r0, #4294967295
 801753c:	d100      	bne.n	8017540 <memcpy+0xc>
 801753e:	4770      	bx	lr
 8017540:	b510      	push	{r4, lr}
 8017542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017546:	f803 4f01 	strb.w	r4, [r3, #1]!
 801754a:	4291      	cmp	r1, r2
 801754c:	d1f9      	bne.n	8017542 <memcpy+0xe>
 801754e:	bd10      	pop	{r4, pc}

08017550 <__assert_func>:
 8017550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017552:	4614      	mov	r4, r2
 8017554:	461a      	mov	r2, r3
 8017556:	4b09      	ldr	r3, [pc, #36]	; (801757c <__assert_func+0x2c>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	4605      	mov	r5, r0
 801755c:	68d8      	ldr	r0, [r3, #12]
 801755e:	b14c      	cbz	r4, 8017574 <__assert_func+0x24>
 8017560:	4b07      	ldr	r3, [pc, #28]	; (8017580 <__assert_func+0x30>)
 8017562:	9100      	str	r1, [sp, #0]
 8017564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017568:	4906      	ldr	r1, [pc, #24]	; (8017584 <__assert_func+0x34>)
 801756a:	462b      	mov	r3, r5
 801756c:	f000 f872 	bl	8017654 <fiprintf>
 8017570:	f000 f882 	bl	8017678 <abort>
 8017574:	4b04      	ldr	r3, [pc, #16]	; (8017588 <__assert_func+0x38>)
 8017576:	461c      	mov	r4, r3
 8017578:	e7f3      	b.n	8017562 <__assert_func+0x12>
 801757a:	bf00      	nop
 801757c:	20000374 	.word	0x20000374
 8017580:	0801b7df 	.word	0x0801b7df
 8017584:	0801b7ec 	.word	0x0801b7ec
 8017588:	0801b81a 	.word	0x0801b81a

0801758c <_calloc_r>:
 801758c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801758e:	fba1 2402 	umull	r2, r4, r1, r2
 8017592:	b94c      	cbnz	r4, 80175a8 <_calloc_r+0x1c>
 8017594:	4611      	mov	r1, r2
 8017596:	9201      	str	r2, [sp, #4]
 8017598:	f7ff f994 	bl	80168c4 <_malloc_r>
 801759c:	9a01      	ldr	r2, [sp, #4]
 801759e:	4605      	mov	r5, r0
 80175a0:	b930      	cbnz	r0, 80175b0 <_calloc_r+0x24>
 80175a2:	4628      	mov	r0, r5
 80175a4:	b003      	add	sp, #12
 80175a6:	bd30      	pop	{r4, r5, pc}
 80175a8:	220c      	movs	r2, #12
 80175aa:	6002      	str	r2, [r0, #0]
 80175ac:	2500      	movs	r5, #0
 80175ae:	e7f8      	b.n	80175a2 <_calloc_r+0x16>
 80175b0:	4621      	mov	r1, r4
 80175b2:	f7fe fa18 	bl	80159e6 <memset>
 80175b6:	e7f4      	b.n	80175a2 <_calloc_r+0x16>

080175b8 <__ascii_mbtowc>:
 80175b8:	b082      	sub	sp, #8
 80175ba:	b901      	cbnz	r1, 80175be <__ascii_mbtowc+0x6>
 80175bc:	a901      	add	r1, sp, #4
 80175be:	b142      	cbz	r2, 80175d2 <__ascii_mbtowc+0x1a>
 80175c0:	b14b      	cbz	r3, 80175d6 <__ascii_mbtowc+0x1e>
 80175c2:	7813      	ldrb	r3, [r2, #0]
 80175c4:	600b      	str	r3, [r1, #0]
 80175c6:	7812      	ldrb	r2, [r2, #0]
 80175c8:	1e10      	subs	r0, r2, #0
 80175ca:	bf18      	it	ne
 80175cc:	2001      	movne	r0, #1
 80175ce:	b002      	add	sp, #8
 80175d0:	4770      	bx	lr
 80175d2:	4610      	mov	r0, r2
 80175d4:	e7fb      	b.n	80175ce <__ascii_mbtowc+0x16>
 80175d6:	f06f 0001 	mvn.w	r0, #1
 80175da:	e7f8      	b.n	80175ce <__ascii_mbtowc+0x16>

080175dc <_realloc_r>:
 80175dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e0:	4680      	mov	r8, r0
 80175e2:	4614      	mov	r4, r2
 80175e4:	460e      	mov	r6, r1
 80175e6:	b921      	cbnz	r1, 80175f2 <_realloc_r+0x16>
 80175e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175ec:	4611      	mov	r1, r2
 80175ee:	f7ff b969 	b.w	80168c4 <_malloc_r>
 80175f2:	b92a      	cbnz	r2, 8017600 <_realloc_r+0x24>
 80175f4:	f7ff f8f2 	bl	80167dc <_free_r>
 80175f8:	4625      	mov	r5, r4
 80175fa:	4628      	mov	r0, r5
 80175fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017600:	f000 f841 	bl	8017686 <_malloc_usable_size_r>
 8017604:	4284      	cmp	r4, r0
 8017606:	4607      	mov	r7, r0
 8017608:	d802      	bhi.n	8017610 <_realloc_r+0x34>
 801760a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801760e:	d812      	bhi.n	8017636 <_realloc_r+0x5a>
 8017610:	4621      	mov	r1, r4
 8017612:	4640      	mov	r0, r8
 8017614:	f7ff f956 	bl	80168c4 <_malloc_r>
 8017618:	4605      	mov	r5, r0
 801761a:	2800      	cmp	r0, #0
 801761c:	d0ed      	beq.n	80175fa <_realloc_r+0x1e>
 801761e:	42bc      	cmp	r4, r7
 8017620:	4622      	mov	r2, r4
 8017622:	4631      	mov	r1, r6
 8017624:	bf28      	it	cs
 8017626:	463a      	movcs	r2, r7
 8017628:	f7ff ff84 	bl	8017534 <memcpy>
 801762c:	4631      	mov	r1, r6
 801762e:	4640      	mov	r0, r8
 8017630:	f7ff f8d4 	bl	80167dc <_free_r>
 8017634:	e7e1      	b.n	80175fa <_realloc_r+0x1e>
 8017636:	4635      	mov	r5, r6
 8017638:	e7df      	b.n	80175fa <_realloc_r+0x1e>

0801763a <__ascii_wctomb>:
 801763a:	b149      	cbz	r1, 8017650 <__ascii_wctomb+0x16>
 801763c:	2aff      	cmp	r2, #255	; 0xff
 801763e:	bf85      	ittet	hi
 8017640:	238a      	movhi	r3, #138	; 0x8a
 8017642:	6003      	strhi	r3, [r0, #0]
 8017644:	700a      	strbls	r2, [r1, #0]
 8017646:	f04f 30ff 	movhi.w	r0, #4294967295
 801764a:	bf98      	it	ls
 801764c:	2001      	movls	r0, #1
 801764e:	4770      	bx	lr
 8017650:	4608      	mov	r0, r1
 8017652:	4770      	bx	lr

08017654 <fiprintf>:
 8017654:	b40e      	push	{r1, r2, r3}
 8017656:	b503      	push	{r0, r1, lr}
 8017658:	4601      	mov	r1, r0
 801765a:	ab03      	add	r3, sp, #12
 801765c:	4805      	ldr	r0, [pc, #20]	; (8017674 <fiprintf+0x20>)
 801765e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017662:	6800      	ldr	r0, [r0, #0]
 8017664:	9301      	str	r3, [sp, #4]
 8017666:	f000 f83f 	bl	80176e8 <_vfiprintf_r>
 801766a:	b002      	add	sp, #8
 801766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017670:	b003      	add	sp, #12
 8017672:	4770      	bx	lr
 8017674:	20000374 	.word	0x20000374

08017678 <abort>:
 8017678:	b508      	push	{r3, lr}
 801767a:	2006      	movs	r0, #6
 801767c:	f000 fa0c 	bl	8017a98 <raise>
 8017680:	2001      	movs	r0, #1
 8017682:	f7ed fa91 	bl	8004ba8 <_exit>

08017686 <_malloc_usable_size_r>:
 8017686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801768a:	1f18      	subs	r0, r3, #4
 801768c:	2b00      	cmp	r3, #0
 801768e:	bfbc      	itt	lt
 8017690:	580b      	ldrlt	r3, [r1, r0]
 8017692:	18c0      	addlt	r0, r0, r3
 8017694:	4770      	bx	lr

08017696 <__sfputc_r>:
 8017696:	6893      	ldr	r3, [r2, #8]
 8017698:	3b01      	subs	r3, #1
 801769a:	2b00      	cmp	r3, #0
 801769c:	b410      	push	{r4}
 801769e:	6093      	str	r3, [r2, #8]
 80176a0:	da08      	bge.n	80176b4 <__sfputc_r+0x1e>
 80176a2:	6994      	ldr	r4, [r2, #24]
 80176a4:	42a3      	cmp	r3, r4
 80176a6:	db01      	blt.n	80176ac <__sfputc_r+0x16>
 80176a8:	290a      	cmp	r1, #10
 80176aa:	d103      	bne.n	80176b4 <__sfputc_r+0x1e>
 80176ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176b0:	f000 b934 	b.w	801791c <__swbuf_r>
 80176b4:	6813      	ldr	r3, [r2, #0]
 80176b6:	1c58      	adds	r0, r3, #1
 80176b8:	6010      	str	r0, [r2, #0]
 80176ba:	7019      	strb	r1, [r3, #0]
 80176bc:	4608      	mov	r0, r1
 80176be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <__sfputs_r>:
 80176c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c6:	4606      	mov	r6, r0
 80176c8:	460f      	mov	r7, r1
 80176ca:	4614      	mov	r4, r2
 80176cc:	18d5      	adds	r5, r2, r3
 80176ce:	42ac      	cmp	r4, r5
 80176d0:	d101      	bne.n	80176d6 <__sfputs_r+0x12>
 80176d2:	2000      	movs	r0, #0
 80176d4:	e007      	b.n	80176e6 <__sfputs_r+0x22>
 80176d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176da:	463a      	mov	r2, r7
 80176dc:	4630      	mov	r0, r6
 80176de:	f7ff ffda 	bl	8017696 <__sfputc_r>
 80176e2:	1c43      	adds	r3, r0, #1
 80176e4:	d1f3      	bne.n	80176ce <__sfputs_r+0xa>
 80176e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080176e8 <_vfiprintf_r>:
 80176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	460d      	mov	r5, r1
 80176ee:	b09d      	sub	sp, #116	; 0x74
 80176f0:	4614      	mov	r4, r2
 80176f2:	4698      	mov	r8, r3
 80176f4:	4606      	mov	r6, r0
 80176f6:	b118      	cbz	r0, 8017700 <_vfiprintf_r+0x18>
 80176f8:	6a03      	ldr	r3, [r0, #32]
 80176fa:	b90b      	cbnz	r3, 8017700 <_vfiprintf_r+0x18>
 80176fc:	f7fe f8da 	bl	80158b4 <__sinit>
 8017700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017702:	07d9      	lsls	r1, r3, #31
 8017704:	d405      	bmi.n	8017712 <_vfiprintf_r+0x2a>
 8017706:	89ab      	ldrh	r3, [r5, #12]
 8017708:	059a      	lsls	r2, r3, #22
 801770a:	d402      	bmi.n	8017712 <_vfiprintf_r+0x2a>
 801770c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801770e:	f7fe f9e8 	bl	8015ae2 <__retarget_lock_acquire_recursive>
 8017712:	89ab      	ldrh	r3, [r5, #12]
 8017714:	071b      	lsls	r3, r3, #28
 8017716:	d501      	bpl.n	801771c <_vfiprintf_r+0x34>
 8017718:	692b      	ldr	r3, [r5, #16]
 801771a:	b99b      	cbnz	r3, 8017744 <_vfiprintf_r+0x5c>
 801771c:	4629      	mov	r1, r5
 801771e:	4630      	mov	r0, r6
 8017720:	f000 f93a 	bl	8017998 <__swsetup_r>
 8017724:	b170      	cbz	r0, 8017744 <_vfiprintf_r+0x5c>
 8017726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017728:	07dc      	lsls	r4, r3, #31
 801772a:	d504      	bpl.n	8017736 <_vfiprintf_r+0x4e>
 801772c:	f04f 30ff 	mov.w	r0, #4294967295
 8017730:	b01d      	add	sp, #116	; 0x74
 8017732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017736:	89ab      	ldrh	r3, [r5, #12]
 8017738:	0598      	lsls	r0, r3, #22
 801773a:	d4f7      	bmi.n	801772c <_vfiprintf_r+0x44>
 801773c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801773e:	f7fe f9d1 	bl	8015ae4 <__retarget_lock_release_recursive>
 8017742:	e7f3      	b.n	801772c <_vfiprintf_r+0x44>
 8017744:	2300      	movs	r3, #0
 8017746:	9309      	str	r3, [sp, #36]	; 0x24
 8017748:	2320      	movs	r3, #32
 801774a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801774e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017752:	2330      	movs	r3, #48	; 0x30
 8017754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017908 <_vfiprintf_r+0x220>
 8017758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801775c:	f04f 0901 	mov.w	r9, #1
 8017760:	4623      	mov	r3, r4
 8017762:	469a      	mov	sl, r3
 8017764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017768:	b10a      	cbz	r2, 801776e <_vfiprintf_r+0x86>
 801776a:	2a25      	cmp	r2, #37	; 0x25
 801776c:	d1f9      	bne.n	8017762 <_vfiprintf_r+0x7a>
 801776e:	ebba 0b04 	subs.w	fp, sl, r4
 8017772:	d00b      	beq.n	801778c <_vfiprintf_r+0xa4>
 8017774:	465b      	mov	r3, fp
 8017776:	4622      	mov	r2, r4
 8017778:	4629      	mov	r1, r5
 801777a:	4630      	mov	r0, r6
 801777c:	f7ff ffa2 	bl	80176c4 <__sfputs_r>
 8017780:	3001      	adds	r0, #1
 8017782:	f000 80a9 	beq.w	80178d8 <_vfiprintf_r+0x1f0>
 8017786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017788:	445a      	add	r2, fp
 801778a:	9209      	str	r2, [sp, #36]	; 0x24
 801778c:	f89a 3000 	ldrb.w	r3, [sl]
 8017790:	2b00      	cmp	r3, #0
 8017792:	f000 80a1 	beq.w	80178d8 <_vfiprintf_r+0x1f0>
 8017796:	2300      	movs	r3, #0
 8017798:	f04f 32ff 	mov.w	r2, #4294967295
 801779c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177a0:	f10a 0a01 	add.w	sl, sl, #1
 80177a4:	9304      	str	r3, [sp, #16]
 80177a6:	9307      	str	r3, [sp, #28]
 80177a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177ac:	931a      	str	r3, [sp, #104]	; 0x68
 80177ae:	4654      	mov	r4, sl
 80177b0:	2205      	movs	r2, #5
 80177b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177b6:	4854      	ldr	r0, [pc, #336]	; (8017908 <_vfiprintf_r+0x220>)
 80177b8:	f7e8 fd32 	bl	8000220 <memchr>
 80177bc:	9a04      	ldr	r2, [sp, #16]
 80177be:	b9d8      	cbnz	r0, 80177f8 <_vfiprintf_r+0x110>
 80177c0:	06d1      	lsls	r1, r2, #27
 80177c2:	bf44      	itt	mi
 80177c4:	2320      	movmi	r3, #32
 80177c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177ca:	0713      	lsls	r3, r2, #28
 80177cc:	bf44      	itt	mi
 80177ce:	232b      	movmi	r3, #43	; 0x2b
 80177d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177d4:	f89a 3000 	ldrb.w	r3, [sl]
 80177d8:	2b2a      	cmp	r3, #42	; 0x2a
 80177da:	d015      	beq.n	8017808 <_vfiprintf_r+0x120>
 80177dc:	9a07      	ldr	r2, [sp, #28]
 80177de:	4654      	mov	r4, sl
 80177e0:	2000      	movs	r0, #0
 80177e2:	f04f 0c0a 	mov.w	ip, #10
 80177e6:	4621      	mov	r1, r4
 80177e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177ec:	3b30      	subs	r3, #48	; 0x30
 80177ee:	2b09      	cmp	r3, #9
 80177f0:	d94d      	bls.n	801788e <_vfiprintf_r+0x1a6>
 80177f2:	b1b0      	cbz	r0, 8017822 <_vfiprintf_r+0x13a>
 80177f4:	9207      	str	r2, [sp, #28]
 80177f6:	e014      	b.n	8017822 <_vfiprintf_r+0x13a>
 80177f8:	eba0 0308 	sub.w	r3, r0, r8
 80177fc:	fa09 f303 	lsl.w	r3, r9, r3
 8017800:	4313      	orrs	r3, r2
 8017802:	9304      	str	r3, [sp, #16]
 8017804:	46a2      	mov	sl, r4
 8017806:	e7d2      	b.n	80177ae <_vfiprintf_r+0xc6>
 8017808:	9b03      	ldr	r3, [sp, #12]
 801780a:	1d19      	adds	r1, r3, #4
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	9103      	str	r1, [sp, #12]
 8017810:	2b00      	cmp	r3, #0
 8017812:	bfbb      	ittet	lt
 8017814:	425b      	neglt	r3, r3
 8017816:	f042 0202 	orrlt.w	r2, r2, #2
 801781a:	9307      	strge	r3, [sp, #28]
 801781c:	9307      	strlt	r3, [sp, #28]
 801781e:	bfb8      	it	lt
 8017820:	9204      	strlt	r2, [sp, #16]
 8017822:	7823      	ldrb	r3, [r4, #0]
 8017824:	2b2e      	cmp	r3, #46	; 0x2e
 8017826:	d10c      	bne.n	8017842 <_vfiprintf_r+0x15a>
 8017828:	7863      	ldrb	r3, [r4, #1]
 801782a:	2b2a      	cmp	r3, #42	; 0x2a
 801782c:	d134      	bne.n	8017898 <_vfiprintf_r+0x1b0>
 801782e:	9b03      	ldr	r3, [sp, #12]
 8017830:	1d1a      	adds	r2, r3, #4
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	9203      	str	r2, [sp, #12]
 8017836:	2b00      	cmp	r3, #0
 8017838:	bfb8      	it	lt
 801783a:	f04f 33ff 	movlt.w	r3, #4294967295
 801783e:	3402      	adds	r4, #2
 8017840:	9305      	str	r3, [sp, #20]
 8017842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017918 <_vfiprintf_r+0x230>
 8017846:	7821      	ldrb	r1, [r4, #0]
 8017848:	2203      	movs	r2, #3
 801784a:	4650      	mov	r0, sl
 801784c:	f7e8 fce8 	bl	8000220 <memchr>
 8017850:	b138      	cbz	r0, 8017862 <_vfiprintf_r+0x17a>
 8017852:	9b04      	ldr	r3, [sp, #16]
 8017854:	eba0 000a 	sub.w	r0, r0, sl
 8017858:	2240      	movs	r2, #64	; 0x40
 801785a:	4082      	lsls	r2, r0
 801785c:	4313      	orrs	r3, r2
 801785e:	3401      	adds	r4, #1
 8017860:	9304      	str	r3, [sp, #16]
 8017862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017866:	4829      	ldr	r0, [pc, #164]	; (801790c <_vfiprintf_r+0x224>)
 8017868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801786c:	2206      	movs	r2, #6
 801786e:	f7e8 fcd7 	bl	8000220 <memchr>
 8017872:	2800      	cmp	r0, #0
 8017874:	d03f      	beq.n	80178f6 <_vfiprintf_r+0x20e>
 8017876:	4b26      	ldr	r3, [pc, #152]	; (8017910 <_vfiprintf_r+0x228>)
 8017878:	bb1b      	cbnz	r3, 80178c2 <_vfiprintf_r+0x1da>
 801787a:	9b03      	ldr	r3, [sp, #12]
 801787c:	3307      	adds	r3, #7
 801787e:	f023 0307 	bic.w	r3, r3, #7
 8017882:	3308      	adds	r3, #8
 8017884:	9303      	str	r3, [sp, #12]
 8017886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017888:	443b      	add	r3, r7
 801788a:	9309      	str	r3, [sp, #36]	; 0x24
 801788c:	e768      	b.n	8017760 <_vfiprintf_r+0x78>
 801788e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017892:	460c      	mov	r4, r1
 8017894:	2001      	movs	r0, #1
 8017896:	e7a6      	b.n	80177e6 <_vfiprintf_r+0xfe>
 8017898:	2300      	movs	r3, #0
 801789a:	3401      	adds	r4, #1
 801789c:	9305      	str	r3, [sp, #20]
 801789e:	4619      	mov	r1, r3
 80178a0:	f04f 0c0a 	mov.w	ip, #10
 80178a4:	4620      	mov	r0, r4
 80178a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178aa:	3a30      	subs	r2, #48	; 0x30
 80178ac:	2a09      	cmp	r2, #9
 80178ae:	d903      	bls.n	80178b8 <_vfiprintf_r+0x1d0>
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d0c6      	beq.n	8017842 <_vfiprintf_r+0x15a>
 80178b4:	9105      	str	r1, [sp, #20]
 80178b6:	e7c4      	b.n	8017842 <_vfiprintf_r+0x15a>
 80178b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80178bc:	4604      	mov	r4, r0
 80178be:	2301      	movs	r3, #1
 80178c0:	e7f0      	b.n	80178a4 <_vfiprintf_r+0x1bc>
 80178c2:	ab03      	add	r3, sp, #12
 80178c4:	9300      	str	r3, [sp, #0]
 80178c6:	462a      	mov	r2, r5
 80178c8:	4b12      	ldr	r3, [pc, #72]	; (8017914 <_vfiprintf_r+0x22c>)
 80178ca:	a904      	add	r1, sp, #16
 80178cc:	4630      	mov	r0, r6
 80178ce:	f7fd fb9f 	bl	8015010 <_printf_float>
 80178d2:	4607      	mov	r7, r0
 80178d4:	1c78      	adds	r0, r7, #1
 80178d6:	d1d6      	bne.n	8017886 <_vfiprintf_r+0x19e>
 80178d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178da:	07d9      	lsls	r1, r3, #31
 80178dc:	d405      	bmi.n	80178ea <_vfiprintf_r+0x202>
 80178de:	89ab      	ldrh	r3, [r5, #12]
 80178e0:	059a      	lsls	r2, r3, #22
 80178e2:	d402      	bmi.n	80178ea <_vfiprintf_r+0x202>
 80178e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178e6:	f7fe f8fd 	bl	8015ae4 <__retarget_lock_release_recursive>
 80178ea:	89ab      	ldrh	r3, [r5, #12]
 80178ec:	065b      	lsls	r3, r3, #25
 80178ee:	f53f af1d 	bmi.w	801772c <_vfiprintf_r+0x44>
 80178f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178f4:	e71c      	b.n	8017730 <_vfiprintf_r+0x48>
 80178f6:	ab03      	add	r3, sp, #12
 80178f8:	9300      	str	r3, [sp, #0]
 80178fa:	462a      	mov	r2, r5
 80178fc:	4b05      	ldr	r3, [pc, #20]	; (8017914 <_vfiprintf_r+0x22c>)
 80178fe:	a904      	add	r1, sp, #16
 8017900:	4630      	mov	r0, r6
 8017902:	f7fd fe29 	bl	8015558 <_printf_i>
 8017906:	e7e4      	b.n	80178d2 <_vfiprintf_r+0x1ea>
 8017908:	0801b7c4 	.word	0x0801b7c4
 801790c:	0801b7ce 	.word	0x0801b7ce
 8017910:	08015011 	.word	0x08015011
 8017914:	080176c5 	.word	0x080176c5
 8017918:	0801b7ca 	.word	0x0801b7ca

0801791c <__swbuf_r>:
 801791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801791e:	460e      	mov	r6, r1
 8017920:	4614      	mov	r4, r2
 8017922:	4605      	mov	r5, r0
 8017924:	b118      	cbz	r0, 801792e <__swbuf_r+0x12>
 8017926:	6a03      	ldr	r3, [r0, #32]
 8017928:	b90b      	cbnz	r3, 801792e <__swbuf_r+0x12>
 801792a:	f7fd ffc3 	bl	80158b4 <__sinit>
 801792e:	69a3      	ldr	r3, [r4, #24]
 8017930:	60a3      	str	r3, [r4, #8]
 8017932:	89a3      	ldrh	r3, [r4, #12]
 8017934:	071a      	lsls	r2, r3, #28
 8017936:	d525      	bpl.n	8017984 <__swbuf_r+0x68>
 8017938:	6923      	ldr	r3, [r4, #16]
 801793a:	b31b      	cbz	r3, 8017984 <__swbuf_r+0x68>
 801793c:	6823      	ldr	r3, [r4, #0]
 801793e:	6922      	ldr	r2, [r4, #16]
 8017940:	1a98      	subs	r0, r3, r2
 8017942:	6963      	ldr	r3, [r4, #20]
 8017944:	b2f6      	uxtb	r6, r6
 8017946:	4283      	cmp	r3, r0
 8017948:	4637      	mov	r7, r6
 801794a:	dc04      	bgt.n	8017956 <__swbuf_r+0x3a>
 801794c:	4621      	mov	r1, r4
 801794e:	4628      	mov	r0, r5
 8017950:	f7ff fd9e 	bl	8017490 <_fflush_r>
 8017954:	b9e0      	cbnz	r0, 8017990 <__swbuf_r+0x74>
 8017956:	68a3      	ldr	r3, [r4, #8]
 8017958:	3b01      	subs	r3, #1
 801795a:	60a3      	str	r3, [r4, #8]
 801795c:	6823      	ldr	r3, [r4, #0]
 801795e:	1c5a      	adds	r2, r3, #1
 8017960:	6022      	str	r2, [r4, #0]
 8017962:	701e      	strb	r6, [r3, #0]
 8017964:	6962      	ldr	r2, [r4, #20]
 8017966:	1c43      	adds	r3, r0, #1
 8017968:	429a      	cmp	r2, r3
 801796a:	d004      	beq.n	8017976 <__swbuf_r+0x5a>
 801796c:	89a3      	ldrh	r3, [r4, #12]
 801796e:	07db      	lsls	r3, r3, #31
 8017970:	d506      	bpl.n	8017980 <__swbuf_r+0x64>
 8017972:	2e0a      	cmp	r6, #10
 8017974:	d104      	bne.n	8017980 <__swbuf_r+0x64>
 8017976:	4621      	mov	r1, r4
 8017978:	4628      	mov	r0, r5
 801797a:	f7ff fd89 	bl	8017490 <_fflush_r>
 801797e:	b938      	cbnz	r0, 8017990 <__swbuf_r+0x74>
 8017980:	4638      	mov	r0, r7
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	4621      	mov	r1, r4
 8017986:	4628      	mov	r0, r5
 8017988:	f000 f806 	bl	8017998 <__swsetup_r>
 801798c:	2800      	cmp	r0, #0
 801798e:	d0d5      	beq.n	801793c <__swbuf_r+0x20>
 8017990:	f04f 37ff 	mov.w	r7, #4294967295
 8017994:	e7f4      	b.n	8017980 <__swbuf_r+0x64>
	...

08017998 <__swsetup_r>:
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4b2a      	ldr	r3, [pc, #168]	; (8017a44 <__swsetup_r+0xac>)
 801799c:	4605      	mov	r5, r0
 801799e:	6818      	ldr	r0, [r3, #0]
 80179a0:	460c      	mov	r4, r1
 80179a2:	b118      	cbz	r0, 80179ac <__swsetup_r+0x14>
 80179a4:	6a03      	ldr	r3, [r0, #32]
 80179a6:	b90b      	cbnz	r3, 80179ac <__swsetup_r+0x14>
 80179a8:	f7fd ff84 	bl	80158b4 <__sinit>
 80179ac:	89a3      	ldrh	r3, [r4, #12]
 80179ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179b2:	0718      	lsls	r0, r3, #28
 80179b4:	d422      	bmi.n	80179fc <__swsetup_r+0x64>
 80179b6:	06d9      	lsls	r1, r3, #27
 80179b8:	d407      	bmi.n	80179ca <__swsetup_r+0x32>
 80179ba:	2309      	movs	r3, #9
 80179bc:	602b      	str	r3, [r5, #0]
 80179be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80179c2:	81a3      	strh	r3, [r4, #12]
 80179c4:	f04f 30ff 	mov.w	r0, #4294967295
 80179c8:	e034      	b.n	8017a34 <__swsetup_r+0x9c>
 80179ca:	0758      	lsls	r0, r3, #29
 80179cc:	d512      	bpl.n	80179f4 <__swsetup_r+0x5c>
 80179ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179d0:	b141      	cbz	r1, 80179e4 <__swsetup_r+0x4c>
 80179d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179d6:	4299      	cmp	r1, r3
 80179d8:	d002      	beq.n	80179e0 <__swsetup_r+0x48>
 80179da:	4628      	mov	r0, r5
 80179dc:	f7fe fefe 	bl	80167dc <_free_r>
 80179e0:	2300      	movs	r3, #0
 80179e2:	6363      	str	r3, [r4, #52]	; 0x34
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80179ea:	81a3      	strh	r3, [r4, #12]
 80179ec:	2300      	movs	r3, #0
 80179ee:	6063      	str	r3, [r4, #4]
 80179f0:	6923      	ldr	r3, [r4, #16]
 80179f2:	6023      	str	r3, [r4, #0]
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	f043 0308 	orr.w	r3, r3, #8
 80179fa:	81a3      	strh	r3, [r4, #12]
 80179fc:	6923      	ldr	r3, [r4, #16]
 80179fe:	b94b      	cbnz	r3, 8017a14 <__swsetup_r+0x7c>
 8017a00:	89a3      	ldrh	r3, [r4, #12]
 8017a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a0a:	d003      	beq.n	8017a14 <__swsetup_r+0x7c>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4628      	mov	r0, r5
 8017a10:	f000 f884 	bl	8017b1c <__smakebuf_r>
 8017a14:	89a0      	ldrh	r0, [r4, #12]
 8017a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a1a:	f010 0301 	ands.w	r3, r0, #1
 8017a1e:	d00a      	beq.n	8017a36 <__swsetup_r+0x9e>
 8017a20:	2300      	movs	r3, #0
 8017a22:	60a3      	str	r3, [r4, #8]
 8017a24:	6963      	ldr	r3, [r4, #20]
 8017a26:	425b      	negs	r3, r3
 8017a28:	61a3      	str	r3, [r4, #24]
 8017a2a:	6923      	ldr	r3, [r4, #16]
 8017a2c:	b943      	cbnz	r3, 8017a40 <__swsetup_r+0xa8>
 8017a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a32:	d1c4      	bne.n	80179be <__swsetup_r+0x26>
 8017a34:	bd38      	pop	{r3, r4, r5, pc}
 8017a36:	0781      	lsls	r1, r0, #30
 8017a38:	bf58      	it	pl
 8017a3a:	6963      	ldrpl	r3, [r4, #20]
 8017a3c:	60a3      	str	r3, [r4, #8]
 8017a3e:	e7f4      	b.n	8017a2a <__swsetup_r+0x92>
 8017a40:	2000      	movs	r0, #0
 8017a42:	e7f7      	b.n	8017a34 <__swsetup_r+0x9c>
 8017a44:	20000374 	.word	0x20000374

08017a48 <_raise_r>:
 8017a48:	291f      	cmp	r1, #31
 8017a4a:	b538      	push	{r3, r4, r5, lr}
 8017a4c:	4604      	mov	r4, r0
 8017a4e:	460d      	mov	r5, r1
 8017a50:	d904      	bls.n	8017a5c <_raise_r+0x14>
 8017a52:	2316      	movs	r3, #22
 8017a54:	6003      	str	r3, [r0, #0]
 8017a56:	f04f 30ff 	mov.w	r0, #4294967295
 8017a5a:	bd38      	pop	{r3, r4, r5, pc}
 8017a5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017a5e:	b112      	cbz	r2, 8017a66 <_raise_r+0x1e>
 8017a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a64:	b94b      	cbnz	r3, 8017a7a <_raise_r+0x32>
 8017a66:	4620      	mov	r0, r4
 8017a68:	f000 f830 	bl	8017acc <_getpid_r>
 8017a6c:	462a      	mov	r2, r5
 8017a6e:	4601      	mov	r1, r0
 8017a70:	4620      	mov	r0, r4
 8017a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a76:	f000 b817 	b.w	8017aa8 <_kill_r>
 8017a7a:	2b01      	cmp	r3, #1
 8017a7c:	d00a      	beq.n	8017a94 <_raise_r+0x4c>
 8017a7e:	1c59      	adds	r1, r3, #1
 8017a80:	d103      	bne.n	8017a8a <_raise_r+0x42>
 8017a82:	2316      	movs	r3, #22
 8017a84:	6003      	str	r3, [r0, #0]
 8017a86:	2001      	movs	r0, #1
 8017a88:	e7e7      	b.n	8017a5a <_raise_r+0x12>
 8017a8a:	2400      	movs	r4, #0
 8017a8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a90:	4628      	mov	r0, r5
 8017a92:	4798      	blx	r3
 8017a94:	2000      	movs	r0, #0
 8017a96:	e7e0      	b.n	8017a5a <_raise_r+0x12>

08017a98 <raise>:
 8017a98:	4b02      	ldr	r3, [pc, #8]	; (8017aa4 <raise+0xc>)
 8017a9a:	4601      	mov	r1, r0
 8017a9c:	6818      	ldr	r0, [r3, #0]
 8017a9e:	f7ff bfd3 	b.w	8017a48 <_raise_r>
 8017aa2:	bf00      	nop
 8017aa4:	20000374 	.word	0x20000374

08017aa8 <_kill_r>:
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4d07      	ldr	r5, [pc, #28]	; (8017ac8 <_kill_r+0x20>)
 8017aac:	2300      	movs	r3, #0
 8017aae:	4604      	mov	r4, r0
 8017ab0:	4608      	mov	r0, r1
 8017ab2:	4611      	mov	r1, r2
 8017ab4:	602b      	str	r3, [r5, #0]
 8017ab6:	f7ed f867 	bl	8004b88 <_kill>
 8017aba:	1c43      	adds	r3, r0, #1
 8017abc:	d102      	bne.n	8017ac4 <_kill_r+0x1c>
 8017abe:	682b      	ldr	r3, [r5, #0]
 8017ac0:	b103      	cbz	r3, 8017ac4 <_kill_r+0x1c>
 8017ac2:	6023      	str	r3, [r4, #0]
 8017ac4:	bd38      	pop	{r3, r4, r5, pc}
 8017ac6:	bf00      	nop
 8017ac8:	20002ec8 	.word	0x20002ec8

08017acc <_getpid_r>:
 8017acc:	f7ed b854 	b.w	8004b78 <_getpid>

08017ad0 <__swhatbuf_r>:
 8017ad0:	b570      	push	{r4, r5, r6, lr}
 8017ad2:	460c      	mov	r4, r1
 8017ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ad8:	2900      	cmp	r1, #0
 8017ada:	b096      	sub	sp, #88	; 0x58
 8017adc:	4615      	mov	r5, r2
 8017ade:	461e      	mov	r6, r3
 8017ae0:	da0d      	bge.n	8017afe <__swhatbuf_r+0x2e>
 8017ae2:	89a3      	ldrh	r3, [r4, #12]
 8017ae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017ae8:	f04f 0100 	mov.w	r1, #0
 8017aec:	bf0c      	ite	eq
 8017aee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017af2:	2340      	movne	r3, #64	; 0x40
 8017af4:	2000      	movs	r0, #0
 8017af6:	6031      	str	r1, [r6, #0]
 8017af8:	602b      	str	r3, [r5, #0]
 8017afa:	b016      	add	sp, #88	; 0x58
 8017afc:	bd70      	pop	{r4, r5, r6, pc}
 8017afe:	466a      	mov	r2, sp
 8017b00:	f000 f848 	bl	8017b94 <_fstat_r>
 8017b04:	2800      	cmp	r0, #0
 8017b06:	dbec      	blt.n	8017ae2 <__swhatbuf_r+0x12>
 8017b08:	9901      	ldr	r1, [sp, #4]
 8017b0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017b0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017b12:	4259      	negs	r1, r3
 8017b14:	4159      	adcs	r1, r3
 8017b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017b1a:	e7eb      	b.n	8017af4 <__swhatbuf_r+0x24>

08017b1c <__smakebuf_r>:
 8017b1c:	898b      	ldrh	r3, [r1, #12]
 8017b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b20:	079d      	lsls	r5, r3, #30
 8017b22:	4606      	mov	r6, r0
 8017b24:	460c      	mov	r4, r1
 8017b26:	d507      	bpl.n	8017b38 <__smakebuf_r+0x1c>
 8017b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017b2c:	6023      	str	r3, [r4, #0]
 8017b2e:	6123      	str	r3, [r4, #16]
 8017b30:	2301      	movs	r3, #1
 8017b32:	6163      	str	r3, [r4, #20]
 8017b34:	b002      	add	sp, #8
 8017b36:	bd70      	pop	{r4, r5, r6, pc}
 8017b38:	ab01      	add	r3, sp, #4
 8017b3a:	466a      	mov	r2, sp
 8017b3c:	f7ff ffc8 	bl	8017ad0 <__swhatbuf_r>
 8017b40:	9900      	ldr	r1, [sp, #0]
 8017b42:	4605      	mov	r5, r0
 8017b44:	4630      	mov	r0, r6
 8017b46:	f7fe febd 	bl	80168c4 <_malloc_r>
 8017b4a:	b948      	cbnz	r0, 8017b60 <__smakebuf_r+0x44>
 8017b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b50:	059a      	lsls	r2, r3, #22
 8017b52:	d4ef      	bmi.n	8017b34 <__smakebuf_r+0x18>
 8017b54:	f023 0303 	bic.w	r3, r3, #3
 8017b58:	f043 0302 	orr.w	r3, r3, #2
 8017b5c:	81a3      	strh	r3, [r4, #12]
 8017b5e:	e7e3      	b.n	8017b28 <__smakebuf_r+0xc>
 8017b60:	89a3      	ldrh	r3, [r4, #12]
 8017b62:	6020      	str	r0, [r4, #0]
 8017b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b68:	81a3      	strh	r3, [r4, #12]
 8017b6a:	9b00      	ldr	r3, [sp, #0]
 8017b6c:	6163      	str	r3, [r4, #20]
 8017b6e:	9b01      	ldr	r3, [sp, #4]
 8017b70:	6120      	str	r0, [r4, #16]
 8017b72:	b15b      	cbz	r3, 8017b8c <__smakebuf_r+0x70>
 8017b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b78:	4630      	mov	r0, r6
 8017b7a:	f000 f81d 	bl	8017bb8 <_isatty_r>
 8017b7e:	b128      	cbz	r0, 8017b8c <__smakebuf_r+0x70>
 8017b80:	89a3      	ldrh	r3, [r4, #12]
 8017b82:	f023 0303 	bic.w	r3, r3, #3
 8017b86:	f043 0301 	orr.w	r3, r3, #1
 8017b8a:	81a3      	strh	r3, [r4, #12]
 8017b8c:	89a3      	ldrh	r3, [r4, #12]
 8017b8e:	431d      	orrs	r5, r3
 8017b90:	81a5      	strh	r5, [r4, #12]
 8017b92:	e7cf      	b.n	8017b34 <__smakebuf_r+0x18>

08017b94 <_fstat_r>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	4d07      	ldr	r5, [pc, #28]	; (8017bb4 <_fstat_r+0x20>)
 8017b98:	2300      	movs	r3, #0
 8017b9a:	4604      	mov	r4, r0
 8017b9c:	4608      	mov	r0, r1
 8017b9e:	4611      	mov	r1, r2
 8017ba0:	602b      	str	r3, [r5, #0]
 8017ba2:	f7ed f850 	bl	8004c46 <_fstat>
 8017ba6:	1c43      	adds	r3, r0, #1
 8017ba8:	d102      	bne.n	8017bb0 <_fstat_r+0x1c>
 8017baa:	682b      	ldr	r3, [r5, #0]
 8017bac:	b103      	cbz	r3, 8017bb0 <_fstat_r+0x1c>
 8017bae:	6023      	str	r3, [r4, #0]
 8017bb0:	bd38      	pop	{r3, r4, r5, pc}
 8017bb2:	bf00      	nop
 8017bb4:	20002ec8 	.word	0x20002ec8

08017bb8 <_isatty_r>:
 8017bb8:	b538      	push	{r3, r4, r5, lr}
 8017bba:	4d06      	ldr	r5, [pc, #24]	; (8017bd4 <_isatty_r+0x1c>)
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	4604      	mov	r4, r0
 8017bc0:	4608      	mov	r0, r1
 8017bc2:	602b      	str	r3, [r5, #0]
 8017bc4:	f7ed f84f 	bl	8004c66 <_isatty>
 8017bc8:	1c43      	adds	r3, r0, #1
 8017bca:	d102      	bne.n	8017bd2 <_isatty_r+0x1a>
 8017bcc:	682b      	ldr	r3, [r5, #0]
 8017bce:	b103      	cbz	r3, 8017bd2 <_isatty_r+0x1a>
 8017bd0:	6023      	str	r3, [r4, #0]
 8017bd2:	bd38      	pop	{r3, r4, r5, pc}
 8017bd4:	20002ec8 	.word	0x20002ec8

08017bd8 <fmod>:
 8017bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bda:	ed2d 8b02 	vpush	{d8}
 8017bde:	ec57 6b10 	vmov	r6, r7, d0
 8017be2:	ec55 4b11 	vmov	r4, r5, d1
 8017be6:	f000 f86d 	bl	8017cc4 <__ieee754_fmod>
 8017bea:	4622      	mov	r2, r4
 8017bec:	462b      	mov	r3, r5
 8017bee:	4630      	mov	r0, r6
 8017bf0:	4639      	mov	r1, r7
 8017bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8017bf6:	eef0 8a60 	vmov.f32	s17, s1
 8017bfa:	f7e8 ffbf 	bl	8000b7c <__aeabi_dcmpun>
 8017bfe:	b990      	cbnz	r0, 8017c26 <fmod+0x4e>
 8017c00:	2200      	movs	r2, #0
 8017c02:	2300      	movs	r3, #0
 8017c04:	4620      	mov	r0, r4
 8017c06:	4629      	mov	r1, r5
 8017c08:	f7e8 ff86 	bl	8000b18 <__aeabi_dcmpeq>
 8017c0c:	b158      	cbz	r0, 8017c26 <fmod+0x4e>
 8017c0e:	f7fd ff3d 	bl	8015a8c <__errno>
 8017c12:	2321      	movs	r3, #33	; 0x21
 8017c14:	6003      	str	r3, [r0, #0]
 8017c16:	2200      	movs	r2, #0
 8017c18:	2300      	movs	r3, #0
 8017c1a:	4610      	mov	r0, r2
 8017c1c:	4619      	mov	r1, r3
 8017c1e:	f7e8 fe3d 	bl	800089c <__aeabi_ddiv>
 8017c22:	ec41 0b18 	vmov	d8, r0, r1
 8017c26:	eeb0 0a48 	vmov.f32	s0, s16
 8017c2a:	eef0 0a68 	vmov.f32	s1, s17
 8017c2e:	ecbd 8b02 	vpop	{d8}
 8017c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c34 <round>:
 8017c34:	ec53 2b10 	vmov	r2, r3, d0
 8017c38:	b570      	push	{r4, r5, r6, lr}
 8017c3a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8017c3e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8017c42:	2813      	cmp	r0, #19
 8017c44:	ee10 5a10 	vmov	r5, s0
 8017c48:	4619      	mov	r1, r3
 8017c4a:	dc18      	bgt.n	8017c7e <round+0x4a>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	da09      	bge.n	8017c64 <round+0x30>
 8017c50:	3001      	adds	r0, #1
 8017c52:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8017c56:	d103      	bne.n	8017c60 <round+0x2c>
 8017c58:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8017c5c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8017c60:	2300      	movs	r3, #0
 8017c62:	e02a      	b.n	8017cba <round+0x86>
 8017c64:	4c16      	ldr	r4, [pc, #88]	; (8017cc0 <round+0x8c>)
 8017c66:	4104      	asrs	r4, r0
 8017c68:	ea03 0604 	and.w	r6, r3, r4
 8017c6c:	4316      	orrs	r6, r2
 8017c6e:	d011      	beq.n	8017c94 <round+0x60>
 8017c70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017c74:	4103      	asrs	r3, r0
 8017c76:	440b      	add	r3, r1
 8017c78:	ea23 0104 	bic.w	r1, r3, r4
 8017c7c:	e7f0      	b.n	8017c60 <round+0x2c>
 8017c7e:	2833      	cmp	r0, #51	; 0x33
 8017c80:	dd0b      	ble.n	8017c9a <round+0x66>
 8017c82:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017c86:	d105      	bne.n	8017c94 <round+0x60>
 8017c88:	ee10 0a10 	vmov	r0, s0
 8017c8c:	f7e8 fb26 	bl	80002dc <__adddf3>
 8017c90:	4602      	mov	r2, r0
 8017c92:	460b      	mov	r3, r1
 8017c94:	ec43 2b10 	vmov	d0, r2, r3
 8017c98:	bd70      	pop	{r4, r5, r6, pc}
 8017c9a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8017c9e:	f04f 34ff 	mov.w	r4, #4294967295
 8017ca2:	40f4      	lsrs	r4, r6
 8017ca4:	4214      	tst	r4, r2
 8017ca6:	d0f5      	beq.n	8017c94 <round+0x60>
 8017ca8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8017cac:	2301      	movs	r3, #1
 8017cae:	4083      	lsls	r3, r0
 8017cb0:	195b      	adds	r3, r3, r5
 8017cb2:	bf28      	it	cs
 8017cb4:	3101      	addcs	r1, #1
 8017cb6:	ea23 0304 	bic.w	r3, r3, r4
 8017cba:	461a      	mov	r2, r3
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	e7e9      	b.n	8017c94 <round+0x60>
 8017cc0:	000fffff 	.word	0x000fffff

08017cc4 <__ieee754_fmod>:
 8017cc4:	ec53 2b11 	vmov	r2, r3, d1
 8017cc8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8017ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cd0:	ea5c 0402 	orrs.w	r4, ip, r2
 8017cd4:	ec51 0b10 	vmov	r0, r1, d0
 8017cd8:	ee11 7a10 	vmov	r7, s2
 8017cdc:	ee11 ea10 	vmov	lr, s2
 8017ce0:	461e      	mov	r6, r3
 8017ce2:	d00c      	beq.n	8017cfe <__ieee754_fmod+0x3a>
 8017ce4:	4c78      	ldr	r4, [pc, #480]	; (8017ec8 <__ieee754_fmod+0x204>)
 8017ce6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8017cea:	45a0      	cmp	r8, r4
 8017cec:	4689      	mov	r9, r1
 8017cee:	dc06      	bgt.n	8017cfe <__ieee754_fmod+0x3a>
 8017cf0:	4254      	negs	r4, r2
 8017cf2:	4d76      	ldr	r5, [pc, #472]	; (8017ecc <__ieee754_fmod+0x208>)
 8017cf4:	4314      	orrs	r4, r2
 8017cf6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8017cfa:	42ac      	cmp	r4, r5
 8017cfc:	d909      	bls.n	8017d12 <__ieee754_fmod+0x4e>
 8017cfe:	f7e8 fca3 	bl	8000648 <__aeabi_dmul>
 8017d02:	4602      	mov	r2, r0
 8017d04:	460b      	mov	r3, r1
 8017d06:	f7e8 fdc9 	bl	800089c <__aeabi_ddiv>
 8017d0a:	ec41 0b10 	vmov	d0, r0, r1
 8017d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d12:	45e0      	cmp	r8, ip
 8017d14:	ee10 aa10 	vmov	sl, s0
 8017d18:	ee10 4a10 	vmov	r4, s0
 8017d1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8017d20:	dc09      	bgt.n	8017d36 <__ieee754_fmod+0x72>
 8017d22:	dbf2      	blt.n	8017d0a <__ieee754_fmod+0x46>
 8017d24:	4290      	cmp	r0, r2
 8017d26:	d3f0      	bcc.n	8017d0a <__ieee754_fmod+0x46>
 8017d28:	d105      	bne.n	8017d36 <__ieee754_fmod+0x72>
 8017d2a:	4b69      	ldr	r3, [pc, #420]	; (8017ed0 <__ieee754_fmod+0x20c>)
 8017d2c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8017d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017d34:	e7e9      	b.n	8017d0a <__ieee754_fmod+0x46>
 8017d36:	4a65      	ldr	r2, [pc, #404]	; (8017ecc <__ieee754_fmod+0x208>)
 8017d38:	ea19 0f02 	tst.w	r9, r2
 8017d3c:	d148      	bne.n	8017dd0 <__ieee754_fmod+0x10c>
 8017d3e:	f1b8 0f00 	cmp.w	r8, #0
 8017d42:	d13d      	bne.n	8017dc0 <__ieee754_fmod+0xfc>
 8017d44:	4963      	ldr	r1, [pc, #396]	; (8017ed4 <__ieee754_fmod+0x210>)
 8017d46:	4653      	mov	r3, sl
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	dc36      	bgt.n	8017dba <__ieee754_fmod+0xf6>
 8017d4c:	4216      	tst	r6, r2
 8017d4e:	d14f      	bne.n	8017df0 <__ieee754_fmod+0x12c>
 8017d50:	f1bc 0f00 	cmp.w	ip, #0
 8017d54:	d144      	bne.n	8017de0 <__ieee754_fmod+0x11c>
 8017d56:	4a5f      	ldr	r2, [pc, #380]	; (8017ed4 <__ieee754_fmod+0x210>)
 8017d58:	463b      	mov	r3, r7
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	dc3d      	bgt.n	8017dda <__ieee754_fmod+0x116>
 8017d5e:	485e      	ldr	r0, [pc, #376]	; (8017ed8 <__ieee754_fmod+0x214>)
 8017d60:	4281      	cmp	r1, r0
 8017d62:	db4a      	blt.n	8017dfa <__ieee754_fmod+0x136>
 8017d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d6c:	485a      	ldr	r0, [pc, #360]	; (8017ed8 <__ieee754_fmod+0x214>)
 8017d6e:	4282      	cmp	r2, r0
 8017d70:	db57      	blt.n	8017e22 <__ieee754_fmod+0x15e>
 8017d72:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8017d76:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8017d7a:	1a89      	subs	r1, r1, r2
 8017d7c:	1b98      	subs	r0, r3, r6
 8017d7e:	eba4 070e 	sub.w	r7, r4, lr
 8017d82:	2900      	cmp	r1, #0
 8017d84:	d162      	bne.n	8017e4c <__ieee754_fmod+0x188>
 8017d86:	4574      	cmp	r4, lr
 8017d88:	bf38      	it	cc
 8017d8a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	bfa4      	itt	ge
 8017d92:	463c      	movge	r4, r7
 8017d94:	4603      	movge	r3, r0
 8017d96:	ea53 0104 	orrs.w	r1, r3, r4
 8017d9a:	d0c6      	beq.n	8017d2a <__ieee754_fmod+0x66>
 8017d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017da0:	db69      	blt.n	8017e76 <__ieee754_fmod+0x1b2>
 8017da2:	494d      	ldr	r1, [pc, #308]	; (8017ed8 <__ieee754_fmod+0x214>)
 8017da4:	428a      	cmp	r2, r1
 8017da6:	db6c      	blt.n	8017e82 <__ieee754_fmod+0x1be>
 8017da8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017dac:	432b      	orrs	r3, r5
 8017dae:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8017db2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017db6:	4620      	mov	r0, r4
 8017db8:	e7a7      	b.n	8017d0a <__ieee754_fmod+0x46>
 8017dba:	3901      	subs	r1, #1
 8017dbc:	005b      	lsls	r3, r3, #1
 8017dbe:	e7c3      	b.n	8017d48 <__ieee754_fmod+0x84>
 8017dc0:	4945      	ldr	r1, [pc, #276]	; (8017ed8 <__ieee754_fmod+0x214>)
 8017dc2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	ddc0      	ble.n	8017d4c <__ieee754_fmod+0x88>
 8017dca:	3901      	subs	r1, #1
 8017dcc:	005b      	lsls	r3, r3, #1
 8017dce:	e7fa      	b.n	8017dc6 <__ieee754_fmod+0x102>
 8017dd0:	ea4f 5128 	mov.w	r1, r8, asr #20
 8017dd4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017dd8:	e7b8      	b.n	8017d4c <__ieee754_fmod+0x88>
 8017dda:	3a01      	subs	r2, #1
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	e7bc      	b.n	8017d5a <__ieee754_fmod+0x96>
 8017de0:	4a3d      	ldr	r2, [pc, #244]	; (8017ed8 <__ieee754_fmod+0x214>)
 8017de2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	ddb9      	ble.n	8017d5e <__ieee754_fmod+0x9a>
 8017dea:	3a01      	subs	r2, #1
 8017dec:	005b      	lsls	r3, r3, #1
 8017dee:	e7fa      	b.n	8017de6 <__ieee754_fmod+0x122>
 8017df0:	ea4f 522c 	mov.w	r2, ip, asr #20
 8017df4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017df8:	e7b1      	b.n	8017d5e <__ieee754_fmod+0x9a>
 8017dfa:	1a40      	subs	r0, r0, r1
 8017dfc:	281f      	cmp	r0, #31
 8017dfe:	dc0a      	bgt.n	8017e16 <__ieee754_fmod+0x152>
 8017e00:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8017e04:	fa08 f800 	lsl.w	r8, r8, r0
 8017e08:	fa2a f303 	lsr.w	r3, sl, r3
 8017e0c:	ea43 0308 	orr.w	r3, r3, r8
 8017e10:	fa0a f400 	lsl.w	r4, sl, r0
 8017e14:	e7aa      	b.n	8017d6c <__ieee754_fmod+0xa8>
 8017e16:	4b31      	ldr	r3, [pc, #196]	; (8017edc <__ieee754_fmod+0x218>)
 8017e18:	1a5b      	subs	r3, r3, r1
 8017e1a:	fa0a f303 	lsl.w	r3, sl, r3
 8017e1e:	2400      	movs	r4, #0
 8017e20:	e7a4      	b.n	8017d6c <__ieee754_fmod+0xa8>
 8017e22:	1a80      	subs	r0, r0, r2
 8017e24:	281f      	cmp	r0, #31
 8017e26:	dc0a      	bgt.n	8017e3e <__ieee754_fmod+0x17a>
 8017e28:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8017e2c:	fa0c fc00 	lsl.w	ip, ip, r0
 8017e30:	fa27 f606 	lsr.w	r6, r7, r6
 8017e34:	ea46 060c 	orr.w	r6, r6, ip
 8017e38:	fa07 fe00 	lsl.w	lr, r7, r0
 8017e3c:	e79d      	b.n	8017d7a <__ieee754_fmod+0xb6>
 8017e3e:	4e27      	ldr	r6, [pc, #156]	; (8017edc <__ieee754_fmod+0x218>)
 8017e40:	1ab6      	subs	r6, r6, r2
 8017e42:	fa07 f606 	lsl.w	r6, r7, r6
 8017e46:	f04f 0e00 	mov.w	lr, #0
 8017e4a:	e796      	b.n	8017d7a <__ieee754_fmod+0xb6>
 8017e4c:	4574      	cmp	r4, lr
 8017e4e:	bf38      	it	cc
 8017e50:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8017e54:	2800      	cmp	r0, #0
 8017e56:	da05      	bge.n	8017e64 <__ieee754_fmod+0x1a0>
 8017e58:	0fe0      	lsrs	r0, r4, #31
 8017e5a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017e5e:	0064      	lsls	r4, r4, #1
 8017e60:	3901      	subs	r1, #1
 8017e62:	e78b      	b.n	8017d7c <__ieee754_fmod+0xb8>
 8017e64:	ea50 0307 	orrs.w	r3, r0, r7
 8017e68:	f43f af5f 	beq.w	8017d2a <__ieee754_fmod+0x66>
 8017e6c:	0ffb      	lsrs	r3, r7, #31
 8017e6e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8017e72:	007c      	lsls	r4, r7, #1
 8017e74:	e7f4      	b.n	8017e60 <__ieee754_fmod+0x19c>
 8017e76:	0fe1      	lsrs	r1, r4, #31
 8017e78:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017e7c:	0064      	lsls	r4, r4, #1
 8017e7e:	3a01      	subs	r2, #1
 8017e80:	e78c      	b.n	8017d9c <__ieee754_fmod+0xd8>
 8017e82:	1a89      	subs	r1, r1, r2
 8017e84:	2914      	cmp	r1, #20
 8017e86:	dc0a      	bgt.n	8017e9e <__ieee754_fmod+0x1da>
 8017e88:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8017e8c:	fa03 f202 	lsl.w	r2, r3, r2
 8017e90:	40cc      	lsrs	r4, r1
 8017e92:	4322      	orrs	r2, r4
 8017e94:	410b      	asrs	r3, r1
 8017e96:	ea43 0105 	orr.w	r1, r3, r5
 8017e9a:	4610      	mov	r0, r2
 8017e9c:	e735      	b.n	8017d0a <__ieee754_fmod+0x46>
 8017e9e:	291f      	cmp	r1, #31
 8017ea0:	dc07      	bgt.n	8017eb2 <__ieee754_fmod+0x1ee>
 8017ea2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8017ea6:	40cc      	lsrs	r4, r1
 8017ea8:	fa03 f202 	lsl.w	r2, r3, r2
 8017eac:	4322      	orrs	r2, r4
 8017eae:	462b      	mov	r3, r5
 8017eb0:	e7f1      	b.n	8017e96 <__ieee754_fmod+0x1d2>
 8017eb2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8017eb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017eba:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8017ebe:	32e2      	adds	r2, #226	; 0xe2
 8017ec0:	fa43 f202 	asr.w	r2, r3, r2
 8017ec4:	e7f3      	b.n	8017eae <__ieee754_fmod+0x1ea>
 8017ec6:	bf00      	nop
 8017ec8:	7fefffff 	.word	0x7fefffff
 8017ecc:	7ff00000 	.word	0x7ff00000
 8017ed0:	0801b920 	.word	0x0801b920
 8017ed4:	fffffbed 	.word	0xfffffbed
 8017ed8:	fffffc02 	.word	0xfffffc02
 8017edc:	fffffbe2 	.word	0xfffffbe2

08017ee0 <_init>:
 8017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee2:	bf00      	nop
 8017ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ee6:	bc08      	pop	{r3}
 8017ee8:	469e      	mov	lr, r3
 8017eea:	4770      	bx	lr

08017eec <_fini>:
 8017eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eee:	bf00      	nop
 8017ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ef2:	bc08      	pop	{r3}
 8017ef4:	469e      	mov	lr, r3
 8017ef6:	4770      	bx	lr
