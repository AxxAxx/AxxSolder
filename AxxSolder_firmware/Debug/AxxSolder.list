
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b348  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e10  0801b528  0801b528  0002b528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e338  0801e338  0003055c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e338  0801e338  0002e338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e340  0801e340  0003055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e340  0801e340  0002e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e344  0801e344  0002e344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000055c  20000000  0801e348  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c8  20000560  0801e8a4  00030560  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003728  0801e8a4  00033728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003055c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003058c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f5f6  00000000  00000000  000305cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065b2  00000000  00000000  0005fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a0  00000000  00000000  00066178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fea  00000000  00000000  00068b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002897d  00000000  00000000  0006ab02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003574e  00000000  00000000  0009347f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee7af  00000000  00000000  000c8bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c710  00000000  00000000  001b737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c3a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000560 	.word	0x20000560
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b510 	.word	0x0801b510

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000564 	.word	0x20000564
 800021c:	0801b510 	.word	0x0801b510

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800104e:	0adb      	lsrs	r3, r3, #11
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <FlashCheckCRC>:

bool FlashCheckCRC()
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <FlashCheckCRC+0x70>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <FlashCheckCRC+0x70>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3308      	adds	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <FlashCheckCRC+0x70>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	490f      	ldr	r1, [pc, #60]	; (80010d0 <FlashCheckCRC+0x74>)
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <FlashCheckCRC+0x78>)
 8001094:	f008 f90c 	bl	80092b0 <HAL_CRC_Calculate>
 8001098:	4603      	mov	r3, r0
 800109a:	2200      	movs	r2, #0
 800109c:	461c      	mov	r4, r3
 800109e:	4615      	mov	r5, r2
 80010a0:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80010aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bf08      	it	eq
 80010ba:	4290      	cmpeq	r0, r2
 80010bc:	d101      	bne.n	80010c2 <FlashCheckCRC+0x66>
	{
		return true;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <FlashCheckCRC+0x68>
	}
	return false;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	0801f000 	.word	0x0801f000
 80010d4:	20001ea8 	.word	0x20001ea8

080010d8 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
	int i = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <FlashReadToBuf+0x88>)
 80010e4:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 80010e6:	f7ff ffb9 	bl	800105c <FlashCheckCRC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d031      	beq.n	8001154 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010f0:	e025      	b.n	800113e <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e013      	b.n	800112c <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <FlashReadToBuf+0x8c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d208      	bcs.n	8001126 <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	1d39      	adds	r1, r7, #4
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	440a      	add	r2, r1
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <FlashReadToBuf+0x90>)
 8001124:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b07      	cmp	r3, #7
 8001130:	dde8      	ble.n	8001104 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3308      	adds	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3308      	adds	r3, #8
 800113c:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <FlashReadToBuf+0x8c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d203      	bcs.n	8001150 <FlashReadToBuf+0x78>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <FlashReadToBuf+0x94>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d3d0      	bcc.n	80010f2 <FlashReadToBuf+0x1a>
		}
		return true;
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <FlashReadToBuf+0x7e>
	}
	return false;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801f000 	.word	0x0801f000
 8001164:	20000000 	.word	0x20000000
 8001168:	20000580 	.word	0x20000580
 800116c:	0801ffff 	.word	0x0801ffff

08001170 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 8001178:	f7ff ffae 	bl	80010d8 <FlashReadToBuf>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <FlashRead+0x26>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FlashRead+0x30>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	2350      	movs	r3, #80	; 0x50
 800118c:	461a      	mov	r2, r3
 800118e:	f016 fc80 	bl	8017a92 <memcpy>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <FlashRead+0x28>
	}
	return false;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000580 	.word	0x20000580

080011a4 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <FlashWrite+0x170>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 80011c2:	4b55      	ldr	r3, [pc, #340]	; (8001318 <FlashWrite+0x174>)
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 80011da:	f7ff ff7d 	bl	80010d8 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <FlashWrite+0x178>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	2350      	movs	r3, #80	; 0x50
 80011e8:	461a      	mov	r2, r3
 80011ea:	f016 fc52 	bl	8017a92 <memcpy>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <FlashWrite+0x17c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4949      	ldr	r1, [pc, #292]	; (800131c <FlashWrite+0x178>)
 80011f6:	484b      	ldr	r0, [pc, #300]	; (8001324 <FlashWrite+0x180>)
 80011f8:	f008 f85a 	bl	80092b0 <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2200      	movs	r2, #0
 8001200:	461c      	mov	r4, r3
 8001202:	4615      	mov	r5, r2
 8001204:	e9c7 4506 	strd	r4, r5, [r7, #24]

	HAL_FLASH_Unlock();
 8001208:	f008 fd3a 	bl	8009c80 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <FlashWrite+0x184>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <FlashWrite+0x188>)
 8001216:	f7ff ff13 	bl	8001040 <GetPage>
 800121a:	4604      	mov	r4, r0
 800121c:	483e      	ldr	r0, [pc, #248]	; (8001318 <FlashWrite+0x174>)
 800121e:	f7ff ff0f 	bl	8001040 <GetPage>
 8001222:	4603      	mov	r3, r0
 8001224:	1ae3      	subs	r3, r4, r3
 8001226:	3301      	adds	r3, #1
 8001228:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <FlashWrite+0x18c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <FlashWrite+0x18c>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 8001236:	4838      	ldr	r0, [pc, #224]	; (8001318 <FlashWrite+0x174>)
 8001238:	f7ff ff02 	bl	8001040 <GetPage>
 800123c:	4603      	mov	r3, r0
 800123e:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <FlashWrite+0x18c>)
 8001240:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <FlashWrite+0x18c>)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4838      	ldr	r0, [pc, #224]	; (8001330 <FlashWrite+0x18c>)
 8001250:	f008 fe02 	bl	8009e58 <HAL_FLASHEx_Erase>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d152      	bne.n	8001300 <FlashWrite+0x15c>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 800125a:	e04b      	b.n	80012f4 <FlashWrite+0x150>
		{
			for (int j = 0; j < 8; j++)
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	e01b      	b.n	800129a <FlashWrite+0xf6>
			{
				if (j + i < bufLength)
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	4413      	add	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <FlashWrite+0x17c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d20a      	bcs.n	8001288 <FlashWrite+0xe4>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8001272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	441a      	add	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	440b      	add	r3, r1
 8001280:	4926      	ldr	r1, [pc, #152]	; (800131c <FlashWrite+0x178>)
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e005      	b.n	8001294 <FlashWrite+0xf0>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f107 0208 	add.w	r2, r7, #8
 800128e:	4413      	add	r3, r2
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b07      	cmp	r3, #7
 800129e:	dde0      	ble.n	8001262 <FlashWrite+0xbe>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <FlashWrite+0x17c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d20f      	bcs.n	80012ca <FlashWrite+0x126>
 80012aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012b0:	2000      	movs	r0, #0
 80012b2:	f008 fc79 	bl	8009ba8 <HAL_FLASH_Program>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d106      	bne.n	80012ca <FlashWrite+0x126>
			{
				Address = Address + 8;
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	3308      	adds	r3, #8
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	3308      	adds	r3, #8
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c8:	e014      	b.n	80012f4 <FlashWrite+0x150>
			}
			else if (i >= bufLength)
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <FlashWrite+0x17c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d314      	bcc.n	80012fe <FlashWrite+0x15a>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 80012d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012da:	2000      	movs	r0, #0
 80012dc:	f008 fc64 	bl	8009ba8 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <FlashWrite+0x150>
				{
					HAL_FLASH_Lock();
 80012e6:	f008 fced 	bl	8009cc4 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <FlashWrite+0x170>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
					return true;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00b      	b.n	800130c <FlashWrite+0x168>
		while (Address < FLASH_USER_END_ADDR)
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <FlashWrite+0x188>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d3af      	bcc.n	800125c <FlashWrite+0xb8>
 80012fc:	e000      	b.n	8001300 <FlashWrite+0x15c>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012fe:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001300:	f008 fce0 	bl	8009cc4 <HAL_FLASH_Lock>

	flashWriting = 0;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <FlashWrite+0x170>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
	return false;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	2000057c 	.word	0x2000057c
 8001318:	0801f000 	.word	0x0801f000
 800131c:	20000580 	.word	0x20000580
 8001320:	20000000 	.word	0x20000000
 8001324:	20001ea8 	.word	0x20001ea8
 8001328:	40022000 	.word	0x40022000
 800132c:	0801ffff 	.word	0x0801ffff
 8001330:	200005d0 	.word	0x200005d0

08001334 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0b04 	vstr	d0, [r7, #16]
 800133e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001342:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800134a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134e:	f7ff fbed 	bl	8000b2c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <clamp+0x2a>
 8001358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135c:	e001      	b.n	8001362 <clamp+0x2e>
 800135e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001362:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800136a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136e:	f7ff fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <clamp+0x4a>
 8001378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800137c:	e001      	b.n	8001382 <clamp+0x4e>
 800137e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001382:	ec43 2b17 	vmov	d7, r2, r3
}
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <get_mean_ADC_reading_indexed>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
double get_mean_ADC_reading_indexed(uint8_t index){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e012      	b.n	80013d2 <get_mean_ADC_reading_indexed+0x3e>
		ADC_filter_mean += ADC1_BUF[n];
 80013ac:	4a16      	ldr	r2, [pc, #88]	; (8001408 <get_mean_ADC_reading_indexed+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC1_BUF_LEN;n=n+3){
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3303      	adds	r3, #3
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dde9      	ble.n	80013ac <get_mean_ADC_reading_indexed+0x18>
	}
	return ADC_filter_mean/(ADC1_BUF_LEN/3.0);
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <get_mean_ADC_reading_indexed+0x70>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__aeabi_f2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <get_mean_ADC_reading_indexed+0x78>)
 80013e8:	f7ff fa58 	bl	800089c <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80013f4:	eeb0 0a47 	vmov.f32	s0, s14
 80013f8:	eef0 0a67 	vmov.f32	s1, s15
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000650 	.word	0x20000650
 8001408:	20000654 	.word	0x20000654
 800140c:	40330000 	.word	0x40330000

08001410 <get_mcu_temp>:

void get_mcu_temp(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((get_mean_ADC_reading_indexed(2) * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 8001414:	2002      	movs	r0, #2
 8001416:	f7ff ffbd 	bl	8001394 <get_mean_ADC_reading_indexed>
 800141a:	ec51 0b10 	vmov	r0, r1, d0
 800141e:	a328      	add	r3, pc, #160	; (adr r3, 80014c0 <get_mcu_temp+0xb0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f910 	bl	8000648 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <get_mcu_temp+0xa0>)
 8001436:	f7ff fa31 	bl	800089c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	a317      	add	r3, pc, #92	; (adr r3, 80014a0 <get_mcu_temp+0x90>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7fe ff46 	bl	80002d8 <__aeabi_dsub>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <get_mcu_temp+0x98>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff fa1f 	bl	800089c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <get_mcu_temp+0xa4>)
 800146c:	f7fe ff36 	bl	80002dc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fbbe 	bl	8000bf8 <__aeabi_d2uiz>
 800147c:	4603      	mov	r3, r0
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <get_mcu_temp+0xa8>)
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fb9b 	bl	8004bbc <Moving_Average_Compute>
 8001486:	ec53 2b10 	vmov	r2, r3, d0
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbd3 	bl	8000c38 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <get_mcu_temp+0xac>)
 8001496:	61d3      	str	r3, [r2, #28]
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	851eb852 	.word	0x851eb852
 80014a4:	3fe851eb 	.word	0x3fe851eb
 80014a8:	47ae147b 	.word	0x47ae147b
 80014ac:	3f647ae1 	.word	0x3f647ae1
 80014b0:	40b00000 	.word	0x40b00000
 80014b4:	40390000 	.word	0x40390000
 80014b8:	20000a68 	.word	0x20000a68
 80014bc:	20000038 	.word	0x20000038
 80014c0:	66666666 	.word	0x66666666
 80014c4:	400a6666 	.word	0x400a6666

080014c8 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	02db      	lsls	r3, r3, #11
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	b29b      	uxth	r3, r3
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <change_state>:

void change_state(mainstates new_state){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <change_state+0x58>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <change_state+0x5c>)
 8001504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	active_state = new_state;
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <change_state+0x58>)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	7013      	strb	r3, [r2, #0]
	if((active_state == RUN) && (flash_values.GPIO4_ON_at_run == 1)){
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <change_state+0x58>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <change_state+0x44>
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <change_state+0x60>)
 8001518:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <change_state+0x64>)
 8001522:	f7ff faf9 	bl	8000b18 <__aeabi_dcmpeq>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <change_state+0x44>
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2104      	movs	r1, #4
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <change_state+0x68>)
 8001532:	f008 ff4f 	bl	800a3d4 <HAL_GPIO_WritePin>
 8001536:	e005      	b.n	8001544 <change_state+0x50>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, USR_4_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <change_state+0x68>)
 800153e:	f008 ff49 	bl	800a3d4 <HAL_GPIO_WritePin>
	}
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000001d 	.word	0x2000001d
 8001550:	20000038 	.word	0x20000038
 8001554:	200006d0 	.word	0x200006d0
 8001558:	3ff00000 	.word	0x3ff00000
 800155c:	48000400 	.word	0x48000400

08001560 <get_bus_voltage>:

void get_bus_voltage(){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading_indexed(0), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff15 	bl	8001394 <get_mean_ADC_reading_indexed>
 800156a:	ec53 2b10 	vmov	r2, r3, d0
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb41 	bl	8000bf8 <__aeabi_d2uiz>
 8001576:	4603      	mov	r3, r0
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <get_bus_voltage+0x50>)
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fb1e 	bl	8004bbc <Moving_Average_Compute>
 8001580:	ec51 0b10 	vmov	r0, r1, d0
 8001584:	a308      	add	r3, pc, #32	; (adr r3, 80015a8 <get_bus_voltage+0x48>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7ff f85d 	bl	8000648 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb4f 	bl	8000c38 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <get_bus_voltage+0x54>)
 800159e:	6113      	str	r3, [r2, #16]
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	f3af 8000 	nop.w
 80015a8:	ada68bd9 	.word	0xada68bd9
 80015ac:	3f813656 	.word	0x3f813656
 80015b0:	20000d94 	.word	0x20000d94
 80015b4:	20000038 	.word	0x20000038

080015b8 <get_heater_current>:

void get_heater_current(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	sensor_values.heater_current = Moving_Average_Compute(current_raw, &current_filterStruct)*CURRENT_COMPENSATION;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <get_heater_current+0x40>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <get_heater_current+0x44>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fafa 	bl	8004bbc <Moving_Average_Compute>
 80015c8:	ec51 0b10 	vmov	r0, r1, d0
 80015cc:	a308      	add	r3, pc, #32	; (adr r3, 80015f0 <get_heater_current+0x38>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f839 	bl	8000648 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb2b 	bl	8000c38 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <get_heater_current+0x48>)
 80015e6:	6153      	str	r3, [r2, #20]
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f3af 8000 	nop.w
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	200006c6 	.word	0x200006c6
 80015fc:	200010c0 	.word	0x200010c0
 8001600:	20000038 	.word	0x20000038
 8001604:	00000000 	.word	0x00000000

08001608 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(get_mean_ADC_reading_indexed(1), &thermocouple_temperature_filter_struct); /* Moving average filter */
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fec0 	bl	8001394 <get_mean_ADC_reading_indexed>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff faec 	bl	8000bf8 <__aeabi_d2uiz>
 8001620:	4603      	mov	r3, r0
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <get_thermocouple_temperature+0x1f8>)
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fac9 	bl	8004bbc <Moving_Average_Compute>
 800162a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d12e      	bne.n	8001694 <get_thermocouple_temperature+0x8c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163e:	f7ff f803 	bl	8000648 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a357      	add	r3, pc, #348	; (adr r3, 80017a8 <get_thermocouple_temperature+0x1a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe fffa 	bl	8000648 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4614      	mov	r4, r2
 800165a:	461d      	mov	r5, r3
 800165c:	a354      	add	r3, pc, #336	; (adr r3, 80017b0 <get_thermocouple_temperature+0x1a8>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001666:	f7fe ffef 	bl	8000648 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe33 	bl	80002dc <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	a34e      	add	r3, pc, #312	; (adr r3, 80017b8 <get_thermocouple_temperature+0x1b0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe fe2a 	bl	80002dc <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	495e      	ldr	r1, [pc, #376]	; (8001808 <get_thermocouple_temperature+0x200>)
 800168e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001692:	e064      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == T245){
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d12e      	bne.n	80016fa <get_thermocouple_temperature+0xf2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 800169c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a4:	f7fe ffd0 	bl	8000648 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a343      	add	r3, pc, #268	; (adr r3, 80017c0 <get_thermocouple_temperature+0x1b8>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffc7 	bl	8000648 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	a341      	add	r3, pc, #260	; (adr r3, 80017c8 <get_thermocouple_temperature+0x1c0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ffbc 	bl	8000648 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fe00 	bl	80002dc <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a33a      	add	r3, pc, #232	; (adr r3, 80017d0 <get_thermocouple_temperature+0x1c8>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdf7 	bl	80002dc <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4945      	ldr	r1, [pc, #276]	; (8001808 <get_thermocouple_temperature+0x200>)
 80016f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016f8:	e031      	b.n	800175e <get_thermocouple_temperature+0x156>
	}
	else if(handle == NT115){
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <get_thermocouple_temperature+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12d      	bne.n	800175e <get_thermocouple_temperature+0x156>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_NT115 + TC_temp*TC_COMPENSATION_X1_NT115 + TC_COMPENSATION_X0_NT115;
 8001702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800170a:	f7fe ff9d 	bl	8000648 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	a330      	add	r3, pc, #192	; (adr r3, 80017d8 <get_thermocouple_temperature+0x1d0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff94 	bl	8000648 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	a32d      	add	r3, pc, #180	; (adr r3, 80017e0 <get_thermocouple_temperature+0x1d8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f7fe ff89 	bl	8000648 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe fdcd 	bl	80002dc <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a327      	add	r3, pc, #156	; (adr r3, 80017e8 <get_thermocouple_temperature+0x1e0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <get_thermocouple_temperature+0x200>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001760:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	; (800180c <get_thermocouple_temperature+0x204>)
 8001766:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800176a:	f7fe fdb7 	bl	80002dc <__adddf3>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4925      	ldr	r1, [pc, #148]	; (8001808 <get_thermocouple_temperature+0x200>)
 8001774:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <get_thermocouple_temperature+0x200>)
 800177a:	ed93 7b02 	vldr	d7, [r3, #8]
 800177e:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80017f0 <get_thermocouple_temperature+0x1e8>
 8001782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80017f8 <get_thermocouple_temperature+0x1f0>
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	eef0 0a67 	vmov.f32	s1, s15
 800178e:	f7ff fdd1 	bl	8001334 <clamp>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	eef0 7a60 	vmov.f32	s15, s1
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <get_thermocouple_temperature+0x200>)
 800179c:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	92e63abf 	.word	0x92e63abf
 80017ac:	3ee1b6ee 	.word	0x3ee1b6ee
 80017b0:	1a8bcf67 	.word	0x1a8bcf67
 80017b4:	3fd3ea38 	.word	0x3fd3ea38
 80017b8:	ef80bf90 	.word	0xef80bf90
 80017bc:	403810db 	.word	0x403810db
 80017c0:	82fead10 	.word	0x82fead10
 80017c4:	3ea7dc92 	.word	0x3ea7dc92
 80017c8:	c53ce03f 	.word	0xc53ce03f
 80017cc:	3fbd94aa 	.word	0x3fbd94aa
 80017d0:	34da2134 	.word	0x34da2134
 80017d4:	403a2648 	.word	0x403a2648
 80017d8:	202b3c5a 	.word	0x202b3c5a
 80017dc:	3f0edf88 	.word	0x3f0edf88
 80017e0:	15fb4706 	.word	0x15fb4706
 80017e4:	3fda2f75 	.word	0x3fda2f75
 80017e8:	53430524 	.word	0x53430524
 80017ec:	40381413 	.word	0x40381413
 80017f0:	00000000 	.word	0x00000000
 80017f4:	408f3800 	.word	0x408f3800
	...
 8001800:	2000073c 	.word	0x2000073c
 8001804:	200005e0 	.word	0x200005e0
 8001808:	20000038 	.word	0x20000038
 800180c:	200006d0 	.word	0x200006d0

08001810 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <set_heater_duty+0x48>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.3);
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fea5 	bl	8000574 <__aeabi_i2d>
 800182a:	a309      	add	r3, pc, #36	; (adr r3, 8001850 <set_heater_duty+0x40>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff0a 	bl	8000648 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <set_heater_duty+0x48>)
 800183a:	680c      	ldr	r4, [r1, #0]
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9da 	bl	8000bf8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	33333333 	.word	0x33333333
 8001854:	3fd33333 	.word	0x3fd33333
 8001858:	20001fe4 	.word	0x20001fe4
 800185c:	00000000 	.word	0x00000000

08001860 <heater_on>:

/* Update the duty cycle of timer controlling the heater PWM */
void heater_on(){
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <heater_on+0xa0>)
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a31e      	add	r3, pc, #120	; (adr r3, 80018e8 <heater_on+0x88>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fee8 	bl	8000648 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <heater_on+0xa0>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe87 	bl	8000598 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7ff f803 	bl	800089c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <heater_on+0xa4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fed0 	bl	8000648 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <heater_on+0xa8>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <heater_on+0xa8>)
 80018b4:	ed93 7b00 	vldr	d7, [r3]
 80018b8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80018f0 <heater_on+0x90>
 80018bc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80018f8 <heater_on+0x98>
 80018c0:	eeb0 0a47 	vmov.f32	s0, s14
 80018c4:	eef0 0a67 	vmov.f32	s1, s15
 80018c8:	f7ff fd34 	bl	8001334 <clamp>
 80018cc:	ec53 2b10 	vmov	r2, r3, d0
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f990 	bl	8000bf8 <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff97 	bl	8001810 <set_heater_duty>
}
 80018e2:	bf00      	nop
 80018e4:	bdb0      	pop	{r4, r5, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	a5e353f8 	.word	0xa5e353f8
 80018ec:	3fc0c49b 	.word	0x3fc0c49b
 80018f0:	00000000 	.word	0x00000000
 80018f4:	407f4000 	.word	0x407f4000
	...
 8001900:	20000038 	.word	0x20000038
 8001904:	20000720 	.word	0x20000720
 8001908:	20000730 	.word	0x20000730

0800190c <heater_off>:

/* Disable the duty cycle of timer controlling the heater PWM*/
void heater_off(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	set_heater_duty(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ff7d 	bl	8001810 <set_heater_duty>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	0000      	movs	r0, r0
 800191c:	0000      	movs	r0, r0
	...

08001920 <settings_menue>:

void settings_menue(){
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	b08d      	sub	sp, #52	; 0x34
 8001926:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001928:	2120      	movs	r1, #32
 800192a:	48c7      	ldr	r0, [pc, #796]	; (8001c48 <settings_menue+0x328>)
 800192c:	f008 fd3a 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 831c 	bne.w	8001f70 <settings_menue+0x650>
		if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001938:	4bc4      	ldr	r3, [pc, #784]	; (8001c4c <settings_menue+0x32c>)
 800193a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f7ff f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10b      	bne.n	8001968 <settings_menue+0x48>
 8001950:	4bbe      	ldr	r3, [pc, #760]	; (8001c4c <settings_menue+0x32c>)
 8001952:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	f7ff f8db 	bl	8000b18 <__aeabi_dcmpeq>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d026      	beq.n	80019b6 <settings_menue+0x96>
			LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001968:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800196c:	f7ff fdac 	bl	80014c8 <RGB_to_BRG>
 8001970:	4603      	mov	r3, r0
 8001972:	461c      	mov	r4, r3
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fda7 	bl	80014c8 <RGB_to_BRG>
 800197a:	4603      	mov	r3, r0
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9400      	str	r4, [sp, #0]
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <settings_menue+0x330>)
 8001982:	4ab4      	ldr	r2, [pc, #720]	; (8001c54 <settings_menue+0x334>)
 8001984:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001988:	2000      	movs	r0, #0
 800198a:	f004 febb 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 800198e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001992:	f7ff fd99 	bl	80014c8 <RGB_to_BRG>
 8001996:	4603      	mov	r3, r0
 8001998:	461c      	mov	r4, r3
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff fd94 	bl	80014c8 <RGB_to_BRG>
 80019a0:	4603      	mov	r3, r0
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	9400      	str	r4, [sp, #0]
 80019a6:	4baa      	ldr	r3, [pc, #680]	; (8001c50 <settings_menue+0x330>)
 80019a8:	4aab      	ldr	r2, [pc, #684]	; (8001c58 <settings_menue+0x338>)
 80019aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ae:	2096      	movs	r0, #150	; 0x96
 80019b0:	f004 fea8 	bl	8006704 <LCD_PutStr>
 80019b4:	e023      	b.n	80019fe <settings_menue+0xde>
		}
		else{
			LCD_PutStr(0, 215, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019b6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019ba:	f7ff fd85 	bl	80014c8 <RGB_to_BRG>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fd80 	bl	80014c8 <RGB_to_BRG>
 80019c8:	4603      	mov	r3, r0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <settings_menue+0x330>)
 80019d0:	4aa0      	ldr	r2, [pc, #640]	; (8001c54 <settings_menue+0x334>)
 80019d2:	21d7      	movs	r1, #215	; 0xd7
 80019d4:	2000      	movs	r0, #0
 80019d6:	f004 fe95 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(150, 215, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 80019da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80019de:	f7ff fd73 	bl	80014c8 <RGB_to_BRG>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461c      	mov	r4, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fd6e 	bl	80014c8 <RGB_to_BRG>
 80019ec:	4603      	mov	r3, r0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	4b97      	ldr	r3, [pc, #604]	; (8001c50 <settings_menue+0x330>)
 80019f4:	4a98      	ldr	r2, [pc, #608]	; (8001c58 <settings_menue+0x338>)
 80019f6:	21d7      	movs	r1, #215	; 0xd7
 80019f8:	2096      	movs	r0, #150	; 0x96
 80019fa:	f004 fe83 	bl	8006704 <LCD_PutStr>
		}


		TIM2->CNT = 1000;
 80019fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8001a22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a26:	f7ff fd4f 	bl	80014c8 <RGB_to_BRG>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fd4a 	bl	80014c8 <RGB_to_BRG>
 8001a34:	4603      	mov	r3, r0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	9400      	str	r4, [sp, #0]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <settings_menue+0x330>)
 8001a3c:	4a87      	ldr	r2, [pc, #540]	; (8001c5c <settings_menue+0x33c>)
 8001a3e:	210c      	movs	r1, #12
 8001a40:	203c      	movs	r0, #60	; 0x3c
 8001a42:	f004 fe5f 	bl	8006704 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8001a46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a4a:	f7ff fd3d 	bl	80014c8 <RGB_to_BRG>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2328      	movs	r3, #40	; 0x28
 8001a54:	22f0      	movs	r2, #240	; 0xf0
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f004 fe15 	bl	8006688 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8001a5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a62:	f7ff fd31 	bl	80014c8 <RGB_to_BRG>
 8001a66:	4603      	mov	r3, r0
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2329      	movs	r3, #41	; 0x29
 8001a6c:	22f0      	movs	r2, #240	; 0xf0
 8001a6e:	2129      	movs	r1, #41	; 0x29
 8001a70:	2000      	movs	r0, #0
 8001a72:	f004 fe09 	bl	8006688 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001a76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001a7a:	f7ff fd25 	bl	80014c8 <RGB_to_BRG>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	232a      	movs	r3, #42	; 0x2a
 8001a84:	22f0      	movs	r2, #240	; 0xf0
 8001a86:	212a      	movs	r1, #42	; 0x2a
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f004 fdfd 	bl	8006688 <LCD_DrawLine>

		HAL_Delay(500);
 8001a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a92:	f004 ff51 	bl	8006938 <HAL_Delay>
		while(menu_active == 1){
 8001a96:	e267      	b.n	8001f68 <settings_menue+0x648>
			if(menue_level == 0){
 8001a98:	8c3b      	ldrh	r3, [r7, #32]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d120      	bne.n	8001ae0 <settings_menue+0x1c0>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 8001a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd55 	bl	8000554 <__aeabi_ui2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	ed9f 2b60 	vldr	d2, [pc, #384]	; 8001c30 <settings_menue+0x310>
 8001ab2:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8001c38 <settings_menue+0x318>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f7ff fc3b 	bl	8001334 <clamp>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f895 	bl	8000bf8 <__aeabi_d2uiz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 8001ae0:	8c3b      	ldrh	r3, [r7, #32]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 8091 	bne.w	8001c0a <settings_menue+0x2ea>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001ae8:	69b8      	ldr	r0, [r7, #24]
 8001aea:	f7fe fd55 	bl	8000598 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_ui2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <settings_menue+0x340>)
 8001b04:	f7fe fbe8 	bl	80002d8 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f892 	bl	8000c38 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd3e 	bl	8000598 <__aeabi_f2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b24:	f7fe feba 	bl	800089c <__aeabi_ddiv>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4690      	mov	r8, r2
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001b54:	00c9      	lsls	r1, r1, #3
 8001b56:	483d      	ldr	r0, [pc, #244]	; (8001c4c <settings_menue+0x32c>)
 8001b58:	180c      	adds	r4, r1, r0
 8001b5a:	4640      	mov	r0, r8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	f7fe fbbb 	bl	80002d8 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c4 2300 	strd	r2, r3, [r4]
				if ((menu_cursor_position == 5) || (menu_cursor_position == 8)){
 8001b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d002      	beq.n	8001b76 <settings_menue+0x256>
 8001b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d12c      	bne.n	8001bd0 <settings_menue+0x2b0>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <settings_menue+0x32c>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f80f 	bl	8000ba8 <__aeabi_d2iz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bfb8      	it	lt
 8001b90:	425b      	neglt	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcee 	bl	8000574 <__aeabi_i2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8001c40 <settings_menue+0x320>
 8001ba0:	ec43 2b10 	vmov	d0, r2, r3
 8001ba4:	f019 fb30 	bl	801b208 <fmod>
 8001ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8001bac:	eef0 7a60 	vmov.f32	s15, s1
 8001bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <settings_menue+0x32c>)
 8001bb6:	189c      	adds	r4, r3, r2
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	f019 fb50 	bl	801b264 <round>
 8001bc4:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc8:	eef0 7a60 	vmov.f32	s15, s1
 8001bcc:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d019      	beq.n	8001c0a <settings_menue+0x2ea>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <settings_menue+0x32c>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ffdf 	bl	8000ba8 <__aeabi_d2iz>
 8001bea:	4603      	mov	r3, r0
 8001bec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4914      	ldr	r1, [pc, #80]	; (8001c4c <settings_menue+0x32c>)
 8001bfa:	185c      	adds	r4, r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f7fe fcb9 	bl	8000574 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c0c:	2b0c      	cmp	r3, #12
 8001c0e:	d906      	bls.n	8001c1e <settings_menue+0x2fe>
							menu_cursor_position = menu_length-1;
 8001c10:	230c      	movs	r3, #12
 8001c12:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 8001c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 6){
 8001c1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d91f      	bls.n	8001c64 <settings_menue+0x344>
				menue_start = menu_cursor_position-6;
 8001c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c26:	3b06      	subs	r3, #6
 8001c28:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c2a:	e01d      	b.n	8001c68 <settings_menue+0x348>
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	412e8480 	.word	0x412e8480
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	408f4000 	.word	0x408f4000
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40000000 	.word	0x40000000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	200006d0 	.word	0x200006d0
 8001c50:	0801c728 	.word	0x0801c728
 8001c54:	0801b528 	.word	0x0801b528
 8001c58:	0801b534 	.word	0x0801b534
 8001c5c:	0801b53c 	.word	0x0801b53c
 8001c60:	408f4000 	.word	0x408f4000
			}
			else{
				menue_start = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4891      	ldr	r0, [pc, #580]	; (8001eb0 <settings_menue+0x590>)
 8001c6c:	f008 fb9a 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d127      	bne.n	8001cc6 <settings_menue+0x3a6>
 8001c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d824      	bhi.n	8001cc6 <settings_menue+0x3a6>
				if(menue_level == 0){
 8001c7c:	8c3b      	ldrh	r3, [r7, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <settings_menue+0x37e>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4a8b      	ldr	r2, [pc, #556]	; (8001eb4 <settings_menue+0x594>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ffd1 	bl	8000c38 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 8001c9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 8001c9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <settings_menue+0x392>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ca6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001caa:	005a      	lsls	r2, r3, #1
 8001cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001cb2:	8c3b      	ldrh	r3, [r7, #32]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bfb8      	it	lt
 8001cba:	425b      	neglt	r3, r3
 8001cbc:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001cbe:	20c8      	movs	r0, #200	; 0xc8
 8001cc0:	f004 fe3a 	bl	8006938 <HAL_Delay>
 8001cc4:	e02e      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	4879      	ldr	r0, [pc, #484]	; (8001eb0 <settings_menue+0x590>)
 8001cca:	f008 fb6b 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <settings_menue+0x3c0>
 8001cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d102      	bne.n	8001ce0 <settings_menue+0x3c0>
				menu_active = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	83fb      	strh	r3, [r7, #30]
 8001cde:	e021      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4873      	ldr	r0, [pc, #460]	; (8001eb0 <settings_menue+0x590>)
 8001ce4:	f008 fb5e 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <settings_menue+0x3e0>
 8001cee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cf0:	2b0b      	cmp	r3, #11
 8001cf2:	d105      	bne.n	8001d00 <settings_menue+0x3e0>
				menu_active = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001cf8:	486e      	ldr	r0, [pc, #440]	; (8001eb4 <settings_menue+0x594>)
 8001cfa:	f7ff fa53 	bl	80011a4 <FlashWrite>
 8001cfe:	e011      	b.n	8001d24 <settings_menue+0x404>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001d00:	2120      	movs	r1, #32
 8001d02:	486b      	ldr	r0, [pc, #428]	; (8001eb0 <settings_menue+0x590>)
 8001d04:	f008 fb4e 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10a      	bne.n	8001d24 <settings_menue+0x404>
 8001d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d10:	2b0a      	cmp	r3, #10
 8001d12:	d107      	bne.n	8001d24 <settings_menue+0x404>
				flash_values = default_flash_values;
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <settings_menue+0x594>)
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <settings_menue+0x598>)
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2350      	movs	r3, #80	; 0x50
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f015 feb7 	bl	8017a92 <memcpy>
			}

			for(int i = menue_start;i<=menue_start+6;i++){
 8001d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e118      	b.n	8001f5c <settings_menue+0x63c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d12b      	bne.n	8001d8a <settings_menue+0x46a>
 8001d32:	8c3b      	ldrh	r3, [r7, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d128      	bne.n	8001d8a <settings_menue+0x46a>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001d38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	461a      	mov	r2, r3
 8001d48:	0091      	lsls	r1, r2, #2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	332d      	adds	r3, #45	; 0x2d
 8001d54:	b29c      	uxth	r4, r3
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <settings_menue+0x59c>)
 8001d62:	189d      	adds	r5, r3, r2
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fbaf 	bl	80014c8 <RGB_to_BRG>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461e      	mov	r6, r3
 8001d6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d72:	f7ff fba9 	bl	80014c8 <RGB_to_BRG>
 8001d76:	4603      	mov	r3, r0
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	9600      	str	r6, [sp, #0]
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <settings_menue+0x5a0>)
 8001d7e:	462a      	mov	r2, r5
 8001d80:	4621      	mov	r1, r4
 8001d82:	2005      	movs	r0, #5
 8001d84:	f004 fcbe 	bl	8006704 <LCD_PutStr>
 8001d88:	e027      	b.n	8001dda <settings_menue+0x4ba>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	0091      	lsls	r1, r2, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4413      	add	r3, r2
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	332d      	adds	r3, #45	; 0x2d
 8001da6:	b29c      	uxth	r4, r3
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <settings_menue+0x59c>)
 8001db4:	189d      	adds	r5, r3, r2
 8001db6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dba:	f7ff fb85 	bl	80014c8 <RGB_to_BRG>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461e      	mov	r6, r3
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fb80 	bl	80014c8 <RGB_to_BRG>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	9600      	str	r6, [sp, #0]
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <settings_menue+0x5a0>)
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f004 fc95 	bl	8006704 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2214      	movs	r2, #20
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f015 fdd6 	bl	8017992 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <settings_menue+0x594>)
 8001dec:	4413      	add	r3, r2
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	4638      	mov	r0, r7
 8001df4:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <settings_menue+0x5a4>)
 8001df6:	f015 fd69 	bl	80178cc <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <settings_menue+0x594>)
 8001e00:	4413      	add	r3, r2
 8001e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ec8 <settings_menue+0x5a8>)
 8001e0c:	f7fe fe8e 	bl	8000b2c <__aeabi_dcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <settings_menue+0x508>
					str[1] = 32;
 8001e16:	2320      	movs	r3, #32
 8001e18:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001e22:	2320      	movs	r3, #32
 8001e24:	713b      	strb	r3, [r7, #4]
 8001e26:	e011      	b.n	8001e4c <settings_menue+0x52c>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4a21      	ldr	r2, [pc, #132]	; (8001eb4 <settings_menue+0x594>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e34:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <settings_menue+0x588>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fe77 	bl	8000b2c <__aeabi_dcmplt>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <settings_menue+0x52c>
					str[2] = 32;
 8001e44:	2320      	movs	r3, #32
 8001e46:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b09      	cmp	r3, #9
 8001e50:	dc5d      	bgt.n	8001f0e <settings_menue+0x5ee>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d138      	bne.n	8001ecc <settings_menue+0x5ac>
 8001e5a:	8c3b      	ldrh	r3, [r7, #32]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d135      	bne.n	8001ecc <settings_menue+0x5ac>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	0091      	lsls	r1, r2, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	4413      	add	r3, r2
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	332d      	adds	r3, #45	; 0x2d
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fb22 	bl	80014c8 <RGB_to_BRG>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461d      	mov	r5, r3
 8001e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e8c:	f7ff fb1c 	bl	80014c8 <RGB_to_BRG>
 8001e90:	4603      	mov	r3, r0
 8001e92:	463a      	mov	r2, r7
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9500      	str	r5, [sp, #0]
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <settings_menue+0x5a0>)
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	20c8      	movs	r0, #200	; 0xc8
 8001e9e:	f004 fc31 	bl	8006704 <LCD_PutStr>
 8001ea2:	e034      	b.n	8001f0e <settings_menue+0x5ee>
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	4058e000 	.word	0x4058e000
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	200006d0 	.word	0x200006d0
 8001eb8:	20000088 	.word	0x20000088
 8001ebc:	200000d8 	.word	0x200000d8
 8001ec0:	0801c728 	.word	0x0801c728
 8001ec4:	0801b548 	.word	0x0801b548
 8001ec8:	40230000 	.word	0x40230000
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	0091      	lsls	r1, r2, #2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	332d      	adds	r3, #45	; 0x2d
 8001ee8:	b29c      	uxth	r4, r3
 8001eea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eee:	f7ff faeb 	bl	80014c8 <RGB_to_BRG>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff fae6 	bl	80014c8 <RGB_to_BRG>
 8001efc:	4603      	mov	r3, r0
 8001efe:	463a      	mov	r2, r7
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	9500      	str	r5, [sp, #0]
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <settings_menue+0x65c>)
 8001f06:	4621      	mov	r1, r4
 8001f08:	20c8      	movs	r0, #200	; 0xc8
 8001f0a:	f004 fbfb 	bl	8006704 <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	dd20      	ble.n	8001f56 <settings_menue+0x636>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	461a      	mov	r2, r3
 8001f24:	0091      	lsls	r1, r2, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	332d      	adds	r3, #45	; 0x2d
 8001f30:	b29c      	uxth	r4, r3
 8001f32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f36:	f7ff fac7 	bl	80014c8 <RGB_to_BRG>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff fac2 	bl	80014c8 <RGB_to_BRG>
 8001f44:	4603      	mov	r3, r0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9500      	str	r5, [sp, #0]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <settings_menue+0x65c>)
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <settings_menue+0x660>)
 8001f4e:	4621      	mov	r1, r4
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f004 fbd7 	bl	8006704 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+6;i++){
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f5e:	3306      	adds	r3, #6
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f77f aee1 	ble.w	8001d2a <settings_menue+0x40a>
		while(menu_active == 1){
 8001f68:	8bfb      	ldrh	r3, [r7, #30]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f43f ad94 	beq.w	8001a98 <settings_menue+0x178>
				}

			}
		}
	}
}
 8001f70:	bf00      	nop
 8001f72:	372c      	adds	r7, #44	; 0x2c
 8001f74:	46bd      	mov	sp, r7
 8001f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f7a:	bf00      	nop
 8001f7c:	0801c728 	.word	0x0801c728
 8001f80:	0801b550 	.word	0x0801b550
 8001f84:	00000000 	.word	0x00000000

08001f88 <update_display>:

void update_display(){
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8001f8e:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <update_display+0x220>)
 8001f90:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f7fe fdbc 	bl	8000b18 <__aeabi_dcmpeq>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <update_display+0x38>
 8001fa6:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <update_display+0x220>)
 8001fa8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb4:	f7fe fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 82f0 	beq.w	80025a0 <update_display+0x618>
		memset(&buffer, '\0', sizeof(buffer));
 8001fc0:	2228      	movs	r2, #40	; 0x28
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4879      	ldr	r0, [pc, #484]	; (80021ac <update_display+0x224>)
 8001fc6:	f015 fce4 	bl	8017992 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001fca:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <update_display+0x228>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	4978      	ldr	r1, [pc, #480]	; (80021b4 <update_display+0x22c>)
 8001fd2:	4876      	ldr	r0, [pc, #472]	; (80021ac <update_display+0x224>)
 8001fd4:	f015 fc7a 	bl	80178cc <siprintf>
		if(sensor_values.set_temperature < 99.5){
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <update_display+0x228>)
 8001fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fde:	a370      	add	r3, pc, #448	; (adr r3, 80021a0 <update_display+0x218>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fda2 	bl	8000b2c <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <update_display+0x72>
			buffer[2] = 32;
 8001fee:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <update_display+0x224>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001ff4:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <update_display+0x224>)
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001ffa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ffe:	f7ff fa63 	bl	80014c8 <RGB_to_BRG>
 8002002:	4603      	mov	r3, r0
 8002004:	461c      	mov	r4, r3
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff fa5e 	bl	80014c8 <RGB_to_BRG>
 800200c:	4603      	mov	r3, r0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	9400      	str	r4, [sp, #0]
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <update_display+0x230>)
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <update_display+0x224>)
 8002016:	214b      	movs	r1, #75	; 0x4b
 8002018:	200e      	movs	r0, #14
 800201a:	f004 fb73 	bl	8006704 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 800201e:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <update_display+0x228>)
 8002020:	edd3 7a05 	vldr	s15, [r3, #20]
 8002024:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	d512      	bpl.n	8002058 <update_display+0xd0>
			LCD_PutStr(10, 165, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002032:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002036:	f7ff fa47 	bl	80014c8 <RGB_to_BRG>
 800203a:	4603      	mov	r3, r0
 800203c:	461c      	mov	r4, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fa42 	bl	80014c8 <RGB_to_BRG>
 8002044:	4603      	mov	r3, r0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	9400      	str	r4, [sp, #0]
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <update_display+0x230>)
 800204c:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <update_display+0x234>)
 800204e:	21a5      	movs	r1, #165	; 0xa5
 8002050:	200a      	movs	r0, #10
 8002052:	f004 fb57 	bl	8006704 <LCD_PutStr>
 8002056:	e02e      	b.n	80020b6 <update_display+0x12e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002058:	2228      	movs	r2, #40	; 0x28
 800205a:	2100      	movs	r1, #0
 800205c:	4853      	ldr	r0, [pc, #332]	; (80021ac <update_display+0x224>)
 800205e:	f015 fc98 	bl	8017992 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002062:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <update_display+0x228>)
 8002064:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002068:	4952      	ldr	r1, [pc, #328]	; (80021b4 <update_display+0x22c>)
 800206a:	4850      	ldr	r0, [pc, #320]	; (80021ac <update_display+0x224>)
 800206c:	f015 fc2e 	bl	80178cc <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <update_display+0x228>)
 8002072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002076:	a34a      	add	r3, pc, #296	; (adr r3, 80021a0 <update_display+0x218>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fd56 	bl	8000b2c <__aeabi_dcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <update_display+0x10a>
				buffer[2] = 32;
 8002086:	4b49      	ldr	r3, [pc, #292]	; (80021ac <update_display+0x224>)
 8002088:	2220      	movs	r2, #32
 800208a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <update_display+0x224>)
 800208e:	2220      	movs	r2, #32
 8002090:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002092:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002096:	f7ff fa17 	bl	80014c8 <RGB_to_BRG>
 800209a:	4603      	mov	r3, r0
 800209c:	461c      	mov	r4, r3
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff fa12 	bl	80014c8 <RGB_to_BRG>
 80020a4:	4603      	mov	r3, r0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <update_display+0x230>)
 80020ac:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <update_display+0x224>)
 80020ae:	21a5      	movs	r1, #165	; 0xa5
 80020b0:	200e      	movs	r0, #14
 80020b2:	f004 fb27 	bl	8006704 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 80020b6:	2228      	movs	r2, #40	; 0x28
 80020b8:	2100      	movs	r1, #0
 80020ba:	483c      	ldr	r0, [pc, #240]	; (80021ac <update_display+0x224>)
 80020bc:	f015 fc69 	bl	8017992 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <update_display+0x228>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa67 	bl	8000598 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	493c      	ldr	r1, [pc, #240]	; (80021c0 <update_display+0x238>)
 80020d0:	4836      	ldr	r0, [pc, #216]	; (80021ac <update_display+0x224>)
 80020d2:	f015 fbfb 	bl	80178cc <siprintf>
		LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80020d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020da:	f7ff f9f5 	bl	80014c8 <RGB_to_BRG>
 80020de:	4603      	mov	r3, r0
 80020e0:	461c      	mov	r4, r3
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff f9f0 	bl	80014c8 <RGB_to_BRG>
 80020e8:	4603      	mov	r3, r0
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <update_display+0x23c>)
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <update_display+0x224>)
 80020f2:	21ff      	movs	r1, #255	; 0xff
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f004 fb05 	bl	8006704 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80020fa:	2228      	movs	r2, #40	; 0x28
 80020fc:	2100      	movs	r1, #0
 80020fe:	482b      	ldr	r0, [pc, #172]	; (80021ac <update_display+0x224>)
 8002100:	f015 fc47 	bl	8017992 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <update_display+0x228>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa45 	bl	8000598 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	492b      	ldr	r1, [pc, #172]	; (80021c0 <update_display+0x238>)
 8002114:	4825      	ldr	r0, [pc, #148]	; (80021ac <update_display+0x224>)
 8002116:	f015 fbd9 	bl	80178cc <siprintf>
		LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800211a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800211e:	f7ff f9d3 	bl	80014c8 <RGB_to_BRG>
 8002122:	4603      	mov	r3, r0
 8002124:	461c      	mov	r4, r3
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff f9ce 	bl	80014c8 <RGB_to_BRG>
 800212c:	4603      	mov	r3, r0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	9400      	str	r4, [sp, #0]
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <update_display+0x23c>)
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <update_display+0x224>)
 8002136:	f240 1113 	movw	r1, #275	; 0x113
 800213a:	2064      	movs	r0, #100	; 0x64
 800213c:	f004 fae2 	bl	8006704 <LCD_PutStr>

		if(handle == T210){
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <update_display+0x240>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d112      	bne.n	800216e <update_display+0x1e6>
			LCD_PutStr(100, 235, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002148:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800214c:	f7ff f9bc 	bl	80014c8 <RGB_to_BRG>
 8002150:	4603      	mov	r3, r0
 8002152:	461c      	mov	r4, r3
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f9b7 	bl	80014c8 <RGB_to_BRG>
 800215a:	4603      	mov	r3, r0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9400      	str	r4, [sp, #0]
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <update_display+0x23c>)
 8002162:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <update_display+0x244>)
 8002164:	21eb      	movs	r1, #235	; 0xeb
 8002166:	2064      	movs	r0, #100	; 0x64
 8002168:	f004 facc 	bl	8006704 <LCD_PutStr>
 800216c:	e048      	b.n	8002200 <update_display+0x278>
		}
		else if(handle == T245){
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <update_display+0x240>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d12e      	bne.n	80021d4 <update_display+0x24c>
			LCD_PutStr(100, 235, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800217a:	f7ff f9a5 	bl	80014c8 <RGB_to_BRG>
 800217e:	4603      	mov	r3, r0
 8002180:	461c      	mov	r4, r3
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff f9a0 	bl	80014c8 <RGB_to_BRG>
 8002188:	4603      	mov	r3, r0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	9400      	str	r4, [sp, #0]
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <update_display+0x23c>)
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <update_display+0x248>)
 8002192:	21eb      	movs	r1, #235	; 0xeb
 8002194:	2064      	movs	r0, #100	; 0x64
 8002196:	f004 fab5 	bl	8006704 <LCD_PutStr>
 800219a:	e031      	b.n	8002200 <update_display+0x278>
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	4058e000 	.word	0x4058e000
 80021a8:	200006d0 	.word	0x200006d0
 80021ac:	20000628 	.word	0x20000628
 80021b0:	20000038 	.word	0x20000038
 80021b4:	0801b558 	.word	0x0801b558
 80021b8:	0801d718 	.word	0x0801d718
 80021bc:	0801b55c 	.word	0x0801b55c
 80021c0:	0801b564 	.word	0x0801b564
 80021c4:	0801b758 	.word	0x0801b758
 80021c8:	200005e0 	.word	0x200005e0
 80021cc:	0801b56c 	.word	0x0801b56c
 80021d0:	0801b574 	.word	0x0801b574
		}
		else if(handle == NT115){
 80021d4:	4bab      	ldr	r3, [pc, #684]	; (8002484 <update_display+0x4fc>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <update_display+0x278>
			LCD_PutStr(100, 235, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80021dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80021e0:	f7ff f972 	bl	80014c8 <RGB_to_BRG>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461c      	mov	r4, r3
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff f96d 	bl	80014c8 <RGB_to_BRG>
 80021ee:	4603      	mov	r3, r0
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	9400      	str	r4, [sp, #0]
 80021f4:	4ba4      	ldr	r3, [pc, #656]	; (8002488 <update_display+0x500>)
 80021f6:	4aa5      	ldr	r2, [pc, #660]	; (800248c <update_display+0x504>)
 80021f8:	21eb      	movs	r1, #235	; 0xeb
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f004 fa82 	bl	8006704 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002200:	4ba3      	ldr	r3, [pc, #652]	; (8002490 <update_display+0x508>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d008      	beq.n	800221a <update_display+0x292>
 8002208:	4ba1      	ldr	r3, [pc, #644]	; (8002490 <update_display+0x508>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d004      	beq.n	800221a <update_display+0x292>
 8002210:	4b9f      	ldr	r3, [pc, #636]	; (8002490 <update_display+0x508>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b04      	cmp	r3, #4
 8002216:	f040 8098 	bne.w	800234a <update_display+0x3c2>
 800221a:	4b9e      	ldr	r3, [pc, #632]	; (8002494 <update_display+0x50c>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8093 	bne.w	800234a <update_display+0x3c2>
			UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8002224:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002228:	f7ff f94e 	bl	80014c8 <RGB_to_BRG>
 800222c:	4603      	mov	r3, r0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8002234:	22e6      	movs	r2, #230	; 0xe6
 8002236:	2137      	movs	r1, #55	; 0x37
 8002238:	20d2      	movs	r0, #210	; 0xd2
 800223a:	f010 fcb3 	bl	8012ba4 <UG_FillFrame>
			LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff f942 	bl	80014c8 <RGB_to_BRG>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800224c:	f7ff f93c 	bl	80014c8 <RGB_to_BRG>
 8002250:	4603      	mov	r3, r0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	9400      	str	r4, [sp, #0]
 8002256:	4b90      	ldr	r3, [pc, #576]	; (8002498 <update_display+0x510>)
 8002258:	4a90      	ldr	r2, [pc, #576]	; (800249c <update_display+0x514>)
 800225a:	213a      	movs	r1, #58	; 0x3a
 800225c:	20d6      	movs	r0, #214	; 0xd6
 800225e:	f004 fa51 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff f930 	bl	80014c8 <RGB_to_BRG>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002270:	f7ff f92a 	bl	80014c8 <RGB_to_BRG>
 8002274:	4603      	mov	r3, r0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9400      	str	r4, [sp, #0]
 800227a:	4b87      	ldr	r3, [pc, #540]	; (8002498 <update_display+0x510>)
 800227c:	4a88      	ldr	r2, [pc, #544]	; (80024a0 <update_display+0x518>)
 800227e:	215c      	movs	r1, #92	; 0x5c
 8002280:	20d8      	movs	r0, #216	; 0xd8
 8002282:	f004 fa3f 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff f91e 	bl	80014c8 <RGB_to_BRG>
 800228c:	4603      	mov	r3, r0
 800228e:	461c      	mov	r4, r3
 8002290:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002294:	f7ff f918 	bl	80014c8 <RGB_to_BRG>
 8002298:	4603      	mov	r3, r0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	9400      	str	r4, [sp, #0]
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <update_display+0x510>)
 80022a0:	4a7e      	ldr	r2, [pc, #504]	; (800249c <update_display+0x514>)
 80022a2:	217e      	movs	r1, #126	; 0x7e
 80022a4:	20d6      	movs	r0, #214	; 0xd6
 80022a6:	f004 fa2d 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff f90c 	bl	80014c8 <RGB_to_BRG>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461c      	mov	r4, r3
 80022b4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022b8:	f7ff f906 	bl	80014c8 <RGB_to_BRG>
 80022bc:	4603      	mov	r3, r0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	9400      	str	r4, [sp, #0]
 80022c2:	4b75      	ldr	r3, [pc, #468]	; (8002498 <update_display+0x510>)
 80022c4:	4a76      	ldr	r2, [pc, #472]	; (80024a0 <update_display+0x518>)
 80022c6:	21a1      	movs	r1, #161	; 0xa1
 80022c8:	20d8      	movs	r0, #216	; 0xd8
 80022ca:	f004 fa1b 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff f8fa 	bl	80014c8 <RGB_to_BRG>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461c      	mov	r4, r3
 80022d8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80022dc:	f7ff f8f4 	bl	80014c8 <RGB_to_BRG>
 80022e0:	4603      	mov	r3, r0
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	9400      	str	r4, [sp, #0]
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <update_display+0x510>)
 80022e8:	4a6c      	ldr	r2, [pc, #432]	; (800249c <update_display+0x514>)
 80022ea:	21c2      	movs	r1, #194	; 0xc2
 80022ec:	20d6      	movs	r0, #214	; 0xd6
 80022ee:	f004 fa09 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80022f2:	2000      	movs	r0, #0
 80022f4:	f7ff f8e8 	bl	80014c8 <RGB_to_BRG>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461c      	mov	r4, r3
 80022fc:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002300:	f7ff f8e2 	bl	80014c8 <RGB_to_BRG>
 8002304:	4603      	mov	r3, r0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	9400      	str	r4, [sp, #0]
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <update_display+0x510>)
 800230c:	4a64      	ldr	r2, [pc, #400]	; (80024a0 <update_display+0x518>)
 800230e:	21e4      	movs	r1, #228	; 0xe4
 8002310:	20d8      	movs	r0, #216	; 0xd8
 8002312:	f004 f9f7 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff f8d6 	bl	80014c8 <RGB_to_BRG>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002324:	f7ff f8d0 	bl	80014c8 <RGB_to_BRG>
 8002328:	4603      	mov	r3, r0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	9400      	str	r4, [sp, #0]
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <update_display+0x510>)
 8002330:	4a5a      	ldr	r2, [pc, #360]	; (800249c <update_display+0x514>)
 8002332:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002336:	20d6      	movs	r0, #214	; 0xd6
 8002338:	f004 f9e4 	bl	8006704 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800233c:	4b55      	ldr	r3, [pc, #340]	; (8002494 <update_display+0x50c>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <update_display+0x51c>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
 8002348:	e129      	b.n	800259e <update_display+0x616>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <update_display+0x508>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 80b8 	bne.w	80024c4 <update_display+0x53c>
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <update_display+0x51c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 80b3 	bne.w	80024c4 <update_display+0x53c>
			UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800235e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002362:	f7ff f8b1 	bl	80014c8 <RGB_to_BRG>
 8002366:	4603      	mov	r3, r0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800236e:	22e6      	movs	r2, #230	; 0xe6
 8002370:	2137      	movs	r1, #55	; 0x37
 8002372:	20d2      	movs	r0, #210	; 0xd2
 8002374:	f010 fc16 	bl	8012ba4 <UG_FillFrame>
			LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff f8a5 	bl	80014c8 <RGB_to_BRG>
 800237e:	4603      	mov	r3, r0
 8002380:	461c      	mov	r4, r3
 8002382:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002386:	f7ff f89f 	bl	80014c8 <RGB_to_BRG>
 800238a:	4603      	mov	r3, r0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9400      	str	r4, [sp, #0]
 8002390:	4b41      	ldr	r3, [pc, #260]	; (8002498 <update_display+0x510>)
 8002392:	4a45      	ldr	r2, [pc, #276]	; (80024a8 <update_display+0x520>)
 8002394:	213a      	movs	r1, #58	; 0x3a
 8002396:	20d6      	movs	r0, #214	; 0xd6
 8002398:	f004 f9b4 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff f893 	bl	80014c8 <RGB_to_BRG>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461c      	mov	r4, r3
 80023a6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023aa:	f7ff f88d 	bl	80014c8 <RGB_to_BRG>
 80023ae:	4603      	mov	r3, r0
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	9400      	str	r4, [sp, #0]
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <update_display+0x510>)
 80023b6:	4a3d      	ldr	r2, [pc, #244]	; (80024ac <update_display+0x524>)
 80023b8:	215c      	movs	r1, #92	; 0x5c
 80023ba:	20d6      	movs	r0, #214	; 0xd6
 80023bc:	f004 f9a2 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff f881 	bl	80014c8 <RGB_to_BRG>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461c      	mov	r4, r3
 80023ca:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023ce:	f7ff f87b 	bl	80014c8 <RGB_to_BRG>
 80023d2:	4603      	mov	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <update_display+0x510>)
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <update_display+0x528>)
 80023dc:	217e      	movs	r1, #126	; 0x7e
 80023de:	20d6      	movs	r0, #214	; 0xd6
 80023e0:	f004 f990 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff f86f 	bl	80014c8 <RGB_to_BRG>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461c      	mov	r4, r3
 80023ee:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80023f2:	f7ff f869 	bl	80014c8 <RGB_to_BRG>
 80023f6:	4603      	mov	r3, r0
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	9400      	str	r4, [sp, #0]
 80023fc:	4b26      	ldr	r3, [pc, #152]	; (8002498 <update_display+0x510>)
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <update_display+0x52c>)
 8002400:	21a1      	movs	r1, #161	; 0xa1
 8002402:	20d6      	movs	r0, #214	; 0xd6
 8002404:	f004 f97e 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff f85d 	bl	80014c8 <RGB_to_BRG>
 800240e:	4603      	mov	r3, r0
 8002410:	461c      	mov	r4, r3
 8002412:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002416:	f7ff f857 	bl	80014c8 <RGB_to_BRG>
 800241a:	4603      	mov	r3, r0
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <update_display+0x510>)
 8002422:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <update_display+0x530>)
 8002424:	21c2      	movs	r1, #194	; 0xc2
 8002426:	20d6      	movs	r0, #214	; 0xd6
 8002428:	f004 f96c 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff f84b 	bl	80014c8 <RGB_to_BRG>
 8002432:	4603      	mov	r3, r0
 8002434:	461c      	mov	r4, r3
 8002436:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800243a:	f7ff f845 	bl	80014c8 <RGB_to_BRG>
 800243e:	4603      	mov	r3, r0
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	9400      	str	r4, [sp, #0]
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <update_display+0x510>)
 8002446:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <update_display+0x534>)
 8002448:	21e4      	movs	r1, #228	; 0xe4
 800244a:	20d6      	movs	r0, #214	; 0xd6
 800244c:	f004 f95a 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002450:	2000      	movs	r0, #0
 8002452:	f7ff f839 	bl	80014c8 <RGB_to_BRG>
 8002456:	4603      	mov	r3, r0
 8002458:	461c      	mov	r4, r3
 800245a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800245e:	f7ff f833 	bl	80014c8 <RGB_to_BRG>
 8002462:	4603      	mov	r3, r0
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	9400      	str	r4, [sp, #0]
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <update_display+0x510>)
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <update_display+0x538>)
 800246c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002470:	20d6      	movs	r0, #214	; 0xd6
 8002472:	f004 f947 	bl	8006704 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <update_display+0x51c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <update_display+0x50c>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e08c      	b.n	800259e <update_display+0x616>
 8002484:	200005e0 	.word	0x200005e0
 8002488:	0801b758 	.word	0x0801b758
 800248c:	0801b57c 	.word	0x0801b57c
 8002490:	2000001d 	.word	0x2000001d
 8002494:	20000607 	.word	0x20000607
 8002498:	0801c728 	.word	0x0801c728
 800249c:	0801b584 	.word	0x0801b584
 80024a0:	0801b588 	.word	0x0801b588
 80024a4:	20000608 	.word	0x20000608
 80024a8:	0801b58c 	.word	0x0801b58c
 80024ac:	0801b590 	.word	0x0801b590
 80024b0:	0801b594 	.word	0x0801b594
 80024b4:	0801b598 	.word	0x0801b598
 80024b8:	0801b59c 	.word	0x0801b59c
 80024bc:	0801b5a0 	.word	0x0801b5a0
 80024c0:	0801b5a4 	.word	0x0801b5a4
		}
		else if(active_state == RUN){
 80024c4:	4bb4      	ldr	r3, [pc, #720]	; (8002798 <update_display+0x810>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 836a 	bne.w	8002ba2 <update_display+0xc1a>
			UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80024ce:	4bb3      	ldr	r3, [pc, #716]	; (800279c <update_display+0x814>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4bb1      	ldr	r3, [pc, #708]	; (80027a0 <update_display+0x818>)
 80024da:	f7fe f9df 	bl	800089c <__aeabi_ddiv>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4bae      	ldr	r3, [pc, #696]	; (80027a4 <update_display+0x81c>)
 80024ec:	f7fe f8ac 	bl	8000648 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	a1a2      	add	r1, pc, #648	; (adr r1, 8002780 <update_display+0x7f8>)
 80024f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024fa:	f7fd feed 	bl	80002d8 <__aeabi_dsub>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb4f 	bl	8000ba8 <__aeabi_d2iz>
 800250a:	4603      	mov	r3, r0
 800250c:	b21c      	sxth	r4, r3
 800250e:	f248 607e 	movw	r0, #34430	; 0x867e
 8002512:	f7fe ffd9 	bl	80014c8 <RGB_to_BRG>
 8002516:	4603      	mov	r3, r0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f240 131f 	movw	r3, #287	; 0x11f
 800251e:	22e6      	movs	r2, #230	; 0xe6
 8002520:	4621      	mov	r1, r4
 8002522:	20d2      	movs	r0, #210	; 0xd2
 8002524:	f010 fb3e 	bl	8012ba4 <UG_FillFrame>
			UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002528:	4b9c      	ldr	r3, [pc, #624]	; (800279c <update_display+0x814>)
 800252a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b9b      	ldr	r3, [pc, #620]	; (80027a0 <update_display+0x818>)
 8002534:	f7fe f9b2 	bl	800089c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a391      	add	r3, pc, #580	; (adr r3, 8002788 <update_display+0x800>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f87f 	bl	8000648 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	a18c      	add	r1, pc, #560	; (adr r1, 8002780 <update_display+0x7f8>)
 8002550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002554:	f7fd fec0 	bl	80002d8 <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <update_display+0x820>)
 8002566:	f7fd feb7 	bl	80002d8 <__aeabi_dsub>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2iz>
 8002576:	4603      	mov	r3, r0
 8002578:	b21c      	sxth	r4, r3
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe ffa4 	bl	80014c8 <RGB_to_BRG>
 8002580:	4603      	mov	r3, r0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4623      	mov	r3, r4
 8002586:	22e6      	movs	r2, #230	; 0xe6
 8002588:	2137      	movs	r1, #55	; 0x37
 800258a:	20d2      	movs	r0, #210	; 0xd2
 800258c:	f010 fb0a 	bl	8012ba4 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002590:	4b86      	ldr	r3, [pc, #536]	; (80027ac <update_display+0x824>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002596:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <update_display+0x828>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 800259c:	e301      	b.n	8002ba2 <update_display+0xc1a>
 800259e:	e300      	b.n	8002ba2 <update_display+0xc1a>
		}
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 80025a0:	2228      	movs	r2, #40	; 0x28
 80025a2:	2100      	movs	r1, #0
 80025a4:	4883      	ldr	r0, [pc, #524]	; (80027b4 <update_display+0x82c>)
 80025a6:	f015 f9f4 	bl	8017992 <memset>
		sprintf(buffer, "%.f", sensor_values.set_temperature);
 80025aa:	4b83      	ldr	r3, [pc, #524]	; (80027b8 <update_display+0x830>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	4982      	ldr	r1, [pc, #520]	; (80027bc <update_display+0x834>)
 80025b2:	4880      	ldr	r0, [pc, #512]	; (80027b4 <update_display+0x82c>)
 80025b4:	f015 f98a 	bl	80178cc <siprintf>
		if(sensor_values.set_temperature < 99.5){
 80025b8:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <update_display+0x830>)
 80025ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025be:	a374      	add	r3, pc, #464	; (adr r3, 8002790 <update_display+0x808>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe fab2 	bl	8000b2c <__aeabi_dcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <update_display+0x652>
			buffer[2] = 32;
 80025ce:	4b79      	ldr	r3, [pc, #484]	; (80027b4 <update_display+0x82c>)
 80025d0:	2220      	movs	r2, #32
 80025d2:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 80025d4:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <update_display+0x82c>)
 80025d6:	2220      	movs	r2, #32
 80025d8:	70da      	strb	r2, [r3, #3]
		}
		LCD_PutStr(14, 30, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80025da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025de:	f7fe ff73 	bl	80014c8 <RGB_to_BRG>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461c      	mov	r4, r3
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe ff6e 	bl	80014c8 <RGB_to_BRG>
 80025ec:	4603      	mov	r3, r0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <update_display+0x838>)
 80025f4:	4a6f      	ldr	r2, [pc, #444]	; (80027b4 <update_display+0x82c>)
 80025f6:	211e      	movs	r1, #30
 80025f8:	200e      	movs	r0, #14
 80025fa:	f004 f883 	bl	8006704 <LCD_PutStr>

		if(sensor_values.heater_current < 30){ //NT115 at 9V draws 81
 80025fe:	4b6e      	ldr	r3, [pc, #440]	; (80027b8 <update_display+0x830>)
 8002600:	edd3 7a05 	vldr	s15, [r3, #20]
 8002604:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	d512      	bpl.n	8002638 <update_display+0x6b0>
			LCD_PutStr(10, 120, " ---  ", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002612:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002616:	f7fe ff57 	bl	80014c8 <RGB_to_BRG>
 800261a:	4603      	mov	r3, r0
 800261c:	461c      	mov	r4, r3
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe ff52 	bl	80014c8 <RGB_to_BRG>
 8002624:	4603      	mov	r3, r0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <update_display+0x838>)
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <update_display+0x83c>)
 800262e:	2178      	movs	r1, #120	; 0x78
 8002630:	200a      	movs	r0, #10
 8002632:	f004 f867 	bl	8006704 <LCD_PutStr>
 8002636:	e02e      	b.n	8002696 <update_display+0x70e>
		}
		else{
			memset(&buffer, '\0', sizeof(buffer));
 8002638:	2228      	movs	r2, #40	; 0x28
 800263a:	2100      	movs	r1, #0
 800263c:	485d      	ldr	r0, [pc, #372]	; (80027b4 <update_display+0x82c>)
 800263e:	f015 f9a8 	bl	8017992 <memset>
			sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8002642:	4b5d      	ldr	r3, [pc, #372]	; (80027b8 <update_display+0x830>)
 8002644:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002648:	495c      	ldr	r1, [pc, #368]	; (80027bc <update_display+0x834>)
 800264a:	485a      	ldr	r0, [pc, #360]	; (80027b4 <update_display+0x82c>)
 800264c:	f015 f93e 	bl	80178cc <siprintf>
			if(sensor_values.thermocouple_temperature < 99.5){
 8002650:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <update_display+0x830>)
 8002652:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002656:	a34e      	add	r3, pc, #312	; (adr r3, 8002790 <update_display+0x808>)
 8002658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265c:	f7fe fa66 	bl	8000b2c <__aeabi_dcmplt>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <update_display+0x6ea>
				buffer[2] = 32;
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <update_display+0x82c>)
 8002668:	2220      	movs	r2, #32
 800266a:	709a      	strb	r2, [r3, #2]
				buffer[3] = 32;
 800266c:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <update_display+0x82c>)
 800266e:	2220      	movs	r2, #32
 8002670:	70da      	strb	r2, [r3, #3]
			}
			LCD_PutStr(14, 120, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002672:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002676:	f7fe ff27 	bl	80014c8 <RGB_to_BRG>
 800267a:	4603      	mov	r3, r0
 800267c:	461c      	mov	r4, r3
 800267e:	2000      	movs	r0, #0
 8002680:	f7fe ff22 	bl	80014c8 <RGB_to_BRG>
 8002684:	4603      	mov	r3, r0
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9400      	str	r4, [sp, #0]
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <update_display+0x838>)
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <update_display+0x82c>)
 800268e:	2178      	movs	r1, #120	; 0x78
 8002690:	200e      	movs	r0, #14
 8002692:	f004 f837 	bl	8006704 <LCD_PutStr>
		}

		memset(&buffer, '\0', sizeof(buffer));
 8002696:	2228      	movs	r2, #40	; 0x28
 8002698:	2100      	movs	r1, #0
 800269a:	4846      	ldr	r0, [pc, #280]	; (80027b4 <update_display+0x82c>)
 800269c:	f015 f979 	bl	8017992 <memset>
		sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80026a0:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <update_display+0x830>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff77 	bl	8000598 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4946      	ldr	r1, [pc, #280]	; (80027c8 <update_display+0x840>)
 80026b0:	4840      	ldr	r0, [pc, #256]	; (80027b4 <update_display+0x82c>)
 80026b2:	f015 f90b 	bl	80178cc <siprintf>
		LCD_PutStr(100, 195, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026ba:	f7fe ff05 	bl	80014c8 <RGB_to_BRG>
 80026be:	4603      	mov	r3, r0
 80026c0:	461c      	mov	r4, r3
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe ff00 	bl	80014c8 <RGB_to_BRG>
 80026c8:	4603      	mov	r3, r0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	9400      	str	r4, [sp, #0]
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <update_display+0x844>)
 80026d0:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <update_display+0x82c>)
 80026d2:	21c3      	movs	r1, #195	; 0xc3
 80026d4:	2064      	movs	r0, #100	; 0x64
 80026d6:	f004 f815 	bl	8006704 <LCD_PutStr>

		memset(&buffer, '\0', sizeof(buffer));
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4835      	ldr	r0, [pc, #212]	; (80027b4 <update_display+0x82c>)
 80026e0:	f015 f957 	bl	8017992 <memset>
		sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <update_display+0x830>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff55 	bl	8000598 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4935      	ldr	r1, [pc, #212]	; (80027c8 <update_display+0x840>)
 80026f4:	482f      	ldr	r0, [pc, #188]	; (80027b4 <update_display+0x82c>)
 80026f6:	f015 f8e9 	bl	80178cc <siprintf>
		LCD_PutStr(100, 210, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80026fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026fe:	f7fe fee3 	bl	80014c8 <RGB_to_BRG>
 8002702:	4603      	mov	r3, r0
 8002704:	461c      	mov	r4, r3
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fede 	bl	80014c8 <RGB_to_BRG>
 800270c:	4603      	mov	r3, r0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	9400      	str	r4, [sp, #0]
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <update_display+0x844>)
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <update_display+0x82c>)
 8002716:	21d2      	movs	r1, #210	; 0xd2
 8002718:	2064      	movs	r0, #100	; 0x64
 800271a:	f003 fff3 	bl	8006704 <LCD_PutStr>

		if(handle == T210){
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <update_display+0x848>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d112      	bne.n	800274c <update_display+0x7c4>
			LCD_PutStr(100, 180, "T210   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800272a:	f7fe fecd 	bl	80014c8 <RGB_to_BRG>
 800272e:	4603      	mov	r3, r0
 8002730:	461c      	mov	r4, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f7fe fec8 	bl	80014c8 <RGB_to_BRG>
 8002738:	4603      	mov	r3, r0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <update_display+0x844>)
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <update_display+0x84c>)
 8002742:	21b4      	movs	r1, #180	; 0xb4
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	f003 ffdd 	bl	8006704 <LCD_PutStr>
 800274a:	e05d      	b.n	8002808 <update_display+0x880>
		}
		else if(handle == T245){
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <update_display+0x848>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d143      	bne.n	80027dc <update_display+0x854>
			LCD_PutStr(100, 180, "T245   ", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002754:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002758:	f7fe feb6 	bl	80014c8 <RGB_to_BRG>
 800275c:	4603      	mov	r3, r0
 800275e:	461c      	mov	r4, r3
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe feb1 	bl	80014c8 <RGB_to_BRG>
 8002766:	4603      	mov	r3, r0
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9400      	str	r4, [sp, #0]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <update_display+0x844>)
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <update_display+0x850>)
 8002770:	21b4      	movs	r1, #180	; 0xb4
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f003 ffc6 	bl	8006704 <LCD_PutStr>
 8002778:	e046      	b.n	8002808 <update_display+0x880>
 800277a:	bf00      	nop
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	4071f000 	.word	0x4071f000
 8002788:	00000000 	.word	0x00000000
 800278c:	406ce000 	.word	0x406ce000
 8002790:	00000000 	.word	0x00000000
 8002794:	4058e000 	.word	0x4058e000
 8002798:	2000001d 	.word	0x2000001d
 800279c:	20000720 	.word	0x20000720
 80027a0:	407f4000 	.word	0x407f4000
 80027a4:	406d0000 	.word	0x406d0000
 80027a8:	3ff00000 	.word	0x3ff00000
 80027ac:	20000608 	.word	0x20000608
 80027b0:	20000607 	.word	0x20000607
 80027b4:	20000628 	.word	0x20000628
 80027b8:	20000038 	.word	0x20000038
 80027bc:	0801b558 	.word	0x0801b558
 80027c0:	0801d718 	.word	0x0801d718
 80027c4:	0801b55c 	.word	0x0801b55c
 80027c8:	0801b564 	.word	0x0801b564
 80027cc:	0801b758 	.word	0x0801b758
 80027d0:	200005e0 	.word	0x200005e0
 80027d4:	0801b56c 	.word	0x0801b56c
 80027d8:	0801b574 	.word	0x0801b574
		}
		else if(handle == NT115){
 80027dc:	4ba9      	ldr	r3, [pc, #676]	; (8002a84 <update_display+0xafc>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <update_display+0x880>
			LCD_PutStr(100, 180, "NT115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80027e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027e8:	f7fe fe6e 	bl	80014c8 <RGB_to_BRG>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461c      	mov	r4, r3
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe fe69 	bl	80014c8 <RGB_to_BRG>
 80027f6:	4603      	mov	r3, r0
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	9400      	str	r4, [sp, #0]
 80027fc:	4ba2      	ldr	r3, [pc, #648]	; (8002a88 <update_display+0xb00>)
 80027fe:	4aa3      	ldr	r2, [pc, #652]	; (8002a8c <update_display+0xb04>)
 8002800:	21b4      	movs	r1, #180	; 0xb4
 8002802:	2064      	movs	r0, #100	; 0x64
 8002804:	f003 ff7e 	bl	8006704 <LCD_PutStr>
		}

		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002808:	4ba1      	ldr	r3, [pc, #644]	; (8002a90 <update_display+0xb08>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d008      	beq.n	8002822 <update_display+0x89a>
 8002810:	4b9f      	ldr	r3, [pc, #636]	; (8002a90 <update_display+0xb08>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d004      	beq.n	8002822 <update_display+0x89a>
 8002818:	4b9d      	ldr	r3, [pc, #628]	; (8002a90 <update_display+0xb08>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	f040 808c 	bne.w	800293a <update_display+0x9b2>
 8002822:	4b9c      	ldr	r3, [pc, #624]	; (8002a94 <update_display+0xb0c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8087 	bne.w	800293a <update_display+0x9b2>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800282c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002830:	f7fe fe4a 	bl	80014c8 <RGB_to_BRG>
 8002834:	4603      	mov	r3, r0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	23e2      	movs	r3, #226	; 0xe2
 800283a:	f44f 729b 	mov.w	r2, #310	; 0x136
 800283e:	2105      	movs	r1, #5
 8002840:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002844:	f010 f9ae 	bl	8012ba4 <UG_FillFrame>

			LCD_PutStr(294, 3,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fe3d 	bl	80014c8 <RGB_to_BRG>
 800284e:	4603      	mov	r3, r0
 8002850:	461c      	mov	r4, r3
 8002852:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002856:	f7fe fe37 	bl	80014c8 <RGB_to_BRG>
 800285a:	4603      	mov	r3, r0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	9400      	str	r4, [sp, #0]
 8002860:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <update_display+0xb10>)
 8002862:	4a8e      	ldr	r2, [pc, #568]	; (8002a9c <update_display+0xb14>)
 8002864:	2103      	movs	r1, #3
 8002866:	f44f 7093 	mov.w	r0, #294	; 0x126
 800286a:	f003 ff4b 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(296, 38, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fe2a 	bl	80014c8 <RGB_to_BRG>
 8002874:	4603      	mov	r3, r0
 8002876:	461c      	mov	r4, r3
 8002878:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800287c:	f7fe fe24 	bl	80014c8 <RGB_to_BRG>
 8002880:	4603      	mov	r3, r0
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	4b84      	ldr	r3, [pc, #528]	; (8002a98 <update_display+0xb10>)
 8002888:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <update_display+0xb18>)
 800288a:	2126      	movs	r1, #38	; 0x26
 800288c:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002890:	f003 ff38 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 73, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fe17 	bl	80014c8 <RGB_to_BRG>
 800289a:	4603      	mov	r3, r0
 800289c:	461c      	mov	r4, r3
 800289e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028a2:	f7fe fe11 	bl	80014c8 <RGB_to_BRG>
 80028a6:	4603      	mov	r3, r0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	9400      	str	r4, [sp, #0]
 80028ac:	4b7a      	ldr	r3, [pc, #488]	; (8002a98 <update_display+0xb10>)
 80028ae:	4a7b      	ldr	r2, [pc, #492]	; (8002a9c <update_display+0xb14>)
 80028b0:	2149      	movs	r1, #73	; 0x49
 80028b2:	f44f 7093 	mov.w	r0, #294	; 0x126
 80028b6:	f003 ff25 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(296, 108, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fe04 	bl	80014c8 <RGB_to_BRG>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028c8:	f7fe fdfe 	bl	80014c8 <RGB_to_BRG>
 80028cc:	4603      	mov	r3, r0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	9400      	str	r4, [sp, #0]
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <update_display+0xb10>)
 80028d4:	4a72      	ldr	r2, [pc, #456]	; (8002aa0 <update_display+0xb18>)
 80028d6:	216c      	movs	r1, #108	; 0x6c
 80028d8:	f44f 7094 	mov.w	r0, #296	; 0x128
 80028dc:	f003 ff12 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 143, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fdf1 	bl	80014c8 <RGB_to_BRG>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80028ee:	f7fe fdeb 	bl	80014c8 <RGB_to_BRG>
 80028f2:	4603      	mov	r3, r0
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	9400      	str	r4, [sp, #0]
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <update_display+0xb10>)
 80028fa:	4a68      	ldr	r2, [pc, #416]	; (8002a9c <update_display+0xb14>)
 80028fc:	218f      	movs	r1, #143	; 0x8f
 80028fe:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002902:	f003 feff 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(296, 178, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fdde 	bl	80014c8 <RGB_to_BRG>
 800290c:	4603      	mov	r3, r0
 800290e:	461c      	mov	r4, r3
 8002910:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002914:	f7fe fdd8 	bl	80014c8 <RGB_to_BRG>
 8002918:	4603      	mov	r3, r0
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	9400      	str	r4, [sp, #0]
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <update_display+0xb10>)
 8002920:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <update_display+0xb18>)
 8002922:	21b2      	movs	r1, #178	; 0xb2
 8002924:	f44f 7094 	mov.w	r0, #296	; 0x128
 8002928:	f003 feec 	bl	8006704 <LCD_PutStr>
			sleep_state_written_to_LCD = 1;
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <update_display+0xb0c>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
			standby_state_written_to_LCD = 0;
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <update_display+0xb1c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e134      	b.n	8002ba4 <update_display+0xc1c>
		}
		else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800293a:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <update_display+0xb08>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80c0 	bne.w	8002ac4 <update_display+0xb3c>
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <update_display+0xb1c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80bb 	bne.w	8002ac4 <update_display+0xb3c>
			UG_FillFrame(290,5,310,226, RGB_to_BRG(C_ORANGE));
 800294e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002952:	f7fe fdb9 	bl	80014c8 <RGB_to_BRG>
 8002956:	4603      	mov	r3, r0
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	23e2      	movs	r3, #226	; 0xe2
 800295c:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002960:	2105      	movs	r1, #5
 8002962:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002966:	f010 f91d 	bl	8012ba4 <UG_FillFrame>
			LCD_PutStr(294, 3,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe fdac 	bl	80014c8 <RGB_to_BRG>
 8002970:	4603      	mov	r3, r0
 8002972:	461c      	mov	r4, r3
 8002974:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002978:	f7fe fda6 	bl	80014c8 <RGB_to_BRG>
 800297c:	4603      	mov	r3, r0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	9400      	str	r4, [sp, #0]
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <update_display+0xb10>)
 8002984:	4a48      	ldr	r2, [pc, #288]	; (8002aa8 <update_display+0xb20>)
 8002986:	2103      	movs	r1, #3
 8002988:	f44f 7093 	mov.w	r0, #294	; 0x126
 800298c:	f003 feba 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 32,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fd99 	bl	80014c8 <RGB_to_BRG>
 8002996:	4603      	mov	r3, r0
 8002998:	461c      	mov	r4, r3
 800299a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800299e:	f7fe fd93 	bl	80014c8 <RGB_to_BRG>
 80029a2:	4603      	mov	r3, r0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	9400      	str	r4, [sp, #0]
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <update_display+0xb10>)
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <update_display+0xb24>)
 80029ac:	2120      	movs	r1, #32
 80029ae:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029b2:	f003 fea7 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 61, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fd86 	bl	80014c8 <RGB_to_BRG>
 80029bc:	4603      	mov	r3, r0
 80029be:	461c      	mov	r4, r3
 80029c0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029c4:	f7fe fd80 	bl	80014c8 <RGB_to_BRG>
 80029c8:	4603      	mov	r3, r0
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	9400      	str	r4, [sp, #0]
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <update_display+0xb10>)
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <update_display+0xb28>)
 80029d2:	213d      	movs	r1, #61	; 0x3d
 80029d4:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029d8:	f003 fe94 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 90, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80029dc:	2000      	movs	r0, #0
 80029de:	f7fe fd73 	bl	80014c8 <RGB_to_BRG>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461c      	mov	r4, r3
 80029e6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80029ea:	f7fe fd6d 	bl	80014c8 <RGB_to_BRG>
 80029ee:	4603      	mov	r3, r0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	9400      	str	r4, [sp, #0]
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <update_display+0xb10>)
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <update_display+0xb2c>)
 80029f8:	215a      	movs	r1, #90	; 0x5a
 80029fa:	f44f 7093 	mov.w	r0, #294	; 0x126
 80029fe:	f003 fe81 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 119, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fd60 	bl	80014c8 <RGB_to_BRG>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a10:	f7fe fd5a 	bl	80014c8 <RGB_to_BRG>
 8002a14:	4603      	mov	r3, r0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	9400      	str	r4, [sp, #0]
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <update_display+0xb10>)
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <update_display+0xb30>)
 8002a1e:	2177      	movs	r1, #119	; 0x77
 8002a20:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a24:	f003 fe6e 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 148, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fd4d 	bl	80014c8 <RGB_to_BRG>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461c      	mov	r4, r3
 8002a32:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a36:	f7fe fd47 	bl	80014c8 <RGB_to_BRG>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9400      	str	r4, [sp, #0]
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <update_display+0xb10>)
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <update_display+0xb34>)
 8002a44:	2194      	movs	r1, #148	; 0x94
 8002a46:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a4a:	f003 fe5b 	bl	8006704 <LCD_PutStr>
			LCD_PutStr(294, 177, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe fd3a 	bl	80014c8 <RGB_to_BRG>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461c      	mov	r4, r3
 8002a58:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002a5c:	f7fe fd34 	bl	80014c8 <RGB_to_BRG>
 8002a60:	4603      	mov	r3, r0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	9400      	str	r4, [sp, #0]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <update_display+0xb10>)
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <update_display+0xb38>)
 8002a6a:	21b1      	movs	r1, #177	; 0xb1
 8002a6c:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002a70:	f003 fe48 	bl	8006704 <LCD_PutStr>
			standby_state_written_to_LCD = 1;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <update_display+0xb1c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <update_display+0xb0c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e090      	b.n	8002ba4 <update_display+0xc1c>
 8002a82:	bf00      	nop
 8002a84:	200005e0 	.word	0x200005e0
 8002a88:	0801b758 	.word	0x0801b758
 8002a8c:	0801b57c 	.word	0x0801b57c
 8002a90:	2000001d 	.word	0x2000001d
 8002a94:	20000607 	.word	0x20000607
 8002a98:	0801c728 	.word	0x0801c728
 8002a9c:	0801b584 	.word	0x0801b584
 8002aa0:	0801b588 	.word	0x0801b588
 8002aa4:	20000608 	.word	0x20000608
 8002aa8:	0801b58c 	.word	0x0801b58c
 8002aac:	0801b590 	.word	0x0801b590
 8002ab0:	0801b594 	.word	0x0801b594
 8002ab4:	0801b598 	.word	0x0801b598
 8002ab8:	0801b59c 	.word	0x0801b59c
 8002abc:	0801b5a0 	.word	0x0801b5a0
 8002ac0:	0801b5a4 	.word	0x0801b5a4
		}
		else if(active_state == RUN){
 8002ac4:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <update_display+0xc38>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d16b      	bne.n	8002ba4 <update_display+0xc1c>
			UG_FillFrame(290, 226-(PID_output/PID_MAX_OUTPUT)*221, 	310, 	226, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <update_display+0xc3c>)
 8002ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <update_display+0xc40>)
 8002ad8:	f7fd fee0 	bl	800089c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	a332      	add	r3, pc, #200	; (adr r3, 8002bb0 <update_display+0xc28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fdad 	bl	8000648 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	4935      	ldr	r1, [pc, #212]	; (8002bcc <update_display+0xc44>)
 8002af8:	f7fd fbee 	bl	80002d8 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4610      	mov	r0, r2
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7fe f850 	bl	8000ba8 <__aeabi_d2iz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b21c      	sxth	r4, r3
 8002b0c:	f248 607e 	movw	r0, #34430	; 0x867e
 8002b10:	f7fe fcda 	bl	80014c8 <RGB_to_BRG>
 8002b14:	4603      	mov	r3, r0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	23e2      	movs	r3, #226	; 0xe2
 8002b1a:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b1e:	4621      	mov	r1, r4
 8002b20:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b24:	f010 f83e 	bl	8012ba4 <UG_FillFrame>
			UG_FillFrame(290, 5, 									310, 	226-(PID_output/PID_MAX_OUTPUT)*211-1, RGB_to_BRG(C_BLACK));
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <update_display+0xc3c>)
 8002b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <update_display+0xc40>)
 8002b34:	f7fd feb2 	bl	800089c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	a31d      	add	r3, pc, #116	; (adr r3, 8002bb8 <update_display+0xc30>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd7f 	bl	8000648 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	491e      	ldr	r1, [pc, #120]	; (8002bcc <update_display+0xc44>)
 8002b54:	f7fd fbc0 	bl	80002d8 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <update_display+0xc48>)
 8002b66:	f7fd fbb7 	bl	80002d8 <__aeabi_dsub>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe f819 	bl	8000ba8 <__aeabi_d2iz>
 8002b76:	4603      	mov	r3, r0
 8002b78:	b21c      	sxth	r4, r3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe fca4 	bl	80014c8 <RGB_to_BRG>
 8002b80:	4603      	mov	r3, r0
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	4623      	mov	r3, r4
 8002b86:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002b8a:	2105      	movs	r1, #5
 8002b8c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002b90:	f010 f808 	bl	8012ba4 <UG_FillFrame>
			standby_state_written_to_LCD = 0;
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <update_display+0xc4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
			sleep_state_written_to_LCD = 0;
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <update_display+0xc50>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002ba0:	e000      	b.n	8002ba4 <update_display+0xc1c>
		if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8002ba2:	bf00      	nop
}
 8002ba4:	bf00      	nop
 8002ba6:	3704      	adds	r7, #4
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	406ba000 	.word	0x406ba000
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	406a6000 	.word	0x406a6000
 8002bc0:	2000001d 	.word	0x2000001d
 8002bc4:	20000720 	.word	0x20000720
 8002bc8:	407f4000 	.word	0x407f4000
 8002bcc:	406c4000 	.word	0x406c4000
 8002bd0:	3ff00000 	.word	0x3ff00000
 8002bd4:	20000608 	.word	0x20000608
 8002bd8:	20000607 	.word	0x20000607

08002bdc <LCD_draw_main_screen>:


void LCD_draw_main_screen(){
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af02      	add	r7, sp, #8
	if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8002be2:	4bd8      	ldr	r3, [pc, #864]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002be4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	f7fd ff92 	bl	8000b18 <__aeabi_dcmpeq>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <LCD_draw_main_screen+0x38>
 8002bfa:	4bd2      	ldr	r3, [pc, #840]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002bfc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c08:	f7fd ff86 	bl	8000b18 <__aeabi_dcmpeq>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 81b6 	beq.w	8002f80 <LCD_draw_main_screen+0x3a4>
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fc57 	bl	80014c8 <RGB_to_BRG>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00f ff9d 	bl	8012b5c <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 8002c22:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c26:	f7fe fc4f 	bl	80014c8 <RGB_to_BRG>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe fc4a 	bl	80014c8 <RGB_to_BRG>
 8002c34:	4603      	mov	r3, r0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	9400      	str	r4, [sp, #0]
 8002c3a:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <LCD_draw_main_screen+0x36c>)
 8002c3c:	4ac3      	ldr	r2, [pc, #780]	; (8002f4c <LCD_draw_main_screen+0x370>)
 8002c3e:	210c      	movs	r1, #12
 8002c40:	2035      	movs	r0, #53	; 0x35
 8002c42:	f003 fd5f 	bl	8006704 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 8002c46:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c4a:	f7fe fc3d 	bl	80014c8 <RGB_to_BRG>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2328      	movs	r3, #40	; 0x28
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	2128      	movs	r1, #40	; 0x28
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f003 fd15 	bl	8006688 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002c5e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c62:	f7fe fc31 	bl	80014c8 <RGB_to_BRG>
 8002c66:	4603      	mov	r3, r0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2329      	movs	r3, #41	; 0x29
 8002c6c:	22f0      	movs	r2, #240	; 0xf0
 8002c6e:	2129      	movs	r1, #41	; 0x29
 8002c70:	2000      	movs	r0, #0
 8002c72:	f003 fd09 	bl	8006688 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8002c76:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002c7a:	f7fe fc25 	bl	80014c8 <RGB_to_BRG>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	232a      	movs	r3, #42	; 0x2a
 8002c84:	22f0      	movs	r2, #240	; 0xf0
 8002c86:	212a      	movs	r1, #42	; 0x2a
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f003 fcfd 	bl	8006688 <LCD_DrawLine>


		LCD_PutStr(14, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002c8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c92:	f7fe fc19 	bl	80014c8 <RGB_to_BRG>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461c      	mov	r4, r3
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fc14 	bl	80014c8 <RGB_to_BRG>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	9400      	str	r4, [sp, #0]
 8002ca6:	4baa      	ldr	r3, [pc, #680]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ca8:	4aaa      	ldr	r2, [pc, #680]	; (8002f54 <LCD_draw_main_screen+0x378>)
 8002caa:	2132      	movs	r1, #50	; 0x32
 8002cac:	200e      	movs	r0, #14
 8002cae:	f003 fd29 	bl	8006704 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002cb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cb6:	f7fe fc07 	bl	80014c8 <RGB_to_BRG>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	2155      	movs	r1, #85	; 0x55
 8002cc0:	2078      	movs	r0, #120	; 0x78
 8002cc2:	f010 f829 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 8002cc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cca:	f7fe fbfd 	bl	80014c8 <RGB_to_BRG>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	2155      	movs	r1, #85	; 0x55
 8002cd4:	2078      	movs	r0, #120	; 0x78
 8002cd6:	f010 f81f 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 8002cda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cde:	f7fe fbf3 	bl	80014c8 <RGB_to_BRG>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	2155      	movs	r1, #85	; 0x55
 8002ce8:	2078      	movs	r0, #120	; 0x78
 8002cea:	f010 f815 	bl	8012d18 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002cee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf2:	f7fe fbe9 	bl	80014c8 <RGB_to_BRG>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461c      	mov	r4, r3
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe fbe4 	bl	80014c8 <RGB_to_BRG>
 8002d00:	4603      	mov	r3, r0
 8002d02:	9301      	str	r3, [sp, #4]
 8002d04:	9400      	str	r4, [sp, #0]
 8002d06:	4b94      	ldr	r3, [pc, #592]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d08:	4a94      	ldr	r2, [pc, #592]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d0a:	214b      	movs	r1, #75	; 0x4b
 8002d0c:	2082      	movs	r0, #130	; 0x82
 8002d0e:	f003 fcf9 	bl	8006704 <LCD_PutStr>


		LCD_PutStr(14, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d16:	f7fe fbd7 	bl	80014c8 <RGB_to_BRG>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461c      	mov	r4, r3
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fe fbd2 	bl	80014c8 <RGB_to_BRG>
 8002d24:	4603      	mov	r3, r0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002d2c:	4a8c      	ldr	r2, [pc, #560]	; (8002f60 <LCD_draw_main_screen+0x384>)
 8002d2e:	218c      	movs	r1, #140	; 0x8c
 8002d30:	200e      	movs	r0, #14
 8002d32:	f003 fce7 	bl	8006704 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 8002d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d3a:	f7fe fbc5 	bl	80014c8 <RGB_to_BRG>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2205      	movs	r2, #5
 8002d42:	21af      	movs	r1, #175	; 0xaf
 8002d44:	2078      	movs	r0, #120	; 0x78
 8002d46:	f00f ffe7 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002d4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d4e:	f7fe fbbb 	bl	80014c8 <RGB_to_BRG>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2204      	movs	r2, #4
 8002d56:	21af      	movs	r1, #175	; 0xaf
 8002d58:	2078      	movs	r0, #120	; 0x78
 8002d5a:	f00f ffdd 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002d5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d62:	f7fe fbb1 	bl	80014c8 <RGB_to_BRG>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2203      	movs	r2, #3
 8002d6a:	21af      	movs	r1, #175	; 0xaf
 8002d6c:	2078      	movs	r0, #120	; 0x78
 8002d6e:	f00f ffd3 	bl	8012d18 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002d72:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d76:	f7fe fba7 	bl	80014c8 <RGB_to_BRG>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461c      	mov	r4, r3
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe fba2 	bl	80014c8 <RGB_to_BRG>
 8002d84:	4603      	mov	r3, r0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	9400      	str	r4, [sp, #0]
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <LCD_draw_main_screen+0x37c>)
 8002d8c:	4a73      	ldr	r2, [pc, #460]	; (8002f5c <LCD_draw_main_screen+0x380>)
 8002d8e:	21a5      	movs	r1, #165	; 0xa5
 8002d90:	2082      	movs	r0, #130	; 0x82
 8002d92:	f003 fcb7 	bl	8006704 <LCD_PutStr>

		UG_DrawFrame(6, 134, 182, 220, RGB_to_BRG(C_WHITE));
 8002d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002d9a:	f7fe fb95 	bl	80014c8 <RGB_to_BRG>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	23dc      	movs	r3, #220	; 0xdc
 8002da4:	22b6      	movs	r2, #182	; 0xb6
 8002da6:	2186      	movs	r1, #134	; 0x86
 8002da8:	2006      	movs	r0, #6
 8002daa:	f00f ff6d 	bl	8012c88 <UG_DrawFrame>
		UG_DrawFrame(5, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002db2:	f7fe fb89 	bl	80014c8 <RGB_to_BRG>
 8002db6:	4603      	mov	r3, r0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	23dd      	movs	r3, #221	; 0xdd
 8002dbc:	22b7      	movs	r2, #183	; 0xb7
 8002dbe:	2185      	movs	r1, #133	; 0x85
 8002dc0:	2005      	movs	r0, #5
 8002dc2:	f00f ff61 	bl	8012c88 <UG_DrawFrame>

		LCD_PutStr(6, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dca:	f7fe fb7d 	bl	80014c8 <RGB_to_BRG>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461c      	mov	r4, r3
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fe fb78 	bl	80014c8 <RGB_to_BRG>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	9400      	str	r4, [sp, #0]
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <LCD_draw_main_screen+0x38c>)
 8002de2:	21eb      	movs	r1, #235	; 0xeb
 8002de4:	2006      	movs	r0, #6
 8002de6:	f003 fc8d 	bl	8006704 <LCD_PutStr>
		LCD_PutStr(6, 255, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002dea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dee:	f7fe fb6b 	bl	80014c8 <RGB_to_BRG>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461c      	mov	r4, r3
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fe fb66 	bl	80014c8 <RGB_to_BRG>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9400      	str	r4, [sp, #0]
 8002e02:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e04:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <LCD_draw_main_screen+0x390>)
 8002e06:	21ff      	movs	r1, #255	; 0xff
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f003 fc7b 	bl	8006704 <LCD_PutStr>
		LCD_PutStr(6, 275, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002e0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e12:	f7fe fb59 	bl	80014c8 <RGB_to_BRG>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461c      	mov	r4, r3
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe fb54 	bl	80014c8 <RGB_to_BRG>
 8002e20:	4603      	mov	r3, r0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	9400      	str	r4, [sp, #0]
 8002e26:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <LCD_draw_main_screen+0x388>)
 8002e28:	4a51      	ldr	r2, [pc, #324]	; (8002f70 <LCD_draw_main_screen+0x394>)
 8002e2a:	f240 1113 	movw	r1, #275	; 0x113
 8002e2e:	2006      	movs	r0, #6
 8002e30:	f003 fc68 	bl	8006704 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e34:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e38:	f7fe fb46 	bl	80014c8 <RGB_to_BRG>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f44f 7394 	mov.w	r3, #296	; 0x128
 8002e44:	22f0      	movs	r2, #240	; 0xf0
 8002e46:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f010 f84a 	bl	8012ee4 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002e50:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e54:	f7fe fb38 	bl	80014c8 <RGB_to_BRG>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f240 1329 	movw	r3, #297	; 0x129
 8002e60:	22f0      	movs	r2, #240	; 0xf0
 8002e62:	f240 1129 	movw	r1, #297	; 0x129
 8002e66:	2002      	movs	r0, #2
 8002e68:	f010 f83c 	bl	8012ee4 <UG_DrawLine>


		LCD_PutStr(6, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002e6c:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002e70:	f7fe fb2a 	bl	80014c8 <RGB_to_BRG>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461c      	mov	r4, r3
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb25 	bl	80014c8 <RGB_to_BRG>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	9400      	str	r4, [sp, #0]
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <LCD_draw_main_screen+0x398>)
 8002e88:	f240 112d 	movw	r1, #301	; 0x12d
 8002e8c:	2006      	movs	r0, #6
 8002e8e:	f003 fc39 	bl	8006704 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002e92:	2228      	movs	r2, #40	; 0x28
 8002e94:	2100      	movs	r1, #0
 8002e96:	4838      	ldr	r0, [pc, #224]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002e98:	f014 fd7b 	bl	8017992 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002e9c:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002e9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ea2:	4936      	ldr	r1, [pc, #216]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ea6:	f014 fd11 	bl	80178cc <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002eaa:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eae:	f7fe fb0b 	bl	80014c8 <RGB_to_BRG>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461c      	mov	r4, r3
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fe fb06 	bl	80014c8 <RGB_to_BRG>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9400      	str	r4, [sp, #0]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002ec4:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ec6:	f240 112d 	movw	r1, #301	; 0x12d
 8002eca:	2082      	movs	r0, #130	; 0x82
 8002ecc:	f003 fc1a 	bl	8006704 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002ed0:	2228      	movs	r2, #40	; 0x28
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4828      	ldr	r0, [pc, #160]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ed6:	f014 fd5c 	bl	8017992 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <LCD_draw_main_screen+0x368>)
 8002edc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ee0:	4926      	ldr	r1, [pc, #152]	; (8002f7c <LCD_draw_main_screen+0x3a0>)
 8002ee2:	4825      	ldr	r0, [pc, #148]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002ee4:	f014 fcf2 	bl	80178cc <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002ee8:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002eec:	f7fe faec 	bl	80014c8 <RGB_to_BRG>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fae7 	bl	80014c8 <RGB_to_BRG>
 8002efa:	4603      	mov	r3, r0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	9400      	str	r4, [sp, #0]
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <LCD_draw_main_screen+0x374>)
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <LCD_draw_main_screen+0x39c>)
 8002f04:	f240 112d 	movw	r1, #301	; 0x12d
 8002f08:	20be      	movs	r0, #190	; 0xbe
 8002f0a:	f003 fbfb 	bl	8006704 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 8002f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f12:	f7fe fad9 	bl	80014c8 <RGB_to_BRG>
 8002f16:	4603      	mov	r3, r0
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	f240 1321 	movw	r3, #289	; 0x121
 8002f1e:	22e8      	movs	r2, #232	; 0xe8
 8002f20:	2135      	movs	r1, #53	; 0x35
 8002f22:	20d0      	movs	r0, #208	; 0xd0
 8002f24:	f00f feb0 	bl	8012c88 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 8002f28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f2c:	f7fe facc 	bl	80014c8 <RGB_to_BRG>
 8002f30:	4603      	mov	r3, r0
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002f38:	22e7      	movs	r2, #231	; 0xe7
 8002f3a:	2136      	movs	r1, #54	; 0x36
 8002f3c:	20d1      	movs	r0, #209	; 0xd1
 8002f3e:	f00f fea3 	bl	8012c88 <UG_DrawFrame>
 8002f42:	e113      	b.n	800316c <LCD_draw_main_screen+0x590>
 8002f44:	200006d0 	.word	0x200006d0
 8002f48:	0801c4f4 	.word	0x0801c4f4
 8002f4c:	0801b5a8 	.word	0x0801b5a8
 8002f50:	0801c728 	.word	0x0801c728
 8002f54:	0801b5b4 	.word	0x0801b5b4
 8002f58:	0801d638 	.word	0x0801d638
 8002f5c:	0801b5c0 	.word	0x0801b5c0
 8002f60:	0801b5c4 	.word	0x0801b5c4
 8002f64:	0801b758 	.word	0x0801b758
 8002f68:	0801b5d0 	.word	0x0801b5d0
 8002f6c:	0801b5e0 	.word	0x0801b5e0
 8002f70:	0801b5fc 	.word	0x0801b5fc
 8002f74:	0801b61c 	.word	0x0801b61c
 8002f78:	20000628 	.word	0x20000628
 8002f7c:	0801b548 	.word	0x0801b548
	}
	else{
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe faa1 	bl	80014c8 <RGB_to_BRG>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00f fde7 	bl	8012b5c <UG_FillScreen>

		LCD_PutStr(14, 5, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f92:	f7fe fa99 	bl	80014c8 <RGB_to_BRG>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461c      	mov	r4, r3
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fe fa94 	bl	80014c8 <RGB_to_BRG>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	9400      	str	r4, [sp, #0]
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <LCD_draw_main_screen+0x598>)
 8002fa8:	4a73      	ldr	r2, [pc, #460]	; (8003178 <LCD_draw_main_screen+0x59c>)
 8002faa:	2105      	movs	r1, #5
 8002fac:	200e      	movs	r0, #14
 8002fae:	f003 fba9 	bl	8006704 <LCD_PutStr>
		UG_DrawCircle(120, 40, 5, RGB_to_BRG(C_WHITE));
 8002fb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fb6:	f7fe fa87 	bl	80014c8 <RGB_to_BRG>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	2128      	movs	r1, #40	; 0x28
 8002fc0:	2078      	movs	r0, #120	; 0x78
 8002fc2:	f00f fea9 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 4, RGB_to_BRG(C_WHITE));
 8002fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fca:	f7fe fa7d 	bl	80014c8 <RGB_to_BRG>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	2128      	movs	r1, #40	; 0x28
 8002fd4:	2078      	movs	r0, #120	; 0x78
 8002fd6:	f00f fe9f 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 40, 3, RGB_to_BRG(C_WHITE));
 8002fda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002fde:	f7fe fa73 	bl	80014c8 <RGB_to_BRG>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	2128      	movs	r1, #40	; 0x28
 8002fe8:	2078      	movs	r0, #120	; 0x78
 8002fea:	f00f fe95 	bl	8012d18 <UG_DrawCircle>
		LCD_PutStr(130, 30, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002fee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002ff2:	f7fe fa69 	bl	80014c8 <RGB_to_BRG>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461c      	mov	r4, r3
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fe fa64 	bl	80014c8 <RGB_to_BRG>
 8003000:	4603      	mov	r3, r0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9400      	str	r4, [sp, #0]
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <LCD_draw_main_screen+0x5a0>)
 8003008:	4a5d      	ldr	r2, [pc, #372]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800300a:	211e      	movs	r1, #30
 800300c:	2082      	movs	r0, #130	; 0x82
 800300e:	f003 fb79 	bl	8006704 <LCD_PutStr>


		LCD_PutStr(14, 95, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003012:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003016:	f7fe fa57 	bl	80014c8 <RGB_to_BRG>
 800301a:	4603      	mov	r3, r0
 800301c:	461c      	mov	r4, r3
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe fa52 	bl	80014c8 <RGB_to_BRG>
 8003024:	4603      	mov	r3, r0
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9400      	str	r4, [sp, #0]
 800302a:	4b52      	ldr	r3, [pc, #328]	; (8003174 <LCD_draw_main_screen+0x598>)
 800302c:	4a55      	ldr	r2, [pc, #340]	; (8003184 <LCD_draw_main_screen+0x5a8>)
 800302e:	215f      	movs	r1, #95	; 0x5f
 8003030:	200e      	movs	r0, #14
 8003032:	f003 fb67 	bl	8006704 <LCD_PutStr>
		UG_DrawCircle(120, 130, 5, RGB_to_BRG(C_WHITE));
 8003036:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800303a:	f7fe fa45 	bl	80014c8 <RGB_to_BRG>
 800303e:	4603      	mov	r3, r0
 8003040:	2205      	movs	r2, #5
 8003042:	2182      	movs	r1, #130	; 0x82
 8003044:	2078      	movs	r0, #120	; 0x78
 8003046:	f00f fe67 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 4, RGB_to_BRG(C_WHITE));
 800304a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800304e:	f7fe fa3b 	bl	80014c8 <RGB_to_BRG>
 8003052:	4603      	mov	r3, r0
 8003054:	2204      	movs	r2, #4
 8003056:	2182      	movs	r1, #130	; 0x82
 8003058:	2078      	movs	r0, #120	; 0x78
 800305a:	f00f fe5d 	bl	8012d18 <UG_DrawCircle>
		UG_DrawCircle(120, 130, 3, RGB_to_BRG(C_WHITE));
 800305e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003062:	f7fe fa31 	bl	80014c8 <RGB_to_BRG>
 8003066:	4603      	mov	r3, r0
 8003068:	2203      	movs	r2, #3
 800306a:	2182      	movs	r1, #130	; 0x82
 800306c:	2078      	movs	r0, #120	; 0x78
 800306e:	f00f fe53 	bl	8012d18 <UG_DrawCircle>
		LCD_PutStr(130, 120, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8003072:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003076:	f7fe fa27 	bl	80014c8 <RGB_to_BRG>
 800307a:	4603      	mov	r3, r0
 800307c:	461c      	mov	r4, r3
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fa22 	bl	80014c8 <RGB_to_BRG>
 8003084:	4603      	mov	r3, r0
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	9400      	str	r4, [sp, #0]
 800308a:	4b3c      	ldr	r3, [pc, #240]	; (800317c <LCD_draw_main_screen+0x5a0>)
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <LCD_draw_main_screen+0x5a4>)
 800308e:	2178      	movs	r1, #120	; 0x78
 8003090:	2082      	movs	r0, #130	; 0x82
 8003092:	f003 fb37 	bl	8006704 <LCD_PutStr>

		UG_DrawFrame(6, 89, 182,175, RGB_to_BRG(C_WHITE));
 8003096:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800309a:	f7fe fa15 	bl	80014c8 <RGB_to_BRG>
 800309e:	4603      	mov	r3, r0
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	23af      	movs	r3, #175	; 0xaf
 80030a4:	22b6      	movs	r2, #182	; 0xb6
 80030a6:	2159      	movs	r1, #89	; 0x59
 80030a8:	2006      	movs	r0, #6
 80030aa:	f00f fded 	bl	8012c88 <UG_DrawFrame>
		UG_DrawFrame(5, 88, 183, 176, RGB_to_BRG(C_WHITE));
 80030ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030b2:	f7fe fa09 	bl	80014c8 <RGB_to_BRG>
 80030b6:	4603      	mov	r3, r0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	23b0      	movs	r3, #176	; 0xb0
 80030bc:	22b7      	movs	r2, #183	; 0xb7
 80030be:	2158      	movs	r1, #88	; 0x58
 80030c0:	2005      	movs	r0, #5
 80030c2:	f00f fde1 	bl	8012c88 <UG_DrawFrame>

		LCD_PutStr(6, 180, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ca:	f7fe f9fd 	bl	80014c8 <RGB_to_BRG>
 80030ce:	4603      	mov	r3, r0
 80030d0:	461c      	mov	r4, r3
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe f9f8 	bl	80014c8 <RGB_to_BRG>
 80030d8:	4603      	mov	r3, r0
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9400      	str	r4, [sp, #0]
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 80030e0:	4a2a      	ldr	r2, [pc, #168]	; (800318c <LCD_draw_main_screen+0x5b0>)
 80030e2:	21b4      	movs	r1, #180	; 0xb4
 80030e4:	2006      	movs	r0, #6
 80030e6:	f003 fb0d 	bl	8006704 <LCD_PutStr>
		LCD_PutStr(6, 195, "Input voltage:           V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80030ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80030ee:	f7fe f9eb 	bl	80014c8 <RGB_to_BRG>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461c      	mov	r4, r3
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe f9e6 	bl	80014c8 <RGB_to_BRG>
 80030fc:	4603      	mov	r3, r0
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9400      	str	r4, [sp, #0]
 8003102:	4b21      	ldr	r3, [pc, #132]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <LCD_draw_main_screen+0x5b4>)
 8003106:	21c3      	movs	r1, #195	; 0xc3
 8003108:	2006      	movs	r0, #6
 800310a:	f003 fafb 	bl	8006704 <LCD_PutStr>
		LCD_PutStr(6, 210, "MCU temp:              deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800310e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003112:	f7fe f9d9 	bl	80014c8 <RGB_to_BRG>
 8003116:	4603      	mov	r3, r0
 8003118:	461c      	mov	r4, r3
 800311a:	2000      	movs	r0, #0
 800311c:	f7fe f9d4 	bl	80014c8 <RGB_to_BRG>
 8003120:	4603      	mov	r3, r0
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	4b18      	ldr	r3, [pc, #96]	; (8003188 <LCD_draw_main_screen+0x5ac>)
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <LCD_draw_main_screen+0x5b8>)
 800312a:	21d2      	movs	r1, #210	; 0xd2
 800312c:	2006      	movs	r0, #6
 800312e:	f003 fae9 	bl	8006704 <LCD_PutStr>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
		memset(&buffer, '\0', sizeof(buffer));
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
		LCD_PutStr(190, 271, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
*/
		UG_DrawFrame(288, 3, 312, 228, RGB_to_BRG(C_WHITE));
 8003132:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003136:	f7fe f9c7 	bl	80014c8 <RGB_to_BRG>
 800313a:	4603      	mov	r3, r0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	23e4      	movs	r3, #228	; 0xe4
 8003140:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003144:	2103      	movs	r1, #3
 8003146:	f44f 7090 	mov.w	r0, #288	; 0x120
 800314a:	f00f fd9d 	bl	8012c88 <UG_DrawFrame>
		UG_DrawFrame(289, 4, 311, 227, RGB_to_BRG(C_WHITE));
 800314e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003152:	f7fe f9b9 	bl	80014c8 <RGB_to_BRG>
 8003156:	4603      	mov	r3, r0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	23e3      	movs	r3, #227	; 0xe3
 800315c:	f240 1237 	movw	r2, #311	; 0x137
 8003160:	2104      	movs	r1, #4
 8003162:	f240 1021 	movw	r0, #289	; 0x121
 8003166:	f00f fd8f 	bl	8012c88 <UG_DrawFrame>

	}
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	3704      	adds	r7, #4
 8003170:	46bd      	mov	sp, r7
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	0801c728 	.word	0x0801c728
 8003178:	0801b5b4 	.word	0x0801b5b4
 800317c:	0801d638 	.word	0x0801d638
 8003180:	0801b5c0 	.word	0x0801b5c0
 8003184:	0801b5c4 	.word	0x0801b5c4
 8003188:	0801b758 	.word	0x0801b758
 800318c:	0801b5d0 	.word	0x0801b5d0
 8003190:	0801b5e0 	.word	0x0801b5e0
 8003194:	0801b5fc 	.word	0x0801b5fc

08003198 <LCD_draw_earth_fault_popup>:

void LCD_draw_earth_fault_popup(){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b083      	sub	sp, #12
 800319c:	af02      	add	r7, sp, #8
	heater_off();
 800319e:	f7fe fbb5 	bl	800190c <heater_off>

	UG_FillFrame(10, 50, 205, 205, RGB_to_BRG(C_ORANGE));
 80031a2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031a6:	f7fe f98f 	bl	80014c8 <RGB_to_BRG>
 80031aa:	4603      	mov	r3, r0
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	23cd      	movs	r3, #205	; 0xcd
 80031b0:	22cd      	movs	r2, #205	; 0xcd
 80031b2:	2132      	movs	r1, #50	; 0x32
 80031b4:	200a      	movs	r0, #10
 80031b6:	f00f fcf5 	bl	8012ba4 <UG_FillFrame>
	UG_FillFrame(15, 55, 200, 200, RGB_to_BRG(C_WHITE));
 80031ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031be:	f7fe f983 	bl	80014c8 <RGB_to_BRG>
 80031c2:	4603      	mov	r3, r0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	23c8      	movs	r3, #200	; 0xc8
 80031c8:	22c8      	movs	r2, #200	; 0xc8
 80031ca:	2137      	movs	r1, #55	; 0x37
 80031cc:	200f      	movs	r0, #15
 80031ce:	f00f fce9 	bl	8012ba4 <UG_FillFrame>
	LCD_PutStr(20, 60, "GROUNDING", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80031d2:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031d6:	f7fe f977 	bl	80014c8 <RGB_to_BRG>
 80031da:	4603      	mov	r3, r0
 80031dc:	461c      	mov	r4, r3
 80031de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80031e2:	f7fe f971 	bl	80014c8 <RGB_to_BRG>
 80031e6:	4603      	mov	r3, r0
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	9400      	str	r4, [sp, #0]
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <LCD_draw_earth_fault_popup+0x104>)
 80031ee:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <LCD_draw_earth_fault_popup+0x108>)
 80031f0:	213c      	movs	r1, #60	; 0x3c
 80031f2:	2014      	movs	r0, #20
 80031f4:	f003 fa86 	bl	8006704 <LCD_PutStr>
	LCD_PutStr(20, 80, "ERROR", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 80031f8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80031fc:	f7fe f964 	bl	80014c8 <RGB_to_BRG>
 8003200:	4603      	mov	r3, r0
 8003202:	461c      	mov	r4, r3
 8003204:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003208:	f7fe f95e 	bl	80014c8 <RGB_to_BRG>
 800320c:	4603      	mov	r3, r0
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	9400      	str	r4, [sp, #0]
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <LCD_draw_earth_fault_popup+0x104>)
 8003214:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <LCD_draw_earth_fault_popup+0x10c>)
 8003216:	2150      	movs	r1, #80	; 0x50
 8003218:	2014      	movs	r0, #20
 800321a:	f003 fa73 	bl	8006704 <LCD_PutStr>

	LCD_PutStr(20, 120, "CHECK", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800321e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003222:	f7fe f951 	bl	80014c8 <RGB_to_BRG>
 8003226:	4603      	mov	r3, r0
 8003228:	461c      	mov	r4, r3
 800322a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800322e:	f7fe f94b 	bl	80014c8 <RGB_to_BRG>
 8003232:	4603      	mov	r3, r0
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9400      	str	r4, [sp, #0]
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <LCD_draw_earth_fault_popup+0x104>)
 800323a:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <LCD_draw_earth_fault_popup+0x110>)
 800323c:	2178      	movs	r1, #120	; 0x78
 800323e:	2014      	movs	r0, #20
 8003240:	f003 fa60 	bl	8006704 <LCD_PutStr>
	LCD_PutStr(20, 140, "CONNECTIONS", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 8003244:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8003248:	f7fe f93e 	bl	80014c8 <RGB_to_BRG>
 800324c:	4603      	mov	r3, r0
 800324e:	461c      	mov	r4, r3
 8003250:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003254:	f7fe f938 	bl	80014c8 <RGB_to_BRG>
 8003258:	4603      	mov	r3, r0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	9400      	str	r4, [sp, #0]
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <LCD_draw_earth_fault_popup+0x104>)
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <LCD_draw_earth_fault_popup+0x114>)
 8003262:	218c      	movs	r1, #140	; 0x8c
 8003264:	2014      	movs	r0, #20
 8003266:	f003 fa4d 	bl	8006704 <LCD_PutStr>
	LCD_PutStr(20, 160, "AND REBOOT", FONT_arial_20X23, RGB_to_BRG(C_ORANGE), RGB_to_BRG(C_WHITE));
 800326a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800326e:	f7fe f92b 	bl	80014c8 <RGB_to_BRG>
 8003272:	4603      	mov	r3, r0
 8003274:	461c      	mov	r4, r3
 8003276:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800327a:	f7fe f925 	bl	80014c8 <RGB_to_BRG>
 800327e:	4603      	mov	r3, r0
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	9400      	str	r4, [sp, #0]
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <LCD_draw_earth_fault_popup+0x104>)
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <LCD_draw_earth_fault_popup+0x118>)
 8003288:	21a0      	movs	r1, #160	; 0xa0
 800328a:	2014      	movs	r0, #20
 800328c:	f003 fa3a 	bl	8006704 <LCD_PutStr>

	Error_Handler();
 8003290:	f001 fc5e 	bl	8004b50 <Error_Handler>
}
 8003294:	bf00      	nop
 8003296:	3704      	adds	r7, #4
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}
 800329c:	0801c728 	.word	0x0801c728
 80032a0:	0801b624 	.word	0x0801b624
 80032a4:	0801b630 	.word	0x0801b630
 80032a8:	0801b638 	.word	0x0801b638
 80032ac:	0801b640 	.word	0x0801b640
 80032b0:	0801b64c 	.word	0x0801b64c

080032b4 <get_set_temperature>:


/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 80032b4:	b598      	push	{r3, r4, r7, lr}
 80032b6:	af00      	add	r7, sp, #0
	if(custom_temperature_on == 0){
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <get_set_temperature+0x70>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d12f      	bne.n	8003320 <get_set_temperature+0x6c>
		TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 80032c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f944 	bl	8000554 <__aeabi_ui2d>
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <get_set_temperature+0x74>)
 80032ce:	ed93 7b00 	vldr	d7, [r3]
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <get_set_temperature+0x78>)
 80032d4:	ed93 6b00 	vldr	d6, [r3]
 80032d8:	eeb0 2a46 	vmov.f32	s4, s12
 80032dc:	eef0 2a66 	vmov.f32	s5, s13
 80032e0:	eeb0 1a47 	vmov.f32	s2, s14
 80032e4:	eef0 1a67 	vmov.f32	s3, s15
 80032e8:	ec41 0b10 	vmov	d0, r0, r1
 80032ec:	f7fe f822 	bl	8001334 <clamp>
 80032f0:	ec53 2b10 	vmov	r2, r3, d0
 80032f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fc7c 	bl	8000bf8 <__aeabi_d2uiz>
 8003300:	4603      	mov	r3, r0
 8003302:	6263      	str	r3, [r4, #36]	; 0x24
		sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 8003304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f92f 	bl	8000574 <__aeabi_i2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4905      	ldr	r1, [pc, #20]	; (8003330 <get_set_temperature+0x7c>)
 800331c:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8003320:	bf00      	nop
 8003322:	bd98      	pop	{r3, r4, r7, pc}
 8003324:	200006c8 	.word	0x200006c8
 8003328:	20000028 	.word	0x20000028
 800332c:	20000030 	.word	0x20000030
 8003330:	20000038 	.word	0x20000038

08003334 <beep>:

/* Beep the beeper */
void beep(){
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 8003338:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <beep+0x30>)
 800333a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <beep+0x34>)
 8003344:	f7fd fbe8 	bl	8000b18 <__aeabi_dcmpeq>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d100      	bne.n	8003350 <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 800334e:	e006      	b.n	800335e <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8003350:	2104      	movs	r1, #4
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <beep+0x38>)
 8003354:	f00a fd02 	bl	800dd5c <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 8003358:	4805      	ldr	r0, [pc, #20]	; (8003370 <beep+0x3c>)
 800335a:	f00a fc0f 	bl	800db7c <HAL_TIM_Base_Start_IT>
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200006d0 	.word	0x200006d0
 8003368:	3ff00000 	.word	0x3ff00000
 800336c:	2000207c 	.word	0x2000207c
 8003370:	200021f8 	.word	0x200021f8
 8003374:	00000000 	.word	0x00000000

08003378 <handle_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void handle_emergency_shutdown(){
 8003378:	b5b0      	push	{r4, r5, r7, lr}
 800337a:	af00      	add	r7, sp, #0
	/* Get time when iron turns on */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <handle_emergency_shutdown+0xd8>)
 800337e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <handle_emergency_shutdown+0x20>
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <handle_emergency_shutdown+0xdc>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <handle_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 800338e:	f003 fac7 	bl	8006920 <HAL_GetTick>
 8003392:	4603      	mov	r3, r0
 8003394:	4a30      	ldr	r2, [pc, #192]	; (8003458 <handle_emergency_shutdown+0xe0>)
 8003396:	6013      	str	r3, [r2, #0]
	}

	/* Set state to EMERGENCY_SLEEP if iron ON for longer time than emergency_time */
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8003398:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <handle_emergency_shutdown+0xd8>)
 800339a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f7fd fbb7 	bl	8000b18 <__aeabi_dcmpeq>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d024      	beq.n	80033fa <handle_emergency_shutdown+0x82>
 80033b0:	f003 fab6 	bl	8006920 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <handle_emergency_shutdown+0xe0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f8c9 	bl	8000554 <__aeabi_ui2d>
 80033c2:	4604      	mov	r4, r0
 80033c4:	460d      	mov	r5, r1
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <handle_emergency_shutdown+0xe4>)
 80033c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80033cc:	a31e      	add	r3, pc, #120	; (adr r3, 8003448 <handle_emergency_shutdown+0xd0>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd f939 	bl	8000648 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fd fbb9 	bl	8000b54 <__aeabi_dcmpge>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <handle_emergency_shutdown+0x82>
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <handle_emergency_shutdown+0xdc>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <handle_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f7fe f87f 	bl	80014f4 <change_state>
		beep();
 80033f6:	f7ff ff9d 	bl	8003334 <beep>
	}

	/* Set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <handle_emergency_shutdown+0xd8>)
 80033fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	4b16      	ldr	r3, [pc, #88]	; (8003460 <handle_emergency_shutdown+0xe8>)
 8003406:	f7fd fbaf 	bl	8000b68 <__aeabi_dcmpgt>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <handle_emergency_shutdown+0xaa>
 8003410:	4b10      	ldr	r3, [pc, #64]	; (8003454 <handle_emergency_shutdown+0xdc>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <handle_emergency_shutdown+0xaa>
		change_state(EMERGENCY_SLEEP);
 8003418:	2003      	movs	r0, #3
 800341a:	f7fe f86b 	bl	80014f4 <change_state>
		beep();
 800341e:	f7ff ff89 	bl	8003334 <beep>
	}
	/* Set state to EMERGENCY_SLEEP if input voltage is too low */
	if(sensor_values.bus_voltage <= MIN_BUSVOLTAGE){
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <handle_emergency_shutdown+0xd8>)
 8003424:	edd3 7a04 	vldr	s15, [r3, #16]
 8003428:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800342c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	d900      	bls.n	8003438 <handle_emergency_shutdown+0xc0>
		change_state(EMERGENCY_SLEEP);
	}
}
 8003436:	e002      	b.n	800343e <handle_emergency_shutdown+0xc6>
		change_state(EMERGENCY_SLEEP);
 8003438:	2003      	movs	r0, #3
 800343a:	f7fe f85b 	bl	80014f4 <change_state>
}
 800343e:	bf00      	nop
 8003440:	bdb0      	pop	{r4, r5, r7, pc}
 8003442:	bf00      	nop
 8003444:	f3af 8000 	nop.w
 8003448:	00000000 	.word	0x00000000
 800344c:	40ed4c00 	.word	0x40ed4c00
 8003450:	20000038 	.word	0x20000038
 8003454:	2000001d 	.word	0x2000001d
 8003458:	200005f0 	.word	0x200005f0
 800345c:	200006d0 	.word	0x200006d0
 8003460:	407e0000 	.word	0x407e0000

08003464 <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 8003464:	b598      	push	{r3, r4, r7, lr}
 8003466:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <handle_button_status+0x98>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11e      	bne.n	80034ae <handle_button_status+0x4a>
		SW_1_pressed = 0;
 8003470:	4b22      	ldr	r3, [pc, #136]	; (80034fc <handle_button_status+0x98>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <handle_button_status+0x9c>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <handle_button_status+0x22>
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <handle_button_status+0x9c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d103      	bne.n	800348e <handle_button_status+0x2a>
			change_state(HALTED);
 8003486:	2004      	movs	r0, #4
 8003488:	f7fe f834 	bl	80014f4 <change_state>
 800348c:	e00a      	b.n	80034a4 <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <handle_button_status+0x9c>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d003      	beq.n	800349e <handle_button_status+0x3a>
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <handle_button_status+0x9c>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d102      	bne.n	80034a4 <handle_button_status+0x40>
			change_state(RUN);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fe f828 	bl	80014f4 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 80034a4:	f003 fa3c 	bl	8006920 <HAL_GetTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <handle_button_status+0xa0>)
 80034ac:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <handle_button_status+0xa4>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10d      	bne.n	80034d2 <handle_button_status+0x6e>
		SW_2_pressed = 0;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <handle_button_status+0xa4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <handle_button_status+0xa8>)
 80034be:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80034c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fd fb95 	bl	8000bf8 <__aeabi_d2uiz>
 80034ce:	4603      	mov	r3, r0
 80034d0:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <handle_button_status+0xac>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10d      	bne.n	80034f6 <handle_button_status+0x92>
		SW_3_pressed = 0;
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <handle_button_status+0xac>)
 80034dc:	2200      	movs	r2, #0
 80034de:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <handle_button_status+0xa8>)
 80034e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80034e6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb83 	bl	8000bf8 <__aeabi_d2uiz>
 80034f2:	4603      	mov	r3, r0
 80034f4:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 80034f6:	bf00      	nop
 80034f8:	bd98      	pop	{r3, r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000604 	.word	0x20000604
 8003500:	2000001d 	.word	0x2000001d
 8003504:	200005ec 	.word	0x200005ec
 8003508:	20000605 	.word	0x20000605
 800350c:	200006d0 	.word	0x200006d0
 8003510:	20000606 	.word	0x20000606
 8003514:	00000000 	.word	0x00000000

08003518 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003524:	f006 ff3e 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <get_stand_status+0x1c>
		stand_status = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	71fb      	strb	r3, [r7, #7]
 8003532:	e001      	b.n	8003538 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	493b      	ldr	r1, [pc, #236]	; (8003628 <get_stand_status+0x110>)
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fb3d 	bl	8004bbc <Moving_Average_Compute>
 8003542:	eeb0 7a40 	vmov.f32	s14, s0
 8003546:	eef0 7a60 	vmov.f32	s15, s1
 800354a:	4b38      	ldr	r3, [pc, #224]	; (800362c <get_stand_status+0x114>)
 800354c:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand >= 0.2){
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <get_stand_status+0x114>)
 8003552:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003556:	a330      	add	r3, pc, #192	; (adr r3, 8003618 <get_stand_status+0x100>)
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f7fd fafa 	bl	8000b54 <__aeabi_dcmpge>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d039      	beq.n	80035da <get_stand_status+0xc2>
		if(active_state == RUN){
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <get_stand_status+0x118>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <get_stand_status+0x66>
			change_state(STANDBY);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fd ffc0 	bl	80014f4 <change_state>
			previous_standby_millis = HAL_GetTick();
 8003574:	f003 f9d4 	bl	8006920 <HAL_GetTick>
 8003578:	4603      	mov	r3, r0
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <get_stand_status+0x11c>)
 800357c:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 800357e:	f003 f9cf 	bl	8006920 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <get_stand_status+0x11c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffe2 	bl	8000554 <__aeabi_ui2d>
 8003590:	4604      	mov	r4, r0
 8003592:	460d      	mov	r5, r1
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <get_stand_status+0x120>)
 8003596:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800359a:	a321      	add	r3, pc, #132	; (adr r3, 8003620 <get_stand_status+0x108>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f7fd f852 	bl	8000648 <__aeabi_dmul>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4620      	mov	r0, r4
 80035aa:	4629      	mov	r1, r5
 80035ac:	f7fd fad2 	bl	8000b54 <__aeabi_dcmpge>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <get_stand_status+0xac>
 80035b6:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <get_stand_status+0x118>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <get_stand_status+0xac>
			change_state(SLEEP);
 80035be:	2002      	movs	r0, #2
 80035c0:	f7fd ff98 	bl	80014f4 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <get_stand_status+0x118>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d003      	beq.n	80035d4 <get_stand_status+0xbc>
 80035cc:	4b18      	ldr	r3, [pc, #96]	; (8003630 <get_stand_status+0x118>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d102      	bne.n	80035da <get_stand_status+0xc2>
			change_state(SLEEP);
 80035d4:	2002      	movs	r0, #2
 80035d6:	f7fd ff8d 	bl	80014f4 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.2){
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <get_stand_status+0x114>)
 80035dc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80035e0:	a30d      	add	r3, pc, #52	; (adr r3, 8003618 <get_stand_status+0x100>)
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f7fd faa1 	bl	8000b2c <__aeabi_dcmplt>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d100      	bne.n	80035f2 <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
			change_state(RUN);
		}
	}
}
 80035f0:	e00e      	b.n	8003610 <get_stand_status+0xf8>
		if((active_state == SLEEP) || (active_state == STANDBY) || (active_state == RUN)){
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <get_stand_status+0x118>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d007      	beq.n	800360a <get_stand_status+0xf2>
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <get_stand_status+0x118>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d003      	beq.n	800360a <get_stand_status+0xf2>
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <get_stand_status+0x118>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <get_stand_status+0xf8>
			change_state(RUN);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fd ff72 	bl	80014f4 <change_state>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bdb0      	pop	{r4, r5, r7, pc}
 8003618:	9999999a 	.word	0x9999999a
 800361c:	3fc99999 	.word	0x3fc99999
 8003620:	00000000 	.word	0x00000000
 8003624:	40ed4c00 	.word	0x40ed4c00
 8003628:	200013ec 	.word	0x200013ec
 800362c:	20000038 	.word	0x20000038
 8003630:	2000001d 	.word	0x2000001d
 8003634:	200005f4 	.word	0x200005f4
 8003638:	200006d0 	.word	0x200006d0
 800363c:	00000000 	.word	0x00000000

08003640 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8003640:	b5b0      	push	{r4, r5, r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_1_Pin) == 0){
 8003646:	2110      	movs	r1, #16
 8003648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364c:	f006 feaa 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <get_handle_type+0x1c>
		handle_status = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	71fb      	strb	r3, [r7, #7]
 800365a:	e001      	b.n	8003660 <get_handle_type+0x20>
	}
	else{
		handle_status = 1;
 800365c:	2301      	movs	r3, #1
 800365e:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle1_sense = Moving_Average_Compute(handle_status, &handle1_sense_filterStruct); /* Moving average filter */
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	496f      	ldr	r1, [pc, #444]	; (8003820 <get_handle_type+0x1e0>)
 8003664:	4618      	mov	r0, r3
 8003666:	f001 faa9 	bl	8004bbc <Moving_Average_Compute>
 800366a:	eeb0 7a40 	vmov.f32	s14, s0
 800366e:	eef0 7a60 	vmov.f32	s15, s1
 8003672:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <get_handle_type+0x1e4>)
 8003674:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_2_Pin) == 0){
 8003678:	2120      	movs	r1, #32
 800367a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800367e:	f006 fe91 	bl	800a3a4 <HAL_GPIO_ReadPin>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <get_handle_type+0x4e>
		handle_status = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	71fb      	strb	r3, [r7, #7]
 800368c:	e001      	b.n	8003692 <get_handle_type+0x52>
	}
	else{
		handle_status = 1;
 800368e:	2301      	movs	r3, #1
 8003690:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle2_sense = Moving_Average_Compute(handle_status, &handle2_sense_filterStruct); /* Moving average filter */
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	4964      	ldr	r1, [pc, #400]	; (8003828 <get_handle_type+0x1e8>)
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fa90 	bl	8004bbc <Moving_Average_Compute>
 800369c:	eeb0 7a40 	vmov.f32	s14, s0
 80036a0:	eef0 7a60 	vmov.f32	s15, s1
 80036a4:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <get_handle_type+0x1e4>)
 80036a6:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	/* Determine if NT115 handle is detected */
	if((sensor_values.handle1_sense >= 0.5) && (sensor_values.handle2_sense < 0.5)){
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <get_handle_type+0x1e4>)
 80036ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b5d      	ldr	r3, [pc, #372]	; (800382c <get_handle_type+0x1ec>)
 80036b6:	f7fd fa4d 	bl	8000b54 <__aeabi_dcmpge>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d029      	beq.n	8003714 <get_handle_type+0xd4>
 80036c0:	4b58      	ldr	r3, [pc, #352]	; (8003824 <get_handle_type+0x1e4>)
 80036c2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	4b58      	ldr	r3, [pc, #352]	; (800382c <get_handle_type+0x1ec>)
 80036cc:	f7fd fa2e 	bl	8000b2c <__aeabi_dcmplt>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01e      	beq.n	8003714 <get_handle_type+0xd4>
		handle = NT115;
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <get_handle_type+0x1f0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 20; //20W
 80036dc:	4b51      	ldr	r3, [pc, #324]	; (8003824 <get_handle_type+0x1e4>)
 80036de:	4a55      	ldr	r2, [pc, #340]	; (8003834 <get_handle_type+0x1f4>)
 80036e0:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 3;
 80036e2:	4955      	ldr	r1, [pc, #340]	; (8003838 <get_handle_type+0x1f8>)
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	4b54      	ldr	r3, [pc, #336]	; (800383c <get_handle_type+0x1fc>)
 80036ea:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 1;
 80036ee:	4954      	ldr	r1, [pc, #336]	; (8003840 <get_handle_type+0x200>)
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <get_handle_type+0x204>)
 80036f6:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 80036fa:	4953      	ldr	r1, [pc, #332]	; (8003848 <get_handle_type+0x208>)
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	4b52      	ldr	r3, [pc, #328]	; (800384c <get_handle_type+0x20c>)
 8003702:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 100;
 8003706:	4952      	ldr	r1, [pc, #328]	; (8003850 <get_handle_type+0x210>)
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	4b51      	ldr	r3, [pc, #324]	; (8003854 <get_handle_type+0x214>)
 800370e:	e9c1 2300 	strd	r2, r3, [r1]
 8003712:	e052      	b.n	80037ba <get_handle_type+0x17a>
	}
	/* Determine if T210 handle is detected */
	else if((sensor_values.handle1_sense < 0.5) && (sensor_values.handle2_sense >= 0.5)){
 8003714:	4b43      	ldr	r3, [pc, #268]	; (8003824 <get_handle_type+0x1e4>)
 8003716:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	4b43      	ldr	r3, [pc, #268]	; (800382c <get_handle_type+0x1ec>)
 8003720:	f7fd fa04 	bl	8000b2c <__aeabi_dcmplt>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d029      	beq.n	800377e <get_handle_type+0x13e>
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <get_handle_type+0x1e4>)
 800372c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	4b3d      	ldr	r3, [pc, #244]	; (800382c <get_handle_type+0x1ec>)
 8003736:	f7fd fa0d 	bl	8000b54 <__aeabi_dcmpge>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01e      	beq.n	800377e <get_handle_type+0x13e>
		handle = T210;
 8003740:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <get_handle_type+0x1f0>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <get_handle_type+0x1e4>)
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <get_handle_type+0x218>)
 800374a:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 5;
 800374c:	493a      	ldr	r1, [pc, #232]	; (8003838 <get_handle_type+0x1f8>)
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <get_handle_type+0x21c>)
 8003754:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 5;
 8003758:	4939      	ldr	r1, [pc, #228]	; (8003840 <get_handle_type+0x200>)
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <get_handle_type+0x21c>)
 8003760:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8003764:	4938      	ldr	r1, [pc, #224]	; (8003848 <get_handle_type+0x208>)
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <get_handle_type+0x1ec>)
 800376c:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 125;
 8003770:	4937      	ldr	r1, [pc, #220]	; (8003850 <get_handle_type+0x210>)
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <get_handle_type+0x220>)
 8003778:	e9c1 2300 	strd	r2, r3, [r1]
 800377c:	e01d      	b.n	80037ba <get_handle_type+0x17a>
	}
	else{
		handle = T245;
 800377e:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <get_handle_type+0x1f0>)
 8003780:	2202      	movs	r2, #2
 8003782:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <get_handle_type+0x1e4>)
 8003786:	4a37      	ldr	r2, [pc, #220]	; (8003864 <get_handle_type+0x224>)
 8003788:	649a      	str	r2, [r3, #72]	; 0x48
		Kp = 8;
 800378a:	492b      	ldr	r1, [pc, #172]	; (8003838 <get_handle_type+0x1f8>)
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	4b35      	ldr	r3, [pc, #212]	; (8003868 <get_handle_type+0x228>)
 8003792:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8003796:	492a      	ldr	r1, [pc, #168]	; (8003840 <get_handle_type+0x200>)
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <get_handle_type+0x1fc>)
 800379e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 80037a2:	4929      	ldr	r1, [pc, #164]	; (8003848 <get_handle_type+0x208>)
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <get_handle_type+0x1ec>)
 80037aa:	e9c1 2300 	strd	r2, r3, [r1]
		PID_MAX_I_LIMIT = 150;
 80037ae:	4928      	ldr	r1, [pc, #160]	; (8003850 <get_handle_type+0x210>)
 80037b0:	a319      	add	r3, pc, #100	; (adr r3, 8003818 <get_handle_type+0x1d8>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <get_handle_type+0x1f8>)
 80037bc:	ed93 7b00 	vldr	d7, [r3]
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <get_handle_type+0x200>)
 80037c2:	ed93 6b00 	vldr	d6, [r3]
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <get_handle_type+0x208>)
 80037c8:	ed93 5b00 	vldr	d5, [r3]
 80037cc:	eeb0 2a45 	vmov.f32	s4, s10
 80037d0:	eef0 2a65 	vmov.f32	s5, s11
 80037d4:	eeb0 1a46 	vmov.f32	s2, s12
 80037d8:	eef0 1a66 	vmov.f32	s3, s13
 80037dc:	eeb0 0a47 	vmov.f32	s0, s14
 80037e0:	eef0 0a67 	vmov.f32	s1, s15
 80037e4:	4821      	ldr	r0, [pc, #132]	; (800386c <get_handle_type+0x22c>)
 80037e6:	f001 fcc2 	bl	800516e <PID_SetTunings>
	PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 80037ea:	4b19      	ldr	r3, [pc, #100]	; (8003850 <get_handle_type+0x210>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	4614      	mov	r4, r2
 80037f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <get_handle_type+0x210>)
 80037f8:	ed93 7b00 	vldr	d7, [r3]
 80037fc:	eeb0 1a47 	vmov.f32	s2, s14
 8003800:	eef0 1a67 	vmov.f32	s3, s15
 8003804:	ec45 4b10 	vmov	d0, r4, r5
 8003808:	4818      	ldr	r0, [pc, #96]	; (800386c <get_handle_type+0x22c>)
 800380a:	f001 fc90 	bl	800512e <PID_SetILimits>

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	00000000 	.word	0x00000000
 800381c:	4062c000 	.word	0x4062c000
 8003820:	20001718 	.word	0x20001718
 8003824:	20000038 	.word	0x20000038
 8003828:	20001a44 	.word	0x20001a44
 800382c:	3fe00000 	.word	0x3fe00000
 8003830:	200005e0 	.word	0x200005e0
 8003834:	41a00000 	.word	0x41a00000
 8003838:	20000610 	.word	0x20000610
 800383c:	40080000 	.word	0x40080000
 8003840:	20000618 	.word	0x20000618
 8003844:	3ff00000 	.word	0x3ff00000
 8003848:	20000620 	.word	0x20000620
 800384c:	3fd00000 	.word	0x3fd00000
 8003850:	20000020 	.word	0x20000020
 8003854:	40590000 	.word	0x40590000
 8003858:	42700000 	.word	0x42700000
 800385c:	40140000 	.word	0x40140000
 8003860:	405f4000 	.word	0x405f4000
 8003864:	42f00000 	.word	0x42f00000
 8003868:	40200000 	.word	0x40200000
 800386c:	200022d8 	.word	0x200022d8

08003870 <HAL_GPIO_EXTI_Callback>:

/* Interrupts at button press */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b20      	cmp	r3, #32
 800387e:	d006      	beq.n	800388e <HAL_GPIO_EXTI_Callback+0x1e>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d003      	beq.n	800388e <HAL_GPIO_EXTI_Callback+0x1e>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388c:	d109      	bne.n	80038a2 <HAL_GPIO_EXTI_Callback+0x32>
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_TIM_Base_Start_IT(&htim16);
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <HAL_GPIO_EXTI_Callback+0x40>)
 8003898:	f00a f970 	bl	800db7c <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_GPIO_EXTI_Callback+0x3c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    }
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000001c 	.word	0x2000001c
 80038b0:	200021ac 	.word	0x200021ac

080038b4 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7f1b      	ldrb	r3, [r3, #28]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d003      	beq.n	80038cc <HAL_TIM_IC_CaptureCallback+0x18>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7f1b      	ldrb	r3, [r3, #28]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 80038cc:	f7ff fd32 	bl	8003334 <beep>
	}
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	if (((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) && (current_measurement_requested == 1)){
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a0c      	ldr	r2, [pc, #48]	; (8003914 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d110      	bne.n	800390a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7f1b      	ldrb	r3, [r3, #28]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d108      	bne.n	800390a <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		current_measurement_requested = 0;
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc2);
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8003906:	f003 fd23 	bl	8007350 <HAL_ADC_Start_IT>
	}
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20001fe4 	.word	0x20001fe4
 8003918:	20000738 	.word	0x20000738
 800391c:	200001dc 	.word	0x200001dc
 8003920:	20001ddc 	.word	0x20001ddc

08003924 <HAL_TIM_PeriodElapsedCallback>:

/* Timer Callbacks */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	/* take thermocouple measurement every 25 ms */
	if (htim == &htim6){
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a35      	ldr	r2, [pc, #212]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10c      	bne.n	800394e <HAL_TIM_PeriodElapsedCallback+0x2a>
		heater_off();
 8003934:	f7fd ffea 	bl	800190c <heater_off>
		thermocouple_measurement_done = 0;
 8003938:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_ENABLE(&htim7);
 800393e:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b31      	ldr	r3, [pc, #196]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
	}

	if (htim == &htim7){
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2e      	ldr	r2, [pc, #184]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d104      	bne.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003956:	2239      	movs	r2, #57	; 0x39
 8003958:	492d      	ldr	r1, [pc, #180]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800395a:	482e      	ldr	r0, [pc, #184]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800395c:	f003 fe28 	bl	80075b0 <HAL_ADC_Start_DMA>
		}

	/* Beep length timer */
	if (htim == &htim17){
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a2d      	ldr	r2, [pc, #180]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d106      	bne.n	8003976 <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_TIM_Base_Stop_IT(&htim17);
 8003968:	482b      	ldr	r0, [pc, #172]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800396a:	f00a f971 	bl	800dc50 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 800396e:	2104      	movs	r1, #4
 8003970:	482a      	ldr	r0, [pc, #168]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003972:	f00a fb3f 	bl	800dff4 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim16 && SW_ready == 0)){
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d13d      	bne.n	80039fa <HAL_TIM_PeriodElapsedCallback+0xd6>
 800397e:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d139      	bne.n	80039fa <HAL_TIM_PeriodElapsedCallback+0xd6>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8003986:	2120      	movs	r1, #32
 8003988:	4827      	ldr	r0, [pc, #156]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800398a:	f006 fd0b 	bl	800a3a4 <HAL_GPIO_ReadPin>
 800398e:	4603      	mov	r3, r0
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10b      	bne.n	80039ac <HAL_TIM_PeriodElapsedCallback+0x88>
			SW_ready = 1;
 8003994:	4b23      	ldr	r3, [pc, #140]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800399c:	2201      	movs	r2, #1
 800399e:	701a      	strb	r2, [r3, #0]
			beep();
 80039a0:	f7ff fcc8 	bl	8003334 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 80039a4:	481e      	ldr	r0, [pc, #120]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039a6:	f00a f953 	bl	800dc50 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim16);
		}
	}
}
 80039aa:	e026      	b.n	80039fa <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b2:	f006 fcf7 	bl	800a3a4 <HAL_GPIO_ReadPin>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10b      	bne.n	80039d4 <HAL_TIM_PeriodElapsedCallback+0xb0>
			SW_ready = 1;
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]
			beep();
 80039c8:	f7ff fcb4 	bl	8003334 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 80039cc:	4814      	ldr	r0, [pc, #80]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039ce:	f00a f93f 	bl	800dc50 <HAL_TIM_Base_Stop_IT>
}
 80039d2:	e012      	b.n	80039fa <HAL_TIM_PeriodElapsedCallback+0xd6>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 80039d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039d8:	4813      	ldr	r0, [pc, #76]	; (8003a28 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80039da:	f006 fce3 	bl	800a3a4 <HAL_GPIO_ReadPin>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10a      	bne.n	80039fa <HAL_TIM_PeriodElapsedCallback+0xd6>
			SW_ready = 1;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
			beep();
 80039f0:	f7ff fca0 	bl	8003334 <beep>
			HAL_TIM_Base_Stop_IT(&htim16);
 80039f4:	480a      	ldr	r0, [pc, #40]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80039f6:	f00a f92b 	bl	800dc50 <HAL_TIM_Base_Stop_IT>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200020c8 	.word	0x200020c8
 8003a08:	200001dd 	.word	0x200001dd
 8003a0c:	20002114 	.word	0x20002114
 8003a10:	20000654 	.word	0x20000654
 8003a14:	20001d70 	.word	0x20001d70
 8003a18:	200021f8 	.word	0x200021f8
 8003a1c:	2000207c 	.word	0x2000207c
 8003a20:	200021ac 	.word	0x200021ac
 8003a24:	2000001c 	.word	0x2000001c
 8003a28:	48000400 	.word	0x48000400
 8003a2c:	20000604 	.word	0x20000604
 8003a30:	20000605 	.word	0x20000605
 8003a34:	20000606 	.word	0x20000606

08003a38 <HAL_ADC_ConvCpltCallback>:
/* ADC conversion completed Callbacks */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (thermocouple_measurement_done == 0)){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a48:	d110      	bne.n	8003a6c <HAL_ADC_ConvCpltCallback+0x34>
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <HAL_ADC_ConvCpltCallback+0x74>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_ADC_ConvCpltCallback+0x34>
		get_thermocouple_temperature();
 8003a52:	f7fd fdd9 	bl	8001608 <get_thermocouple_temperature>
		heater_on();
 8003a56:	f7fd ff03 	bl	8001860 <heater_on>
		/* Compute PID */
		PID_Compute(&TPID);
 8003a5a:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <HAL_ADC_ConvCpltCallback+0x78>)
 8003a5c:	f001 f994 	bl	8004d88 <PID_Compute>
		HAL_ADC_Stop_DMA(&hadc1);
 8003a60:	4814      	ldr	r0, [pc, #80]	; (8003ab4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003a62:	f003 fe59 	bl	8007718 <HAL_ADC_Stop_DMA>
		thermocouple_measurement_done = 1;
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <HAL_ADC_ConvCpltCallback+0x74>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
	}
	if ((hadc->Instance == ADC2) && (current_measurement_done == 0)){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <HAL_ADC_ConvCpltCallback+0x80>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d116      	bne.n	8003aa4 <HAL_ADC_ConvCpltCallback+0x6c>
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_ADC_ConvCpltCallback+0x84>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d112      	bne.n	8003aa4 <HAL_ADC_ConvCpltCallback+0x6c>
		sensor_values.leak_current = HAL_ADC_GetValue(&hadc2);
 8003a7e:	4810      	ldr	r0, [pc, #64]	; (8003ac0 <HAL_ADC_ConvCpltCallback+0x88>)
 8003a80:	f003 feab 	bl	80077da <HAL_ADC_GetValue>
 8003a84:	4603      	mov	r3, r0
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8003a8a:	831a      	strh	r2, [r3, #24]
		current_raw = HAL_ADC_GetValue(&hadc2);
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <HAL_ADC_ConvCpltCallback+0x88>)
 8003a8e:	f003 fea4 	bl	80077da <HAL_ADC_GetValue>
 8003a92:	4603      	mov	r3, r0
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <HAL_ADC_ConvCpltCallback+0x90>)
 8003a98:	801a      	strh	r2, [r3, #0]
		heater_on();
 8003a9a:	f7fd fee1 	bl	8001860 <heater_on>
		current_measurement_done = 1;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_ADC_ConvCpltCallback+0x84>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	200001dd 	.word	0x200001dd
 8003ab0:	200022d8 	.word	0x200022d8
 8003ab4:	20001d70 	.word	0x20001d70
 8003ab8:	50000100 	.word	0x50000100
 8003abc:	200001dc 	.word	0x200001dc
 8003ac0:	20001ddc 	.word	0x20001ddc
 8003ac4:	20000038 	.word	0x20000038
 8003ac8:	200006c6 	.word	0x200006c6

08003acc <HAL_ADC_LevelOutOfWindowCallback>:

/* ADC watchdog Callback */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
		LCD_draw_earth_fault_popup();
 8003ad4:	f7ff fb60 	bl	8003198 <LCD_draw_earth_fault_popup>
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	ed2d 8b06 	vpush	{d8-d10}
 8003ae8:	b08e      	sub	sp, #56	; 0x38
 8003aea:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aec:	f002 feb4 	bl	8006858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003af0:	f000 fa80 	bl	8003ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003af4:	f000 ff7c 	bl	80049f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003af8:	f000 ff48 	bl	800498c <MX_DMA_Init>
  MX_ADC1_Init();
 8003afc:	f000 fac8 	bl	8004090 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003b00:	f000 fb5e 	bl	80041c0 <MX_ADC2_Init>
  MX_CRC_Init();
 8003b04:	f000 fbfa 	bl	80042fc <MX_CRC_Init>
  MX_TIM1_Init();
 8003b08:	f000 fc98 	bl	800443c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003b0c:	f000 fd36 	bl	800457c <MX_TIM2_Init>
  MX_TIM4_Init();
 8003b10:	f000 fd88 	bl	8004624 <MX_TIM4_Init>
  MX_SPI2_Init();
 8003b14:	f000 fc54 	bl	80043c0 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003b18:	f000 fc12 	bl	8004340 <MX_I2C1_Init>
  MX_USB_Device_Init();
 8003b1c:	f012 fa94 	bl	8016048 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8003b20:	f000 feb8 	bl	8004894 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003b24:	f000 fee6 	bl	80048f4 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003b28:	f000 fe0c 	bl	8004744 <MX_TIM7_Init>
  MX_TIM8_Init();
 8003b2c:	f000 fe4a 	bl	80047c4 <MX_TIM8_Init>
  MX_TIM6_Init();
 8003b30:	f000 fdd2 	bl	80046d8 <MX_TIM6_Init>
  MX_TIM16_Init();
 8003b34:	f000 fe86 	bl	8004844 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fd fe69 	bl	8001810 <set_heater_duty>
	HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8003b3e:	2108      	movs	r1, #8
 8003b40:	489f      	ldr	r0, [pc, #636]	; (8003dc0 <main+0x2e0>)
 8003b42:	f00b fb0f 	bl	800f164 <HAL_TIMEx_PWMN_Start_IT>

	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003b46:	213c      	movs	r1, #60	; 0x3c
 8003b48:	489e      	ldr	r0, [pc, #632]	; (8003dc4 <main+0x2e4>)
 8003b4a:	f00a fc2d 	bl	800e3a8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	489b      	ldr	r0, [pc, #620]	; (8003dc0 <main+0x2e0>)
 8003b52:	f00a f903 	bl	800dd5c <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8003b56:	4b9c      	ldr	r3, [pc, #624]	; (8003dc8 <main+0x2e8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim6);
 8003b5e:	489b      	ldr	r0, [pc, #620]	; (8003dcc <main+0x2ec>)
 8003b60:	f00a f80c 	bl	800db7c <HAL_TIM_Base_Start_IT>

	__HAL_TIM_ENABLE_IT(&htim7, TIM_IT_UPDATE);
 8003b64:	4b9a      	ldr	r3, [pc, #616]	; (8003dd0 <main+0x2f0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b99      	ldr	r3, [pc, #612]	; (8003dd0 <main+0x2f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	60da      	str	r2, [r3, #12]

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003b74:	217f      	movs	r1, #127	; 0x7f
 8003b76:	4897      	ldr	r0, [pc, #604]	; (8003dd4 <main+0x2f4>)
 8003b78:	f005 f8ee 	bl	8008d58 <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003b7c:	217f      	movs	r1, #127	; 0x7f
 8003b7e:	4896      	ldr	r0, [pc, #600]	; (8003dd8 <main+0x2f8>)
 8003b80:	f005 f8ea 	bl	8008d58 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_BUF, (uint32_t)ADC1_BUF_LEN);	//Start ADC DMA mode
 8003b84:	2239      	movs	r2, #57	; 0x39
 8003b86:	4995      	ldr	r1, [pc, #596]	; (8003ddc <main+0x2fc>)
 8003b88:	4893      	ldr	r0, [pc, #588]	; (8003dd8 <main+0x2f8>)
 8003b8a:	f003 fd11 	bl	80075b0 <HAL_ADC_Start_DMA>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,30);
 8003b8e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003b92:	4893      	ldr	r0, [pc, #588]	; (8003de0 <main+0x300>)
 8003b94:	f000 ffe1 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8003b98:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003de4 <main+0x304>
 8003b9c:	4892      	ldr	r0, [pc, #584]	; (8003de8 <main+0x308>)
 8003b9e:	f000 ffdc 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,25);
 8003ba2:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8003ba6:	4891      	ldr	r0, [pc, #580]	; (8003dec <main+0x30c>)
 8003ba8:	f000 ffd7 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&current_filterStruct,3);
 8003bac:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003bb0:	488f      	ldr	r0, [pc, #572]	; (8003df0 <main+0x310>)
 8003bb2:	f000 ffd2 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8003bb6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003bba:	488e      	ldr	r0, [pc, #568]	; (8003df4 <main+0x314>)
 8003bbc:	f000 ffcd 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&handle1_sense_filterStruct,20);
 8003bc0:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003bc4:	488c      	ldr	r0, [pc, #560]	; (8003df8 <main+0x318>)
 8003bc6:	f000 ffc8 	bl	8004b5a <Moving_Average_Init>
	Moving_Average_Init(&handle2_sense_filterStruct,20);
 8003bca:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8003bce:	488b      	ldr	r0, [pc, #556]	; (8003dfc <main+0x31c>)
 8003bd0:	f000 ffc3 	bl	8004b5a <Moving_Average_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8003bd4:	20c8      	movs	r0, #200	; 0xc8
 8003bd6:	f002 feaf 	bl	8006938 <HAL_Delay>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8003bda:	f7fd fa3f 	bl	800105c <FlashCheckCRC>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <main+0x110>
  	    	FlashWrite(&default_flash_values);
 8003bea:	4885      	ldr	r0, [pc, #532]	; (8003e00 <main+0x320>)
 8003bec:	f7fd fada 	bl	80011a4 <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8003bf0:	4884      	ldr	r0, [pc, #528]	; (8003e04 <main+0x324>)
 8003bf2:	f7fd fabd 	bl	8001170 <FlashRead>

  	    /* Set screen rotation */
  	    if((flash_values.screen_rotation == 0) || (flash_values.screen_rotation == 2)){
 8003bf6:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <main+0x324>)
 8003bf8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f7fc ff88 	bl	8000b18 <__aeabi_dcmpeq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
  	    }
  	    if((flash_values.screen_rotation == 1) || (flash_values.screen_rotation == 3)){
 8003c0c:	4b7d      	ldr	r3, [pc, #500]	; (8003e04 <main+0x324>)
 8003c0e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <main+0x328>)
 8003c18:	f7fc ff7e 	bl	8000b18 <__aeabi_dcmpeq>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
		  #define LCD_WIDTH  240
		  #define LCD_HEIGHT 320
		}

  	    LCD_init();
 8003c20:	f002 fdae 	bl	8006780 <LCD_init>
  	  	LCD_SetRotation(flash_values.screen_rotation);
 8003c24:	4b77      	ldr	r3, [pc, #476]	; (8003e04 <main+0x324>)
 8003c26:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7fc ffe3 	bl	8000bf8 <__aeabi_d2uiz>
 8003c32:	4603      	mov	r3, r0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4618      	mov	r0, r3
 8003c38:	f002 fb50 	bl	80062dc <LCD_SetRotation>

  		/* Set startup state */
  	    change_state(HALTED);
 8003c3c:	2004      	movs	r0, #4
 8003c3e:	f7fd fc59 	bl	80014f4 <change_state>

  		settings_menue();
 8003c42:	f7fd fe6d 	bl	8001920 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8003c46:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <main+0x324>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	f7fc ffd0 	bl	8000bf8 <__aeabi_d2uiz>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8003c5c:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <main+0x32c>)
 8003c5e:	ed93 7b00 	vldr	d7, [r3]
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <main+0x330>)
 8003c64:	ed93 6b00 	vldr	d6, [r3]
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <main+0x334>)
 8003c6a:	ed93 5b00 	vldr	d5, [r3]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	2301      	movs	r3, #1
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	eeb0 2a45 	vmov.f32	s4, s10
 8003c7a:	eef0 2a65 	vmov.f32	s5, s11
 8003c7e:	eeb0 1a46 	vmov.f32	s2, s12
 8003c82:	eef0 1a66 	vmov.f32	s3, s13
 8003c86:	eeb0 0a47 	vmov.f32	s0, s14
 8003c8a:	eef0 0a67 	vmov.f32	s1, s15
 8003c8e:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <main+0x338>)
 8003c90:	4a62      	ldr	r2, [pc, #392]	; (8003e1c <main+0x33c>)
 8003c92:	4963      	ldr	r1, [pc, #396]	; (8003e20 <main+0x340>)
 8003c94:	4863      	ldr	r0, [pc, #396]	; (8003e24 <main+0x344>)
 8003c96:	f001 f82b 	bl	8004cf0 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	4861      	ldr	r0, [pc, #388]	; (8003e24 <main+0x344>)
 8003c9e:	f001 f9ba 	bl	8005016 <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8003ca2:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <main+0x348>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4619      	mov	r1, r3
 8003caa:	485e      	ldr	r0, [pc, #376]	; (8003e24 <main+0x344>)
 8003cac:	f001 fb62 	bl	8005374 <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8003cb0:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8003db0 <main+0x2d0>
 8003cb4:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8003db8 <main+0x2d8>
 8003cb8:	485a      	ldr	r0, [pc, #360]	; (8003e24 <main+0x344>)
 8003cba:	f001 f9ca 	bl	8005052 <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, -PID_MAX_I_LIMIT, PID_MAX_I_LIMIT); 	// Set max and min I limit
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <main+0x34c>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	4690      	mov	r8, r2
 8003cc6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003cca:	4b58      	ldr	r3, [pc, #352]	; (8003e2c <main+0x34c>)
 8003ccc:	ed93 7b00 	vldr	d7, [r3]
 8003cd0:	eeb0 1a47 	vmov.f32	s2, s14
 8003cd4:	eef0 1a67 	vmov.f32	s3, s15
 8003cd8:	ec49 8b10 	vmov	d0, r8, r9
 8003cdc:	4851      	ldr	r0, [pc, #324]	; (8003e24 <main+0x344>)
 8003cde:	f001 fa26 	bl	800512e <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8003ce2:	f7fe ff7b 	bl	8002bdc <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<200;i++){
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	e010      	b.n	8003d0e <main+0x22e>
  			get_bus_voltage();
 8003cec:	f7fd fc38 	bl	8001560 <get_bus_voltage>
  			get_heater_current();
 8003cf0:	f7fd fc62 	bl	80015b8 <get_heater_current>
  			get_mcu_temp();
 8003cf4:	f7fd fb8c 	bl	8001410 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003cf8:	f7fd fc86 	bl	8001608 <get_thermocouple_temperature>
  			get_handle_type();
 8003cfc:	f7ff fca0 	bl	8003640 <get_handle_type>
  			get_stand_status();
 8003d00:	f7ff fc0a 	bl	8003518 <get_stand_status>
  			handle_button_status();
 8003d04:	f7ff fbae 	bl	8003464 <handle_button_status>
  		for (int i = 0; i<200;i++){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2bc7      	cmp	r3, #199	; 0xc7
 8003d12:	ddeb      	ble.n	8003cec <main+0x20c>
  		}

  		/* Start-up beep */
  		beep();
 8003d14:	f7ff fb0e 	bl	8003334 <beep>
  		HAL_Delay(100);
 8003d18:	2064      	movs	r0, #100	; 0x64
 8003d1a:	f002 fe0d 	bl	8006938 <HAL_Delay>
  		beep();
 8003d1e:	f7ff fb09 	bl	8003334 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003d22:	f002 fdfd 	bl	8006920 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <main+0x350>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <main+0x354>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d30e      	bcc.n	8003d54 <main+0x274>
  				get_stand_status();
 8003d36:	f7ff fbef 	bl	8003518 <get_stand_status>
  				get_handle_type();
 8003d3a:	f7ff fc81 	bl	8003640 <get_handle_type>
  				get_set_temperature();
 8003d3e:	f7ff fab9 	bl	80032b4 <get_set_temperature>
  				handle_button_status();
 8003d42:	f7ff fb8f 	bl	8003464 <handle_button_status>
  	  			handle_emergency_shutdown();
 8003d46:	f7ff fb17 	bl	8003378 <handle_emergency_shutdown>
  				previous_sensor_update_high_update = HAL_GetTick();
 8003d4a:	f002 fde9 	bl	8006920 <HAL_GetTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4a37      	ldr	r2, [pc, #220]	; (8003e30 <main+0x350>)
 8003d52:	6013      	str	r3, [r2, #0]
  			}

  			if(HAL_GetTick() - previous_sensor_update_low_update >= interval_sensor_update_low_update){
 8003d54:	f002 fde4 	bl	8006920 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <main+0x358>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1ad2      	subs	r2, r2, r3
 8003d60:	4b36      	ldr	r3, [pc, #216]	; (8003e3c <main+0x35c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d30a      	bcc.n	8003d7e <main+0x29e>
  				get_bus_voltage();
 8003d68:	f7fd fbfa 	bl	8001560 <get_bus_voltage>
  				get_heater_current();
 8003d6c:	f7fd fc24 	bl	80015b8 <get_heater_current>
  				get_mcu_temp();
 8003d70:	f7fd fb4e 	bl	8001410 <get_mcu_temp>
  				previous_sensor_update_low_update = HAL_GetTick();
 8003d74:	f002 fdd4 	bl	8006920 <HAL_GetTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <main+0x358>)
 8003d7c:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <main+0x360>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	dc68      	bgt.n	8003e58 <main+0x378>
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	da5e      	bge.n	8003e48 <main+0x368>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <main+0x2b4>
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d007      	beq.n	8003da2 <main+0x2c2>
 8003d92:	e061      	b.n	8003e58 <main+0x378>
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <main+0x364>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	491f      	ldr	r1, [pc, #124]	; (8003e18 <main+0x338>)
 8003d9c:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003da0:	e05a      	b.n	8003e58 <main+0x378>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <main+0x324>)
 8003da4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003da8:	491b      	ldr	r1, [pc, #108]	; (8003e18 <main+0x338>)
 8003daa:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003dae:	e053      	b.n	8003e58 <main+0x378>
 8003db0:	00000000 	.word	0x00000000
 8003db4:	407f4000 	.word	0x407f4000
	...
 8003dc0:	20001fe4 	.word	0x20001fe4
 8003dc4:	20002030 	.word	0x20002030
 8003dc8:	2000207c 	.word	0x2000207c
 8003dcc:	200020c8 	.word	0x200020c8
 8003dd0:	20002114 	.word	0x20002114
 8003dd4:	20001ddc 	.word	0x20001ddc
 8003dd8:	20001d70 	.word	0x20001d70
 8003ddc:	20000654 	.word	0x20000654
 8003de0:	2000073c 	.word	0x2000073c
 8003de4:	42c80000 	.word	0x42c80000
 8003de8:	20000a68 	.word	0x20000a68
 8003dec:	20000d94 	.word	0x20000d94
 8003df0:	200010c0 	.word	0x200010c0
 8003df4:	200013ec 	.word	0x200013ec
 8003df8:	20001718 	.word	0x20001718
 8003dfc:	20001a44 	.word	0x20001a44
 8003e00:	20000088 	.word	0x20000088
 8003e04:	200006d0 	.word	0x200006d0
 8003e08:	3ff00000 	.word	0x3ff00000
 8003e0c:	20000610 	.word	0x20000610
 8003e10:	20000618 	.word	0x20000618
 8003e14:	20000620 	.word	0x20000620
 8003e18:	20000728 	.word	0x20000728
 8003e1c:	20000720 	.word	0x20000720
 8003e20:	20000040 	.word	0x20000040
 8003e24:	200022d8 	.word	0x200022d8
 8003e28:	2000000c 	.word	0x2000000c
 8003e2c:	20000020 	.word	0x20000020
 8003e30:	200005fc 	.word	0x200005fc
 8003e34:	20000014 	.word	0x20000014
 8003e38:	20000600 	.word	0x20000600
 8003e3c:	20000018 	.word	0x20000018
 8003e40:	2000001d 	.word	0x2000001d
 8003e44:	20000038 	.word	0x20000038
  				}
  				case SLEEP:
  				case EMERGENCY_SLEEP:
  				case HALTED: {
  					PID_setpoint = 0;
 8003e48:	4958      	ldr	r1, [pc, #352]	; (8003fac <main+0x4cc>)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003e56:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003e58:	f002 fd62 	bl	8006920 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b54      	ldr	r3, [pc, #336]	; (8003fb0 <main+0x4d0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <main+0x4d4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d370      	bcc.n	8003f4e <main+0x46e>
  				memset(&buffer, '\0', sizeof(buffer));
 8003e6c:	2228      	movs	r2, #40	; 0x28
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4851      	ldr	r0, [pc, #324]	; (8003fb8 <main+0x4d8>)
 8003e72:	f013 fd8e 	bl	8017992 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <main+0x4dc>)
 8003e78:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <main+0x4dc>)
 8003e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003e82:	4b4f      	ldr	r3, [pc, #316]	; (8003fc0 <main+0x4e0>)
 8003e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <main+0x4e4>)
 8003e8e:	f7fc fd05 	bl	800089c <__aeabi_ddiv>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <main+0x4e8>)
 8003ea0:	f7fc fbd2 	bl	8000648 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	ec43 2b19 	vmov	d9, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003eac:	4847      	ldr	r0, [pc, #284]	; (8003fcc <main+0x4ec>)
 8003eae:	f001 faa5 	bl	80053fc <PID_GetPpart>
 8003eb2:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <main+0x4f0>)
 8003ebc:	f7fc fcee 	bl	800089c <__aeabi_ddiv>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003ec8:	4840      	ldr	r0, [pc, #256]	; (8003fcc <main+0x4ec>)
 8003eca:	f001 faa9 	bl	8005420 <PID_GetIpart>
 8003ece:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <main+0x4f0>)
 8003ed8:	f7fc fce0 	bl	800089c <__aeabi_ddiv>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003ee4:	4839      	ldr	r0, [pc, #228]	; (8003fcc <main+0x4ec>)
 8003ee6:	f001 faad 	bl	8005444 <PID_GetDpart>
 8003eea:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <main+0x4f0>)
 8003ef4:	f7fc fcd2 	bl	800089c <__aeabi_ddiv>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	461d      	mov	r5, r3
  						PID_output/PID_MAX_OUTPUT*100.0, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0, sensor_values.heater_current);
 8003f00:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <main+0x4dc>)
 8003f02:	695b      	ldr	r3, [r3, #20]
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n",
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc fb47 	bl	8000598 <__aeabi_f2d>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f12:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003f16:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f1a:	ed8d ab04 	vstr	d10, [sp, #16]
 8003f1e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8003f22:	e9cd 8900 	strd	r8, r9, [sp]
 8003f26:	4652      	mov	r2, sl
 8003f28:	465b      	mov	r3, fp
 8003f2a:	492a      	ldr	r1, [pc, #168]	; (8003fd4 <main+0x4f4>)
 8003f2c:	4822      	ldr	r0, [pc, #136]	; (8003fb8 <main+0x4d8>)
 8003f2e:	f013 fccd 	bl	80178cc <siprintf>
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 8003f32:	4821      	ldr	r0, [pc, #132]	; (8003fb8 <main+0x4d8>)
 8003f34:	f7fc f9c4 	bl	80002c0 <strlen>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	481e      	ldr	r0, [pc, #120]	; (8003fb8 <main+0x4d8>)
 8003f40:	f012 f940 	bl	80161c4 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 8003f44:	f002 fcec 	bl	8006920 <HAL_GetTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <main+0x4d0>)
 8003f4c:	6013      	str	r3, [r2, #0]
  			}

 			/* Detect if a tip is present by sending a short voltage pulse and sense current */
			#ifdef DETECT_TIP_BY_CURRENT
  				if(HAL_GetTick() - previous_measure_current_update >= interval_measure_current){
 8003f4e:	f002 fce7 	bl	8006920 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <main+0x4f8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1ad2      	subs	r2, r2, r3
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <main+0x4fc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d311      	bcc.n	8003f86 <main+0x4a6>
  					if(thermocouple_measurement_done == 1){ //Only take current measurement if thermocouple measurement is not ongoing
 8003f62:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <main+0x500>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10d      	bne.n	8003f86 <main+0x4a6>
						current_measurement_done = 0;
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <main+0x504>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
						set_heater_duty(PID_MAX_OUTPUT/2);
 8003f70:	20fa      	movs	r0, #250	; 0xfa
 8003f72:	f7fd fc4d 	bl	8001810 <set_heater_duty>
						current_measurement_requested = 1;
 8003f76:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <main+0x508>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
	  					previous_measure_current_update = HAL_GetTick();
 8003f7c:	f002 fcd0 	bl	8006920 <HAL_GetTick>
 8003f80:	4603      	mov	r3, r0
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <main+0x4f8>)
 8003f84:	6013      	str	r3, [r2, #0]
  					}
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8003f86:	f002 fccb 	bl	8006920 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <main+0x50c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	1ad2      	subs	r2, r2, r3
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <main+0x510>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	f4ff aec3 	bcc.w	8003d22 <main+0x242>
  				update_display();
 8003f9c:	f7fd fff4 	bl	8001f88 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003fa0:	f002 fcbe 	bl	8006920 <HAL_GetTick>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <main+0x50c>)
 8003fa8:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update_high_update >= interval_sensor_update_high_update){
 8003faa:	e6ba      	b.n	8003d22 <main+0x242>
 8003fac:	20000728 	.word	0x20000728
 8003fb0:	200005e8 	.word	0x200005e8
 8003fb4:	20000008 	.word	0x20000008
 8003fb8:	20000628 	.word	0x20000628
 8003fbc:	20000038 	.word	0x20000038
 8003fc0:	20000720 	.word	0x20000720
 8003fc4:	407f4000 	.word	0x407f4000
 8003fc8:	40590000 	.word	0x40590000
 8003fcc:	200022d8 	.word	0x200022d8
 8003fd0:	40240000 	.word	0x40240000
 8003fd4:	0801b658 	.word	0x0801b658
 8003fd8:	200005f8 	.word	0x200005f8
 8003fdc:	20000010 	.word	0x20000010
 8003fe0:	200001dd 	.word	0x200001dd
 8003fe4:	200001dc 	.word	0x200001dc
 8003fe8:	20000738 	.word	0x20000738
 8003fec:	200005e4 	.word	0x200005e4
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b094      	sub	sp, #80	; 0x50
 8003ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ffa:	f107 0318 	add.w	r3, r7, #24
 8003ffe:	2238      	movs	r2, #56	; 0x38
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f013 fcc5 	bl	8017992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004016:	2000      	movs	r0, #0
 8004018:	f008 f872 	bl	800c100 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800401c:	2322      	movs	r3, #34	; 0x22
 800401e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004026:	2340      	movs	r3, #64	; 0x40
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800402a:	2301      	movs	r3, #1
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800402e:	2302      	movs	r3, #2
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004032:	2302      	movs	r3, #2
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004036:	2304      	movs	r3, #4
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800403a:	2355      	movs	r3, #85	; 0x55
 800403c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800403e:	2302      	movs	r3, #2
 8004040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004042:	2302      	movs	r3, #2
 8004044:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004046:	2302      	movs	r3, #2
 8004048:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800404a:	f107 0318 	add.w	r3, r7, #24
 800404e:	4618      	mov	r0, r3
 8004050:	f008 f90a 	bl	800c268 <HAL_RCC_OscConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800405a:	f000 fd79 	bl	8004b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800405e:	230f      	movs	r3, #15
 8004060:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004062:	2303      	movs	r3, #3
 8004064:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	2104      	movs	r1, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f008 fc08 	bl	800c88c <HAL_RCC_ClockConfig>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8004082:	f000 fd65 	bl	8004b50 <Error_Handler>
  }
}
 8004086:	bf00      	nop
 8004088:	3750      	adds	r7, #80	; 0x50
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	; 0x30
 8004094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	2220      	movs	r2, #32
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f013 fc72 	bl	8017992 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040ae:	4b40      	ldr	r3, [pc, #256]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80040b6:	4b3e      	ldr	r3, [pc, #248]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040be:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040d0:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040d8:	2204      	movs	r2, #4
 80040da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040de:	2200      	movs	r2, #0
 80040e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040e2:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040ea:	2203      	movs	r2, #3
 80040ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040f6:	4b2e      	ldr	r3, [pc, #184]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <MX_ADC1_Init+0x120>)
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <MX_ADC1_Init+0x120>)
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800410a:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <MX_ADC1_Init+0x120>)
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <MX_ADC1_Init+0x120>)
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004118:	4825      	ldr	r0, [pc, #148]	; (80041b0 <MX_ADC1_Init+0x120>)
 800411a:	f002 ff95 	bl	8007048 <HAL_ADC_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004124:	f000 fd14 	bl	8004b50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004130:	4619      	mov	r1, r3
 8004132:	481f      	ldr	r0, [pc, #124]	; (80041b0 <MX_ADC1_Init+0x120>)
 8004134:	f004 fea4 	bl	8008e80 <HAL_ADCEx_MultiModeConfigChannel>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800413e:	f000 fd07 	bl	8004b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <MX_ADC1_Init+0x124>)
 8004144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004146:	2306      	movs	r3, #6
 8004148:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800414a:	2306      	movs	r3, #6
 800414c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800414e:	237f      	movs	r3, #127	; 0x7f
 8004150:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004152:	2304      	movs	r3, #4
 8004154:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	4619      	mov	r1, r3
 800415e:	4814      	ldr	r0, [pc, #80]	; (80041b0 <MX_ADC1_Init+0x120>)
 8004160:	f003 fd76 	bl	8007c50 <HAL_ADC_ConfigChannel>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800416a:	f000 fcf1 	bl	8004b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <MX_ADC1_Init+0x128>)
 8004170:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004172:	230c      	movs	r3, #12
 8004174:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	4619      	mov	r1, r3
 800417a:	480d      	ldr	r0, [pc, #52]	; (80041b0 <MX_ADC1_Init+0x120>)
 800417c:	f003 fd68 	bl	8007c50 <HAL_ADC_ConfigChannel>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004186:	f000 fce3 	bl	8004b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 800418a:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <MX_ADC1_Init+0x12c>)
 800418c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800418e:	2312      	movs	r3, #18
 8004190:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4806      	ldr	r0, [pc, #24]	; (80041b0 <MX_ADC1_Init+0x120>)
 8004198:	f003 fd5a 	bl	8007c50 <HAL_ADC_ConfigChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80041a2:	f000 fcd5 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041a6:	bf00      	nop
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20001d70 	.word	0x20001d70
 80041b4:	0c900008 	.word	0x0c900008
 80041b8:	10c00010 	.word	0x10c00010
 80041bc:	c3210000 	.word	0xc3210000

080041c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b090      	sub	sp, #64	; 0x40
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80041c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	609a      	str	r2, [r3, #8]
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	615a      	str	r2, [r3, #20]
 80041d8:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	2220      	movs	r2, #32
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f013 fbd6 	bl	8017992 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80041e6:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <MX_ADC2_Init+0x128>)
 80041e8:	4a40      	ldr	r2, [pc, #256]	; (80042ec <MX_ADC2_Init+0x12c>)
 80041ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <MX_ADC2_Init+0x128>)
 80041ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80041f4:	4b3c      	ldr	r3, [pc, #240]	; (80042e8 <MX_ADC2_Init+0x128>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041fa:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <MX_ADC2_Init+0x128>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004200:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004206:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004208:	2201      	movs	r2, #1
 800420a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800420c:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <MX_ADC2_Init+0x128>)
 800420e:	2204      	movs	r2, #4
 8004210:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004212:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004218:	4b33      	ldr	r3, [pc, #204]	; (80042e8 <MX_ADC2_Init+0x128>)
 800421a:	2200      	movs	r2, #0
 800421c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800421e:	4b32      	ldr	r3, [pc, #200]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004220:	2202      	movs	r2, #2
 8004222:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004224:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800422c:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <MX_ADC2_Init+0x128>)
 800422e:	2200      	movs	r2, #0
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004238:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <MX_ADC2_Init+0x128>)
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004242:	2200      	movs	r2, #0
 8004244:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800424e:	4826      	ldr	r0, [pc, #152]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004250:	f002 fefa 	bl	8007048 <HAL_ADC_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800425a:	f000 fc79 	bl	8004b50 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <MX_ADC2_Init+0x130>)
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8004262:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <MX_ADC2_Init+0x134>)
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = ENABLE;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 2000;
 8004272:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800427c:	2300      	movs	r3, #0
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004284:	4619      	mov	r1, r3
 8004286:	4818      	ldr	r0, [pc, #96]	; (80042e8 <MX_ADC2_Init+0x128>)
 8004288:	f004 f8d2 	bl	8008430 <HAL_ADC_AnalogWDGConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8004292:	f000 fc5d 	bl	8004b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <MX_ADC2_Init+0x134>)
 8004298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800429a:	2306      	movs	r3, #6
 800429c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042a2:	237f      	movs	r3, #127	; 0x7f
 80042a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042a6:	2304      	movs	r3, #4
 80042a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	480d      	ldr	r0, [pc, #52]	; (80042e8 <MX_ADC2_Init+0x128>)
 80042b4:	f003 fccc 	bl	8007c50 <HAL_ADC_ConfigChannel>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80042be:	f000 fc47 	bl	8004b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <MX_ADC2_Init+0x138>)
 80042c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042c6:	230c      	movs	r3, #12
 80042c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	4619      	mov	r1, r3
 80042ce:	4806      	ldr	r0, [pc, #24]	; (80042e8 <MX_ADC2_Init+0x128>)
 80042d0:	f003 fcbe 	bl	8007c50 <HAL_ADC_ConfigChannel>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80042da:	f000 fc39 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80042de:	bf00      	nop
 80042e0:	3740      	adds	r7, #64	; 0x40
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001ddc 	.word	0x20001ddc
 80042ec:	50000100 	.word	0x50000100
 80042f0:	7dc00000 	.word	0x7dc00000
 80042f4:	08600004 	.word	0x08600004
 80042f8:	2a000400 	.word	0x2a000400

080042fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <MX_CRC_Init+0x3c>)
 8004302:	4a0e      	ldr	r2, [pc, #56]	; (800433c <MX_CRC_Init+0x40>)
 8004304:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <MX_CRC_Init+0x3c>)
 8004308:	2200      	movs	r2, #0
 800430a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <MX_CRC_Init+0x3c>)
 800430e:	2200      	movs	r2, #0
 8004310:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <MX_CRC_Init+0x3c>)
 8004314:	2200      	movs	r2, #0
 8004316:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <MX_CRC_Init+0x3c>)
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <MX_CRC_Init+0x3c>)
 8004320:	2201      	movs	r2, #1
 8004322:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004324:	4804      	ldr	r0, [pc, #16]	; (8004338 <MX_CRC_Init+0x3c>)
 8004326:	f004 ff5f 	bl	80091e8 <HAL_CRC_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004330:	f000 fc0e 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004334:	bf00      	nop
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20001ea8 	.word	0x20001ea8
 800433c:	40023000 	.word	0x40023000

08004340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <MX_I2C1_Init+0x78>)
 8004348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <MX_I2C1_Init+0x74>)
 800434c:	4a1b      	ldr	r2, [pc, #108]	; (80043bc <MX_I2C1_Init+0x7c>)
 800434e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004358:	2201      	movs	r2, #1
 800435a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800435c:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <MX_I2C1_Init+0x74>)
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004364:	2200      	movs	r2, #0
 8004366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <MX_I2C1_Init+0x74>)
 800436a:	2200      	movs	r2, #0
 800436c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004370:	2200      	movs	r2, #0
 8004372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_I2C1_Init+0x74>)
 8004376:	2200      	movs	r2, #0
 8004378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800437a:	480e      	ldr	r0, [pc, #56]	; (80043b4 <MX_I2C1_Init+0x74>)
 800437c:	f006 f85a 	bl	800a434 <HAL_I2C_Init>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004386:	f000 fbe3 	bl	8004b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800438a:	2100      	movs	r1, #0
 800438c:	4809      	ldr	r0, [pc, #36]	; (80043b4 <MX_I2C1_Init+0x74>)
 800438e:	f006 f8ec 	bl	800a56a <HAL_I2CEx_ConfigAnalogFilter>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004398:	f000 fbda 	bl	8004b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800439c:	2100      	movs	r1, #0
 800439e:	4805      	ldr	r0, [pc, #20]	; (80043b4 <MX_I2C1_Init+0x74>)
 80043a0:	f006 f92e 	bl	800a600 <HAL_I2CEx_ConfigDigitalFilter>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80043aa:	f000 fbd1 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80043ae:	bf00      	nop
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20001ecc 	.word	0x20001ecc
 80043b8:	40005400 	.word	0x40005400
 80043bc:	30a0a7fb 	.word	0x30a0a7fb

080043c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <MX_SPI2_Init+0x74>)
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <MX_SPI2_Init+0x78>)
 80043c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <MX_SPI2_Init+0x74>)
 80043cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80043d2:	4b18      	ldr	r3, [pc, #96]	; (8004434 <MX_SPI2_Init+0x74>)
 80043d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <MX_SPI2_Init+0x74>)
 80043dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <MX_SPI2_Init+0x74>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <MX_SPI2_Init+0x74>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <MX_SPI2_Init+0x74>)
 80043f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <MX_SPI2_Init+0x74>)
 80043f8:	2210      	movs	r2, #16
 80043fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <MX_SPI2_Init+0x74>)
 80043fe:	2200      	movs	r2, #0
 8004400:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <MX_SPI2_Init+0x74>)
 8004404:	2200      	movs	r2, #0
 8004406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <MX_SPI2_Init+0x74>)
 800440a:	2200      	movs	r2, #0
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <MX_SPI2_Init+0x74>)
 8004410:	2207      	movs	r2, #7
 8004412:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <MX_SPI2_Init+0x74>)
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <MX_SPI2_Init+0x74>)
 800441c:	2208      	movs	r2, #8
 800441e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004420:	4804      	ldr	r0, [pc, #16]	; (8004434 <MX_SPI2_Init+0x74>)
 8004422:	f008 fe3f 	bl	800d0a4 <HAL_SPI_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800442c:	f000 fb90 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20001f20 	.word	0x20001f20
 8004438:	40003800 	.word	0x40003800

0800443c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b098      	sub	sp, #96	; 0x60
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004442:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800444e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	609a      	str	r2, [r3, #8]
 800445a:	60da      	str	r2, [r3, #12]
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	615a      	str	r2, [r3, #20]
 8004460:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2234      	movs	r2, #52	; 0x34
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f013 fa92 	bl	8017992 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <MX_TIM1_Init+0x138>)
 8004470:	4a41      	ldr	r2, [pc, #260]	; (8004578 <MX_TIM1_Init+0x13c>)
 8004472:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8004474:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <MX_TIM1_Init+0x138>)
 8004476:	2213      	movs	r2, #19
 8004478:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800447a:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <MX_TIM1_Init+0x138>)
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8004480:	4b3c      	ldr	r3, [pc, #240]	; (8004574 <MX_TIM1_Init+0x138>)
 8004482:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004486:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <MX_TIM1_Init+0x138>)
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <MX_TIM1_Init+0x138>)
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004494:	4b37      	ldr	r3, [pc, #220]	; (8004574 <MX_TIM1_Init+0x138>)
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800449a:	4836      	ldr	r0, [pc, #216]	; (8004574 <MX_TIM1_Init+0x138>)
 800449c:	f009 fc07 	bl	800dcae <HAL_TIM_PWM_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80044a6:	f000 fb53 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ba:	4619      	mov	r1, r3
 80044bc:	482d      	ldr	r0, [pc, #180]	; (8004574 <MX_TIM1_Init+0x138>)
 80044be:	f00a ff59 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80044c8:	f000 fb42 	bl	8004b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044cc:	2360      	movs	r3, #96	; 0x60
 80044ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044d8:	2300      	movs	r3, #0
 80044da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044e0:	2300      	movs	r3, #0
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044e4:	2300      	movs	r3, #0
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044ec:	2200      	movs	r2, #0
 80044ee:	4619      	mov	r1, r3
 80044f0:	4820      	ldr	r0, [pc, #128]	; (8004574 <MX_TIM1_Init+0x138>)
 80044f2:	f00a f957 	bl	800e7a4 <HAL_TIM_PWM_ConfigChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80044fc:	f000 fb28 	bl	8004b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004500:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004504:	2208      	movs	r2, #8
 8004506:	4619      	mov	r1, r3
 8004508:	481a      	ldr	r0, [pc, #104]	; (8004574 <MX_TIM1_Init+0x138>)
 800450a:	f00a f94b 	bl	800e7a4 <HAL_TIM_PWM_ConfigChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8004514:	f000 fb1c 	bl	8004b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800452c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004536:	2300      	movs	r3, #0
 8004538:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800453e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4807      	ldr	r0, [pc, #28]	; (8004574 <MX_TIM1_Init+0x138>)
 8004556:	f00a ff8f 	bl	800f478 <HAL_TIMEx_ConfigBreakDeadTime>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004560:	f000 faf6 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004564:	4803      	ldr	r0, [pc, #12]	; (8004574 <MX_TIM1_Init+0x138>)
 8004566:	f001 faf5 	bl	8005b54 <HAL_TIM_MspPostInit>

}
 800456a:	bf00      	nop
 800456c:	3760      	adds	r7, #96	; 0x60
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	20001fe4 	.word	0x20001fe4
 8004578:	40012c00 	.word	0x40012c00

0800457c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	2224      	movs	r2, #36	; 0x24
 8004588:	2100      	movs	r1, #0
 800458a:	4618      	mov	r0, r3
 800458c:	f013 fa01 	bl	8017992 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004590:	463b      	mov	r3, r7
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <MX_TIM2_Init+0xa4>)
 800459c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80045a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80045c2:	2303      	movs	r3, #3
 80045c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80045c6:	2302      	movs	r3, #2
 80045c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045da:	2301      	movs	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	4619      	mov	r1, r3
 80045ec:	480c      	ldr	r0, [pc, #48]	; (8004620 <MX_TIM2_Init+0xa4>)
 80045ee:	f009 fe35 	bl	800e25c <HAL_TIM_Encoder_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80045f8:	f000 faaa 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045fc:	2300      	movs	r3, #0
 80045fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004604:	463b      	mov	r3, r7
 8004606:	4619      	mov	r1, r3
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <MX_TIM2_Init+0xa4>)
 800460a:	f00a feb3 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004614:	f000 fa9c 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004618:	bf00      	nop
 800461a:	3730      	adds	r7, #48	; 0x30
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20002030 	.word	0x20002030

08004624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800462a:	f107 031c 	add.w	r3, r7, #28
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004636:	463b      	mov	r3, r7
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
 8004644:	615a      	str	r2, [r3, #20]
 8004646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <MX_TIM4_Init+0xac>)
 800464a:	4a22      	ldr	r2, [pc, #136]	; (80046d4 <MX_TIM4_Init+0xb0>)
 800464c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800464e:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <MX_TIM4_Init+0xac>)
 8004650:	f242 720f 	movw	r2, #9999	; 0x270f
 8004654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004656:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <MX_TIM4_Init+0xac>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 800465c:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <MX_TIM4_Init+0xac>)
 800465e:	220a      	movs	r2, #10
 8004660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004662:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <MX_TIM4_Init+0xac>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <MX_TIM4_Init+0xac>)
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800466e:	4818      	ldr	r0, [pc, #96]	; (80046d0 <MX_TIM4_Init+0xac>)
 8004670:	f009 fb1d 	bl	800dcae <HAL_TIM_PWM_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800467a:	f000 fa69 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004686:	f107 031c 	add.w	r3, r7, #28
 800468a:	4619      	mov	r1, r3
 800468c:	4810      	ldr	r0, [pc, #64]	; (80046d0 <MX_TIM4_Init+0xac>)
 800468e:	f00a fe71 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8004698:	f000 fa5a 	bl	8004b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800469c:	2360      	movs	r3, #96	; 0x60
 800469e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046ac:	463b      	mov	r3, r7
 80046ae:	2204      	movs	r2, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4807      	ldr	r0, [pc, #28]	; (80046d0 <MX_TIM4_Init+0xac>)
 80046b4:	f00a f876 	bl	800e7a4 <HAL_TIM_PWM_ConfigChannel>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80046be:	f000 fa47 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80046c2:	4803      	ldr	r0, [pc, #12]	; (80046d0 <MX_TIM4_Init+0xac>)
 80046c4:	f001 fa46 	bl	8005b54 <HAL_TIM_MspPostInit>

}
 80046c8:	bf00      	nop
 80046ca:	3728      	adds	r7, #40	; 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	2000207c 	.word	0x2000207c
 80046d4:	40000800 	.word	0x40000800

080046d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <MX_TIM6_Init+0x64>)
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <MX_TIM6_Init+0x68>)
 80046ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 17000-1;
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <MX_TIM6_Init+0x64>)
 80046f0:	f244 2267 	movw	r2, #16999	; 0x4267
 80046f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <MX_TIM6_Init+0x64>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 250;
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <MX_TIM6_Init+0x64>)
 80046fe:	22fa      	movs	r2, #250	; 0xfa
 8004700:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004702:	4b0e      	ldr	r3, [pc, #56]	; (800473c <MX_TIM6_Init+0x64>)
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004708:	480c      	ldr	r0, [pc, #48]	; (800473c <MX_TIM6_Init+0x64>)
 800470a:	f009 f9df 	bl	800dacc <HAL_TIM_Base_Init>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004714:	f000 fa1c 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4805      	ldr	r0, [pc, #20]	; (800473c <MX_TIM6_Init+0x64>)
 8004726:	f00a fe25 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004730:	f000 fa0e 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200020c8 	.word	0x200020c8
 8004740:	40001000 	.word	0x40001000

08004744 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <MX_TIM7_Init+0x78>)
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <MX_TIM7_Init+0x7c>)
 8004758:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8500-1;
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <MX_TIM7_Init+0x78>)
 800475c:	f242 1233 	movw	r2, #8499	; 0x2133
 8004760:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <MX_TIM7_Init+0x78>)
 8004764:	2200      	movs	r2, #0
 8004766:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <MX_TIM7_Init+0x78>)
 800476a:	2209      	movs	r2, #9
 800476c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <MX_TIM7_Init+0x78>)
 8004770:	2280      	movs	r2, #128	; 0x80
 8004772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004774:	4811      	ldr	r0, [pc, #68]	; (80047bc <MX_TIM7_Init+0x78>)
 8004776:	f009 f9a9 	bl	800dacc <HAL_TIM_Base_Init>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004780:	f000 f9e6 	bl	8004b50 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8004784:	2108      	movs	r1, #8
 8004786:	480d      	ldr	r0, [pc, #52]	; (80047bc <MX_TIM7_Init+0x78>)
 8004788:	f009 fd18 	bl	800e1bc <HAL_TIM_OnePulse_Init>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM7_Init+0x52>
  {
    Error_Handler();
 8004792:	f000 f9dd 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004796:	2320      	movs	r3, #32
 8004798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <MX_TIM7_Init+0x78>)
 80047a4:	f00a fde6 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 80047ae:	f000 f9cf 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20002114 	.word	0x20002114
 80047c0:	40001400 	.word	0x40001400

080047c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <MX_TIM8_Init+0x78>)
 80047d6:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <MX_TIM8_Init+0x7c>)
 80047d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80047da:	4b18      	ldr	r3, [pc, #96]	; (800483c <MX_TIM8_Init+0x78>)
 80047dc:	2200      	movs	r2, #0
 80047de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <MX_TIM8_Init+0x78>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <MX_TIM8_Init+0x78>)
 80047e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <MX_TIM8_Init+0x78>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80047f4:	4b11      	ldr	r3, [pc, #68]	; (800483c <MX_TIM8_Init+0x78>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <MX_TIM8_Init+0x78>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8004800:	2108      	movs	r1, #8
 8004802:	480e      	ldr	r0, [pc, #56]	; (800483c <MX_TIM8_Init+0x78>)
 8004804:	f009 fcda 	bl	800e1bc <HAL_TIM_OnePulse_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 800480e:	f000 f99f 	bl	8004b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800481e:	1d3b      	adds	r3, r7, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4806      	ldr	r0, [pc, #24]	; (800483c <MX_TIM8_Init+0x78>)
 8004824:	f00a fda6 	bl	800f374 <HAL_TIMEx_MasterConfigSynchronization>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800482e:	f000 f98f 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20002160 	.word	0x20002160
 8004840:	40013400 	.word	0x40013400

08004844 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <MX_TIM16_Init+0x48>)
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <MX_TIM16_Init+0x4c>)
 800484c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 800484e:	4b0f      	ldr	r3, [pc, #60]	; (800488c <MX_TIM16_Init+0x48>)
 8004850:	f244 2267 	movw	r2, #16999	; 0x4267
 8004854:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <MX_TIM16_Init+0x48>)
 8004858:	2200      	movs	r2, #0
 800485a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <MX_TIM16_Init+0x48>)
 800485e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004862:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <MX_TIM16_Init+0x48>)
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800486a:	4b08      	ldr	r3, [pc, #32]	; (800488c <MX_TIM16_Init+0x48>)
 800486c:	2200      	movs	r2, #0
 800486e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <MX_TIM16_Init+0x48>)
 8004872:	2280      	movs	r2, #128	; 0x80
 8004874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004876:	4805      	ldr	r0, [pc, #20]	; (800488c <MX_TIM16_Init+0x48>)
 8004878:	f009 f928 	bl	800dacc <HAL_TIM_Base_Init>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8004882:	f000 f965 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200021ac 	.word	0x200021ac
 8004890:	40014400 	.word	0x40014400

08004894 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004898:	4b14      	ldr	r3, [pc, #80]	; (80048ec <MX_TIM17_Init+0x58>)
 800489a:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <MX_TIM17_Init+0x5c>)
 800489c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <MX_TIM17_Init+0x58>)
 80048a0:	f244 2267 	movw	r2, #16999	; 0x4267
 80048a4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048a6:	4b11      	ldr	r3, [pc, #68]	; (80048ec <MX_TIM17_Init+0x58>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <MX_TIM17_Init+0x58>)
 80048ae:	2231      	movs	r2, #49	; 0x31
 80048b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <MX_TIM17_Init+0x58>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <MX_TIM17_Init+0x58>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <MX_TIM17_Init+0x58>)
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80048c4:	4809      	ldr	r0, [pc, #36]	; (80048ec <MX_TIM17_Init+0x58>)
 80048c6:	f009 f901 	bl	800dacc <HAL_TIM_Base_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80048d0:	f000 f93e 	bl	8004b50 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 80048d4:	2108      	movs	r1, #8
 80048d6:	4805      	ldr	r0, [pc, #20]	; (80048ec <MX_TIM17_Init+0x58>)
 80048d8:	f009 fc70 	bl	800e1bc <HAL_TIM_OnePulse_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 80048e2:	f000 f935 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	200021f8 	.word	0x200021f8
 80048f0:	40014800 	.word	0x40014800

080048f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048f8:	4b22      	ldr	r3, [pc, #136]	; (8004984 <MX_USART1_UART_Init+0x90>)
 80048fa:	4a23      	ldr	r2, [pc, #140]	; (8004988 <MX_USART1_UART_Init+0x94>)
 80048fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004908:	2200      	movs	r2, #0
 800490a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <MX_USART1_UART_Init+0x90>)
 800490e:	2200      	movs	r2, #0
 8004910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004914:	2200      	movs	r2, #0
 8004916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <MX_USART1_UART_Init+0x90>)
 800491a:	220c      	movs	r2, #12
 800491c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004926:	2200      	movs	r2, #0
 8004928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800492a:	4b16      	ldr	r3, [pc, #88]	; (8004984 <MX_USART1_UART_Init+0x90>)
 800492c:	2200      	movs	r2, #0
 800492e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004930:	4b14      	ldr	r3, [pc, #80]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004932:	2200      	movs	r2, #0
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004938:	2200      	movs	r2, #0
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800493c:	4811      	ldr	r0, [pc, #68]	; (8004984 <MX_USART1_UART_Init+0x90>)
 800493e:	f00a fe92 	bl	800f666 <HAL_UART_Init>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004948:	f000 f902 	bl	8004b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800494c:	2100      	movs	r1, #0
 800494e:	480d      	ldr	r0, [pc, #52]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004950:	f00b fbfe 	bl	8010150 <HAL_UARTEx_SetTxFifoThreshold>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800495a:	f000 f8f9 	bl	8004b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800495e:	2100      	movs	r1, #0
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004962:	f00b fc33 	bl	80101cc <HAL_UARTEx_SetRxFifoThreshold>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800496c:	f000 f8f0 	bl	8004b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004970:	4804      	ldr	r0, [pc, #16]	; (8004984 <MX_USART1_UART_Init+0x90>)
 8004972:	f00b fbb4 	bl	80100de <HAL_UARTEx_DisableFifoMode>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800497c:	f000 f8e8 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20002244 	.word	0x20002244
 8004988:	40013800 	.word	0x40013800

0800498c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <MX_DMA_Init+0x60>)
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	4a15      	ldr	r2, [pc, #84]	; (80049ec <MX_DMA_Init+0x60>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6493      	str	r3, [r2, #72]	; 0x48
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <MX_DMA_Init+0x60>)
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <MX_DMA_Init+0x60>)
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <MX_DMA_Init+0x60>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6493      	str	r3, [r2, #72]	; 0x48
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <MX_DMA_Init+0x60>)
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	200b      	movs	r0, #11
 80049c8:	f004 fbd9 	bl	800917e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80049cc:	200b      	movs	r0, #11
 80049ce:	f004 fbf0 	bl	80091b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	200d      	movs	r0, #13
 80049d8:	f004 fbd1 	bl	800917e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80049dc:	200d      	movs	r0, #13
 80049de:	f004 fbe8 	bl	80091b2 <HAL_NVIC_EnableIRQ>

}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a06:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a0c:	f043 0304 	orr.w	r3, r3, #4
 8004a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a12:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a1e:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	4a48      	ldr	r2, [pc, #288]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a24:	f043 0320 	orr.w	r3, r3, #32
 8004a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a2a:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a36:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	4a42      	ldr	r2, [pc, #264]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a42:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a54:	f043 0302 	orr.w	r3, r3, #2
 8004a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <MX_GPIO_Init+0x154>)
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004a66:	2200      	movs	r2, #0
 8004a68:	f645 4107 	movw	r1, #23559	; 0x5c07
 8004a6c:	4836      	ldr	r0, [pc, #216]	; (8004b48 <MX_GPIO_Init+0x158>)
 8004a6e:	f005 fcb1 	bl	800a3d4 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8004a72:	2200      	movs	r2, #0
 8004a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a7c:	f005 fcaa 	bl	800a3d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8004a80:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	482d      	ldr	r0, [pc, #180]	; (8004b4c <MX_GPIO_Init+0x15c>)
 8004a96:	f005 fb03 	bl	800a0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8004a9a:	2370      	movs	r3, #112	; 0x70
 8004a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ab0:	f005 faf6 	bl	800a0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ab8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004acc:	f005 fae8 	bl	800a0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8004ad0:	f645 4307 	movw	r3, #23559	; 0x5c07
 8004ad4:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4817      	ldr	r0, [pc, #92]	; (8004b48 <MX_GPIO_Init+0x158>)
 8004aea:	f005 fad9 	bl	800a0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8004aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af4:	2301      	movs	r3, #1
 8004af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004afc:	2300      	movs	r3, #0
 8004afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4619      	mov	r1, r3
 8004b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b0a:	f005 fac9 	bl	800a0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8004b0e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8004b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4619      	mov	r1, r3
 8004b24:	4808      	ldr	r0, [pc, #32]	; (8004b48 <MX_GPIO_Init+0x158>)
 8004b26:	f005 fabb 	bl	800a0a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2017      	movs	r0, #23
 8004b30:	f004 fb25 	bl	800917e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b34:	2017      	movs	r0, #23
 8004b36:	f004 fb3c 	bl	80091b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b3a:	bf00      	nop
 8004b3c:	3728      	adds	r7, #40	; 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	48000400 	.word	0x48000400
 8004b4c:	48000800 	.word	0x48000800

08004b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b54:	b672      	cpsid	i
}
 8004b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <Error_Handler+0x8>

08004b5a <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e008      	b.n	8004b94 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	edd3 7a00 	vldr	s15, [r3]
 8004ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bac:	d4e9      	bmi.n	8004b82 <Moving_Average_Init+0x28>
	}
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	441a      	add	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	edd3 7a00 	vldr	s15, [r3]
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	d507      	bpl.n	8004c38 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8004c36:	e003      	b.n	8004c40 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c58:	ee16 0a90 	vmov	r0, s13
 8004c5c:	f7fb fc9c 	bl	8000598 <__aeabi_f2d>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	ec43 2b17 	vmov	d7, r2, r3
}
 8004c68:	eeb0 0a47 	vmov.f32	s0, s14
 8004c6c:	eef0 0a67 	vmov.f32	s1, s15
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004ca6:	f7fb ff5f 	bl	8000b68 <__aeabi_dcmpgt>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8004cbc:	e011      	b.n	8004ce2 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004cca:	f7fb ff2f 	bl	8000b2c <__aeabi_dcmplt>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d100      	bne.n	8004cd6 <PID_Init+0x60>
}
 8004cd4:	e005      	b.n	8004ce2 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	0000      	movs	r0, r0
 8004cec:	0000      	movs	r0, r0
	...

08004cf0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8004cf8:	6239      	str	r1, [r7, #32]
 8004cfa:	61fa      	str	r2, [r7, #28]
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d02:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d06:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	6a3a      	ldr	r2, [r7, #32]
 8004d14:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2200      	movs	r2, #0
 8004d20:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004d22:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8004d78 <PID+0x88>
 8004d26:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004d80 <PID+0x90>
 8004d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2c:	f000 f991 	bl	8005052 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	2264      	movs	r2, #100	; 0x64
 8004d34:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8004d36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d3e:	f000 fad9 	bl	80052f4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004d42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004d46:	4619      	mov	r1, r3
 8004d48:	ed97 2b00 	vldr	d2, [r7]
 8004d4c:	ed97 1b02 	vldr	d1, [r7, #8]
 8004d50:	ed97 0b04 	vldr	d0, [r7, #16]
 8004d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d56:	f000 fa25 	bl	80051a4 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8004d5a:	f001 fde1 	bl	8006920 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	605a      	str	r2, [r3, #4]

}
 8004d6a:	bf00      	nop
 8004d6c:	3728      	adds	r7, #40	; 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	f3af 8000 	nop.w
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	406fe000 	.word	0x406fe000
	...

08004d88 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d8c:	b08c      	sub	sp, #48	; 0x30
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <PID_Compute+0x16>
	{
		return _FALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e136      	b.n	800500c <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8004d9e:	f001 fdbf 	bl	8006920 <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d204      	bcs.n	8004dc2 <PID_Compute+0x3a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8124 	beq.w	800500a <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dda:	f7fb fa7d 	bl	80002d8 <__aeabi_dsub>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004df0:	f7fb fa72 	bl	80002d8 <__aeabi_dsub>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e0c:	f7fb fc1c 	bl	8000648 <__aeabi_dmul>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4650      	mov	r0, sl
 8004e16:	4659      	mov	r1, fp
 8004e18:	f7fb fa60 	bl	80002dc <__adddf3>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004e32:	f7fb fe99 	bl	8000b68 <__aeabi_dcmpgt>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d006      	beq.n	8004e4a <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004e48:	e010      	b.n	8004e6c <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004e56:	f7fb fe69 	bl	8000b2c <__aeabi_dcmplt>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d114      	bne.n	8004eaa <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e90:	f7fb fbda 	bl	8000648 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4650      	mov	r0, sl
 8004e9a:	4659      	mov	r1, fp
 8004e9c:	f7fb fa1c 	bl	80002d8 <__aeabi_dsub>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004eb6:	f7fb fe57 	bl	8000b68 <__aeabi_dcmpgt>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004ecc:	e010      	b.n	8004ef0 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004eda:	f7fb fe27 	bl	8000b2c <__aeabi_dcmplt>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004ef6:	4690      	mov	r8, r2
 8004ef8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb fba0 	bl	8000648 <__aeabi_dmul>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004f20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f24:	f7fb fb90 	bl	8000648 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f3a:	f7fb fb85 	bl	8000648 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004f48:	e005      	b.n	8004f56 <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f66:	f7fb fb6f 	bl	8000648 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb f9b1 	bl	80002d8 <__aeabi_dsub>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f7e:	f7fb f9ad 	bl	80002dc <__adddf3>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004f90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f94:	f7fb fde8 	bl	8000b68 <__aeabi_dcmpgt>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004fa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004fa8:	e00e      	b.n	8004fc8 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004fb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fb4:	f7fb fdba 	bl	8000b2c <__aeabi_dcmplt>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004fc4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004fce:	4614      	mov	r4, r2
 8004fd0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fd8:	4620      	mov	r0, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	f7fb fb34 	bl	8000648 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ff2:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 800500a:	2300      	movs	r3, #0
	}

}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005016 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d006      	beq.n	8005044 <PID_SetMode+0x2e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe19 	bl	8004c76 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7bfa      	ldrb	r2, [r7, #15]
 8005048:	705a      	strb	r2, [r3, #1]

}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	6178      	str	r0, [r7, #20]
 800505a:	ed87 0b02 	vstr	d0, [r7, #8]
 800505e:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8005062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800506a:	f7fb fd73 	bl	8000b54 <__aeabi_dcmpge>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d158      	bne.n	8005126 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800507a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 800507e:	6979      	ldr	r1, [r7, #20]
 8005080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005084:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	785b      	ldrb	r3, [r3, #1]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d04b      	beq.n	8005128 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800509e:	f7fb fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050b2:	e9c1 2300 	strd	r2, r3, [r1]
 80050b6:	e012      	b.n	80050de <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80050c6:	f7fb fd31 	bl	8000b2c <__aeabi_dcmplt>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80050da:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050ea:	f7fb fd3d 	bl	8000b68 <__aeabi_dcmpgt>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005100:	e012      	b.n	8005128 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800510e:	f7fb fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8005124:	e000      	b.n	8005128 <PID_SetOutputLimits+0xd6>
		return;
 8005126:	bf00      	nop
		}
		else { }

	}

}
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	6178      	str	r0, [r7, #20]
 8005136:	ed87 0b02 	vstr	d0, [r7, #8]
 800513a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800513e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005146:	f7fb fd05 	bl	8000b54 <__aeabi_dcmpge>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005156:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 800515a:	6979      	ldr	r1, [r7, #20]
 800515c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005160:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8005164:	e000      	b.n	8005168 <PID_SetILimits+0x3a>
		return;
 8005166:	bf00      	nop
}
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	61f8      	str	r0, [r7, #28]
 8005176:	ed87 0b04 	vstr	d0, [r7, #16]
 800517a:	ed87 1b02 	vstr	d1, [r7, #8]
 800517e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	789b      	ldrb	r3, [r3, #2]
 8005186:	4619      	mov	r1, r3
 8005188:	ed97 2b00 	vldr	d2, [r7]
 800518c:	ed97 1b02 	vldr	d1, [r7, #8]
 8005190:	ed97 0b04 	vldr	d0, [r7, #16]
 8005194:	69f8      	ldr	r0, [r7, #28]
 8005196:	f000 f805 	bl	80051a4 <PID_SetTunings2>
}
 800519a:	bf00      	nop
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	61f8      	str	r0, [r7, #28]
 80051ac:	ed87 0b04 	vstr	d0, [r7, #16]
 80051b0:	ed87 1b02 	vstr	d1, [r7, #8]
 80051b4:	ed87 2b00 	vstr	d2, [r7]
 80051b8:	460b      	mov	r3, r1
 80051ba:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051c8:	f7fb fcb0 	bl	8000b2c <__aeabi_dcmplt>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 8089 	bne.w	80052e6 <PID_SetTunings2+0x142>
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051e0:	f7fb fca4 	bl	8000b2c <__aeabi_dcmplt>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d17d      	bne.n	80052e6 <PID_SetTunings2+0x142>
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051f6:	f7fb fc99 	bl	8000b2c <__aeabi_dcmplt>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d172      	bne.n	80052e6 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	7efa      	ldrb	r2, [r7, #27]
 8005204:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8005206:	7efb      	ldrb	r3, [r7, #27]
 8005208:	2b01      	cmp	r3, #1
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800521e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8005222:	69f9      	ldr	r1, [r7, #28]
 8005224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005228:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005232:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fb f98a 	bl	8000554 <__aeabi_ui2d>
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <PID_SetTunings2+0x14c>)
 8005246:	f7fb fb29 	bl	800089c <__aeabi_ddiv>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8005252:	69f9      	ldr	r1, [r7, #28]
 8005254:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005258:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800525c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005260:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005264:	f7fb f9f0 	bl	8000648 <__aeabi_dmul>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8005272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005276:	e9d7 0100 	ldrd	r0, r1, [r7]
 800527a:	f7fb fb0f 	bl	800089c <__aeabi_ddiv>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	78db      	ldrb	r3, [r3, #3]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d12b      	bne.n	80052e8 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	f7fb f81b 	bl	80002d8 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	69f9      	ldr	r1, [r7, #28]
 80052a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	f7fb f80d 	bl	80002d8 <__aeabi_dsub>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	69f9      	ldr	r1, [r7, #28]
 80052c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80052ce:	f04f 0000 	mov.w	r0, #0
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	f7fa ffff 	bl	80002d8 <__aeabi_dsub>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	69f9      	ldr	r1, [r7, #28]
 80052e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80052e4:	e000      	b.n	80052e8 <PID_SetTunings2+0x144>
		return;
 80052e6:	bf00      	nop

	}

}
 80052e8:	3728      	adds	r7, #40	; 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	408f4000 	.word	0x408f4000

080052f4 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d02e      	beq.n	8005366 <PID_SetControllerDirection+0x72>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	78db      	ldrb	r3, [r3, #3]
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	429a      	cmp	r2, r3
 8005310:	d029      	beq.n	8005366 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005318:	f04f 0000 	mov.w	r0, #0
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	f7fa ffda 	bl	80002d8 <__aeabi_dsub>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f04f 0100 	mov.w	r1, #0
 800533c:	f7fa ffcc 	bl	80002d8 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005350:	f04f 0000 	mov.w	r0, #0
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	f7fa ffbe 	bl	80002d8 <__aeabi_dsub>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	70da      	strb	r2, [r3, #3]

}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 8005374:	b5b0      	push	{r4, r5, r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dd01      	ble.n	800538a <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	dd2e      	ble.n	80053f4 <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8005396:	68b8      	ldr	r0, [r7, #8]
 8005398:	f7fb f8ec 	bl	8000574 <__aeabi_i2d>
 800539c:	4604      	mov	r4, r0
 800539e:	460d      	mov	r5, r1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb f8d5 	bl	8000554 <__aeabi_ui2d>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4620      	mov	r0, r4
 80053b0:	4629      	mov	r1, r5
 80053b2:	f7fb fa73 	bl	800089c <__aeabi_ddiv>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80053c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053c8:	f7fb f93e 	bl	8000648 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	68f9      	ldr	r1, [r7, #12]
 80053d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80053dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053e0:	f7fb fa5c 	bl	800089c <__aeabi_ddiv>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	68f9      	ldr	r1, [r7, #12]
 80053ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	609a      	str	r2, [r3, #8]

	}

}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bdb0      	pop	{r4, r5, r7, pc}

080053fc <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800540a:	ec43 2b17 	vmov	d7, r2, r3
}
 800540e:	eeb0 0a47 	vmov.f32	s0, s14
 8005412:	eef0 0a67 	vmov.f32	s1, s15
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800542e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005432:	eeb0 0a47 	vmov.f32	s0, s14
 8005436:	eef0 0a67 	vmov.f32	s1, s15
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005452:	ec43 2b17 	vmov	d7, r2, r3
}
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <HAL_MspInit+0x44>)
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	4a0e      	ldr	r2, [pc, #56]	; (80054ac <HAL_MspInit+0x44>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6613      	str	r3, [r2, #96]	; 0x60
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <HAL_MspInit+0x44>)
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_MspInit+0x44>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <HAL_MspInit+0x44>)
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005490:	6593      	str	r3, [r2, #88]	; 0x58
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_MspInit+0x44>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800549e:	f006 fed3 	bl	800c248 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b09e      	sub	sp, #120	; 0x78
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054c8:	f107 0320 	add.w	r3, r7, #32
 80054cc:	2244      	movs	r2, #68	; 0x44
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f012 fa5e 	bl	8017992 <memset>
  if(hadc->Instance==ADC1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054de:	d171      	bne.n	80055c4 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80054e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80054e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80054ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054ec:	f107 0320 	add.w	r3, r7, #32
 80054f0:	4618      	mov	r0, r3
 80054f2:	f007 fbe7 	bl	800ccc4 <HAL_RCCEx_PeriphCLKConfig>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80054fc:	f7ff fb28 	bl	8004b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005500:	4b64      	ldr	r3, [pc, #400]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	4a63      	ldr	r2, [pc, #396]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 8005508:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800550a:	4b62      	ldr	r3, [pc, #392]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10b      	bne.n	800552a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005512:	4b61      	ldr	r3, [pc, #388]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a60      	ldr	r2, [pc, #384]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800551c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551e:	4b5e      	ldr	r3, [pc, #376]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4a5a      	ldr	r2, [pc, #360]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005536:	4b58      	ldr	r3, [pc, #352]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBUS_Pin|THERMOCOUPLE_Pin;
 8005542:	230c      	movs	r3, #12
 8005544:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005546:	2303      	movs	r3, #3
 8005548:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	2300      	movs	r3, #0
 800554c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005552:	4619      	mov	r1, r3
 8005554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005558:	f004 fda2 	bl	800a0a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 800555e:	4a50      	ldr	r2, [pc, #320]	; (80056a0 <HAL_ADC_MspInit+0x1f0>)
 8005560:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005562:	4b4e      	ldr	r3, [pc, #312]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005564:	2205      	movs	r2, #5
 8005566:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005568:	4b4c      	ldr	r3, [pc, #304]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800556e:	4b4b      	ldr	r3, [pc, #300]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005574:	4b49      	ldr	r3, [pc, #292]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800557a:	4b48      	ldr	r3, [pc, #288]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 800557c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005580:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005582:	4b46      	ldr	r3, [pc, #280]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005588:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800558a:	4b44      	ldr	r3, [pc, #272]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 800558c:	2220      	movs	r2, #32
 800558e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005590:	4b42      	ldr	r3, [pc, #264]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005592:	2200      	movs	r2, #0
 8005594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005596:	4841      	ldr	r0, [pc, #260]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 8005598:	f004 f82c 	bl	80095f4 <HAL_DMA_Init>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80055a2:	f7ff fad5 	bl	8004b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
 80055ac:	4a3b      	ldr	r2, [pc, #236]	; (800569c <HAL_ADC_MspInit+0x1ec>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 80055b2:	2200      	movs	r2, #0
 80055b4:	210a      	movs	r1, #10
 80055b6:	2012      	movs	r0, #18
 80055b8:	f003 fde1 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80055bc:	2012      	movs	r0, #18
 80055be:	f003 fdf8 	bl	80091b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80055c2:	e062      	b.n	800568a <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a36      	ldr	r2, [pc, #216]	; (80056a4 <HAL_ADC_MspInit+0x1f4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d15d      	bne.n	800568a <HAL_ADC_MspInit+0x1da>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80055ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80055d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80055d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055da:	f107 0320 	add.w	r3, r7, #32
 80055de:	4618      	mov	r0, r3
 80055e0:	f007 fb70 	bl	800ccc4 <HAL_RCCEx_PeriphCLKConfig>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 80055ea:	f7ff fab1 	bl	8004b50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80055ee:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a27      	ldr	r2, [pc, #156]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 80055f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80055f8:	4b26      	ldr	r3, [pc, #152]	; (8005694 <HAL_ADC_MspInit+0x1e4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10b      	bne.n	8005618 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	4a24      	ldr	r2, [pc, #144]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800560a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 800560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005618:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005624:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005634:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <HAL_ADC_MspInit+0x1e8>)
 800563e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_Pin;
 8005648:	2302      	movs	r3, #2
 800564a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800564c:	2303      	movs	r3, #3
 800564e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	2300      	movs	r3, #0
 8005652:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8005654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005658:	4619      	mov	r1, r3
 800565a:	4813      	ldr	r0, [pc, #76]	; (80056a8 <HAL_ADC_MspInit+0x1f8>)
 800565c:	f004 fd20 	bl	800a0a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I_LEAK_Pin;
 8005660:	2302      	movs	r3, #2
 8005662:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005664:	2303      	movs	r3, #3
 8005666:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005668:	2300      	movs	r3, #0
 800566a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(I_LEAK_GPIO_Port, &GPIO_InitStruct);
 800566c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005670:	4619      	mov	r1, r3
 8005672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005676:	f004 fd13 	bl	800a0a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800567a:	2200      	movs	r2, #0
 800567c:	210a      	movs	r1, #10
 800567e:	2012      	movs	r0, #18
 8005680:	f003 fd7d 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005684:	2012      	movs	r0, #18
 8005686:	f003 fd94 	bl	80091b2 <HAL_NVIC_EnableIRQ>
}
 800568a:	bf00      	nop
 800568c:	3778      	adds	r7, #120	; 0x78
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20002370 	.word	0x20002370
 8005698:	40021000 	.word	0x40021000
 800569c:	20001e48 	.word	0x20001e48
 80056a0:	40020030 	.word	0x40020030
 80056a4:	50000100 	.word	0x50000100
 80056a8:	48001400 	.word	0x48001400

080056ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <HAL_CRC_MspInit+0x38>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10b      	bne.n	80056d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <HAL_CRC_MspInit+0x3c>)
 80056c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c2:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <HAL_CRC_MspInit+0x3c>)
 80056c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c8:	6493      	str	r3, [r2, #72]	; 0x48
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_CRC_MspInit+0x3c>)
 80056cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40023000 	.word	0x40023000
 80056e8:	40021000 	.word	0x40021000

080056ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b09c      	sub	sp, #112	; 0x70
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	60da      	str	r2, [r3, #12]
 8005702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005704:	f107 0318 	add.w	r3, r7, #24
 8005708:	2244      	movs	r2, #68	; 0x44
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f012 f940 	bl	8017992 <memset>
  if(hi2c->Instance==I2C1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_I2C_MspInit+0xe4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d154      	bne.n	80057c6 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005720:	2300      	movs	r3, #0
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005724:	f107 0318 	add.w	r3, r7, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f007 facb 	bl	800ccc4 <HAL_RCCEx_PeriphCLKConfig>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005734:	f7ff fa0c 	bl	8004b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005738:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	4a25      	ldr	r2, [pc, #148]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005744:	4b23      	ldr	r3, [pc, #140]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 8005752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005754:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800575c:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 800575e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800576e:	2312      	movs	r3, #18
 8005770:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005772:	2300      	movs	r3, #0
 8005774:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005776:	2300      	movs	r3, #0
 8005778:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800577a:	2304      	movs	r3, #4
 800577c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005788:	f004 fc8a 	bl	800a0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800578c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005790:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005792:	2312      	movs	r3, #18
 8005794:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579a:	2300      	movs	r3, #0
 800579c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800579e:	2304      	movs	r3, #4
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057a6:	4619      	mov	r1, r3
 80057a8:	480b      	ldr	r0, [pc, #44]	; (80057d8 <HAL_I2C_MspInit+0xec>)
 80057aa:	f004 fc79 	bl	800a0a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 80057b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057b8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_I2C_MspInit+0xe8>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80057c6:	bf00      	nop
 80057c8:	3770      	adds	r7, #112	; 0x70
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40005400 	.word	0x40005400
 80057d4:	40021000 	.word	0x40021000
 80057d8:	48000400 	.word	0x48000400

080057dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <HAL_SPI_MspInit+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d151      	bne.n	80058a2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057fe:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 8005804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005808:	6593      	str	r3, [r2, #88]	; 0x58
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 800580c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005816:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 8005818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581a:	4a25      	ldr	r2, [pc, #148]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <HAL_SPI_MspInit+0xd4>)
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800582e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005834:	2302      	movs	r3, #2
 8005836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583c:	2300      	movs	r3, #0
 800583e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005840:	2305      	movs	r3, #5
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005844:	f107 0314 	add.w	r3, r7, #20
 8005848:	4619      	mov	r1, r3
 800584a:	481a      	ldr	r0, [pc, #104]	; (80058b4 <HAL_SPI_MspInit+0xd8>)
 800584c:	f004 fc28 	bl	800a0a0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005852:	4a1a      	ldr	r2, [pc, #104]	; (80058bc <HAL_SPI_MspInit+0xe0>)
 8005854:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005858:	220d      	movs	r2, #13
 800585a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800585c:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 800585e:	2210      	movs	r2, #16
 8005860:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005864:	2200      	movs	r2, #0
 8005866:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005868:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800586e:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005870:	2200      	movs	r2, #0
 8005872:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005876:	2200      	movs	r2, #0
 8005878:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 800587c:	2200      	movs	r2, #0
 800587e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005882:	2200      	movs	r2, #0
 8005884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005886:	480c      	ldr	r0, [pc, #48]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 8005888:	f003 feb4 	bl	80095f4 <HAL_DMA_Init>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8005892:	f7ff f95d 	bl	8004b50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a07      	ldr	r2, [pc, #28]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
 800589c:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <HAL_SPI_MspInit+0xdc>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80058a2:	bf00      	nop
 80058a4:	3728      	adds	r7, #40	; 0x28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40003800 	.word	0x40003800
 80058b0:	40021000 	.word	0x40021000
 80058b4:	48000400 	.word	0x48000400
 80058b8:	20001f84 	.word	0x20001f84
 80058bc:	40020008 	.word	0x40020008

080058c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_TIM_PWM_MspInit+0x98>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d12c      	bne.n	800592c <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058d2:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 80058d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d6:	4a21      	ldr	r2, [pc, #132]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 80058d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058dc:	6613      	str	r3, [r2, #96]	; 0x60
 80058de:	4b1f      	ldr	r3, [pc, #124]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 80058e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80058ea:	2200      	movs	r2, #0
 80058ec:	2100      	movs	r1, #0
 80058ee:	2018      	movs	r0, #24
 80058f0:	f003 fc45 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80058f4:	2018      	movs	r0, #24
 80058f6:	f003 fc5c 	bl	80091b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	2019      	movs	r0, #25
 8005900:	f003 fc3d 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005904:	2019      	movs	r0, #25
 8005906:	f003 fc54 	bl	80091b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800590a:	2200      	movs	r2, #0
 800590c:	2100      	movs	r1, #0
 800590e:	201a      	movs	r0, #26
 8005910:	f003 fc35 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005914:	201a      	movs	r0, #26
 8005916:	f003 fc4c 	bl	80091b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800591a:	2200      	movs	r2, #0
 800591c:	2100      	movs	r1, #0
 800591e:	201b      	movs	r0, #27
 8005920:	f003 fc2d 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005924:	201b      	movs	r0, #27
 8005926:	f003 fc44 	bl	80091b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800592a:	e010      	b.n	800594e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0b      	ldr	r2, [pc, #44]	; (8005960 <HAL_TIM_PWM_MspInit+0xa0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10b      	bne.n	800594e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 800593c:	f043 0304 	orr.w	r3, r3, #4
 8005940:	6593      	str	r3, [r2, #88]	; 0x58
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <HAL_TIM_PWM_MspInit+0x9c>)
 8005944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
}
 800594e:	bf00      	nop
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40021000 	.word	0x40021000
 8005960:	40000800 	.word	0x40000800

08005964 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d144      	bne.n	8005a10 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598a:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	6593      	str	r3, [r2, #88]	; 0x58
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800599e:	4b1e      	ldr	r3, [pc, #120]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059aa:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059bc:	f043 0302 	orr.w	r3, r3, #2
 80059c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <HAL_TIM_Encoder_MspInit+0xb4>)
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	60bb      	str	r3, [r7, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d2:	2302      	movs	r3, #2
 80059d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059da:	2300      	movs	r3, #0
 80059dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80059de:	2301      	movs	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80059e2:	f107 0314 	add.w	r3, r7, #20
 80059e6:	4619      	mov	r1, r3
 80059e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ec:	f004 fb58 	bl	800a0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 80059f0:	2308      	movs	r3, #8
 80059f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f4:	2302      	movs	r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fc:	2300      	movs	r3, #0
 80059fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a00:	2301      	movs	r3, #1
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4804      	ldr	r0, [pc, #16]	; (8005a1c <HAL_TIM_Encoder_MspInit+0xb8>)
 8005a0c:	f004 fb48 	bl	800a0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005a10:	bf00      	nop
 8005a12:	3728      	adds	r7, #40	; 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	48000400 	.word	0x48000400

08005a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a34      	ldr	r2, [pc, #208]	; (8005b00 <HAL_TIM_Base_MspInit+0xe0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d114      	bne.n	8005a5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005a32:	4b34      	ldr	r3, [pc, #208]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	4a33      	ldr	r2, [pc, #204]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a38:	f043 0310 	orr.w	r3, r3, #16
 8005a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	2036      	movs	r0, #54	; 0x36
 8005a50:	f003 fb95 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a54:	2036      	movs	r0, #54	; 0x36
 8005a56:	f003 fbac 	bl	80091b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005a5a:	e04c      	b.n	8005af6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <HAL_TIM_Base_MspInit+0xe8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d114      	bne.n	8005a90 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6593      	str	r3, [r2, #88]	; 0x58
 8005a72:	4b24      	ldr	r3, [pc, #144]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2100      	movs	r1, #0
 8005a82:	2037      	movs	r0, #55	; 0x37
 8005a84:	f003 fb7b 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a88:	2037      	movs	r0, #55	; 0x37
 8005a8a:	f003 fb92 	bl	80091b2 <HAL_NVIC_EnableIRQ>
}
 8005a8e:	e032      	b.n	8005af6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_TIM_Base_MspInit+0xec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d114      	bne.n	8005ac4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005a9a:	4b1a      	ldr	r3, [pc, #104]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	2019      	movs	r0, #25
 8005ab8:	f003 fb61 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005abc:	2019      	movs	r0, #25
 8005abe:	f003 fb78 	bl	80091b2 <HAL_NVIC_EnableIRQ>
}
 8005ac2:	e018      	b.n	8005af6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_TIM_Base_MspInit+0xf0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8005ada:	4b0a      	ldr	r3, [pc, #40]	; (8005b04 <HAL_TIM_Base_MspInit+0xe4>)
 8005adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	201a      	movs	r0, #26
 8005aec:	f003 fb47 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005af0:	201a      	movs	r0, #26
 8005af2:	f003 fb5e 	bl	80091b2 <HAL_NVIC_EnableIRQ>
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40001000 	.word	0x40001000
 8005b04:	40021000 	.word	0x40021000
 8005b08:	40001400 	.word	0x40001400
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_TIM_OnePulse_MspInit+0x38>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10b      	bne.n	8005b3e <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b30:	6613      	str	r3, [r2, #96]	; 0x60
 8005b32:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40013400 	.word	0x40013400
 8005b50:	40021000 	.word	0x40021000

08005b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08a      	sub	sp, #40	; 0x28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	60da      	str	r2, [r3, #12]
 8005b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_TIM_MspPostInit+0xa8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d11c      	bne.n	8005bb0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b76:	4b22      	ldr	r3, [pc, #136]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7a:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005b7c:	f043 0320 	orr.w	r3, r3, #32
 8005b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b82:	4b1f      	ldr	r3, [pc, #124]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b92:	2302      	movs	r3, #2
 8005b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4816      	ldr	r0, [pc, #88]	; (8005c04 <HAL_TIM_MspPostInit+0xb0>)
 8005baa:	f004 fa79 	bl	800a0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005bae:	e020      	b.n	8005bf2 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_TIM_MspPostInit+0xb4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bba:	4b11      	ldr	r3, [pc, #68]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005bc0:	f043 0302 	orr.w	r3, r3, #2
 8005bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_TIM_MspPostInit+0xac>)
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bde:	2300      	movs	r3, #0
 8005be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005be2:	2302      	movs	r3, #2
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005be6:	f107 0314 	add.w	r3, r7, #20
 8005bea:	4619      	mov	r1, r3
 8005bec:	4807      	ldr	r0, [pc, #28]	; (8005c0c <HAL_TIM_MspPostInit+0xb8>)
 8005bee:	f004 fa57 	bl	800a0a0 <HAL_GPIO_Init>
}
 8005bf2:	bf00      	nop
 8005bf4:	3728      	adds	r7, #40	; 0x28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	40021000 	.word	0x40021000
 8005c04:	48001400 	.word	0x48001400
 8005c08:	40000800 	.word	0x40000800
 8005c0c:	48000400 	.word	0x48000400

08005c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b09a      	sub	sp, #104	; 0x68
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c28:	f107 0310 	add.w	r3, r7, #16
 8005c2c:	2244      	movs	r2, #68	; 0x44
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f011 feae 	bl	8017992 <memset>
  if(huart->Instance==USART1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <HAL_UART_MspInit+0xa8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d137      	bne.n	8005cb0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c40:	2301      	movs	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f007 f839 	bl	800ccc4 <HAL_RCCEx_PeriphCLKConfig>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c58:	f7fe ff7a 	bl	8004b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c5c:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c60:	4a16      	ldr	r2, [pc, #88]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c66:	6613      	str	r3, [r2, #96]	; 0x60
 8005c68:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c78:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_UART_MspInit+0xac>)
 8005c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005c8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c90:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c92:	2302      	movs	r3, #2
 8005c94:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c9e:	2307      	movs	r3, #7
 8005ca0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cac:	f004 f9f8 	bl	800a0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005cb0:	bf00      	nop
 8005cb2:	3768      	adds	r7, #104	; 0x68
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40013800 	.word	0x40013800
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <NMI_Handler+0x4>

08005cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cca:	e7fe      	b.n	8005cca <HardFault_Handler+0x4>

08005ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <MemManage_Handler+0x4>

08005cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cd6:	e7fe      	b.n	8005cd6 <BusFault_Handler+0x4>

08005cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cdc:	e7fe      	b.n	8005cdc <UsageFault_Handler+0x4>

08005cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d0c:	f000 fdf6 	bl	80068fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d10:	bf00      	nop
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005d18:	4802      	ldr	r0, [pc, #8]	; (8005d24 <DMA1_Channel1_IRQHandler+0x10>)
 8005d1a:	f003 fde7 	bl	80098ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20001f84 	.word	0x20001f84

08005d28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d2c:	4802      	ldr	r0, [pc, #8]	; (8005d38 <DMA1_Channel3_IRQHandler+0x10>)
 8005d2e:	f003 fddd 	bl	80098ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20001e48 	.word	0x20001e48

08005d3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d40:	4803      	ldr	r0, [pc, #12]	; (8005d50 <ADC1_2_IRQHandler+0x14>)
 8005d42:	f001 fd57 	bl	80077f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005d46:	4803      	ldr	r0, [pc, #12]	; (8005d54 <ADC1_2_IRQHandler+0x18>)
 8005d48:	f001 fd54 	bl	80077f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20001d70 	.word	0x20001d70
 8005d54:	20001ddc 	.word	0x20001ddc

08005d58 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005d5c:	4802      	ldr	r0, [pc, #8]	; (8005d68 <USB_LP_IRQHandler+0x10>)
 8005d5e:	f004 fd8b 	bl	800a878 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200030e0 	.word	0x200030e0

08005d6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005d70:	2020      	movs	r0, #32
 8005d72:	f004 fb47 	bl	800a404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8005d76:	2080      	movs	r0, #128	; 0x80
 8005d78:	f004 fb44 	bl	800a404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d80:	f004 fb40 	bl	800a404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005d8e:	f008 fbb9 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20001fe4 	.word	0x20001fe4

08005d9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005da0:	4803      	ldr	r0, [pc, #12]	; (8005db0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005da2:	f008 fbaf 	bl	800e504 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005da6:	4803      	ldr	r0, [pc, #12]	; (8005db4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005da8:	f008 fbac 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20001fe4 	.word	0x20001fe4
 8005db4:	200021ac 	.word	0x200021ac

08005db8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dbc:	4803      	ldr	r0, [pc, #12]	; (8005dcc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8005dbe:	f008 fba1 	bl	800e504 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005dc2:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005dc4:	f008 fb9e 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005dc8:	bf00      	nop
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20001fe4 	.word	0x20001fe4
 8005dd0:	200021f8 	.word	0x200021f8

08005dd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005dd8:	4802      	ldr	r0, [pc, #8]	; (8005de4 <TIM1_CC_IRQHandler+0x10>)
 8005dda:	f008 fb93 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20001fe4 	.word	0x20001fe4

08005de8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005dec:	4802      	ldr	r0, [pc, #8]	; (8005df8 <TIM6_DAC_IRQHandler+0x10>)
 8005dee:	f008 fb89 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	200020c8 	.word	0x200020c8

08005dfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e00:	4802      	ldr	r0, [pc, #8]	; (8005e0c <TIM7_IRQHandler+0x10>)
 8005e02:	f008 fb7f 	bl	800e504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20002114 	.word	0x20002114

08005e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  return 1;
 8005e14:	2301      	movs	r3, #1
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <_kill>:

int _kill(int pid, int sig)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e2a:	f011 fe05 	bl	8017a38 <__errno>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2216      	movs	r2, #22
 8005e32:	601a      	str	r2, [r3, #0]
  return -1;
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <_exit>:

void _exit (int status)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e48:	f04f 31ff 	mov.w	r1, #4294967295
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ffe7 	bl	8005e20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e52:	e7fe      	b.n	8005e52 <_exit+0x12>

08005e54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e00a      	b.n	8005e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e66:	f3af 8000 	nop.w
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	60ba      	str	r2, [r7, #8]
 8005e72:	b2ca      	uxtb	r2, r1
 8005e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	dbf0      	blt.n	8005e66 <_read+0x12>
  }

  return len;
 8005e84:	687b      	ldr	r3, [r7, #4]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e009      	b.n	8005eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	60ba      	str	r2, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	dbf1      	blt.n	8005ea0 <_write+0x12>
  }
  return len;
 8005ebc:	687b      	ldr	r3, [r7, #4]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <_close>:

int _close(int file)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eee:	605a      	str	r2, [r3, #4]
  return 0;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <_isatty>:

int _isatty(int file)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f06:	2301      	movs	r3, #1
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <_sbrk+0x5c>)
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <_sbrk+0x60>)
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f44:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <_sbrk+0x64>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f4c:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <_sbrk+0x64>)
 8005f4e:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <_sbrk+0x68>)
 8005f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <_sbrk+0x64>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d207      	bcs.n	8005f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f60:	f011 fd6a 	bl	8017a38 <__errno>
 8005f64:	4603      	mov	r3, r0
 8005f66:	220c      	movs	r2, #12
 8005f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6e:	e009      	b.n	8005f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <_sbrk+0x64>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f76:	4b07      	ldr	r3, [pc, #28]	; (8005f94 <_sbrk+0x64>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	4a05      	ldr	r2, [pc, #20]	; (8005f94 <_sbrk+0x64>)
 8005f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f82:	68fb      	ldr	r3, [r7, #12]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20008000 	.word	0x20008000
 8005f90:	00000400 	.word	0x00000400
 8005f94:	20002374 	.word	0x20002374
 8005f98:	20003728 	.word	0x20003728

08005f9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <SystemInit+0x20>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	4a05      	ldr	r2, [pc, #20]	; (8005fbc <SystemInit+0x20>)
 8005fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005fc0:	480d      	ldr	r0, [pc, #52]	; (8005ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005fc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005fc4:	f7ff ffea 	bl	8005f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
                                   ldr r0, =_sdata
 8005fc8:	480c      	ldr	r0, [pc, #48]	; (8005ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8005fca:	490d      	ldr	r1, [pc, #52]	; (8006000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fcc:	4a0d      	ldr	r2, [pc, #52]	; (8006004 <LoopForever+0xe>)
  movs r3, #0
 8005fce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005fd0:	e002      	b.n	8005fd8 <LoopCopyDataInit>

08005fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fd6:	3304      	adds	r3, #4

08005fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fdc:	d3f9      	bcc.n	8005fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fde:	4a0a      	ldr	r2, [pc, #40]	; (8006008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005fe0:	4c0a      	ldr	r4, [pc, #40]	; (800600c <LoopForever+0x16>)
  movs r3, #0
 8005fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fe4:	e001      	b.n	8005fea <LoopFillZerobss>

08005fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fe8:	3204      	adds	r2, #4

08005fea <LoopFillZerobss>:
LoopFillZerobss:
  cmp r2, r4
 8005fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fec:	d3fb      	bcc.n	8005fe6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005fee:	f011 fd29 	bl	8017a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005ff2:	f7fd fd75 	bl	8003ae0 <main>

08005ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8005ff6:	e7fe      	b.n	8005ff6 <LoopForever>
  ldr   r0, =_estack
 8005ff8:	20008000 	.word	0x20008000
                                   ldr r0, =_sdata
 8005ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006000:	2000055c 	.word	0x2000055c
  ldr r2, =_sidata
 8006004:	0801e348 	.word	0x0801e348
  ldr r2, =_sbss
 8006008:	20000560 	.word	0x20000560
  ldr r4, =_ebss
 800600c:	20003728 	.word	0x20003728

08006010 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006010:	e7fe      	b.n	8006010 <COMP1_2_3_IRQHandler>
	...

08006014 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800601e:	4b12      	ldr	r3, [pc, #72]	; (8006068 <setSPI_Size+0x54>)
 8006020:	f993 3000 	ldrsb.w	r3, [r3]
 8006024:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006028:	429a      	cmp	r2, r3
 800602a:	d017      	beq.n	800605c <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <setSPI_Size+0x58>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <setSPI_Size+0x58>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800603c:	4a0a      	ldr	r2, [pc, #40]	; (8006068 <setSPI_Size+0x54>)
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8006042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d104      	bne.n	8006054 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <setSPI_Size+0x58>)
 800604c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006050:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8006052:	e003      	b.n	800605c <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <setSPI_Size+0x58>)
 8006056:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800605a:	60da      	str	r2, [r3, #12]
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200001e4 	.word	0x200001e4
 800606c:	20001f20 	.word	0x20001f20

08006070 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	460a      	mov	r2, r1
 800607a:	71fb      	strb	r3, [r7, #7]
 800607c:	4613      	mov	r3, r2
 800607e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8006080:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff ffc5 	bl	8006014 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800608a:	4b3c      	ldr	r3, [pc, #240]	; (800617c <setDMAMemMode+0x10c>)
 800608c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006090:	461a      	mov	r2, r3
 8006092:	79bb      	ldrb	r3, [r7, #6]
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <setDMAMemMode+0x36>
 8006098:	4b38      	ldr	r3, [pc, #224]	; (800617c <setDMAMemMode+0x10c>)
 800609a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800609e:	461a      	mov	r2, r3
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d066      	beq.n	8006174 <setDMAMemMode+0x104>
    config.dma_sz =size;
 80060a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80060aa:	4b34      	ldr	r3, [pc, #208]	; (800617c <setDMAMemMode+0x10c>)
 80060ac:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80060ae:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80060b2:	4b32      	ldr	r3, [pc, #200]	; (800617c <setDMAMemMode+0x10c>)
 80060b4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 80060b6:	4b32      	ldr	r3, [pc, #200]	; (8006180 <setDMAMemMode+0x110>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b30      	ldr	r3, [pc, #192]	; (8006180 <setDMAMemMode+0x110>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 80060ca:	bf00      	nop
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <setDMAMemMode+0x110>)
 80060ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f7      	bne.n	80060cc <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10e      	bne.n	8006100 <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80060e2:	4b27      	ldr	r3, [pc, #156]	; (8006180 <setDMAMemMode+0x110>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80060ea:	4b25      	ldr	r3, [pc, #148]	; (8006180 <setDMAMemMode+0x110>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b23      	ldr	r3, [pc, #140]	; (8006180 <setDMAMemMode+0x110>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e00d      	b.n	800611c <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8006100:	4b1f      	ldr	r3, [pc, #124]	; (8006180 <setDMAMemMode+0x110>)
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	2200      	movs	r2, #0
 8006106:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <setDMAMemMode+0x110>)
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <setDMAMemMode+0x110>)
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800611a:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 800611c:	79bb      	ldrb	r3, [r7, #6]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d116      	bne.n	8006150 <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <setDMAMemMode+0x110>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800612a:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800612c:	4b14      	ldr	r3, [pc, #80]	; (8006180 <setDMAMemMode+0x110>)
 800612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006134:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <setDMAMemMode+0x110>)
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006142:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <setDMAMemMode+0x110>)
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 800614c:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800614e:	e011      	b.n	8006174 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <setDMAMemMode+0x110>)
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	2200      	movs	r2, #0
 8006156:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006158:	4b09      	ldr	r3, [pc, #36]	; (8006180 <setDMAMemMode+0x110>)
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	2200      	movs	r2, #0
 800615e:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8006160:	4b07      	ldr	r3, [pc, #28]	; (8006180 <setDMAMemMode+0x110>)
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <setDMAMemMode+0x110>)
 800616a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	200001e4 	.word	0x200001e4
 8006180:	20001f20 	.word	0x20001f20

08006184 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8006190:	2000      	movs	r0, #0
 8006192:	f7ff ff3f 	bl	8006014 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8006196:	2200      	movs	r2, #0
 8006198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800619c:	4815      	ldr	r0, [pc, #84]	; (80061f4 <LCD_WriteCommand+0x70>)
 800619e:	f004 f919 	bl	800a3d4 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80061a2:	2200      	movs	r2, #0
 80061a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061a8:	4812      	ldr	r0, [pc, #72]	; (80061f4 <LCD_WriteCommand+0x70>)
 80061aa:	f004 f913 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	2201      	movs	r2, #1
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4810      	ldr	r0, [pc, #64]	; (80061f8 <LCD_WriteCommand+0x74>)
 80061b8:	f007 f81f 	bl	800d1fa <HAL_SPI_Transmit>
  if(argc){
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80061c2:	2201      	movs	r2, #1
 80061c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061c8:	480a      	ldr	r0, [pc, #40]	; (80061f4 <LCD_WriteCommand+0x70>)
 80061ca:	f004 f903 	bl	800a3d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	1c59      	adds	r1, r3, #1
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	4807      	ldr	r0, [pc, #28]	; (80061f8 <LCD_WriteCommand+0x74>)
 80061dc:	f007 f80d 	bl	800d1fa <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80061e0:	2201      	movs	r2, #1
 80061e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061e6:	4803      	ldr	r0, [pc, #12]	; (80061f4 <LCD_WriteCommand+0x70>)
 80061e8:	f004 f8f4 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	48000400 	.word	0x48000400
 80061f8:	20001f20 	.word	0x20001f20

080061fc <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006206:	2201      	movs	r2, #1
 8006208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800620c:	4830      	ldr	r0, [pc, #192]	; (80062d0 <LCD_WriteData+0xd4>)
 800620e:	f004 f8e1 	bl	800a3d4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006212:	2200      	movs	r2, #0
 8006214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006218:	482d      	ldr	r0, [pc, #180]	; (80062d0 <LCD_WriteData+0xd4>)
 800621a:	f004 f8db 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800621e:	e049      	b.n	80062b4 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006226:	4293      	cmp	r3, r2
 8006228:	bf28      	it	cs
 800622a:	4613      	movcs	r3, r2
 800622c:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b20      	cmp	r3, #32
 8006232:	d924      	bls.n	800627e <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8006234:	89fb      	ldrh	r3, [r7, #14]
 8006236:	461a      	mov	r2, r3
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	4826      	ldr	r0, [pc, #152]	; (80062d4 <LCD_WriteData+0xd8>)
 800623c:	f007 f952 	bl	800d4e4 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8006240:	bf00      	nop
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <LCD_WriteData+0xd8>)
 8006244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006246:	4618      	mov	r0, r3
 8006248:	f003 fbff 	bl	8009a4a <HAL_DMA_GetState>
 800624c:	4603      	mov	r3, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d1f7      	bne.n	8006242 <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 8006252:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <LCD_WriteData+0xdc>)
 8006254:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d127      	bne.n	80062ac <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 800625c:	4b1e      	ldr	r3, [pc, #120]	; (80062d8 <LCD_WriteData+0xdc>)
 800625e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d104      	bne.n	8006270 <LCD_WriteData+0x74>
          buff += chunk_size;
 8006266:	89fb      	ldrh	r3, [r7, #14]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	4413      	add	r3, r2
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e01d      	b.n	80062ac <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 8006270:	89fb      	ldrh	r3, [r7, #14]
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	e016      	b.n	80062ac <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800627e:	89fa      	ldrh	r2, [r7, #14]
 8006280:	f04f 33ff 	mov.w	r3, #4294967295
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	4813      	ldr	r0, [pc, #76]	; (80062d4 <LCD_WriteData+0xd8>)
 8006288:	f006 ffb7 	bl	800d1fa <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 800628c:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <LCD_WriteData+0xdc>)
 800628e:	f993 3000 	ldrsb.w	r3, [r3]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d104      	bne.n	80062a0 <LCD_WriteData+0xa4>
        buff += chunk_size;
 8006296:	89fb      	ldrh	r3, [r7, #14]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	e005      	b.n	80062ac <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 80062a0:	89fb      	ldrh	r3, [r7, #14]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80062ac:	89fb      	ldrh	r3, [r7, #14]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1b2      	bne.n	8006220 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80062ba:	2201      	movs	r2, #1
 80062bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062c0:	4803      	ldr	r0, [pc, #12]	; (80062d0 <LCD_WriteData+0xd4>)
 80062c2:	f004 f887 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	48000400 	.word	0x48000400
 80062d4:	20001f20 	.word	0x20001f20
 80062d8:	200001e4 	.word	0x200001e4

080062dc <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7735.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { CMD_MADCTL, 0};
 80062e6:	2336      	movs	r3, #54	; 0x36
 80062e8:	81bb      	strh	r3, [r7, #12]

  m = m % 4; // can't be higher than 3
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	71fb      	strb	r3, [r7, #7]

  switch (m)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d817      	bhi.n	8006328 <LCD_SetRotation+0x4c>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <LCD_SetRotation+0x24>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006311 	.word	0x08006311
 8006304:	08006317 	.word	0x08006317
 8006308:	0800631d 	.word	0x0800631d
 800630c:	08006323 	.word	0x08006323
  {
  case 0:
#if LCD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MY | CMD_MADCTL_RGB;
 8006310:	23c0      	movs	r3, #192	; 0xc0
 8006312:	737b      	strb	r3, [r7, #13]
#endif
    break;
 8006314:	e008      	b.n	8006328 <LCD_SetRotation+0x4c>
  case 1:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MY | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 8006316:	23a0      	movs	r3, #160	; 0xa0
 8006318:	737b      	strb	r3, [r7, #13]
#endif
    break;
 800631a:	e005      	b.n	8006328 <LCD_SetRotation+0x4c>
  case 2:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_RGB;
 800631c:	2300      	movs	r3, #0
 800631e:	737b      	strb	r3, [r7, #13]
#endif
    break;
 8006320:	e002      	b.n	8006328 <LCD_SetRotation+0x4c>
  case 3:
#if CMD_IS_160X80
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_BGR;
#else
    cmd[1] = CMD_MADCTL_MX | CMD_MADCTL_MV | CMD_MADCTL_RGB;
 8006322:	2360      	movs	r3, #96	; 0x60
 8006324:	737b      	strb	r3, [r7, #13]
#endif
    break;
 8006326:	bf00      	nop
  }
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006328:	f107 030c 	add.w	r3, r7, #12
 800632c:	2101      	movs	r1, #1
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff28 	bl	8006184 <LCD_WriteCommand>
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b08b      	sub	sp, #44	; 0x2c
 8006340:	af00      	add	r7, sp, #0
 8006342:	4604      	mov	r4, r0
 8006344:	4608      	mov	r0, r1
 8006346:	4611      	mov	r1, r2
 8006348:	461a      	mov	r2, r3
 800634a:	4623      	mov	r3, r4
 800634c:	80fb      	strh	r3, [r7, #6]
 800634e:	4603      	mov	r3, r0
 8006350:	80bb      	strh	r3, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	807b      	strh	r3, [r7, #2]
 8006356:	4613      	mov	r3, r2
 8006358:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8006362:	88bb      	ldrh	r3, [r7, #4]
 8006364:	847b      	strh	r3, [r7, #34]	; 0x22
 8006366:	883b      	ldrh	r3, [r7, #0]
 8006368:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800636a:	232a      	movs	r3, #42	; 0x2a
 800636c:	763b      	strb	r3, [r7, #24]
 800636e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006372:	121b      	asrs	r3, r3, #8
 8006374:	b21b      	sxth	r3, r3
 8006376:	b2db      	uxtb	r3, r3
 8006378:	767b      	strb	r3, [r7, #25]
 800637a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800637c:	b2db      	uxtb	r3, r3
 800637e:	76bb      	strb	r3, [r7, #26]
 8006380:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006384:	121b      	asrs	r3, r3, #8
 8006386:	b21b      	sxth	r3, r3
 8006388:	b2db      	uxtb	r3, r3
 800638a:	76fb      	strb	r3, [r7, #27]
 800638c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800638e:	b2db      	uxtb	r3, r3
 8006390:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8006392:	f107 0318 	add.w	r3, r7, #24
 8006396:	2104      	movs	r1, #4
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fef3 	bl	8006184 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800639e:	232b      	movs	r3, #43	; 0x2b
 80063a0:	743b      	strb	r3, [r7, #16]
 80063a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80063a6:	121b      	asrs	r3, r3, #8
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	747b      	strb	r3, [r7, #17]
 80063ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	74bb      	strb	r3, [r7, #18]
 80063b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80063b8:	121b      	asrs	r3, r3, #8
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	74fb      	strb	r3, [r7, #19]
 80063c0:	8c3b      	ldrh	r3, [r7, #32]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063c6:	f107 0310 	add.w	r3, r7, #16
 80063ca:	2104      	movs	r1, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fed9 	bl	8006184 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80063d2:	232c      	movs	r3, #44	; 0x2c
 80063d4:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fed1 	bl	8006184 <LCD_WriteCommand>
  }
}
 80063e2:	bf00      	nop
 80063e4:	372c      	adds	r7, #44	; 0x2c
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd90      	pop	{r4, r7, pc}
	...

080063ec <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	80fb      	strh	r3, [r7, #6]
 80063f6:	460b      	mov	r3, r1
 80063f8:	80bb      	strh	r3, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80063fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006402:	2b00      	cmp	r3, #0
 8006404:	db39      	blt.n	800647a <LCD_DrawPixel+0x8e>
 8006406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800640a:	2bef      	cmp	r3, #239	; 0xef
 800640c:	dc35      	bgt.n	800647a <LCD_DrawPixel+0x8e>
 800640e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	db31      	blt.n	800647a <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8006416:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800641a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800641e:	da2c      	bge.n	800647a <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	b29b      	uxth	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	733b      	strb	r3, [r7, #12]
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8006430:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006434:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006438:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800643c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006440:	f7ff ff7c 	bl	800633c <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006444:	2201      	movs	r2, #1
 8006446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800644a:	480e      	ldr	r0, [pc, #56]	; (8006484 <LCD_DrawPixel+0x98>)
 800644c:	f003 ffc2 	bl	800a3d4 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006456:	480b      	ldr	r0, [pc, #44]	; (8006484 <LCD_DrawPixel+0x98>)
 8006458:	f003 ffbc 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800645c:	f107 010c 	add.w	r1, r7, #12
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	2202      	movs	r2, #2
 8006466:	4808      	ldr	r0, [pc, #32]	; (8006488 <LCD_DrawPixel+0x9c>)
 8006468:	f006 fec7 	bl	800d1fa <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 800646c:	2201      	movs	r2, #1
 800646e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006472:	4804      	ldr	r0, [pc, #16]	; (8006484 <LCD_DrawPixel+0x98>)
 8006474:	f003 ffae 	bl	800a3d4 <HAL_GPIO_WritePin>
 8006478:	e000      	b.n	800647c <LCD_DrawPixel+0x90>
    return;
 800647a:	bf00      	nop
#endif
}
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	48000400 	.word	0x48000400
 8006488:	20001f20 	.word	0x20001f20

0800648c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 800648c:	b580      	push	{r7, lr}
 800648e:	b094      	sub	sp, #80	; 0x50
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b20      	cmp	r3, #32
 800649c:	d905      	bls.n	80064aa <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800649e:	1cbb      	adds	r3, r7, #2
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff feaa 	bl	80061fc <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80064a8:	e026      	b.n	80064f8 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80064aa:	2300      	movs	r3, #0
 80064ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064ae:	e009      	b.n	80064c4 <LCD_FillPixels+0x38>
      fill[t]=color;
 80064b0:	887a      	ldrh	r2, [r7, #2]
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	3350      	adds	r3, #80	; 0x50
 80064b8:	443b      	add	r3, r7
 80064ba:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80064be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c0:	3301      	adds	r3, #1
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	bf28      	it	cs
 80064ca:	2320      	movcs	r3, #32
 80064cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d3ee      	bcc.n	80064b0 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 80064d2:	e00e      	b.n	80064f2 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	bf28      	it	cs
 80064da:	2320      	movcs	r3, #32
 80064dc:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fe89 	bl	80061fc <LCD_WriteData>
      pixels-=sz;
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1ed      	bne.n	80064d4 <LCD_FillPixels+0x48>
}
 80064f8:	bf00      	nop
 80064fa:	3750      	adds	r7, #80	; 0x50
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4623      	mov	r3, r4
 8006510:	80fb      	strh	r3, [r7, #6]
 8006512:	4603      	mov	r3, r0
 8006514:	80bb      	strh	r3, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	807b      	strh	r3, [r7, #2]
 800651a:	4613      	mov	r3, r2
 800651c:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800651e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d105      	bne.n	8006534 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8006528:	2100      	movs	r1, #0
 800652a:	2001      	movs	r0, #1
 800652c:	f7ff fda0 	bl	8006070 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	e014      	b.n	800655e <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8006534:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006538:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800653c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006540:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006544:	f7ff fefa 	bl	800633c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8006548:	2101      	movs	r1, #1
 800654a:	2000      	movs	r0, #0
 800654c:	f7ff fd90 	bl	8006070 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 8006550:	2201      	movs	r2, #1
 8006552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006556:	4804      	ldr	r0, [pc, #16]	; (8006568 <LCD_FillArea+0x68>)
 8006558:	f003 ff3c 	bl	800a3d4 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <LCD_FillArea+0x6c>)
}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	bf00      	nop
 8006568:	48000400 	.word	0x48000400
 800656c:	0800648d 	.word	0x0800648d

08006570 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	4604      	mov	r4, r0
 8006578:	4608      	mov	r0, r1
 800657a:	4611      	mov	r1, r2
 800657c:	461a      	mov	r2, r3
 800657e:	4623      	mov	r3, r4
 8006580:	80fb      	strh	r3, [r7, #6]
 8006582:	4603      	mov	r3, r0
 8006584:	80bb      	strh	r3, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	807b      	strh	r3, [r7, #2]
 800658a:	4613      	mov	r3, r2
 800658c:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	3301      	adds	r3, #1
 8006596:	4619      	mov	r1, r3
 8006598:	883a      	ldrh	r2, [r7, #0]
 800659a:	88bb      	ldrh	r3, [r7, #4]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	3301      	adds	r3, #1
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80065a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80065aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80065ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80065b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80065b6:	f7ff fec1 	bl	800633c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80065ba:	2101      	movs	r1, #1
 80065bc:	2000      	movs	r0, #0
 80065be:	f7ff fd57 	bl	8006070 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80065c2:	8c3b      	ldrh	r3, [r7, #32]
 80065c4:	4619      	mov	r1, r3
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f7ff ff60 	bl	800648c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 80065cc:	2100      	movs	r1, #0
 80065ce:	2001      	movs	r0, #1
 80065d0:	f7ff fd4e 	bl	8006070 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}

080065de <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80065de:	b590      	push	{r4, r7, lr}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	4603      	mov	r3, r0
 80065e6:	603a      	str	r2, [r7, #0]
 80065e8:	80fb      	strh	r3, [r7, #6]
 80065ea:	460b      	mov	r3, r1
 80065ec:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	889b      	ldrh	r3, [r3, #4]
 80065f2:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	88db      	ldrh	r3, [r3, #6]
 80065f8:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2bef      	cmp	r3, #239	; 0xef
 80065fe:	d839      	bhi.n	8006674 <LCD_DrawImage+0x96>
 8006600:	88bb      	ldrh	r3, [r7, #4]
 8006602:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006606:	d235      	bcs.n	8006674 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	4413      	add	r3, r2
 800660e:	2bf0      	cmp	r3, #240	; 0xf0
 8006610:	dc32      	bgt.n	8006678 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8006612:	88ba      	ldrh	r2, [r7, #4]
 8006614:	89bb      	ldrh	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800661c:	dc2e      	bgt.n	800667c <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	7a1b      	ldrb	r3, [r3, #8]
 8006622:	2b10      	cmp	r3, #16
 8006624:	d12c      	bne.n	8006680 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8006626:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800662a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800662e:	88fa      	ldrh	r2, [r7, #6]
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	4413      	add	r3, r2
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29b      	uxth	r3, r3
 800663a:	b21c      	sxth	r4, r3
 800663c:	88ba      	ldrh	r2, [r7, #4]
 800663e:	89bb      	ldrh	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29b      	uxth	r3, r3
 8006648:	b21b      	sxth	r3, r3
 800664a:	4622      	mov	r2, r4
 800664c:	f7ff fe76 	bl	800633c <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006650:	2101      	movs	r1, #1
 8006652:	2001      	movs	r0, #1
 8006654:	f7ff fd0c 	bl	8006070 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	89ba      	ldrh	r2, [r7, #12]
 8006660:	fb02 f303 	mul.w	r3, r2, r3
 8006664:	4619      	mov	r1, r3
 8006666:	f7ff fdc9 	bl	80061fc <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800666a:	2100      	movs	r1, #0
 800666c:	2001      	movs	r0, #1
 800666e:	f7ff fcff 	bl	8006070 <setDMAMemMode>
 8006672:	e006      	b.n	8006682 <LCD_DrawImage+0xa4>
    return;
 8006674:	bf00      	nop
 8006676:	e004      	b.n	8006682 <LCD_DrawImage+0xa4>
    return;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <LCD_DrawImage+0xa4>
    return;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <LCD_DrawImage+0xa4>
    return;
 8006680:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bd90      	pop	{r4, r7, pc}

08006688 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b087      	sub	sp, #28
 800668c:	af02      	add	r7, sp, #8
 800668e:	4604      	mov	r4, r0
 8006690:	4608      	mov	r0, r1
 8006692:	4611      	mov	r1, r2
 8006694:	461a      	mov	r2, r3
 8006696:	4623      	mov	r3, r4
 8006698:	80fb      	strh	r3, [r7, #6]
 800669a:	4603      	mov	r3, r0
 800669c:	80bb      	strh	r3, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	807b      	strh	r3, [r7, #2]
 80066a2:	4613      	mov	r3, r2
 80066a4:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80066a6:	88fa      	ldrh	r2, [r7, #6]
 80066a8:	887b      	ldrh	r3, [r7, #2]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d10a      	bne.n	80066c4 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80066ae:	88ba      	ldrh	r2, [r7, #4]
 80066b0:	883b      	ldrh	r3, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d918      	bls.n	80066e8 <LCD_DrawLine+0x60>
 80066b6:	88bb      	ldrh	r3, [r7, #4]
 80066b8:	81bb      	strh	r3, [r7, #12]
 80066ba:	883b      	ldrh	r3, [r7, #0]
 80066bc:	80bb      	strh	r3, [r7, #4]
 80066be:	89bb      	ldrh	r3, [r7, #12]
 80066c0:	803b      	strh	r3, [r7, #0]
 80066c2:	e011      	b.n	80066e8 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80066c4:	88ba      	ldrh	r2, [r7, #4]
 80066c6:	883b      	ldrh	r3, [r7, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d10a      	bne.n	80066e2 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	887b      	ldrh	r3, [r7, #2]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d909      	bls.n	80066e8 <LCD_DrawLine+0x60>
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	81fb      	strh	r3, [r7, #14]
 80066d8:	887b      	ldrh	r3, [r7, #2]
 80066da:	80fb      	strh	r3, [r7, #6]
 80066dc:	89fb      	ldrh	r3, [r7, #14]
 80066de:	807b      	strh	r3, [r7, #2]
 80066e0:	e002      	b.n	80066e8 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	e009      	b.n	80066fc <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80066e8:	883c      	ldrh	r4, [r7, #0]
 80066ea:	887a      	ldrh	r2, [r7, #2]
 80066ec:	88b9      	ldrh	r1, [r7, #4]
 80066ee:	88f8      	ldrh	r0, [r7, #6]
 80066f0:	8c3b      	ldrh	r3, [r7, #32]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	4623      	mov	r3, r4
 80066f6:	f7ff ff3b 	bl	8006570 <LCD_Fill>
  return UG_RESULT_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bd90      	pop	{r4, r7, pc}

08006704 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60ba      	str	r2, [r7, #8]
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	4603      	mov	r3, r0
 8006710:	81fb      	strh	r3, [r7, #14]
 8006712:	460b      	mov	r3, r1
 8006714:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f00c fa10 	bl	8012b3c <UG_FontSelect>
  UG_SetForecolor(color);
 800671c:	8b3b      	ldrh	r3, [r7, #24]
 800671e:	4618      	mov	r0, r3
 8006720:	f00c fd58 	bl	80131d4 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8006724:	8bbb      	ldrh	r3, [r7, #28]
 8006726:	4618      	mov	r0, r3
 8006728:	f00c fd66 	bl	80131f8 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 800672c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006730:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	4618      	mov	r0, r3
 8006738:	f00c fcb4 	bl	80130a4 <UG_PutString>
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <LCD_setPower+0x14>
 8006754:	2329      	movs	r3, #41	; 0x29
 8006756:	e000      	b.n	800675a <LCD_setPower+0x16>
 8006758:	2328      	movs	r3, #40	; 0x28
 800675a:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fd0e 	bl	8006184 <LCD_WriteCommand>
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <LCD_Update>:

static void LCD_Update(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8006774:	2100      	movs	r1, #0
 8006776:	2001      	movs	r0, #1
 8006778:	f7ff fc7a 	bl	8006070 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 800677c:	bf00      	nop
 800677e:	bd80      	pop	{r7, pc}

08006780 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8006786:	2201      	movs	r2, #1
 8006788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800678c:	482a      	ldr	r0, [pc, #168]	; (8006838 <LCD_init+0xb8>)
 800678e:	f003 fe21 	bl	800a3d4 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
 8006794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006798:	4827      	ldr	r0, [pc, #156]	; (8006838 <LCD_init+0xb8>)
 800679a:	f003 fe1b 	bl	800a3d4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800679e:	2001      	movs	r0, #1
 80067a0:	f000 f8ca 	bl	8006938 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 80067a4:	2201      	movs	r2, #1
 80067a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067aa:	4823      	ldr	r0, [pc, #140]	; (8006838 <LCD_init+0xb8>)
 80067ac:	f003 fe12 	bl	800a3d4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80067b0:	20c8      	movs	r0, #200	; 0xc8
 80067b2:	f000 f8c1 	bl	8006938 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80067b6:	4921      	ldr	r1, [pc, #132]	; (800683c <LCD_init+0xbc>)
 80067b8:	4821      	ldr	r0, [pc, #132]	; (8006840 <LCD_init+0xc0>)
 80067ba:	f00c f925 	bl	8012a08 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80067be:	4921      	ldr	r1, [pc, #132]	; (8006844 <LCD_init+0xc4>)
 80067c0:	2000      	movs	r0, #0
 80067c2:	f00d fdaf 	bl	8014324 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80067c6:	4920      	ldr	r1, [pc, #128]	; (8006848 <LCD_init+0xc8>)
 80067c8:	2001      	movs	r0, #1
 80067ca:	f00d fdab 	bl	8014324 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80067ce:	491f      	ldr	r1, [pc, #124]	; (800684c <LCD_init+0xcc>)
 80067d0:	2002      	movs	r0, #2
 80067d2:	f00d fda7 	bl	8014324 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 80067d6:	491e      	ldr	r1, [pc, #120]	; (8006850 <LCD_init+0xd0>)
 80067d8:	2003      	movs	r0, #3
 80067da:	f00d fda3 	bl	8014324 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80067de:	2000      	movs	r0, #0
 80067e0:	f00c fd1c 	bl	801321c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80067e4:	2000      	movs	r0, #0
 80067e6:	f00c fd2d 	bl	8013244 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80067ea:	2300      	movs	r3, #0
 80067ec:	80fb      	strh	r3, [r7, #6]
 80067ee:	e013      	b.n	8006818 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a17      	ldr	r2, [pc, #92]	; (8006854 <LCD_init+0xd4>)
 80067f6:	441a      	add	r2, r3
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	4916      	ldr	r1, [pc, #88]	; (8006854 <LCD_init+0xd4>)
 80067fc:	5ccb      	ldrb	r3, [r1, r3]
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7ff fcbf 	bl	8006184 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	4a12      	ldr	r2, [pc, #72]	; (8006854 <LCD_init+0xd4>)
 800680a:	5cd3      	ldrb	r3, [r2, r3]
 800680c:	b29a      	uxth	r2, r3
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	4413      	add	r3, r2
 8006812:	b29b      	uxth	r3, r3
 8006814:	3302      	adds	r3, #2
 8006816:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	2b4b      	cmp	r3, #75	; 0x4b
 800681c:	d9e8      	bls.n	80067f0 <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800681e:	2000      	movs	r0, #0
 8006820:	f00c f99c 	bl	8012b5c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8006824:	2001      	movs	r0, #1
 8006826:	f7ff ff8d 	bl	8006744 <LCD_setPower>
  UG_Update();
 800682a:	f00d fd9d 	bl	8014368 <UG_Update>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	48000400 	.word	0x48000400
 800683c:	200001e8 	.word	0x200001e8
 8006840:	20002378 	.word	0x20002378
 8006844:	08006689 	.word	0x08006689
 8006848:	08006571 	.word	0x08006571
 800684c:	08006501 	.word	0x08006501
 8006850:	080065df 	.word	0x080065df
 8006854:	0801b6e4 	.word	0x0801b6e4

08006858 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006862:	2003      	movs	r0, #3
 8006864:	f002 fc80 	bl	8009168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006868:	200f      	movs	r0, #15
 800686a:	f000 f80d 	bl	8006888 <HAL_InitTick>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	71fb      	strb	r3, [r7, #7]
 8006878:	e001      	b.n	800687e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800687a:	f7fe fdf5 	bl	8005468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800687e:	79fb      	ldrb	r3, [r7, #7]

}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_InitTick+0x68>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d022      	beq.n	80068e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800689c:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <HAL_InitTick+0x6c>)
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b13      	ldr	r3, [pc, #76]	; (80068f0 <HAL_InitTick+0x68>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	4618      	mov	r0, r3
 80068b2:	f002 fc8c 	bl	80091ce <HAL_SYSTICK_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10f      	bne.n	80068dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d809      	bhi.n	80068d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068c2:	2200      	movs	r2, #0
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ca:	f002 fc58 	bl	800917e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <HAL_InitTick+0x70>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e007      	b.n	80068e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e004      	b.n	80068e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e001      	b.n	80068e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	200001f8 	.word	0x200001f8
 80068f4:	200001e0 	.word	0x200001e0
 80068f8:	200001f4 	.word	0x200001f4

080068fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_IncTick+0x1c>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_IncTick+0x20>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4413      	add	r3, r2
 800690a:	4a03      	ldr	r2, [pc, #12]	; (8006918 <HAL_IncTick+0x1c>)
 800690c:	6013      	str	r3, [r2, #0]
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	200023ec 	.word	0x200023ec
 800691c:	200001f8 	.word	0x200001f8

08006920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return uwTick;
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <HAL_GetTick+0x14>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	200023ec 	.word	0x200023ec

08006938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006940:	f7ff ffee 	bl	8006920 <HAL_GetTick>
 8006944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d004      	beq.n	800695c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_Delay+0x40>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800695c:	bf00      	nop
 800695e:	f7ff ffdf 	bl	8006920 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d8f7      	bhi.n	800695e <HAL_Delay+0x26>
  {
  }
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	200001f8 	.word	0x200001f8

0800697c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	609a      	str	r2, [r3, #8]
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3360      	adds	r3, #96	; 0x60
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <LL_ADC_SetOffset+0x44>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	03fff000 	.word	0x03fff000

08006a2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3360      	adds	r3, #96	; 0x60
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3360      	adds	r3, #96	; 0x60
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3360      	adds	r3, #96	; 0x60
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3360      	adds	r3, #96	; 0x60
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	615a      	str	r2, [r3, #20]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3330      	adds	r3, #48	; 0x30
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	4413      	add	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	211f      	movs	r1, #31
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	401a      	ands	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	0e9b      	lsrs	r3, r3, #26
 8006b7e:	f003 011f 	and.w	r1, r3, #31
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	0e5b      	lsrs	r3, r3, #25
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	4413      	add	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	0d1b      	lsrs	r3, r3, #20
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	2107      	movs	r1, #7
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	401a      	ands	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0d1b      	lsrs	r3, r3, #20
 8006bfe:	f003 031f 	and.w	r3, r3, #31
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	fa01 f303 	lsl.w	r3, r1, r3
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
	...

08006c1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c34:	43db      	mvns	r3, r3
 8006c36:	401a      	ands	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0318 	and.w	r3, r3, #24
 8006c3e:	4908      	ldr	r1, [pc, #32]	; (8006c60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c40:	40d9      	lsrs	r1, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	400b      	ands	r3, r1
 8006c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	0007ffff 	.word	0x0007ffff

08006c64 <LL_ADC_SetAnalogWDMonitChannels>:
  *             On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet
  *             for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	330c      	adds	r3, #12
 8006c74:	4618      	mov	r0, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	0d1b      	lsrs	r3, r3, #20
 8006c7a:	f003 0103 	and.w	r1, r3, #3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f003 0201 	and.w	r2, r3, #1
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4403      	add	r3, r0
 8006c92:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK)
                                                * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8006c9e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	401a      	ands	r2, r3
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	400b      	ands	r3, r1
 8006cac:	431a      	orrs	r2, r3
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b087      	sub	sp, #28
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3320      	adds	r3, #32
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	0d1b      	lsrs	r3, r3, #20
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	4413      	add	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
                                             ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0419      	lsls	r1, r3, #16
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006d4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6093      	str	r3, [r2, #8]
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d72:	d101      	bne.n	8006d78 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006d96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006d9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dc2:	d101      	bne.n	8006dc8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e12:	f043 0202 	orr.w	r2, r3, #2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d101      	bne.n	8006e3e <LL_ADC_IsEnabled+0x18>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <LL_ADC_IsEnabled+0x1a>
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d101      	bne.n	8006e64 <LL_ADC_IsDisableOngoing+0x18>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <LL_ADC_IsDisableOngoing+0x1a>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e86:	f043 0204 	orr.w	r2, r3, #4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006eaa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eae:	f043 0210 	orr.w	r2, r3, #16
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d101      	bne.n	8006eda <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d101      	bne.n	8006f28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2280      	movs	r2, #128	; 0x80
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f5e:	601a      	str	r2, [r3, #0]
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f7a:	601a      	str	r2, [r3, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	605a      	str	r2, [r3, #4]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	605a      	str	r2, [r3, #4]
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	605a      	str	r2, [r3, #4]
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	605a      	str	r2, [r3, #4]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	605a      	str	r2, [r3, #4]
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b089      	sub	sp, #36	; 0x24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e167      	b.n	8007332 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fe fa1d 	bl	80054b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fe68 	bl	8006d5e <LL_ADC_IsDeepPowerDownEnabled>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff fe4e 	bl	8006d3a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7ff fe83 	bl	8006dae <LL_ADC_IsInternalRegulatorEnabled>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d115      	bne.n	80070da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fe67 	bl	8006d86 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070b8:	4ba0      	ldr	r3, [pc, #640]	; (800733c <HAL_ADC_Init+0x2f4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	099b      	lsrs	r3, r3, #6
 80070be:	4aa0      	ldr	r2, [pc, #640]	; (8007340 <HAL_ADC_Init+0x2f8>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	099b      	lsrs	r3, r3, #6
 80070c6:	3301      	adds	r3, #1
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80070cc:	e002      	b.n	80070d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f9      	bne.n	80070ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fe65 	bl	8006dae <LL_ADC_IsInternalRegulatorEnabled>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	f043 0210 	orr.w	r2, r3, #16
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f7ff fed9 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 8007110:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007116:	f003 0310 	and.w	r3, r3, #16
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 8100 	bne.w	8007320 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f040 80fc 	bne.w	8007320 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007130:	f043 0202 	orr.w	r2, r3, #2
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fe72 	bl	8006e26 <LL_ADC_IsEnabled>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d111      	bne.n	800716c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007148:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800714c:	f7ff fe6b 	bl	8006e26 <LL_ADC_IsEnabled>
 8007150:	4604      	mov	r4, r0
 8007152:	487c      	ldr	r0, [pc, #496]	; (8007344 <HAL_ADC_Init+0x2fc>)
 8007154:	f7ff fe67 	bl	8006e26 <LL_ADC_IsEnabled>
 8007158:	4603      	mov	r3, r0
 800715a:	4323      	orrs	r3, r4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4619      	mov	r1, r3
 8007166:	4878      	ldr	r0, [pc, #480]	; (8007348 <HAL_ADC_Init+0x300>)
 8007168:	f7ff fc08 	bl	800697c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7f5b      	ldrb	r3, [r3, #29]
 8007170:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007176:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800717c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007182:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800718a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800718c:	4313      	orrs	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007196:	2b01      	cmp	r3, #1
 8007198:	d106      	bne.n	80071a8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	045b      	lsls	r3, r3, #17
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d009      	beq.n	80071c4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	4b60      	ldr	r3, [pc, #384]	; (800734c <HAL_ADC_Init+0x304>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	69b9      	ldr	r1, [r7, #24]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff fe8c 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 80071f8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d16d      	bne.n	80072dc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d16a      	bne.n	80072dc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800720a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007212:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007214:	4313      	orrs	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007222:	f023 0302 	bic.w	r3, r3, #2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	69b9      	ldr	r1, [r7, #24]
 800722c:	430b      	orrs	r3, r1
 800722e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d017      	beq.n	8007268 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007246:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007250:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6911      	ldr	r1, [r2, #16]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	430b      	orrs	r3, r1
 8007262:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007266:	e013      	b.n	8007290 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007276:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800728c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007296:	2b01      	cmp	r3, #1
 8007298:	d118      	bne.n	80072cc <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072a4:	f023 0304 	bic.w	r3, r3, #4
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80072b0:	4311      	orrs	r1, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072b6:	4311      	orrs	r1, r2
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072bc:	430a      	orrs	r2, r1
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0201 	orr.w	r2, r2, #1
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	e007      	b.n	80072dc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0201 	bic.w	r2, r2, #1
 80072da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d10c      	bne.n	80072fe <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	f023 010f 	bic.w	r1, r3, #15
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
 80072fc:	e007      	b.n	800730e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 020f 	bic.w	r2, r2, #15
 800730c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	f043 0201 	orr.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	65da      	str	r2, [r3, #92]	; 0x5c
 800731e:	e007      	b.n	8007330 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	f043 0210 	orr.w	r2, r3, #16
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007330:	7ffb      	ldrb	r3, [r7, #31]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3724      	adds	r7, #36	; 0x24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd90      	pop	{r4, r7, pc}
 800733a:	bf00      	nop
 800733c:	200001e0 	.word	0x200001e0
 8007340:	053e2d63 	.word	0x053e2d63
 8007344:	50000100 	.word	0x50000100
 8007348:	50000300 	.word	0x50000300
 800734c:	fff04007 	.word	0xfff04007

08007350 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007358:	4893      	ldr	r0, [pc, #588]	; (80075a8 <HAL_ADC_Start_IT+0x258>)
 800735a:	f7ff fcd2 	bl	8006d02 <LL_ADC_GetMultimode>
 800735e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fdac 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8113 	bne.w	8007598 <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_ADC_Start_IT+0x30>
 800737c:	2302      	movs	r3, #2
 800737e:	e10e      	b.n	800759e <HAL_ADC_Start_IT+0x24e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 fb19 	bl	80089c0 <ADC_Enable>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 80fa 	bne.w	800758e <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073a2:	f023 0301 	bic.w	r3, r3, #1
 80073a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a7e      	ldr	r2, [pc, #504]	; (80075ac <HAL_ADC_Start_IT+0x25c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d002      	beq.n	80073be <HAL_ADC_Start_IT+0x6e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	e001      	b.n	80073c2 <HAL_ADC_Start_IT+0x72>
 80073be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d002      	beq.n	80073d0 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d006      	beq.n	80073f6 <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ec:	f023 0206 	bic.w	r2, r3, #6
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60
 80073f4:	e002      	b.n	80073fc <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	221c      	movs	r2, #28
 8007402:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 021c 	bic.w	r2, r2, #28
 800741a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d108      	bne.n	8007436 <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0208 	orr.w	r2, r2, #8
 8007432:	605a      	str	r2, [r3, #4]
          break;
 8007434:	e008      	b.n	8007448 <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0204 	orr.w	r2, r2, #4
 8007444:	605a      	str	r2, [r3, #4]
          break;
 8007446:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d107      	bne.n	8007460 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0210 	orr.w	r2, r2, #16
 800745e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a51      	ldr	r2, [pc, #324]	; (80075ac <HAL_ADC_Start_IT+0x25c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d002      	beq.n	8007470 <HAL_ADC_Start_IT+0x120>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	e001      	b.n	8007474 <HAL_ADC_Start_IT+0x124>
 8007470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	4293      	cmp	r3, r2
 800747a:	d008      	beq.n	800748e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b05      	cmp	r3, #5
 8007486:	d002      	beq.n	800748e <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b09      	cmp	r3, #9
 800748c:	d13a      	bne.n	8007504 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d02d      	beq.n	80074f8 <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80074a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d110      	bne.n	80074d6 <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0220 	bic.w	r2, r2, #32
 80074c2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d2:	605a      	str	r2, [r3, #4]
              break;
 80074d4:	e010      	b.n	80074f8 <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0220 	orr.w	r2, r2, #32
 80074f4:	605a      	str	r2, [r3, #4]
              break;
 80074f6:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fcb8 	bl	8006e72 <LL_ADC_REG_StartConversion>
 8007502:	e04b      	b.n	800759c <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007508:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a25      	ldr	r2, [pc, #148]	; (80075ac <HAL_ADC_Start_IT+0x25c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d002      	beq.n	8007520 <HAL_ADC_Start_IT+0x1d0>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	e001      	b.n	8007524 <HAL_ADC_Start_IT+0x1d4>
 8007520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007524:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d034      	beq.n	800759c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007536:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800753a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	2b08      	cmp	r3, #8
 8007548:	d110      	bne.n	800756c <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0220 	bic.w	r2, r2, #32
 8007558:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007568:	605a      	str	r2, [r3, #4]
              break;
 800756a:	e017      	b.n	800759c <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0220 	orr.w	r2, r2, #32
 800758a:	605a      	str	r2, [r3, #4]
              break;
 800758c:	e006      	b.n	800759c <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8007596:	e001      	b.n	800759c <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007598:	2302      	movs	r3, #2
 800759a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	50000300 	.word	0x50000300
 80075ac:	50000100 	.word	0x50000100

080075b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075bc:	4851      	ldr	r0, [pc, #324]	; (8007704 <HAL_ADC_Start_DMA+0x154>)
 80075be:	f7ff fba0 	bl	8006d02 <LL_ADC_GetMultimode>
 80075c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fc7a 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 808f 	bne.w	80076f4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_ADC_Start_DMA+0x34>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e08a      	b.n	80076fa <HAL_ADC_Start_DMA+0x14a>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d002      	beq.n	80075fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d173      	bne.n	80076e6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f001 f9de 	bl	80089c0 <ADC_Enable>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d166      	bne.n	80076dc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007612:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a38      	ldr	r2, [pc, #224]	; (8007708 <HAL_ADC_Start_DMA+0x158>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d002      	beq.n	8007632 <HAL_ADC_Start_DMA+0x82>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	e001      	b.n	8007636 <HAL_ADC_Start_DMA+0x86>
 8007632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	4293      	cmp	r3, r2
 800763c:	d002      	beq.n	8007644 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007648:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007660:	f023 0206 	bic.w	r2, r3, #6
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	661a      	str	r2, [r3, #96]	; 0x60
 8007668:	e002      	b.n	8007670 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007674:	4a25      	ldr	r2, [pc, #148]	; (800770c <HAL_ADC_Start_DMA+0x15c>)
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767c:	4a24      	ldr	r2, [pc, #144]	; (8007710 <HAL_ADC_Start_DMA+0x160>)
 800767e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_ADC_Start_DMA+0x164>)
 8007686:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	221c      	movs	r2, #28
 800768e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0210 	orr.w	r2, r2, #16
 80076a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3340      	adds	r3, #64	; 0x40
 80076c2:	4619      	mov	r1, r3
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f002 f83c 	bl	8009744 <HAL_DMA_Start_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fbcc 	bl	8006e72 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80076da:	e00d      	b.n	80076f8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80076e4:	e008      	b.n	80076f8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80076f2:	e001      	b.n	80076f8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
 80076f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	50000300 	.word	0x50000300
 8007708:	50000100 	.word	0x50000100
 800770c:	08008b8b 	.word	0x08008b8b
 8007710:	08008c63 	.word	0x08008c63
 8007714:	08008c7f 	.word	0x08008c7f

08007718 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_ADC_Stop_DMA+0x16>
 800772a:	2302      	movs	r3, #2
 800772c:	e051      	b.n	80077d2 <HAL_ADC_Stop_DMA+0xba>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8007736:	2103      	movs	r1, #3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f885 	bl	8008848 <ADC_ConversionStop>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d13f      	bne.n	80077c8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d10f      	bne.n	8007786 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	4618      	mov	r0, r3
 800776c:	f002 f865 	bl	800983a <HAL_DMA_Abort>
 8007770:	4603      	mov	r3, r0
 8007772:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0210 	bic.w	r2, r2, #16
 8007794:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 f995 	bl	8008acc <ADC_Disable>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
 80077a6:	e002      	b.n	80077ae <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 f98f 	bl	8008acc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	f043 0201 	orr.w	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80077fc:	2300      	movs	r3, #0
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007810:	4883      	ldr	r0, [pc, #524]	; (8007a20 <HAL_ADC_IRQHandler+0x22c>)
 8007812:	f7ff fa76 	bl	8006d02 <LL_ADC_GetMultimode>
 8007816:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d017      	beq.n	8007852 <HAL_ADC_IRQHandler+0x5e>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d012      	beq.n	8007852 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fb11 	bl	8008e6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2202      	movs	r2, #2
 8007850:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d004      	beq.n	8007866 <HAL_ADC_IRQHandler+0x72>
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8085 	beq.w	800797c <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d07f      	beq.n	800797c <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff f941 	bl	8006b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d064      	beq.n	800796e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5e      	ldr	r2, [pc, #376]	; (8007a24 <HAL_ADC_IRQHandler+0x230>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d002      	beq.n	80078b4 <HAL_ADC_IRQHandler+0xc0>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	e001      	b.n	80078b8 <HAL_ADC_IRQHandler+0xc4>
 80078b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	4293      	cmp	r3, r2
 80078be:	d008      	beq.n	80078d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b05      	cmp	r3, #5
 80078ca:	d002      	beq.n	80078d2 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d104      	bne.n	80078dc <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	623b      	str	r3, [r7, #32]
 80078da:	e00d      	b.n	80078f8 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a50      	ldr	r2, [pc, #320]	; (8007a24 <HAL_ADC_IRQHandler+0x230>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d002      	beq.n	80078ec <HAL_ADC_IRQHandler+0xf8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	e001      	b.n	80078f0 <HAL_ADC_IRQHandler+0xfc>
 80078ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d135      	bne.n	800796e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0308 	and.w	r3, r3, #8
 800790c:	2b08      	cmp	r3, #8
 800790e:	d12e      	bne.n	800796e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fad4 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d11a      	bne.n	8007956 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 020c 	bic.w	r2, r2, #12
 800792e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d112      	bne.n	800796e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	f043 0201 	orr.w	r2, r3, #1
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	65da      	str	r2, [r3, #92]	; 0x5c
 8007954:	e00b      	b.n	800796e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795a:	f043 0210 	orr.w	r2, r3, #16
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007966:	f043 0201 	orr.w	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7fc f862 	bl	8003a38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	220c      	movs	r2, #12
 800797a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <HAL_ADC_IRQHandler+0x19c>
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10b      	bne.n	80079a8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 809e 	beq.w	8007ad8 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 8098 	beq.w	8007ad8 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ac:	f003 0310 	and.w	r3, r3, #16
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff f8ea 	bl	8006b9e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80079ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff f8a5 	bl	8006b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 80079d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a11      	ldr	r2, [pc, #68]	; (8007a24 <HAL_ADC_IRQHandler+0x230>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d002      	beq.n	80079e8 <HAL_ADC_IRQHandler+0x1f4>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	e001      	b.n	80079ec <HAL_ADC_IRQHandler+0x1f8>
 80079e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d008      	beq.n	8007a06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d002      	beq.n	8007a06 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b07      	cmp	r3, #7
 8007a04:	d104      	bne.n	8007a10 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	623b      	str	r3, [r7, #32]
 8007a0e:	e011      	b.n	8007a34 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a03      	ldr	r2, [pc, #12]	; (8007a24 <HAL_ADC_IRQHandler+0x230>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d006      	beq.n	8007a28 <HAL_ADC_IRQHandler+0x234>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	e005      	b.n	8007a2c <HAL_ADC_IRQHandler+0x238>
 8007a20:	50000300 	.word	0x50000300
 8007a24:	50000100 	.word	0x50000100
 8007a28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007a2c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d047      	beq.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_ADC_IRQHandler+0x260>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d03f      	beq.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d13a      	bne.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d133      	bne.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d12e      	bne.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fa4d 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d11a      	bne.n	8007ab2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007a8a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d112      	bne.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa8:	f043 0201 	orr.w	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ab0:	e00b      	b.n	8007aca <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab6:	f043 0210 	orr.w	r2, r3, #16
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f9a6 	bl	8008e1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2260      	movs	r2, #96	; 0x60
 8007ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d011      	beq.n	8007b06 <HAL_ADC_IRQHandler+0x312>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00c      	beq.n	8007b06 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7fb ffe7 	bl	8003acc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2280      	movs	r2, #128	; 0x80
 8007b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <HAL_ADC_IRQHandler+0x342>
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f98c 	bl	8008e44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <HAL_ADC_IRQHandler+0x372>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00d      	beq.n	8007b66 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 f97e 	bl	8008e58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d036      	beq.n	8007bde <HAL_ADC_IRQHandler+0x3ea>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f003 0310 	and.w	r3, r3, #16
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d031      	beq.n	8007bde <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
 8007b86:	e014      	b.n	8007bb2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007b8e:	4825      	ldr	r0, [pc, #148]	; (8007c24 <HAL_ADC_IRQHandler+0x430>)
 8007b90:	f7ff f8c5 	bl	8006d1e <LL_ADC_GetMultiDMATransfer>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9e:	e008      	b.n	8007bb2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10e      	bne.n	8007bd6 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	f043 0202 	orr.w	r2, r3, #2
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f833 	bl	8007c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d018      	beq.n	8007c1a <HAL_ADC_IRQHandler+0x426>
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d013      	beq.n	8007c1a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c02:	f043 0208 	orr.w	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c12:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 f90b 	bl	8008e30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007c1a:	bf00      	nop
 8007c1c:	3728      	adds	r7, #40	; 0x28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	50000300 	.word	0x50000300

08007c28 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b0b6      	sub	sp, #216	; 0xd8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_ADC_ConfigChannel+0x22>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e3c8      	b.n	8008404 <HAL_ADC_ConfigChannel+0x7b4>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff f91f 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 83ad 	bne.w	80083e6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6859      	ldr	r1, [r3, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	f7fe ff54 	bl	8006b46 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff f90d 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 8007ca8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff f92d 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 8007cb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 81d9 	bne.w	8008076 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f040 81d4 	bne.w	8008076 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd6:	d10f      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	f7fe ff6e 	bl	8006bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe ff02 	bl	8006afa <LL_ADC_SetSamplingTimeCommonConfig>
 8007cf6:	e00e      	b.n	8007d16 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	6819      	ldr	r1, [r3, #0]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	461a      	mov	r2, r3
 8007d06:	f7fe ff5d 	bl	8006bc4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fef2 	bl	8006afa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	08db      	lsrs	r3, r3, #3
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d022      	beq.n	8007d7e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	6919      	ldr	r1, [r3, #16]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d48:	f7fe fe4c 	bl	80069e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	6919      	ldr	r1, [r3, #16]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f7fe fe98 	bl	8006a8e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d102      	bne.n	8007d74 <HAL_ADC_ConfigChannel+0x124>
 8007d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d72:	e000      	b.n	8007d76 <HAL_ADC_ConfigChannel+0x126>
 8007d74:	2300      	movs	r3, #0
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7fe fea4 	bl	8006ac4 <LL_ADC_SetOffsetSaturation>
 8007d7c:	e17b      	b.n	8008076 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fe51 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <HAL_ADC_ConfigChannel+0x15a>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fe46 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007da0:	4603      	mov	r3, r0
 8007da2:	0e9b      	lsrs	r3, r3, #26
 8007da4:	f003 021f 	and.w	r2, r3, #31
 8007da8:	e01e      	b.n	8007de8 <HAL_ADC_ConfigChannel+0x198>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fe3b 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007dc0:	fa93 f3a3 	rbit	r3, r3
 8007dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007dc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8007dd8:	2320      	movs	r3, #32
 8007dda:	e004      	b.n	8007de6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8007ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007de0:	fab3 f383 	clz	r3, r3
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <HAL_ADC_ConfigChannel+0x1b0>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	0e9b      	lsrs	r3, r3, #26
 8007dfa:	f003 031f 	and.w	r3, r3, #31
 8007dfe:	e018      	b.n	8007e32 <HAL_ADC_ConfigChannel+0x1e2>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e0c:	fa93 f3a3 	rbit	r3, r3
 8007e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8007e24:	2320      	movs	r3, #32
 8007e26:	e004      	b.n	8007e32 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8007e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e2c:	fab3 f383 	clz	r3, r3
 8007e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d106      	bne.n	8007e44 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fe0a 	bl	8006a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fdee 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10a      	bne.n	8007e70 <HAL_ADC_ConfigChannel+0x220>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe fde3 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007e66:	4603      	mov	r3, r0
 8007e68:	0e9b      	lsrs	r3, r3, #26
 8007e6a:	f003 021f 	and.w	r2, r3, #31
 8007e6e:	e01e      	b.n	8007eae <HAL_ADC_ConfigChannel+0x25e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fdd8 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e86:	fa93 f3a3 	rbit	r3, r3
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007e96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8007e9e:	2320      	movs	r3, #32
 8007ea0:	e004      	b.n	8007eac <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8007ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ea6:	fab3 f383 	clz	r3, r3
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <HAL_ADC_ConfigChannel+0x276>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	0e9b      	lsrs	r3, r3, #26
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	e018      	b.n	8007ef8 <HAL_ADC_ConfigChannel+0x2a8>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ed2:	fa93 f3a3 	rbit	r3, r3
 8007ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8007eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8007ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8007eea:	2320      	movs	r3, #32
 8007eec:	e004      	b.n	8007ef8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8007eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ef2:	fab3 f383 	clz	r3, r3
 8007ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d106      	bne.n	8007f0a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2101      	movs	r1, #1
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fda7 	bl	8006a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fd8b 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007f16:	4603      	mov	r3, r0
 8007f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <HAL_ADC_ConfigChannel+0x2e6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2102      	movs	r1, #2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fd80 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	0e9b      	lsrs	r3, r3, #26
 8007f30:	f003 021f 	and.w	r2, r3, #31
 8007f34:	e01e      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x324>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fd75 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007f42:	4603      	mov	r3, r0
 8007f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f4c:	fa93 f3a3 	rbit	r3, r3
 8007f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8007f64:	2320      	movs	r3, #32
 8007f66:	e004      	b.n	8007f72 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8007f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f6c:	fab3 f383 	clz	r3, r3
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <HAL_ADC_ConfigChannel+0x33c>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	0e9b      	lsrs	r3, r3, #26
 8007f86:	f003 031f 	and.w	r3, r3, #31
 8007f8a:	e016      	b.n	8007fba <HAL_ADC_ConfigChannel+0x36a>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f98:	fa93 f3a3 	rbit	r3, r3
 8007f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007f9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8007fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8007fac:	2320      	movs	r3, #32
 8007fae:	e004      	b.n	8007fba <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8007fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb4:	fab3 f383 	clz	r3, r3
 8007fb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d106      	bne.n	8007fcc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fd46 	bl	8006a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2103      	movs	r1, #3
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fd2a 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_ADC_ConfigChannel+0x3a8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fd1f 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	0e9b      	lsrs	r3, r3, #26
 8007ff2:	f003 021f 	and.w	r2, r3, #31
 8007ff6:	e017      	b.n	8008028 <HAL_ADC_ConfigChannel+0x3d8>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2103      	movs	r1, #3
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fd14 	bl	8006a2c <LL_ADC_GetOffsetChannel>
 8008004:	4603      	mov	r3, r0
 8008006:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800800a:	fa93 f3a3 	rbit	r3, r3
 800800e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008012:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800801a:	2320      	movs	r3, #32
 800801c:	e003      	b.n	8008026 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800801e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008020:	fab3 f383 	clz	r3, r3
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008030:	2b00      	cmp	r3, #0
 8008032:	d105      	bne.n	8008040 <HAL_ADC_ConfigChannel+0x3f0>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	0e9b      	lsrs	r3, r3, #26
 800803a:	f003 031f 	and.w	r3, r3, #31
 800803e:	e011      	b.n	8008064 <HAL_ADC_ConfigChannel+0x414>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008048:	fa93 f3a3 	rbit	r3, r3
 800804c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800804e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008050:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8008058:	2320      	movs	r3, #32
 800805a:	e003      	b.n	8008064 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800805c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805e:	fab3 f383 	clz	r3, r3
 8008062:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008064:	429a      	cmp	r2, r3
 8008066:	d106      	bne.n	8008076 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2200      	movs	r2, #0
 800806e:	2103      	movs	r1, #3
 8008070:	4618      	mov	r0, r3
 8008072:	f7fe fcf1 	bl	8006a58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe fed3 	bl	8006e26 <LL_ADC_IsEnabled>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 8140 	bne.w	8008308 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	461a      	mov	r2, r3
 8008096:	f7fe fdc1 	bl	8006c1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	4a8f      	ldr	r2, [pc, #572]	; (80082dc <HAL_ADC_ConfigChannel+0x68c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	f040 8131 	bne.w	8008308 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <HAL_ADC_ConfigChannel+0x47e>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	0e9b      	lsrs	r3, r3, #26
 80080bc:	3301      	adds	r3, #1
 80080be:	f003 031f 	and.w	r3, r3, #31
 80080c2:	2b09      	cmp	r3, #9
 80080c4:	bf94      	ite	ls
 80080c6:	2301      	movls	r3, #1
 80080c8:	2300      	movhi	r3, #0
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	e019      	b.n	8008102 <HAL_ADC_ConfigChannel+0x4b2>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080d6:	fa93 f3a3 	rbit	r3, r3
 80080da:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80080dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080de:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80080e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80080e6:	2320      	movs	r3, #32
 80080e8:	e003      	b.n	80080f2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80080ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ec:	fab3 f383 	clz	r3, r3
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	f003 031f 	and.w	r3, r3, #31
 80080f8:	2b09      	cmp	r3, #9
 80080fa:	bf94      	ite	ls
 80080fc:	2301      	movls	r3, #1
 80080fe:	2300      	movhi	r3, #0
 8008100:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008102:	2b00      	cmp	r3, #0
 8008104:	d079      	beq.n	80081fa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800810e:	2b00      	cmp	r3, #0
 8008110:	d107      	bne.n	8008122 <HAL_ADC_ConfigChannel+0x4d2>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	0e9b      	lsrs	r3, r3, #26
 8008118:	3301      	adds	r3, #1
 800811a:	069b      	lsls	r3, r3, #26
 800811c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008120:	e015      	b.n	800814e <HAL_ADC_ConfigChannel+0x4fe>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812a:	fa93 f3a3 	rbit	r3, r3
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008132:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800813a:	2320      	movs	r3, #32
 800813c:	e003      	b.n	8008146 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800813e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008140:	fab3 f383 	clz	r3, r3
 8008144:	b2db      	uxtb	r3, r3
 8008146:	3301      	adds	r3, #1
 8008148:	069b      	lsls	r3, r3, #26
 800814a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <HAL_ADC_ConfigChannel+0x51e>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	0e9b      	lsrs	r3, r3, #26
 8008160:	3301      	adds	r3, #1
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2101      	movs	r1, #1
 8008168:	fa01 f303 	lsl.w	r3, r1, r3
 800816c:	e017      	b.n	800819e <HAL_ADC_ConfigChannel+0x54e>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008176:	fa93 f3a3 	rbit	r3, r3
 800817a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800817c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8008186:	2320      	movs	r3, #32
 8008188:	e003      	b.n	8008192 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	fab3 f383 	clz	r3, r3
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3301      	adds	r3, #1
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	ea42 0103 	orr.w	r1, r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <HAL_ADC_ConfigChannel+0x574>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	0e9b      	lsrs	r3, r3, #26
 80081b4:	3301      	adds	r3, #1
 80081b6:	f003 021f 	and.w	r2, r3, #31
 80081ba:	4613      	mov	r3, r2
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4413      	add	r3, r2
 80081c0:	051b      	lsls	r3, r3, #20
 80081c2:	e018      	b.n	80081f6 <HAL_ADC_ConfigChannel+0x5a6>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	fa93 f3a3 	rbit	r3, r3
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80081d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80081dc:	2320      	movs	r3, #32
 80081de:	e003      	b.n	80081e8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80081e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e2:	fab3 f383 	clz	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	3301      	adds	r3, #1
 80081ea:	f003 021f 	and.w	r2, r3, #31
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081f6:	430b      	orrs	r3, r1
 80081f8:	e081      	b.n	80082fe <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008202:	2b00      	cmp	r3, #0
 8008204:	d107      	bne.n	8008216 <HAL_ADC_ConfigChannel+0x5c6>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	0e9b      	lsrs	r3, r3, #26
 800820c:	3301      	adds	r3, #1
 800820e:	069b      	lsls	r3, r3, #26
 8008210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008214:	e015      	b.n	8008242 <HAL_ADC_ConfigChannel+0x5f2>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	fa93 f3a3 	rbit	r3, r3
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800822e:	2320      	movs	r3, #32
 8008230:	e003      	b.n	800823a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	fab3 f383 	clz	r3, r3
 8008238:	b2db      	uxtb	r3, r3
 800823a:	3301      	adds	r3, #1
 800823c:	069b      	lsls	r3, r3, #26
 800823e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <HAL_ADC_ConfigChannel+0x612>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	0e9b      	lsrs	r3, r3, #26
 8008254:	3301      	adds	r3, #1
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2101      	movs	r1, #1
 800825c:	fa01 f303 	lsl.w	r3, r1, r3
 8008260:	e017      	b.n	8008292 <HAL_ADC_ConfigChannel+0x642>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	fa93 f3a3 	rbit	r3, r3
 800826e:	61fb      	str	r3, [r7, #28]
  return result;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800827a:	2320      	movs	r3, #32
 800827c:	e003      	b.n	8008286 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	b2db      	uxtb	r3, r3
 8008286:	3301      	adds	r3, #1
 8008288:	f003 031f 	and.w	r3, r3, #31
 800828c:	2101      	movs	r1, #1
 800828e:	fa01 f303 	lsl.w	r3, r1, r3
 8008292:	ea42 0103 	orr.w	r1, r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10d      	bne.n	80082be <HAL_ADC_ConfigChannel+0x66e>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	0e9b      	lsrs	r3, r3, #26
 80082a8:	3301      	adds	r3, #1
 80082aa:	f003 021f 	and.w	r2, r3, #31
 80082ae:	4613      	mov	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	3b1e      	subs	r3, #30
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082bc:	e01e      	b.n	80082fc <HAL_ADC_ConfigChannel+0x6ac>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	fa93 f3a3 	rbit	r3, r3
 80082ca:	613b      	str	r3, [r7, #16]
  return result;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80082d6:	2320      	movs	r3, #32
 80082d8:	e006      	b.n	80082e8 <HAL_ADC_ConfigChannel+0x698>
 80082da:	bf00      	nop
 80082dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	fab3 f383 	clz	r3, r3
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3301      	adds	r3, #1
 80082ea:	f003 021f 	and.w	r2, r3, #31
 80082ee:	4613      	mov	r3, r2
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	4413      	add	r3, r2
 80082f4:	3b1e      	subs	r3, #30
 80082f6:	051b      	lsls	r3, r3, #20
 80082f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008302:	4619      	mov	r1, r3
 8008304:	f7fe fc5e 	bl	8006bc4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b3f      	ldr	r3, [pc, #252]	; (800840c <HAL_ADC_ConfigChannel+0x7bc>)
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d071      	beq.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008314:	483e      	ldr	r0, [pc, #248]	; (8008410 <HAL_ADC_ConfigChannel+0x7c0>)
 8008316:	f7fe fb57 	bl	80069c8 <LL_ADC_GetCommonPathInternalCh>
 800831a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a3c      	ldr	r2, [pc, #240]	; (8008414 <HAL_ADC_ConfigChannel+0x7c4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_ADC_ConfigChannel+0x6e2>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a3a      	ldr	r2, [pc, #232]	; (8008418 <HAL_ADC_ConfigChannel+0x7c8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d127      	bne.n	8008382 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d121      	bne.n	8008382 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008346:	d157      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800834c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008350:	4619      	mov	r1, r3
 8008352:	482f      	ldr	r0, [pc, #188]	; (8008410 <HAL_ADC_ConfigChannel+0x7c0>)
 8008354:	f7fe fb25 	bl	80069a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008358:	4b30      	ldr	r3, [pc, #192]	; (800841c <HAL_ADC_ConfigChannel+0x7cc>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	099b      	lsrs	r3, r3, #6
 800835e:	4a30      	ldr	r2, [pc, #192]	; (8008420 <HAL_ADC_ConfigChannel+0x7d0>)
 8008360:	fba2 2303 	umull	r2, r3, r2, r3
 8008364:	099b      	lsrs	r3, r3, #6
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008372:	e002      	b.n	800837a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3b01      	subs	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f9      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008380:	e03a      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a27      	ldr	r2, [pc, #156]	; (8008424 <HAL_ADC_ConfigChannel+0x7d4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d113      	bne.n	80083b4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800838c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10d      	bne.n	80083b4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a22      	ldr	r2, [pc, #136]	; (8008428 <HAL_ADC_ConfigChannel+0x7d8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d02a      	beq.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083aa:	4619      	mov	r1, r3
 80083ac:	4818      	ldr	r0, [pc, #96]	; (8008410 <HAL_ADC_ConfigChannel+0x7c0>)
 80083ae:	f7fe faf8 	bl	80069a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083b2:	e021      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1c      	ldr	r2, [pc, #112]	; (800842c <HAL_ADC_ConfigChannel+0x7dc>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d11c      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80083be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d116      	bne.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a16      	ldr	r2, [pc, #88]	; (8008428 <HAL_ADC_ConfigChannel+0x7d8>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d011      	beq.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80083d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80083d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083dc:	4619      	mov	r1, r3
 80083de:	480c      	ldr	r0, [pc, #48]	; (8008410 <HAL_ADC_ConfigChannel+0x7c0>)
 80083e0:	f7fe fadf 	bl	80069a2 <LL_ADC_SetCommonPathInternalCh>
 80083e4:	e008      	b.n	80083f8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ea:	f043 0220 	orr.w	r2, r3, #32
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008400:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008404:	4618      	mov	r0, r3
 8008406:	37d8      	adds	r7, #216	; 0xd8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	80080000 	.word	0x80080000
 8008410:	50000300 	.word	0x50000300
 8008414:	c3210000 	.word	0xc3210000
 8008418:	90c00010 	.word	0x90c00010
 800841c:	200001e0 	.word	0x200001e0
 8008420:	053e2d63 	.word	0x053e2d63
 8008424:	c7520000 	.word	0xc7520000
 8008428:	50000100 	.word	0x50000100
 800842c:	cb840000 	.word	0xcb840000

08008430 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(pAnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));

  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008448:	d003      	beq.n	8008452 <HAL_ADC_AnalogWDGConfig+0x22>
      (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800844e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_ADC_AnalogWDGConfig+0x30>
 800845c:	2302      	movs	r3, #2
 800845e:	e1ea      	b.n	8008836 <HAL_ADC_AnalogWDGConfig+0x406>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fd28 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 8008472:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fd49 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 8175 	bne.w	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8171 	bne.w	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a90      	ldr	r2, [pc, #576]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	f040 808d 	bne.w	80085b6 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (pAnalogWDGConfig->WatchdogMode)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80084a4:	d034      	beq.n	8008510 <HAL_ADC_AnalogWDGConfig+0xe0>
 80084a6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80084aa:	d856      	bhi.n	800855a <HAL_ADC_AnalogWDGConfig+0x12a>
 80084ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084b0:	d04b      	beq.n	800854a <HAL_ADC_AnalogWDGConfig+0x11a>
 80084b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084b6:	d850      	bhi.n	800855a <HAL_ADC_AnalogWDGConfig+0x12a>
 80084b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80084bc:	d01b      	beq.n	80084f6 <HAL_ADC_AnalogWDGConfig+0xc6>
 80084be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80084c2:	d84a      	bhi.n	800855a <HAL_ADC_AnalogWDGConfig+0x12a>
 80084c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084c8:	d037      	beq.n	800853a <HAL_ADC_AnalogWDGConfig+0x10a>
 80084ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084ce:	d844      	bhi.n	800855a <HAL_ADC_AnalogWDGConfig+0x12a>
 80084d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084d4:	d029      	beq.n	800852a <HAL_ADC_AnalogWDGConfig+0xfa>
 80084d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084da:	d13e      	bne.n	800855a <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084e8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80084ec:	461a      	mov	r2, r3
 80084ee:	497a      	ldr	r1, [pc, #488]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80084f0:	f7fe fbb8 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 80084f4:	e039      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008502:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8008506:	461a      	mov	r2, r3
 8008508:	4973      	ldr	r1, [pc, #460]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800850a:	f7fe fbab 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_INJECTED));
          break;
 800850e:	e02c      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800851c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8008520:	461a      	mov	r2, r3
 8008522:	496d      	ldr	r1, [pc, #436]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008524:	f7fe fb9e 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8008528:	e01f      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a6b      	ldr	r2, [pc, #428]	; (80086dc <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8008530:	4969      	ldr	r1, [pc, #420]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fb96 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008538:	e017      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a68      	ldr	r2, [pc, #416]	; (80086e0 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8008540:	4965      	ldr	r1, [pc, #404]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fb8e 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008548:	e00f      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a65      	ldr	r2, [pc, #404]	; (80086e4 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8008550:	4961      	ldr	r1, [pc, #388]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fb86 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008558:	e007      	b.n	800856a <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	495d      	ldr	r1, [pc, #372]	; (80086d8 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fb7e 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8008568:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699a      	ldr	r2, [r3, #24]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 pAnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008584:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fcd0 	bl	8006f36 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	7b1b      	ldrb	r3, [r3, #12]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d105      	bne.n	80085aa <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fcf0 	bl	8006f88 <LL_ADC_EnableIT_AWD1>
 80085a8:	e0e3      	b.n	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe fd1a 	bl	8006fe8 <LL_ADC_DisableIT_AWD1>
 80085b4:	e0dd      	b.n	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80085be:	d01d      	beq.n	80085fc <HAL_ADC_AnalogWDGConfig+0x1cc>
 80085c0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80085c4:	f200 8092 	bhi.w	80086ec <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085cc:	d07b      	beq.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x296>
 80085ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085d2:	f200 808b 	bhi.w	80086ec <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085da:	d00f      	beq.n	80085fc <HAL_ADC_AnalogWDGConfig+0x1cc>
 80085dc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085e0:	f200 8084 	bhi.w	80086ec <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085e8:	d06d      	beq.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x296>
 80085ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085ee:	d87d      	bhi.n	80086ec <HAL_ADC_AnalogWDGConfig+0x2bc>
 80085f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085f4:	d067      	beq.n	80086c6 <HAL_ADC_AnalogWDGConfig+0x296>
 80085f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085fa:	d177      	bne.n	80086ec <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a39      	ldr	r2, [pc, #228]	; (80086e8 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d12f      	bne.n	8008666 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800860e:	2b00      	cmp	r3, #0
 8008610:	d108      	bne.n	8008624 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	0e9b      	lsrs	r3, r3, #26
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	2201      	movs	r2, #1
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	e016      	b.n	8008652 <HAL_ADC_AnalogWDGConfig+0x222>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	fa93 f3a3 	rbit	r3, r3
 8008630:	61bb      	str	r3, [r7, #24]
  return result;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 800863c:	2320      	movs	r3, #32
 800863e:	e003      	b.n	8008648 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	fab3 f383 	clz	r3, r3
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 031f 	and.w	r3, r3, #31
 800864c:	2201      	movs	r2, #1
 800864e:	fa02 f303 	lsl.w	r3, r2, r3
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	430b      	orrs	r3, r1
 8008660:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          else
          {
            SET_BIT(hadc->Instance->AWD3CR,
                    (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8008664:	e04b      	b.n	80086fe <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR,
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800866e:	2b00      	cmp	r3, #0
 8008670:	d108      	bne.n	8008684 <HAL_ADC_AnalogWDGConfig+0x254>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	0e9b      	lsrs	r3, r3, #26
 8008678:	f003 031f 	and.w	r3, r3, #31
 800867c:	2201      	movs	r2, #1
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	e016      	b.n	80086b2 <HAL_ADC_AnalogWDGConfig+0x282>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	fa93 f3a3 	rbit	r3, r3
 8008690:	60fb      	str	r3, [r7, #12]
  return result;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 800869c:	2320      	movs	r3, #32
 800869e:	e003      	b.n	80086a8 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	fab3 f383 	clz	r3, r3
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2201      	movs	r2, #1
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6812      	ldr	r2, [r2, #0]
 80086b6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	430b      	orrs	r3, r1
 80086c0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80086c4:	e01b      	b.n	80086fe <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 80086ce:	4a05      	ldr	r2, [pc, #20]	; (80086e4 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7fe fac7 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80086d6:	e012      	b.n	80086fe <HAL_ADC_AnalogWDGConfig+0x2ce>
 80086d8:	7dc00000 	.word	0x7dc00000
 80086dc:	0087ffff 	.word	0x0087ffff
 80086e0:	0107ffff 	.word	0x0107ffff
 80086e4:	0187ffff 	.word	0x0187ffff
 80086e8:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	4619      	mov	r1, r3
 80086f8:	f7fe fab4 	bl	8006c64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80086fc:	bf00      	nop
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a4f      	ldr	r2, [pc, #316]	; (8008840 <HAL_ADC_AnalogWDGConfig+0x410>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d11a      	bne.n	800873e <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fc19 	bl	8006f50 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	7b1b      	ldrb	r3, [r3, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d105      	bne.n	8008732 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fc3c 	bl	8006fa8 <LL_ADC_EnableIT_AWD2>
 8008730:	e01f      	b.n	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fc66 	bl	8007008 <LL_ADC_DisableIT_AWD2>
 800873c:	e019      	b.n	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008742:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fc0c 	bl	8006f6c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	7b1b      	ldrb	r3, [r3, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d105      	bne.n	8008768 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fc31 	bl	8006fc8 <LL_ADC_EnableIT_AWD3>
 8008766:	e004      	b.n	8008772 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe fc5b 	bl	8007028 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a33      	ldr	r2, [pc, #204]	; (8008844 <HAL_ADC_AnalogWDGConfig+0x414>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d118      	bne.n	80087ae <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	08db      	lsrs	r3, r3, #3
 8008788:	f003 0303 	and.w	r3, r3, #3
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	08db      	lsrs	r3, r3, #3
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	005b      	lsls	r3, r3, #1
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	633b      	str	r3, [r7, #48]	; 0x30
 80087ac:	e035      	b.n	800881a <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0318 	and.w	r3, r3, #24
 80087b8:	2b18      	cmp	r3, #24
 80087ba:	d00f      	beq.n	80087dc <HAL_ADC_AnalogWDGConfig+0x3ac>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	08db      	lsrs	r3, r3, #3
 80087c8:	f003 0303 	and.w	r3, r3, #3
 80087cc:	f1c3 0302 	rsb	r3, r3, #2
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	f003 031e 	and.w	r3, r3, #30
 80087d6:	fa22 f303 	lsr.w	r3, r2, r3
 80087da:	e002      	b.n	80087e2 <HAL_ADC_AnalogWDGConfig+0x3b2>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	637b      	str	r3, [r7, #52]	; 0x34
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0318 	and.w	r3, r3, #24
 80087ee:	2b18      	cmp	r3, #24
 80087f0:	d00f      	beq.n	8008812 <HAL_ADC_AnalogWDGConfig+0x3e2>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695a      	ldr	r2, [r3, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	08db      	lsrs	r3, r3, #3
 80087fe:	f003 0303 	and.w	r3, r3, #3
 8008802:	f1c3 0302 	rsb	r3, r3, #2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	f003 031e 	and.w	r3, r3, #30
 800880c:	fa22 f303 	lsr.w	r3, r2, r3
 8008810:	e002      	b.n	8008818 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008826:	f7fe fa4a 	bl	8006cbe <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008836:	4618      	mov	r0, r3
 8008838:	3738      	adds	r7, #56	; 0x38
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	0017ffff 	.word	0x0017ffff
 8008844:	7dc00000 	.word	0x7dc00000

08008848 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fb2f 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 8008864:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fb50 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 8008870:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 8098 	beq.w	80089b0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d02a      	beq.n	80088e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7f5b      	ldrb	r3, [r3, #29]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d126      	bne.n	80088e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7f1b      	ldrb	r3, [r3, #28]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d122      	bne.n	80088e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800889e:	2301      	movs	r3, #1
 80088a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80088a2:	e014      	b.n	80088ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4a45      	ldr	r2, [pc, #276]	; (80089bc <ADC_ConversionStop+0x174>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d90d      	bls.n	80088c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b0:	f043 0210 	orr.w	r2, r3, #16
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088bc:	f043 0201 	orr.w	r2, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e074      	b.n	80089b2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d1e3      	bne.n	80088a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2240      	movs	r2, #64	; 0x40
 80088e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d014      	beq.n	8008914 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fae7 	bl	8006ec2 <LL_ADC_REG_IsConversionOngoing>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00c      	beq.n	8008914 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe faa4 	bl	8006e4c <LL_ADC_IsDisableOngoing>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fac3 	bl	8006e9a <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d014      	beq.n	8008944 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4618      	mov	r0, r3
 8008920:	f7fe faf6 	bl	8006f10 <LL_ADC_INJ_IsConversionOngoing>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00c      	beq.n	8008944 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fa8c 	bl	8006e4c <LL_ADC_IsDisableOngoing>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d104      	bne.n	8008944 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fad2 	bl	8006ee8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b02      	cmp	r3, #2
 8008948:	d005      	beq.n	8008956 <ADC_ConversionStop+0x10e>
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d105      	bne.n	800895c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8008950:	230c      	movs	r3, #12
 8008952:	617b      	str	r3, [r7, #20]
        break;
 8008954:	e005      	b.n	8008962 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8008956:	2308      	movs	r3, #8
 8008958:	617b      	str	r3, [r7, #20]
        break;
 800895a:	e002      	b.n	8008962 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800895c:	2304      	movs	r3, #4
 800895e:	617b      	str	r3, [r7, #20]
        break;
 8008960:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8008962:	f7fd ffdd 	bl	8006920 <HAL_GetTick>
 8008966:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008968:	e01b      	b.n	80089a2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800896a:	f7fd ffd9 	bl	8006920 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	2b05      	cmp	r3, #5
 8008976:	d914      	bls.n	80089a2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	f043 0210 	orr.w	r2, r3, #16
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008996:	f043 0201 	orr.w	r2, r3, #1
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e007      	b.n	80089b2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1dc      	bne.n	800896a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	a33fffff 	.word	0xa33fffff

080089c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fa28 	bl	8006e26 <LL_ADC_IsEnabled>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d169      	bne.n	8008ab0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	4b36      	ldr	r3, [pc, #216]	; (8008abc <ADC_Enable+0xfc>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00d      	beq.n	8008a06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ee:	f043 0210 	orr.w	r2, r3, #16
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089fa:	f043 0201 	orr.w	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e055      	b.n	8008ab2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe f9e3 	bl	8006dd6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008a10:	482b      	ldr	r0, [pc, #172]	; (8008ac0 <ADC_Enable+0x100>)
 8008a12:	f7fd ffd9 	bl	80069c8 <LL_ADC_GetCommonPathInternalCh>
 8008a16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d013      	beq.n	8008a48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a20:	4b28      	ldr	r3, [pc, #160]	; (8008ac4 <ADC_Enable+0x104>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	099b      	lsrs	r3, r3, #6
 8008a26:	4a28      	ldr	r2, [pc, #160]	; (8008ac8 <ADC_Enable+0x108>)
 8008a28:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2c:	099b      	lsrs	r3, r3, #6
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a3a:	e002      	b.n	8008a42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f9      	bne.n	8008a3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008a48:	f7fd ff6a 	bl	8006920 <HAL_GetTick>
 8008a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a4e:	e028      	b.n	8008aa2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f9e6 	bl	8006e26 <LL_ADC_IsEnabled>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f9b6 	bl	8006dd6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008a6a:	f7fd ff59 	bl	8006920 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d914      	bls.n	8008aa2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d00d      	beq.n	8008aa2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8a:	f043 0210 	orr.w	r2, r3, #16
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a96:	f043 0201 	orr.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e007      	b.n	8008ab2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d1cf      	bne.n	8008a50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	8000003f 	.word	0x8000003f
 8008ac0:	50000300 	.word	0x50000300
 8008ac4:	200001e0 	.word	0x200001e0
 8008ac8:	053e2d63 	.word	0x053e2d63

08008acc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe f9b7 	bl	8006e4c <LL_ADC_IsDisableOngoing>
 8008ade:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe f99e 	bl	8006e26 <LL_ADC_IsEnabled>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d047      	beq.n	8008b80 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d144      	bne.n	8008b80 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 030d 	and.w	r3, r3, #13
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d10c      	bne.n	8008b1e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fe f978 	bl	8006dfe <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2203      	movs	r2, #3
 8008b14:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008b16:	f7fd ff03 	bl	8006920 <HAL_GetTick>
 8008b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b1c:	e029      	b.n	8008b72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b22:	f043 0210 	orr.w	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	f043 0201 	orr.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e023      	b.n	8008b82 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008b3a:	f7fd fef1 	bl	8006920 <HAL_GetTick>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d914      	bls.n	8008b72 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00d      	beq.n	8008b72 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5a:	f043 0210 	orr.w	r2, r3, #16
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b66:	f043 0201 	orr.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e007      	b.n	8008b82 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1dc      	bne.n	8008b3a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d14b      	bne.n	8008c3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d021      	beq.n	8008c02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fd ffac 	bl	8006b20 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d032      	beq.n	8008c34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d12b      	bne.n	8008c34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008be0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d11f      	bne.n	8008c34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c00:	e018      	b.n	8008c34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	f043 0201 	orr.w	r2, r3, #1
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7fa feff 	bl	8003a38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008c3a:	e00e      	b.n	8008c5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c40:	f003 0310 	and.w	r3, r3, #16
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7fe fff7 	bl	8007c3c <HAL_ADC_ErrorCallback>
}
 8008c4e:	e004      	b.n	8008c5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	4798      	blx	r3
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7fe ffd9 	bl	8007c28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008c76:	bf00      	nop
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c9c:	f043 0204 	orr.w	r2, r3, #4
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7fe ffc9 	bl	8007c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <LL_ADC_IsEnabled>:
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <LL_ADC_IsEnabled+0x18>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e000      	b.n	8008ccc <LL_ADC_IsEnabled+0x1a>
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <LL_ADC_StartCalibration>:
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008cea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	609a      	str	r2, [r3, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <LL_ADC_IsCalibrationOnGoing>:
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d1e:	d101      	bne.n	8008d24 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <LL_ADC_REG_IsConversionOngoing>:
{
 8008d32:	b480      	push	{r7}
 8008d34:	b083      	sub	sp, #12
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f003 0304 	and.w	r3, r3, #4
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d101      	bne.n	8008d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e000      	b.n	8008d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_ADCEx_Calibration_Start+0x1c>
 8008d70:	2302      	movs	r3, #2
 8008d72:	e04d      	b.n	8008e10 <HAL_ADCEx_Calibration_Start+0xb8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff fea5 	bl	8008acc <ADC_Disable>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d136      	bne.n	8008dfa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d94:	f023 0302 	bic.w	r3, r3, #2
 8008d98:	f043 0202 	orr.w	r2, r3, #2
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff ff96 	bl	8008cd8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008dac:	e014      	b.n	8008dd8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	3301      	adds	r3, #1
 8008db2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d90d      	bls.n	8008dd8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc0:	f023 0312 	bic.w	r3, r3, #18
 8008dc4:	f043 0210 	orr.w	r2, r3, #16
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e01b      	b.n	8008e10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff ff94 	bl	8008d0a <LL_ADC_IsCalibrationOnGoing>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e2      	bne.n	8008dae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dec:	f023 0303 	bic.w	r3, r3, #3
 8008df0:	f043 0201 	orr.w	r2, r3, #1
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	65da      	str	r2, [r3, #92]	; 0x5c
 8008df8:	e005      	b.n	8008e06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfe:	f043 0210 	orr.w	r2, r3, #16
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	0004de01 	.word	0x0004de01

08008e1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b0a1      	sub	sp, #132	; 0x84
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e08b      	b.n	8008fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb6:	d102      	bne.n	8008ebe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008eb8:	4b41      	ldr	r3, [pc, #260]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008eba:	60bb      	str	r3, [r7, #8]
 8008ebc:	e001      	b.n	8008ec2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e06a      	b.n	8008fb6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff ff25 	bl	8008d32 <LL_ADC_REG_IsConversionOngoing>
 8008ee8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff ff1f 	bl	8008d32 <LL_ADC_REG_IsConversionOngoing>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d14c      	bne.n	8008f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d149      	bne.n	8008f94 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008f00:	4b30      	ldr	r3, [pc, #192]	; (8008fc4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008f02:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d028      	beq.n	8008f5e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	6859      	ldr	r1, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f1e:	035b      	lsls	r3, r3, #13
 8008f20:	430b      	orrs	r3, r1
 8008f22:	431a      	orrs	r2, r3
 8008f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f2c:	f7ff fec1 	bl	8008cb2 <LL_ADC_IsEnabled>
 8008f30:	4604      	mov	r4, r0
 8008f32:	4823      	ldr	r0, [pc, #140]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f34:	f7ff febd 	bl	8008cb2 <LL_ADC_IsEnabled>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4323      	orrs	r3, r4
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d133      	bne.n	8008fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f48:	f023 030f 	bic.w	r3, r3, #15
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	6811      	ldr	r1, [r2, #0]
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	6892      	ldr	r2, [r2, #8]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	431a      	orrs	r2, r3
 8008f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f5a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f5c:	e024      	b.n	8008fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f6a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008f6e:	f7ff fea0 	bl	8008cb2 <LL_ADC_IsEnabled>
 8008f72:	4604      	mov	r4, r0
 8008f74:	4812      	ldr	r0, [pc, #72]	; (8008fc0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008f76:	f7ff fe9c 	bl	8008cb2 <LL_ADC_IsEnabled>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4323      	orrs	r3, r4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d112      	bne.n	8008fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008f8a:	f023 030f 	bic.w	r3, r3, #15
 8008f8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008f92:	e009      	b.n	8008fa8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f98:	f043 0220 	orr.w	r2, r3, #32
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008fa6:	e000      	b.n	8008faa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3784      	adds	r7, #132	; 0x84
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd90      	pop	{r4, r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	50000100 	.word	0x50000100
 8008fc4:	50000300 	.word	0x50000300

08008fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	; (800900c <__NVIC_SetPriorityGrouping+0x44>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ffa:	4a04      	ldr	r2, [pc, #16]	; (800900c <__NVIC_SetPriorityGrouping+0x44>)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	60d3      	str	r3, [r2, #12]
}
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	e000ed00 	.word	0xe000ed00

08009010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <__NVIC_GetPriorityGrouping+0x18>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	f003 0307 	and.w	r3, r3, #7
}
 800901e:	4618      	mov	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	e000ed00 	.word	0xe000ed00

0800902c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	db0b      	blt.n	8009056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	f003 021f 	and.w	r2, r3, #31
 8009044:	4907      	ldr	r1, [pc, #28]	; (8009064 <__NVIC_EnableIRQ+0x38>)
 8009046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2001      	movs	r0, #1
 800904e:	fa00 f202 	lsl.w	r2, r0, r2
 8009052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	e000e100 	.word	0xe000e100

08009068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009078:	2b00      	cmp	r3, #0
 800907a:	db0a      	blt.n	8009092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	b2da      	uxtb	r2, r3
 8009080:	490c      	ldr	r1, [pc, #48]	; (80090b4 <__NVIC_SetPriority+0x4c>)
 8009082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009086:	0112      	lsls	r2, r2, #4
 8009088:	b2d2      	uxtb	r2, r2
 800908a:	440b      	add	r3, r1
 800908c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009090:	e00a      	b.n	80090a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	b2da      	uxtb	r2, r3
 8009096:	4908      	ldr	r1, [pc, #32]	; (80090b8 <__NVIC_SetPriority+0x50>)
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	f003 030f 	and.w	r3, r3, #15
 800909e:	3b04      	subs	r3, #4
 80090a0:	0112      	lsls	r2, r2, #4
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	440b      	add	r3, r1
 80090a6:	761a      	strb	r2, [r3, #24]
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	e000e100 	.word	0xe000e100
 80090b8:	e000ed00 	.word	0xe000ed00

080090bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090bc:	b480      	push	{r7}
 80090be:	b089      	sub	sp, #36	; 0x24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f1c3 0307 	rsb	r3, r3, #7
 80090d6:	2b04      	cmp	r3, #4
 80090d8:	bf28      	it	cs
 80090da:	2304      	movcs	r3, #4
 80090dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	3304      	adds	r3, #4
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	d902      	bls.n	80090ec <NVIC_EncodePriority+0x30>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	3b03      	subs	r3, #3
 80090ea:	e000      	b.n	80090ee <NVIC_EncodePriority+0x32>
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43da      	mvns	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	401a      	ands	r2, r3
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009104:	f04f 31ff 	mov.w	r1, #4294967295
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	fa01 f303 	lsl.w	r3, r1, r3
 800910e:	43d9      	mvns	r1, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009114:	4313      	orrs	r3, r2
         );
}
 8009116:	4618      	mov	r0, r3
 8009118:	3724      	adds	r7, #36	; 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3b01      	subs	r3, #1
 8009130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009134:	d301      	bcc.n	800913a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009136:	2301      	movs	r3, #1
 8009138:	e00f      	b.n	800915a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800913a:	4a0a      	ldr	r2, [pc, #40]	; (8009164 <SysTick_Config+0x40>)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	3b01      	subs	r3, #1
 8009140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009142:	210f      	movs	r1, #15
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	f7ff ff8e 	bl	8009068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800914c:	4b05      	ldr	r3, [pc, #20]	; (8009164 <SysTick_Config+0x40>)
 800914e:	2200      	movs	r2, #0
 8009150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009152:	4b04      	ldr	r3, [pc, #16]	; (8009164 <SysTick_Config+0x40>)
 8009154:	2207      	movs	r2, #7
 8009156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	e000e010 	.word	0xe000e010

08009168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff ff29 	bl	8008fc8 <__NVIC_SetPriorityGrouping>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	4603      	mov	r3, r0
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800918c:	f7ff ff40 	bl	8009010 <__NVIC_GetPriorityGrouping>
 8009190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	6978      	ldr	r0, [r7, #20]
 8009198:	f7ff ff90 	bl	80090bc <NVIC_EncodePriority>
 800919c:	4602      	mov	r2, r0
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff ff5f 	bl	8009068 <__NVIC_SetPriority>
}
 80091aa:	bf00      	nop
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	4603      	mov	r3, r0
 80091ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff ff33 	bl	800902c <__NVIC_EnableIRQ>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff ffa4 	bl	8009124 <SysTick_Config>
 80091dc:	4603      	mov	r3, r0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e054      	b.n	80092a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7f5b      	ldrb	r3, [r3, #29]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fc fa4e 	bl	80056ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	791b      	ldrb	r3, [r3, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10c      	bne.n	8009238 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a22      	ldr	r2, [pc, #136]	; (80092ac <HAL_CRC_Init+0xc4>)
 8009224:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0218 	bic.w	r2, r2, #24
 8009234:	609a      	str	r2, [r3, #8]
 8009236:	e00c      	b.n	8009252 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6899      	ldr	r1, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	461a      	mov	r2, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f948 	bl	80094d8 <HAL_CRCEx_Polynomial_Set>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e028      	b.n	80092a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	795b      	ldrb	r3, [r3, #5]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	611a      	str	r2, [r3, #16]
 8009264:	e004      	b.n	8009270 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6912      	ldr	r2, [r2, #16]
 800926e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	695a      	ldr	r2, [r3, #20]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699a      	ldr	r2, [r3, #24]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	04c11db7 	.word	0x04c11db7

080092b0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2202      	movs	r2, #2
 80092c4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d006      	beq.n	80092ec <HAL_CRC_Calculate+0x3c>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d829      	bhi.n	8009336 <HAL_CRC_Calculate+0x86>
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d019      	beq.n	800931a <HAL_CRC_Calculate+0x6a>
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d01e      	beq.n	8009328 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80092ea:	e024      	b.n	8009336 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80092ec:	2300      	movs	r3, #0
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e00a      	b.n	8009308 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	441a      	add	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6812      	ldr	r2, [r2, #0]
 8009300:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	3301      	adds	r3, #1
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d3f0      	bcc.n	80092f2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	613b      	str	r3, [r7, #16]
      break;
 8009318:	e00e      	b.n	8009338 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f000 f812 	bl	8009348 <CRC_Handle_8>
 8009324:	6138      	str	r0, [r7, #16]
      break;
 8009326:	e007      	b.n	8009338 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f899 	bl	8009464 <CRC_Handle_16>
 8009332:	6138      	str	r0, [r7, #16]
      break;
 8009334:	e000      	b.n	8009338 <HAL_CRC_Calculate+0x88>
      break;
 8009336:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800933e:	693b      	ldr	r3, [r7, #16]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009348:	b480      	push	{r7}
 800934a:	b089      	sub	sp, #36	; 0x24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]
 8009358:	e023      	b.n	80093a2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	3301      	adds	r3, #1
 800936c:	68b9      	ldr	r1, [r7, #8]
 800936e:	440b      	add	r3, r1
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009374:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	3302      	adds	r3, #2
 800937c:	68b9      	ldr	r1, [r7, #8]
 800937e:	440b      	add	r3, r1
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009384:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	3303      	adds	r3, #3
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	440b      	add	r3, r1
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009398:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800939a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	3301      	adds	r3, #1
 80093a0:	61fb      	str	r3, [r7, #28]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	089b      	lsrs	r3, r3, #2
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3d6      	bcc.n	800935a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d04d      	beq.n	8009452 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d107      	bne.n	80093d0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	4413      	add	r3, r2
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d116      	bne.n	8009408 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	b21a      	sxth	r2, r3
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	440b      	add	r3, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	4313      	orrs	r3, r2
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	8b7a      	ldrh	r2, [r7, #26]
 8009406:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	2b03      	cmp	r3, #3
 8009410:	d11f      	bne.n	8009452 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b21a      	sxth	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	3301      	adds	r3, #1
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	440b      	add	r3, r1
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	b21b      	sxth	r3, r3
 800942e:	4313      	orrs	r3, r2
 8009430:	b21b      	sxth	r3, r3
 8009432:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	8b7a      	ldrh	r2, [r7, #26]
 800943e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	3302      	adds	r3, #2
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4413      	add	r3, r2
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	6812      	ldr	r2, [r2, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3724      	adds	r7, #36	; 0x24
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
 8009474:	e013      	b.n	800949e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	4413      	add	r3, r2
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	041a      	lsls	r2, r3, #16
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	3302      	adds	r3, #2
 8009488:	68b9      	ldr	r1, [r7, #8]
 800948a:	440b      	add	r3, r1
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	4619      	mov	r1, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3301      	adds	r3, #1
 800949c:	617b      	str	r3, [r7, #20]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3e6      	bcc.n	8009476 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	4413      	add	r3, r2
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80094e8:	231f      	movs	r3, #31
 80094ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
 80094fa:	e063      	b.n	80095c4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80094fc:	bf00      	nop
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1e5a      	subs	r2, r3, #1
 8009502:	613a      	str	r2, [r7, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <HAL_CRCEx_Polynomial_Set+0x44>
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f003 031f 	and.w	r3, r3, #31
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	fa22 f303 	lsr.w	r3, r2, r3
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0f0      	beq.n	80094fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b18      	cmp	r3, #24
 8009520:	d846      	bhi.n	80095b0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <HAL_CRCEx_Polynomial_Set+0x50>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	080095b7 	.word	0x080095b7
 800952c:	080095b1 	.word	0x080095b1
 8009530:	080095b1 	.word	0x080095b1
 8009534:	080095b1 	.word	0x080095b1
 8009538:	080095b1 	.word	0x080095b1
 800953c:	080095b1 	.word	0x080095b1
 8009540:	080095b1 	.word	0x080095b1
 8009544:	080095b1 	.word	0x080095b1
 8009548:	080095a5 	.word	0x080095a5
 800954c:	080095b1 	.word	0x080095b1
 8009550:	080095b1 	.word	0x080095b1
 8009554:	080095b1 	.word	0x080095b1
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095b1 	.word	0x080095b1
 8009560:	080095b1 	.word	0x080095b1
 8009564:	080095b1 	.word	0x080095b1
 8009568:	08009599 	.word	0x08009599
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	080095b1 	.word	0x080095b1
 800957c:	080095b1 	.word	0x080095b1
 8009580:	080095b1 	.word	0x080095b1
 8009584:	080095b1 	.word	0x080095b1
 8009588:	0800958d 	.word	0x0800958d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b06      	cmp	r3, #6
 8009590:	d913      	bls.n	80095ba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009596:	e010      	b.n	80095ba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b07      	cmp	r3, #7
 800959c:	d90f      	bls.n	80095be <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80095a2:	e00c      	b.n	80095be <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d90b      	bls.n	80095c2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80095ae:	e008      	b.n	80095c2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	75fb      	strb	r3, [r7, #23]
        break;
 80095b4:	e006      	b.n	80095c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095b6:	bf00      	nop
 80095b8:	e004      	b.n	80095c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80095c2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10d      	bne.n	80095e6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f023 0118 	bic.w	r1, r3, #24
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d101      	bne.n	8009606 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e08d      	b.n	8009722 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	4b47      	ldr	r3, [pc, #284]	; (800972c <HAL_DMA_Init+0x138>)
 800960e:	429a      	cmp	r2, r3
 8009610:	d80f      	bhi.n	8009632 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	4b45      	ldr	r3, [pc, #276]	; (8009730 <HAL_DMA_Init+0x13c>)
 800961a:	4413      	add	r3, r2
 800961c:	4a45      	ldr	r2, [pc, #276]	; (8009734 <HAL_DMA_Init+0x140>)
 800961e:	fba2 2303 	umull	r2, r3, r2, r3
 8009622:	091b      	lsrs	r3, r3, #4
 8009624:	009a      	lsls	r2, r3, #2
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a42      	ldr	r2, [pc, #264]	; (8009738 <HAL_DMA_Init+0x144>)
 800962e:	641a      	str	r2, [r3, #64]	; 0x40
 8009630:	e00e      	b.n	8009650 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	4b40      	ldr	r3, [pc, #256]	; (800973c <HAL_DMA_Init+0x148>)
 800963a:	4413      	add	r3, r2
 800963c:	4a3d      	ldr	r2, [pc, #244]	; (8009734 <HAL_DMA_Init+0x140>)
 800963e:	fba2 2303 	umull	r2, r3, r2, r3
 8009642:	091b      	lsrs	r3, r3, #4
 8009644:	009a      	lsls	r2, r3, #2
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a3c      	ldr	r2, [pc, #240]	; (8009740 <HAL_DMA_Init+0x14c>)
 800964e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800968c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa1e 	bl	8009ae4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096b0:	d102      	bne.n	80096b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80096cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d010      	beq.n	80096f8 <HAL_DMA_Init+0x104>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b04      	cmp	r3, #4
 80096dc:	d80c      	bhi.n	80096f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fa3e 	bl	8009b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	2200      	movs	r2, #0
 80096ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096f4:	605a      	str	r2, [r3, #4]
 80096f6:	e008      	b.n	800970a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40020407 	.word	0x40020407
 8009730:	bffdfff8 	.word	0xbffdfff8
 8009734:	cccccccd 	.word	0xcccccccd
 8009738:	40020000 	.word	0x40020000
 800973c:	bffdfbf8 	.word	0xbffdfbf8
 8009740:	40020400 	.word	0x40020400

08009744 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_DMA_Start_IT+0x20>
 8009760:	2302      	movs	r3, #2
 8009762:	e066      	b.n	8009832 <HAL_DMA_Start_IT+0xee>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b01      	cmp	r3, #1
 8009776:	d155      	bne.n	8009824 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f962 	bl	8009a66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f042 020e 	orr.w	r2, r2, #14
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	e00f      	b.n	80097dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0204 	bic.w	r2, r2, #4
 80097ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f042 020a 	orr.w	r2, r2, #10
 80097da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009810:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]
 8009822:	e005      	b.n	8009830 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800982c:	2302      	movs	r3, #2
 800982e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3718      	adds	r7, #24
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b02      	cmp	r3, #2
 8009850:	d005      	beq.n	800985e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2204      	movs	r2, #4
 8009856:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
 800985c:	e037      	b.n	80098ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 020e 	bic.w	r2, r2, #14
 800986c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800987c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0201 	bic.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009892:	f003 021f 	and.w	r2, r3, #31
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2101      	movs	r1, #1
 800989c:	fa01 f202 	lsl.w	r2, r1, r2
 80098a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80098aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00c      	beq.n	80098ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80098cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009908:	f003 031f 	and.w	r3, r3, #31
 800990c:	2204      	movs	r2, #4
 800990e:	409a      	lsls	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4013      	ands	r3, r2
 8009914:	2b00      	cmp	r3, #0
 8009916:	d026      	beq.n	8009966 <HAL_DMA_IRQHandler+0x7a>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d021      	beq.n	8009966 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0320 	and.w	r3, r3, #32
 800992c:	2b00      	cmp	r3, #0
 800992e:	d107      	bne.n	8009940 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0204 	bic.w	r2, r2, #4
 800993e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009944:	f003 021f 	and.w	r2, r3, #31
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994c:	2104      	movs	r1, #4
 800994e:	fa01 f202 	lsl.w	r2, r1, r2
 8009952:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	2b00      	cmp	r3, #0
 800995a:	d071      	beq.n	8009a40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009964:	e06c      	b.n	8009a40 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800996a:	f003 031f 	and.w	r3, r3, #31
 800996e:	2202      	movs	r2, #2
 8009970:	409a      	lsls	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d02e      	beq.n	80099d8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d029      	beq.n	80099d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 020a 	bic.w	r2, r2, #10
 80099a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	f003 021f 	and.w	r2, r3, #31
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b6:	2102      	movs	r1, #2
 80099b8:	fa01 f202 	lsl.w	r2, r1, r2
 80099bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d038      	beq.n	8009a40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80099d6:	e033      	b.n	8009a40 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099dc:	f003 031f 	and.w	r3, r3, #31
 80099e0:	2208      	movs	r2, #8
 80099e2:	409a      	lsls	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4013      	ands	r3, r2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d02a      	beq.n	8009a42 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d025      	beq.n	8009a42 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 020e 	bic.w	r2, r2, #14
 8009a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	f003 021f 	and.w	r2, r3, #31
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	2101      	movs	r1, #1
 8009a14:	fa01 f202 	lsl.w	r2, r1, r2
 8009a18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
}
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a58:	b2db      	uxtb	r3, r3
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a7c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a8e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a94:	f003 021f 	and.w	r2, r3, #31
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8009aa2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b10      	cmp	r3, #16
 8009ab2:	d108      	bne.n	8009ac6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009ac4:	e007      	b.n	8009ad6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
	...

08009ae4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d802      	bhi.n	8009afe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e001      	b.n	8009b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8009afe:	4b15      	ldr	r3, [pc, #84]	; (8009b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009b00:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	3b08      	subs	r3, #8
 8009b0e:	4a12      	ldr	r2, [pc, #72]	; (8009b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009b10:	fba2 2303 	umull	r2, r3, r2, r3
 8009b14:	091b      	lsrs	r3, r3, #4
 8009b16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1c:	089b      	lsrs	r3, r3, #2
 8009b1e:	009a      	lsls	r2, r3, #2
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	4413      	add	r3, r2
 8009b24:	461a      	mov	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a0b      	ldr	r2, [pc, #44]	; (8009b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f003 031f 	and.w	r3, r3, #31
 8009b36:	2201      	movs	r2, #1
 8009b38:	409a      	lsls	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	40020407 	.word	0x40020407
 8009b50:	40020800 	.word	0x40020800
 8009b54:	40020820 	.word	0x40020820
 8009b58:	cccccccd 	.word	0xcccccccd
 8009b5c:	40020880 	.word	0x40020880

08009b60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009b74:	4413      	add	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	461a      	mov	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009b82:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	f003 031f 	and.w	r3, r3, #31
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	409a      	lsls	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009b94:	bf00      	nop
 8009b96:	3714      	adds	r7, #20
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	1000823f 	.word	0x1000823f
 8009ba4:	40020940 	.word	0x40020940

08009ba8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009bba:	4b2f      	ldr	r3, [pc, #188]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_FLASH_Program+0x1e>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e053      	b.n	8009c6e <HAL_FLASH_Program+0xc6>
 8009bc6:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009bd0:	f000 f892 	bl	8009cf8 <FLASH_WaitForLastOperation>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d143      	bne.n	8009c66 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009bde:	4b26      	ldr	r3, [pc, #152]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009be4:	4b25      	ldr	r3, [pc, #148]	; (8009c7c <HAL_FLASH_Program+0xd4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d009      	beq.n	8009c04 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009bf0:	4b22      	ldr	r3, [pc, #136]	; (8009c7c <HAL_FLASH_Program+0xd4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a21      	ldr	r2, [pc, #132]	; (8009c7c <HAL_FLASH_Program+0xd4>)
 8009bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bfa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009bfe:	2202      	movs	r2, #2
 8009c00:	771a      	strb	r2, [r3, #28]
 8009c02:	e002      	b.n	8009c0a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d107      	bne.n	8009c20 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c14:	68b8      	ldr	r0, [r7, #8]
 8009c16:	f000 f8c3 	bl	8009da0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	613b      	str	r3, [r7, #16]
 8009c1e:	e010      	b.n	8009c42 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d002      	beq.n	8009c2c <HAL_FLASH_Program+0x84>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d10a      	bne.n	8009c42 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f000 f8db 	bl	8009dec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d102      	bne.n	8009c42 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009c3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c40:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c46:	f000 f857 	bl	8009cf8 <FLASH_WaitForLastOperation>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <HAL_FLASH_Program+0xd4>)
 8009c56:	695a      	ldr	r2, [r3, #20]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	43db      	mvns	r3, r3
 8009c5c:	4907      	ldr	r1, [pc, #28]	; (8009c7c <HAL_FLASH_Program+0xd4>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009c62:	f000 f9d3 	bl	800a00c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009c66:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <HAL_FLASH_Program+0xd0>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200001fc 	.word	0x200001fc
 8009c7c:	40022000 	.word	0x40022000

08009c80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009c8a:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <HAL_FLASH_Unlock+0x38>)
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	da0b      	bge.n	8009caa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <HAL_FLASH_Unlock+0x38>)
 8009c94:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <HAL_FLASH_Unlock+0x3c>)
 8009c96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009c98:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <HAL_FLASH_Unlock+0x38>)
 8009c9a:	4a09      	ldr	r2, [pc, #36]	; (8009cc0 <HAL_FLASH_Unlock+0x40>)
 8009c9c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009c9e:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <HAL_FLASH_Unlock+0x38>)
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da01      	bge.n	8009caa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009caa:	79fb      	ldrb	r3, [r7, #7]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	40022000 	.word	0x40022000
 8009cbc:	45670123 	.word	0x45670123
 8009cc0:	cdef89ab 	.word	0xcdef89ab

08009cc4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <HAL_FLASH_Lock+0x30>)
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <HAL_FLASH_Lock+0x30>)
 8009cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009cd8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009cda:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <HAL_FLASH_Lock+0x30>)
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da01      	bge.n	8009ce6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	40022000 	.word	0x40022000

08009cf8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009d00:	f7fc fe0e 	bl	8006920 <HAL_GetTick>
 8009d04:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009d06:	e009      	b.n	8009d1c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009d08:	f7fc fe0a 	bl	8006920 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d201      	bcs.n	8009d1c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e038      	b.n	8009d8e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009d1c:	4b1e      	ldr	r3, [pc, #120]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d28:	d0ee      	beq.n	8009d08 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009d2a:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d2c:	691a      	ldr	r2, [r3, #16]
 8009d2e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009d32:	4013      	ands	r3, r2
 8009d34:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d01e      	beq.n	8009d7a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009d3c:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <FLASH_WaitForLastOperation+0xa4>)
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	4a15      	ldr	r2, [pc, #84]	; (8009d9c <FLASH_WaitForLastOperation+0xa4>)
 8009d46:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d007      	beq.n	8009d62 <FLASH_WaitForLastOperation+0x6a>
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d5c:	490e      	ldr	r1, [pc, #56]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	618b      	str	r3, [r1, #24]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d004      	beq.n	8009d76 <FLASH_WaitForLastOperation+0x7e>
 8009d6c:	4a0a      	ldr	r2, [pc, #40]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009d74:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e009      	b.n	8009d8e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d102      	bne.n	8009d8c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009d86:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <FLASH_WaitForLastOperation+0xa0>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	40022000 	.word	0x40022000
 8009d9c:	200001fc 	.word	0x200001fc

08009da0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009dac:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <FLASH_Program_DoubleWord+0x48>)
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	4a0d      	ldr	r2, [pc, #52]	; (8009de8 <FLASH_Program_DoubleWord+0x48>)
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009dbe:	f3bf 8f6f 	isb	sy
}
 8009dc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dc8:	f04f 0200 	mov.w	r2, #0
 8009dcc:	f04f 0300 	mov.w	r3, #0
 8009dd0:	000a      	movs	r2, r1
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	3104      	adds	r1, #4
 8009dd8:	4613      	mov	r3, r2
 8009dda:	600b      	str	r3, [r1, #0]
}
 8009ddc:	bf00      	nop
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40022000 	.word	0x40022000

08009dec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b089      	sub	sp, #36	; 0x24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009df6:	2340      	movs	r3, #64	; 0x40
 8009df8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8009e02:	4b14      	ldr	r3, [pc, #80]	; (8009e54 <FLASH_Program_Fast+0x68>)
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	4a13      	ldr	r2, [pc, #76]	; (8009e54 <FLASH_Program_Fast+0x68>)
 8009e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e14:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e18:	b672      	cpsid	i
}
 8009e1a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	3304      	adds	r3, #4
 8009e28:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	617b      	str	r3, [r7, #20]
    row_index--;
 8009e30:	7ffb      	ldrb	r3, [r7, #31]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8009e36:	7ffb      	ldrb	r3, [r7, #31]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1ef      	bne.n	8009e1c <FLASH_Program_Fast+0x30>
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	f383 8810 	msr	PRIMASK, r3
}
 8009e46:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009e48:	bf00      	nop
 8009e4a:	3724      	adds	r7, #36	; 0x24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	40022000 	.word	0x40022000

08009e58 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009e62:	4b47      	ldr	r3, [pc, #284]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d101      	bne.n	8009e6e <HAL_FLASHEx_Erase+0x16>
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	e083      	b.n	8009f76 <HAL_FLASHEx_Erase+0x11e>
 8009e6e:	4b44      	ldr	r3, [pc, #272]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e78:	f7ff ff3e 	bl	8009cf8 <FLASH_WaitForLastOperation>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d173      	bne.n	8009f6e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009e86:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009e8c:	4b3d      	ldr	r3, [pc, #244]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d013      	beq.n	8009ec0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009e98:	4b3a      	ldr	r3, [pc, #232]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d009      	beq.n	8009eb8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a36      	ldr	r2, [pc, #216]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009eb0:	4b33      	ldr	r3, [pc, #204]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	771a      	strb	r2, [r3, #28]
 8009eb6:	e016      	b.n	8009ee6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009eb8:	4b31      	ldr	r3, [pc, #196]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	771a      	strb	r2, [r3, #28]
 8009ebe:	e012      	b.n	8009ee6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009ec0:	4b30      	ldr	r3, [pc, #192]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d009      	beq.n	8009ee0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009ecc:	4b2d      	ldr	r3, [pc, #180]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009ed8:	4b29      	ldr	r3, [pc, #164]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009eda:	2202      	movs	r2, #2
 8009edc:	771a      	strb	r2, [r3, #28]
 8009ede:	e002      	b.n	8009ee6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009ee0:	4b27      	ldr	r3, [pc, #156]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d111      	bne.n	8009f12 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 f848 	bl	8009f88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009efc:	f7ff fefc 	bl	8009cf8 <FLASH_WaitForLastOperation>
 8009f00:	4603      	mov	r3, r0
 8009f02:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009f04:	4b1f      	ldr	r3, [pc, #124]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009f0a:	f023 0304 	bic.w	r3, r3, #4
 8009f0e:	6153      	str	r3, [r2, #20]
 8009f10:	e02b      	b.n	8009f6a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	60bb      	str	r3, [r7, #8]
 8009f20:	e01b      	b.n	8009f5a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	4619      	mov	r1, r3
 8009f28:	68b8      	ldr	r0, [r7, #8]
 8009f2a:	f000 f84b 	bl	8009fc4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f32:	f7ff fee1 	bl	8009cf8 <FLASH_WaitForLastOperation>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	4a11      	ldr	r2, [pc, #68]	; (8009f84 <HAL_FLASHEx_Erase+0x12c>)
 8009f40:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8009f44:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	601a      	str	r2, [r3, #0]
          break;
 8009f52:	e00a      	b.n	8009f6a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60bb      	str	r3, [r7, #8]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	4413      	add	r3, r2
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d3db      	bcc.n	8009f22 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009f6a:	f000 f84f 	bl	800a00c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f6e:	4b04      	ldr	r3, [pc, #16]	; (8009f80 <HAL_FLASHEx_Erase+0x128>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]

  return status;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	200001fc 	.word	0x200001fc
 8009f84:	40022000 	.word	0x40022000

08009f88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d005      	beq.n	8009fa6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <FLASH_MassErase+0x38>)
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	4a08      	ldr	r2, [pc, #32]	; (8009fc0 <FLASH_MassErase+0x38>)
 8009fa0:	f043 0304 	orr.w	r3, r3, #4
 8009fa4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009fa6:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <FLASH_MassErase+0x38>)
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	4a05      	ldr	r2, [pc, #20]	; (8009fc0 <FLASH_MassErase+0x38>)
 8009fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb0:	6153      	str	r3, [r2, #20]
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	40022000 	.word	0x40022000

08009fc4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009fce:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <FLASH_PageErase+0x44>)
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	00db      	lsls	r3, r3, #3
 8009fda:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009fde:	490a      	ldr	r1, [pc, #40]	; (800a008 <FLASH_PageErase+0x44>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009fe4:	4b08      	ldr	r3, [pc, #32]	; (800a008 <FLASH_PageErase+0x44>)
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	4a07      	ldr	r2, [pc, #28]	; (800a008 <FLASH_PageErase+0x44>)
 8009fea:	f043 0302 	orr.w	r3, r3, #2
 8009fee:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <FLASH_PageErase+0x44>)
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	4a04      	ldr	r2, [pc, #16]	; (800a008 <FLASH_PageErase+0x44>)
 8009ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ffa:	6153      	str	r3, [r2, #20]
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	40022000 	.word	0x40022000

0800a00c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a012:	4b21      	ldr	r3, [pc, #132]	; (800a098 <FLASH_FlushCaches+0x8c>)
 800a014:	7f1b      	ldrb	r3, [r3, #28]
 800a016:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a018:	79fb      	ldrb	r3, [r7, #7]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d002      	beq.n	800a024 <FLASH_FlushCaches+0x18>
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	2b03      	cmp	r3, #3
 800a022:	d117      	bne.n	800a054 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a024:	4b1d      	ldr	r3, [pc, #116]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1c      	ldr	r2, [pc, #112]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a02a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a02e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a030:	4b1a      	ldr	r3, [pc, #104]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a19      	ldr	r2, [pc, #100]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	4b17      	ldr	r3, [pc, #92]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a16      	ldr	r2, [pc, #88]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a046:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a048:	4b14      	ldr	r3, [pc, #80]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a13      	ldr	r2, [pc, #76]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a04e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a052:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d002      	beq.n	800a060 <FLASH_FlushCaches+0x54>
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d111      	bne.n	800a084 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a060:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a0d      	ldr	r2, [pc, #52]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a076:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a07      	ldr	r2, [pc, #28]	; (800a09c <FLASH_FlushCaches+0x90>)
 800a07e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a082:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a084:	4b04      	ldr	r3, [pc, #16]	; (800a098 <FLASH_FlushCaches+0x8c>)
 800a086:	2200      	movs	r2, #0
 800a088:	771a      	strb	r2, [r3, #28]
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	200001fc 	.word	0x200001fc
 800a09c:	40022000 	.word	0x40022000

0800a0a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b087      	sub	sp, #28
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a0ae:	e15a      	b.n	800a366 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0bc:	4013      	ands	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f000 814c 	beq.w	800a360 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d005      	beq.n	800a0e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d130      	bne.n	800a142 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68da      	ldr	r2, [r3, #12]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	fa02 f303 	lsl.w	r3, r2, r3
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	4313      	orrs	r3, r2
 800a108:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a116:	2201      	movs	r2, #1
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	fa02 f303 	lsl.w	r3, r2, r3
 800a11e:	43db      	mvns	r3, r3
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	4013      	ands	r3, r2
 800a124:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	091b      	lsrs	r3, r3, #4
 800a12c:	f003 0201 	and.w	r2, r3, #1
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	fa02 f303 	lsl.w	r3, r2, r3
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	2b03      	cmp	r3, #3
 800a14c:	d017      	beq.n	800a17e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	2203      	movs	r2, #3
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	43db      	mvns	r3, r3
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	4013      	ands	r3, r2
 800a164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	fa02 f303 	lsl.w	r3, r2, r3
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	2b02      	cmp	r3, #2
 800a188:	d123      	bne.n	800a1d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	08da      	lsrs	r2, r3, #3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3208      	adds	r2, #8
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f003 0307 	and.w	r3, r3, #7
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	220f      	movs	r2, #15
 800a1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a6:	43db      	mvns	r3, r3
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	08da      	lsrs	r2, r3, #3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3208      	adds	r2, #8
 800a1cc:	6939      	ldr	r1, [r7, #16]
 800a1ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	2203      	movs	r2, #3
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	43db      	mvns	r3, r3
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f003 0203 	and.w	r2, r3, #3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 80a6 	beq.w	800a360 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a214:	4b5b      	ldr	r3, [pc, #364]	; (800a384 <HAL_GPIO_Init+0x2e4>)
 800a216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a218:	4a5a      	ldr	r2, [pc, #360]	; (800a384 <HAL_GPIO_Init+0x2e4>)
 800a21a:	f043 0301 	orr.w	r3, r3, #1
 800a21e:	6613      	str	r3, [r2, #96]	; 0x60
 800a220:	4b58      	ldr	r3, [pc, #352]	; (800a384 <HAL_GPIO_Init+0x2e4>)
 800a222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a224:	f003 0301 	and.w	r3, r3, #1
 800a228:	60bb      	str	r3, [r7, #8]
 800a22a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a22c:	4a56      	ldr	r2, [pc, #344]	; (800a388 <HAL_GPIO_Init+0x2e8>)
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	089b      	lsrs	r3, r3, #2
 800a232:	3302      	adds	r3, #2
 800a234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f003 0303 	and.w	r3, r3, #3
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	220f      	movs	r2, #15
 800a244:	fa02 f303 	lsl.w	r3, r2, r3
 800a248:	43db      	mvns	r3, r3
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4013      	ands	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a256:	d01f      	beq.n	800a298 <HAL_GPIO_Init+0x1f8>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a4c      	ldr	r2, [pc, #304]	; (800a38c <HAL_GPIO_Init+0x2ec>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d019      	beq.n	800a294 <HAL_GPIO_Init+0x1f4>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a4b      	ldr	r2, [pc, #300]	; (800a390 <HAL_GPIO_Init+0x2f0>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <HAL_GPIO_Init+0x1f0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a4a      	ldr	r2, [pc, #296]	; (800a394 <HAL_GPIO_Init+0x2f4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00d      	beq.n	800a28c <HAL_GPIO_Init+0x1ec>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a49      	ldr	r2, [pc, #292]	; (800a398 <HAL_GPIO_Init+0x2f8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d007      	beq.n	800a288 <HAL_GPIO_Init+0x1e8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a48      	ldr	r2, [pc, #288]	; (800a39c <HAL_GPIO_Init+0x2fc>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d101      	bne.n	800a284 <HAL_GPIO_Init+0x1e4>
 800a280:	2305      	movs	r3, #5
 800a282:	e00a      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a284:	2306      	movs	r3, #6
 800a286:	e008      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a288:	2304      	movs	r3, #4
 800a28a:	e006      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a28c:	2303      	movs	r3, #3
 800a28e:	e004      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a290:	2302      	movs	r3, #2
 800a292:	e002      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a294:	2301      	movs	r3, #1
 800a296:	e000      	b.n	800a29a <HAL_GPIO_Init+0x1fa>
 800a298:	2300      	movs	r3, #0
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	f002 0203 	and.w	r2, r2, #3
 800a2a0:	0092      	lsls	r2, r2, #2
 800a2a2:	4093      	lsls	r3, r2
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2aa:	4937      	ldr	r1, [pc, #220]	; (800a388 <HAL_GPIO_Init+0x2e8>)
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	089b      	lsrs	r3, r3, #2
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a2b8:	4b39      	ldr	r3, [pc, #228]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a2dc:	4a30      	ldr	r2, [pc, #192]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a2e2:	4b2f      	ldr	r3, [pc, #188]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	43db      	mvns	r3, r3
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a306:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a30c:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	43db      	mvns	r3, r3
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	4013      	ands	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d003      	beq.n	800a330 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a330:	4a1b      	ldr	r2, [pc, #108]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a336:	4b1a      	ldr	r3, [pc, #104]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	43db      	mvns	r3, r3
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4013      	ands	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a35a:	4a11      	ldr	r2, [pc, #68]	; (800a3a0 <HAL_GPIO_Init+0x300>)
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	3301      	adds	r3, #1
 800a364:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	f47f ae9d 	bne.w	800a0b0 <HAL_GPIO_Init+0x10>
  }
}
 800a376:	bf00      	nop
 800a378:	bf00      	nop
 800a37a:	371c      	adds	r7, #28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	40021000 	.word	0x40021000
 800a388:	40010000 	.word	0x40010000
 800a38c:	48000400 	.word	0x48000400
 800a390:	48000800 	.word	0x48000800
 800a394:	48000c00 	.word	0x48000c00
 800a398:	48001000 	.word	0x48001000
 800a39c:	48001400 	.word	0x48001400
 800a3a0:	40010400 	.word	0x40010400

0800a3a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	887b      	ldrh	r3, [r7, #2]
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	73fb      	strb	r3, [r7, #15]
 800a3c0:	e001      	b.n	800a3c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	807b      	strh	r3, [r7, #2]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3e4:	787b      	ldrb	r3, [r7, #1]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3ea:	887a      	ldrh	r2, [r7, #2]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a3f0:	e002      	b.n	800a3f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a3f2:	887a      	ldrh	r2, [r7, #2]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a40e:	4b08      	ldr	r3, [pc, #32]	; (800a430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a410:	695a      	ldr	r2, [r3, #20]
 800a412:	88fb      	ldrh	r3, [r7, #6]
 800a414:	4013      	ands	r3, r2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d006      	beq.n	800a428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a41a:	4a05      	ldr	r2, [pc, #20]	; (800a430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a41c:	88fb      	ldrh	r3, [r7, #6]
 800a41e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	4618      	mov	r0, r3
 800a424:	f7f9 fa24 	bl	8003870 <HAL_GPIO_EXTI_Callback>
  }
}
 800a428:	bf00      	nop
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	40010400 	.word	0x40010400

0800a434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e08d      	b.n	800a562 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7fb f946 	bl	80056ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2224      	movs	r2, #36	; 0x24
 800a464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f022 0201 	bic.w	r2, r2, #1
 800a476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d107      	bne.n	800a4ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a4aa:	609a      	str	r2, [r3, #8]
 800a4ac:	e006      	b.n	800a4bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a4ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d108      	bne.n	800a4d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4d2:	605a      	str	r2, [r3, #4]
 800a4d4:	e007      	b.n	800a4e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68da      	ldr	r2, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69d9      	ldr	r1, [r3, #28]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a1a      	ldr	r2, [r3, #32]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	430a      	orrs	r2, r1
 800a532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f042 0201 	orr.w	r2, r2, #1
 800a542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2220      	movs	r2, #32
 800a54e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b20      	cmp	r3, #32
 800a57e:	d138      	bne.n	800a5f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a586:	2b01      	cmp	r3, #1
 800a588:	d101      	bne.n	800a58e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a58a:	2302      	movs	r3, #2
 800a58c:	e032      	b.n	800a5f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2224      	movs	r2, #36	; 0x24
 800a59a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0201 	bic.w	r2, r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a5bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0201 	orr.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2220      	movs	r2, #32
 800a5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	e000      	b.n	800a5f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a5f2:	2302      	movs	r3, #2
  }
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b20      	cmp	r3, #32
 800a614:	d139      	bne.n	800a68a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a620:	2302      	movs	r3, #2
 800a622:	e033      	b.n	800a68c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2224      	movs	r2, #36	; 0x24
 800a630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 0201 	bic.w	r2, r2, #1
 800a642:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a652:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	021b      	lsls	r3, r3, #8
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f042 0201 	orr.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2220      	movs	r2, #32
 800a67a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	e000      	b.n	800a68c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a68a:	2302      	movs	r3, #2
  }
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e0c0      	b.n	800a82c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f00b fec8 	bl	8016454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f005 fe1e 	bl	8010312 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	e03e      	b.n	800a75a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a6dc:	7bfa      	ldrb	r2, [r7, #15]
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	4413      	add	r3, r2
 800a6e6:	00db      	lsls	r3, r3, #3
 800a6e8:	440b      	add	r3, r1
 800a6ea:	3311      	adds	r3, #17
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a6f0:	7bfa      	ldrb	r2, [r7, #15]
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	440b      	add	r3, r1
 800a6fe:	3310      	adds	r3, #16
 800a700:	7bfa      	ldrb	r2, [r7, #15]
 800a702:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a704:	7bfa      	ldrb	r2, [r7, #15]
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	440b      	add	r3, r1
 800a712:	3313      	adds	r3, #19
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a718:	7bfa      	ldrb	r2, [r7, #15]
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	440b      	add	r3, r1
 800a726:	3320      	adds	r3, #32
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	00db      	lsls	r3, r3, #3
 800a738:	440b      	add	r3, r1
 800a73a:	3324      	adds	r3, #36	; 0x24
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	440b      	add	r3, r1
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	3301      	adds	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	791b      	ldrb	r3, [r3, #4]
 800a75e:	7bfa      	ldrb	r2, [r7, #15]
 800a760:	429a      	cmp	r2, r3
 800a762:	d3bb      	bcc.n	800a6dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
 800a768:	e044      	b.n	800a7f4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a76a:	7bfa      	ldrb	r2, [r7, #15]
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	440b      	add	r3, r1
 800a778:	f203 1351 	addw	r3, r3, #337	; 0x151
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a780:	7bfa      	ldrb	r2, [r7, #15]
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4613      	mov	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4413      	add	r3, r2
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	440b      	add	r3, r1
 800a78e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a792:	7bfa      	ldrb	r2, [r7, #15]
 800a794:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a796:	7bfa      	ldrb	r2, [r7, #15]
 800a798:	6879      	ldr	r1, [r7, #4]
 800a79a:	4613      	mov	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	440b      	add	r3, r1
 800a7a4:	f203 1353 	addw	r3, r3, #339	; 0x153
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a7ac:	7bfa      	ldrb	r2, [r7, #15]
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	440b      	add	r3, r1
 800a7ba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a7c2:	7bfa      	ldrb	r2, [r7, #15]
 800a7c4:	6879      	ldr	r1, [r7, #4]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	440b      	add	r3, r1
 800a7d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a7d8:	7bfa      	ldrb	r2, [r7, #15]
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4413      	add	r3, r2
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	440b      	add	r3, r1
 800a7e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	791b      	ldrb	r3, [r3, #4]
 800a7f8:	7bfa      	ldrb	r2, [r7, #15]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d3b5      	bcc.n	800a76a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a80a:	f005 fd9d 	bl	8010348 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	7a9b      	ldrb	r3, [r3, #10]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d102      	bne.n	800a82a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 fc41 	bl	800c0ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <HAL_PCD_Start+0x16>
 800a846:	2302      	movs	r3, #2
 800a848:	e012      	b.n	800a870 <HAL_PCD_Start+0x3c>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f005 fd44 	bl	80102e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4618      	mov	r0, r3
 800a862:	f008 f804 	bl	801286e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	f008 f809 	bl	801289c <USB_ReadInterrupts>
 800a88a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fb04 	bl	800aea4 <PCD_EP_ISR_Handler>

    return;
 800a89c:	e110      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d013      	beq.n	800a8d0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f00b fe58 	bl	8016576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f8fc 	bl	800aac6 <HAL_PCD_SetAddress>

    return;
 800a8ce:	e0f7      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00c      	beq.n	800a8f4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a8ec:	b292      	uxth	r2, r2
 800a8ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a8f2:	e0e5      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00c      	beq.n	800a918 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a906:	b29a      	uxth	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a910:	b292      	uxth	r2, r2
 800a912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a916:	e0d3      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d034      	beq.n	800a98c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0204 	bic.w	r2, r2, #4
 800a934:	b292      	uxth	r2, r2
 800a936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0208 	bic.w	r2, r2, #8
 800a94c:	b292      	uxth	r2, r2
 800a94e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d107      	bne.n	800a96c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f00b fff8 	bl	801695c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f00b fe3b 	bl	80165e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a984:	b292      	uxth	r2, r2
 800a986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a98a:	e099      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a992:	2b00      	cmp	r3, #0
 800a994:	d027      	beq.n	800a9e6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f042 0208 	orr.w	r2, r2, #8
 800a9a8:	b292      	uxth	r2, r2
 800a9aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9c0:	b292      	uxth	r2, r2
 800a9c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f042 0204 	orr.w	r2, r2, #4
 800a9d8:	b292      	uxth	r2, r2
 800a9da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f00b fde8 	bl	80165b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a9e4:	e06c      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d040      	beq.n	800aa72 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa02:	b292      	uxth	r2, r2
 800aa04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d12b      	bne.n	800aa6a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0204 	orr.w	r2, r2, #4
 800aa24:	b292      	uxth	r2, r2
 800aa26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f042 0208 	orr.w	r2, r2, #8
 800aa3c:	b292      	uxth	r2, r2
 800aa3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	089b      	lsrs	r3, r3, #2
 800aa56:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800aa60:	2101      	movs	r1, #1
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f00b ff7a 	bl	801695c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800aa68:	e02a      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f00b fda2 	bl	80165b4 <HAL_PCD_SuspendCallback>
    return;
 800aa70:	e026      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00f      	beq.n	800aa9c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f00b fd60 	bl	801655a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800aa9a:	e011      	b.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00c      	beq.n	800aac0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aab8:	b292      	uxth	r2, r2
 800aaba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800aabe:	bf00      	nop
  }
}
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <HAL_PCD_SetAddress+0x1a>
 800aadc:	2302      	movs	r3, #2
 800aade:	e012      	b.n	800ab06 <HAL_PCD_SetAddress+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	78fa      	ldrb	r2, [r7, #3]
 800aaec:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	78fa      	ldrb	r2, [r7, #3]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f007 fea5 	bl	8012846 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	4608      	mov	r0, r1
 800ab18:	4611      	mov	r1, r2
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	70fb      	strb	r3, [r7, #3]
 800ab20:	460b      	mov	r3, r1
 800ab22:	803b      	strh	r3, [r7, #0]
 800ab24:	4613      	mov	r3, r2
 800ab26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	da0e      	bge.n	800ab52 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	f003 0207 	and.w	r2, r3, #7
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	3310      	adds	r3, #16
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	4413      	add	r3, r2
 800ab48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	705a      	strb	r2, [r3, #1]
 800ab50:	e00e      	b.n	800ab70 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab52:	78fb      	ldrb	r3, [r7, #3]
 800ab54:	f003 0207 	and.w	r2, r3, #7
 800ab58:	4613      	mov	r3, r2
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	00db      	lsls	r3, r3, #3
 800ab60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	4413      	add	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ab7c:	883a      	ldrh	r2, [r7, #0]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	78ba      	ldrb	r2, [r7, #2]
 800ab86:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab88:	78bb      	ldrb	r3, [r7, #2]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d102      	bne.n	800ab94 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_PCD_EP_Open+0x94>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e00e      	b.n	800abc0 <HAL_PCD_EP_Open+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f005 fbe7 	bl	8010384 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800abbe:	7afb      	ldrb	r3, [r7, #11]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	460b      	mov	r3, r1
 800abd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800abd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da0e      	bge.n	800abfa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	f003 0207 	and.w	r2, r3, #7
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	00db      	lsls	r3, r3, #3
 800abea:	3310      	adds	r3, #16
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	4413      	add	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2201      	movs	r2, #1
 800abf6:	705a      	strb	r2, [r3, #1]
 800abf8:	e00e      	b.n	800ac18 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	f003 0207 	and.w	r2, r3, #7
 800ac00:	4613      	mov	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d101      	bne.n	800ac32 <HAL_PCD_EP_Close+0x6a>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	e00e      	b.n	800ac50 <HAL_PCD_EP_Close+0x88>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f005 ff63 	bl	8010b0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	607a      	str	r2, [r7, #4]
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	460b      	mov	r3, r1
 800ac66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ac68:	7afb      	ldrb	r3, [r7, #11]
 800ac6a:	f003 0207 	and.w	r2, r3, #7
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2200      	movs	r2, #0
 800ac96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac98:	7afb      	ldrb	r3, [r7, #11]
 800ac9a:	f003 0307 	and.w	r3, r3, #7
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6979      	ldr	r1, [r7, #20]
 800acaa:	4618      	mov	r0, r3
 800acac:	f006 f91b 	bl	8010ee6 <USB_EPStartXfer>

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800acc6:	78fb      	ldrb	r3, [r7, #3]
 800acc8:	f003 0207 	and.w	r2, r3, #7
 800accc:	6879      	ldr	r1, [r7, #4]
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800acdc:	681b      	ldr	r3, [r3, #0]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b086      	sub	sp, #24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
 800acf6:	460b      	mov	r3, r1
 800acf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	f003 0207 	and.w	r2, r3, #7
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	3310      	adds	r3, #16
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2201      	movs	r2, #1
 800ad34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad36:	7afb      	ldrb	r3, [r7, #11]
 800ad38:	f003 0307 	and.w	r3, r3, #7
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	6979      	ldr	r1, [r7, #20]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f006 f8cc 	bl	8010ee6 <USB_EPStartXfer>

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	f003 0307 	and.w	r3, r3, #7
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	7912      	ldrb	r2, [r2, #4]
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d901      	bls.n	800ad76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	e03e      	b.n	800adf4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da0e      	bge.n	800ad9c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	f003 0207 	and.w	r2, r3, #7
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	705a      	strb	r2, [r3, #1]
 800ad9a:	e00c      	b.n	800adb6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ad9c:	78fa      	ldrb	r2, [r7, #3]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	4413      	add	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <HAL_PCD_EP_SetStall+0x7e>
 800add2:	2302      	movs	r3, #2
 800add4:	e00e      	b.n	800adf4 <HAL_PCD_EP_SetStall+0x9c>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f007 fc2f 	bl	8012648 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	7912      	ldrb	r2, [r2, #4]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d901      	bls.n	800ae1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e040      	b.n	800ae9c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	da0e      	bge.n	800ae40 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae22:	78fb      	ldrb	r3, [r7, #3]
 800ae24:	f003 0207 	and.w	r2, r3, #7
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	3310      	adds	r3, #16
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	705a      	strb	r2, [r3, #1]
 800ae3e:	e00e      	b.n	800ae5e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	f003 0207 	and.w	r2, r3, #7
 800ae46:	4613      	mov	r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	4413      	add	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	f003 0307 	and.w	r3, r3, #7
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d101      	bne.n	800ae7e <HAL_PCD_EP_ClrStall+0x82>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	e00e      	b.n	800ae9c <HAL_PCD_EP_ClrStall+0xa0>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f007 fc2c 	bl	80126ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b096      	sub	sp, #88	; 0x58
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aeac:	e3ae      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800aeb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800aeba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 030f 	and.w	r3, r3, #15
 800aec4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800aec8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f040 8170 	bne.w	800b1b2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800aed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aed6:	f003 0310 	and.w	r3, r3, #16
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d14d      	bne.n	800af7a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800aeea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeee:	81fb      	strh	r3, [r7, #14]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	89fb      	ldrh	r3, [r7, #14]
 800aef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aefa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aefe:	b29b      	uxth	r3, r3
 800af00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3310      	adds	r3, #16
 800af06:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af10:	b29b      	uxth	r3, r3
 800af12:	461a      	mov	r2, r3
 800af14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	00db      	lsls	r3, r3, #3
 800af1a:	4413      	add	r3, r2
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6812      	ldr	r2, [r2, #0]
 800af20:	4413      	add	r3, r2
 800af22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800af30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	441a      	add	r2, r3
 800af3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800af3e:	2100      	movs	r1, #0
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f00b faf0 	bl	8016526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7b1b      	ldrb	r3, [r3, #12]
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 835d 	beq.w	800b60c <PCD_EP_ISR_Handler+0x768>
 800af52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 8358 	bne.w	800b60c <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	7b1b      	ldrb	r3, [r3, #12]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af66:	b2da      	uxtb	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	b292      	uxth	r2, r2
 800af6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	731a      	strb	r2, [r3, #12]
 800af78:	e348      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af80:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800af8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800af90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af94:	2b00      	cmp	r3, #0
 800af96:	d032      	beq.n	800affe <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	461a      	mov	r2, r3
 800afa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	00db      	lsls	r3, r3, #3
 800afaa:	4413      	add	r3, r2
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6812      	ldr	r2, [r2, #0]
 800afb0:	4413      	add	r3, r2
 800afb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800afbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afbe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800afca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afcc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800afce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f007 fcb4 	bl	8012940 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29a      	uxth	r2, r3
 800afe0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800afe4:	4013      	ands	r3, r2
 800afe6:	823b      	strh	r3, [r7, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	8a3a      	ldrh	r2, [r7, #16]
 800afee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aff2:	b292      	uxth	r2, r2
 800aff4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f00b fa68 	bl	80164cc <HAL_PCD_SetupStageCallback>
 800affc:	e306      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800affe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b002:	2b00      	cmp	r3, #0
 800b004:	f280 8302 	bge.w	800b60c <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29a      	uxth	r2, r3
 800b010:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b014:	4013      	ands	r3, r2
 800b016:	83fb      	strh	r3, [r7, #30]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	8bfa      	ldrh	r2, [r7, #30]
 800b01e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b022:	b292      	uxth	r2, r2
 800b024:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b02e:	b29b      	uxth	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	4413      	add	r3, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6812      	ldr	r2, [r2, #0]
 800b03e:	4413      	add	r3, r2
 800b040:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b04c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b050:	69db      	ldr	r3, [r3, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d019      	beq.n	800b08a <PCD_EP_ISR_Handler+0x1e6>
 800b056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d015      	beq.n	800b08a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b064:	6959      	ldr	r1, [r3, #20]
 800b066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b068:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f007 fc66 	bl	8012940 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b076:	695a      	ldr	r2, [r3, #20]
 800b078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	441a      	add	r2, r3
 800b07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b080:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b082:	2100      	movs	r1, #0
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f00b fa33 	bl	80164f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b094:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	f040 82b5 	bne.w	800b60c <PCD_EP_ISR_Handler+0x768>
 800b0a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b0a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b0aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0ae:	f000 82ad 	beq.w	800b60c <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	61bb      	str	r3, [r7, #24]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	61bb      	str	r3, [r7, #24]
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	801a      	strh	r2, [r3, #0]
 800b0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	2b3e      	cmp	r3, #62	; 0x3e
 800b0e8:	d91d      	bls.n	800b126 <PCD_EP_ISR_Handler+0x282>
 800b0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	095b      	lsrs	r3, r3, #5
 800b0f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 031f 	and.w	r3, r3, #31
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d102      	bne.n	800b104 <PCD_EP_ISR_Handler+0x260>
 800b0fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b100:	3b01      	subs	r3, #1
 800b102:	647b      	str	r3, [r7, #68]	; 0x44
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	b29a      	uxth	r2, r3
 800b10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	029b      	lsls	r3, r3, #10
 800b110:	b29b      	uxth	r3, r3
 800b112:	4313      	orrs	r3, r2
 800b114:	b29b      	uxth	r3, r3
 800b116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b11e:	b29a      	uxth	r2, r3
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	e026      	b.n	800b174 <PCD_EP_ISR_Handler+0x2d0>
 800b126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <PCD_EP_ISR_Handler+0x2a0>
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	b29b      	uxth	r3, r3
 800b134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	801a      	strh	r2, [r3, #0]
 800b142:	e017      	b.n	800b174 <PCD_EP_ISR_Handler+0x2d0>
 800b144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	085b      	lsrs	r3, r3, #1
 800b14a:	647b      	str	r3, [r7, #68]	; 0x44
 800b14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <PCD_EP_ISR_Handler+0x2ba>
 800b158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15a:	3301      	adds	r3, #1
 800b15c:	647b      	str	r3, [r7, #68]	; 0x44
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29a      	uxth	r2, r3
 800b164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b166:	b29b      	uxth	r3, r3
 800b168:	029b      	lsls	r3, r3, #10
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4313      	orrs	r3, r2
 800b16e:	b29a      	uxth	r2, r3
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b184:	827b      	strh	r3, [r7, #18]
 800b186:	8a7b      	ldrh	r3, [r7, #18]
 800b188:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b18c:	827b      	strh	r3, [r7, #18]
 800b18e:	8a7b      	ldrh	r3, [r7, #18]
 800b190:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b194:	827b      	strh	r3, [r7, #18]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	8a7b      	ldrh	r3, [r7, #18]
 800b19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	8013      	strh	r3, [r2, #0]
 800b1b0:	e22c      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b1c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f280 80f6 	bge.w	800b3bc <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b1fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b202:	b292      	uxth	r2, r2
 800b204:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b206:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	00db      	lsls	r3, r3, #3
 800b212:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4413      	add	r3, r2
 800b21a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b21c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b21e:	7b1b      	ldrb	r3, [r3, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d123      	bne.n	800b26c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	461a      	mov	r2, r3
 800b230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	4413      	add	r3, r2
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	6812      	ldr	r2, [r2, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b248:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800b24c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 808e 	beq.w	800b372 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6818      	ldr	r0, [r3, #0]
 800b25a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b25c:	6959      	ldr	r1, [r3, #20]
 800b25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b260:	88da      	ldrh	r2, [r3, #6]
 800b262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b266:	f007 fb6b 	bl	8012940 <USB_ReadPMA>
 800b26a:	e082      	b.n	800b372 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b26e:	78db      	ldrb	r3, [r3, #3]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d10a      	bne.n	800b28a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b274:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b278:	461a      	mov	r2, r3
 800b27a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f9d3 	bl	800b628 <HAL_PCD_EP_DB_Receive>
 800b282:	4603      	mov	r3, r0
 800b284:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b288:	e073      	b.n	800b372 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	881b      	ldrh	r3, [r3, #0]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	441a      	add	r2, r3
 800b2b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d022      	beq.n	800b32e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	4413      	add	r3, r2
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6812      	ldr	r2, [r2, #0]
 800b300:	4413      	add	r3, r2
 800b302:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b30c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b310:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02c      	beq.n	800b372 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6818      	ldr	r0, [r3, #0]
 800b31c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b31e:	6959      	ldr	r1, [r3, #20]
 800b320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b322:	891a      	ldrh	r2, [r3, #8]
 800b324:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b328:	f007 fb0a 	bl	8012940 <USB_ReadPMA>
 800b32c:	e021      	b.n	800b372 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b336:	b29b      	uxth	r3, r3
 800b338:	461a      	mov	r2, r3
 800b33a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4413      	add	r3, r2
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	6812      	ldr	r2, [r2, #0]
 800b346:	4413      	add	r3, r2
 800b348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b352:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b356:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d009      	beq.n	800b372 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b364:	6959      	ldr	r1, [r3, #20]
 800b366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b368:	895a      	ldrh	r2, [r3, #10]
 800b36a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b36e:	f007 fae7 	bl	8012940 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b374:	69da      	ldr	r2, [r3, #28]
 800b376:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b37a:	441a      	add	r2, r3
 800b37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b37e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b382:	695a      	ldr	r2, [r3, #20]
 800b384:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b388:	441a      	add	r2, r3
 800b38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b38c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b38e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <PCD_EP_ISR_Handler+0x4fe>
 800b396:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800b39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d206      	bcs.n	800b3b0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f00b f8a1 	bl	80164f0 <HAL_PCD_DataOutStageCallback>
 800b3ae:	e005      	b.n	800b3bc <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f005 fd95 	bl	8010ee6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b3bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 8121 	beq.w	800b60c <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800b3ca:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	3310      	adds	r3, #16
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	4413      	add	r3, r2
 800b3dc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	881b      	ldrh	r3, [r3, #0]
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b3f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	461a      	mov	r2, r3
 800b402:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	441a      	add	r2, r3
 800b40a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b416:	b29b      	uxth	r3, r3
 800b418:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800b41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b41c:	78db      	ldrb	r3, [r3, #3]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	f040 80a2 	bne.w	800b568 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800b424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b426:	2200      	movs	r2, #0
 800b428:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800b42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b42c:	7b1b      	ldrb	r3, [r3, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8093 	beq.w	800b55a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b434:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d046      	beq.n	800b4ce <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b442:	785b      	ldrb	r3, [r3, #1]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d126      	bne.n	800b496 <PCD_EP_ISR_Handler+0x5f2>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	627b      	str	r3, [r7, #36]	; 0x24
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b456:	b29b      	uxth	r3, r3
 800b458:	461a      	mov	r2, r3
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	4413      	add	r3, r2
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
 800b460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	00da      	lsls	r2, r3, #3
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	4413      	add	r3, r2
 800b46a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b46e:	623b      	str	r3, [r7, #32]
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	b29b      	uxth	r3, r3
 800b476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	801a      	strh	r2, [r3, #0]
 800b480:	6a3b      	ldr	r3, [r7, #32]
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	b29b      	uxth	r3, r3
 800b486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b48e:	b29a      	uxth	r2, r3
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	801a      	strh	r2, [r3, #0]
 800b494:	e061      	b.n	800b55a <PCD_EP_ISR_Handler+0x6b6>
 800b496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b498:	785b      	ldrb	r3, [r3, #1]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d15d      	bne.n	800b55a <PCD_EP_ISR_Handler+0x6b6>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	4413      	add	r3, r2
 800b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	00da      	lsls	r2, r3, #3
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	4413      	add	r3, r2
 800b4c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	801a      	strh	r2, [r3, #0]
 800b4cc:	e045      	b.n	800b55a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d126      	bne.n	800b52a <PCD_EP_ISR_Handler+0x686>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f0:	4413      	add	r3, r2
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	00da      	lsls	r2, r3, #3
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fc:	4413      	add	r3, r2
 800b4fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b502:	633b      	str	r3, [r7, #48]	; 0x30
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	801a      	strh	r2, [r3, #0]
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b522:	b29a      	uxth	r2, r3
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	e017      	b.n	800b55a <PCD_EP_ISR_Handler+0x6b6>
 800b52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b52c:	785b      	ldrb	r3, [r3, #1]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d113      	bne.n	800b55a <PCD_EP_ISR_Handler+0x6b6>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	461a      	mov	r2, r3
 800b53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b540:	4413      	add	r3, r2
 800b542:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	00da      	lsls	r2, r3, #3
 800b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54c:	4413      	add	r3, r2
 800b54e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b552:	63bb      	str	r3, [r7, #56]	; 0x38
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	2200      	movs	r2, #0
 800b558:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f00a ffe0 	bl	8016526 <HAL_PCD_DataInStageCallback>
 800b566:	e051      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b568:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b56c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b570:	2b00      	cmp	r3, #0
 800b572:	d144      	bne.n	800b5fe <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	461a      	mov	r2, r3
 800b580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	4413      	add	r3, r2
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	6812      	ldr	r2, [r2, #0]
 800b58c:	4413      	add	r3, r2
 800b58e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b598:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800b59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b59e:	699a      	ldr	r2, [r3, #24]
 800b5a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d907      	bls.n	800b5b8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800b5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5aa:	699a      	ldr	r2, [r3, #24]
 800b5ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5b4:	619a      	str	r2, [r3, #24]
 800b5b6:	e002      	b.n	800b5be <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800b5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b5be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b5c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f00a ffaa 	bl	8016526 <HAL_PCD_DataInStageCallback>
 800b5d2:	e01b      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5d6:	695a      	ldr	r2, [r3, #20]
 800b5d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5dc:	441a      	add	r2, r3
 800b5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e4:	69da      	ldr	r2, [r3, #28]
 800b5e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5ea:	441a      	add	r2, r3
 800b5ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f005 fc75 	bl	8010ee6 <USB_EPStartXfer>
 800b5fc:	e006      	b.n	800b60c <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b5fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b602:	461a      	mov	r2, r3
 800b604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 f917 	bl	800b83a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b614:	b29b      	uxth	r3, r3
 800b616:	b21b      	sxth	r3, r3
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f6ff ac48 	blt.w	800aeae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3758      	adds	r7, #88	; 0x58
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4613      	mov	r3, r2
 800b634:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b636:	88fb      	ldrh	r3, [r7, #6]
 800b638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d07c      	beq.n	800b73a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b648:	b29b      	uxth	r3, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	6812      	ldr	r2, [r2, #0]
 800b658:	4413      	add	r3, r2
 800b65a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b65e:	881b      	ldrh	r3, [r3, #0]
 800b660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b664:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	8b7b      	ldrh	r3, [r7, #26]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d306      	bcc.n	800b67e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	8b7b      	ldrh	r3, [r7, #26]
 800b676:	1ad2      	subs	r2, r2, r3
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	619a      	str	r2, [r3, #24]
 800b67c:	e002      	b.n	800b684 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2200      	movs	r2, #0
 800b682:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d123      	bne.n	800b6d4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	881b      	ldrh	r3, [r3, #0]
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a6:	833b      	strh	r3, [r7, #24]
 800b6a8:	8b3b      	ldrh	r3, [r7, #24]
 800b6aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b6ae:	833b      	strh	r3, [r7, #24]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	441a      	add	r2, r3
 800b6be:	8b3b      	ldrh	r3, [r7, #24]
 800b6c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b6d4:	88fb      	ldrh	r3, [r7, #6]
 800b6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d01f      	beq.n	800b71e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f8:	82fb      	strh	r3, [r7, #22]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	8afb      	ldrh	r3, [r7, #22]
 800b70a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b70e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b71e:	8b7b      	ldrh	r3, [r7, #26]
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 8085 	beq.w	800b830 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6818      	ldr	r0, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6959      	ldr	r1, [r3, #20]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	891a      	ldrh	r2, [r3, #8]
 800b732:	8b7b      	ldrh	r3, [r7, #26]
 800b734:	f007 f904 	bl	8012940 <USB_ReadPMA>
 800b738:	e07a      	b.n	800b830 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b742:	b29b      	uxth	r3, r3
 800b744:	461a      	mov	r2, r3
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	4413      	add	r3, r2
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	6812      	ldr	r2, [r2, #0]
 800b752:	4413      	add	r3, r2
 800b754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b75e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	699a      	ldr	r2, [r3, #24]
 800b764:	8b7b      	ldrh	r3, [r7, #26]
 800b766:	429a      	cmp	r2, r3
 800b768:	d306      	bcc.n	800b778 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	8b7b      	ldrh	r3, [r7, #26]
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	619a      	str	r2, [r3, #24]
 800b776:	e002      	b.n	800b77e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2200      	movs	r2, #0
 800b77c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d123      	bne.n	800b7ce <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4413      	add	r3, r2
 800b794:	881b      	ldrh	r3, [r3, #0]
 800b796:	b29b      	uxth	r3, r3
 800b798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b79c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a0:	83fb      	strh	r3, [r7, #30]
 800b7a2:	8bfb      	ldrh	r3, [r7, #30]
 800b7a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7a8:	83fb      	strh	r3, [r7, #30]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	441a      	add	r2, r3
 800b7b8:	8bfb      	ldrh	r3, [r7, #30]
 800b7ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11f      	bne.n	800b818 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4413      	add	r3, r2
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7f2:	83bb      	strh	r3, [r7, #28]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	441a      	add	r2, r3
 800b802:	8bbb      	ldrh	r3, [r7, #28]
 800b804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b80c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b814:	b29b      	uxth	r3, r3
 800b816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b818:	8b7b      	ldrh	r3, [r7, #26]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d008      	beq.n	800b830 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	6959      	ldr	r1, [r3, #20]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	895a      	ldrh	r2, [r3, #10]
 800b82a:	8b7b      	ldrh	r3, [r7, #26]
 800b82c:	f007 f888 	bl	8012940 <USB_ReadPMA>
    }
  }

  return count;
 800b830:	8b7b      	ldrh	r3, [r7, #26]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3720      	adds	r7, #32
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b0a4      	sub	sp, #144	; 0x90
 800b83e:	af00      	add	r7, sp, #0
 800b840:	60f8      	str	r0, [r7, #12]
 800b842:	60b9      	str	r1, [r7, #8]
 800b844:	4613      	mov	r3, r2
 800b846:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b848:	88fb      	ldrh	r3, [r7, #6]
 800b84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 81db 	beq.w	800bc0a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	461a      	mov	r2, r3
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	4413      	add	r3, r2
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	6812      	ldr	r2, [r2, #0]
 800b86c:	4413      	add	r3, r2
 800b86e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b878:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	699a      	ldr	r2, [r3, #24]
 800b880:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b884:	429a      	cmp	r2, r3
 800b886:	d907      	bls.n	800b898 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	699a      	ldr	r2, [r3, #24]
 800b88c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b890:	1ad2      	subs	r2, r2, r3
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	619a      	str	r2, [r3, #24]
 800b896:	e002      	b.n	800b89e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2200      	movs	r2, #0
 800b89c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f040 80b9 	bne.w	800ba1a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d126      	bne.n	800b8fe <HAL_PCD_EP_DB_Transmit+0xc4>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c4:	4413      	add	r3, r2
 800b8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	00da      	lsls	r2, r3, #3
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fa:	801a      	strh	r2, [r3, #0]
 800b8fc:	e01a      	b.n	800b934 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d116      	bne.n	800b934 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	637b      	str	r3, [r7, #52]	; 0x34
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b914:	b29b      	uxth	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91a:	4413      	add	r3, r2
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	00da      	lsls	r2, r3, #3
 800b924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b926:	4413      	add	r3, r2
 800b928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b92c:	633b      	str	r3, [r7, #48]	; 0x30
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	2200      	movs	r2, #0
 800b932:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	785b      	ldrb	r3, [r3, #1]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d126      	bne.n	800b990 <HAL_PCD_EP_DB_Transmit+0x156>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b950:	b29b      	uxth	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	4413      	add	r3, r2
 800b958:	61fb      	str	r3, [r7, #28]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	00da      	lsls	r2, r3, #3
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	4413      	add	r3, r2
 800b964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b968:	61bb      	str	r3, [r7, #24]
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b974:	b29a      	uxth	r2, r3
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	801a      	strh	r2, [r3, #0]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	b29b      	uxth	r3, r3
 800b980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b988:	b29a      	uxth	r2, r3
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	801a      	strh	r2, [r3, #0]
 800b98e:	e017      	b.n	800b9c0 <HAL_PCD_EP_DB_Transmit+0x186>
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	785b      	ldrb	r3, [r3, #1]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d113      	bne.n	800b9c0 <HAL_PCD_EP_DB_Transmit+0x186>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	4413      	add	r3, r2
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	00da      	lsls	r2, r3, #3
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	4413      	add	r3, r2
 800b9b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b9b8:	623b      	str	r3, [r7, #32]
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f00a fdad 	bl	8016526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b9cc:	88fb      	ldrh	r3, [r7, #6]
 800b9ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 82fa 	beq.w	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f2:	82fb      	strh	r3, [r7, #22]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	441a      	add	r2, r3
 800ba02:	8afb      	ldrh	r3, [r7, #22]
 800ba04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	8013      	strh	r3, [r2, #0]
 800ba18:	e2d8      	b.n	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ba1a:	88fb      	ldrh	r3, [r7, #6]
 800ba1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d021      	beq.n	800ba68 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	881b      	ldrh	r3, [r3, #0]
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	441a      	add	r2, r3
 800ba50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ba54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	f040 82ac 	bne.w	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	695a      	ldr	r2, [r3, #20]
 800ba78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba7c:	441a      	add	r2, r3
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	69da      	ldr	r2, [r3, #28]
 800ba86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	6a1a      	ldr	r2, [r3, #32]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d30b      	bcc.n	800bab4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	6a1a      	ldr	r2, [r3, #32]
 800baa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baac:	1ad2      	subs	r2, r2, r3
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	621a      	str	r2, [r3, #32]
 800bab2:	e017      	b.n	800bae4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d108      	bne.n	800bace <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800babc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bac0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800bacc:	e00a      	b.n	800bae4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2200      	movs	r2, #0
 800bae2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	785b      	ldrb	r3, [r3, #1]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d165      	bne.n	800bbb8 <HAL_PCD_EP_DB_Transmit+0x37e>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	461a      	mov	r2, r3
 800bafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb00:	4413      	add	r3, r2
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	00da      	lsls	r2, r3, #3
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb12:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	801a      	strh	r2, [r3, #0]
 800bb24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb28:	2b3e      	cmp	r3, #62	; 0x3e
 800bb2a:	d91d      	bls.n	800bb68 <HAL_PCD_EP_DB_Transmit+0x32e>
 800bb2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb30:	095b      	lsrs	r3, r3, #5
 800bb32:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb38:	f003 031f 	and.w	r3, r3, #31
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <HAL_PCD_EP_DB_Transmit+0x30c>
 800bb40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb42:	3b01      	subs	r3, #1
 800bb44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	b29a      	uxth	r2, r3
 800bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	029b      	lsls	r3, r3, #10
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	4313      	orrs	r3, r2
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb64:	801a      	strh	r2, [r3, #0]
 800bb66:	e044      	b.n	800bbf2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bb68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10a      	bne.n	800bb86 <HAL_PCD_EP_DB_Transmit+0x34c>
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb82:	801a      	strh	r2, [r3, #0]
 800bb84:	e035      	b.n	800bbf2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bb86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb8a:	085b      	lsrs	r3, r3, #1
 800bb8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <HAL_PCD_EP_DB_Transmit+0x366>
 800bb9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	881b      	ldrh	r3, [r3, #0]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	029b      	lsls	r3, r3, #10
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	801a      	strh	r2, [r3, #0]
 800bbb6:	e01c      	b.n	800bbf2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	785b      	ldrb	r3, [r3, #1]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d118      	bne.n	800bbf2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd4:	4413      	add	r3, r2
 800bbd6:	647b      	str	r3, [r7, #68]	; 0x44
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	00da      	lsls	r2, r3, #3
 800bbde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbe6:	643b      	str	r3, [r7, #64]	; 0x40
 800bbe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbf0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	6959      	ldr	r1, [r3, #20]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	891a      	ldrh	r2, [r3, #8]
 800bbfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f006 fe5a 	bl	80128bc <USB_WritePMA>
 800bc08:	e1e0      	b.n	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	461a      	mov	r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	00db      	lsls	r3, r3, #3
 800bc1c:	4413      	add	r3, r2
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	4413      	add	r3, r2
 800bc24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc2e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	699a      	ldr	r2, [r3, #24]
 800bc36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d307      	bcc.n	800bc4e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	699a      	ldr	r2, [r3, #24]
 800bc42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	619a      	str	r2, [r3, #24]
 800bc4c:	e002      	b.n	800bc54 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2200      	movs	r2, #0
 800bc52:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f040 80c0 	bne.w	800bdde <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	785b      	ldrb	r3, [r3, #1]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d126      	bne.n	800bcb4 <HAL_PCD_EP_DB_Transmit+0x47a>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc7a:	4413      	add	r3, r2
 800bc7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	00da      	lsls	r2, r3, #3
 800bc84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc86:	4413      	add	r3, r2
 800bc88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc8c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc9c:	801a      	strh	r2, [r3, #0]
 800bc9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcb0:	801a      	strh	r2, [r3, #0]
 800bcb2:	e01a      	b.n	800bcea <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	785b      	ldrb	r3, [r3, #1]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d116      	bne.n	800bcea <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	667b      	str	r3, [r7, #100]	; 0x64
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcd0:	4413      	add	r3, r2
 800bcd2:	667b      	str	r3, [r7, #100]	; 0x64
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	00da      	lsls	r2, r3, #3
 800bcda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcdc:	4413      	add	r3, r2
 800bcde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bce2:	663b      	str	r3, [r7, #96]	; 0x60
 800bce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bce6:	2200      	movs	r2, #0
 800bce8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	677b      	str	r3, [r7, #116]	; 0x74
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	785b      	ldrb	r3, [r3, #1]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d12b      	bne.n	800bd50 <HAL_PCD_EP_DB_Transmit+0x516>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	461a      	mov	r2, r3
 800bd0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd0c:	4413      	add	r3, r2
 800bd0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	00da      	lsls	r2, r3, #3
 800bd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd18:	4413      	add	r3, r2
 800bd1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd34:	801a      	strh	r2, [r3, #0]
 800bd36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd4c:	801a      	strh	r2, [r3, #0]
 800bd4e:	e017      	b.n	800bd80 <HAL_PCD_EP_DB_Transmit+0x546>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	785b      	ldrb	r3, [r3, #1]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d113      	bne.n	800bd80 <HAL_PCD_EP_DB_Transmit+0x546>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	461a      	mov	r2, r3
 800bd64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd66:	4413      	add	r3, r2
 800bd68:	677b      	str	r3, [r7, #116]	; 0x74
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	00da      	lsls	r2, r3, #3
 800bd70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd72:	4413      	add	r3, r2
 800bd74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd78:	673b      	str	r3, [r7, #112]	; 0x70
 800bd7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	4619      	mov	r1, r3
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f00a fbcd 	bl	8016526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f040 811a 	bne.w	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	441a      	add	r2, r3
 800bdc4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800bdc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	8013      	strh	r3, [r2, #0]
 800bddc:	e0f6      	b.n	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d121      	bne.n	800be2c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	441a      	add	r2, r3
 800be14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800be18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be28:	b29b      	uxth	r3, r3
 800be2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be32:	2b01      	cmp	r3, #1
 800be34:	f040 80ca 	bne.w	800bfcc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	695a      	ldr	r2, [r3, #20]
 800be3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800be40:	441a      	add	r2, r3
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	69da      	ldr	r2, [r3, #28]
 800be4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800be4e:	441a      	add	r2, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	6a1a      	ldr	r2, [r3, #32]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d30b      	bcc.n	800be78 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	6a1a      	ldr	r2, [r3, #32]
 800be6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be70:	1ad2      	subs	r2, r2, r3
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	621a      	str	r2, [r3, #32]
 800be76:	e017      	b.n	800bea8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6a1b      	ldr	r3, [r3, #32]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d108      	bne.n	800be92 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800be80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800be84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800be90:	e00a      	b.n	800bea8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2200      	movs	r2, #0
 800be9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	657b      	str	r3, [r7, #84]	; 0x54
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	785b      	ldrb	r3, [r3, #1]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d165      	bne.n	800bf82 <HAL_PCD_EP_DB_Transmit+0x748>
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	461a      	mov	r2, r3
 800bec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beca:	4413      	add	r3, r2
 800becc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	00da      	lsls	r2, r3, #3
 800bed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bed6:	4413      	add	r3, r2
 800bed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bedc:	65bb      	str	r3, [r7, #88]	; 0x58
 800bede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bee8:	b29a      	uxth	r2, r3
 800beea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800beec:	801a      	strh	r2, [r3, #0]
 800beee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bef2:	2b3e      	cmp	r3, #62	; 0x3e
 800bef4:	d91d      	bls.n	800bf32 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800bef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800befa:	095b      	lsrs	r3, r3, #5
 800befc:	66bb      	str	r3, [r7, #104]	; 0x68
 800befe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf02:	f003 031f 	and.w	r3, r3, #31
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800bf0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	029b      	lsls	r3, r3, #10
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf2e:	801a      	strh	r2, [r3, #0]
 800bf30:	e041      	b.n	800bfb6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bf32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <HAL_PCD_EP_DB_Transmit+0x716>
 800bf3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf4c:	801a      	strh	r2, [r3, #0]
 800bf4e:	e032      	b.n	800bfb6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bf50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <HAL_PCD_EP_DB_Transmit+0x730>
 800bf64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf66:	3301      	adds	r3, #1
 800bf68:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	029b      	lsls	r3, r3, #10
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf7e:	801a      	strh	r2, [r3, #0]
 800bf80:	e019      	b.n	800bfb6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d115      	bne.n	800bfb6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	461a      	mov	r2, r3
 800bf96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf98:	4413      	add	r3, r2
 800bf9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	00da      	lsls	r2, r3, #3
 800bfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bfac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6818      	ldr	r0, [r3, #0]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	6959      	ldr	r1, [r3, #20]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	895a      	ldrh	r2, [r3, #10]
 800bfc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	f006 fc78 	bl	80128bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe6:	82bb      	strh	r3, [r7, #20]
 800bfe8:	8abb      	ldrh	r3, [r7, #20]
 800bfea:	f083 0310 	eor.w	r3, r3, #16
 800bfee:	82bb      	strh	r3, [r7, #20]
 800bff0:	8abb      	ldrh	r3, [r7, #20]
 800bff2:	f083 0320 	eor.w	r3, r3, #32
 800bff6:	82bb      	strh	r3, [r7, #20]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	461a      	mov	r2, r3
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	441a      	add	r2, r3
 800c006:	8abb      	ldrh	r3, [r7, #20]
 800c008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c018:	b29b      	uxth	r3, r3
 800c01a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3790      	adds	r7, #144	; 0x90
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c026:	b480      	push	{r7}
 800c028:	b087      	sub	sp, #28
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	607b      	str	r3, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	817b      	strh	r3, [r7, #10]
 800c034:	4613      	mov	r3, r2
 800c036:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c038:	897b      	ldrh	r3, [r7, #10]
 800c03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03e:	b29b      	uxth	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c044:	897b      	ldrh	r3, [r7, #10]
 800c046:	f003 0207 	and.w	r2, r3, #7
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	3310      	adds	r3, #16
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	4413      	add	r3, r2
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	e009      	b.n	800c070 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c05c:	897a      	ldrh	r2, [r7, #10]
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c070:	893b      	ldrh	r3, [r7, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d107      	bne.n	800c086 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2200      	movs	r2, #0
 800c07a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	80da      	strh	r2, [r3, #6]
 800c084:	e00b      	b.n	800c09e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2201      	movs	r2, #1
 800c08a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	b29a      	uxth	r2, r3
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	0c1b      	lsrs	r3, r3, #16
 800c098:	b29a      	uxth	r2, r3
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	f043 0301 	orr.w	r3, r3, #1
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	f043 0302 	orr.w	r3, r3, #2
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d141      	bne.n	800c192 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c10e:	4b4b      	ldr	r3, [pc, #300]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c11a:	d131      	bne.n	800c180 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c11c:	4b47      	ldr	r3, [pc, #284]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c122:	4a46      	ldr	r2, [pc, #280]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c128:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c12c:	4b43      	ldr	r3, [pc, #268]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c134:	4a41      	ldr	r2, [pc, #260]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c13a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c13c:	4b40      	ldr	r3, [pc, #256]	; (800c240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2232      	movs	r2, #50	; 0x32
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	4a3f      	ldr	r2, [pc, #252]	; (800c244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c148:	fba2 2303 	umull	r2, r3, r2, r3
 800c14c:	0c9b      	lsrs	r3, r3, #18
 800c14e:	3301      	adds	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c152:	e002      	b.n	800c15a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	3b01      	subs	r3, #1
 800c158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c15a:	4b38      	ldr	r3, [pc, #224]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c15c:	695b      	ldr	r3, [r3, #20]
 800c15e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c166:	d102      	bne.n	800c16e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1f2      	bne.n	800c154 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c16e:	4b33      	ldr	r3, [pc, #204]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17a:	d158      	bne.n	800c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e057      	b.n	800c230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c180:	4b2e      	ldr	r3, [pc, #184]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c186:	4a2d      	ldr	r2, [pc, #180]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c18c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c190:	e04d      	b.n	800c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c198:	d141      	bne.n	800c21e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c19a:	4b28      	ldr	r3, [pc, #160]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a6:	d131      	bne.n	800c20c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1ae:	4a23      	ldr	r2, [pc, #140]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1b8:	4b20      	ldr	r3, [pc, #128]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1c0:	4a1e      	ldr	r2, [pc, #120]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1c8:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2232      	movs	r2, #50	; 0x32
 800c1ce:	fb02 f303 	mul.w	r3, r2, r3
 800c1d2:	4a1c      	ldr	r2, [pc, #112]	; (800c244 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d8:	0c9b      	lsrs	r3, r3, #18
 800c1da:	3301      	adds	r3, #1
 800c1dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1de:	e002      	b.n	800c1e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1e6:	4b15      	ldr	r3, [pc, #84]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1f2:	d102      	bne.n	800c1fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1f2      	bne.n	800c1e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c1fa:	4b10      	ldr	r3, [pc, #64]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c206:	d112      	bne.n	800c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e011      	b.n	800c230 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c20c:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c212:	4a0a      	ldr	r2, [pc, #40]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c218:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c21c:	e007      	b.n	800c22e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c21e:	4b07      	ldr	r3, [pc, #28]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c226:	4a05      	ldr	r2, [pc, #20]	; (800c23c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c22c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr
 800c23c:	40007000 	.word	0x40007000
 800c240:	200001e0 	.word	0x200001e0
 800c244:	431bde83 	.word	0x431bde83

0800c248 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c248:	b480      	push	{r7}
 800c24a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c24c:	4b05      	ldr	r3, [pc, #20]	; (800c264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	4a04      	ldr	r2, [pc, #16]	; (800c264 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c256:	6093      	str	r3, [r2, #8]
}
 800c258:	bf00      	nop
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	40007000 	.word	0x40007000

0800c268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e2fe      	b.n	800c878 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d075      	beq.n	800c372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c286:	4b97      	ldr	r3, [pc, #604]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	f003 030c 	and.w	r3, r3, #12
 800c28e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c290:	4b94      	ldr	r3, [pc, #592]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f003 0303 	and.w	r3, r3, #3
 800c298:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b0c      	cmp	r3, #12
 800c29e:	d102      	bne.n	800c2a6 <HAL_RCC_OscConfig+0x3e>
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d002      	beq.n	800c2ac <HAL_RCC_OscConfig+0x44>
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d10b      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2ac:	4b8d      	ldr	r3, [pc, #564]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d05b      	beq.n	800c370 <HAL_RCC_OscConfig+0x108>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d157      	bne.n	800c370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e2d9      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2cc:	d106      	bne.n	800c2dc <HAL_RCC_OscConfig+0x74>
 800c2ce:	4b85      	ldr	r3, [pc, #532]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a84      	ldr	r2, [pc, #528]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	e01d      	b.n	800c318 <HAL_RCC_OscConfig+0xb0>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2e4:	d10c      	bne.n	800c300 <HAL_RCC_OscConfig+0x98>
 800c2e6:	4b7f      	ldr	r3, [pc, #508]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a7e      	ldr	r2, [pc, #504]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	4b7c      	ldr	r3, [pc, #496]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a7b      	ldr	r2, [pc, #492]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c2f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2fc:	6013      	str	r3, [r2, #0]
 800c2fe:	e00b      	b.n	800c318 <HAL_RCC_OscConfig+0xb0>
 800c300:	4b78      	ldr	r3, [pc, #480]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a77      	ldr	r2, [pc, #476]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	4b75      	ldr	r3, [pc, #468]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a74      	ldr	r2, [pc, #464]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d013      	beq.n	800c348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c320:	f7fa fafe 	bl	8006920 <HAL_GetTick>
 800c324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c326:	e008      	b.n	800c33a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c328:	f7fa fafa 	bl	8006920 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	2b64      	cmp	r3, #100	; 0x64
 800c334:	d901      	bls.n	800c33a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c336:	2303      	movs	r3, #3
 800c338:	e29e      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c33a:	4b6a      	ldr	r3, [pc, #424]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0f0      	beq.n	800c328 <HAL_RCC_OscConfig+0xc0>
 800c346:	e014      	b.n	800c372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c348:	f7fa faea 	bl	8006920 <HAL_GetTick>
 800c34c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c34e:	e008      	b.n	800c362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c350:	f7fa fae6 	bl	8006920 <HAL_GetTick>
 800c354:	4602      	mov	r2, r0
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b64      	cmp	r3, #100	; 0x64
 800c35c:	d901      	bls.n	800c362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e28a      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c362:	4b60      	ldr	r3, [pc, #384]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1f0      	bne.n	800c350 <HAL_RCC_OscConfig+0xe8>
 800c36e:	e000      	b.n	800c372 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0302 	and.w	r3, r3, #2
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d075      	beq.n	800c46a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c37e:	4b59      	ldr	r3, [pc, #356]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	f003 030c 	and.w	r3, r3, #12
 800c386:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c388:	4b56      	ldr	r3, [pc, #344]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	f003 0303 	and.w	r3, r3, #3
 800c390:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b0c      	cmp	r3, #12
 800c396:	d102      	bne.n	800c39e <HAL_RCC_OscConfig+0x136>
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	d002      	beq.n	800c3a4 <HAL_RCC_OscConfig+0x13c>
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d11f      	bne.n	800c3e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3a4:	4b4f      	ldr	r3, [pc, #316]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <HAL_RCC_OscConfig+0x154>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e25d      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3bc:	4b49      	ldr	r3, [pc, #292]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	061b      	lsls	r3, r3, #24
 800c3ca:	4946      	ldr	r1, [pc, #280]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3d0:	4b45      	ldr	r3, [pc, #276]	; (800c4e8 <HAL_RCC_OscConfig+0x280>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fa fa57 	bl	8006888 <HAL_InitTick>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d043      	beq.n	800c468 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e249      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d023      	beq.n	800c434 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3ec:	4b3d      	ldr	r3, [pc, #244]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a3c      	ldr	r2, [pc, #240]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3f8:	f7fa fa92 	bl	8006920 <HAL_GetTick>
 800c3fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c3fe:	e008      	b.n	800c412 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c400:	f7fa fa8e 	bl	8006920 <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d901      	bls.n	800c412 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c40e:	2303      	movs	r3, #3
 800c410:	e232      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c412:	4b34      	ldr	r3, [pc, #208]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0f0      	beq.n	800c400 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c41e:	4b31      	ldr	r3, [pc, #196]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	061b      	lsls	r3, r3, #24
 800c42c:	492d      	ldr	r1, [pc, #180]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	604b      	str	r3, [r1, #4]
 800c432:	e01a      	b.n	800c46a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c434:	4b2b      	ldr	r3, [pc, #172]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a2a      	ldr	r2, [pc, #168]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c43e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c440:	f7fa fa6e 	bl	8006920 <HAL_GetTick>
 800c444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c448:	f7fa fa6a 	bl	8006920 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e20e      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c45a:	4b22      	ldr	r3, [pc, #136]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1f0      	bne.n	800c448 <HAL_RCC_OscConfig+0x1e0>
 800c466:	e000      	b.n	800c46a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 0308 	and.w	r3, r3, #8
 800c472:	2b00      	cmp	r3, #0
 800c474:	d041      	beq.n	800c4fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01c      	beq.n	800c4b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c47e:	4b19      	ldr	r3, [pc, #100]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c484:	4a17      	ldr	r2, [pc, #92]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c486:	f043 0301 	orr.w	r3, r3, #1
 800c48a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c48e:	f7fa fa47 	bl	8006920 <HAL_GetTick>
 800c492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c494:	e008      	b.n	800c4a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c496:	f7fa fa43 	bl	8006920 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d901      	bls.n	800c4a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e1e7      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4a8:	4b0e      	ldr	r3, [pc, #56]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0ef      	beq.n	800c496 <HAL_RCC_OscConfig+0x22e>
 800c4b6:	e020      	b.n	800c4fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4be:	4a09      	ldr	r2, [pc, #36]	; (800c4e4 <HAL_RCC_OscConfig+0x27c>)
 800c4c0:	f023 0301 	bic.w	r3, r3, #1
 800c4c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c8:	f7fa fa2a 	bl	8006920 <HAL_GetTick>
 800c4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4ce:	e00d      	b.n	800c4ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4d0:	f7fa fa26 	bl	8006920 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d906      	bls.n	800c4ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e1ca      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
 800c4e2:	bf00      	nop
 800c4e4:	40021000 	.word	0x40021000
 800c4e8:	200001f4 	.word	0x200001f4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4ec:	4b8c      	ldr	r3, [pc, #560]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c4ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1ea      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 0304 	and.w	r3, r3, #4
 800c502:	2b00      	cmp	r3, #0
 800c504:	f000 80a6 	beq.w	800c654 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c508:	2300      	movs	r3, #0
 800c50a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c50c:	4b84      	ldr	r3, [pc, #528]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <HAL_RCC_OscConfig+0x2b4>
 800c518:	2301      	movs	r3, #1
 800c51a:	e000      	b.n	800c51e <HAL_RCC_OscConfig+0x2b6>
 800c51c:	2300      	movs	r3, #0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d00d      	beq.n	800c53e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c522:	4b7f      	ldr	r3, [pc, #508]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c526:	4a7e      	ldr	r2, [pc, #504]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c52c:	6593      	str	r3, [r2, #88]	; 0x58
 800c52e:	4b7c      	ldr	r3, [pc, #496]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c536:	60fb      	str	r3, [r7, #12]
 800c538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c53a:	2301      	movs	r3, #1
 800c53c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c53e:	4b79      	ldr	r3, [pc, #484]	; (800c724 <HAL_RCC_OscConfig+0x4bc>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c546:	2b00      	cmp	r3, #0
 800c548:	d118      	bne.n	800c57c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c54a:	4b76      	ldr	r3, [pc, #472]	; (800c724 <HAL_RCC_OscConfig+0x4bc>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a75      	ldr	r2, [pc, #468]	; (800c724 <HAL_RCC_OscConfig+0x4bc>)
 800c550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c556:	f7fa f9e3 	bl	8006920 <HAL_GetTick>
 800c55a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c55c:	e008      	b.n	800c570 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c55e:	f7fa f9df 	bl	8006920 <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d901      	bls.n	800c570 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e183      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c570:	4b6c      	ldr	r3, [pc, #432]	; (800c724 <HAL_RCC_OscConfig+0x4bc>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f0      	beq.n	800c55e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	689b      	ldr	r3, [r3, #8]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d108      	bne.n	800c596 <HAL_RCC_OscConfig+0x32e>
 800c584:	4b66      	ldr	r3, [pc, #408]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c58a:	4a65      	ldr	r2, [pc, #404]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c58c:	f043 0301 	orr.w	r3, r3, #1
 800c590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c594:	e024      	b.n	800c5e0 <HAL_RCC_OscConfig+0x378>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	2b05      	cmp	r3, #5
 800c59c:	d110      	bne.n	800c5c0 <HAL_RCC_OscConfig+0x358>
 800c59e:	4b60      	ldr	r3, [pc, #384]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a4:	4a5e      	ldr	r2, [pc, #376]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5a6:	f043 0304 	orr.w	r3, r3, #4
 800c5aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5ae:	4b5c      	ldr	r3, [pc, #368]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	4a5a      	ldr	r2, [pc, #360]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5b6:	f043 0301 	orr.w	r3, r3, #1
 800c5ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5be:	e00f      	b.n	800c5e0 <HAL_RCC_OscConfig+0x378>
 800c5c0:	4b57      	ldr	r3, [pc, #348]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5c6:	4a56      	ldr	r2, [pc, #344]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5c8:	f023 0301 	bic.w	r3, r3, #1
 800c5cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c5d0:	4b53      	ldr	r3, [pc, #332]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d6:	4a52      	ldr	r2, [pc, #328]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c5d8:	f023 0304 	bic.w	r3, r3, #4
 800c5dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d016      	beq.n	800c616 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e8:	f7fa f99a 	bl	8006920 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5ee:	e00a      	b.n	800c606 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5f0:	f7fa f996 	bl	8006920 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d901      	bls.n	800c606 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c602:	2303      	movs	r3, #3
 800c604:	e138      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c606:	4b46      	ldr	r3, [pc, #280]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0ed      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x388>
 800c614:	e015      	b.n	800c642 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c616:	f7fa f983 	bl	8006920 <HAL_GetTick>
 800c61a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c61c:	e00a      	b.n	800c634 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c61e:	f7fa f97f 	bl	8006920 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f241 3288 	movw	r2, #5000	; 0x1388
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d901      	bls.n	800c634 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e121      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c634:	4b3a      	ldr	r3, [pc, #232]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c63a:	f003 0302 	and.w	r3, r3, #2
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1ed      	bne.n	800c61e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c642:	7ffb      	ldrb	r3, [r7, #31]
 800c644:	2b01      	cmp	r3, #1
 800c646:	d105      	bne.n	800c654 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c648:	4b35      	ldr	r3, [pc, #212]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c64c:	4a34      	ldr	r2, [pc, #208]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c64e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c652:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0320 	and.w	r3, r3, #32
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d03c      	beq.n	800c6da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d01c      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c668:	4b2d      	ldr	r3, [pc, #180]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c66a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c66e:	4a2c      	ldr	r2, [pc, #176]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c670:	f043 0301 	orr.w	r3, r3, #1
 800c674:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c678:	f7fa f952 	bl	8006920 <HAL_GetTick>
 800c67c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c67e:	e008      	b.n	800c692 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c680:	f7fa f94e 	bl	8006920 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d901      	bls.n	800c692 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e0f2      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c692:	4b23      	ldr	r3, [pc, #140]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d0ef      	beq.n	800c680 <HAL_RCC_OscConfig+0x418>
 800c6a0:	e01b      	b.n	800c6da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6a2:	4b1f      	ldr	r3, [pc, #124]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c6a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6a8:	4a1d      	ldr	r2, [pc, #116]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c6aa:	f023 0301 	bic.w	r3, r3, #1
 800c6ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6b2:	f7fa f935 	bl	8006920 <HAL_GetTick>
 800c6b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6b8:	e008      	b.n	800c6cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6ba:	f7fa f931 	bl	8006920 <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d901      	bls.n	800c6cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e0d5      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6cc:	4b14      	ldr	r3, [pc, #80]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c6ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1ef      	bne.n	800c6ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80c9 	beq.w	800c876 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6e4:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	f003 030c 	and.w	r3, r3, #12
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	f000 8083 	beq.w	800c7f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d15e      	bne.n	800c7b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6fa:	4b09      	ldr	r3, [pc, #36]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a08      	ldr	r2, [pc, #32]	; (800c720 <HAL_RCC_OscConfig+0x4b8>)
 800c700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c706:	f7fa f90b 	bl	8006920 <HAL_GetTick>
 800c70a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c70c:	e00c      	b.n	800c728 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c70e:	f7fa f907 	bl	8006920 <HAL_GetTick>
 800c712:	4602      	mov	r2, r0
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d905      	bls.n	800c728 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e0ab      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
 800c720:	40021000 	.word	0x40021000
 800c724:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c728:	4b55      	ldr	r3, [pc, #340]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1ec      	bne.n	800c70e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c734:	4b52      	ldr	r3, [pc, #328]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	4b52      	ldr	r3, [pc, #328]	; (800c884 <HAL_RCC_OscConfig+0x61c>)
 800c73a:	4013      	ands	r3, r2
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	6a11      	ldr	r1, [r2, #32]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c744:	3a01      	subs	r2, #1
 800c746:	0112      	lsls	r2, r2, #4
 800c748:	4311      	orrs	r1, r2
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c74e:	0212      	lsls	r2, r2, #8
 800c750:	4311      	orrs	r1, r2
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c756:	0852      	lsrs	r2, r2, #1
 800c758:	3a01      	subs	r2, #1
 800c75a:	0552      	lsls	r2, r2, #21
 800c75c:	4311      	orrs	r1, r2
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c762:	0852      	lsrs	r2, r2, #1
 800c764:	3a01      	subs	r2, #1
 800c766:	0652      	lsls	r2, r2, #25
 800c768:	4311      	orrs	r1, r2
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c76e:	06d2      	lsls	r2, r2, #27
 800c770:	430a      	orrs	r2, r1
 800c772:	4943      	ldr	r1, [pc, #268]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c774:	4313      	orrs	r3, r2
 800c776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c778:	4b41      	ldr	r3, [pc, #260]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a40      	ldr	r2, [pc, #256]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c77e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c784:	4b3e      	ldr	r3, [pc, #248]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	4a3d      	ldr	r2, [pc, #244]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c78a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c78e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c790:	f7fa f8c6 	bl	8006920 <HAL_GetTick>
 800c794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c796:	e008      	b.n	800c7aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c798:	f7fa f8c2 	bl	8006920 <HAL_GetTick>
 800c79c:	4602      	mov	r2, r0
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d901      	bls.n	800c7aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e066      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7aa:	4b35      	ldr	r3, [pc, #212]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d0f0      	beq.n	800c798 <HAL_RCC_OscConfig+0x530>
 800c7b6:	e05e      	b.n	800c876 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7b8:	4b31      	ldr	r3, [pc, #196]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a30      	ldr	r2, [pc, #192]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c4:	f7fa f8ac 	bl	8006920 <HAL_GetTick>
 800c7c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7ca:	e008      	b.n	800c7de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7cc:	f7fa f8a8 	bl	8006920 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d901      	bls.n	800c7de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e04c      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7de:	4b28      	ldr	r3, [pc, #160]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1f0      	bne.n	800c7cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c7ea:	4b25      	ldr	r3, [pc, #148]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7ec:	68da      	ldr	r2, [r3, #12]
 800c7ee:	4924      	ldr	r1, [pc, #144]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c7f0:	4b25      	ldr	r3, [pc, #148]	; (800c888 <HAL_RCC_OscConfig+0x620>)
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	60cb      	str	r3, [r1, #12]
 800c7f6:	e03e      	b.n	800c876 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d101      	bne.n	800c804 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	e039      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c804:	4b1e      	ldr	r3, [pc, #120]	; (800c880 <HAL_RCC_OscConfig+0x618>)
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f003 0203 	and.w	r2, r3, #3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	429a      	cmp	r2, r3
 800c816:	d12c      	bne.n	800c872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c822:	3b01      	subs	r3, #1
 800c824:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c826:	429a      	cmp	r2, r3
 800c828:	d123      	bne.n	800c872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c834:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c836:	429a      	cmp	r2, r3
 800c838:	d11b      	bne.n	800c872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c846:	429a      	cmp	r2, r3
 800c848:	d113      	bne.n	800c872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c854:	085b      	lsrs	r3, r3, #1
 800c856:	3b01      	subs	r3, #1
 800c858:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d109      	bne.n	800c872 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c868:	085b      	lsrs	r3, r3, #1
 800c86a:	3b01      	subs	r3, #1
 800c86c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c86e:	429a      	cmp	r2, r3
 800c870:	d001      	beq.n	800c876 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3720      	adds	r7, #32
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	40021000 	.word	0x40021000
 800c884:	019f800c 	.word	0x019f800c
 800c888:	feeefffc 	.word	0xfeeefffc

0800c88c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
 800c894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c896:	2300      	movs	r3, #0
 800c898:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e11e      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8a4:	4b91      	ldr	r3, [pc, #580]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 030f 	and.w	r3, r3, #15
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d910      	bls.n	800c8d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8b2:	4b8e      	ldr	r3, [pc, #568]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f023 020f 	bic.w	r2, r3, #15
 800c8ba:	498c      	ldr	r1, [pc, #560]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8c2:	4b8a      	ldr	r3, [pc, #552]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 030f 	and.w	r3, r3, #15
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d001      	beq.n	800c8d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e106      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d073      	beq.n	800c9c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d129      	bne.n	800c93c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8e8:	4b81      	ldr	r3, [pc, #516]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e0f4      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c8f8:	f000 f99e 	bl	800cc38 <RCC_GetSysClockFreqFromPLLSource>
 800c8fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	4a7c      	ldr	r2, [pc, #496]	; (800caf4 <HAL_RCC_ClockConfig+0x268>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d93f      	bls.n	800c986 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c906:	4b7a      	ldr	r3, [pc, #488]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d009      	beq.n	800c926 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d033      	beq.n	800c986 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c922:	2b00      	cmp	r3, #0
 800c924:	d12f      	bne.n	800c986 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c926:	4b72      	ldr	r3, [pc, #456]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c92e:	4a70      	ldr	r2, [pc, #448]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c936:	2380      	movs	r3, #128	; 0x80
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	e024      	b.n	800c986 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b02      	cmp	r3, #2
 800c942:	d107      	bne.n	800c954 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c944:	4b6a      	ldr	r3, [pc, #424]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d109      	bne.n	800c964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e0c6      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c954:	4b66      	ldr	r3, [pc, #408]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e0be      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c964:	f000 f8ce 	bl	800cb04 <HAL_RCC_GetSysClockFreq>
 800c968:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	4a61      	ldr	r2, [pc, #388]	; (800caf4 <HAL_RCC_ClockConfig+0x268>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d909      	bls.n	800c986 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c972:	4b5f      	ldr	r3, [pc, #380]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c97a:	4a5d      	ldr	r2, [pc, #372]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c982:	2380      	movs	r3, #128	; 0x80
 800c984:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c986:	4b5a      	ldr	r3, [pc, #360]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	f023 0203 	bic.w	r2, r3, #3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	4957      	ldr	r1, [pc, #348]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c994:	4313      	orrs	r3, r2
 800c996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c998:	f7f9 ffc2 	bl	8006920 <HAL_GetTick>
 800c99c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c99e:	e00a      	b.n	800c9b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9a0:	f7f9 ffbe 	bl	8006920 <HAL_GetTick>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e095      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9b6:	4b4e      	ldr	r3, [pc, #312]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f003 020c 	and.w	r2, r3, #12
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d1eb      	bne.n	800c9a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f003 0302 	and.w	r3, r3, #2
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d023      	beq.n	800ca1c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d005      	beq.n	800c9ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9e0:	4b43      	ldr	r3, [pc, #268]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4a42      	ldr	r2, [pc, #264]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c9e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800c9ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 0308 	and.w	r3, r3, #8
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d007      	beq.n	800ca08 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800c9f8:	4b3d      	ldr	r3, [pc, #244]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca00:	4a3b      	ldr	r2, [pc, #236]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca08:	4b39      	ldr	r3, [pc, #228]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	4936      	ldr	r1, [pc, #216]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca16:	4313      	orrs	r3, r2
 800ca18:	608b      	str	r3, [r1, #8]
 800ca1a:	e008      	b.n	800ca2e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	2b80      	cmp	r3, #128	; 0x80
 800ca20:	d105      	bne.n	800ca2e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ca22:	4b33      	ldr	r3, [pc, #204]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	4a32      	ldr	r2, [pc, #200]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca2c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca2e:	4b2f      	ldr	r3, [pc, #188]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 030f 	and.w	r3, r3, #15
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d21d      	bcs.n	800ca78 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca3c:	4b2b      	ldr	r3, [pc, #172]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f023 020f 	bic.w	r2, r3, #15
 800ca44:	4929      	ldr	r1, [pc, #164]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ca4c:	f7f9 ff68 	bl	8006920 <HAL_GetTick>
 800ca50:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca52:	e00a      	b.n	800ca6a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca54:	f7f9 ff64 	bl	8006920 <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d901      	bls.n	800ca6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e03b      	b.n	800cae2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca6a:	4b20      	ldr	r3, [pc, #128]	; (800caec <HAL_RCC_ClockConfig+0x260>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 030f 	and.w	r3, r3, #15
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d1ed      	bne.n	800ca54 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 0304 	and.w	r3, r3, #4
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d008      	beq.n	800ca96 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca84:	4b1a      	ldr	r3, [pc, #104]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	4917      	ldr	r1, [pc, #92]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800ca92:	4313      	orrs	r3, r2
 800ca94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0308 	and.w	r3, r3, #8
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d009      	beq.n	800cab6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800caa2:	4b13      	ldr	r3, [pc, #76]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	490f      	ldr	r1, [pc, #60]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cab6:	f000 f825 	bl	800cb04 <HAL_RCC_GetSysClockFreq>
 800caba:	4602      	mov	r2, r0
 800cabc:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <HAL_RCC_ClockConfig+0x264>)
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	091b      	lsrs	r3, r3, #4
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	490c      	ldr	r1, [pc, #48]	; (800caf8 <HAL_RCC_ClockConfig+0x26c>)
 800cac8:	5ccb      	ldrb	r3, [r1, r3]
 800caca:	f003 031f 	and.w	r3, r3, #31
 800cace:	fa22 f303 	lsr.w	r3, r2, r3
 800cad2:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <HAL_RCC_ClockConfig+0x270>)
 800cad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cad6:	4b0a      	ldr	r3, [pc, #40]	; (800cb00 <HAL_RCC_ClockConfig+0x274>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4618      	mov	r0, r3
 800cadc:	f7f9 fed4 	bl	8006888 <HAL_InitTick>
 800cae0:	4603      	mov	r3, r0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	40022000 	.word	0x40022000
 800caf0:	40021000 	.word	0x40021000
 800caf4:	04c4b400 	.word	0x04c4b400
 800caf8:	0801b6cc 	.word	0x0801b6cc
 800cafc:	200001e0 	.word	0x200001e0
 800cb00:	200001f4 	.word	0x200001f4

0800cb04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b087      	sub	sp, #28
 800cb08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cb0a:	4b2c      	ldr	r3, [pc, #176]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	f003 030c 	and.w	r3, r3, #12
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	d102      	bne.n	800cb1c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb16:	4b2a      	ldr	r3, [pc, #168]	; (800cbc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb18:	613b      	str	r3, [r7, #16]
 800cb1a:	e047      	b.n	800cbac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cb1c:	4b27      	ldr	r3, [pc, #156]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f003 030c 	and.w	r3, r3, #12
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d102      	bne.n	800cb2e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb28:	4b26      	ldr	r3, [pc, #152]	; (800cbc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb2a:	613b      	str	r3, [r7, #16]
 800cb2c:	e03e      	b.n	800cbac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cb2e:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	f003 030c 	and.w	r3, r3, #12
 800cb36:	2b0c      	cmp	r3, #12
 800cb38:	d136      	bne.n	800cba8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb3a:	4b20      	ldr	r3, [pc, #128]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb44:	4b1d      	ldr	r3, [pc, #116]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	091b      	lsrs	r3, r3, #4
 800cb4a:	f003 030f 	and.w	r3, r3, #15
 800cb4e:	3301      	adds	r3, #1
 800cb50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	d10c      	bne.n	800cb72 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb58:	4a1a      	ldr	r2, [pc, #104]	; (800cbc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb60:	4a16      	ldr	r2, [pc, #88]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb62:	68d2      	ldr	r2, [r2, #12]
 800cb64:	0a12      	lsrs	r2, r2, #8
 800cb66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	617b      	str	r3, [r7, #20]
      break;
 800cb70:	e00c      	b.n	800cb8c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb72:	4a13      	ldr	r2, [pc, #76]	; (800cbc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb7a:	4a10      	ldr	r2, [pc, #64]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb7c:	68d2      	ldr	r2, [r2, #12]
 800cb7e:	0a12      	lsrs	r2, r2, #8
 800cb80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cb84:	fb02 f303 	mul.w	r3, r2, r3
 800cb88:	617b      	str	r3, [r7, #20]
      break;
 800cb8a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cb8c:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb8e:	68db      	ldr	r3, [r3, #12]
 800cb90:	0e5b      	lsrs	r3, r3, #25
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	3301      	adds	r3, #1
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cba4:	613b      	str	r3, [r7, #16]
 800cba6:	e001      	b.n	800cbac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cbac:	693b      	ldr	r3, [r7, #16]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	371c      	adds	r7, #28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	40021000 	.word	0x40021000
 800cbc0:	00f42400 	.word	0x00f42400
 800cbc4:	007a1200 	.word	0x007a1200

0800cbc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbcc:	4b03      	ldr	r3, [pc, #12]	; (800cbdc <HAL_RCC_GetHCLKFreq+0x14>)
 800cbce:	681b      	ldr	r3, [r3, #0]
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	200001e0 	.word	0x200001e0

0800cbe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cbe4:	f7ff fff0 	bl	800cbc8 <HAL_RCC_GetHCLKFreq>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	4b06      	ldr	r3, [pc, #24]	; (800cc04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbec:	689b      	ldr	r3, [r3, #8]
 800cbee:	0a1b      	lsrs	r3, r3, #8
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	4904      	ldr	r1, [pc, #16]	; (800cc08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbf6:	5ccb      	ldrb	r3, [r1, r3]
 800cbf8:	f003 031f 	and.w	r3, r3, #31
 800cbfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	40021000 	.word	0x40021000
 800cc08:	0801b6dc 	.word	0x0801b6dc

0800cc0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cc10:	f7ff ffda 	bl	800cbc8 <HAL_RCC_GetHCLKFreq>
 800cc14:	4602      	mov	r2, r0
 800cc16:	4b06      	ldr	r3, [pc, #24]	; (800cc30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	0adb      	lsrs	r3, r3, #11
 800cc1c:	f003 0307 	and.w	r3, r3, #7
 800cc20:	4904      	ldr	r1, [pc, #16]	; (800cc34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc22:	5ccb      	ldrb	r3, [r1, r3]
 800cc24:	f003 031f 	and.w	r3, r3, #31
 800cc28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	40021000 	.word	0x40021000
 800cc34:	0801b6dc 	.word	0x0801b6dc

0800cc38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc3e:	4b1e      	ldr	r3, [pc, #120]	; (800ccb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	f003 0303 	and.w	r3, r3, #3
 800cc46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cc48:	4b1b      	ldr	r3, [pc, #108]	; (800ccb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	091b      	lsrs	r3, r3, #4
 800cc4e:	f003 030f 	and.w	r3, r3, #15
 800cc52:	3301      	adds	r3, #1
 800cc54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d10c      	bne.n	800cc76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc5c:	4a17      	ldr	r2, [pc, #92]	; (800ccbc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc64:	4a14      	ldr	r2, [pc, #80]	; (800ccb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc66:	68d2      	ldr	r2, [r2, #12]
 800cc68:	0a12      	lsrs	r2, r2, #8
 800cc6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc6e:	fb02 f303 	mul.w	r3, r2, r3
 800cc72:	617b      	str	r3, [r7, #20]
    break;
 800cc74:	e00c      	b.n	800cc90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc76:	4a12      	ldr	r2, [pc, #72]	; (800ccc0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc7e:	4a0e      	ldr	r2, [pc, #56]	; (800ccb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc80:	68d2      	ldr	r2, [r2, #12]
 800cc82:	0a12      	lsrs	r2, r2, #8
 800cc84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc88:	fb02 f303 	mul.w	r3, r2, r3
 800cc8c:	617b      	str	r3, [r7, #20]
    break;
 800cc8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cc90:	4b09      	ldr	r3, [pc, #36]	; (800ccb8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	0e5b      	lsrs	r3, r3, #25
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cca0:	697a      	ldr	r2, [r7, #20]
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cca8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ccaa:	687b      	ldr	r3, [r7, #4]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	371c      	adds	r7, #28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr
 800ccb8:	40021000 	.word	0x40021000
 800ccbc:	007a1200 	.word	0x007a1200
 800ccc0:	00f42400 	.word	0x00f42400

0800ccc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cccc:	2300      	movs	r3, #0
 800ccce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f000 8098 	beq.w	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cce2:	2300      	movs	r3, #0
 800cce4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cce6:	4b43      	ldr	r3, [pc, #268]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10d      	bne.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccf2:	4b40      	ldr	r3, [pc, #256]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccf6:	4a3f      	ldr	r2, [pc, #252]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccfc:	6593      	str	r3, [r2, #88]	; 0x58
 800ccfe:	4b3d      	ldr	r3, [pc, #244]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd06:	60bb      	str	r3, [r7, #8]
 800cd08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd0e:	4b3a      	ldr	r3, [pc, #232]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a39      	ldr	r2, [pc, #228]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd1a:	f7f9 fe01 	bl	8006920 <HAL_GetTick>
 800cd1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd20:	e009      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd22:	f7f9 fdfd 	bl	8006920 <HAL_GetTick>
 800cd26:	4602      	mov	r2, r0
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d902      	bls.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	74fb      	strb	r3, [r7, #19]
        break;
 800cd34:	e005      	b.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd36:	4b30      	ldr	r3, [pc, #192]	; (800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0ef      	beq.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cd42:	7cfb      	ldrb	r3, [r7, #19]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d159      	bne.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd48:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d01e      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	697a      	ldr	r2, [r7, #20]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d019      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd64:	4b23      	ldr	r3, [pc, #140]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd70:	4b20      	ldr	r3, [pc, #128]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd76:	4a1f      	ldr	r2, [pc, #124]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd80:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd86:	4a1b      	ldr	r2, [pc, #108]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cd90:	4a18      	ldr	r2, [pc, #96]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d016      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cda2:	f7f9 fdbd 	bl	8006920 <HAL_GetTick>
 800cda6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cda8:	e00b      	b.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdaa:	f7f9 fdb9 	bl	8006920 <HAL_GetTick>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d902      	bls.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	74fb      	strb	r3, [r7, #19]
            break;
 800cdc0:	e006      	b.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdc2:	4b0c      	ldr	r3, [pc, #48]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc8:	f003 0302 	and.w	r3, r3, #2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0ec      	beq.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cdd0:	7cfb      	ldrb	r3, [r7, #19]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10b      	bne.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde4:	4903      	ldr	r1, [pc, #12]	; (800cdf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800cdec:	e008      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdee:	7cfb      	ldrb	r3, [r7, #19]
 800cdf0:	74bb      	strb	r3, [r7, #18]
 800cdf2:	e005      	b.n	800ce00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cdf4:	40021000 	.word	0x40021000
 800cdf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdfc:	7cfb      	ldrb	r3, [r7, #19]
 800cdfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce00:	7c7b      	ldrb	r3, [r7, #17]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d105      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce06:	4ba6      	ldr	r3, [pc, #664]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce0a:	4aa5      	ldr	r2, [pc, #660]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce1e:	4ba0      	ldr	r3, [pc, #640]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce24:	f023 0203 	bic.w	r2, r3, #3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	499c      	ldr	r1, [pc, #624]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00a      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce40:	4b97      	ldr	r3, [pc, #604]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce46:	f023 020c 	bic.w	r2, r3, #12
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	4994      	ldr	r1, [pc, #592]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce50:	4313      	orrs	r3, r2
 800ce52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f003 0304 	and.w	r3, r3, #4
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce62:	4b8f      	ldr	r3, [pc, #572]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	498b      	ldr	r1, [pc, #556]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0308 	and.w	r3, r3, #8
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00a      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce84:	4b86      	ldr	r3, [pc, #536]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	4983      	ldr	r1, [pc, #524]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ce94:	4313      	orrs	r3, r2
 800ce96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0320 	and.w	r3, r3, #32
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cea6:	4b7e      	ldr	r3, [pc, #504]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	497a      	ldr	r1, [pc, #488]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cec8:	4b75      	ldr	r3, [pc, #468]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ceca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cece:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	699b      	ldr	r3, [r3, #24]
 800ced6:	4972      	ldr	r1, [pc, #456]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ceea:	4b6d      	ldr	r3, [pc, #436]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ceec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	69db      	ldr	r3, [r3, #28]
 800cef8:	4969      	ldr	r1, [pc, #420]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cefa:	4313      	orrs	r3, r2
 800cefc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00a      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf0c:	4b64      	ldr	r3, [pc, #400]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	4961      	ldr	r1, [pc, #388]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf2e:	4b5c      	ldr	r3, [pc, #368]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3c:	4958      	ldr	r1, [pc, #352]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d015      	beq.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf50:	4b53      	ldr	r3, [pc, #332]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf5e:	4950      	ldr	r1, [pc, #320]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf6e:	d105      	bne.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cf70:	4b4b      	ldr	r3, [pc, #300]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	4a4a      	ldr	r2, [pc, #296]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d015      	beq.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cf88:	4b45      	ldr	r3, [pc, #276]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf96:	4942      	ldr	r1, [pc, #264]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfa6:	d105      	bne.n	800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfa8:	4b3d      	ldr	r3, [pc, #244]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	4a3c      	ldr	r2, [pc, #240]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d015      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cfc0:	4b37      	ldr	r3, [pc, #220]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	4934      	ldr	r1, [pc, #208]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cfde:	d105      	bne.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfe0:	4b2f      	ldr	r3, [pc, #188]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	4a2e      	ldr	r2, [pc, #184]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cfe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d015      	beq.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cff8:	4b29      	ldr	r3, [pc, #164]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800cffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d006:	4926      	ldr	r1, [pc, #152]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d016:	d105      	bne.n	800d024 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d018:	4b21      	ldr	r3, [pc, #132]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	4a20      	ldr	r2, [pc, #128]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d01e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d022:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d015      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d030:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	4918      	ldr	r1, [pc, #96]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d040:	4313      	orrs	r3, r2
 800d042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d04e:	d105      	bne.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d050:	4b13      	ldr	r3, [pc, #76]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d05a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d064:	2b00      	cmp	r3, #0
 800d066:	d015      	beq.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d068:	4b0d      	ldr	r3, [pc, #52]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d06e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d076:	490a      	ldr	r1, [pc, #40]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d078:	4313      	orrs	r3, r2
 800d07a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d086:	d105      	bne.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d088:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d08e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d094:	7cbb      	ldrb	r3, [r7, #18]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3718      	adds	r7, #24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	40021000 	.word	0x40021000

0800d0a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d101      	bne.n	800d0b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e09d      	b.n	800d1f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d108      	bne.n	800d0d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0c6:	d009      	beq.n	800d0dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	61da      	str	r2, [r3, #28]
 800d0ce:	e005      	b.n	800d0dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d106      	bne.n	800d0fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7f8 fb70 	bl	80057dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2202      	movs	r2, #2
 800d100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d112:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d11c:	d902      	bls.n	800d124 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d11e:	2300      	movs	r3, #0
 800d120:	60fb      	str	r3, [r7, #12]
 800d122:	e002      	b.n	800d12a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d128:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d132:	d007      	beq.n	800d144 <HAL_SPI_Init+0xa0>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d13c:	d002      	beq.n	800d144 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d154:	431a      	orrs	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	431a      	orrs	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	431a      	orrs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	699b      	ldr	r3, [r3, #24]
 800d16e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d172:	431a      	orrs	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d17c:	431a      	orrs	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d186:	ea42 0103 	orr.w	r1, r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	430a      	orrs	r2, r1
 800d198:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	699b      	ldr	r3, [r3, #24]
 800d19e:	0c1b      	lsrs	r3, r3, #16
 800d1a0:	f003 0204 	and.w	r2, r3, #4
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a8:	f003 0310 	and.w	r3, r3, #16
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b2:	f003 0308 	and.w	r3, r3, #8
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d1c0:	ea42 0103 	orr.w	r1, r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	430a      	orrs	r2, r1
 800d1d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	69da      	ldr	r2, [r3, #28]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b088      	sub	sp, #32
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	603b      	str	r3, [r7, #0]
 800d206:	4613      	mov	r3, r2
 800d208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d214:	2b01      	cmp	r3, #1
 800d216:	d101      	bne.n	800d21c <HAL_SPI_Transmit+0x22>
 800d218:	2302      	movs	r3, #2
 800d21a:	e15f      	b.n	800d4dc <HAL_SPI_Transmit+0x2e2>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d224:	f7f9 fb7c 	bl	8006920 <HAL_GetTick>
 800d228:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b01      	cmp	r3, #1
 800d238:	d002      	beq.n	800d240 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d23a:	2302      	movs	r3, #2
 800d23c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d23e:	e148      	b.n	800d4d2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <HAL_SPI_Transmit+0x52>
 800d246:	88fb      	ldrh	r3, [r7, #6]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d102      	bne.n	800d252 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d250:	e13f      	b.n	800d4d2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2203      	movs	r2, #3
 800d256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2200      	movs	r2, #0
 800d25e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	88fa      	ldrh	r2, [r7, #6]
 800d26a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	88fa      	ldrh	r2, [r7, #6]
 800d270:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d29c:	d10f      	bne.n	800d2be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c8:	2b40      	cmp	r3, #64	; 0x40
 800d2ca:	d007      	beq.n	800d2dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d2e4:	d94f      	bls.n	800d386 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d002      	beq.n	800d2f4 <HAL_SPI_Transmit+0xfa>
 800d2ee:	8afb      	ldrh	r3, [r7, #22]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d142      	bne.n	800d37a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f8:	881a      	ldrh	r2, [r3, #0]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d304:	1c9a      	adds	r2, r3, #2
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d30e:	b29b      	uxth	r3, r3
 800d310:	3b01      	subs	r3, #1
 800d312:	b29a      	uxth	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d318:	e02f      	b.n	800d37a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b02      	cmp	r3, #2
 800d326:	d112      	bne.n	800d34e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32c:	881a      	ldrh	r2, [r3, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	1c9a      	adds	r2, r3, #2
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d342:	b29b      	uxth	r3, r3
 800d344:	3b01      	subs	r3, #1
 800d346:	b29a      	uxth	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d34c:	e015      	b.n	800d37a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d34e:	f7f9 fae7 	bl	8006920 <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d803      	bhi.n	800d366 <HAL_SPI_Transmit+0x16c>
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d364:	d102      	bne.n	800d36c <HAL_SPI_Transmit+0x172>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d106      	bne.n	800d37a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800d378:	e0ab      	b.n	800d4d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d37e:	b29b      	uxth	r3, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1ca      	bne.n	800d31a <HAL_SPI_Transmit+0x120>
 800d384:	e080      	b.n	800d488 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <HAL_SPI_Transmit+0x19a>
 800d38e:	8afb      	ldrh	r3, [r7, #22]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d174      	bne.n	800d47e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d398:	b29b      	uxth	r3, r3
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d912      	bls.n	800d3c4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	881a      	ldrh	r2, [r3, #0]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	1c9a      	adds	r2, r3, #2
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	3b02      	subs	r3, #2
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d3c2:	e05c      	b.n	800d47e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	330c      	adds	r3, #12
 800d3ce:	7812      	ldrb	r2, [r2, #0]
 800d3d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d3ea:	e048      	b.n	800d47e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f003 0302 	and.w	r3, r3, #2
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d12b      	bne.n	800d452 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	2b01      	cmp	r3, #1
 800d402:	d912      	bls.n	800d42a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	881a      	ldrh	r2, [r3, #0]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d414:	1c9a      	adds	r2, r3, #2
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d41e:	b29b      	uxth	r3, r3
 800d420:	3b02      	subs	r3, #2
 800d422:	b29a      	uxth	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d428:	e029      	b.n	800d47e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	330c      	adds	r3, #12
 800d434:	7812      	ldrb	r2, [r2, #0]
 800d436:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d446:	b29b      	uxth	r3, r3
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d450:	e015      	b.n	800d47e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d452:	f7f9 fa65 	bl	8006920 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	683a      	ldr	r2, [r7, #0]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d803      	bhi.n	800d46a <HAL_SPI_Transmit+0x270>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d468:	d102      	bne.n	800d470 <HAL_SPI_Transmit+0x276>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d106      	bne.n	800d47e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800d470:	2303      	movs	r3, #3
 800d472:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2201      	movs	r2, #1
 800d478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800d47c:	e029      	b.n	800d4d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d482:	b29b      	uxth	r3, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1b1      	bne.n	800d3ec <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d488:	69ba      	ldr	r2, [r7, #24]
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f000 fad7 	bl	800da40 <SPI_EndRxTxTransaction>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2220      	movs	r2, #32
 800d49c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	613b      	str	r3, [r7, #16]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	613b      	str	r3, [r7, #16]
 800d4ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	77fb      	strb	r3, [r7, #31]
 800d4c8:	e003      	b.n	800d4d2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d4da:	7ffb      	ldrb	r3, [r7, #31]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d101      	bne.n	800d504 <HAL_SPI_Transmit_DMA+0x20>
 800d500:	2302      	movs	r3, #2
 800d502:	e0d4      	b.n	800d6ae <HAL_SPI_Transmit_DMA+0x1ca>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2201      	movs	r2, #1
 800d508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d512:	b2db      	uxtb	r3, r3
 800d514:	2b01      	cmp	r3, #1
 800d516:	d002      	beq.n	800d51e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800d518:	2302      	movs	r3, #2
 800d51a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d51c:	e0c2      	b.n	800d6a4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <HAL_SPI_Transmit_DMA+0x46>
 800d524:	88fb      	ldrh	r3, [r7, #6]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d102      	bne.n	800d530 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d52e:	e0b9      	b.n	800d6a4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2203      	movs	r2, #3
 800d534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	88fa      	ldrh	r2, [r7, #6]
 800d548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	88fa      	ldrh	r2, [r7, #6]
 800d54e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2200      	movs	r2, #0
 800d554:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	689b      	ldr	r3, [r3, #8]
 800d576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d57a:	d10f      	bne.n	800d59c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d58a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d59a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a0:	4a45      	ldr	r2, [pc, #276]	; (800d6b8 <HAL_SPI_Transmit_DMA+0x1d4>)
 800d5a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a8:	4a44      	ldr	r2, [pc, #272]	; (800d6bc <HAL_SPI_Transmit_DMA+0x1d8>)
 800d5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b0:	4a43      	ldr	r2, [pc, #268]	; (800d6c0 <HAL_SPI_Transmit_DMA+0x1dc>)
 800d5b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685a      	ldr	r2, [r3, #4]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5ca:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d5d4:	d82d      	bhi.n	800d632 <HAL_SPI_Transmit_DMA+0x14e>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5da:	699b      	ldr	r3, [r3, #24]
 800d5dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5e0:	d127      	bne.n	800d632 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10f      	bne.n	800d610 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d5fe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d604:	b29b      	uxth	r3, r3
 800d606:	085b      	lsrs	r3, r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d60e:	e010      	b.n	800d632 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d61e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d624:	b29b      	uxth	r3, r3
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3301      	adds	r3, #1
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d63a:	4619      	mov	r1, r3
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	330c      	adds	r3, #12
 800d642:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d648:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d64a:	f7fc f87b 	bl	8009744 <HAL_DMA_Start_IT>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d008      	beq.n	800d666 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d658:	f043 0210 	orr.w	r2, r3, #16
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	75fb      	strb	r3, [r7, #23]

    goto error;
 800d664:	e01e      	b.n	800d6a4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d670:	2b40      	cmp	r3, #64	; 0x40
 800d672:	d007      	beq.n	800d684 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d682:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	685a      	ldr	r2, [r3, #4]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f042 0220 	orr.w	r2, r2, #32
 800d692:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685a      	ldr	r2, [r3, #4]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f042 0202 	orr.w	r2, r2, #2
 800d6a2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3718      	adds	r7, #24
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	0800d7a7 	.word	0x0800d7a7
 800d6bc:	0800d701 	.word	0x0800d701
 800d6c0:	0800d7c3 	.word	0x0800d7c3

0800d6c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d70e:	f7f9 f907 	bl	8006920 <HAL_GetTick>
 800d712:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f003 0320 	and.w	r3, r3, #32
 800d71e:	2b20      	cmp	r3, #32
 800d720:	d03b      	beq.n	800d79a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 0220 	bic.w	r2, r2, #32
 800d730:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f022 0202 	bic.w	r2, r2, #2
 800d740:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d742:	693a      	ldr	r2, [r7, #16]
 800d744:	2164      	movs	r1, #100	; 0x64
 800d746:	6978      	ldr	r0, [r7, #20]
 800d748:	f000 f97a 	bl	800da40 <SPI_EndRxTxTransaction>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d005      	beq.n	800d75e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d756:	f043 0220 	orr.w	r2, r3, #32
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10a      	bne.n	800d77c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d766:	2300      	movs	r3, #0
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2200      	movs	r2, #0
 800d780:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2201      	movs	r2, #1
 800d786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d792:	6978      	ldr	r0, [r7, #20]
 800d794:	f7ff ffaa 	bl	800d6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d798:	e002      	b.n	800d7a0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800d79a:	6978      	ldr	r0, [r7, #20]
 800d79c:	f7ff ff92 	bl	800d6c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7ff ff8f 	bl	800d6d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d7ba:	bf00      	nop
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b084      	sub	sp, #16
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ce:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f022 0203 	bic.w	r2, r2, #3
 800d7de:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7e4:	f043 0210 	orr.w	r2, r3, #16
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff ff79 	bl	800d6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d7fa:	bf00      	nop
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d814:	f7f9 f884 	bl	8006920 <HAL_GetTick>
 800d818:	4602      	mov	r2, r0
 800d81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81c:	1a9b      	subs	r3, r3, r2
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	4413      	add	r3, r2
 800d822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d824:	f7f9 f87c 	bl	8006920 <HAL_GetTick>
 800d828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d82a:	4b39      	ldr	r3, [pc, #228]	; (800d910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	015b      	lsls	r3, r3, #5
 800d830:	0d1b      	lsrs	r3, r3, #20
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	fb02 f303 	mul.w	r3, r2, r3
 800d838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d83a:	e054      	b.n	800d8e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d050      	beq.n	800d8e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d844:	f7f9 f86c 	bl	8006920 <HAL_GetTick>
 800d848:	4602      	mov	r2, r0
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	429a      	cmp	r2, r3
 800d852:	d902      	bls.n	800d85a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d13d      	bne.n	800d8d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d872:	d111      	bne.n	800d898 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d87c:	d004      	beq.n	800d888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d886:	d107      	bne.n	800d898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8a0:	d10f      	bne.n	800d8c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8b0:	601a      	str	r2, [r3, #0]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d8c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e017      	b.n	800d906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	bf0c      	ite	eq
 800d8f6:	2301      	moveq	r3, #1
 800d8f8:	2300      	movne	r3, #0
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	79fb      	ldrb	r3, [r7, #7]
 800d900:	429a      	cmp	r2, r3
 800d902:	d19b      	bne.n	800d83c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3720      	adds	r7, #32
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	200001e0 	.word	0x200001e0

0800d914 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08a      	sub	sp, #40	; 0x28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
 800d920:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d926:	f7f8 fffb 	bl	8006920 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	4413      	add	r3, r2
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d936:	f7f8 fff3 	bl	8006920 <HAL_GetTick>
 800d93a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	330c      	adds	r3, #12
 800d942:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d944:	4b3d      	ldr	r3, [pc, #244]	; (800da3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	4613      	mov	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	00da      	lsls	r2, r3, #3
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	0d1b      	lsrs	r3, r3, #20
 800d954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d956:	fb02 f303 	mul.w	r3, r2, r3
 800d95a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d95c:	e060      	b.n	800da20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d964:	d107      	bne.n	800d976 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d104      	bne.n	800d976 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d974:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d97c:	d050      	beq.n	800da20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d97e:	f7f8 ffcf 	bl	8006920 <HAL_GetTick>
 800d982:	4602      	mov	r2, r0
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d902      	bls.n	800d994 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	2b00      	cmp	r3, #0
 800d992:	d13d      	bne.n	800da10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d9a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9ac:	d111      	bne.n	800d9d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9b6:	d004      	beq.n	800d9c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9c0:	d107      	bne.n	800d9d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	681a      	ldr	r2, [r3, #0]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9da:	d10f      	bne.n	800d9fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d9fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800da0c:	2303      	movs	r3, #3
 800da0e:	e010      	b.n	800da32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800da16:	2300      	movs	r3, #0
 800da18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689a      	ldr	r2, [r3, #8]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	4013      	ands	r3, r2
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d196      	bne.n	800d95e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3728      	adds	r7, #40	; 0x28
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	200001e0 	.word	0x200001e0

0800da40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af02      	add	r7, sp, #8
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2200      	movs	r2, #0
 800da54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff ff5b 	bl	800d914 <SPI_WaitFifoStateUntilTimeout>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d007      	beq.n	800da74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da68:	f043 0220 	orr.w	r2, r3, #32
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800da70:	2303      	movs	r3, #3
 800da72:	e027      	b.n	800dac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2200      	movs	r2, #0
 800da7c:	2180      	movs	r1, #128	; 0x80
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f7ff fec0 	bl	800d804 <SPI_WaitFlagStateUntilTimeout>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d007      	beq.n	800da9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da8e:	f043 0220 	orr.w	r2, r3, #32
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e014      	b.n	800dac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f7ff ff34 	bl	800d914 <SPI_WaitFifoStateUntilTimeout>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d007      	beq.n	800dac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dab6:	f043 0220 	orr.w	r2, r3, #32
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800dabe:	2303      	movs	r3, #3
 800dac0:	e000      	b.n	800dac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e049      	b.n	800db72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d106      	bne.n	800daf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7f7 ff94 	bl	8005a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3304      	adds	r3, #4
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f000 ff72 	bl	800e9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2201      	movs	r2, #1
 800db14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d001      	beq.n	800db94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db90:	2301      	movs	r3, #1
 800db92:	e04a      	b.n	800dc2a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2202      	movs	r2, #2
 800db98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	68da      	ldr	r2, [r3, #12]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f042 0201 	orr.w	r2, r2, #1
 800dbaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a21      	ldr	r2, [pc, #132]	; (800dc38 <HAL_TIM_Base_Start_IT+0xbc>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d018      	beq.n	800dbe8 <HAL_TIM_Base_Start_IT+0x6c>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbbe:	d013      	beq.n	800dbe8 <HAL_TIM_Base_Start_IT+0x6c>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a1d      	ldr	r2, [pc, #116]	; (800dc3c <HAL_TIM_Base_Start_IT+0xc0>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d00e      	beq.n	800dbe8 <HAL_TIM_Base_Start_IT+0x6c>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a1c      	ldr	r2, [pc, #112]	; (800dc40 <HAL_TIM_Base_Start_IT+0xc4>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d009      	beq.n	800dbe8 <HAL_TIM_Base_Start_IT+0x6c>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a1a      	ldr	r2, [pc, #104]	; (800dc44 <HAL_TIM_Base_Start_IT+0xc8>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d004      	beq.n	800dbe8 <HAL_TIM_Base_Start_IT+0x6c>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4a19      	ldr	r2, [pc, #100]	; (800dc48 <HAL_TIM_Base_Start_IT+0xcc>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d115      	bne.n	800dc14 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	689a      	ldr	r2, [r3, #8]
 800dbee:	4b17      	ldr	r3, [pc, #92]	; (800dc4c <HAL_TIM_Base_Start_IT+0xd0>)
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b06      	cmp	r3, #6
 800dbf8:	d015      	beq.n	800dc26 <HAL_TIM_Base_Start_IT+0xaa>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc00:	d011      	beq.n	800dc26 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f042 0201 	orr.w	r2, r2, #1
 800dc10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc12:	e008      	b.n	800dc26 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f042 0201 	orr.w	r2, r2, #1
 800dc22:	601a      	str	r2, [r3, #0]
 800dc24:	e000      	b.n	800dc28 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	40012c00 	.word	0x40012c00
 800dc3c:	40000400 	.word	0x40000400
 800dc40:	40000800 	.word	0x40000800
 800dc44:	40013400 	.word	0x40013400
 800dc48:	40014000 	.word	0x40014000
 800dc4c:	00010007 	.word	0x00010007

0800dc50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68da      	ldr	r2, [r3, #12]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f022 0201 	bic.w	r2, r2, #1
 800dc66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6a1a      	ldr	r2, [r3, #32]
 800dc6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc72:	4013      	ands	r3, r2
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10f      	bne.n	800dc98 <HAL_TIM_Base_Stop_IT+0x48>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6a1a      	ldr	r2, [r3, #32]
 800dc7e:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc82:	4013      	ands	r3, r2
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d107      	bne.n	800dc98 <HAL_TIM_Base_Stop_IT+0x48>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 0201 	bic.w	r2, r2, #1
 800dc96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b082      	sub	sp, #8
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d101      	bne.n	800dcc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e049      	b.n	800dd54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d106      	bne.n	800dcda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7f7 fdf3 	bl	80058c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2202      	movs	r2, #2
 800dcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	3304      	adds	r3, #4
 800dcea:	4619      	mov	r1, r3
 800dcec:	4610      	mov	r0, r2
 800dcee:	f000 fe81 	bl	800e9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2201      	movs	r2, #1
 800dd26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd52:	2300      	movs	r3, #0
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d109      	bne.n	800dd84 <HAL_TIM_PWM_Start_IT+0x28>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	bf14      	ite	ne
 800dd7c:	2301      	movne	r3, #1
 800dd7e:	2300      	moveq	r3, #0
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	e03c      	b.n	800ddfe <HAL_TIM_PWM_Start_IT+0xa2>
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d109      	bne.n	800dd9e <HAL_TIM_PWM_Start_IT+0x42>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	bf14      	ite	ne
 800dd96:	2301      	movne	r3, #1
 800dd98:	2300      	moveq	r3, #0
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	e02f      	b.n	800ddfe <HAL_TIM_PWM_Start_IT+0xa2>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b08      	cmp	r3, #8
 800dda2:	d109      	bne.n	800ddb8 <HAL_TIM_PWM_Start_IT+0x5c>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	bf14      	ite	ne
 800ddb0:	2301      	movne	r3, #1
 800ddb2:	2300      	moveq	r3, #0
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	e022      	b.n	800ddfe <HAL_TIM_PWM_Start_IT+0xa2>
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b0c      	cmp	r3, #12
 800ddbc:	d109      	bne.n	800ddd2 <HAL_TIM_PWM_Start_IT+0x76>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	bf14      	ite	ne
 800ddca:	2301      	movne	r3, #1
 800ddcc:	2300      	moveq	r3, #0
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	e015      	b.n	800ddfe <HAL_TIM_PWM_Start_IT+0xa2>
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	2b10      	cmp	r3, #16
 800ddd6:	d109      	bne.n	800ddec <HAL_TIM_PWM_Start_IT+0x90>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	bf14      	ite	ne
 800dde4:	2301      	movne	r3, #1
 800dde6:	2300      	moveq	r3, #0
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	e008      	b.n	800ddfe <HAL_TIM_PWM_Start_IT+0xa2>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	bf14      	ite	ne
 800ddf8:	2301      	movne	r3, #1
 800ddfa:	2300      	moveq	r3, #0
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e0e2      	b.n	800dfcc <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d104      	bne.n	800de16 <HAL_TIM_PWM_Start_IT+0xba>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2202      	movs	r2, #2
 800de10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de14:	e023      	b.n	800de5e <HAL_TIM_PWM_Start_IT+0x102>
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d104      	bne.n	800de26 <HAL_TIM_PWM_Start_IT+0xca>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de24:	e01b      	b.n	800de5e <HAL_TIM_PWM_Start_IT+0x102>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d104      	bne.n	800de36 <HAL_TIM_PWM_Start_IT+0xda>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2202      	movs	r2, #2
 800de30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de34:	e013      	b.n	800de5e <HAL_TIM_PWM_Start_IT+0x102>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b0c      	cmp	r3, #12
 800de3a:	d104      	bne.n	800de46 <HAL_TIM_PWM_Start_IT+0xea>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2202      	movs	r2, #2
 800de40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de44:	e00b      	b.n	800de5e <HAL_TIM_PWM_Start_IT+0x102>
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	2b10      	cmp	r3, #16
 800de4a:	d104      	bne.n	800de56 <HAL_TIM_PWM_Start_IT+0xfa>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2202      	movs	r2, #2
 800de50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de54:	e003      	b.n	800de5e <HAL_TIM_PWM_Start_IT+0x102>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2202      	movs	r2, #2
 800de5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b0c      	cmp	r3, #12
 800de62:	d841      	bhi.n	800dee8 <HAL_TIM_PWM_Start_IT+0x18c>
 800de64:	a201      	add	r2, pc, #4	; (adr r2, 800de6c <HAL_TIM_PWM_Start_IT+0x110>)
 800de66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6a:	bf00      	nop
 800de6c:	0800dea1 	.word	0x0800dea1
 800de70:	0800dee9 	.word	0x0800dee9
 800de74:	0800dee9 	.word	0x0800dee9
 800de78:	0800dee9 	.word	0x0800dee9
 800de7c:	0800deb3 	.word	0x0800deb3
 800de80:	0800dee9 	.word	0x0800dee9
 800de84:	0800dee9 	.word	0x0800dee9
 800de88:	0800dee9 	.word	0x0800dee9
 800de8c:	0800dec5 	.word	0x0800dec5
 800de90:	0800dee9 	.word	0x0800dee9
 800de94:	0800dee9 	.word	0x0800dee9
 800de98:	0800dee9 	.word	0x0800dee9
 800de9c:	0800ded7 	.word	0x0800ded7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68da      	ldr	r2, [r3, #12]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f042 0202 	orr.w	r2, r2, #2
 800deae:	60da      	str	r2, [r3, #12]
      break;
 800deb0:	e01d      	b.n	800deee <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68da      	ldr	r2, [r3, #12]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f042 0204 	orr.w	r2, r2, #4
 800dec0:	60da      	str	r2, [r3, #12]
      break;
 800dec2:	e014      	b.n	800deee <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68da      	ldr	r2, [r3, #12]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f042 0208 	orr.w	r2, r2, #8
 800ded2:	60da      	str	r2, [r3, #12]
      break;
 800ded4:	e00b      	b.n	800deee <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f042 0210 	orr.w	r2, r2, #16
 800dee4:	60da      	str	r2, [r3, #12]
      break;
 800dee6:	e002      	b.n	800deee <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	73fb      	strb	r3, [r7, #15]
      break;
 800deec:	bf00      	nop
  }

  if (status == HAL_OK)
 800deee:	7bfb      	ldrb	r3, [r7, #15]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d16a      	bne.n	800dfca <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2201      	movs	r2, #1
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	4618      	mov	r0, r3
 800defe:	f001 f90b 	bl	800f118 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4a33      	ldr	r2, [pc, #204]	; (800dfd4 <HAL_TIM_PWM_Start_IT+0x278>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d013      	beq.n	800df34 <HAL_TIM_PWM_Start_IT+0x1d8>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a31      	ldr	r2, [pc, #196]	; (800dfd8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d00e      	beq.n	800df34 <HAL_TIM_PWM_Start_IT+0x1d8>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a30      	ldr	r2, [pc, #192]	; (800dfdc <HAL_TIM_PWM_Start_IT+0x280>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d009      	beq.n	800df34 <HAL_TIM_PWM_Start_IT+0x1d8>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a2e      	ldr	r2, [pc, #184]	; (800dfe0 <HAL_TIM_PWM_Start_IT+0x284>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d004      	beq.n	800df34 <HAL_TIM_PWM_Start_IT+0x1d8>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a2d      	ldr	r2, [pc, #180]	; (800dfe4 <HAL_TIM_PWM_Start_IT+0x288>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d101      	bne.n	800df38 <HAL_TIM_PWM_Start_IT+0x1dc>
 800df34:	2301      	movs	r3, #1
 800df36:	e000      	b.n	800df3a <HAL_TIM_PWM_Start_IT+0x1de>
 800df38:	2300      	movs	r3, #0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d007      	beq.n	800df4e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800df4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a20      	ldr	r2, [pc, #128]	; (800dfd4 <HAL_TIM_PWM_Start_IT+0x278>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d018      	beq.n	800df8a <HAL_TIM_PWM_Start_IT+0x22e>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df60:	d013      	beq.n	800df8a <HAL_TIM_PWM_Start_IT+0x22e>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	4a20      	ldr	r2, [pc, #128]	; (800dfe8 <HAL_TIM_PWM_Start_IT+0x28c>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d00e      	beq.n	800df8a <HAL_TIM_PWM_Start_IT+0x22e>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a1e      	ldr	r2, [pc, #120]	; (800dfec <HAL_TIM_PWM_Start_IT+0x290>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d009      	beq.n	800df8a <HAL_TIM_PWM_Start_IT+0x22e>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a17      	ldr	r2, [pc, #92]	; (800dfd8 <HAL_TIM_PWM_Start_IT+0x27c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d004      	beq.n	800df8a <HAL_TIM_PWM_Start_IT+0x22e>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a15      	ldr	r2, [pc, #84]	; (800dfdc <HAL_TIM_PWM_Start_IT+0x280>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d115      	bne.n	800dfb6 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	689a      	ldr	r2, [r3, #8]
 800df90:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <HAL_TIM_PWM_Start_IT+0x294>)
 800df92:	4013      	ands	r3, r2
 800df94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	2b06      	cmp	r3, #6
 800df9a:	d015      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x26c>
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa2:	d011      	beq.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f042 0201 	orr.w	r2, r2, #1
 800dfb2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfb4:	e008      	b.n	800dfc8 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0201 	orr.w	r2, r2, #1
 800dfc4:	601a      	str	r2, [r3, #0]
 800dfc6:	e000      	b.n	800dfca <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfc8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	40012c00 	.word	0x40012c00
 800dfd8:	40013400 	.word	0x40013400
 800dfdc:	40014000 	.word	0x40014000
 800dfe0:	40014400 	.word	0x40014400
 800dfe4:	40014800 	.word	0x40014800
 800dfe8:	40000400 	.word	0x40000400
 800dfec:	40000800 	.word	0x40000800
 800dff0:	00010007 	.word	0x00010007

0800dff4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	2b0c      	cmp	r3, #12
 800e006:	d841      	bhi.n	800e08c <HAL_TIM_PWM_Stop_IT+0x98>
 800e008:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800e00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00e:	bf00      	nop
 800e010:	0800e045 	.word	0x0800e045
 800e014:	0800e08d 	.word	0x0800e08d
 800e018:	0800e08d 	.word	0x0800e08d
 800e01c:	0800e08d 	.word	0x0800e08d
 800e020:	0800e057 	.word	0x0800e057
 800e024:	0800e08d 	.word	0x0800e08d
 800e028:	0800e08d 	.word	0x0800e08d
 800e02c:	0800e08d 	.word	0x0800e08d
 800e030:	0800e069 	.word	0x0800e069
 800e034:	0800e08d 	.word	0x0800e08d
 800e038:	0800e08d 	.word	0x0800e08d
 800e03c:	0800e08d 	.word	0x0800e08d
 800e040:	0800e07b 	.word	0x0800e07b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68da      	ldr	r2, [r3, #12]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f022 0202 	bic.w	r2, r2, #2
 800e052:	60da      	str	r2, [r3, #12]
      break;
 800e054:	e01d      	b.n	800e092 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	68da      	ldr	r2, [r3, #12]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f022 0204 	bic.w	r2, r2, #4
 800e064:	60da      	str	r2, [r3, #12]
      break;
 800e066:	e014      	b.n	800e092 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68da      	ldr	r2, [r3, #12]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f022 0208 	bic.w	r2, r2, #8
 800e076:	60da      	str	r2, [r3, #12]
      break;
 800e078:	e00b      	b.n	800e092 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68da      	ldr	r2, [r3, #12]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f022 0210 	bic.w	r2, r2, #16
 800e088:	60da      	str	r2, [r3, #12]
      break;
 800e08a:	e002      	b.n	800e092 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	73fb      	strb	r3, [r7, #15]
      break;
 800e090:	bf00      	nop
  }

  if (status == HAL_OK)
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f040 8081 	bne.w	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f001 f838 	bl	800f118 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a3e      	ldr	r2, [pc, #248]	; (800e1a8 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d013      	beq.n	800e0da <HAL_TIM_PWM_Stop_IT+0xe6>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a3d      	ldr	r2, [pc, #244]	; (800e1ac <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d00e      	beq.n	800e0da <HAL_TIM_PWM_Stop_IT+0xe6>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a3b      	ldr	r2, [pc, #236]	; (800e1b0 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d009      	beq.n	800e0da <HAL_TIM_PWM_Stop_IT+0xe6>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a3a      	ldr	r2, [pc, #232]	; (800e1b4 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d004      	beq.n	800e0da <HAL_TIM_PWM_Stop_IT+0xe6>
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a38      	ldr	r2, [pc, #224]	; (800e1b8 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d101      	bne.n	800e0de <HAL_TIM_PWM_Stop_IT+0xea>
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e000      	b.n	800e0e0 <HAL_TIM_PWM_Stop_IT+0xec>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d017      	beq.n	800e114 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	6a1a      	ldr	r2, [r3, #32]
 800e0ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10f      	bne.n	800e114 <HAL_TIM_PWM_Stop_IT+0x120>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6a1a      	ldr	r2, [r3, #32]
 800e0fa:	f244 4344 	movw	r3, #17476	; 0x4444
 800e0fe:	4013      	ands	r3, r2
 800e100:	2b00      	cmp	r3, #0
 800e102:	d107      	bne.n	800e114 <HAL_TIM_PWM_Stop_IT+0x120>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e112:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6a1a      	ldr	r2, [r3, #32]
 800e11a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10f      	bne.n	800e144 <HAL_TIM_PWM_Stop_IT+0x150>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	6a1a      	ldr	r2, [r3, #32]
 800e12a:	f244 4344 	movw	r3, #17476	; 0x4444
 800e12e:	4013      	ands	r3, r2
 800e130:	2b00      	cmp	r3, #0
 800e132:	d107      	bne.n	800e144 <HAL_TIM_PWM_Stop_IT+0x150>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f022 0201 	bic.w	r2, r2, #1
 800e142:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d104      	bne.n	800e154 <HAL_TIM_PWM_Stop_IT+0x160>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e152:	e023      	b.n	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b04      	cmp	r3, #4
 800e158:	d104      	bne.n	800e164 <HAL_TIM_PWM_Stop_IT+0x170>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2201      	movs	r2, #1
 800e15e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e162:	e01b      	b.n	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2b08      	cmp	r3, #8
 800e168:	d104      	bne.n	800e174 <HAL_TIM_PWM_Stop_IT+0x180>
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2201      	movs	r2, #1
 800e16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e172:	e013      	b.n	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	2b0c      	cmp	r3, #12
 800e178:	d104      	bne.n	800e184 <HAL_TIM_PWM_Stop_IT+0x190>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2201      	movs	r2, #1
 800e17e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e182:	e00b      	b.n	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b10      	cmp	r3, #16
 800e188:	d104      	bne.n	800e194 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2201      	movs	r2, #1
 800e18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e192:	e003      	b.n	800e19c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	40012c00 	.word	0x40012c00
 800e1ac:	40013400 	.word	0x40013400
 800e1b0:	40014000 	.word	0x40014000
 800e1b4:	40014400 	.word	0x40014400
 800e1b8:	40014800 	.word	0x40014800

0800e1bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e041      	b.n	800e254 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d106      	bne.n	800e1ea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7f7 fc95 	bl	8005b14 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4610      	mov	r0, r2
 800e1fe:	f000 fbf9 	bl	800e9f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f022 0208 	bic.w	r2, r2, #8
 800e210:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6819      	ldr	r1, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	430a      	orrs	r2, r1
 800e220:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b086      	sub	sp, #24
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e097      	b.n	800e3a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e276:	b2db      	uxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7f7 fb6d 	bl	8005964 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	6812      	ldr	r2, [r2, #0]
 800e29c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e2a0:	f023 0307 	bic.w	r3, r3, #7
 800e2a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f000 fb9f 	bl	800e9f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2de:	f023 0303 	bic.w	r3, r3, #3
 800e2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	689a      	ldr	r2, [r3, #8]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	021b      	lsls	r3, r3, #8
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	693a      	ldr	r2, [r7, #16]
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e2fc:	f023 030c 	bic.w	r3, r3, #12
 800e300:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e30c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	021b      	lsls	r3, r3, #8
 800e318:	4313      	orrs	r3, r2
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	011a      	lsls	r2, r3, #4
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	031b      	lsls	r3, r3, #12
 800e32c:	4313      	orrs	r3, r2
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	4313      	orrs	r3, r2
 800e332:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e33a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e342:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	011b      	lsls	r3, r3, #4
 800e34e:	4313      	orrs	r3, r2
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4313      	orrs	r3, r2
 800e354:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2201      	movs	r2, #1
 800e372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e3c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d110      	bne.n	800e3fa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d102      	bne.n	800e3e4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e3de:	7b7b      	ldrb	r3, [r7, #13]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d001      	beq.n	800e3e8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e089      	b.n	800e4fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3f8:	e031      	b.n	800e45e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b04      	cmp	r3, #4
 800e3fe:	d110      	bne.n	800e422 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e400:	7bbb      	ldrb	r3, [r7, #14]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d102      	bne.n	800e40c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e406:	7b3b      	ldrb	r3, [r7, #12]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d001      	beq.n	800e410 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e075      	b.n	800e4fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2202      	movs	r2, #2
 800e41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e420:	e01d      	b.n	800e45e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d108      	bne.n	800e43a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e428:	7bbb      	ldrb	r3, [r7, #14]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d105      	bne.n	800e43a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e42e:	7b7b      	ldrb	r3, [r7, #13]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d102      	bne.n	800e43a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e434:	7b3b      	ldrb	r3, [r7, #12]
 800e436:	2b01      	cmp	r3, #1
 800e438:	d001      	beq.n	800e43e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e05e      	b.n	800e4fc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2202      	movs	r2, #2
 800e442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2202      	movs	r2, #2
 800e44a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2202      	movs	r2, #2
 800e452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2202      	movs	r2, #2
 800e45a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d003      	beq.n	800e46c <HAL_TIM_Encoder_Start_IT+0xc4>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b04      	cmp	r3, #4
 800e468:	d010      	beq.n	800e48c <HAL_TIM_Encoder_Start_IT+0xe4>
 800e46a:	e01f      	b.n	800e4ac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2201      	movs	r2, #1
 800e472:	2100      	movs	r1, #0
 800e474:	4618      	mov	r0, r3
 800e476:	f000 fe4f 	bl	800f118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68da      	ldr	r2, [r3, #12]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f042 0202 	orr.w	r2, r2, #2
 800e488:	60da      	str	r2, [r3, #12]
      break;
 800e48a:	e02e      	b.n	800e4ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2201      	movs	r2, #1
 800e492:	2104      	movs	r1, #4
 800e494:	4618      	mov	r0, r3
 800e496:	f000 fe3f 	bl	800f118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68da      	ldr	r2, [r3, #12]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f042 0204 	orr.w	r2, r2, #4
 800e4a8:	60da      	str	r2, [r3, #12]
      break;
 800e4aa:	e01e      	b.n	800e4ea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f000 fe2f 	bl	800f118 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	2104      	movs	r1, #4
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 fe28 	bl	800f118 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f042 0202 	orr.w	r2, r2, #2
 800e4d6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68da      	ldr	r2, [r3, #12]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f042 0204 	orr.w	r2, r2, #4
 800e4e6:	60da      	str	r2, [r3, #12]
      break;
 800e4e8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f042 0201 	orr.w	r2, r2, #1
 800e4f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	f003 0302 	and.w	r3, r3, #2
 800e522:	2b00      	cmp	r3, #0
 800e524:	d020      	beq.n	800e568 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f003 0302 	and.w	r3, r3, #2
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d01b      	beq.n	800e568 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f06f 0202 	mvn.w	r2, #2
 800e538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	699b      	ldr	r3, [r3, #24]
 800e546:	f003 0303 	and.w	r3, r3, #3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7f5 f9b0 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800e554:	e005      	b.n	800e562 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 fa38 	bl	800e9cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7f5 f9bb 	bl	80038d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	f003 0304 	and.w	r3, r3, #4
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d020      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f003 0304 	and.w	r3, r3, #4
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d01b      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f06f 0204 	mvn.w	r2, #4
 800e584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2202      	movs	r2, #2
 800e58a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	699b      	ldr	r3, [r3, #24]
 800e592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7f5 f98a 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800e5a0:	e005      	b.n	800e5ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fa12 	bl	800e9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7f5 f995 	bl	80038d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f003 0308 	and.w	r3, r3, #8
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d020      	beq.n	800e600 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f003 0308 	and.w	r3, r3, #8
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d01b      	beq.n	800e600 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f06f 0208 	mvn.w	r2, #8
 800e5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2204      	movs	r2, #4
 800e5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	69db      	ldr	r3, [r3, #28]
 800e5de:	f003 0303 	and.w	r3, r3, #3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d003      	beq.n	800e5ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7f5 f964 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800e5ec:	e005      	b.n	800e5fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f9ec 	bl	800e9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7f5 f96f 	bl	80038d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	f003 0310 	and.w	r3, r3, #16
 800e606:	2b00      	cmp	r3, #0
 800e608:	d020      	beq.n	800e64c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f003 0310 	and.w	r3, r3, #16
 800e610:	2b00      	cmp	r3, #0
 800e612:	d01b      	beq.n	800e64c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f06f 0210 	mvn.w	r2, #16
 800e61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2208      	movs	r2, #8
 800e622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	69db      	ldr	r3, [r3, #28]
 800e62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d003      	beq.n	800e63a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f7f5 f93e 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800e638:	e005      	b.n	800e646 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f9c6 	bl	800e9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7f5 f949 	bl	80038d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00c      	beq.n	800e670 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d007      	beq.n	800e670 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f06f 0201 	mvn.w	r2, #1
 800e668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7f5 f95a 	bl	8003924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e676:	2b00      	cmp	r3, #0
 800e678:	d104      	bne.n	800e684 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00c      	beq.n	800e69e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d007      	beq.n	800e69e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 ff83 	bl	800f5a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00c      	beq.n	800e6c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d007      	beq.n	800e6c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e6ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 ff7b 	bl	800f5b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00c      	beq.n	800e6e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d007      	beq.n	800e6e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f97d 	bl	800e9e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	f003 0320 	and.w	r3, r3, #32
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00c      	beq.n	800e70a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f003 0320 	and.w	r3, r3, #32
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d007      	beq.n	800e70a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f06f 0220 	mvn.w	r2, #32
 800e702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f000 ff43 	bl	800f590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00c      	beq.n	800e72e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d007      	beq.n	800e72e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f000 ff4f 	bl	800f5cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00c      	beq.n	800e752 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 ff47 	bl	800f5e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00c      	beq.n	800e776 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e762:	2b00      	cmp	r3, #0
 800e764:	d007      	beq.n	800e776 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 ff3f 	bl	800f5f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00c      	beq.n	800e79a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e786:	2b00      	cmp	r3, #0
 800e788:	d007      	beq.n	800e79a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 ff37 	bl	800f608 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
	...

0800e7a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d101      	bne.n	800e7c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e7be:	2302      	movs	r3, #2
 800e7c0:	e0ff      	b.n	800e9c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b14      	cmp	r3, #20
 800e7ce:	f200 80f0 	bhi.w	800e9b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e7d2:	a201      	add	r2, pc, #4	; (adr r2, 800e7d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d8:	0800e82d 	.word	0x0800e82d
 800e7dc:	0800e9b3 	.word	0x0800e9b3
 800e7e0:	0800e9b3 	.word	0x0800e9b3
 800e7e4:	0800e9b3 	.word	0x0800e9b3
 800e7e8:	0800e86d 	.word	0x0800e86d
 800e7ec:	0800e9b3 	.word	0x0800e9b3
 800e7f0:	0800e9b3 	.word	0x0800e9b3
 800e7f4:	0800e9b3 	.word	0x0800e9b3
 800e7f8:	0800e8af 	.word	0x0800e8af
 800e7fc:	0800e9b3 	.word	0x0800e9b3
 800e800:	0800e9b3 	.word	0x0800e9b3
 800e804:	0800e9b3 	.word	0x0800e9b3
 800e808:	0800e8ef 	.word	0x0800e8ef
 800e80c:	0800e9b3 	.word	0x0800e9b3
 800e810:	0800e9b3 	.word	0x0800e9b3
 800e814:	0800e9b3 	.word	0x0800e9b3
 800e818:	0800e931 	.word	0x0800e931
 800e81c:	0800e9b3 	.word	0x0800e9b3
 800e820:	0800e9b3 	.word	0x0800e9b3
 800e824:	0800e9b3 	.word	0x0800e9b3
 800e828:	0800e971 	.word	0x0800e971
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	4618      	mov	r0, r3
 800e834:	f000 f97a 	bl	800eb2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	699a      	ldr	r2, [r3, #24]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f042 0208 	orr.w	r2, r2, #8
 800e846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	699a      	ldr	r2, [r3, #24]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f022 0204 	bic.w	r2, r2, #4
 800e856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6999      	ldr	r1, [r3, #24]
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	691a      	ldr	r2, [r3, #16]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	430a      	orrs	r2, r1
 800e868:	619a      	str	r2, [r3, #24]
      break;
 800e86a:	e0a5      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	68b9      	ldr	r1, [r7, #8]
 800e872:	4618      	mov	r0, r3
 800e874:	f000 f9ea 	bl	800ec4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	699a      	ldr	r2, [r3, #24]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e886:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	699a      	ldr	r2, [r3, #24]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e896:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6999      	ldr	r1, [r3, #24]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	021a      	lsls	r2, r3, #8
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	430a      	orrs	r2, r1
 800e8aa:	619a      	str	r2, [r3, #24]
      break;
 800e8ac:	e084      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	68b9      	ldr	r1, [r7, #8]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 fa53 	bl	800ed60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	69da      	ldr	r2, [r3, #28]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f042 0208 	orr.w	r2, r2, #8
 800e8c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	69da      	ldr	r2, [r3, #28]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f022 0204 	bic.w	r2, r2, #4
 800e8d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	69d9      	ldr	r1, [r3, #28]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	691a      	ldr	r2, [r3, #16]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	61da      	str	r2, [r3, #28]
      break;
 800e8ec:	e064      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	68b9      	ldr	r1, [r7, #8]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 fabb 	bl	800ee70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	69da      	ldr	r2, [r3, #28]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e908:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	69da      	ldr	r2, [r3, #28]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	69d9      	ldr	r1, [r3, #28]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	021a      	lsls	r2, r3, #8
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	430a      	orrs	r2, r1
 800e92c:	61da      	str	r2, [r3, #28]
      break;
 800e92e:	e043      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68b9      	ldr	r1, [r7, #8]
 800e936:	4618      	mov	r0, r3
 800e938:	f000 fb24 	bl	800ef84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f042 0208 	orr.w	r2, r2, #8
 800e94a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f022 0204 	bic.w	r2, r2, #4
 800e95a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	691a      	ldr	r2, [r3, #16]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e96e:	e023      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68b9      	ldr	r1, [r7, #8]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fb68 	bl	800f04c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e98a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e99a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	021a      	lsls	r2, r3, #8
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	430a      	orrs	r2, r1
 800e9ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e9b0:	e002      	b.n	800e9b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3718      	adds	r7, #24
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop

0800e9cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a42      	ldr	r2, [pc, #264]	; (800eb10 <TIM_Base_SetConfig+0x11c>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d00f      	beq.n	800ea2c <TIM_Base_SetConfig+0x38>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea12:	d00b      	beq.n	800ea2c <TIM_Base_SetConfig+0x38>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4a3f      	ldr	r2, [pc, #252]	; (800eb14 <TIM_Base_SetConfig+0x120>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d007      	beq.n	800ea2c <TIM_Base_SetConfig+0x38>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a3e      	ldr	r2, [pc, #248]	; (800eb18 <TIM_Base_SetConfig+0x124>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d003      	beq.n	800ea2c <TIM_Base_SetConfig+0x38>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a3d      	ldr	r2, [pc, #244]	; (800eb1c <TIM_Base_SetConfig+0x128>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d108      	bne.n	800ea3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a33      	ldr	r2, [pc, #204]	; (800eb10 <TIM_Base_SetConfig+0x11c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d01b      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea4c:	d017      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a30      	ldr	r2, [pc, #192]	; (800eb14 <TIM_Base_SetConfig+0x120>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d013      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a2f      	ldr	r2, [pc, #188]	; (800eb18 <TIM_Base_SetConfig+0x124>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d00f      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a2e      	ldr	r2, [pc, #184]	; (800eb1c <TIM_Base_SetConfig+0x128>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d00b      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a2d      	ldr	r2, [pc, #180]	; (800eb20 <TIM_Base_SetConfig+0x12c>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d007      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a2c      	ldr	r2, [pc, #176]	; (800eb24 <TIM_Base_SetConfig+0x130>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d003      	beq.n	800ea7e <TIM_Base_SetConfig+0x8a>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4a2b      	ldr	r2, [pc, #172]	; (800eb28 <TIM_Base_SetConfig+0x134>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d108      	bne.n	800ea90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	68fa      	ldr	r2, [r7, #12]
 800eaa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	689a      	ldr	r2, [r3, #8]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a16      	ldr	r2, [pc, #88]	; (800eb10 <TIM_Base_SetConfig+0x11c>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d00f      	beq.n	800eadc <TIM_Base_SetConfig+0xe8>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a17      	ldr	r2, [pc, #92]	; (800eb1c <TIM_Base_SetConfig+0x128>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d00b      	beq.n	800eadc <TIM_Base_SetConfig+0xe8>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a16      	ldr	r2, [pc, #88]	; (800eb20 <TIM_Base_SetConfig+0x12c>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d007      	beq.n	800eadc <TIM_Base_SetConfig+0xe8>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a15      	ldr	r2, [pc, #84]	; (800eb24 <TIM_Base_SetConfig+0x130>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d003      	beq.n	800eadc <TIM_Base_SetConfig+0xe8>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4a14      	ldr	r2, [pc, #80]	; (800eb28 <TIM_Base_SetConfig+0x134>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d103      	bne.n	800eae4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	691a      	ldr	r2, [r3, #16]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	f003 0301 	and.w	r3, r3, #1
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d105      	bne.n	800eb02 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	691b      	ldr	r3, [r3, #16]
 800eafa:	f023 0201 	bic.w	r2, r3, #1
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	611a      	str	r2, [r3, #16]
  }
}
 800eb02:	bf00      	nop
 800eb04:	3714      	adds	r7, #20
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	40012c00 	.word	0x40012c00
 800eb14:	40000400 	.word	0x40000400
 800eb18:	40000800 	.word	0x40000800
 800eb1c:	40013400 	.word	0x40013400
 800eb20:	40014000 	.word	0x40014000
 800eb24:	40014400 	.word	0x40014400
 800eb28:	40014800 	.word	0x40014800

0800eb2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b087      	sub	sp, #28
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a1b      	ldr	r3, [r3, #32]
 800eb3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a1b      	ldr	r3, [r3, #32]
 800eb40:	f023 0201 	bic.w	r2, r3, #1
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f023 0303 	bic.w	r3, r3, #3
 800eb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f023 0302 	bic.w	r3, r3, #2
 800eb78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a2c      	ldr	r2, [pc, #176]	; (800ec38 <TIM_OC1_SetConfig+0x10c>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d00f      	beq.n	800ebac <TIM_OC1_SetConfig+0x80>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a2b      	ldr	r2, [pc, #172]	; (800ec3c <TIM_OC1_SetConfig+0x110>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d00b      	beq.n	800ebac <TIM_OC1_SetConfig+0x80>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a2a      	ldr	r2, [pc, #168]	; (800ec40 <TIM_OC1_SetConfig+0x114>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d007      	beq.n	800ebac <TIM_OC1_SetConfig+0x80>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a29      	ldr	r2, [pc, #164]	; (800ec44 <TIM_OC1_SetConfig+0x118>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d003      	beq.n	800ebac <TIM_OC1_SetConfig+0x80>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a28      	ldr	r2, [pc, #160]	; (800ec48 <TIM_OC1_SetConfig+0x11c>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d10c      	bne.n	800ebc6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	f023 0308 	bic.w	r3, r3, #8
 800ebb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f023 0304 	bic.w	r3, r3, #4
 800ebc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a1b      	ldr	r2, [pc, #108]	; (800ec38 <TIM_OC1_SetConfig+0x10c>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d00f      	beq.n	800ebee <TIM_OC1_SetConfig+0xc2>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a1a      	ldr	r2, [pc, #104]	; (800ec3c <TIM_OC1_SetConfig+0x110>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d00b      	beq.n	800ebee <TIM_OC1_SetConfig+0xc2>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a19      	ldr	r2, [pc, #100]	; (800ec40 <TIM_OC1_SetConfig+0x114>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d007      	beq.n	800ebee <TIM_OC1_SetConfig+0xc2>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4a18      	ldr	r2, [pc, #96]	; (800ec44 <TIM_OC1_SetConfig+0x118>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d003      	beq.n	800ebee <TIM_OC1_SetConfig+0xc2>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a17      	ldr	r2, [pc, #92]	; (800ec48 <TIM_OC1_SetConfig+0x11c>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d111      	bne.n	800ec12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	695b      	ldr	r3, [r3, #20]
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	693a      	ldr	r2, [r7, #16]
 800ec16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	685a      	ldr	r2, [r3, #4]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	697a      	ldr	r2, [r7, #20]
 800ec2a:	621a      	str	r2, [r3, #32]
}
 800ec2c:	bf00      	nop
 800ec2e:	371c      	adds	r7, #28
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	40012c00 	.word	0x40012c00
 800ec3c:	40013400 	.word	0x40013400
 800ec40:	40014000 	.word	0x40014000
 800ec44:	40014400 	.word	0x40014400
 800ec48:	40014800 	.word	0x40014800

0800ec4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a1b      	ldr	r3, [r3, #32]
 800ec5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a1b      	ldr	r3, [r3, #32]
 800ec60:	f023 0210 	bic.w	r2, r3, #16
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	699b      	ldr	r3, [r3, #24]
 800ec72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	021b      	lsls	r3, r3, #8
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f023 0320 	bic.w	r3, r3, #32
 800ec9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	697a      	ldr	r2, [r7, #20]
 800eca4:	4313      	orrs	r3, r2
 800eca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a28      	ldr	r2, [pc, #160]	; (800ed4c <TIM_OC2_SetConfig+0x100>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d003      	beq.n	800ecb8 <TIM_OC2_SetConfig+0x6c>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a27      	ldr	r2, [pc, #156]	; (800ed50 <TIM_OC2_SetConfig+0x104>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d10d      	bne.n	800ecd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	011b      	lsls	r3, r3, #4
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a1d      	ldr	r2, [pc, #116]	; (800ed4c <TIM_OC2_SetConfig+0x100>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d00f      	beq.n	800ecfc <TIM_OC2_SetConfig+0xb0>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a1c      	ldr	r2, [pc, #112]	; (800ed50 <TIM_OC2_SetConfig+0x104>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d00b      	beq.n	800ecfc <TIM_OC2_SetConfig+0xb0>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a1b      	ldr	r2, [pc, #108]	; (800ed54 <TIM_OC2_SetConfig+0x108>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d007      	beq.n	800ecfc <TIM_OC2_SetConfig+0xb0>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a1a      	ldr	r2, [pc, #104]	; (800ed58 <TIM_OC2_SetConfig+0x10c>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d003      	beq.n	800ecfc <TIM_OC2_SetConfig+0xb0>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a19      	ldr	r2, [pc, #100]	; (800ed5c <TIM_OC2_SetConfig+0x110>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d113      	bne.n	800ed24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ed02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	695b      	ldr	r3, [r3, #20]
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	699b      	ldr	r3, [r3, #24]
 800ed1c:	009b      	lsls	r3, r3, #2
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	685a      	ldr	r2, [r3, #4]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	621a      	str	r2, [r3, #32]
}
 800ed3e:	bf00      	nop
 800ed40:	371c      	adds	r7, #28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	40012c00 	.word	0x40012c00
 800ed50:	40013400 	.word	0x40013400
 800ed54:	40014000 	.word	0x40014000
 800ed58:	40014400 	.word	0x40014400
 800ed5c:	40014800 	.word	0x40014800

0800ed60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a1b      	ldr	r3, [r3, #32]
 800ed6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a1b      	ldr	r3, [r3, #32]
 800ed74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	69db      	ldr	r3, [r3, #28]
 800ed86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0303 	bic.w	r3, r3, #3
 800ed9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	4313      	orrs	r3, r2
 800eda4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800edac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	021b      	lsls	r3, r3, #8
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4a27      	ldr	r2, [pc, #156]	; (800ee5c <TIM_OC3_SetConfig+0xfc>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d003      	beq.n	800edca <TIM_OC3_SetConfig+0x6a>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4a26      	ldr	r2, [pc, #152]	; (800ee60 <TIM_OC3_SetConfig+0x100>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d10d      	bne.n	800ede6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	021b      	lsls	r3, r3, #8
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	4313      	orrs	r3, r2
 800eddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ede4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a1c      	ldr	r2, [pc, #112]	; (800ee5c <TIM_OC3_SetConfig+0xfc>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d00f      	beq.n	800ee0e <TIM_OC3_SetConfig+0xae>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a1b      	ldr	r2, [pc, #108]	; (800ee60 <TIM_OC3_SetConfig+0x100>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d00b      	beq.n	800ee0e <TIM_OC3_SetConfig+0xae>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a1a      	ldr	r2, [pc, #104]	; (800ee64 <TIM_OC3_SetConfig+0x104>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d007      	beq.n	800ee0e <TIM_OC3_SetConfig+0xae>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a19      	ldr	r2, [pc, #100]	; (800ee68 <TIM_OC3_SetConfig+0x108>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d003      	beq.n	800ee0e <TIM_OC3_SetConfig+0xae>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <TIM_OC3_SetConfig+0x10c>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d113      	bne.n	800ee36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	011b      	lsls	r3, r3, #4
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	4313      	orrs	r3, r2
 800ee34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	693a      	ldr	r2, [r7, #16]
 800ee3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	697a      	ldr	r2, [r7, #20]
 800ee4e:	621a      	str	r2, [r3, #32]
}
 800ee50:	bf00      	nop
 800ee52:	371c      	adds	r7, #28
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	40012c00 	.word	0x40012c00
 800ee60:	40013400 	.word	0x40013400
 800ee64:	40014000 	.word	0x40014000
 800ee68:	40014400 	.word	0x40014400
 800ee6c:	40014800 	.word	0x40014800

0800ee70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b087      	sub	sp, #28
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	69db      	ldr	r3, [r3, #28]
 800ee96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ee9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eeaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	021b      	lsls	r3, r3, #8
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	031b      	lsls	r3, r3, #12
 800eec6:	697a      	ldr	r2, [r7, #20]
 800eec8:	4313      	orrs	r3, r2
 800eeca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a28      	ldr	r2, [pc, #160]	; (800ef70 <TIM_OC4_SetConfig+0x100>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d003      	beq.n	800eedc <TIM_OC4_SetConfig+0x6c>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a27      	ldr	r2, [pc, #156]	; (800ef74 <TIM_OC4_SetConfig+0x104>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d10d      	bne.n	800eef8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	031b      	lsls	r3, r3, #12
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	4313      	orrs	r3, r2
 800eeee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a1d      	ldr	r2, [pc, #116]	; (800ef70 <TIM_OC4_SetConfig+0x100>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d00f      	beq.n	800ef20 <TIM_OC4_SetConfig+0xb0>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4a1c      	ldr	r2, [pc, #112]	; (800ef74 <TIM_OC4_SetConfig+0x104>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d00b      	beq.n	800ef20 <TIM_OC4_SetConfig+0xb0>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a1b      	ldr	r2, [pc, #108]	; (800ef78 <TIM_OC4_SetConfig+0x108>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d007      	beq.n	800ef20 <TIM_OC4_SetConfig+0xb0>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a1a      	ldr	r2, [pc, #104]	; (800ef7c <TIM_OC4_SetConfig+0x10c>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d003      	beq.n	800ef20 <TIM_OC4_SetConfig+0xb0>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a19      	ldr	r2, [pc, #100]	; (800ef80 <TIM_OC4_SetConfig+0x110>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d113      	bne.n	800ef48 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ef2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	019b      	lsls	r3, r3, #6
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	699b      	ldr	r3, [r3, #24]
 800ef40:	019b      	lsls	r3, r3, #6
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	685a      	ldr	r2, [r3, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	621a      	str	r2, [r3, #32]
}
 800ef62:	bf00      	nop
 800ef64:	371c      	adds	r7, #28
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	40012c00 	.word	0x40012c00
 800ef74:	40013400 	.word	0x40013400
 800ef78:	40014000 	.word	0x40014000
 800ef7c:	40014400 	.word	0x40014400
 800ef80:	40014800 	.word	0x40014800

0800ef84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b087      	sub	sp, #28
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a1b      	ldr	r3, [r3, #32]
 800ef98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800efb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800efc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	041b      	lsls	r3, r3, #16
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	4313      	orrs	r3, r2
 800efd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a17      	ldr	r2, [pc, #92]	; (800f038 <TIM_OC5_SetConfig+0xb4>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d00f      	beq.n	800effe <TIM_OC5_SetConfig+0x7a>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a16      	ldr	r2, [pc, #88]	; (800f03c <TIM_OC5_SetConfig+0xb8>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d00b      	beq.n	800effe <TIM_OC5_SetConfig+0x7a>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a15      	ldr	r2, [pc, #84]	; (800f040 <TIM_OC5_SetConfig+0xbc>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d007      	beq.n	800effe <TIM_OC5_SetConfig+0x7a>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a14      	ldr	r2, [pc, #80]	; (800f044 <TIM_OC5_SetConfig+0xc0>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d003      	beq.n	800effe <TIM_OC5_SetConfig+0x7a>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4a13      	ldr	r2, [pc, #76]	; (800f048 <TIM_OC5_SetConfig+0xc4>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d109      	bne.n	800f012 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	021b      	lsls	r3, r3, #8
 800f00c:	697a      	ldr	r2, [r7, #20]
 800f00e:	4313      	orrs	r3, r2
 800f010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	697a      	ldr	r2, [r7, #20]
 800f016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	685a      	ldr	r2, [r3, #4]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	693a      	ldr	r2, [r7, #16]
 800f02a:	621a      	str	r2, [r3, #32]
}
 800f02c:	bf00      	nop
 800f02e:	371c      	adds	r7, #28
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	40012c00 	.word	0x40012c00
 800f03c:	40013400 	.word	0x40013400
 800f040:	40014000 	.word	0x40014000
 800f044:	40014400 	.word	0x40014400
 800f048:	40014800 	.word	0x40014800

0800f04c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b087      	sub	sp, #28
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a1b      	ldr	r3, [r3, #32]
 800f060:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	021b      	lsls	r3, r3, #8
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	4313      	orrs	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	051b      	lsls	r3, r3, #20
 800f09a:	693a      	ldr	r2, [r7, #16]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a18      	ldr	r2, [pc, #96]	; (800f104 <TIM_OC6_SetConfig+0xb8>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d00f      	beq.n	800f0c8 <TIM_OC6_SetConfig+0x7c>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a17      	ldr	r2, [pc, #92]	; (800f108 <TIM_OC6_SetConfig+0xbc>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d00b      	beq.n	800f0c8 <TIM_OC6_SetConfig+0x7c>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a16      	ldr	r2, [pc, #88]	; (800f10c <TIM_OC6_SetConfig+0xc0>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d007      	beq.n	800f0c8 <TIM_OC6_SetConfig+0x7c>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a15      	ldr	r2, [pc, #84]	; (800f110 <TIM_OC6_SetConfig+0xc4>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d003      	beq.n	800f0c8 <TIM_OC6_SetConfig+0x7c>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a14      	ldr	r2, [pc, #80]	; (800f114 <TIM_OC6_SetConfig+0xc8>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d109      	bne.n	800f0dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	695b      	ldr	r3, [r3, #20]
 800f0d4:	029b      	lsls	r3, r3, #10
 800f0d6:	697a      	ldr	r2, [r7, #20]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	685a      	ldr	r2, [r3, #4]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	693a      	ldr	r2, [r7, #16]
 800f0f4:	621a      	str	r2, [r3, #32]
}
 800f0f6:	bf00      	nop
 800f0f8:	371c      	adds	r7, #28
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	40012c00 	.word	0x40012c00
 800f108:	40013400 	.word	0x40013400
 800f10c:	40014000 	.word	0x40014000
 800f110:	40014400 	.word	0x40014400
 800f114:	40014800 	.word	0x40014800

0800f118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	f003 031f 	and.w	r3, r3, #31
 800f12a:	2201      	movs	r2, #1
 800f12c:	fa02 f303 	lsl.w	r3, r2, r3
 800f130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6a1a      	ldr	r2, [r3, #32]
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	43db      	mvns	r3, r3
 800f13a:	401a      	ands	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6a1a      	ldr	r2, [r3, #32]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f003 031f 	and.w	r3, r3, #31
 800f14a:	6879      	ldr	r1, [r7, #4]
 800f14c:	fa01 f303 	lsl.w	r3, r1, r3
 800f150:	431a      	orrs	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	621a      	str	r2, [r3, #32]
}
 800f156:	bf00      	nop
 800f158:	371c      	adds	r7, #28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr
	...

0800f164 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b084      	sub	sp, #16
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d109      	bne.n	800f18c <HAL_TIMEx_PWMN_Start_IT+0x28>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b01      	cmp	r3, #1
 800f182:	bf14      	ite	ne
 800f184:	2301      	movne	r3, #1
 800f186:	2300      	moveq	r3, #0
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	e022      	b.n	800f1d2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	2b04      	cmp	r3, #4
 800f190:	d109      	bne.n	800f1a6 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	bf14      	ite	ne
 800f19e:	2301      	movne	r3, #1
 800f1a0:	2300      	moveq	r3, #0
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	e015      	b.n	800f1d2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	2b08      	cmp	r3, #8
 800f1aa:	d109      	bne.n	800f1c0 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	bf14      	ite	ne
 800f1b8:	2301      	movne	r3, #1
 800f1ba:	2300      	moveq	r3, #0
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	e008      	b.n	800f1d2 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f1c6:	b2db      	uxtb	r3, r3
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	bf14      	ite	ne
 800f1cc:	2301      	movne	r3, #1
 800f1ce:	2300      	moveq	r3, #0
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d001      	beq.n	800f1da <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e0bc      	b.n	800f354 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d104      	bne.n	800f1ea <HAL_TIMEx_PWMN_Start_IT+0x86>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2202      	movs	r2, #2
 800f1e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1e8:	e013      	b.n	800f212 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b04      	cmp	r3, #4
 800f1ee:	d104      	bne.n	800f1fa <HAL_TIMEx_PWMN_Start_IT+0x96>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1f8:	e00b      	b.n	800f212 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b08      	cmp	r3, #8
 800f1fe:	d104      	bne.n	800f20a <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f208:	e003      	b.n	800f212 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2202      	movs	r2, #2
 800f20e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	2b0c      	cmp	r3, #12
 800f216:	d841      	bhi.n	800f29c <HAL_TIMEx_PWMN_Start_IT+0x138>
 800f218:	a201      	add	r2, pc, #4	; (adr r2, 800f220 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800f21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21e:	bf00      	nop
 800f220:	0800f255 	.word	0x0800f255
 800f224:	0800f29d 	.word	0x0800f29d
 800f228:	0800f29d 	.word	0x0800f29d
 800f22c:	0800f29d 	.word	0x0800f29d
 800f230:	0800f267 	.word	0x0800f267
 800f234:	0800f29d 	.word	0x0800f29d
 800f238:	0800f29d 	.word	0x0800f29d
 800f23c:	0800f29d 	.word	0x0800f29d
 800f240:	0800f279 	.word	0x0800f279
 800f244:	0800f29d 	.word	0x0800f29d
 800f248:	0800f29d 	.word	0x0800f29d
 800f24c:	0800f29d 	.word	0x0800f29d
 800f250:	0800f28b 	.word	0x0800f28b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68da      	ldr	r2, [r3, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f042 0202 	orr.w	r2, r2, #2
 800f262:	60da      	str	r2, [r3, #12]
      break;
 800f264:	e01d      	b.n	800f2a2 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	68da      	ldr	r2, [r3, #12]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f042 0204 	orr.w	r2, r2, #4
 800f274:	60da      	str	r2, [r3, #12]
      break;
 800f276:	e014      	b.n	800f2a2 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68da      	ldr	r2, [r3, #12]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0208 	orr.w	r2, r2, #8
 800f286:	60da      	str	r2, [r3, #12]
      break;
 800f288:	e00b      	b.n	800f2a2 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68da      	ldr	r2, [r3, #12]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f042 0210 	orr.w	r2, r2, #16
 800f298:	60da      	str	r2, [r3, #12]
      break;
 800f29a:	e002      	b.n	800f2a2 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	73fb      	strb	r3, [r7, #15]
      break;
 800f2a0:	bf00      	nop
  }

  if (status == HAL_OK)
 800f2a2:	7bfb      	ldrb	r3, [r7, #15]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d154      	bne.n	800f352 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68da      	ldr	r2, [r3, #12]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f2b6:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2204      	movs	r2, #4
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 f9ab 	bl	800f61c <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a20      	ldr	r2, [pc, #128]	; (800f35c <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d018      	beq.n	800f312 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2e8:	d013      	beq.n	800f312 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a1c      	ldr	r2, [pc, #112]	; (800f360 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d00e      	beq.n	800f312 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a1a      	ldr	r2, [pc, #104]	; (800f364 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d009      	beq.n	800f312 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	4a19      	ldr	r2, [pc, #100]	; (800f368 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d004      	beq.n	800f312 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4a17      	ldr	r2, [pc, #92]	; (800f36c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d115      	bne.n	800f33e <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	4b15      	ldr	r3, [pc, #84]	; (800f370 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800f31a:	4013      	ands	r3, r2
 800f31c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2b06      	cmp	r3, #6
 800f322:	d015      	beq.n	800f350 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f32a:	d011      	beq.n	800f350 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f042 0201 	orr.w	r2, r2, #1
 800f33a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f33c:	e008      	b.n	800f350 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f042 0201 	orr.w	r2, r2, #1
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	e000      	b.n	800f352 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f350:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f352:	7bfb      	ldrb	r3, [r7, #15]
}
 800f354:	4618      	mov	r0, r3
 800f356:	3710      	adds	r7, #16
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	40012c00 	.word	0x40012c00
 800f360:	40000400 	.word	0x40000400
 800f364:	40000800 	.word	0x40000800
 800f368:	40013400 	.word	0x40013400
 800f36c:	40014000 	.word	0x40014000
 800f370:	00010007 	.word	0x00010007

0800f374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f374:	b480      	push	{r7}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f384:	2b01      	cmp	r3, #1
 800f386:	d101      	bne.n	800f38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f388:	2302      	movs	r3, #2
 800f38a:	e065      	b.n	800f458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2202      	movs	r2, #2
 800f398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a2c      	ldr	r2, [pc, #176]	; (800f464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d004      	beq.n	800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a2b      	ldr	r2, [pc, #172]	; (800f468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d108      	bne.n	800f3d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f3c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800f3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a1b      	ldr	r2, [pc, #108]	; (800f464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d018      	beq.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f402:	d013      	beq.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a18      	ldr	r2, [pc, #96]	; (800f46c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d00e      	beq.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a17      	ldr	r2, [pc, #92]	; (800f470 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d009      	beq.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4a12      	ldr	r2, [pc, #72]	; (800f468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d004      	beq.n	800f42c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4a13      	ldr	r2, [pc, #76]	; (800f474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d10c      	bne.n	800f446 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	68ba      	ldr	r2, [r7, #8]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3714      	adds	r7, #20
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	40012c00 	.word	0x40012c00
 800f468:	40013400 	.word	0x40013400
 800f46c:	40000400 	.word	0x40000400
 800f470:	40000800 	.word	0x40000800
 800f474:	40014000 	.word	0x40014000

0800f478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f482:	2300      	movs	r3, #0
 800f484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d101      	bne.n	800f494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f490:	2302      	movs	r3, #2
 800f492:	e073      	b.n	800f57c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	4313      	orrs	r3, r2
 800f4b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	691b      	ldr	r3, [r3, #16]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	695b      	ldr	r3, [r3, #20]
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	699b      	ldr	r3, [r3, #24]
 800f508:	041b      	lsls	r3, r3, #16
 800f50a:	4313      	orrs	r3, r2
 800f50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	69db      	ldr	r3, [r3, #28]
 800f518:	4313      	orrs	r3, r2
 800f51a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a19      	ldr	r2, [pc, #100]	; (800f588 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d004      	beq.n	800f530 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a18      	ldr	r2, [pc, #96]	; (800f58c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d11c      	bne.n	800f56a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f53a:	051b      	lsls	r3, r3, #20
 800f53c:	4313      	orrs	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	6a1b      	ldr	r3, [r3, #32]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f558:	4313      	orrs	r3, r2
 800f55a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f566:	4313      	orrs	r3, r2
 800f568:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f57a:	2300      	movs	r3, #0
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3714      	adds	r7, #20
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr
 800f588:	40012c00 	.word	0x40012c00
 800f58c:	40013400 	.word	0x40013400

0800f590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f598:	bf00      	nop
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f5ac:	bf00      	nop
 800f5ae:	370c      	adds	r7, #12
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f5d4:	bf00      	nop
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b087      	sub	sp, #28
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	f003 030f 	and.w	r3, r3, #15
 800f62e:	2204      	movs	r2, #4
 800f630:	fa02 f303 	lsl.w	r3, r2, r3
 800f634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6a1a      	ldr	r2, [r3, #32]
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	43db      	mvns	r3, r3
 800f63e:	401a      	ands	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6a1a      	ldr	r2, [r3, #32]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	f003 030f 	and.w	r3, r3, #15
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	fa01 f303 	lsl.w	r3, r1, r3
 800f654:	431a      	orrs	r2, r3
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	621a      	str	r2, [r3, #32]
}
 800f65a:	bf00      	nop
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b082      	sub	sp, #8
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	e042      	b.n	800f6fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f7f6 fac0 	bl	8005c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2224      	movs	r2, #36	; 0x24
 800f694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	f022 0201 	bic.w	r2, r2, #1
 800f6a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d002      	beq.n	800f6b6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 faf5 	bl	800fca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f826 	bl	800f708 <UART_SetConfig>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d101      	bne.n	800f6c6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e01b      	b.n	800f6fe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	689a      	ldr	r2, [r3, #8]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f6e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f042 0201 	orr.w	r2, r2, #1
 800f6f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 fb74 	bl	800fde4 <UART_CheckIdleState>
 800f6fc:	4603      	mov	r3, r0
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
	...

0800f708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f70c:	b08c      	sub	sp, #48	; 0x30
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f712:	2300      	movs	r3, #0
 800f714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	431a      	orrs	r2, r3
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	431a      	orrs	r2, r3
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	4bab      	ldr	r3, [pc, #684]	; (800f9e4 <UART_SetConfig+0x2dc>)
 800f738:	4013      	ands	r3, r2
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	6812      	ldr	r2, [r2, #0]
 800f73e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f740:	430b      	orrs	r3, r1
 800f742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	68da      	ldr	r2, [r3, #12]
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	430a      	orrs	r2, r1
 800f758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	699b      	ldr	r3, [r3, #24]
 800f75e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4aa0      	ldr	r2, [pc, #640]	; (800f9e8 <UART_SetConfig+0x2e0>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d004      	beq.n	800f774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f770:	4313      	orrs	r3, r2
 800f772:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f77e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f782:	697a      	ldr	r2, [r7, #20]
 800f784:	6812      	ldr	r2, [r2, #0]
 800f786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f788:	430b      	orrs	r3, r1
 800f78a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f792:	f023 010f 	bic.w	r1, r3, #15
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	430a      	orrs	r2, r1
 800f7a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	4a91      	ldr	r2, [pc, #580]	; (800f9ec <UART_SetConfig+0x2e4>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d125      	bne.n	800f7f8 <UART_SetConfig+0xf0>
 800f7ac:	4b90      	ldr	r3, [pc, #576]	; (800f9f0 <UART_SetConfig+0x2e8>)
 800f7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7b2:	f003 0303 	and.w	r3, r3, #3
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d81a      	bhi.n	800f7f0 <UART_SetConfig+0xe8>
 800f7ba:	a201      	add	r2, pc, #4	; (adr r2, 800f7c0 <UART_SetConfig+0xb8>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d1 	.word	0x0800f7d1
 800f7c4:	0800f7e1 	.word	0x0800f7e1
 800f7c8:	0800f7d9 	.word	0x0800f7d9
 800f7cc:	0800f7e9 	.word	0x0800f7e9
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7d6:	e0d6      	b.n	800f986 <UART_SetConfig+0x27e>
 800f7d8:	2302      	movs	r3, #2
 800f7da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7de:	e0d2      	b.n	800f986 <UART_SetConfig+0x27e>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7e6:	e0ce      	b.n	800f986 <UART_SetConfig+0x27e>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ee:	e0ca      	b.n	800f986 <UART_SetConfig+0x27e>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7f6:	e0c6      	b.n	800f986 <UART_SetConfig+0x27e>
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a7d      	ldr	r2, [pc, #500]	; (800f9f4 <UART_SetConfig+0x2ec>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d138      	bne.n	800f874 <UART_SetConfig+0x16c>
 800f802:	4b7b      	ldr	r3, [pc, #492]	; (800f9f0 <UART_SetConfig+0x2e8>)
 800f804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f808:	f003 030c 	and.w	r3, r3, #12
 800f80c:	2b0c      	cmp	r3, #12
 800f80e:	d82d      	bhi.n	800f86c <UART_SetConfig+0x164>
 800f810:	a201      	add	r2, pc, #4	; (adr r2, 800f818 <UART_SetConfig+0x110>)
 800f812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f816:	bf00      	nop
 800f818:	0800f84d 	.word	0x0800f84d
 800f81c:	0800f86d 	.word	0x0800f86d
 800f820:	0800f86d 	.word	0x0800f86d
 800f824:	0800f86d 	.word	0x0800f86d
 800f828:	0800f85d 	.word	0x0800f85d
 800f82c:	0800f86d 	.word	0x0800f86d
 800f830:	0800f86d 	.word	0x0800f86d
 800f834:	0800f86d 	.word	0x0800f86d
 800f838:	0800f855 	.word	0x0800f855
 800f83c:	0800f86d 	.word	0x0800f86d
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	0800f86d 	.word	0x0800f86d
 800f848:	0800f865 	.word	0x0800f865
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f852:	e098      	b.n	800f986 <UART_SetConfig+0x27e>
 800f854:	2302      	movs	r3, #2
 800f856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f85a:	e094      	b.n	800f986 <UART_SetConfig+0x27e>
 800f85c:	2304      	movs	r3, #4
 800f85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f862:	e090      	b.n	800f986 <UART_SetConfig+0x27e>
 800f864:	2308      	movs	r3, #8
 800f866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f86a:	e08c      	b.n	800f986 <UART_SetConfig+0x27e>
 800f86c:	2310      	movs	r3, #16
 800f86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f872:	e088      	b.n	800f986 <UART_SetConfig+0x27e>
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a5f      	ldr	r2, [pc, #380]	; (800f9f8 <UART_SetConfig+0x2f0>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d125      	bne.n	800f8ca <UART_SetConfig+0x1c2>
 800f87e:	4b5c      	ldr	r3, [pc, #368]	; (800f9f0 <UART_SetConfig+0x2e8>)
 800f880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f888:	2b30      	cmp	r3, #48	; 0x30
 800f88a:	d016      	beq.n	800f8ba <UART_SetConfig+0x1b2>
 800f88c:	2b30      	cmp	r3, #48	; 0x30
 800f88e:	d818      	bhi.n	800f8c2 <UART_SetConfig+0x1ba>
 800f890:	2b20      	cmp	r3, #32
 800f892:	d00a      	beq.n	800f8aa <UART_SetConfig+0x1a2>
 800f894:	2b20      	cmp	r3, #32
 800f896:	d814      	bhi.n	800f8c2 <UART_SetConfig+0x1ba>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <UART_SetConfig+0x19a>
 800f89c:	2b10      	cmp	r3, #16
 800f89e:	d008      	beq.n	800f8b2 <UART_SetConfig+0x1aa>
 800f8a0:	e00f      	b.n	800f8c2 <UART_SetConfig+0x1ba>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8a8:	e06d      	b.n	800f986 <UART_SetConfig+0x27e>
 800f8aa:	2302      	movs	r3, #2
 800f8ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8b0:	e069      	b.n	800f986 <UART_SetConfig+0x27e>
 800f8b2:	2304      	movs	r3, #4
 800f8b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8b8:	e065      	b.n	800f986 <UART_SetConfig+0x27e>
 800f8ba:	2308      	movs	r3, #8
 800f8bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8c0:	e061      	b.n	800f986 <UART_SetConfig+0x27e>
 800f8c2:	2310      	movs	r3, #16
 800f8c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8c8:	e05d      	b.n	800f986 <UART_SetConfig+0x27e>
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a4b      	ldr	r2, [pc, #300]	; (800f9fc <UART_SetConfig+0x2f4>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d125      	bne.n	800f920 <UART_SetConfig+0x218>
 800f8d4:	4b46      	ldr	r3, [pc, #280]	; (800f9f0 <UART_SetConfig+0x2e8>)
 800f8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f8de:	2bc0      	cmp	r3, #192	; 0xc0
 800f8e0:	d016      	beq.n	800f910 <UART_SetConfig+0x208>
 800f8e2:	2bc0      	cmp	r3, #192	; 0xc0
 800f8e4:	d818      	bhi.n	800f918 <UART_SetConfig+0x210>
 800f8e6:	2b80      	cmp	r3, #128	; 0x80
 800f8e8:	d00a      	beq.n	800f900 <UART_SetConfig+0x1f8>
 800f8ea:	2b80      	cmp	r3, #128	; 0x80
 800f8ec:	d814      	bhi.n	800f918 <UART_SetConfig+0x210>
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d002      	beq.n	800f8f8 <UART_SetConfig+0x1f0>
 800f8f2:	2b40      	cmp	r3, #64	; 0x40
 800f8f4:	d008      	beq.n	800f908 <UART_SetConfig+0x200>
 800f8f6:	e00f      	b.n	800f918 <UART_SetConfig+0x210>
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8fe:	e042      	b.n	800f986 <UART_SetConfig+0x27e>
 800f900:	2302      	movs	r3, #2
 800f902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f906:	e03e      	b.n	800f986 <UART_SetConfig+0x27e>
 800f908:	2304      	movs	r3, #4
 800f90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f90e:	e03a      	b.n	800f986 <UART_SetConfig+0x27e>
 800f910:	2308      	movs	r3, #8
 800f912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f916:	e036      	b.n	800f986 <UART_SetConfig+0x27e>
 800f918:	2310      	movs	r3, #16
 800f91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f91e:	e032      	b.n	800f986 <UART_SetConfig+0x27e>
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a30      	ldr	r2, [pc, #192]	; (800f9e8 <UART_SetConfig+0x2e0>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d12a      	bne.n	800f980 <UART_SetConfig+0x278>
 800f92a:	4b31      	ldr	r3, [pc, #196]	; (800f9f0 <UART_SetConfig+0x2e8>)
 800f92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f938:	d01a      	beq.n	800f970 <UART_SetConfig+0x268>
 800f93a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f93e:	d81b      	bhi.n	800f978 <UART_SetConfig+0x270>
 800f940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f944:	d00c      	beq.n	800f960 <UART_SetConfig+0x258>
 800f946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f94a:	d815      	bhi.n	800f978 <UART_SetConfig+0x270>
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d003      	beq.n	800f958 <UART_SetConfig+0x250>
 800f950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f954:	d008      	beq.n	800f968 <UART_SetConfig+0x260>
 800f956:	e00f      	b.n	800f978 <UART_SetConfig+0x270>
 800f958:	2300      	movs	r3, #0
 800f95a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f95e:	e012      	b.n	800f986 <UART_SetConfig+0x27e>
 800f960:	2302      	movs	r3, #2
 800f962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f966:	e00e      	b.n	800f986 <UART_SetConfig+0x27e>
 800f968:	2304      	movs	r3, #4
 800f96a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f96e:	e00a      	b.n	800f986 <UART_SetConfig+0x27e>
 800f970:	2308      	movs	r3, #8
 800f972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f976:	e006      	b.n	800f986 <UART_SetConfig+0x27e>
 800f978:	2310      	movs	r3, #16
 800f97a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f97e:	e002      	b.n	800f986 <UART_SetConfig+0x27e>
 800f980:	2310      	movs	r3, #16
 800f982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <UART_SetConfig+0x2e0>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	f040 80a8 	bne.w	800fae2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f996:	2b08      	cmp	r3, #8
 800f998:	d834      	bhi.n	800fa04 <UART_SetConfig+0x2fc>
 800f99a:	a201      	add	r2, pc, #4	; (adr r2, 800f9a0 <UART_SetConfig+0x298>)
 800f99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a0:	0800f9c5 	.word	0x0800f9c5
 800f9a4:	0800fa05 	.word	0x0800fa05
 800f9a8:	0800f9cd 	.word	0x0800f9cd
 800f9ac:	0800fa05 	.word	0x0800fa05
 800f9b0:	0800f9d3 	.word	0x0800f9d3
 800f9b4:	0800fa05 	.word	0x0800fa05
 800f9b8:	0800fa05 	.word	0x0800fa05
 800f9bc:	0800fa05 	.word	0x0800fa05
 800f9c0:	0800f9db 	.word	0x0800f9db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9c4:	f7fd f90c 	bl	800cbe0 <HAL_RCC_GetPCLK1Freq>
 800f9c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f9ca:	e021      	b.n	800fa10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f9cc:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <UART_SetConfig+0x2f8>)
 800f9ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f9d0:	e01e      	b.n	800fa10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f9d2:	f7fd f897 	bl	800cb04 <HAL_RCC_GetSysClockFreq>
 800f9d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f9d8:	e01a      	b.n	800fa10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f9e0:	e016      	b.n	800fa10 <UART_SetConfig+0x308>
 800f9e2:	bf00      	nop
 800f9e4:	cfff69f3 	.word	0xcfff69f3
 800f9e8:	40008000 	.word	0x40008000
 800f9ec:	40013800 	.word	0x40013800
 800f9f0:	40021000 	.word	0x40021000
 800f9f4:	40004400 	.word	0x40004400
 800f9f8:	40004800 	.word	0x40004800
 800f9fc:	40004c00 	.word	0x40004c00
 800fa00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800fa04:	2300      	movs	r3, #0
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fa0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 812a 	beq.w	800fc6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1c:	4a9e      	ldr	r2, [pc, #632]	; (800fc98 <UART_SetConfig+0x590>)
 800fa1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa22:	461a      	mov	r2, r3
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa2a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	4613      	mov	r3, r2
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	4413      	add	r3, r2
 800fa36:	69ba      	ldr	r2, [r7, #24]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d305      	bcc.n	800fa48 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa42:	69ba      	ldr	r2, [r7, #24]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d903      	bls.n	800fa50 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fa4e:	e10d      	b.n	800fc6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	2200      	movs	r2, #0
 800fa54:	60bb      	str	r3, [r7, #8]
 800fa56:	60fa      	str	r2, [r7, #12]
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	4a8e      	ldr	r2, [pc, #568]	; (800fc98 <UART_SetConfig+0x590>)
 800fa5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	2200      	movs	r2, #0
 800fa66:	603b      	str	r3, [r7, #0]
 800fa68:	607a      	str	r2, [r7, #4]
 800fa6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa72:	f7f1 f931 	bl	8000cd8 <__aeabi_uldivmod>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4610      	mov	r0, r2
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f04f 0200 	mov.w	r2, #0
 800fa82:	f04f 0300 	mov.w	r3, #0
 800fa86:	020b      	lsls	r3, r1, #8
 800fa88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa8c:	0202      	lsls	r2, r0, #8
 800fa8e:	6979      	ldr	r1, [r7, #20]
 800fa90:	6849      	ldr	r1, [r1, #4]
 800fa92:	0849      	lsrs	r1, r1, #1
 800fa94:	2000      	movs	r0, #0
 800fa96:	460c      	mov	r4, r1
 800fa98:	4605      	mov	r5, r0
 800fa9a:	eb12 0804 	adds.w	r8, r2, r4
 800fa9e:	eb43 0905 	adc.w	r9, r3, r5
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	469a      	mov	sl, r3
 800faaa:	4693      	mov	fp, r2
 800faac:	4652      	mov	r2, sl
 800faae:	465b      	mov	r3, fp
 800fab0:	4640      	mov	r0, r8
 800fab2:	4649      	mov	r1, r9
 800fab4:	f7f1 f910 	bl	8000cd8 <__aeabi_uldivmod>
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4613      	mov	r3, r2
 800fabe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fac6:	d308      	bcc.n	800fada <UART_SetConfig+0x3d2>
 800fac8:	6a3b      	ldr	r3, [r7, #32]
 800faca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800face:	d204      	bcs.n	800fada <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6a3a      	ldr	r2, [r7, #32]
 800fad6:	60da      	str	r2, [r3, #12]
 800fad8:	e0c8      	b.n	800fc6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fae0:	e0c4      	b.n	800fc6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faea:	d167      	bne.n	800fbbc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800faec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800faf0:	2b08      	cmp	r3, #8
 800faf2:	d828      	bhi.n	800fb46 <UART_SetConfig+0x43e>
 800faf4:	a201      	add	r2, pc, #4	; (adr r2, 800fafc <UART_SetConfig+0x3f4>)
 800faf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fafa:	bf00      	nop
 800fafc:	0800fb21 	.word	0x0800fb21
 800fb00:	0800fb29 	.word	0x0800fb29
 800fb04:	0800fb31 	.word	0x0800fb31
 800fb08:	0800fb47 	.word	0x0800fb47
 800fb0c:	0800fb37 	.word	0x0800fb37
 800fb10:	0800fb47 	.word	0x0800fb47
 800fb14:	0800fb47 	.word	0x0800fb47
 800fb18:	0800fb47 	.word	0x0800fb47
 800fb1c:	0800fb3f 	.word	0x0800fb3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fb20:	f7fd f85e 	bl	800cbe0 <HAL_RCC_GetPCLK1Freq>
 800fb24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fb26:	e014      	b.n	800fb52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fb28:	f7fd f870 	bl	800cc0c <HAL_RCC_GetPCLK2Freq>
 800fb2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fb2e:	e010      	b.n	800fb52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fb30:	4b5a      	ldr	r3, [pc, #360]	; (800fc9c <UART_SetConfig+0x594>)
 800fb32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb34:	e00d      	b.n	800fb52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fb36:	f7fc ffe5 	bl	800cb04 <HAL_RCC_GetSysClockFreq>
 800fb3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fb3c:	e009      	b.n	800fb52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb44:	e005      	b.n	800fb52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800fb46:	2300      	movs	r3, #0
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fb50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 8089 	beq.w	800fc6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	4a4e      	ldr	r2, [pc, #312]	; (800fc98 <UART_SetConfig+0x590>)
 800fb60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb64:	461a      	mov	r2, r3
 800fb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb6c:	005a      	lsls	r2, r3, #1
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	085b      	lsrs	r3, r3, #1
 800fb74:	441a      	add	r2, r3
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb80:	6a3b      	ldr	r3, [r7, #32]
 800fb82:	2b0f      	cmp	r3, #15
 800fb84:	d916      	bls.n	800fbb4 <UART_SetConfig+0x4ac>
 800fb86:	6a3b      	ldr	r3, [r7, #32]
 800fb88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb8c:	d212      	bcs.n	800fbb4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb8e:	6a3b      	ldr	r3, [r7, #32]
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	f023 030f 	bic.w	r3, r3, #15
 800fb96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb98:	6a3b      	ldr	r3, [r7, #32]
 800fb9a:	085b      	lsrs	r3, r3, #1
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	f003 0307 	and.w	r3, r3, #7
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	8bfb      	ldrh	r3, [r7, #30]
 800fba6:	4313      	orrs	r3, r2
 800fba8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	8bfa      	ldrh	r2, [r7, #30]
 800fbb0:	60da      	str	r2, [r3, #12]
 800fbb2:	e05b      	b.n	800fc6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fbba:	e057      	b.n	800fc6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fbbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fbc0:	2b08      	cmp	r3, #8
 800fbc2:	d828      	bhi.n	800fc16 <UART_SetConfig+0x50e>
 800fbc4:	a201      	add	r2, pc, #4	; (adr r2, 800fbcc <UART_SetConfig+0x4c4>)
 800fbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbca:	bf00      	nop
 800fbcc:	0800fbf1 	.word	0x0800fbf1
 800fbd0:	0800fbf9 	.word	0x0800fbf9
 800fbd4:	0800fc01 	.word	0x0800fc01
 800fbd8:	0800fc17 	.word	0x0800fc17
 800fbdc:	0800fc07 	.word	0x0800fc07
 800fbe0:	0800fc17 	.word	0x0800fc17
 800fbe4:	0800fc17 	.word	0x0800fc17
 800fbe8:	0800fc17 	.word	0x0800fc17
 800fbec:	0800fc0f 	.word	0x0800fc0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbf0:	f7fc fff6 	bl	800cbe0 <HAL_RCC_GetPCLK1Freq>
 800fbf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbf6:	e014      	b.n	800fc22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbf8:	f7fd f808 	bl	800cc0c <HAL_RCC_GetPCLK2Freq>
 800fbfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbfe:	e010      	b.n	800fc22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fc00:	4b26      	ldr	r3, [pc, #152]	; (800fc9c <UART_SetConfig+0x594>)
 800fc02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fc04:	e00d      	b.n	800fc22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fc06:	f7fc ff7d 	bl	800cb04 <HAL_RCC_GetSysClockFreq>
 800fc0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fc0c:	e009      	b.n	800fc22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fc14:	e005      	b.n	800fc22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800fc16:	2300      	movs	r3, #0
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fc20:	bf00      	nop
    }

    if (pclk != 0U)
 800fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d021      	beq.n	800fc6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2c:	4a1a      	ldr	r2, [pc, #104]	; (800fc98 <UART_SetConfig+0x590>)
 800fc2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc32:	461a      	mov	r2, r3
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	085b      	lsrs	r3, r3, #1
 800fc40:	441a      	add	r2, r3
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	2b0f      	cmp	r3, #15
 800fc50:	d909      	bls.n	800fc66 <UART_SetConfig+0x55e>
 800fc52:	6a3b      	ldr	r3, [r7, #32]
 800fc54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc58:	d205      	bcs.n	800fc66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	60da      	str	r2, [r3, #12]
 800fc64:	e002      	b.n	800fc6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2201      	movs	r2, #1
 800fc78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	2200      	movs	r2, #0
 800fc86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800fc88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3730      	adds	r7, #48	; 0x30
 800fc90:	46bd      	mov	sp, r7
 800fc92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc96:	bf00      	nop
 800fc98:	0801b730 	.word	0x0801b730
 800fc9c:	00f42400 	.word	0x00f42400

0800fca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcac:	f003 0308 	and.w	r3, r3, #8
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00a      	beq.n	800fcca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	430a      	orrs	r2, r1
 800fcc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcce:	f003 0301 	and.w	r3, r3, #1
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d00a      	beq.n	800fcec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	430a      	orrs	r2, r1
 800fcea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf0:	f003 0302 	and.w	r3, r3, #2
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00a      	beq.n	800fd0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	430a      	orrs	r2, r1
 800fd0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd12:	f003 0304 	and.w	r3, r3, #4
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00a      	beq.n	800fd30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	430a      	orrs	r2, r1
 800fd2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd34:	f003 0310 	and.w	r3, r3, #16
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00a      	beq.n	800fd52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	430a      	orrs	r2, r1
 800fd50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd56:	f003 0320 	and.w	r3, r3, #32
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00a      	beq.n	800fd74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	430a      	orrs	r2, r1
 800fd72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d01a      	beq.n	800fdb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	430a      	orrs	r2, r1
 800fd94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd9e:	d10a      	bne.n	800fdb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	430a      	orrs	r2, r1
 800fdb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d00a      	beq.n	800fdd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	685b      	ldr	r3, [r3, #4]
 800fdc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	430a      	orrs	r2, r1
 800fdd6:	605a      	str	r2, [r3, #4]
  }
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b098      	sub	sp, #96	; 0x60
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fdf4:	f7f6 fd94 	bl	8006920 <HAL_GetTick>
 800fdf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f003 0308 	and.w	r3, r3, #8
 800fe04:	2b08      	cmp	r3, #8
 800fe06:	d12f      	bne.n	800fe68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe10:	2200      	movs	r2, #0
 800fe12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f88e 	bl	800ff38 <UART_WaitOnFlagUntilTimeout>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d022      	beq.n	800fe68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	e853 3f00 	ldrex	r3, [r3]
 800fe2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe36:	653b      	str	r3, [r7, #80]	; 0x50
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe40:	647b      	str	r3, [r7, #68]	; 0x44
 800fe42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe48:	e841 2300 	strex	r3, r2, [r1]
 800fe4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d1e6      	bne.n	800fe22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2220      	movs	r2, #32
 800fe58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fe64:	2303      	movs	r3, #3
 800fe66:	e063      	b.n	800ff30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f003 0304 	and.w	r3, r3, #4
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	d149      	bne.n	800ff0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fe76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fe7a:	9300      	str	r3, [sp, #0]
 800fe7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 f857 	bl	800ff38 <UART_WaitOnFlagUntilTimeout>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d03c      	beq.n	800ff0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	e853 3f00 	ldrex	r3, [r3]
 800fe9c:	623b      	str	r3, [r7, #32]
   return(result);
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
 800feb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feb6:	e841 2300 	strex	r3, r2, [r1]
 800feba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800febc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d1e6      	bne.n	800fe90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	3308      	adds	r3, #8
 800fec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	e853 3f00 	ldrex	r3, [r3]
 800fed0:	60fb      	str	r3, [r7, #12]
   return(result);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f023 0301 	bic.w	r3, r3, #1
 800fed8:	64bb      	str	r3, [r7, #72]	; 0x48
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	3308      	adds	r3, #8
 800fee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fee2:	61fa      	str	r2, [r7, #28]
 800fee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee6:	69b9      	ldr	r1, [r7, #24]
 800fee8:	69fa      	ldr	r2, [r7, #28]
 800feea:	e841 2300 	strex	r3, r2, [r1]
 800feee:	617b      	str	r3, [r7, #20]
   return(result);
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1e5      	bne.n	800fec2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2220      	movs	r2, #32
 800fefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff06:	2303      	movs	r3, #3
 800ff08:	e012      	b.n	800ff30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2220      	movs	r2, #32
 800ff0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2220      	movs	r2, #32
 800ff16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3758      	adds	r7, #88	; 0x58
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	4613      	mov	r3, r2
 800ff46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff48:	e04f      	b.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff50:	d04b      	beq.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff52:	f7f6 fce5 	bl	8006920 <HAL_GetTick>
 800ff56:	4602      	mov	r2, r0
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	69ba      	ldr	r2, [r7, #24]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d302      	bcc.n	800ff68 <UART_WaitOnFlagUntilTimeout+0x30>
 800ff62:	69bb      	ldr	r3, [r7, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ff68:	2303      	movs	r3, #3
 800ff6a:	e04e      	b.n	801000a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 0304 	and.w	r3, r3, #4
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d037      	beq.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b80      	cmp	r3, #128	; 0x80
 800ff7e:	d034      	beq.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	2b40      	cmp	r3, #64	; 0x40
 800ff84:	d031      	beq.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	69db      	ldr	r3, [r3, #28]
 800ff8c:	f003 0308 	and.w	r3, r3, #8
 800ff90:	2b08      	cmp	r3, #8
 800ff92:	d110      	bne.n	800ffb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2208      	movs	r2, #8
 800ff9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 f838 	bl	8010012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2208      	movs	r2, #8
 800ffa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2200      	movs	r2, #0
 800ffae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e029      	b.n	801000a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ffc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ffc4:	d111      	bne.n	800ffea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f000 f81e 	bl	8010012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2220      	movs	r2, #32
 800ffda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ffe6:	2303      	movs	r3, #3
 800ffe8:	e00f      	b.n	801000a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	69da      	ldr	r2, [r3, #28]
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	4013      	ands	r3, r2
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	bf0c      	ite	eq
 800fffa:	2301      	moveq	r3, #1
 800fffc:	2300      	movne	r3, #0
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	461a      	mov	r2, r3
 8010002:	79fb      	ldrb	r3, [r7, #7]
 8010004:	429a      	cmp	r2, r3
 8010006:	d0a0      	beq.n	800ff4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010012:	b480      	push	{r7}
 8010014:	b095      	sub	sp, #84	; 0x54
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010022:	e853 3f00 	ldrex	r3, [r3]
 8010026:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801002e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	461a      	mov	r2, r3
 8010036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010038:	643b      	str	r3, [r7, #64]	; 0x40
 801003a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801003e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010040:	e841 2300 	strex	r3, r2, [r1]
 8010044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1e6      	bne.n	801001a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3308      	adds	r3, #8
 8010052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	e853 3f00 	ldrex	r3, [r3]
 801005a:	61fb      	str	r3, [r7, #28]
   return(result);
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010062:	f023 0301 	bic.w	r3, r3, #1
 8010066:	64bb      	str	r3, [r7, #72]	; 0x48
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	3308      	adds	r3, #8
 801006e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010070:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010078:	e841 2300 	strex	r3, r2, [r1]
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801007e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1e3      	bne.n	801004c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010088:	2b01      	cmp	r3, #1
 801008a:	d118      	bne.n	80100be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	60bb      	str	r3, [r7, #8]
   return(result);
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	f023 0310 	bic.w	r3, r3, #16
 80100a0:	647b      	str	r3, [r7, #68]	; 0x44
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100aa:	61bb      	str	r3, [r7, #24]
 80100ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6979      	ldr	r1, [r7, #20]
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	613b      	str	r3, [r7, #16]
   return(result);
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e6      	bne.n	801008c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2220      	movs	r2, #32
 80100c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80100d2:	bf00      	nop
 80100d4:	3754      	adds	r7, #84	; 0x54
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80100de:	b480      	push	{r7}
 80100e0:	b085      	sub	sp, #20
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d101      	bne.n	80100f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80100f0:	2302      	movs	r3, #2
 80100f2:	e027      	b.n	8010144 <HAL_UARTEx_DisableFifoMode+0x66>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2224      	movs	r2, #36	; 0x24
 8010100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f022 0201 	bic.w	r2, r2, #1
 801011a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010122:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2220      	movs	r2, #32
 8010136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010160:	2b01      	cmp	r3, #1
 8010162:	d101      	bne.n	8010168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010164:	2302      	movs	r3, #2
 8010166:	e02d      	b.n	80101c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2201      	movs	r2, #1
 801016c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2224      	movs	r2, #36	; 0x24
 8010174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f022 0201 	bic.w	r2, r2, #1
 801018e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80101a4:	6878      	ldr	r0, [r7, #4]
 80101a6:	f000 f84f 	bl	8010248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2220      	movs	r2, #32
 80101b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2200      	movs	r2, #0
 80101be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101c2:	2300      	movs	r3, #0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d101      	bne.n	80101e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80101e0:	2302      	movs	r3, #2
 80101e2:	e02d      	b.n	8010240 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2224      	movs	r2, #36	; 0x24
 80101f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f022 0201 	bic.w	r2, r2, #1
 801020a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	430a      	orrs	r2, r1
 801021e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f811 	bl	8010248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	68fa      	ldr	r2, [r7, #12]
 801022c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2220      	movs	r2, #32
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801023e:	2300      	movs	r3, #0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3710      	adds	r7, #16
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010254:	2b00      	cmp	r3, #0
 8010256:	d108      	bne.n	801026a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2201      	movs	r2, #1
 801025c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010268:	e031      	b.n	80102ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801026a:	2308      	movs	r3, #8
 801026c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801026e:	2308      	movs	r3, #8
 8010270:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	0e5b      	lsrs	r3, r3, #25
 801027a:	b2db      	uxtb	r3, r3
 801027c:	f003 0307 	and.w	r3, r3, #7
 8010280:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	0f5b      	lsrs	r3, r3, #29
 801028a:	b2db      	uxtb	r3, r3
 801028c:	f003 0307 	and.w	r3, r3, #7
 8010290:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010292:	7bbb      	ldrb	r3, [r7, #14]
 8010294:	7b3a      	ldrb	r2, [r7, #12]
 8010296:	4911      	ldr	r1, [pc, #68]	; (80102dc <UARTEx_SetNbDataToProcess+0x94>)
 8010298:	5c8a      	ldrb	r2, [r1, r2]
 801029a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801029e:	7b3a      	ldrb	r2, [r7, #12]
 80102a0:	490f      	ldr	r1, [pc, #60]	; (80102e0 <UARTEx_SetNbDataToProcess+0x98>)
 80102a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80102a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a8:	b29a      	uxth	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102b0:	7bfb      	ldrb	r3, [r7, #15]
 80102b2:	7b7a      	ldrb	r2, [r7, #13]
 80102b4:	4909      	ldr	r1, [pc, #36]	; (80102dc <UARTEx_SetNbDataToProcess+0x94>)
 80102b6:	5c8a      	ldrb	r2, [r1, r2]
 80102b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80102bc:	7b7a      	ldrb	r2, [r7, #13]
 80102be:	4908      	ldr	r1, [pc, #32]	; (80102e0 <UARTEx_SetNbDataToProcess+0x98>)
 80102c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80102ce:	bf00      	nop
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	0801b748 	.word	0x0801b748
 80102e0:	0801b750 	.word	0x0801b750

080102e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80102f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80102f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3714      	adds	r7, #20
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8010312:	b480      	push	{r7}
 8010314:	b085      	sub	sp, #20
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801031a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801031e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010326:	b29a      	uxth	r2, r3
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	b29b      	uxth	r3, r3
 801032c:	43db      	mvns	r3, r3
 801032e:	b29b      	uxth	r3, r3
 8010330:	4013      	ands	r3, r2
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3714      	adds	r7, #20
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010348:	b480      	push	{r7}
 801034a:	b085      	sub	sp, #20
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	1d3b      	adds	r3, r7, #4
 8010352:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2201      	movs	r2, #1
 801035a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2200      	movs	r2, #0
 8010372:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010384:	b480      	push	{r7}
 8010386:	b09d      	sub	sp, #116	; 0x74
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801038e:	2300      	movs	r3, #0
 8010390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	881b      	ldrh	r3, [r3, #0]
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80103a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	78db      	ldrb	r3, [r3, #3]
 80103b2:	2b03      	cmp	r3, #3
 80103b4:	d81f      	bhi.n	80103f6 <USB_ActivateEndpoint+0x72>
 80103b6:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <USB_ActivateEndpoint+0x38>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	080103cd 	.word	0x080103cd
 80103c0:	080103e9 	.word	0x080103e9
 80103c4:	080103ff 	.word	0x080103ff
 80103c8:	080103db 	.word	0x080103db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80103cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80103d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80103d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80103d8:	e012      	b.n	8010400 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80103da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80103de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80103e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80103e6:	e00b      	b.n	8010400 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80103e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80103ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80103f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80103f4:	e004      	b.n	8010400 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80103fc:	e000      	b.n	8010400 <USB_ActivateEndpoint+0x7c>
      break;
 80103fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	441a      	add	r2, r3
 801040a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801040e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801041a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801041e:	b29b      	uxth	r3, r3
 8010420:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	683b      	ldr	r3, [r7, #0]
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	4413      	add	r3, r2
 801042c:	881b      	ldrh	r3, [r3, #0]
 801042e:	b29b      	uxth	r3, r3
 8010430:	b21b      	sxth	r3, r3
 8010432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801043a:	b21a      	sxth	r2, r3
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	b21b      	sxth	r3, r3
 8010442:	4313      	orrs	r3, r2
 8010444:	b21b      	sxth	r3, r3
 8010446:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	441a      	add	r2, r3
 8010454:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8010458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801045c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010468:	b29b      	uxth	r3, r3
 801046a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	7b1b      	ldrb	r3, [r3, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f040 8178 	bne.w	8010766 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	785b      	ldrb	r3, [r3, #1]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8084 	beq.w	8010588 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	61bb      	str	r3, [r7, #24]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801048a:	b29b      	uxth	r3, r3
 801048c:	461a      	mov	r2, r3
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	4413      	add	r3, r2
 8010492:	61bb      	str	r3, [r7, #24]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	00da      	lsls	r2, r3, #3
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	88db      	ldrh	r3, [r3, #6]
 80104a8:	085b      	lsrs	r3, r3, #1
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	005b      	lsls	r3, r3, #1
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	881b      	ldrh	r3, [r3, #0]
 80104c0:	827b      	strh	r3, [r7, #18]
 80104c2:	8a7b      	ldrh	r3, [r7, #18]
 80104c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d01b      	beq.n	8010504 <USB_ActivateEndpoint+0x180>
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	b29b      	uxth	r3, r3
 80104da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104e2:	823b      	strh	r3, [r7, #16]
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	441a      	add	r2, r3
 80104ee:	8a3b      	ldrh	r3, [r7, #16]
 80104f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010500:	b29b      	uxth	r3, r3
 8010502:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	78db      	ldrb	r3, [r3, #3]
 8010508:	2b01      	cmp	r3, #1
 801050a:	d020      	beq.n	801054e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4413      	add	r3, r2
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	b29b      	uxth	r3, r3
 801051a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801051e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010522:	81bb      	strh	r3, [r7, #12]
 8010524:	89bb      	ldrh	r3, [r7, #12]
 8010526:	f083 0320 	eor.w	r3, r3, #32
 801052a:	81bb      	strh	r3, [r7, #12]
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	441a      	add	r2, r3
 8010536:	89bb      	ldrh	r3, [r7, #12]
 8010538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801053c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010548:	b29b      	uxth	r3, r3
 801054a:	8013      	strh	r3, [r2, #0]
 801054c:	e2d5      	b.n	8010afa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	4413      	add	r3, r2
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	b29b      	uxth	r3, r3
 801055c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010564:	81fb      	strh	r3, [r7, #14]
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	441a      	add	r2, r3
 8010570:	89fb      	ldrh	r3, [r7, #14]
 8010572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010582:	b29b      	uxth	r3, r3
 8010584:	8013      	strh	r3, [r2, #0]
 8010586:	e2b8      	b.n	8010afa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	633b      	str	r3, [r7, #48]	; 0x30
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010592:	b29b      	uxth	r3, r3
 8010594:	461a      	mov	r2, r3
 8010596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010598:	4413      	add	r3, r2
 801059a:	633b      	str	r3, [r7, #48]	; 0x30
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	00da      	lsls	r2, r3, #3
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	4413      	add	r3, r2
 80105a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80105aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	88db      	ldrh	r3, [r3, #6]
 80105b0:	085b      	lsrs	r3, r3, #1
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	62bb      	str	r3, [r7, #40]	; 0x28
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	461a      	mov	r2, r3
 80105ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105cc:	4413      	add	r3, r2
 80105ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	00da      	lsls	r2, r3, #3
 80105d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d8:	4413      	add	r3, r2
 80105da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105ea:	b29a      	uxth	r2, r3
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	801a      	strh	r2, [r3, #0]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	2b3e      	cmp	r3, #62	; 0x3e
 80105f6:	d91d      	bls.n	8010634 <USB_ActivateEndpoint+0x2b0>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	095b      	lsrs	r3, r3, #5
 80105fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	f003 031f 	and.w	r3, r3, #31
 8010608:	2b00      	cmp	r3, #0
 801060a:	d102      	bne.n	8010612 <USB_ActivateEndpoint+0x28e>
 801060c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801060e:	3b01      	subs	r3, #1
 8010610:	66bb      	str	r3, [r7, #104]	; 0x68
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	b29a      	uxth	r2, r3
 8010618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801061a:	b29b      	uxth	r3, r3
 801061c:	029b      	lsls	r3, r3, #10
 801061e:	b29b      	uxth	r3, r3
 8010620:	4313      	orrs	r3, r2
 8010622:	b29b      	uxth	r3, r3
 8010624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801062c:	b29a      	uxth	r2, r3
 801062e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010630:	801a      	strh	r2, [r3, #0]
 8010632:	e026      	b.n	8010682 <USB_ActivateEndpoint+0x2fe>
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	691b      	ldr	r3, [r3, #16]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d10a      	bne.n	8010652 <USB_ActivateEndpoint+0x2ce>
 801063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	b29b      	uxth	r3, r3
 8010642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801064a:	b29a      	uxth	r2, r3
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	801a      	strh	r2, [r3, #0]
 8010650:	e017      	b.n	8010682 <USB_ActivateEndpoint+0x2fe>
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	085b      	lsrs	r3, r3, #1
 8010658:	66bb      	str	r3, [r7, #104]	; 0x68
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	691b      	ldr	r3, [r3, #16]
 801065e:	f003 0301 	and.w	r3, r3, #1
 8010662:	2b00      	cmp	r3, #0
 8010664:	d002      	beq.n	801066c <USB_ActivateEndpoint+0x2e8>
 8010666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010668:	3301      	adds	r3, #1
 801066a:	66bb      	str	r3, [r7, #104]	; 0x68
 801066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	b29a      	uxth	r2, r3
 8010672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010674:	b29b      	uxth	r3, r3
 8010676:	029b      	lsls	r3, r3, #10
 8010678:	b29b      	uxth	r3, r3
 801067a:	4313      	orrs	r3, r2
 801067c:	b29a      	uxth	r2, r3
 801067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010680:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	4413      	add	r3, r2
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010696:	2b00      	cmp	r3, #0
 8010698:	d01b      	beq.n	80106d2 <USB_ActivateEndpoint+0x34e>
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	4413      	add	r3, r2
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106b0:	843b      	strh	r3, [r7, #32]
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	441a      	add	r2, r3
 80106bc:	8c3b      	ldrh	r3, [r7, #32]
 80106be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80106ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d124      	bne.n	8010724 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	4413      	add	r3, r2
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80106ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80106f0:	83bb      	strh	r3, [r7, #28]
 80106f2:	8bbb      	ldrh	r3, [r7, #28]
 80106f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80106f8:	83bb      	strh	r3, [r7, #28]
 80106fa:	8bbb      	ldrh	r3, [r7, #28]
 80106fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010700:	83bb      	strh	r3, [r7, #28]
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	441a      	add	r2, r3
 801070c:	8bbb      	ldrh	r3, [r7, #28]
 801070e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801071a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801071e:	b29b      	uxth	r3, r3
 8010720:	8013      	strh	r3, [r2, #0]
 8010722:	e1ea      	b.n	8010afa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	009b      	lsls	r3, r3, #2
 801072c:	4413      	add	r3, r2
 801072e:	881b      	ldrh	r3, [r3, #0]
 8010730:	b29b      	uxth	r3, r3
 8010732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801073a:	83fb      	strh	r3, [r7, #30]
 801073c:	8bfb      	ldrh	r3, [r7, #30]
 801073e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010742:	83fb      	strh	r3, [r7, #30]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	441a      	add	r2, r3
 801074e:	8bfb      	ldrh	r3, [r7, #30]
 8010750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010760:	b29b      	uxth	r3, r3
 8010762:	8013      	strh	r3, [r2, #0]
 8010764:	e1c9      	b.n	8010afa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	78db      	ldrb	r3, [r3, #3]
 801076a:	2b02      	cmp	r3, #2
 801076c:	d11e      	bne.n	80107ac <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	4413      	add	r3, r2
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	b29b      	uxth	r3, r3
 801077c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010784:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	441a      	add	r2, r3
 8010792:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801079a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801079e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80107a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	8013      	strh	r3, [r2, #0]
 80107aa:	e01d      	b.n	80107e8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	881b      	ldrh	r3, [r3, #0]
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80107be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	441a      	add	r2, r3
 80107d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80107d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	461a      	mov	r2, r3
 80107f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107f8:	4413      	add	r3, r2
 80107fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	00da      	lsls	r2, r3, #3
 8010802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010804:	4413      	add	r3, r2
 8010806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801080a:	65bb      	str	r3, [r7, #88]	; 0x58
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	891b      	ldrh	r3, [r3, #8]
 8010810:	085b      	lsrs	r3, r3, #1
 8010812:	b29b      	uxth	r3, r3
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	b29a      	uxth	r2, r3
 8010818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801081a:	801a      	strh	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	657b      	str	r3, [r7, #84]	; 0x54
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010826:	b29b      	uxth	r3, r3
 8010828:	461a      	mov	r2, r3
 801082a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801082c:	4413      	add	r3, r2
 801082e:	657b      	str	r3, [r7, #84]	; 0x54
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	00da      	lsls	r2, r3, #3
 8010836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010838:	4413      	add	r3, r2
 801083a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801083e:	653b      	str	r3, [r7, #80]	; 0x50
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	895b      	ldrh	r3, [r3, #10]
 8010844:	085b      	lsrs	r3, r3, #1
 8010846:	b29b      	uxth	r3, r3
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	b29a      	uxth	r2, r3
 801084c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801084e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	785b      	ldrb	r3, [r3, #1]
 8010854:	2b00      	cmp	r3, #0
 8010856:	f040 8093 	bne.w	8010980 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	4413      	add	r3, r2
 8010864:	881b      	ldrh	r3, [r3, #0]
 8010866:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801086a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010872:	2b00      	cmp	r3, #0
 8010874:	d01b      	beq.n	80108ae <USB_ActivateEndpoint+0x52a>
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	781b      	ldrb	r3, [r3, #0]
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4413      	add	r3, r2
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	b29b      	uxth	r3, r3
 8010884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801088c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	441a      	add	r2, r3
 8010898:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801089a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801089e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80108a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	009b      	lsls	r3, r3, #2
 80108b6:	4413      	add	r3, r2
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80108bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80108be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d01b      	beq.n	80108fe <USB_ActivateEndpoint+0x57a>
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	4413      	add	r3, r2
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80108d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	441a      	add	r2, r3
 80108e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80108ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80108ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80108f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80108f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	b29b      	uxth	r3, r3
 801090c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010914:	873b      	strh	r3, [r7, #56]	; 0x38
 8010916:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010918:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801091c:	873b      	strh	r3, [r7, #56]	; 0x38
 801091e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010920:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010924:	873b      	strh	r3, [r7, #56]	; 0x38
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	441a      	add	r2, r3
 8010930:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801093e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010942:	b29b      	uxth	r3, r3
 8010944:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	4413      	add	r3, r2
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	b29b      	uxth	r3, r3
 8010954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801095c:	86fb      	strh	r3, [r7, #54]	; 0x36
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	441a      	add	r2, r3
 8010968:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801096a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801096e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801097a:	b29b      	uxth	r3, r3
 801097c:	8013      	strh	r3, [r2, #0]
 801097e:	e0bc      	b.n	8010afa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	881b      	ldrh	r3, [r3, #0]
 801098c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01d      	beq.n	80109d8 <USB_ActivateEndpoint+0x654>
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	441a      	add	r2, r3
 80109c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80109c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80109d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4413      	add	r3, r2
 80109e2:	881b      	ldrh	r3, [r3, #0]
 80109e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80109e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80109ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d01d      	beq.n	8010a30 <USB_ActivateEndpoint+0x6ac>
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	441a      	add	r2, r3
 8010a18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	78db      	ldrb	r3, [r3, #3]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d024      	beq.n	8010a82 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010a52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010a56:	f083 0320 	eor.w	r3, r3, #32
 8010a5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	441a      	add	r2, r3
 8010a68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	8013      	strh	r3, [r2, #0]
 8010a80:	e01d      	b.n	8010abe <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	4413      	add	r3, r2
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a98:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	441a      	add	r2, r3
 8010aa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	4413      	add	r3, r2
 8010ac8:	881b      	ldrh	r3, [r3, #0]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ad4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	441a      	add	r2, r3
 8010ae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3774      	adds	r7, #116	; 0x74
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b08d      	sub	sp, #52	; 0x34
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	7b1b      	ldrb	r3, [r3, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f040 808e 	bne.w	8010c3c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	785b      	ldrb	r3, [r3, #1]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d044      	beq.n	8010bb2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	781b      	ldrb	r3, [r3, #0]
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	4413      	add	r3, r2
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	81bb      	strh	r3, [r7, #12]
 8010b36:	89bb      	ldrh	r3, [r7, #12]
 8010b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d01b      	beq.n	8010b78 <USB_DeactivateEndpoint+0x6c>
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	b29b      	uxth	r3, r3
 8010b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b56:	817b      	strh	r3, [r7, #10]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	441a      	add	r2, r3
 8010b62:	897b      	ldrh	r3, [r7, #10]
 8010b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4413      	add	r3, r2
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b8e:	813b      	strh	r3, [r7, #8]
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	441a      	add	r2, r3
 8010b9a:	893b      	ldrh	r3, [r7, #8]
 8010b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	8013      	strh	r3, [r2, #0]
 8010bb0:	e192      	b.n	8010ed8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	009b      	lsls	r3, r3, #2
 8010bba:	4413      	add	r3, r2
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	827b      	strh	r3, [r7, #18]
 8010bc0:	8a7b      	ldrh	r3, [r7, #18]
 8010bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d01b      	beq.n	8010c02 <USB_DeactivateEndpoint+0xf6>
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	4413      	add	r3, r2
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010be0:	823b      	strh	r3, [r7, #16]
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	441a      	add	r2, r3
 8010bec:	8a3b      	ldrh	r3, [r7, #16]
 8010bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4413      	add	r3, r2
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c18:	81fb      	strh	r3, [r7, #14]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	441a      	add	r2, r3
 8010c24:	89fb      	ldrh	r3, [r7, #14]
 8010c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	8013      	strh	r3, [r2, #0]
 8010c3a:	e14d      	b.n	8010ed8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	785b      	ldrb	r3, [r3, #1]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f040 80a5 	bne.w	8010d90 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c46:	687a      	ldr	r2, [r7, #4]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	4413      	add	r3, r2
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	843b      	strh	r3, [r7, #32]
 8010c54:	8c3b      	ldrh	r3, [r7, #32]
 8010c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d01b      	beq.n	8010c96 <USB_DeactivateEndpoint+0x18a>
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	4413      	add	r3, r2
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c74:	83fb      	strh	r3, [r7, #30]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	441a      	add	r2, r3
 8010c80:	8bfb      	ldrh	r3, [r7, #30]
 8010c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	881b      	ldrh	r3, [r3, #0]
 8010ca2:	83bb      	strh	r3, [r7, #28]
 8010ca4:	8bbb      	ldrh	r3, [r7, #28]
 8010ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01b      	beq.n	8010ce6 <USB_DeactivateEndpoint+0x1da>
 8010cae:	687a      	ldr	r2, [r7, #4]
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	009b      	lsls	r3, r3, #2
 8010cb6:	4413      	add	r3, r2
 8010cb8:	881b      	ldrh	r3, [r3, #0]
 8010cba:	b29b      	uxth	r3, r3
 8010cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cc4:	837b      	strh	r3, [r7, #26]
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	441a      	add	r2, r3
 8010cd0:	8b7b      	ldrh	r3, [r7, #26]
 8010cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cde:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cfc:	833b      	strh	r3, [r7, #24]
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	009b      	lsls	r3, r3, #2
 8010d06:	441a      	add	r2, r3
 8010d08:	8b3b      	ldrh	r3, [r7, #24]
 8010d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	4413      	add	r3, r2
 8010d28:	881b      	ldrh	r3, [r3, #0]
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d34:	82fb      	strh	r3, [r7, #22]
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	441a      	add	r2, r3
 8010d40:	8afb      	ldrh	r3, [r7, #22]
 8010d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	881b      	ldrh	r3, [r3, #0]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d6c:	82bb      	strh	r3, [r7, #20]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	441a      	add	r2, r3
 8010d78:	8abb      	ldrh	r3, [r7, #20]
 8010d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	8013      	strh	r3, [r2, #0]
 8010d8e:	e0a3      	b.n	8010ed8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4413      	add	r3, r2
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010d9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d01b      	beq.n	8010de0 <USB_DeactivateEndpoint+0x2d4>
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	4413      	add	r3, r2
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	441a      	add	r2, r3
 8010dca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	009b      	lsls	r3, r3, #2
 8010de8:	4413      	add	r3, r2
 8010dea:	881b      	ldrh	r3, [r3, #0]
 8010dec:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010dee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d01b      	beq.n	8010e30 <USB_DeactivateEndpoint+0x324>
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	009b      	lsls	r3, r3, #2
 8010e00:	4413      	add	r3, r2
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	441a      	add	r2, r3
 8010e1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	4413      	add	r3, r2
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	781b      	ldrb	r3, [r3, #0]
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	441a      	add	r2, r3
 8010e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	009b      	lsls	r3, r3, #2
 8010e70:	4413      	add	r3, r2
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010e80:	687a      	ldr	r2, [r7, #4]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	009b      	lsls	r3, r3, #2
 8010e88:	441a      	add	r2, r3
 8010e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	4413      	add	r3, r2
 8010eaa:	881b      	ldrh	r3, [r3, #0]
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010eb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	441a      	add	r2, r3
 8010ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010ed8:	2300      	movs	r3, #0
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3734      	adds	r7, #52	; 0x34
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr

08010ee6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b0c2      	sub	sp, #264	; 0x108
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ef4:	6018      	str	r0, [r3, #0]
 8010ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010efe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	785b      	ldrb	r3, [r3, #1]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	f040 86b7 	bne.w	8011c80 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	699a      	ldr	r2, [r3, #24]
 8010f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	691b      	ldr	r3, [r3, #16]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d908      	bls.n	8010f40 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010f3e:	e007      	b.n	8010f50 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	699b      	ldr	r3, [r3, #24]
 8010f4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	7b1b      	ldrb	r3, [r3, #12]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d13a      	bne.n	8010fd6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	6959      	ldr	r1, [r3, #20]
 8010f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	88da      	ldrh	r2, [r3, #6]
 8010f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010f82:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010f86:	6800      	ldr	r0, [r0, #0]
 8010f88:	f001 fc98 	bl	80128bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	613b      	str	r3, [r7, #16]
 8010f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	461a      	mov	r2, r3
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	4413      	add	r3, r2
 8010fae:	613b      	str	r3, [r7, #16]
 8010fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	00da      	lsls	r2, r3, #3
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010fc6:	60fb      	str	r3, [r7, #12]
 8010fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	801a      	strh	r2, [r3, #0]
 8010fd2:	f000 be1f 	b.w	8011c14 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	78db      	ldrb	r3, [r3, #3]
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	f040 8462 	bne.w	80118ac <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	6a1a      	ldr	r2, [r3, #32]
 8010ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	429a      	cmp	r2, r3
 8011002:	f240 83df 	bls.w	80117c4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	009b      	lsls	r3, r3, #2
 801101e:	4413      	add	r3, r2
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b29b      	uxth	r3, r3
 8011024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801102c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801103e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	441a      	add	r2, r3
 801104a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801104e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011056:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801105e:	b29b      	uxth	r3, r3
 8011060:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	6a1a      	ldr	r2, [r3, #32]
 801106e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011072:	1ad2      	subs	r2, r2, r3
 8011074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801108e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	b29b      	uxth	r3, r3
 801109e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f000 81c7 	beq.w	8011436 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80110a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	633b      	str	r3, [r7, #48]	; 0x30
 80110b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	785b      	ldrb	r3, [r3, #1]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d177      	bne.n	80111b4 <USB_EPStartXfer+0x2ce>
 80110c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80110d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80110de:	b29b      	uxth	r3, r3
 80110e0:	461a      	mov	r2, r3
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	4413      	add	r3, r2
 80110e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80110e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	00da      	lsls	r2, r3, #3
 80110f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f8:	4413      	add	r3, r2
 80110fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80110fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	881b      	ldrh	r3, [r3, #0]
 8011104:	b29b      	uxth	r3, r3
 8011106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801110a:	b29a      	uxth	r2, r3
 801110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110e:	801a      	strh	r2, [r3, #0]
 8011110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011114:	2b3e      	cmp	r3, #62	; 0x3e
 8011116:	d921      	bls.n	801115c <USB_EPStartXfer+0x276>
 8011118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801111c:	095b      	lsrs	r3, r3, #5
 801111e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011126:	f003 031f 	and.w	r3, r3, #31
 801112a:	2b00      	cmp	r3, #0
 801112c:	d104      	bne.n	8011138 <USB_EPStartXfer+0x252>
 801112e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011132:	3b01      	subs	r3, #1
 8011134:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	b29a      	uxth	r2, r3
 801113e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011142:	b29b      	uxth	r3, r3
 8011144:	029b      	lsls	r3, r3, #10
 8011146:	b29b      	uxth	r3, r3
 8011148:	4313      	orrs	r3, r2
 801114a:	b29b      	uxth	r3, r3
 801114c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011154:	b29a      	uxth	r2, r3
 8011156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011158:	801a      	strh	r2, [r3, #0]
 801115a:	e050      	b.n	80111fe <USB_EPStartXfer+0x318>
 801115c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011160:	2b00      	cmp	r3, #0
 8011162:	d10a      	bne.n	801117a <USB_EPStartXfer+0x294>
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	b29b      	uxth	r3, r3
 801116a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801116e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011172:	b29a      	uxth	r2, r3
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	801a      	strh	r2, [r3, #0]
 8011178:	e041      	b.n	80111fe <USB_EPStartXfer+0x318>
 801117a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801117e:	085b      	lsrs	r3, r3, #1
 8011180:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011188:	f003 0301 	and.w	r3, r3, #1
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <USB_EPStartXfer+0x2b4>
 8011190:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011194:	3301      	adds	r3, #1
 8011196:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	881b      	ldrh	r3, [r3, #0]
 801119e:	b29a      	uxth	r2, r3
 80111a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	029b      	lsls	r3, r3, #10
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	4313      	orrs	r3, r2
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b0:	801a      	strh	r2, [r3, #0]
 80111b2:	e024      	b.n	80111fe <USB_EPStartXfer+0x318>
 80111b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	785b      	ldrb	r3, [r3, #1]
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d11c      	bne.n	80111fe <USB_EPStartXfer+0x318>
 80111c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	461a      	mov	r2, r3
 80111d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d8:	4413      	add	r3, r2
 80111da:	633b      	str	r3, [r7, #48]	; 0x30
 80111dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	00da      	lsls	r2, r3, #3
 80111ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ec:	4413      	add	r3, r2
 80111ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80111f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80111fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	895b      	ldrh	r3, [r3, #10]
 801120a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801120e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6959      	ldr	r1, [r3, #20]
 801121a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801121e:	b29b      	uxth	r3, r3
 8011220:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011224:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011228:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801122c:	6800      	ldr	r0, [r0, #0]
 801122e:	f001 fb45 	bl	80128bc <USB_WritePMA>
            ep->xfer_buff += len;
 8011232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	695a      	ldr	r2, [r3, #20]
 801123e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011242:	441a      	add	r2, r3
 8011244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	6a1a      	ldr	r2, [r3, #32]
 801125c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	429a      	cmp	r2, r3
 801126a:	d90f      	bls.n	801128c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801126c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	6a1a      	ldr	r2, [r3, #32]
 8011278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801127c:	1ad2      	subs	r2, r2, r3
 801127e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	621a      	str	r2, [r3, #32]
 801128a:	e00e      	b.n	80112aa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801128c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	6a1b      	ldr	r3, [r3, #32]
 8011298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801129c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2200      	movs	r2, #0
 80112a8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80112aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	785b      	ldrb	r3, [r3, #1]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d177      	bne.n	80113aa <USB_EPStartXfer+0x4c4>
 80112ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	61bb      	str	r3, [r7, #24]
 80112c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	461a      	mov	r2, r3
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	4413      	add	r3, r2
 80112dc:	61bb      	str	r3, [r7, #24]
 80112de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	00da      	lsls	r2, r3, #3
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	4413      	add	r3, r2
 80112f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011300:	b29a      	uxth	r2, r3
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	801a      	strh	r2, [r3, #0]
 8011306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801130a:	2b3e      	cmp	r3, #62	; 0x3e
 801130c:	d921      	bls.n	8011352 <USB_EPStartXfer+0x46c>
 801130e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011312:	095b      	lsrs	r3, r3, #5
 8011314:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801131c:	f003 031f 	and.w	r3, r3, #31
 8011320:	2b00      	cmp	r3, #0
 8011322:	d104      	bne.n	801132e <USB_EPStartXfer+0x448>
 8011324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011328:	3b01      	subs	r3, #1
 801132a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	b29a      	uxth	r2, r3
 8011334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011338:	b29b      	uxth	r3, r3
 801133a:	029b      	lsls	r3, r3, #10
 801133c:	b29b      	uxth	r3, r3
 801133e:	4313      	orrs	r3, r2
 8011340:	b29b      	uxth	r3, r3
 8011342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801134a:	b29a      	uxth	r2, r3
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	801a      	strh	r2, [r3, #0]
 8011350:	e056      	b.n	8011400 <USB_EPStartXfer+0x51a>
 8011352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10a      	bne.n	8011370 <USB_EPStartXfer+0x48a>
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	881b      	ldrh	r3, [r3, #0]
 801135e:	b29b      	uxth	r3, r3
 8011360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011368:	b29a      	uxth	r2, r3
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	801a      	strh	r2, [r3, #0]
 801136e:	e047      	b.n	8011400 <USB_EPStartXfer+0x51a>
 8011370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011374:	085b      	lsrs	r3, r3, #1
 8011376:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801137a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801137e:	f003 0301 	and.w	r3, r3, #1
 8011382:	2b00      	cmp	r3, #0
 8011384:	d004      	beq.n	8011390 <USB_EPStartXfer+0x4aa>
 8011386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801138a:	3301      	adds	r3, #1
 801138c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	881b      	ldrh	r3, [r3, #0]
 8011394:	b29a      	uxth	r2, r3
 8011396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801139a:	b29b      	uxth	r3, r3
 801139c:	029b      	lsls	r3, r3, #10
 801139e:	b29b      	uxth	r3, r3
 80113a0:	4313      	orrs	r3, r2
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	801a      	strh	r2, [r3, #0]
 80113a8:	e02a      	b.n	8011400 <USB_EPStartXfer+0x51a>
 80113aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	785b      	ldrb	r3, [r3, #1]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d122      	bne.n	8011400 <USB_EPStartXfer+0x51a>
 80113ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	623b      	str	r3, [r7, #32]
 80113c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	461a      	mov	r2, r3
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	4413      	add	r3, r2
 80113dc:	623b      	str	r3, [r7, #32]
 80113de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	00da      	lsls	r2, r3, #3
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	4413      	add	r3, r2
 80113f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80113f4:	61fb      	str	r3, [r7, #28]
 80113f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	891b      	ldrh	r3, [r3, #8]
 801140c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	6959      	ldr	r1, [r3, #20]
 801141c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011420:	b29b      	uxth	r3, r3
 8011422:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011426:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801142a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801142e:	6800      	ldr	r0, [r0, #0]
 8011430:	f001 fa44 	bl	80128bc <USB_WritePMA>
 8011434:	e3ee      	b.n	8011c14 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	785b      	ldrb	r3, [r3, #1]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d177      	bne.n	8011536 <USB_EPStartXfer+0x650>
 8011446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	64bb      	str	r3, [r7, #72]	; 0x48
 8011452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011460:	b29b      	uxth	r3, r3
 8011462:	461a      	mov	r2, r3
 8011464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011466:	4413      	add	r3, r2
 8011468:	64bb      	str	r3, [r7, #72]	; 0x48
 801146a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801146e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	00da      	lsls	r2, r3, #3
 8011478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801147a:	4413      	add	r3, r2
 801147c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011480:	647b      	str	r3, [r7, #68]	; 0x44
 8011482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	b29b      	uxth	r3, r3
 8011488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801148c:	b29a      	uxth	r2, r3
 801148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011490:	801a      	strh	r2, [r3, #0]
 8011492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011496:	2b3e      	cmp	r3, #62	; 0x3e
 8011498:	d921      	bls.n	80114de <USB_EPStartXfer+0x5f8>
 801149a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801149e:	095b      	lsrs	r3, r3, #5
 80114a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80114a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114a8:	f003 031f 	and.w	r3, r3, #31
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d104      	bne.n	80114ba <USB_EPStartXfer+0x5d4>
 80114b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114b4:	3b01      	subs	r3, #1
 80114b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80114ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	b29a      	uxth	r2, r3
 80114c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	029b      	lsls	r3, r3, #10
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	4313      	orrs	r3, r2
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114da:	801a      	strh	r2, [r3, #0]
 80114dc:	e056      	b.n	801158c <USB_EPStartXfer+0x6a6>
 80114de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d10a      	bne.n	80114fc <USB_EPStartXfer+0x616>
 80114e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114f8:	801a      	strh	r2, [r3, #0]
 80114fa:	e047      	b.n	801158c <USB_EPStartXfer+0x6a6>
 80114fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011500:	085b      	lsrs	r3, r3, #1
 8011502:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801150a:	f003 0301 	and.w	r3, r3, #1
 801150e:	2b00      	cmp	r3, #0
 8011510:	d004      	beq.n	801151c <USB_EPStartXfer+0x636>
 8011512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011516:	3301      	adds	r3, #1
 8011518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801151c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801151e:	881b      	ldrh	r3, [r3, #0]
 8011520:	b29a      	uxth	r2, r3
 8011522:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011526:	b29b      	uxth	r3, r3
 8011528:	029b      	lsls	r3, r3, #10
 801152a:	b29b      	uxth	r3, r3
 801152c:	4313      	orrs	r3, r2
 801152e:	b29a      	uxth	r2, r3
 8011530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011532:	801a      	strh	r2, [r3, #0]
 8011534:	e02a      	b.n	801158c <USB_EPStartXfer+0x6a6>
 8011536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801153a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	785b      	ldrb	r3, [r3, #1]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d122      	bne.n	801158c <USB_EPStartXfer+0x6a6>
 8011546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801154a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	653b      	str	r3, [r7, #80]	; 0x50
 8011552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011560:	b29b      	uxth	r3, r3
 8011562:	461a      	mov	r2, r3
 8011564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011566:	4413      	add	r3, r2
 8011568:	653b      	str	r3, [r7, #80]	; 0x50
 801156a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801156e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	00da      	lsls	r2, r3, #3
 8011578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801157a:	4413      	add	r3, r2
 801157c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011586:	b29a      	uxth	r2, r3
 8011588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801158c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	891b      	ldrh	r3, [r3, #8]
 8011598:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801159c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6959      	ldr	r1, [r3, #20]
 80115a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80115b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80115b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80115ba:	6800      	ldr	r0, [r0, #0]
 80115bc:	f001 f97e 	bl	80128bc <USB_WritePMA>
            ep->xfer_buff += len;
 80115c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	695a      	ldr	r2, [r3, #20]
 80115cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115d0:	441a      	add	r2, r3
 80115d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80115de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	6a1a      	ldr	r2, [r3, #32]
 80115ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d90f      	bls.n	801161a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80115fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	6a1a      	ldr	r2, [r3, #32]
 8011606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801160a:	1ad2      	subs	r2, r2, r3
 801160c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	621a      	str	r2, [r3, #32]
 8011618:	e00e      	b.n	8011638 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 801161a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801161e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801162a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801162e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2200      	movs	r2, #0
 8011636:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801163c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	643b      	str	r3, [r7, #64]	; 0x40
 8011644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	785b      	ldrb	r3, [r3, #1]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d177      	bne.n	8011744 <USB_EPStartXfer+0x85e>
 8011654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011664:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801166e:	b29b      	uxth	r3, r3
 8011670:	461a      	mov	r2, r3
 8011672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011674:	4413      	add	r3, r2
 8011676:	63bb      	str	r3, [r7, #56]	; 0x38
 8011678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	00da      	lsls	r2, r3, #3
 8011686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011688:	4413      	add	r3, r2
 801168a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801168e:	637b      	str	r3, [r7, #52]	; 0x34
 8011690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011692:	881b      	ldrh	r3, [r3, #0]
 8011694:	b29b      	uxth	r3, r3
 8011696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801169a:	b29a      	uxth	r2, r3
 801169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801169e:	801a      	strh	r2, [r3, #0]
 80116a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116a4:	2b3e      	cmp	r3, #62	; 0x3e
 80116a6:	d921      	bls.n	80116ec <USB_EPStartXfer+0x806>
 80116a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116ac:	095b      	lsrs	r3, r3, #5
 80116ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80116b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116b6:	f003 031f 	and.w	r3, r3, #31
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d104      	bne.n	80116c8 <USB_EPStartXfer+0x7e2>
 80116be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116c2:	3b01      	subs	r3, #1
 80116c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80116c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ca:	881b      	ldrh	r3, [r3, #0]
 80116cc:	b29a      	uxth	r2, r3
 80116ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	029b      	lsls	r3, r3, #10
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	4313      	orrs	r3, r2
 80116da:	b29b      	uxth	r3, r3
 80116dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e8:	801a      	strh	r2, [r3, #0]
 80116ea:	e050      	b.n	801178e <USB_EPStartXfer+0x8a8>
 80116ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d10a      	bne.n	801170a <USB_EPStartXfer+0x824>
 80116f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011702:	b29a      	uxth	r2, r3
 8011704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011706:	801a      	strh	r2, [r3, #0]
 8011708:	e041      	b.n	801178e <USB_EPStartXfer+0x8a8>
 801170a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801170e:	085b      	lsrs	r3, r3, #1
 8011710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d004      	beq.n	801172a <USB_EPStartXfer+0x844>
 8011720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011724:	3301      	adds	r3, #1
 8011726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	b29a      	uxth	r2, r3
 8011730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011734:	b29b      	uxth	r3, r3
 8011736:	029b      	lsls	r3, r3, #10
 8011738:	b29b      	uxth	r3, r3
 801173a:	4313      	orrs	r3, r2
 801173c:	b29a      	uxth	r2, r3
 801173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011740:	801a      	strh	r2, [r3, #0]
 8011742:	e024      	b.n	801178e <USB_EPStartXfer+0x8a8>
 8011744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	785b      	ldrb	r3, [r3, #1]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d11c      	bne.n	801178e <USB_EPStartXfer+0x8a8>
 8011754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011762:	b29b      	uxth	r3, r3
 8011764:	461a      	mov	r2, r3
 8011766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011768:	4413      	add	r3, r2
 801176a:	643b      	str	r3, [r7, #64]	; 0x40
 801176c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	781b      	ldrb	r3, [r3, #0]
 8011778:	00da      	lsls	r2, r3, #3
 801177a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801177c:	4413      	add	r3, r2
 801177e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011788:	b29a      	uxth	r2, r3
 801178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801178c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801178e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	895b      	ldrh	r3, [r3, #10]
 801179a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801179e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	6959      	ldr	r1, [r3, #20]
 80117aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80117b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80117b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80117bc:	6800      	ldr	r0, [r0, #0]
 80117be:	f001 f87d 	bl	80128bc <USB_WritePMA>
 80117c2:	e227      	b.n	8011c14 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80117c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	6a1b      	ldr	r3, [r3, #32]
 80117d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80117d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	4413      	add	r3, r2
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80117f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80117fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801180c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	441a      	add	r2, r3
 8011818:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 801181c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801182c:	b29b      	uxth	r3, r3
 801182e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801183c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801184a:	b29b      	uxth	r3, r3
 801184c:	461a      	mov	r2, r3
 801184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011850:	4413      	add	r3, r2
 8011852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	00da      	lsls	r2, r3, #3
 8011862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011864:	4413      	add	r3, r2
 8011866:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801186a:	65bb      	str	r3, [r7, #88]	; 0x58
 801186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011870:	b29a      	uxth	r2, r3
 8011872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011874:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	891b      	ldrh	r3, [r3, #8]
 8011882:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	6959      	ldr	r1, [r3, #20]
 8011892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011896:	b29b      	uxth	r3, r3
 8011898:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801189c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80118a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80118a4:	6800      	ldr	r0, [r0, #0]
 80118a6:	f001 f809 	bl	80128bc <USB_WritePMA>
 80118aa:	e1b3      	b.n	8011c14 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80118ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6a1a      	ldr	r2, [r3, #32]
 80118b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118bc:	1ad2      	subs	r2, r2, r3
 80118be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80118ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4413      	add	r3, r2
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f000 80c6 	beq.w	8011a7e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80118f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	673b      	str	r3, [r7, #112]	; 0x70
 80118fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	785b      	ldrb	r3, [r3, #1]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d177      	bne.n	80119fe <USB_EPStartXfer+0xb18>
 801190e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	66bb      	str	r3, [r7, #104]	; 0x68
 801191a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801191e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011928:	b29b      	uxth	r3, r3
 801192a:	461a      	mov	r2, r3
 801192c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801192e:	4413      	add	r3, r2
 8011930:	66bb      	str	r3, [r7, #104]	; 0x68
 8011932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	00da      	lsls	r2, r3, #3
 8011940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011942:	4413      	add	r3, r2
 8011944:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011948:	667b      	str	r3, [r7, #100]	; 0x64
 801194a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	b29b      	uxth	r3, r3
 8011950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011954:	b29a      	uxth	r2, r3
 8011956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011958:	801a      	strh	r2, [r3, #0]
 801195a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801195e:	2b3e      	cmp	r3, #62	; 0x3e
 8011960:	d921      	bls.n	80119a6 <USB_EPStartXfer+0xac0>
 8011962:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011966:	095b      	lsrs	r3, r3, #5
 8011968:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801196c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011970:	f003 031f 	and.w	r3, r3, #31
 8011974:	2b00      	cmp	r3, #0
 8011976:	d104      	bne.n	8011982 <USB_EPStartXfer+0xa9c>
 8011978:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801197c:	3b01      	subs	r3, #1
 801197e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011982:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b29a      	uxth	r2, r3
 8011988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801198c:	b29b      	uxth	r3, r3
 801198e:	029b      	lsls	r3, r3, #10
 8011990:	b29b      	uxth	r3, r3
 8011992:	4313      	orrs	r3, r2
 8011994:	b29b      	uxth	r3, r3
 8011996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801199a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801199e:	b29a      	uxth	r2, r3
 80119a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119a2:	801a      	strh	r2, [r3, #0]
 80119a4:	e050      	b.n	8011a48 <USB_EPStartXfer+0xb62>
 80119a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10a      	bne.n	80119c4 <USB_EPStartXfer+0xade>
 80119ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119b0:	881b      	ldrh	r3, [r3, #0]
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119bc:	b29a      	uxth	r2, r3
 80119be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119c0:	801a      	strh	r2, [r3, #0]
 80119c2:	e041      	b.n	8011a48 <USB_EPStartXfer+0xb62>
 80119c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119c8:	085b      	lsrs	r3, r3, #1
 80119ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80119ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119d2:	f003 0301 	and.w	r3, r3, #1
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d004      	beq.n	80119e4 <USB_EPStartXfer+0xafe>
 80119da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80119de:	3301      	adds	r3, #1
 80119e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80119e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119e6:	881b      	ldrh	r3, [r3, #0]
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	029b      	lsls	r3, r3, #10
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4313      	orrs	r3, r2
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119fa:	801a      	strh	r2, [r3, #0]
 80119fc:	e024      	b.n	8011a48 <USB_EPStartXfer+0xb62>
 80119fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	785b      	ldrb	r3, [r3, #1]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d11c      	bne.n	8011a48 <USB_EPStartXfer+0xb62>
 8011a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	461a      	mov	r2, r3
 8011a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a22:	4413      	add	r3, r2
 8011a24:	673b      	str	r3, [r7, #112]	; 0x70
 8011a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	00da      	lsls	r2, r3, #3
 8011a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a36:	4413      	add	r3, r2
 8011a38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	895b      	ldrh	r3, [r3, #10]
 8011a54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	6959      	ldr	r1, [r3, #20]
 8011a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011a6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011a72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011a76:	6800      	ldr	r0, [r0, #0]
 8011a78:	f000 ff20 	bl	80128bc <USB_WritePMA>
 8011a7c:	e0ca      	b.n	8011c14 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	785b      	ldrb	r3, [r3, #1]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d177      	bne.n	8011b7e <USB_EPStartXfer+0xc98>
 8011a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	461a      	mov	r2, r3
 8011aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011aae:	4413      	add	r3, r2
 8011ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	00da      	lsls	r2, r3, #3
 8011ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8011aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ad8:	801a      	strh	r2, [r3, #0]
 8011ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ade:	2b3e      	cmp	r3, #62	; 0x3e
 8011ae0:	d921      	bls.n	8011b26 <USB_EPStartXfer+0xc40>
 8011ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ae6:	095b      	lsrs	r3, r3, #5
 8011ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af0:	f003 031f 	and.w	r3, r3, #31
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d104      	bne.n	8011b02 <USB_EPStartXfer+0xc1c>
 8011af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011afc:	3b01      	subs	r3, #1
 8011afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b04:	881b      	ldrh	r3, [r3, #0]
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	029b      	lsls	r3, r3, #10
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4313      	orrs	r3, r2
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b22:	801a      	strh	r2, [r3, #0]
 8011b24:	e05c      	b.n	8011be0 <USB_EPStartXfer+0xcfa>
 8011b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10a      	bne.n	8011b44 <USB_EPStartXfer+0xc5e>
 8011b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b30:	881b      	ldrh	r3, [r3, #0]
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b3c:	b29a      	uxth	r2, r3
 8011b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b40:	801a      	strh	r2, [r3, #0]
 8011b42:	e04d      	b.n	8011be0 <USB_EPStartXfer+0xcfa>
 8011b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b48:	085b      	lsrs	r3, r3, #1
 8011b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b52:	f003 0301 	and.w	r3, r3, #1
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d004      	beq.n	8011b64 <USB_EPStartXfer+0xc7e>
 8011b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b66:	881b      	ldrh	r3, [r3, #0]
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	029b      	lsls	r3, r3, #10
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4313      	orrs	r3, r2
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b7a:	801a      	strh	r2, [r3, #0]
 8011b7c:	e030      	b.n	8011be0 <USB_EPStartXfer+0xcfa>
 8011b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	785b      	ldrb	r3, [r3, #1]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d128      	bne.n	8011be0 <USB_EPStartXfer+0xcfa>
 8011b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	461a      	mov	r2, r3
 8011bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bb2:	4413      	add	r3, r2
 8011bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	00da      	lsls	r2, r3, #3
 8011bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bca:	4413      	add	r3, r2
 8011bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	891b      	ldrh	r3, [r3, #8]
 8011bec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	6959      	ldr	r1, [r3, #20]
 8011bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011c06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011c0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c0e:	6800      	ldr	r0, [r0, #0]
 8011c10:	f000 fe54 	bl	80128bc <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	4413      	add	r3, r2
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c3a:	817b      	strh	r3, [r7, #10]
 8011c3c:	897b      	ldrh	r3, [r7, #10]
 8011c3e:	f083 0310 	eor.w	r3, r3, #16
 8011c42:	817b      	strh	r3, [r7, #10]
 8011c44:	897b      	ldrh	r3, [r7, #10]
 8011c46:	f083 0320 	eor.w	r3, r3, #32
 8011c4a:	817b      	strh	r3, [r7, #10]
 8011c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	009b      	lsls	r3, r3, #2
 8011c64:	441a      	add	r2, r3
 8011c66:	897b      	ldrh	r3, [r7, #10]
 8011c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	8013      	strh	r3, [r2, #0]
 8011c7c:	f000 bcde 	b.w	801263c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	7b1b      	ldrb	r3, [r3, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	f040 80bb 	bne.w	8011e08 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	699a      	ldr	r2, [r3, #24]
 8011c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	691b      	ldr	r3, [r3, #16]
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d917      	bls.n	8011cde <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	691b      	ldr	r3, [r3, #16]
 8011cba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	699a      	ldr	r2, [r3, #24]
 8011cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cce:	1ad2      	subs	r2, r2, r3
 8011cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	619a      	str	r2, [r3, #24]
 8011cdc:	e00e      	b.n	8011cfc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8011cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	699b      	ldr	r3, [r3, #24]
 8011cea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d20:	4413      	add	r3, r2
 8011d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	00da      	lsls	r2, r3, #3
 8011d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d38:	4413      	add	r3, r2
 8011d3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d54:	801a      	strh	r2, [r3, #0]
 8011d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8011d5c:	d924      	bls.n	8011da8 <USB_EPStartXfer+0xec2>
 8011d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d62:	095b      	lsrs	r3, r3, #5
 8011d64:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d6c:	f003 031f 	and.w	r3, r3, #31
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d104      	bne.n	8011d7e <USB_EPStartXfer+0xe98>
 8011d74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	029b      	lsls	r3, r3, #10
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	4313      	orrs	r3, r2
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011da2:	801a      	strh	r2, [r3, #0]
 8011da4:	f000 bc10 	b.w	80125c8 <USB_EPStartXfer+0x16e2>
 8011da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d10c      	bne.n	8011dca <USB_EPStartXfer+0xee4>
 8011db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	b29b      	uxth	r3, r3
 8011db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dc6:	801a      	strh	r2, [r3, #0]
 8011dc8:	e3fe      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
 8011dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dce:	085b      	lsrs	r3, r3, #1
 8011dd0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d004      	beq.n	8011dea <USB_EPStartXfer+0xf04>
 8011de0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011de4:	3301      	adds	r3, #1
 8011de6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	029b      	lsls	r3, r3, #10
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	b29a      	uxth	r2, r3
 8011e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e04:	801a      	strh	r2, [r3, #0]
 8011e06:	e3df      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	78db      	ldrb	r3, [r3, #3]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	f040 8218 	bne.w	801224a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	785b      	ldrb	r3, [r3, #1]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f040 809d 	bne.w	8011f66 <USB_EPStartXfer+0x1080>
 8011e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e50:	4413      	add	r3, r2
 8011e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	00da      	lsls	r2, r3, #3
 8011e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e68:	4413      	add	r3, r2
 8011e6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e76:	881b      	ldrh	r3, [r3, #0]
 8011e78:	b29b      	uxth	r3, r3
 8011e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e84:	801a      	strh	r2, [r3, #0]
 8011e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	691b      	ldr	r3, [r3, #16]
 8011e92:	2b3e      	cmp	r3, #62	; 0x3e
 8011e94:	d92b      	bls.n	8011eee <USB_EPStartXfer+0x1008>
 8011e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	691b      	ldr	r3, [r3, #16]
 8011ea2:	095b      	lsrs	r3, r3, #5
 8011ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	f003 031f 	and.w	r3, r3, #31
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d104      	bne.n	8011ec6 <USB_EPStartXfer+0xfe0>
 8011ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eca:	881b      	ldrh	r3, [r3, #0]
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ed2:	b29b      	uxth	r3, r3
 8011ed4:	029b      	lsls	r3, r3, #10
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eea:	801a      	strh	r2, [r3, #0]
 8011eec:	e070      	b.n	8011fd0 <USB_EPStartXfer+0x10ea>
 8011eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	691b      	ldr	r3, [r3, #16]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d10c      	bne.n	8011f18 <USB_EPStartXfer+0x1032>
 8011efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f02:	881b      	ldrh	r3, [r3, #0]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f14:	801a      	strh	r2, [r3, #0]
 8011f16:	e05b      	b.n	8011fd0 <USB_EPStartXfer+0x10ea>
 8011f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	691b      	ldr	r3, [r3, #16]
 8011f24:	085b      	lsrs	r3, r3, #1
 8011f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	691b      	ldr	r3, [r3, #16]
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d004      	beq.n	8011f48 <USB_EPStartXfer+0x1062>
 8011f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f42:	3301      	adds	r3, #1
 8011f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	029b      	lsls	r3, r3, #10
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	4313      	orrs	r3, r2
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f62:	801a      	strh	r2, [r3, #0]
 8011f64:	e034      	b.n	8011fd0 <USB_EPStartXfer+0x10ea>
 8011f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	785b      	ldrb	r3, [r3, #1]
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d12c      	bne.n	8011fd0 <USB_EPStartXfer+0x10ea>
 8011f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	461a      	mov	r2, r3
 8011f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f9a:	4413      	add	r3, r2
 8011f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	00da      	lsls	r2, r3, #3
 8011fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011fb2:	4413      	add	r3, r2
 8011fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	691b      	ldr	r3, [r3, #16]
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	785b      	ldrb	r3, [r3, #1]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f040 809d 	bne.w	801212a <USB_EPStartXfer+0x1244>
 8011ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801200c:	b29b      	uxth	r3, r3
 801200e:	461a      	mov	r2, r3
 8012010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012014:	4413      	add	r3, r2
 8012016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801201a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801201e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	00da      	lsls	r2, r3, #3
 8012028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801202c:	4413      	add	r3, r2
 801202e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012032:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	b29b      	uxth	r3, r3
 801203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012042:	b29a      	uxth	r2, r3
 8012044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012048:	801a      	strh	r2, [r3, #0]
 801204a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801204e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	691b      	ldr	r3, [r3, #16]
 8012056:	2b3e      	cmp	r3, #62	; 0x3e
 8012058:	d92b      	bls.n	80120b2 <USB_EPStartXfer+0x11cc>
 801205a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801205e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	691b      	ldr	r3, [r3, #16]
 8012066:	095b      	lsrs	r3, r3, #5
 8012068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801206c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	f003 031f 	and.w	r3, r3, #31
 801207c:	2b00      	cmp	r3, #0
 801207e:	d104      	bne.n	801208a <USB_EPStartXfer+0x11a4>
 8012080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012084:	3b01      	subs	r3, #1
 8012086:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801208a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	b29a      	uxth	r2, r3
 8012092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012096:	b29b      	uxth	r3, r3
 8012098:	029b      	lsls	r3, r3, #10
 801209a:	b29b      	uxth	r3, r3
 801209c:	4313      	orrs	r3, r2
 801209e:	b29b      	uxth	r3, r3
 80120a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120ae:	801a      	strh	r2, [r3, #0]
 80120b0:	e069      	b.n	8012186 <USB_EPStartXfer+0x12a0>
 80120b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	691b      	ldr	r3, [r3, #16]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10c      	bne.n	80120dc <USB_EPStartXfer+0x11f6>
 80120c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120c6:	881b      	ldrh	r3, [r3, #0]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80120ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120d8:	801a      	strh	r2, [r3, #0]
 80120da:	e054      	b.n	8012186 <USB_EPStartXfer+0x12a0>
 80120dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	691b      	ldr	r3, [r3, #16]
 80120e8:	085b      	lsrs	r3, r3, #1
 80120ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80120ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	f003 0301 	and.w	r3, r3, #1
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d004      	beq.n	801210c <USB_EPStartXfer+0x1226>
 8012102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012106:	3301      	adds	r3, #1
 8012108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801210c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	b29a      	uxth	r2, r3
 8012114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012118:	b29b      	uxth	r3, r3
 801211a:	029b      	lsls	r3, r3, #10
 801211c:	b29b      	uxth	r3, r3
 801211e:	4313      	orrs	r3, r2
 8012120:	b29a      	uxth	r2, r3
 8012122:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012126:	801a      	strh	r2, [r3, #0]
 8012128:	e02d      	b.n	8012186 <USB_EPStartXfer+0x12a0>
 801212a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801212e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	785b      	ldrb	r3, [r3, #1]
 8012136:	2b01      	cmp	r3, #1
 8012138:	d125      	bne.n	8012186 <USB_EPStartXfer+0x12a0>
 801213a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801213e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012148:	b29b      	uxth	r3, r3
 801214a:	461a      	mov	r2, r3
 801214c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012150:	4413      	add	r3, r2
 8012152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801215a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	00da      	lsls	r2, r3, #3
 8012164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012168:	4413      	add	r3, r2
 801216a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801216e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	691b      	ldr	r3, [r3, #16]
 801217e:	b29a      	uxth	r2, r3
 8012180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012184:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801218a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	69db      	ldr	r3, [r3, #28]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 8218 	beq.w	80125c8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801219c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	4413      	add	r3, r2
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80121b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80121bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d005      	beq.n	80121d0 <USB_EPStartXfer+0x12ea>
 80121c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80121c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10d      	bne.n	80121ec <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80121d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80121d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f040 81f5 	bne.w	80125c8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80121de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80121e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	f040 81ee 	bne.w	80125c8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80121ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	4413      	add	r3, r2
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	b29b      	uxth	r3, r3
 801220a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012212:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8012216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801221a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	441a      	add	r2, r3
 8012230:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8012234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801223c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012244:	b29b      	uxth	r3, r3
 8012246:	8013      	strh	r3, [r2, #0]
 8012248:	e1be      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801224a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801224e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	78db      	ldrb	r3, [r3, #3]
 8012256:	2b01      	cmp	r3, #1
 8012258:	f040 81b4 	bne.w	80125c4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801225c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	699a      	ldr	r2, [r3, #24]
 8012268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801226c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	429a      	cmp	r2, r3
 8012276:	d917      	bls.n	80122a8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8012278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801227c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801228c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	699a      	ldr	r2, [r3, #24]
 8012294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012298:	1ad2      	subs	r2, r2, r3
 801229a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801229e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	619a      	str	r2, [r3, #24]
 80122a6:	e00e      	b.n	80122c6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80122a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80122b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2200      	movs	r2, #0
 80122c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80122c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	785b      	ldrb	r3, [r3, #1]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f040 8085 	bne.w	80123e2 <USB_EPStartXfer+0x14fc>
 80122d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80122e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	461a      	mov	r2, r3
 80122f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80122fc:	4413      	add	r3, r2
 80122fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	00da      	lsls	r2, r3, #3
 8012310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012314:	4413      	add	r3, r2
 8012316:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801231a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801231e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	b29b      	uxth	r3, r3
 8012326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801232a:	b29a      	uxth	r2, r3
 801232c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012330:	801a      	strh	r2, [r3, #0]
 8012332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012336:	2b3e      	cmp	r3, #62	; 0x3e
 8012338:	d923      	bls.n	8012382 <USB_EPStartXfer+0x149c>
 801233a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801233e:	095b      	lsrs	r3, r3, #5
 8012340:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012348:	f003 031f 	and.w	r3, r3, #31
 801234c:	2b00      	cmp	r3, #0
 801234e:	d104      	bne.n	801235a <USB_EPStartXfer+0x1474>
 8012350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012354:	3b01      	subs	r3, #1
 8012356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801235a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	b29a      	uxth	r2, r3
 8012362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012366:	b29b      	uxth	r3, r3
 8012368:	029b      	lsls	r3, r3, #10
 801236a:	b29b      	uxth	r3, r3
 801236c:	4313      	orrs	r3, r2
 801236e:	b29b      	uxth	r3, r3
 8012370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012378:	b29a      	uxth	r2, r3
 801237a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801237e:	801a      	strh	r2, [r3, #0]
 8012380:	e060      	b.n	8012444 <USB_EPStartXfer+0x155e>
 8012382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012386:	2b00      	cmp	r3, #0
 8012388:	d10c      	bne.n	80123a4 <USB_EPStartXfer+0x14be>
 801238a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	b29b      	uxth	r3, r3
 8012392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801239a:	b29a      	uxth	r2, r3
 801239c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123a0:	801a      	strh	r2, [r3, #0]
 80123a2:	e04f      	b.n	8012444 <USB_EPStartXfer+0x155e>
 80123a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123a8:	085b      	lsrs	r3, r3, #1
 80123aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d004      	beq.n	80123c4 <USB_EPStartXfer+0x14de>
 80123ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123be:	3301      	adds	r3, #1
 80123c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123c8:	881b      	ldrh	r3, [r3, #0]
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	029b      	lsls	r3, r3, #10
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	4313      	orrs	r3, r2
 80123d8:	b29a      	uxth	r2, r3
 80123da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123de:	801a      	strh	r2, [r3, #0]
 80123e0:	e030      	b.n	8012444 <USB_EPStartXfer+0x155e>
 80123e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	785b      	ldrb	r3, [r3, #1]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d128      	bne.n	8012444 <USB_EPStartXfer+0x155e>
 80123f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801240e:	b29b      	uxth	r3, r3
 8012410:	461a      	mov	r2, r3
 8012412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012416:	4413      	add	r3, r2
 8012418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801241c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	00da      	lsls	r2, r3, #3
 801242a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801242e:	4413      	add	r3, r2
 8012430:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801243c:	b29a      	uxth	r2, r3
 801243e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8012442:	801a      	strh	r2, [r3, #0]
 8012444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	785b      	ldrb	r3, [r3, #1]
 801245e:	2b00      	cmp	r3, #0
 8012460:	f040 8085 	bne.w	801256e <USB_EPStartXfer+0x1688>
 8012464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012480:	b29b      	uxth	r3, r3
 8012482:	461a      	mov	r2, r3
 8012484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012488:	4413      	add	r3, r2
 801248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801248e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	00da      	lsls	r2, r3, #3
 801249c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80124a0:	4413      	add	r3, r2
 80124a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80124a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80124aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80124ae:	881b      	ldrh	r3, [r3, #0]
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80124bc:	801a      	strh	r2, [r3, #0]
 80124be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124c2:	2b3e      	cmp	r3, #62	; 0x3e
 80124c4:	d923      	bls.n	801250e <USB_EPStartXfer+0x1628>
 80124c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124ca:	095b      	lsrs	r3, r3, #5
 80124cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80124d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124d4:	f003 031f 	and.w	r3, r3, #31
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d104      	bne.n	80124e6 <USB_EPStartXfer+0x1600>
 80124dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80124e0:	3b01      	subs	r3, #1
 80124e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80124e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	b29a      	uxth	r2, r3
 80124ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	029b      	lsls	r3, r3, #10
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	4313      	orrs	r3, r2
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012504:	b29a      	uxth	r2, r3
 8012506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801250a:	801a      	strh	r2, [r3, #0]
 801250c:	e05c      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
 801250e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012512:	2b00      	cmp	r3, #0
 8012514:	d10c      	bne.n	8012530 <USB_EPStartXfer+0x164a>
 8012516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801251a:	881b      	ldrh	r3, [r3, #0]
 801251c:	b29b      	uxth	r3, r3
 801251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012526:	b29a      	uxth	r2, r3
 8012528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801252c:	801a      	strh	r2, [r3, #0]
 801252e:	e04b      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
 8012530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012534:	085b      	lsrs	r3, r3, #1
 8012536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801253a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801253e:	f003 0301 	and.w	r3, r3, #1
 8012542:	2b00      	cmp	r3, #0
 8012544:	d004      	beq.n	8012550 <USB_EPStartXfer+0x166a>
 8012546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801254a:	3301      	adds	r3, #1
 801254c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012554:	881b      	ldrh	r3, [r3, #0]
 8012556:	b29a      	uxth	r2, r3
 8012558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801255c:	b29b      	uxth	r3, r3
 801255e:	029b      	lsls	r3, r3, #10
 8012560:	b29b      	uxth	r3, r3
 8012562:	4313      	orrs	r3, r2
 8012564:	b29a      	uxth	r2, r3
 8012566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801256a:	801a      	strh	r2, [r3, #0]
 801256c:	e02c      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
 801256e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	785b      	ldrb	r3, [r3, #1]
 801257a:	2b01      	cmp	r3, #1
 801257c:	d124      	bne.n	80125c8 <USB_EPStartXfer+0x16e2>
 801257e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801258c:	b29b      	uxth	r3, r3
 801258e:	461a      	mov	r2, r3
 8012590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012594:	4413      	add	r3, r2
 8012596:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801259a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801259e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	00da      	lsls	r2, r3, #3
 80125a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80125ac:	4413      	add	r3, r2
 80125ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80125b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80125b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80125c0:	801a      	strh	r2, [r3, #0]
 80125c2:	e001      	b.n	80125c8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80125c4:	2301      	movs	r3, #1
 80125c6:	e03a      	b.n	801263e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80125c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	4413      	add	r3, r2
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80125ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80125f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80125f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80125fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80125fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012602:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012606:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801260a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	441a      	add	r2, r3
 8012624:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801262c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012638:	b29b      	uxth	r3, r3
 801263a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801263c:	2300      	movs	r3, #0
}
 801263e:	4618      	mov	r0, r3
 8012640:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	785b      	ldrb	r3, [r3, #1]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d020      	beq.n	801269c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	4413      	add	r3, r2
 8012664:	881b      	ldrh	r3, [r3, #0]
 8012666:	b29b      	uxth	r3, r3
 8012668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801266c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012670:	81bb      	strh	r3, [r7, #12]
 8012672:	89bb      	ldrh	r3, [r7, #12]
 8012674:	f083 0310 	eor.w	r3, r3, #16
 8012678:	81bb      	strh	r3, [r7, #12]
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	441a      	add	r2, r3
 8012684:	89bb      	ldrh	r3, [r7, #12]
 8012686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801268a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801268e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012696:	b29b      	uxth	r3, r3
 8012698:	8013      	strh	r3, [r2, #0]
 801269a:	e01f      	b.n	80126dc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801269c:	687a      	ldr	r2, [r7, #4]
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	4413      	add	r3, r2
 80126a6:	881b      	ldrh	r3, [r3, #0]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80126ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126b2:	81fb      	strh	r3, [r7, #14]
 80126b4:	89fb      	ldrh	r3, [r7, #14]
 80126b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80126ba:	81fb      	strh	r3, [r7, #14]
 80126bc:	687a      	ldr	r2, [r7, #4]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	441a      	add	r2, r3
 80126c6:	89fb      	ldrh	r3, [r7, #14]
 80126c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80126cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80126d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80126d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126d8:	b29b      	uxth	r3, r3
 80126da:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80126dc:	2300      	movs	r3, #0
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr

080126ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80126ea:	b480      	push	{r7}
 80126ec:	b087      	sub	sp, #28
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	7b1b      	ldrb	r3, [r3, #12]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f040 809d 	bne.w	8012838 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	785b      	ldrb	r3, [r3, #1]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d04c      	beq.n	80127a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	881b      	ldrh	r3, [r3, #0]
 8012712:	823b      	strh	r3, [r7, #16]
 8012714:	8a3b      	ldrh	r3, [r7, #16]
 8012716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801271a:	2b00      	cmp	r3, #0
 801271c:	d01b      	beq.n	8012756 <USB_EPClearStall+0x6c>
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	4413      	add	r3, r2
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	b29b      	uxth	r3, r3
 801272c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012734:	81fb      	strh	r3, [r7, #14]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	781b      	ldrb	r3, [r3, #0]
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	441a      	add	r2, r3
 8012740:	89fb      	ldrh	r3, [r7, #14]
 8012742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801274a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801274e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012752:	b29b      	uxth	r3, r3
 8012754:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	78db      	ldrb	r3, [r3, #3]
 801275a:	2b01      	cmp	r3, #1
 801275c:	d06c      	beq.n	8012838 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	b29b      	uxth	r3, r3
 801276c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012774:	81bb      	strh	r3, [r7, #12]
 8012776:	89bb      	ldrh	r3, [r7, #12]
 8012778:	f083 0320 	eor.w	r3, r3, #32
 801277c:	81bb      	strh	r3, [r7, #12]
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	441a      	add	r2, r3
 8012788:	89bb      	ldrh	r3, [r7, #12]
 801278a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801278e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801279a:	b29b      	uxth	r3, r3
 801279c:	8013      	strh	r3, [r2, #0]
 801279e:	e04b      	b.n	8012838 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	009b      	lsls	r3, r3, #2
 80127a8:	4413      	add	r3, r2
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	82fb      	strh	r3, [r7, #22]
 80127ae:	8afb      	ldrh	r3, [r7, #22]
 80127b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01b      	beq.n	80127f0 <USB_EPClearStall+0x106>
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	009b      	lsls	r3, r3, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	881b      	ldrh	r3, [r3, #0]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127ce:	82bb      	strh	r3, [r7, #20]
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	441a      	add	r2, r3
 80127da:	8abb      	ldrh	r3, [r7, #20]
 80127dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80127e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80127f0:	687a      	ldr	r2, [r7, #4]
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	009b      	lsls	r3, r3, #2
 80127f8:	4413      	add	r3, r2
 80127fa:	881b      	ldrh	r3, [r3, #0]
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012806:	827b      	strh	r3, [r7, #18]
 8012808:	8a7b      	ldrh	r3, [r7, #18]
 801280a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801280e:	827b      	strh	r3, [r7, #18]
 8012810:	8a7b      	ldrh	r3, [r7, #18]
 8012812:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012816:	827b      	strh	r3, [r7, #18]
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	009b      	lsls	r3, r3, #2
 8012820:	441a      	add	r2, r3
 8012822:	8a7b      	ldrh	r3, [r7, #18]
 8012824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801282c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012834:	b29b      	uxth	r3, r3
 8012836:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	371c      	adds	r7, #28
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr

08012846 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012846:	b480      	push	{r7}
 8012848:	b083      	sub	sp, #12
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	460b      	mov	r3, r1
 8012850:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012852:	78fb      	ldrb	r3, [r7, #3]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d103      	bne.n	8012860 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2280      	movs	r2, #128	; 0x80
 801285c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012860:	2300      	movs	r3, #0
}
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801286e:	b480      	push	{r7}
 8012870:	b083      	sub	sp, #12
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801287c:	b29b      	uxth	r3, r3
 801287e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012886:	b29a      	uxth	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801289c:	b480      	push	{r7}
 801289e:	b085      	sub	sp, #20
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80128ae:	68fb      	ldr	r3, [r7, #12]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3714      	adds	r7, #20
 80128b4:	46bd      	mov	sp, r7
 80128b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ba:	4770      	bx	lr

080128bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80128bc:	b480      	push	{r7}
 80128be:	b08b      	sub	sp, #44	; 0x2c
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	4611      	mov	r1, r2
 80128c8:	461a      	mov	r2, r3
 80128ca:	460b      	mov	r3, r1
 80128cc:	80fb      	strh	r3, [r7, #6]
 80128ce:	4613      	mov	r3, r2
 80128d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80128d2:	88bb      	ldrh	r3, [r7, #4]
 80128d4:	3301      	adds	r3, #1
 80128d6:	085b      	lsrs	r3, r3, #1
 80128d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80128e2:	88fa      	ldrh	r2, [r7, #6]
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	4413      	add	r3, r2
 80128e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80128ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80128ee:	69bb      	ldr	r3, [r7, #24]
 80128f0:	627b      	str	r3, [r7, #36]	; 0x24
 80128f2:	e01b      	b.n	801292c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80128fa:	69fb      	ldr	r3, [r7, #28]
 80128fc:	3301      	adds	r3, #1
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	021b      	lsls	r3, r3, #8
 8012902:	b21a      	sxth	r2, r3
 8012904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012908:	4313      	orrs	r3, r2
 801290a:	b21b      	sxth	r3, r3
 801290c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801290e:	6a3b      	ldr	r3, [r7, #32]
 8012910:	8a7a      	ldrh	r2, [r7, #18]
 8012912:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	3302      	adds	r3, #2
 8012918:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	3301      	adds	r3, #1
 801291e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	3301      	adds	r3, #1
 8012924:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012928:	3b01      	subs	r3, #1
 801292a:	627b      	str	r3, [r7, #36]	; 0x24
 801292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1e0      	bne.n	80128f4 <USB_WritePMA+0x38>
  }
}
 8012932:	bf00      	nop
 8012934:	bf00      	nop
 8012936:	372c      	adds	r7, #44	; 0x2c
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012940:	b480      	push	{r7}
 8012942:	b08b      	sub	sp, #44	; 0x2c
 8012944:	af00      	add	r7, sp, #0
 8012946:	60f8      	str	r0, [r7, #12]
 8012948:	60b9      	str	r1, [r7, #8]
 801294a:	4611      	mov	r1, r2
 801294c:	461a      	mov	r2, r3
 801294e:	460b      	mov	r3, r1
 8012950:	80fb      	strh	r3, [r7, #6]
 8012952:	4613      	mov	r3, r2
 8012954:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012956:	88bb      	ldrh	r3, [r7, #4]
 8012958:	085b      	lsrs	r3, r3, #1
 801295a:	b29b      	uxth	r3, r3
 801295c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012966:	88fa      	ldrh	r2, [r7, #6]
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	4413      	add	r3, r2
 801296c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012970:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	627b      	str	r3, [r7, #36]	; 0x24
 8012976:	e018      	b.n	80129aa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012978:	6a3b      	ldr	r3, [r7, #32]
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	b29b      	uxth	r3, r3
 801297e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	3302      	adds	r3, #2
 8012984:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	b2da      	uxtb	r2, r3
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	3301      	adds	r3, #1
 8012992:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	0a1b      	lsrs	r3, r3, #8
 8012998:	b2da      	uxtb	r2, r3
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	3301      	adds	r3, #1
 80129a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	3b01      	subs	r3, #1
 80129a8:	627b      	str	r3, [r7, #36]	; 0x24
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1e3      	bne.n	8012978 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80129b0:	88bb      	ldrh	r3, [r7, #4]
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d007      	beq.n	80129cc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80129bc:	6a3b      	ldr	r3, [r7, #32]
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	b2da      	uxtb	r2, r3
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	701a      	strb	r2, [r3, #0]
  }
}
 80129cc:	bf00      	nop
 80129ce:	372c      	adds	r7, #44	; 0x2c
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80129d8:	b480      	push	{r7}
 80129da:	b085      	sub	sp, #20
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	1c5a      	adds	r2, r3, #1
 80129e4:	607a      	str	r2, [r7, #4]
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80129ea:	89fb      	ldrh	r3, [r7, #14]
 80129ec:	021b      	lsls	r3, r3, #8
 80129ee:	b21a      	sxth	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	b21b      	sxth	r3, r3
 80129f6:	4313      	orrs	r3, r2
 80129f8:	b21b      	sxth	r3, r3
 80129fa:	b29b      	uxth	r3, r3
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3714      	adds	r7, #20
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	683a      	ldr	r2, [r7, #0]
 8012a16:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2204      	movs	r2, #4
 8012a1c:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2204      	movs	r2, #4
 8012a22:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a2c:	b29a      	uxth	r2, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	1ad3      	subs	r3, r2, r3
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	b21a      	sxth	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	b21a      	sxth	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2201      	movs	r2, #1
 8012a84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2200      	movs	r2, #0
 8012a92:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2200      	movs	r2, #0
 8012ac0:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8012ace:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ad8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2200      	movs	r2, #0
 8012aee:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012af6:	2300      	movs	r3, #0
 8012af8:	73fb      	strb	r3, [r7, #15]
 8012afa:	e010      	b.n	8012b1e <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8012afc:	7bfb      	ldrb	r3, [r7, #15]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	330a      	adds	r3, #10
 8012b02:	00db      	lsls	r3, r3, #3
 8012b04:	4413      	add	r3, r2
 8012b06:	2200      	movs	r2, #0
 8012b08:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8012b0a:	7bfb      	ldrb	r3, [r7, #15]
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	330a      	adds	r3, #10
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	4413      	add	r3, r2
 8012b14:	2200      	movs	r2, #0
 8012b16:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8012b18:	7bfb      	ldrb	r3, [r7, #15]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	73fb      	strb	r3, [r7, #15]
 8012b1e:	7bfb      	ldrb	r3, [r7, #15]
 8012b20:	2b03      	cmp	r3, #3
 8012b22:	d9eb      	bls.n	8012afc <UG_Init+0xf4>
   }

   gui = g;
 8012b24:	4a04      	ldr	r2, [pc, #16]	; (8012b38 <UG_Init+0x130>)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6013      	str	r3, [r2, #0]
   return 1;
 8012b2a:	2301      	movs	r3, #1
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3714      	adds	r7, #20
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr
 8012b38:	200023f0 	.word	0x200023f0

08012b3c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b083      	sub	sp, #12
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8012b44:	4b04      	ldr	r3, [pc, #16]	; (8012b58 <UG_FontSelect+0x1c>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8012b4c:	bf00      	nop
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b56:	4770      	bx	lr
 8012b58:	200023f0 	.word	0x200023f0

08012b5c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	4603      	mov	r3, r0
 8012b64:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8012b66:	4b0e      	ldr	r3, [pc, #56]	; (8012ba0 <UG_FillScreen+0x44>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b70:	b29b      	uxth	r3, r3
 8012b72:	3b01      	subs	r3, #1
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	b21a      	sxth	r2, r3
 8012b78:	4b09      	ldr	r3, [pc, #36]	; (8012ba0 <UG_FillScreen+0x44>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	3b01      	subs	r3, #1
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	b219      	sxth	r1, r3
 8012b8a:	88fb      	ldrh	r3, [r7, #6]
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	460b      	mov	r3, r1
 8012b90:	2100      	movs	r1, #0
 8012b92:	2000      	movs	r0, #0
 8012b94:	f000 f806 	bl	8012ba4 <UG_FillFrame>
}
 8012b98:	bf00      	nop
 8012b9a:	3708      	adds	r7, #8
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	200023f0 	.word	0x200023f0

08012ba4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012ba4:	b5b0      	push	{r4, r5, r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af02      	add	r7, sp, #8
 8012baa:	4604      	mov	r4, r0
 8012bac:	4608      	mov	r0, r1
 8012bae:	4611      	mov	r1, r2
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	4623      	mov	r3, r4
 8012bb4:	80fb      	strh	r3, [r7, #6]
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	80bb      	strh	r3, [r7, #4]
 8012bba:	460b      	mov	r3, r1
 8012bbc:	807b      	strh	r3, [r7, #2]
 8012bbe:	4613      	mov	r3, r2
 8012bc0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8012bc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	da05      	bge.n	8012bda <UG_FillFrame+0x36>
     swap(x1,x2);
 8012bce:	88fb      	ldrh	r3, [r7, #6]
 8012bd0:	817b      	strh	r3, [r7, #10]
 8012bd2:	887b      	ldrh	r3, [r7, #2]
 8012bd4:	80fb      	strh	r3, [r7, #6]
 8012bd6:	897b      	ldrh	r3, [r7, #10]
 8012bd8:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8012bda:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012bde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	da05      	bge.n	8012bf2 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8012be6:	88bb      	ldrh	r3, [r7, #4]
 8012be8:	813b      	strh	r3, [r7, #8]
 8012bea:	883b      	ldrh	r3, [r7, #0]
 8012bec:	80bb      	strh	r3, [r7, #4]
 8012bee:	893b      	ldrh	r3, [r7, #8]
 8012bf0:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8012bf2:	4b24      	ldr	r3, [pc, #144]	; (8012c84 <UG_FillFrame+0xe0>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012bfa:	f003 0302 	and.w	r3, r3, #2
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d012      	beq.n	8012c28 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012c02:	4b20      	ldr	r3, [pc, #128]	; (8012c84 <UG_FillFrame+0xe0>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c08:	461d      	mov	r5, r3
 8012c0a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012c0e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012c12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012c16:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012c1a:	8c3b      	ldrh	r3, [r7, #32]
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	4623      	mov	r3, r4
 8012c20:	47a8      	blx	r5
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d028      	beq.n	8012c7a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8012c28:	88bb      	ldrh	r3, [r7, #4]
 8012c2a:	81bb      	strh	r3, [r7, #12]
 8012c2c:	e01e      	b.n	8012c6c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 8012c2e:	88fb      	ldrh	r3, [r7, #6]
 8012c30:	81fb      	strh	r3, [r7, #14]
 8012c32:	e00f      	b.n	8012c54 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8012c34:	4b13      	ldr	r3, [pc, #76]	; (8012c84 <UG_FillFrame+0xe0>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	8c3a      	ldrh	r2, [r7, #32]
 8012c3e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8012c42:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8012c46:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8012c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	3301      	adds	r3, #1
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	81fb      	strh	r3, [r7, #14]
 8012c54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012c58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	dde9      	ble.n	8012c34 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	3301      	adds	r3, #1
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	81bb      	strh	r3, [r7, #12]
 8012c6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	ddda      	ble.n	8012c2e <UG_FillFrame+0x8a>
 8012c78:	e000      	b.n	8012c7c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012c7a:	bf00      	nop
      }
   }
}
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bdb0      	pop	{r4, r5, r7, pc}
 8012c82:	bf00      	nop
 8012c84:	200023f0 	.word	0x200023f0

08012c88 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012c88:	b590      	push	{r4, r7, lr}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af02      	add	r7, sp, #8
 8012c8e:	4604      	mov	r4, r0
 8012c90:	4608      	mov	r0, r1
 8012c92:	4611      	mov	r1, r2
 8012c94:	461a      	mov	r2, r3
 8012c96:	4623      	mov	r3, r4
 8012c98:	80fb      	strh	r3, [r7, #6]
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	80bb      	strh	r3, [r7, #4]
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	807b      	strh	r3, [r7, #2]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8012ca6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8012caa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012cae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012cb2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012cb6:	8b3b      	ldrh	r3, [r7, #24]
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	4623      	mov	r3, r4
 8012cbc:	f000 f912 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8012cc0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012cc4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012cc8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8012ccc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012cd0:	8b3b      	ldrh	r3, [r7, #24]
 8012cd2:	9300      	str	r3, [sp, #0]
 8012cd4:	4623      	mov	r3, r4
 8012cd6:	f000 f905 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8012cda:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012cde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012ce2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012ce6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012cea:	8b3b      	ldrh	r3, [r7, #24]
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	4623      	mov	r3, r4
 8012cf0:	f000 f8f8 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8012cf4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012cf8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012cfc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012d00:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8012d04:	8b3b      	ldrh	r3, [r7, #24]
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	4623      	mov	r3, r4
 8012d0a:	f000 f8eb 	bl	8012ee4 <UG_DrawLine>
}
 8012d0e:	bf00      	nop
 8012d10:	370c      	adds	r7, #12
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd90      	pop	{r4, r7, pc}
	...

08012d18 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8012d18:	b590      	push	{r4, r7, lr}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	4604      	mov	r4, r0
 8012d20:	4608      	mov	r0, r1
 8012d22:	4611      	mov	r1, r2
 8012d24:	461a      	mov	r2, r3
 8012d26:	4623      	mov	r3, r4
 8012d28:	80fb      	strh	r3, [r7, #6]
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	80bb      	strh	r3, [r7, #4]
 8012d2e:	460b      	mov	r3, r1
 8012d30:	807b      	strh	r3, [r7, #2]
 8012d32:	4613      	mov	r3, r2
 8012d34:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8012d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f2c0 80c8 	blt.w	8012ed0 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8012d40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f2c0 80c5 	blt.w	8012ed4 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8012d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f340 80c2 	ble.w	8012ed8 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8012d54:	887b      	ldrh	r3, [r7, #2]
 8012d56:	005b      	lsls	r3, r3, #1
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	f1c3 0301 	rsb	r3, r3, #1
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8012d62:	2300      	movs	r3, #0
 8012d64:	823b      	strh	r3, [r7, #16]
   e = 0;
 8012d66:	2300      	movs	r3, #0
 8012d68:	81fb      	strh	r3, [r7, #14]
   x = r;
 8012d6a:	887b      	ldrh	r3, [r7, #2]
 8012d6c:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8012d72:	e0a5      	b.n	8012ec0 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8012d74:	4b5a      	ldr	r3, [pc, #360]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	88f9      	ldrh	r1, [r7, #6]
 8012d7e:	8afa      	ldrh	r2, [r7, #22]
 8012d80:	1a8a      	subs	r2, r1, r2
 8012d82:	b292      	uxth	r2, r2
 8012d84:	b210      	sxth	r0, r2
 8012d86:	88b9      	ldrh	r1, [r7, #4]
 8012d88:	8aba      	ldrh	r2, [r7, #20]
 8012d8a:	440a      	add	r2, r1
 8012d8c:	b292      	uxth	r2, r2
 8012d8e:	b211      	sxth	r1, r2
 8012d90:	883a      	ldrh	r2, [r7, #0]
 8012d92:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8012d94:	4b52      	ldr	r3, [pc, #328]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	88f9      	ldrh	r1, [r7, #6]
 8012d9e:	8afa      	ldrh	r2, [r7, #22]
 8012da0:	1a8a      	subs	r2, r1, r2
 8012da2:	b292      	uxth	r2, r2
 8012da4:	b210      	sxth	r0, r2
 8012da6:	88b9      	ldrh	r1, [r7, #4]
 8012da8:	8aba      	ldrh	r2, [r7, #20]
 8012daa:	1a8a      	subs	r2, r1, r2
 8012dac:	b292      	uxth	r2, r2
 8012dae:	b211      	sxth	r1, r2
 8012db0:	883a      	ldrh	r2, [r7, #0]
 8012db2:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8012db4:	4b4a      	ldr	r3, [pc, #296]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	88f9      	ldrh	r1, [r7, #6]
 8012dbe:	8afa      	ldrh	r2, [r7, #22]
 8012dc0:	440a      	add	r2, r1
 8012dc2:	b292      	uxth	r2, r2
 8012dc4:	b210      	sxth	r0, r2
 8012dc6:	88b9      	ldrh	r1, [r7, #4]
 8012dc8:	8aba      	ldrh	r2, [r7, #20]
 8012dca:	440a      	add	r2, r1
 8012dcc:	b292      	uxth	r2, r2
 8012dce:	b211      	sxth	r1, r2
 8012dd0:	883a      	ldrh	r2, [r7, #0]
 8012dd2:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8012dd4:	4b42      	ldr	r3, [pc, #264]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	88f9      	ldrh	r1, [r7, #6]
 8012dde:	8afa      	ldrh	r2, [r7, #22]
 8012de0:	440a      	add	r2, r1
 8012de2:	b292      	uxth	r2, r2
 8012de4:	b210      	sxth	r0, r2
 8012de6:	88b9      	ldrh	r1, [r7, #4]
 8012de8:	8aba      	ldrh	r2, [r7, #20]
 8012dea:	1a8a      	subs	r2, r1, r2
 8012dec:	b292      	uxth	r2, r2
 8012dee:	b211      	sxth	r1, r2
 8012df0:	883a      	ldrh	r2, [r7, #0]
 8012df2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8012df4:	4b3a      	ldr	r3, [pc, #232]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	88f9      	ldrh	r1, [r7, #6]
 8012dfe:	8aba      	ldrh	r2, [r7, #20]
 8012e00:	1a8a      	subs	r2, r1, r2
 8012e02:	b292      	uxth	r2, r2
 8012e04:	b210      	sxth	r0, r2
 8012e06:	88b9      	ldrh	r1, [r7, #4]
 8012e08:	8afa      	ldrh	r2, [r7, #22]
 8012e0a:	440a      	add	r2, r1
 8012e0c:	b292      	uxth	r2, r2
 8012e0e:	b211      	sxth	r1, r2
 8012e10:	883a      	ldrh	r2, [r7, #0]
 8012e12:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8012e14:	4b32      	ldr	r3, [pc, #200]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	88f9      	ldrh	r1, [r7, #6]
 8012e1e:	8aba      	ldrh	r2, [r7, #20]
 8012e20:	1a8a      	subs	r2, r1, r2
 8012e22:	b292      	uxth	r2, r2
 8012e24:	b210      	sxth	r0, r2
 8012e26:	88b9      	ldrh	r1, [r7, #4]
 8012e28:	8afa      	ldrh	r2, [r7, #22]
 8012e2a:	1a8a      	subs	r2, r1, r2
 8012e2c:	b292      	uxth	r2, r2
 8012e2e:	b211      	sxth	r1, r2
 8012e30:	883a      	ldrh	r2, [r7, #0]
 8012e32:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8012e34:	4b2a      	ldr	r3, [pc, #168]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	88f9      	ldrh	r1, [r7, #6]
 8012e3e:	8aba      	ldrh	r2, [r7, #20]
 8012e40:	440a      	add	r2, r1
 8012e42:	b292      	uxth	r2, r2
 8012e44:	b210      	sxth	r0, r2
 8012e46:	88b9      	ldrh	r1, [r7, #4]
 8012e48:	8afa      	ldrh	r2, [r7, #22]
 8012e4a:	440a      	add	r2, r1
 8012e4c:	b292      	uxth	r2, r2
 8012e4e:	b211      	sxth	r1, r2
 8012e50:	883a      	ldrh	r2, [r7, #0]
 8012e52:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8012e54:	4b22      	ldr	r3, [pc, #136]	; (8012ee0 <UG_DrawCircle+0x1c8>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	88f9      	ldrh	r1, [r7, #6]
 8012e5e:	8aba      	ldrh	r2, [r7, #20]
 8012e60:	440a      	add	r2, r1
 8012e62:	b292      	uxth	r2, r2
 8012e64:	b210      	sxth	r0, r2
 8012e66:	88b9      	ldrh	r1, [r7, #4]
 8012e68:	8afa      	ldrh	r2, [r7, #22]
 8012e6a:	1a8a      	subs	r2, r1, r2
 8012e6c:	b292      	uxth	r2, r2
 8012e6e:	b211      	sxth	r1, r2
 8012e70:	883a      	ldrh	r2, [r7, #0]
 8012e72:	4798      	blx	r3

      y++;
 8012e74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012e80:	89fa      	ldrh	r2, [r7, #14]
 8012e82:	8a3b      	ldrh	r3, [r7, #16]
 8012e84:	4413      	add	r3, r2
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8012e8a:	8a3b      	ldrh	r3, [r7, #16]
 8012e8c:	3302      	adds	r3, #2
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8012e92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012e96:	005a      	lsls	r2, r3, #1
 8012e98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	dd0e      	ble.n	8012ec0 <UG_DrawCircle+0x1a8>
      {
         x--;
 8012ea2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	3b01      	subs	r3, #1
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8012eae:	89fa      	ldrh	r2, [r7, #14]
 8012eb0:	8a7b      	ldrh	r3, [r7, #18]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8012eb8:	8a7b      	ldrh	r3, [r7, #18]
 8012eba:	3302      	adds	r3, #2
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8012ec0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ec4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	f6bf af53 	bge.w	8012d74 <UG_DrawCircle+0x5c>
 8012ece:	e004      	b.n	8012eda <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8012ed0:	bf00      	nop
 8012ed2:	e002      	b.n	8012eda <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8012ed4:	bf00      	nop
 8012ed6:	e000      	b.n	8012eda <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8012ed8:	bf00      	nop
      }
   }
}
 8012eda:	371c      	adds	r7, #28
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd90      	pop	{r4, r7, pc}
 8012ee0:	200023f0 	.word	0x200023f0

08012ee4 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012ee4:	b5b0      	push	{r4, r5, r7, lr}
 8012ee6:	b08a      	sub	sp, #40	; 0x28
 8012ee8:	af02      	add	r7, sp, #8
 8012eea:	4604      	mov	r4, r0
 8012eec:	4608      	mov	r0, r1
 8012eee:	4611      	mov	r1, r2
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	4623      	mov	r3, r4
 8012ef4:	80fb      	strh	r3, [r7, #6]
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	80bb      	strh	r3, [r7, #4]
 8012efa:	460b      	mov	r3, r1
 8012efc:	807b      	strh	r3, [r7, #2]
 8012efe:	4613      	mov	r3, r2
 8012f00:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8012f02:	4b67      	ldr	r3, [pc, #412]	; (80130a0 <UG_DrawLine+0x1bc>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012f0a:	f003 0302 	and.w	r3, r3, #2
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d013      	beq.n	8012f3a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012f12:	4b63      	ldr	r3, [pc, #396]	; (80130a0 <UG_DrawLine+0x1bc>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f18:	461d      	mov	r5, r3
 8012f1a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012f1e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012f22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012f26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012f2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	4623      	mov	r3, r4
 8012f30:	47a8      	blx	r5
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f000 80ae 	beq.w	8013096 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8012f3a:	887a      	ldrh	r2, [r7, #2]
 8012f3c:	88fb      	ldrh	r3, [r7, #6]
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8012f44:	883a      	ldrh	r2, [r7, #0]
 8012f46:	88bb      	ldrh	r3, [r7, #4]
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8012f4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	bfb8      	it	lt
 8012f56:	425b      	neglt	r3, r3
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8012f5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	bfb8      	it	lt
 8012f64:	425b      	neglt	r3, r3
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8012f6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	dd01      	ble.n	8012f76 <UG_DrawLine+0x92>
 8012f72:	2301      	movs	r3, #1
 8012f74:	e001      	b.n	8012f7a <UG_DrawLine+0x96>
 8012f76:	f04f 33ff 	mov.w	r3, #4294967295
 8012f7a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8012f7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	dd01      	ble.n	8012f88 <UG_DrawLine+0xa4>
 8012f84:	2301      	movs	r3, #1
 8012f86:	e001      	b.n	8012f8c <UG_DrawLine+0xa8>
 8012f88:	f04f 33ff 	mov.w	r3, #4294967295
 8012f8c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8012f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f92:	105b      	asrs	r3, r3, #1
 8012f94:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8012f96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012f9a:	105b      	asrs	r3, r3, #1
 8012f9c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8012f9e:	88fb      	ldrh	r3, [r7, #6]
 8012fa0:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8012fa2:	88bb      	ldrh	r3, [r7, #4]
 8012fa4:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8012fa6:	4b3e      	ldr	r3, [pc, #248]	; (80130a0 <UG_DrawLine+0x1bc>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012fb0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012fb4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012fb8:	4798      	blx	r3

   if( dxabs >= dyabs )
 8012fba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8012fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	db33      	blt.n	801302e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	83fb      	strh	r3, [r7, #30]
 8012fca:	e029      	b.n	8013020 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8012fcc:	8b7a      	ldrh	r2, [r7, #26]
 8012fce:	89fb      	ldrh	r3, [r7, #14]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8012fd6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8012fda:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	db09      	blt.n	8012ff6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8012fe2:	8b7a      	ldrh	r2, [r7, #26]
 8012fe4:	8a3b      	ldrh	r3, [r7, #16]
 8012fe6:	1ad3      	subs	r3, r2, r3
 8012fe8:	b29b      	uxth	r3, r3
 8012fea:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8012fec:	8afa      	ldrh	r2, [r7, #22]
 8012fee:	897b      	ldrh	r3, [r7, #10]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	b29b      	uxth	r3, r3
 8012ff4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8012ff6:	8b3a      	ldrh	r2, [r7, #24]
 8012ff8:	89bb      	ldrh	r3, [r7, #12]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8013000:	4b27      	ldr	r3, [pc, #156]	; (80130a0 <UG_DrawLine+0x1bc>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801300a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 801300e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8013012:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8013014:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013018:	b29b      	uxth	r3, r3
 801301a:	3301      	adds	r3, #1
 801301c:	b29b      	uxth	r3, r3
 801301e:	83fb      	strh	r3, [r7, #30]
 8013020:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013024:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013028:	429a      	cmp	r2, r3
 801302a:	dbcf      	blt.n	8012fcc <UG_DrawLine+0xe8>
 801302c:	e034      	b.n	8013098 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 801302e:	2300      	movs	r3, #0
 8013030:	83fb      	strh	r3, [r7, #30]
 8013032:	e029      	b.n	8013088 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8013034:	8bba      	ldrh	r2, [r7, #28]
 8013036:	8a3b      	ldrh	r3, [r7, #16]
 8013038:	4413      	add	r3, r2
 801303a:	b29b      	uxth	r3, r3
 801303c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 801303e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8013042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013046:	429a      	cmp	r2, r3
 8013048:	db09      	blt.n	801305e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 801304a:	8bba      	ldrh	r2, [r7, #28]
 801304c:	89fb      	ldrh	r3, [r7, #14]
 801304e:	1ad3      	subs	r3, r2, r3
 8013050:	b29b      	uxth	r3, r3
 8013052:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8013054:	8b3a      	ldrh	r2, [r7, #24]
 8013056:	89bb      	ldrh	r3, [r7, #12]
 8013058:	4413      	add	r3, r2
 801305a:	b29b      	uxth	r3, r3
 801305c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 801305e:	8afa      	ldrh	r2, [r7, #22]
 8013060:	897b      	ldrh	r3, [r7, #10]
 8013062:	4413      	add	r3, r2
 8013064:	b29b      	uxth	r3, r3
 8013066:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8013068:	4b0d      	ldr	r3, [pc, #52]	; (80130a0 <UG_DrawLine+0x1bc>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	685b      	ldr	r3, [r3, #4]
 8013070:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8013072:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8013076:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801307a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 801307c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013080:	b29b      	uxth	r3, r3
 8013082:	3301      	adds	r3, #1
 8013084:	b29b      	uxth	r3, r3
 8013086:	83fb      	strh	r3, [r7, #30]
 8013088:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801308c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013090:	429a      	cmp	r2, r3
 8013092:	dbcf      	blt.n	8013034 <UG_DrawLine+0x150>
 8013094:	e000      	b.n	8013098 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8013096:	bf00      	nop
      }
   }  
}
 8013098:	3720      	adds	r7, #32
 801309a:	46bd      	mov	sp, r7
 801309c:	bdb0      	pop	{r4, r5, r7, pc}
 801309e:	bf00      	nop
 80130a0:	200023f0 	.word	0x200023f0

080130a4 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80130a4:	b590      	push	{r4, r7, lr}
 80130a6:	b087      	sub	sp, #28
 80130a8:	af02      	add	r7, sp, #8
 80130aa:	4603      	mov	r3, r0
 80130ac:	603a      	str	r2, [r7, #0]
 80130ae:	80fb      	strh	r3, [r7, #6]
 80130b0:	460b      	mov	r3, r1
 80130b2:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80130b4:	88fb      	ldrh	r3, [r7, #6]
 80130b6:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80130b8:	88bb      	ldrh	r3, [r7, #4]
 80130ba:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80130bc:	4b44      	ldr	r3, [pc, #272]	; (80131d0 <UG_PutString+0x12c>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130c2:	4618      	mov	r0, r3
 80130c4:	f000 fa96 	bl	80135f4 <_UG_FontSelect>
   while ( *str != 0 )
 80130c8:	e064      	b.n	8013194 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80130ca:	4b41      	ldr	r3, [pc, #260]	; (80131d0 <UG_PutString+0x12c>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d106      	bne.n	80130e4 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 80130d6:	463b      	mov	r3, r7
 80130d8:	4618      	mov	r0, r3
 80130da:	f000 f8c7 	bl	801326c <_UG_DecodeUTF8>
 80130de:	4603      	mov	r3, r0
 80130e0:	817b      	strh	r3, [r7, #10]
 80130e2:	e004      	b.n	80130ee <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	1c5a      	adds	r2, r3, #1
 80130e8:	603a      	str	r2, [r7, #0]
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80130ee:	897b      	ldrh	r3, [r7, #10]
 80130f0:	2b0a      	cmp	r3, #10
 80130f2:	d105      	bne.n	8013100 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80130f4:	4b36      	ldr	r3, [pc, #216]	; (80131d0 <UG_PutString+0x12c>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	81fb      	strh	r3, [r7, #14]
         continue;
 80130fe:	e049      	b.n	8013194 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8013100:	897b      	ldrh	r3, [r7, #10]
 8013102:	2100      	movs	r1, #0
 8013104:	4618      	mov	r0, r3
 8013106:	f000 f929 	bl	801335c <_UG_GetCharData>
 801310a:	4603      	mov	r3, r0
 801310c:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 801310e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013116:	d100      	bne.n	801311a <UG_PutString+0x76>
 8013118:	e03c      	b.n	8013194 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 801311a:	4b2d      	ldr	r3, [pc, #180]	; (80131d0 <UG_PutString+0x12c>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013124:	4619      	mov	r1, r3
 8013126:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801312a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801312e:	4413      	add	r3, r2
 8013130:	4299      	cmp	r1, r3
 8013132:	dc12      	bgt.n	801315a <UG_PutString+0xb6>
      {
         xp = x;
 8013134:	88fb      	ldrh	r3, [r7, #6]
 8013136:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8013138:	4b25      	ldr	r3, [pc, #148]	; (80131d0 <UG_PutString+0x12c>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013140:	b21a      	sxth	r2, r3
 8013142:	4b23      	ldr	r3, [pc, #140]	; (80131d0 <UG_PutString+0x12c>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 801314a:	b21b      	sxth	r3, r3
 801314c:	4413      	add	r3, r2
 801314e:	b21b      	sxth	r3, r3
 8013150:	b29a      	uxth	r2, r3
 8013152:	89bb      	ldrh	r3, [r7, #12]
 8013154:	4413      	add	r3, r2
 8013156:	b29b      	uxth	r3, r3
 8013158:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 801315a:	4b1d      	ldr	r3, [pc, #116]	; (80131d0 <UG_PutString+0x12c>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8013162:	4b1b      	ldr	r3, [pc, #108]	; (80131d0 <UG_PutString+0x12c>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801316a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801316e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8013172:	8978      	ldrh	r0, [r7, #10]
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	4623      	mov	r3, r4
 8013178:	f000 fabe 	bl	80136f8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 801317c:	4b14      	ldr	r3, [pc, #80]	; (80131d0 <UG_PutString+0x12c>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8013184:	b29a      	uxth	r2, r3
 8013186:	893b      	ldrh	r3, [r7, #8]
 8013188:	4413      	add	r3, r2
 801318a:	b29a      	uxth	r2, r3
 801318c:	89fb      	ldrh	r3, [r7, #14]
 801318e:	4413      	add	r3, r2
 8013190:	b29b      	uxth	r3, r3
 8013192:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d196      	bne.n	80130ca <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 801319c:	4b0c      	ldr	r3, [pc, #48]	; (80131d0 <UG_PutString+0x12c>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80131a4:	f003 0302 	and.w	r3, r3, #2
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00c      	beq.n	80131c6 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80131ac:	4b08      	ldr	r3, [pc, #32]	; (80131d0 <UG_PutString+0x12c>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80131b2:	461c      	mov	r4, r3
 80131b4:	f04f 33ff 	mov.w	r3, #4294967295
 80131b8:	f04f 32ff 	mov.w	r2, #4294967295
 80131bc:	f04f 31ff 	mov.w	r1, #4294967295
 80131c0:	f04f 30ff 	mov.w	r0, #4294967295
 80131c4:	47a0      	blx	r4
}
 80131c6:	bf00      	nop
 80131c8:	3714      	adds	r7, #20
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd90      	pop	{r4, r7, pc}
 80131ce:	bf00      	nop
 80131d0:	200023f0 	.word	0x200023f0

080131d4 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	4603      	mov	r3, r0
 80131dc:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80131de:	4b05      	ldr	r3, [pc, #20]	; (80131f4 <UG_SetForecolor+0x20>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	88fa      	ldrh	r2, [r7, #6]
 80131e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80131e8:	bf00      	nop
 80131ea:	370c      	adds	r7, #12
 80131ec:	46bd      	mov	sp, r7
 80131ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f2:	4770      	bx	lr
 80131f4:	200023f0 	.word	0x200023f0

080131f8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8013202:	4b05      	ldr	r3, [pc, #20]	; (8013218 <UG_SetBackcolor+0x20>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	88fa      	ldrh	r2, [r7, #6]
 8013208:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr
 8013218:	200023f0 	.word	0x200023f0

0801321c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 801321c:	b480      	push	{r7}
 801321e:	b083      	sub	sp, #12
 8013220:	af00      	add	r7, sp, #0
 8013222:	4603      	mov	r3, r0
 8013224:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8013226:	4b06      	ldr	r3, [pc, #24]	; (8013240 <UG_FontSetHSpace+0x24>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	88fa      	ldrh	r2, [r7, #6]
 801322c:	b252      	sxtb	r2, r2
 801322e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8013232:	bf00      	nop
 8013234:	370c      	adds	r7, #12
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
 801323e:	bf00      	nop
 8013240:	200023f0 	.word	0x200023f0

08013244 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	4603      	mov	r3, r0
 801324c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 801324e:	4b06      	ldr	r3, [pc, #24]	; (8013268 <UG_FontSetVSpace+0x24>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	88fa      	ldrh	r2, [r7, #6]
 8013254:	b252      	sxtb	r2, r2
 8013256:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 801325a:	bf00      	nop
 801325c:	370c      	adds	r7, #12
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	200023f0 	.word	0x200023f0

0801326c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 801326c:	b480      	push	{r7}
 801326e:	b085      	sub	sp, #20
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]

  char c=**str;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 801327c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013280:	2b00      	cmp	r3, #0
 8013282:	db07      	blt.n	8013294 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	1c5a      	adds	r2, r3, #1
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	601a      	str	r2, [r3, #0]
    return c;
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	b29b      	uxth	r3, r3
 8013292:	e05c      	b.n	801334e <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8013294:	2300      	movs	r3, #0
 8013296:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8013298:	2300      	movs	r3, #0
 801329a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 801329c:	e04f      	b.n	801333e <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	1c5a      	adds	r2, r3, #1
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 80132b0:	7bbb      	ldrb	r3, [r7, #14]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d130      	bne.n	8013318 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 80132b6:	7bfb      	ldrb	r3, [r7, #15]
 80132b8:	2bdf      	cmp	r3, #223	; 0xdf
 80132ba:	d806      	bhi.n	80132ca <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 80132bc:	2301      	movs	r3, #1
 80132be:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 80132c0:	7bfb      	ldrb	r3, [r7, #15]
 80132c2:	f003 031f 	and.w	r3, r3, #31
 80132c6:	73fb      	strb	r3, [r7, #15]
 80132c8:	e023      	b.n	8013312 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 80132ca:	7bfb      	ldrb	r3, [r7, #15]
 80132cc:	2bef      	cmp	r3, #239	; 0xef
 80132ce:	d806      	bhi.n	80132de <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 80132d0:	2302      	movs	r3, #2
 80132d2:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 80132d4:	7bfb      	ldrb	r3, [r7, #15]
 80132d6:	f003 030f 	and.w	r3, r3, #15
 80132da:	73fb      	strb	r3, [r7, #15]
 80132dc:	e019      	b.n	8013312 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 80132de:	7bfb      	ldrb	r3, [r7, #15]
 80132e0:	2bf7      	cmp	r3, #247	; 0xf7
 80132e2:	d806      	bhi.n	80132f2 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 80132e4:	2303      	movs	r3, #3
 80132e6:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 80132e8:	7bfb      	ldrb	r3, [r7, #15]
 80132ea:	f003 0307 	and.w	r3, r3, #7
 80132ee:	73fb      	strb	r3, [r7, #15]
 80132f0:	e00f      	b.n	8013312 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80132f2:	7bfb      	ldrb	r3, [r7, #15]
 80132f4:	2bfb      	cmp	r3, #251	; 0xfb
 80132f6:	d806      	bhi.n	8013306 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80132f8:	2304      	movs	r3, #4
 80132fa:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80132fc:	7bfb      	ldrb	r3, [r7, #15]
 80132fe:	f003 0303 	and.w	r3, r3, #3
 8013302:	73fb      	strb	r3, [r7, #15]
 8013304:	e005      	b.n	8013312 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8013306:	2305      	movs	r3, #5
 8013308:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 801330a:	7bfb      	ldrb	r3, [r7, #15]
 801330c:	f003 0301 	and.w	r3, r3, #1
 8013310:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8013312:	7bfb      	ldrb	r3, [r7, #15]
 8013314:	81bb      	strh	r3, [r7, #12]
 8013316:	e012      	b.n	801333e <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8013318:	89bb      	ldrh	r3, [r7, #12]
 801331a:	019b      	lsls	r3, r3, #6
 801331c:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 801331e:	7bfb      	ldrb	r3, [r7, #15]
 8013320:	b21b      	sxth	r3, r3
 8013322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013326:	b21a      	sxth	r2, r3
 8013328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801332c:	4313      	orrs	r3, r2
 801332e:	b21b      	sxth	r3, r3
 8013330:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8013332:	7bbb      	ldrb	r3, [r7, #14]
 8013334:	3b01      	subs	r3, #1
 8013336:	73bb      	strb	r3, [r7, #14]
 8013338:	7bbb      	ldrb	r3, [r7, #14]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d005      	beq.n	801334a <_UG_DecodeUTF8+0xde>
  while(**str)
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1aa      	bne.n	801329e <_UG_DecodeUTF8+0x32>
 8013348:	e000      	b.n	801334c <_UG_DecodeUTF8+0xe0>
        break;
 801334a:	bf00      	nop
    }
  }
  return encoding;
 801334c:	89bb      	ldrh	r3, [r7, #12]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3714      	adds	r7, #20
 8013352:	46bd      	mov	sp, r7
 8013354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013358:	4770      	bx	lr
	...

0801335c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 801335c:	b580      	push	{r7, lr}
 801335e:	b086      	sub	sp, #24
 8013360:	af00      	add	r7, sp, #0
 8013362:	4603      	mov	r3, r0
 8013364:	6039      	str	r1, [r7, #0]
 8013366:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8013368:	2300      	movs	r3, #0
 801336a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 801336c:	2300      	movs	r3, #0
 801336e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8013370:	2300      	movs	r3, #0
 8013372:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8013374:	2300      	movs	r3, #0
 8013376:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8013378:	2300      	movs	r3, #0
 801337a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 801337c:	4b98      	ldr	r3, [pc, #608]	; (80135e0 <_UG_GetCharData+0x284>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013382:	4b98      	ldr	r3, [pc, #608]	; (80135e4 <_UG_GetCharData+0x288>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	429a      	cmp	r2, r3
 8013388:	d10f      	bne.n	80133aa <_UG_GetCharData+0x4e>
 801338a:	4b97      	ldr	r3, [pc, #604]	; (80135e8 <_UG_GetCharData+0x28c>)
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	88fa      	ldrh	r2, [r7, #6]
 8013390:	429a      	cmp	r2, r3
 8013392:	d10a      	bne.n	80133aa <_UG_GetCharData+0x4e>
    if(p){
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d003      	beq.n	80133a2 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801339a:	4b94      	ldr	r3, [pc, #592]	; (80135ec <_UG_GetCharData+0x290>)
 801339c:	681a      	ldr	r2, [r3, #0]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80133a2:	4b93      	ldr	r3, [pc, #588]	; (80135f0 <_UG_GetCharData+0x294>)
 80133a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133a8:	e116      	b.n	80135d8 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80133aa:	4b8d      	ldr	r3, [pc, #564]	; (80135e0 <_UG_GetCharData+0x284>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f000 80cc 	beq.w	8013550 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 80133b8:	88fb      	ldrh	r3, [r7, #6]
 80133ba:	2bfc      	cmp	r3, #252	; 0xfc
 80133bc:	f300 80c8 	bgt.w	8013550 <_UG_GetCharData+0x1f4>
 80133c0:	2bd6      	cmp	r3, #214	; 0xd6
 80133c2:	da09      	bge.n	80133d8 <_UG_GetCharData+0x7c>
 80133c4:	2bc4      	cmp	r3, #196	; 0xc4
 80133c6:	d06c      	beq.n	80134a2 <_UG_GetCharData+0x146>
 80133c8:	2bc4      	cmp	r3, #196	; 0xc4
 80133ca:	f300 80c1 	bgt.w	8013550 <_UG_GetCharData+0x1f4>
 80133ce:	2bb0      	cmp	r3, #176	; 0xb0
 80133d0:	d06d      	beq.n	80134ae <_UG_GetCharData+0x152>
 80133d2:	2bb5      	cmp	r3, #181	; 0xb5
 80133d4:	d068      	beq.n	80134a8 <_UG_GetCharData+0x14c>
 80133d6:	e06e      	b.n	80134b6 <_UG_GetCharData+0x15a>
 80133d8:	3bd6      	subs	r3, #214	; 0xd6
 80133da:	2b26      	cmp	r3, #38	; 0x26
 80133dc:	f200 80b8 	bhi.w	8013550 <_UG_GetCharData+0x1f4>
 80133e0:	a201      	add	r2, pc, #4	; (adr r2, 80133e8 <_UG_GetCharData+0x8c>)
 80133e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133e6:	bf00      	nop
 80133e8:	0801348b 	.word	0x0801348b
 80133ec:	08013551 	.word	0x08013551
 80133f0:	08013551 	.word	0x08013551
 80133f4:	08013551 	.word	0x08013551
 80133f8:	08013551 	.word	0x08013551
 80133fc:	08013551 	.word	0x08013551
 8013400:	08013497 	.word	0x08013497
 8013404:	08013551 	.word	0x08013551
 8013408:	08013551 	.word	0x08013551
 801340c:	08013551 	.word	0x08013551
 8013410:	08013551 	.word	0x08013551
 8013414:	08013551 	.word	0x08013551
 8013418:	08013551 	.word	0x08013551
 801341c:	08013551 	.word	0x08013551
 8013420:	0801349d 	.word	0x0801349d
 8013424:	08013551 	.word	0x08013551
 8013428:	08013551 	.word	0x08013551
 801342c:	08013551 	.word	0x08013551
 8013430:	08013551 	.word	0x08013551
 8013434:	08013551 	.word	0x08013551
 8013438:	08013551 	.word	0x08013551
 801343c:	08013551 	.word	0x08013551
 8013440:	08013551 	.word	0x08013551
 8013444:	08013551 	.word	0x08013551
 8013448:	08013551 	.word	0x08013551
 801344c:	08013551 	.word	0x08013551
 8013450:	08013551 	.word	0x08013551
 8013454:	08013551 	.word	0x08013551
 8013458:	08013551 	.word	0x08013551
 801345c:	08013551 	.word	0x08013551
 8013460:	08013551 	.word	0x08013551
 8013464:	08013551 	.word	0x08013551
 8013468:	08013485 	.word	0x08013485
 801346c:	08013551 	.word	0x08013551
 8013470:	08013551 	.word	0x08013551
 8013474:	08013551 	.word	0x08013551
 8013478:	08013551 	.word	0x08013551
 801347c:	08013551 	.word	0x08013551
 8013480:	08013491 	.word	0x08013491
    {
       case 0xF6: encoding = 0x94; break; // ö
 8013484:	2394      	movs	r3, #148	; 0x94
 8013486:	80fb      	strh	r3, [r7, #6]
 8013488:	e015      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 801348a:	2399      	movs	r3, #153	; 0x99
 801348c:	80fb      	strh	r3, [r7, #6]
 801348e:	e012      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8013490:	2381      	movs	r3, #129	; 0x81
 8013492:	80fb      	strh	r3, [r7, #6]
 8013494:	e00f      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8013496:	239a      	movs	r3, #154	; 0x9a
 8013498:	80fb      	strh	r3, [r7, #6]
 801349a:	e00c      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 801349c:	2384      	movs	r3, #132	; 0x84
 801349e:	80fb      	strh	r3, [r7, #6]
 80134a0:	e009      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80134a2:	238e      	movs	r3, #142	; 0x8e
 80134a4:	80fb      	strh	r3, [r7, #6]
 80134a6:	e006      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80134a8:	23e6      	movs	r3, #230	; 0xe6
 80134aa:	80fb      	strh	r3, [r7, #6]
 80134ac:	e003      	b.n	80134b6 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80134ae:	23f8      	movs	r3, #248	; 0xf8
 80134b0:	80fb      	strh	r3, [r7, #6]
 80134b2:	bf00      	nop
 80134b4:	e04c      	b.n	8013550 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80134b6:	e04b      	b.n	8013550 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80134b8:	4b49      	ldr	r3, [pc, #292]	; (80135e0 <_UG_GetCharData+0x284>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134be:	8a7a      	ldrh	r2, [r7, #18]
 80134c0:	0052      	lsls	r2, r2, #1
 80134c2:	4413      	add	r3, r2
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7ff fa87 	bl	80129d8 <ptr_8to16>
 80134ca:	4603      	mov	r3, r0
 80134cc:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80134ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	da06      	bge.n	80134e4 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80134d6:	89fb      	ldrh	r3, [r7, #14]
 80134d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80134dc:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80134de:	2301      	movs	r3, #1
 80134e0:	747b      	strb	r3, [r7, #17]
 80134e2:	e032      	b.n	801354a <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80134e4:	7c7b      	ldrb	r3, [r7, #17]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d021      	beq.n	801352e <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80134ea:	88fa      	ldrh	r2, [r7, #6]
 80134ec:	8afb      	ldrh	r3, [r7, #22]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d30d      	bcc.n	801350e <_UG_GetCharData+0x1b2>
 80134f2:	88fa      	ldrh	r2, [r7, #6]
 80134f4:	89fb      	ldrh	r3, [r7, #14]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d809      	bhi.n	801350e <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80134fa:	88fa      	ldrh	r2, [r7, #6]
 80134fc:	8afb      	ldrh	r3, [r7, #22]
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	b29a      	uxth	r2, r3
 8013502:	8abb      	ldrh	r3, [r7, #20]
 8013504:	4413      	add	r3, r2
 8013506:	82bb      	strh	r3, [r7, #20]
        found=1;
 8013508:	2301      	movs	r3, #1
 801350a:	743b      	strb	r3, [r7, #16]
        break;
 801350c:	e02a      	b.n	8013564 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 801350e:	88fa      	ldrh	r2, [r7, #6]
 8013510:	8afb      	ldrh	r3, [r7, #22]
 8013512:	429a      	cmp	r2, r3
 8013514:	d323      	bcc.n	801355e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8013516:	89fa      	ldrh	r2, [r7, #14]
 8013518:	8afb      	ldrh	r3, [r7, #22]
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	b29a      	uxth	r2, r3
 801351e:	8abb      	ldrh	r3, [r7, #20]
 8013520:	4413      	add	r3, r2
 8013522:	b29b      	uxth	r3, r3
 8013524:	3301      	adds	r3, #1
 8013526:	82bb      	strh	r3, [r7, #20]
      range=0;
 8013528:	2300      	movs	r3, #0
 801352a:	747b      	strb	r3, [r7, #17]
 801352c:	e00d      	b.n	801354a <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 801352e:	88fa      	ldrh	r2, [r7, #6]
 8013530:	89fb      	ldrh	r3, [r7, #14]
 8013532:	429a      	cmp	r2, r3
 8013534:	d102      	bne.n	801353c <_UG_GetCharData+0x1e0>
      {
        found=1;
 8013536:	2301      	movs	r3, #1
 8013538:	743b      	strb	r3, [r7, #16]
        break;
 801353a:	e013      	b.n	8013564 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 801353c:	88fa      	ldrh	r2, [r7, #6]
 801353e:	89fb      	ldrh	r3, [r7, #14]
 8013540:	429a      	cmp	r2, r3
 8013542:	d30e      	bcc.n	8013562 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8013544:	8abb      	ldrh	r3, [r7, #20]
 8013546:	3301      	adds	r3, #1
 8013548:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 801354a:	8a7b      	ldrh	r3, [r7, #18]
 801354c:	3301      	adds	r3, #1
 801354e:	827b      	strh	r3, [r7, #18]
 8013550:	4b23      	ldr	r3, [pc, #140]	; (80135e0 <_UG_GetCharData+0x284>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8013556:	8a7a      	ldrh	r2, [r7, #18]
 8013558:	429a      	cmp	r2, r3
 801355a:	d3ad      	bcc.n	80134b8 <_UG_GetCharData+0x15c>
 801355c:	e002      	b.n	8013564 <_UG_GetCharData+0x208>
        break;
 801355e:	bf00      	nop
 8013560:	e000      	b.n	8013564 <_UG_GetCharData+0x208>
        break;
 8013562:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8013564:	7c3b      	ldrb	r3, [r7, #16]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d034      	beq.n	80135d4 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 801356a:	4b1d      	ldr	r3, [pc, #116]	; (80135e0 <_UG_GetCharData+0x284>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013570:	4a1c      	ldr	r2, [pc, #112]	; (80135e4 <_UG_GetCharData+0x288>)
 8013572:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8013574:	4a1c      	ldr	r2, [pc, #112]	; (80135e8 <_UG_GetCharData+0x28c>)
 8013576:	88fb      	ldrh	r3, [r7, #6]
 8013578:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 801357a:	4b19      	ldr	r3, [pc, #100]	; (80135e0 <_UG_GetCharData+0x284>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013580:	8aba      	ldrh	r2, [r7, #20]
 8013582:	4917      	ldr	r1, [pc, #92]	; (80135e0 <_UG_GetCharData+0x284>)
 8013584:	6809      	ldr	r1, [r1, #0]
 8013586:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8013588:	fb01 f202 	mul.w	r2, r1, r2
 801358c:	4413      	add	r3, r2
 801358e:	4a17      	ldr	r2, [pc, #92]	; (80135ec <_UG_GetCharData+0x290>)
 8013590:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8013592:	4b13      	ldr	r3, [pc, #76]	; (80135e0 <_UG_GetCharData+0x284>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 801359c:	4b10      	ldr	r3, [pc, #64]	; (80135e0 <_UG_GetCharData+0x284>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135a2:	8abb      	ldrh	r3, [r7, #20]
 80135a4:	4413      	add	r3, r2
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	b21a      	sxth	r2, r3
 80135aa:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <_UG_GetCharData+0x294>)
 80135ac:	801a      	strh	r2, [r3, #0]
 80135ae:	e006      	b.n	80135be <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80135b0:	4b0b      	ldr	r3, [pc, #44]	; (80135e0 <_UG_GetCharData+0x284>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80135b8:	b21a      	sxth	r2, r3
 80135ba:	4b0d      	ldr	r3, [pc, #52]	; (80135f0 <_UG_GetCharData+0x294>)
 80135bc:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d003      	beq.n	80135cc <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 80135c4:	4b09      	ldr	r3, [pc, #36]	; (80135ec <_UG_GetCharData+0x290>)
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80135cc:	4b08      	ldr	r3, [pc, #32]	; (80135f0 <_UG_GetCharData+0x294>)
 80135ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135d2:	e001      	b.n	80135d8 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3718      	adds	r7, #24
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	200023f0 	.word	0x200023f0
 80135e4:	200023f4 	.word	0x200023f4
 80135e8:	200023f8 	.word	0x200023f8
 80135ec:	200023fc 	.word	0x200023fc
 80135f0:	20002400 	.word	0x20002400

080135f4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80135f4:	b590      	push	{r4, r7, lr}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80135fc:	4b3d      	ldr	r3, [pc, #244]	; (80136f4 <_UG_FontSelect+0x100>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	429a      	cmp	r2, r3
 8013606:	d070      	beq.n	80136ea <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8013608:	4b3a      	ldr	r3, [pc, #232]	; (80136f4 <_UG_FontSelect+0x100>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	781a      	ldrb	r2, [r3, #0]
 8013614:	4b37      	ldr	r3, [pc, #220]	; (80136f4 <_UG_FontSelect+0x100>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801361c:	b2d2      	uxtb	r2, r2
 801361e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	1c5a      	adds	r2, r3, #1
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	b25b      	sxtb	r3, r3
 801362c:	2b00      	cmp	r3, #0
 801362e:	da01      	bge.n	8013634 <_UG_FontSelect+0x40>
 8013630:	2201      	movs	r2, #1
 8013632:	e000      	b.n	8013636 <_UG_FontSelect+0x42>
 8013634:	2200      	movs	r2, #0
 8013636:	4b2f      	ldr	r3, [pc, #188]	; (80136f4 <_UG_FontSelect+0x100>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	b2d2      	uxtb	r2, r2
 801363c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	1c5a      	adds	r2, r3, #1
 8013644:	607a      	str	r2, [r7, #4]
 8013646:	4a2b      	ldr	r2, [pc, #172]	; (80136f4 <_UG_FontSelect+0x100>)
 8013648:	6812      	ldr	r2, [r2, #0]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	1c5a      	adds	r2, r3, #1
 8013654:	607a      	str	r2, [r7, #4]
 8013656:	4a27      	ldr	r2, [pc, #156]	; (80136f4 <_UG_FontSelect+0x100>)
 8013658:	6812      	ldr	r2, [r2, #0]
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8013660:	4b24      	ldr	r3, [pc, #144]	; (80136f4 <_UG_FontSelect+0x100>)
 8013662:	681c      	ldr	r4, [r3, #0]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f7ff f9b7 	bl	80129d8 <ptr_8to16>
 801366a:	4603      	mov	r3, r0
 801366c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	3302      	adds	r3, #2
 8013672:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8013674:	4b1f      	ldr	r3, [pc, #124]	; (80136f4 <_UG_FontSelect+0x100>)
 8013676:	681c      	ldr	r4, [r3, #0]
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7ff f9ad 	bl	80129d8 <ptr_8to16>
 801367e:	4603      	mov	r3, r0
 8013680:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	3302      	adds	r3, #2
 8013686:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8013688:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <_UG_FontSelect+0x100>)
 801368a:	681c      	ldr	r4, [r3, #0]
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f7ff f9a3 	bl	80129d8 <ptr_8to16>
 8013692:	4603      	mov	r3, r0
 8013694:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	3302      	adds	r3, #2
 801369a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	1c5a      	adds	r2, r3, #1
 80136a0:	607a      	str	r2, [r7, #4]
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d00b      	beq.n	80136c0 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80136a8:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <_UG_FontSelect+0x100>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80136b0:	4b10      	ldr	r3, [pc, #64]	; (80136f4 <_UG_FontSelect+0x100>)
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136b6:	461a      	mov	r2, r3
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	4413      	add	r3, r2
 80136bc:	607b      	str	r3, [r7, #4]
 80136be:	e003      	b.n	80136c8 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80136c0:	4b0c      	ldr	r3, [pc, #48]	; (80136f4 <_UG_FontSelect+0x100>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2200      	movs	r2, #0
 80136c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80136c8:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <_UG_FontSelect+0x100>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80136d0:	4b08      	ldr	r3, [pc, #32]	; (80136f4 <_UG_FontSelect+0x100>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80136d6:	005b      	lsls	r3, r3, #1
 80136d8:	461a      	mov	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	4413      	add	r3, r2
 80136de:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80136e0:	4b04      	ldr	r3, [pc, #16]	; (80136f4 <_UG_FontSelect+0x100>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	641a      	str	r2, [r3, #64]	; 0x40
 80136e8:	e000      	b.n	80136ec <_UG_FontSelect+0xf8>
    return;
 80136ea:	bf00      	nop
}
 80136ec:	370c      	adds	r7, #12
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd90      	pop	{r4, r7, pc}
 80136f2:	bf00      	nop
 80136f4:	200023f0 	.word	0x200023f0

080136f8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80136f8:	b5b0      	push	{r4, r5, r7, lr}
 80136fa:	b08c      	sub	sp, #48	; 0x30
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	4604      	mov	r4, r0
 8013700:	4608      	mov	r0, r1
 8013702:	4611      	mov	r1, r2
 8013704:	461a      	mov	r2, r3
 8013706:	4623      	mov	r3, r4
 8013708:	80fb      	strh	r3, [r7, #6]
 801370a:	4603      	mov	r3, r0
 801370c:	80bb      	strh	r3, [r7, #4]
 801370e:	460b      	mov	r3, r1
 8013710:	807b      	strh	r3, [r7, #2]
 8013712:	4613      	mov	r3, r2
 8013714:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8013716:	2300      	movs	r3, #0
 8013718:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801371a:	2300      	movs	r3, #0
 801371c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801371e:	2300      	movs	r3, #0
 8013720:	847b      	strh	r3, [r7, #34]	; 0x22
 8013722:	2300      	movs	r3, #0
 8013724:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8013726:	4b8c      	ldr	r3, [pc, #560]	; (8013958 <_UG_PutChar+0x260>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801372e:	75fb      	strb	r3, [r7, #23]
 8013730:	4b89      	ldr	r3, [pc, #548]	; (8013958 <_UG_PutChar+0x260>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013738:	f003 0302 	and.w	r3, r3, #2
 801373c:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 801373e:	2300      	movs	r3, #0
 8013740:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8013742:	f107 0208 	add.w	r2, r7, #8
 8013746:	88fb      	ldrh	r3, [r7, #6]
 8013748:	4611      	mov	r1, r2
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff fe06 	bl	801335c <_UG_GetCharData>
 8013750:	4603      	mov	r3, r0
 8013752:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8013754:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801375c:	d102      	bne.n	8013764 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 801375e:	f04f 33ff 	mov.w	r3, #4294967295
 8013762:	e226      	b.n	8013bb2 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8013764:	4b7c      	ldr	r3, [pc, #496]	; (8013958 <_UG_PutChar+0x260>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801376c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 801376e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <_UG_PutChar+0x80>
     return 0;
 8013774:	2300      	movs	r3, #0
 8013776:	e21c      	b.n	8013bb2 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8013778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801377a:	08db      	lsrs	r3, r3, #3
 801377c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 801377e:	4b76      	ldr	r3, [pc, #472]	; (8013958 <_UG_PutChar+0x260>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8013786:	f003 0307 	and.w	r3, r3, #7
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	d002      	beq.n	8013796 <_UG_PutChar+0x9e>
 8013790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013792:	3301      	adds	r3, #1
 8013794:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8013796:	7dbb      	ldrb	r3, [r7, #22]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d01d      	beq.n	80137d8 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 801379c:	4b6e      	ldr	r3, [pc, #440]	; (8013958 <_UG_PutChar+0x260>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137a2:	461d      	mov	r5, r3
 80137a4:	88ba      	ldrh	r2, [r7, #4]
 80137a6:	8abb      	ldrh	r3, [r7, #20]
 80137a8:	4413      	add	r3, r2
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	3b01      	subs	r3, #1
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	b21c      	sxth	r4, r3
 80137b2:	4b69      	ldr	r3, [pc, #420]	; (8013958 <_UG_PutChar+0x260>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	887b      	ldrh	r3, [r7, #2]
 80137be:	4413      	add	r3, r2
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	3b01      	subs	r3, #1
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	b21b      	sxth	r3, r3
 80137c8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80137cc:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80137d0:	4622      	mov	r2, r4
 80137d2:	47a8      	blx	r5
 80137d4:	4603      	mov	r3, r0
 80137d6:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80137d8:	4b5f      	ldr	r3, [pc, #380]	; (8013958 <_UG_PutChar+0x260>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	f040 8172 	bne.w	8013aca <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80137e6:	2300      	movs	r3, #0
 80137e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80137ea:	e0ec      	b.n	80139c6 <_UG_PutChar+0x2ce>
     {
       c=0;
 80137ec:	2300      	movs	r3, #0
 80137ee:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80137f0:	2300      	movs	r3, #0
 80137f2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80137f4:	e0df      	b.n	80139b6 <_UG_PutChar+0x2be>
       {
         b = *data++;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	1c5a      	adds	r2, r3, #1
 80137fa:	60ba      	str	r2, [r7, #8]
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8013800:	2300      	movs	r3, #0
 8013802:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013804:	e0ca      	b.n	801399c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8013806:	7f7b      	ldrb	r3, [r7, #29]
 8013808:	f003 0301 	and.w	r3, r3, #1
 801380c:	2b00      	cmp	r3, #0
 801380e:	d033      	beq.n	8013878 <_UG_PutChar+0x180>
           {
             if(driver)
 8013810:	7dbb      	ldrb	r3, [r7, #22]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d01f      	beq.n	8013856 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8013816:	8c3b      	ldrh	r3, [r7, #32]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00a      	beq.n	8013832 <_UG_PutChar+0x13a>
 801381c:	7dfb      	ldrb	r3, [r7, #23]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d107      	bne.n	8013832 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8013822:	8c3a      	ldrh	r2, [r7, #32]
 8013824:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	4610      	mov	r0, r2
 801382c:	4798      	blx	r3
                 bpixels=0;
 801382e:	2300      	movs	r3, #0
 8013830:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8013832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013834:	2b00      	cmp	r3, #0
 8013836:	d10a      	bne.n	801384e <_UG_PutChar+0x156>
 8013838:	7dfb      	ldrb	r3, [r7, #23]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d007      	beq.n	801384e <_UG_PutChar+0x156>
               {
                 x0=x+c;
 801383e:	88ba      	ldrh	r2, [r7, #4]
 8013840:	8bfb      	ldrh	r3, [r7, #30]
 8013842:	4413      	add	r3, r2
 8013844:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8013846:	887a      	ldrh	r2, [r7, #2]
 8013848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801384a:	4413      	add	r3, r2
 801384c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 801384e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013850:	3301      	adds	r3, #1
 8013852:	847b      	strh	r3, [r7, #34]	; 0x22
 8013854:	e096      	b.n	8013984 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8013856:	4b40      	ldr	r3, [pc, #256]	; (8013958 <_UG_PutChar+0x260>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	88b9      	ldrh	r1, [r7, #4]
 8013860:	8bfa      	ldrh	r2, [r7, #30]
 8013862:	440a      	add	r2, r1
 8013864:	b292      	uxth	r2, r2
 8013866:	b210      	sxth	r0, r2
 8013868:	8879      	ldrh	r1, [r7, #2]
 801386a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801386c:	440a      	add	r2, r1
 801386e:	b292      	uxth	r2, r2
 8013870:	b211      	sxth	r1, r2
 8013872:	883a      	ldrh	r2, [r7, #0]
 8013874:	4798      	blx	r3
 8013876:	e085      	b.n	8013984 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8013878:	7dbb      	ldrb	r3, [r7, #22]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d06e      	beq.n	801395c <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 801387e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013880:	2b00      	cmp	r3, #0
 8013882:	d064      	beq.n	801394e <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8013884:	7dfb      	ldrb	r3, [r7, #23]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d15e      	bne.n	8013948 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 801388a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801388c:	8839      	ldrh	r1, [r7, #0]
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	4610      	mov	r0, r2
 8013892:	4798      	blx	r3
                   fpixels=0;
 8013894:	2300      	movs	r3, #0
 8013896:	847b      	strh	r3, [r7, #34]	; 0x22
 8013898:	e059      	b.n	801394e <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 801389a:	88ba      	ldrh	r2, [r7, #4]
 801389c:	8abb      	ldrh	r3, [r7, #20]
 801389e:	4413      	add	r3, r2
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80138a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80138aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d003      	beq.n	80138ba <_UG_PutChar+0x1c2>
 80138b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80138b4:	89fb      	ldrh	r3, [r7, #14]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d224      	bcs.n	8013904 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80138ba:	4b27      	ldr	r3, [pc, #156]	; (8013958 <_UG_PutChar+0x260>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80138c0:	461d      	mov	r5, r3
 80138c2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80138c6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80138ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80138cc:	89fb      	ldrh	r3, [r7, #14]
 80138ce:	4413      	add	r3, r2
 80138d0:	b29b      	uxth	r3, r3
 80138d2:	3b01      	subs	r3, #1
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	b21c      	sxth	r4, r3
 80138d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80138da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80138de:	fb92 f3f3 	sdiv	r3, r2, r3
 80138e2:	b29a      	uxth	r2, r3
 80138e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80138e6:	4413      	add	r3, r2
 80138e8:	b29b      	uxth	r3, r3
 80138ea:	b21b      	sxth	r3, r3
 80138ec:	4622      	mov	r2, r4
 80138ee:	47a8      	blx	r5
 80138f0:	4603      	mov	r3, r0
 80138f2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80138f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80138f6:	8839      	ldrh	r1, [r7, #0]
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	4610      	mov	r0, r2
 80138fc:	4798      	blx	r3
                       fpixels=0;
 80138fe:	2300      	movs	r3, #0
 8013900:	847b      	strh	r3, [r7, #34]	; 0x22
 8013902:	e021      	b.n	8013948 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8013904:	4b14      	ldr	r3, [pc, #80]	; (8013958 <_UG_PutChar+0x260>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801390a:	461c      	mov	r4, r3
 801390c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013910:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013916:	89fb      	ldrh	r3, [r7, #14]
 8013918:	4413      	add	r3, r2
 801391a:	b29b      	uxth	r3, r3
 801391c:	3b01      	subs	r3, #1
 801391e:	b29b      	uxth	r3, r3
 8013920:	b21a      	sxth	r2, r3
 8013922:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013926:	47a0      	blx	r4
 8013928:	4603      	mov	r3, r0
 801392a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 801392c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801392e:	8839      	ldrh	r1, [r7, #0]
 8013930:	69bb      	ldr	r3, [r7, #24]
 8013932:	4610      	mov	r0, r2
 8013934:	4798      	blx	r3
                       fpixels -= width;
 8013936:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013938:	89fb      	ldrh	r3, [r7, #14]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 801393e:	88bb      	ldrh	r3, [r7, #4]
 8013940:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8013942:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013944:	3301      	adds	r3, #1
 8013946:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8013948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1a5      	bne.n	801389a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 801394e:	8c3b      	ldrh	r3, [r7, #32]
 8013950:	3301      	adds	r3, #1
 8013952:	843b      	strh	r3, [r7, #32]
 8013954:	e016      	b.n	8013984 <_UG_PutChar+0x28c>
 8013956:	bf00      	nop
 8013958:	200023f0 	.word	0x200023f0
             }
             else if(!trans)                           // Not accelerated output
 801395c:	7dfb      	ldrb	r3, [r7, #23]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d110      	bne.n	8013984 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8013962:	4b96      	ldr	r3, [pc, #600]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	88b9      	ldrh	r1, [r7, #4]
 801396c:	8bfa      	ldrh	r2, [r7, #30]
 801396e:	440a      	add	r2, r1
 8013970:	b292      	uxth	r2, r2
 8013972:	b210      	sxth	r0, r2
 8013974:	8879      	ldrh	r1, [r7, #2]
 8013976:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013978:	440a      	add	r2, r1
 801397a:	b292      	uxth	r2, r2
 801397c:	b211      	sxth	r1, r2
 801397e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013982:	4798      	blx	r3
             }
           }
           b >>= 1;
 8013984:	7f7b      	ldrb	r3, [r7, #29]
 8013986:	085b      	lsrs	r3, r3, #1
 8013988:	777b      	strb	r3, [r7, #29]
           c++;
 801398a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801398e:	b29b      	uxth	r3, r3
 8013990:	3301      	adds	r3, #1
 8013992:	b29b      	uxth	r3, r3
 8013994:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8013996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013998:	3301      	adds	r3, #1
 801399a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801399c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801399e:	2b07      	cmp	r3, #7
 80139a0:	d806      	bhi.n	80139b0 <_UG_PutChar+0x2b8>
 80139a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80139a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	f6ff af2b 	blt.w	8013806 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 80139b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80139b2:	3301      	adds	r3, #1
 80139b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80139b6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80139b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139ba:	429a      	cmp	r2, r3
 80139bc:	f4ff af1b 	bcc.w	80137f6 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80139c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80139c2:	3301      	adds	r3, #1
 80139c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80139c6:	4b7d      	ldr	r3, [pc, #500]	; (8013bbc <_UG_PutChar+0x4c4>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80139d2:	429a      	cmp	r2, r3
 80139d4:	f4ff af0a 	bcc.w	80137ec <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80139d8:	7dbb      	ldrb	r3, [r7, #22]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f000 80e7 	beq.w	8013bae <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 80139e0:	8c3b      	ldrh	r3, [r7, #32]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d009      	beq.n	80139fa <_UG_PutChar+0x302>
 80139e6:	7dfb      	ldrb	r3, [r7, #23]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d106      	bne.n	80139fa <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 80139ec:	8c3a      	ldrh	r2, [r7, #32]
 80139ee:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	4610      	mov	r0, r2
 80139f6:	4798      	blx	r3
 80139f8:	e0d9      	b.n	8013bae <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 80139fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	f000 80d6 	beq.w	8013bae <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8013a02:	7dfb      	ldrb	r3, [r7, #23]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d15c      	bne.n	8013ac2 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8013a08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a0a:	8839      	ldrh	r1, [r7, #0]
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	4610      	mov	r0, r2
 8013a10:	4798      	blx	r3
 8013a12:	e0cc      	b.n	8013bae <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8013a14:	88ba      	ldrh	r2, [r7, #4]
 8013a16:	8abb      	ldrh	r3, [r7, #20]
 8013a18:	4413      	add	r3, r2
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013a1e:	1ad3      	subs	r3, r2, r3
 8013a20:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8013a22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d003      	beq.n	8013a34 <_UG_PutChar+0x33c>
 8013a2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a2e:	8a3b      	ldrh	r3, [r7, #16]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d224      	bcs.n	8013a7e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8013a34:	4b61      	ldr	r3, [pc, #388]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a3a:	461d      	mov	r5, r3
 8013a3c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013a40:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013a44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a46:	8a3b      	ldrh	r3, [r7, #16]
 8013a48:	4413      	add	r3, r2
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	3b01      	subs	r3, #1
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	b21c      	sxth	r4, r3
 8013a52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a60:	4413      	add	r3, r2
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	b21b      	sxth	r3, r3
 8013a66:	4622      	mov	r2, r4
 8013a68:	47a8      	blx	r5
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013a6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013a70:	8839      	ldrh	r1, [r7, #0]
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	4610      	mov	r0, r2
 8013a76:	4798      	blx	r3
               fpixels=0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8013a7c:	e021      	b.n	8013ac2 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8013a7e:	4b4f      	ldr	r3, [pc, #316]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a84:	461c      	mov	r4, r3
 8013a86:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013a8a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013a8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a90:	8a3b      	ldrh	r3, [r7, #16]
 8013a92:	4413      	add	r3, r2
 8013a94:	b29b      	uxth	r3, r3
 8013a96:	3b01      	subs	r3, #1
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	b21a      	sxth	r2, r3
 8013a9c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013aa0:	47a0      	blx	r4
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013aa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013aa8:	8839      	ldrh	r1, [r7, #0]
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	4610      	mov	r0, r2
 8013aae:	4798      	blx	r3
               fpixels -= width;
 8013ab0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ab2:	8a3b      	ldrh	r3, [r7, #16]
 8013ab4:	1ad3      	subs	r3, r2, r3
 8013ab6:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8013ab8:	88bb      	ldrh	r3, [r7, #4]
 8013aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8013abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013abe:	3301      	adds	r3, #1
 8013ac0:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8013ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1a5      	bne.n	8013a14 <_UG_PutChar+0x31c>
 8013ac8:	e071      	b.n	8013bae <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8013aca:	4b3c      	ldr	r3, [pc, #240]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d16b      	bne.n	8013bae <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	853b      	strh	r3, [r7, #40]	; 0x28
 8013ada:	e060      	b.n	8013b9e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8013adc:	2300      	movs	r3, #0
 8013ade:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013ae0:	e04a      	b.n	8013b78 <_UG_PutChar+0x480>
       {
         b = *data++;
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	60ba      	str	r2, [r7, #8]
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013aec:	883b      	ldrh	r3, [r7, #0]
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	7f7a      	ldrb	r2, [r7, #29]
 8013af2:	fb03 f202 	mul.w	r2, r3, r2
 8013af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	7f79      	ldrb	r1, [r7, #29]
 8013afe:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8013b02:	fb01 f303 	mul.w	r3, r1, r3
 8013b06:	4413      	add	r3, r2
 8013b08:	121b      	asrs	r3, r3, #8
 8013b0a:	b21b      	sxth	r3, r3
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8013b10:	883b      	ldrh	r3, [r7, #0]
 8013b12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b16:	7f79      	ldrb	r1, [r7, #29]
 8013b18:	fb03 f101 	mul.w	r1, r3, r1
 8013b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b24:	7f78      	ldrb	r0, [r7, #29]
 8013b26:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013b2a:	fb00 f303 	mul.w	r3, r0, r3
 8013b2e:	440b      	add	r3, r1
 8013b30:	121b      	asrs	r3, r3, #8
 8013b32:	b21b      	sxth	r3, r3
 8013b34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013b38:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	b21b      	sxth	r3, r3
 8013b3e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8013b40:	7dbb      	ldrb	r3, [r7, #22]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d005      	beq.n	8013b52 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8013b46:	8a7a      	ldrh	r2, [r7, #18]
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	4611      	mov	r1, r2
 8013b4c:	2001      	movs	r0, #1
 8013b4e:	4798      	blx	r3
 8013b50:	e00f      	b.n	8013b72 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8013b52:	4b1a      	ldr	r3, [pc, #104]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	88b9      	ldrh	r1, [r7, #4]
 8013b5c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013b5e:	440a      	add	r2, r1
 8013b60:	b292      	uxth	r2, r2
 8013b62:	b210      	sxth	r0, r2
 8013b64:	8879      	ldrh	r1, [r7, #2]
 8013b66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013b68:	440a      	add	r2, r1
 8013b6a:	b292      	uxth	r2, r2
 8013b6c:	b211      	sxth	r1, r2
 8013b6e:	8a7a      	ldrh	r2, [r7, #18]
 8013b70:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8013b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b74:	3301      	adds	r3, #1
 8013b76:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013b78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013b7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	dbaf      	blt.n	8013ae2 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	4a0d      	ldr	r2, [pc, #52]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013b86:	6812      	ldr	r2, [r2, #0]
 8013b88:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8013b8c:	4611      	mov	r1, r2
 8013b8e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013b92:	1a8a      	subs	r2, r1, r2
 8013b94:	4413      	add	r3, r2
 8013b96:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013b98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	853b      	strh	r3, [r7, #40]	; 0x28
 8013b9e:	4b07      	ldr	r3, [pc, #28]	; (8013bbc <_UG_PutChar+0x4c4>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013ba6:	b29b      	uxth	r3, r3
 8013ba8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d396      	bcc.n	8013adc <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 8013bae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	3730      	adds	r7, #48	; 0x30
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	200023f0 	.word	0x200023f0

08013bc0 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8013bc0:	b480      	push	{r7}
 8013bc2:	b089      	sub	sp, #36	; 0x24
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8013bc8:	4b57      	ldr	r3, [pc, #348]	; (8013d28 <_UG_ProcessTouchData+0x168>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	88db      	ldrh	r3, [r3, #6]
 8013bce:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8013bd0:	4b55      	ldr	r3, [pc, #340]	; (8013d28 <_UG_ProcessTouchData+0x168>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	891b      	ldrh	r3, [r3, #8]
 8013bd6:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8013bd8:	4b53      	ldr	r3, [pc, #332]	; (8013d28 <_UG_ProcessTouchData+0x168>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	791b      	ldrb	r3, [r3, #4]
 8013bde:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013be6:	2300      	movs	r3, #0
 8013be8:	83fb      	strh	r3, [r7, #30]
 8013bea:	e090      	b.n	8013d0e <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	685a      	ldr	r2, [r3, #4]
 8013bf0:	8bfb      	ldrh	r3, [r7, #30]
 8013bf2:	015b      	lsls	r3, r3, #5
 8013bf4:	4413      	add	r3, r2
 8013bf6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	785b      	ldrb	r3, [r3, #1]
 8013c02:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8013c04:	7bfb      	ldrb	r3, [r7, #15]
 8013c06:	f003 0301 	and.w	r3, r3, #1
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d179      	bne.n	8013d02 <_UG_ProcessTouchData+0x142>
 8013c0e:	7bfb      	ldrb	r3, [r7, #15]
 8013c10:	f003 0302 	and.w	r3, r3, #2
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d074      	beq.n	8013d02 <_UG_ProcessTouchData+0x142>
 8013c18:	7bfb      	ldrb	r3, [r7, #15]
 8013c1a:	f003 0308 	and.w	r3, r3, #8
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d06f      	beq.n	8013d02 <_UG_ProcessTouchData+0x142>
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
 8013c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d16a      	bne.n	8013d02 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8013c2c:	7dfb      	ldrb	r3, [r7, #23]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d047      	beq.n	8013cc2 <_UG_ProcessTouchData+0x102>
 8013c32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8013c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c3a:	d042      	beq.n	8013cc2 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013c3c:	7f7b      	ldrb	r3, [r7, #29]
 8013c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d107      	bne.n	8013c56 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8013c46:	7f7b      	ldrb	r3, [r7, #29]
 8013c48:	f043 0305 	orr.w	r3, r3, #5
 8013c4c:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8013c4e:	7f7b      	ldrb	r3, [r7, #29]
 8013c50:	f023 0318 	bic.w	r3, r3, #24
 8013c54:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013c56:	7f7b      	ldrb	r3, [r7, #29]
 8013c58:	f023 0320 	bic.w	r3, r3, #32
 8013c5c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013c64:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	db25      	blt.n	8013cb8 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013c72:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	dc1e      	bgt.n	8013cb8 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013c80:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	db17      	blt.n	8013cb8 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013c8e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	dc10      	bgt.n	8013cb8 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013c96:	7f7b      	ldrb	r3, [r7, #29]
 8013c98:	f043 0320 	orr.w	r3, r3, #32
 8013c9c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8013c9e:	7f7b      	ldrb	r3, [r7, #29]
 8013ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d107      	bne.n	8013cb8 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013ca8:	7f7b      	ldrb	r3, [r7, #29]
 8013caa:	f023 0304 	bic.w	r3, r3, #4
 8013cae:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013cb0:	7f7b      	ldrb	r3, [r7, #29]
 8013cb2:	f043 0302 	orr.w	r3, r3, #2
 8013cb6:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8013cb8:	7f7b      	ldrb	r3, [r7, #29]
 8013cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cbe:	777b      	strb	r3, [r7, #29]
 8013cc0:	e01f      	b.n	8013d02 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013cc2:	7f7b      	ldrb	r3, [r7, #29]
 8013cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d01a      	beq.n	8013d02 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8013ccc:	7f7b      	ldrb	r3, [r7, #29]
 8013cce:	f003 0320 	and.w	r3, r3, #32
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d004      	beq.n	8013ce0 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8013cd6:	7f7b      	ldrb	r3, [r7, #29]
 8013cd8:	f043 0308 	orr.w	r3, r3, #8
 8013cdc:	777b      	strb	r3, [r7, #29]
 8013cde:	e003      	b.n	8013ce8 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8013ce0:	7f7b      	ldrb	r3, [r7, #29]
 8013ce2:	f043 0310 	orr.w	r3, r3, #16
 8013ce6:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013ce8:	7f7b      	ldrb	r3, [r7, #29]
 8013cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d003      	beq.n	8013cfa <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8013cf2:	7f7b      	ldrb	r3, [r7, #29]
 8013cf4:	f043 0301 	orr.w	r3, r3, #1
 8013cf8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8013cfa:	7f7b      	ldrb	r3, [r7, #29]
 8013cfc:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 8013d00:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	7f7a      	ldrb	r2, [r7, #29]
 8013d06:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8013d08:	8bfb      	ldrh	r3, [r7, #30]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	83fb      	strh	r3, [r7, #30]
 8013d0e:	8bfa      	ldrh	r2, [r7, #30]
 8013d10:	8abb      	ldrh	r3, [r7, #20]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	f4ff af6a 	bcc.w	8013bec <_UG_ProcessTouchData+0x2c>
   }
}
 8013d18:	bf00      	nop
 8013d1a:	bf00      	nop
 8013d1c:	3724      	adds	r7, #36	; 0x24
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	200023f0 	.word	0x200023f0

08013d2c <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b086      	sub	sp, #24
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	82fb      	strh	r3, [r7, #22]
 8013d3e:	e035      	b.n	8013dac <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	685a      	ldr	r2, [r3, #4]
 8013d44:	8afb      	ldrh	r3, [r7, #22]
 8013d46:	015b      	lsls	r3, r3, #5
 8013d48:	4413      	add	r3, r2
 8013d4a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	785b      	ldrb	r3, [r3, #1]
 8013d56:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	f003 0301 	and.w	r3, r3, #1
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d121      	bne.n	8013da6 <_UG_UpdateObjects+0x7a>
 8013d62:	7bfb      	ldrb	r3, [r7, #15]
 8013d64:	f003 0302 	and.w	r3, r3, #2
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d01c      	beq.n	8013da6 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8013d6c:	7bfb      	ldrb	r3, [r7, #15]
 8013d6e:	f003 0320 	and.w	r3, r3, #32
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d004      	beq.n	8013d80 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	6939      	ldr	r1, [r7, #16]
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013d80:	7bfb      	ldrb	r3, [r7, #15]
 8013d82:	f003 0308 	and.w	r3, r3, #8
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00d      	beq.n	8013da6 <_UG_UpdateObjects+0x7a>
 8013d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	da09      	bge.n	8013da6 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8013d92:	7bbb      	ldrb	r3, [r7, #14]
 8013d94:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d004      	beq.n	8013da6 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	6939      	ldr	r1, [r7, #16]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8013da6:	8afb      	ldrh	r3, [r7, #22]
 8013da8:	3301      	adds	r3, #1
 8013daa:	82fb      	strh	r3, [r7, #22]
 8013dac:	8afa      	ldrh	r2, [r7, #22]
 8013dae:	8abb      	ldrh	r3, [r7, #20]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d3c5      	bcc.n	8013d40 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8013db4:	bf00      	nop
 8013db6:	bf00      	nop
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
	...

08013dc0 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b086      	sub	sp, #24
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8013dc8:	4b22      	ldr	r3, [pc, #136]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013dca:	2200      	movs	r2, #0
 8013dcc:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8013dce:	4b21      	ldr	r3, [pc, #132]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013dda:	2300      	movs	r3, #0
 8013ddc:	82fb      	strh	r3, [r7, #22]
 8013dde:	e02f      	b.n	8013e40 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	685a      	ldr	r2, [r3, #4]
 8013de4:	8afb      	ldrh	r3, [r7, #22]
 8013de6:	015b      	lsls	r3, r3, #5
 8013de8:	4413      	add	r3, r2
 8013dea:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013df2:	7bfb      	ldrb	r3, [r7, #15]
 8013df4:	f003 0301 	and.w	r3, r3, #1
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d11e      	bne.n	8013e3a <_UG_HandleEvents+0x7a>
 8013dfc:	7bfb      	ldrb	r3, [r7, #15]
 8013dfe:	f003 0302 	and.w	r3, r3, #2
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d019      	beq.n	8013e3a <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	7e9b      	ldrb	r3, [r3, #26]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d015      	beq.n	8013e3a <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8013e0e:	4a11      	ldr	r2, [pc, #68]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	7e1a      	ldrb	r2, [r3, #24]
 8013e18:	4b0e      	ldr	r3, [pc, #56]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013e1a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	7e5a      	ldrb	r2, [r3, #25]
 8013e20:	4b0c      	ldr	r3, [pc, #48]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013e22:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	7e9a      	ldrb	r2, [r3, #26]
 8013e28:	4b0a      	ldr	r3, [pc, #40]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013e2a:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e30:	4808      	ldr	r0, [pc, #32]	; (8013e54 <_UG_HandleEvents+0x94>)
 8013e32:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	2200      	movs	r2, #0
 8013e38:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8013e3a:	8afb      	ldrh	r3, [r7, #22]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	82fb      	strh	r3, [r7, #22]
 8013e40:	8afa      	ldrh	r2, [r7, #22]
 8013e42:	8abb      	ldrh	r3, [r7, #20]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d3cb      	bcc.n	8013de0 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8013e48:	bf00      	nop
 8013e4a:	bf00      	nop
 8013e4c:	3718      	adds	r7, #24
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	20002404 	.word	0x20002404

08013e58 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013e58:	b590      	push	{r4, r7, lr}
 8013e5a:	b08f      	sub	sp, #60	; 0x3c
 8013e5c:	af02      	add	r7, sp, #8
 8013e5e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 812c 	beq.w	80140c2 <_UG_PutText+0x26a>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	f000 8127 	beq.w	80140c2 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	89db      	ldrh	r3, [r3, #14]
 8013e78:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	895b      	ldrh	r3, [r3, #10]
 8013e7e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	3302      	adds	r3, #2
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8013e8a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8013e8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e92:	1ad2      	subs	r2, r2, r3
 8013e94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	f2c0 8114 	blt.w	80140c6 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	891b      	ldrh	r3, [r3, #8]
 8013ea2:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	899b      	ldrh	r3, [r3, #12]
 8013ea8:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7d1b      	ldrb	r3, [r3, #20]
 8013eae:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	8adb      	ldrh	r3, [r3, #22]
 8013eb4:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	8b1b      	ldrh	r3, [r3, #24]
 8013eba:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7ff fb92 	bl	80135f4 <_UG_FontSelect>

   rc=1;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013ed8:	4b80      	ldr	r3, [pc, #512]	; (80140dc <_UG_PutText+0x284>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d107      	bne.n	8013ef4 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8013ee4:	f107 0308 	add.w	r3, r7, #8
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f7ff f9bf 	bl	801326c <_UG_DecodeUTF8>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013ef2:	e004      	b.n	8013efe <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	1c5a      	adds	r2, r3, #1
 8013ef8:	60ba      	str	r2, [r7, #8]
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8013efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d006      	beq.n	8013f12 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8013f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f06:	2b0a      	cmp	r3, #10
 8013f08:	d1e6      	bne.n	8013ed8 <_UG_PutText+0x80>
 8013f0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013f10:	e7e2      	b.n	8013ed8 <_UG_PutText+0x80>
     if(!chr) break;
 8013f12:	bf00      	nop
   }

   yp = 0;
 8013f14:	2300      	movs	r3, #0
 8013f16:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8013f18:	7e7b      	ldrb	r3, [r7, #25]
 8013f1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d01f      	beq.n	8013f62 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8013f22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013f24:	8c3b      	ldrh	r3, [r7, #32]
 8013f26:	1ad3      	subs	r3, r2, r3
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8013f30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f32:	8bfb      	ldrh	r3, [r7, #30]
 8013f34:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013f36:	fb11 f303 	smulbb	r3, r1, r3
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	1ad3      	subs	r3, r2, r3
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8013f42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f46:	3b01      	subs	r3, #1
 8013f48:	b299      	uxth	r1, r3
 8013f4a:	8abb      	ldrh	r3, [r7, #20]
 8013f4c:	fb11 f303 	smulbb	r3, r1, r3
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	1ad3      	subs	r3, r2, r3
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013f58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	f2c0 80b4 	blt.w	80140ca <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8013f62:	7e7b      	ldrb	r3, [r7, #25]
 8013f64:	f003 0310 	and.w	r3, r3, #16
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d003      	beq.n	8013f74 <_UG_PutText+0x11c>
 8013f6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013f70:	105b      	asrs	r3, r3, #1
 8013f72:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8013f74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013f76:	8c3b      	ldrh	r3, [r7, #32]
 8013f78:	4413      	add	r3, r2
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8013f7e:	2300      	movs	r3, #0
 8013f80:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8013f86:	2300      	movs	r3, #0
 8013f88:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013f8a:	4b54      	ldr	r3, [pc, #336]	; (80140dc <_UG_PutText+0x284>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d107      	bne.n	8013fa6 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8013f96:	f107 0308 	add.w	r3, r7, #8
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7ff f966 	bl	801326c <_UG_DecodeUTF8>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013fa4:	e004      	b.n	8013fb0 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	1c5a      	adds	r2, r3, #1
 8013faa:	60ba      	str	r2, [r7, #8]
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8013fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d01b      	beq.n	8013fee <_UG_PutText+0x196>
 8013fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fb8:	2b0a      	cmp	r3, #10
 8013fba:	d018      	beq.n	8013fee <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8013fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7ff f9cb 	bl	801335c <_UG_GetCharData>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8013fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fd2:	d00a      	beq.n	8013fea <_UG_PutText+0x192>
         sl++;
 8013fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013fd6:	3301      	adds	r3, #1
 8013fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8013fda:	8a7a      	ldrh	r2, [r7, #18]
 8013fdc:	8afb      	ldrh	r3, [r7, #22]
 8013fde:	4413      	add	r3, r2
 8013fe0:	b29a      	uxth	r2, r3
 8013fe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013fe4:	4413      	add	r3, r2
 8013fe6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013fe8:	e7cf      	b.n	8013f8a <_UG_PutText+0x132>
         if (w == -1){continue;}
 8013fea:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013fec:	e7cd      	b.n	8013f8a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8013fee:	8afb      	ldrh	r3, [r7, #22]
 8013ff0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8013ff6:	8b7a      	ldrh	r2, [r7, #26]
 8013ff8:	8bbb      	ldrh	r3, [r7, #28]
 8013ffa:	1ad3      	subs	r3, r2, r3
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	3301      	adds	r3, #1
 8014000:	b29b      	uxth	r3, r3
 8014002:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8014004:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014008:	1ad3      	subs	r3, r2, r3
 801400a:	b29b      	uxth	r3, r3
 801400c:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 801400e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8014012:	2b00      	cmp	r3, #0
 8014014:	db5b      	blt.n	80140ce <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8014016:	7e7b      	ldrb	r3, [r7, #25]
 8014018:	f003 0301 	and.w	r3, r3, #1
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <_UG_PutText+0x1ce>
 8014020:	2300      	movs	r3, #0
 8014022:	853b      	strh	r3, [r7, #40]	; 0x28
 8014024:	e008      	b.n	8014038 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8014026:	7e7b      	ldrb	r3, [r7, #25]
 8014028:	f003 0302 	and.w	r3, r3, #2
 801402c:	2b00      	cmp	r3, #0
 801402e:	d003      	beq.n	8014038 <_UG_PutText+0x1e0>
 8014030:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8014034:	105b      	asrs	r3, r3, #1
 8014036:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8014038:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801403a:	8bbb      	ldrh	r3, [r7, #28]
 801403c:	4413      	add	r3, r2
 801403e:	b29b      	uxth	r3, r3
 8014040:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8014042:	4b26      	ldr	r3, [pc, #152]	; (80140dc <_UG_PutText+0x284>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801404a:	2b00      	cmp	r3, #0
 801404c:	d107      	bne.n	801405e <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 801404e:	f107 030c 	add.w	r3, r7, #12
 8014052:	4618      	mov	r0, r3
 8014054:	f7ff f90a 	bl	801326c <_UG_DecodeUTF8>
 8014058:	4603      	mov	r3, r0
 801405a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801405c:	e004      	b.n	8014068 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	1c5a      	adds	r2, r3, #1
 8014062:	60fa      	str	r2, [r7, #12]
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8014068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801406a:	2b00      	cmp	r3, #0
 801406c:	d031      	beq.n	80140d2 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801406e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014070:	2b0a      	cmp	r3, #10
 8014072:	d01c      	beq.n	80140ae <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	8a1c      	ldrh	r4, [r3, #16]
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	8a5b      	ldrh	r3, [r3, #18]
 801407c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8014080:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8014084:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8014086:	9300      	str	r3, [sp, #0]
 8014088:	4623      	mov	r3, r4
 801408a:	f7ff fb35 	bl	80136f8 <_UG_PutChar>
 801408e:	4603      	mov	r3, r0
 8014090:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8014092:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801409a:	d0d2      	beq.n	8014042 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 801409c:	8a7a      	ldrh	r2, [r7, #18]
 801409e:	8afb      	ldrh	r3, [r7, #22]
 80140a0:	4413      	add	r3, r2
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80140a6:	4413      	add	r3, r2
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80140ac:	e7c9      	b.n	8014042 <_UG_PutText+0x1ea>
           break;
 80140ae:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80140b0:	8bfa      	ldrh	r2, [r7, #30]
 80140b2:	8abb      	ldrh	r3, [r7, #20]
 80140b4:	4413      	add	r3, r2
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80140ba:	4413      	add	r3, r2
 80140bc:	b29b      	uxth	r3, r3
 80140be:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 80140c0:	e75d      	b.n	8013f7e <_UG_PutText+0x126>
     return;
 80140c2:	bf00      	nop
 80140c4:	e006      	b.n	80140d4 <_UG_PutText+0x27c>
     return;
 80140c6:	bf00      	nop
 80140c8:	e004      	b.n	80140d4 <_UG_PutText+0x27c>
        return;
 80140ca:	bf00      	nop
 80140cc:	e002      	b.n	80140d4 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80140ce:	bf00      	nop
 80140d0:	e000      	b.n	80140d4 <_UG_PutText+0x27c>
           return;
 80140d2:	bf00      	nop
   }
}
 80140d4:	3734      	adds	r7, #52	; 0x34
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd90      	pop	{r4, r7, pc}
 80140da:	bf00      	nop
 80140dc:	200023f0 	.word	0x200023f0

080140e0 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 80140e0:	b5b0      	push	{r4, r5, r7, lr}
 80140e2:	b084      	sub	sp, #16
 80140e4:	af02      	add	r7, sp, #8
 80140e6:	4604      	mov	r4, r0
 80140e8:	4608      	mov	r0, r1
 80140ea:	4611      	mov	r1, r2
 80140ec:	461a      	mov	r2, r3
 80140ee:	4623      	mov	r3, r4
 80140f0:	80fb      	strh	r3, [r7, #6]
 80140f2:	4603      	mov	r3, r0
 80140f4:	80bb      	strh	r3, [r7, #4]
 80140f6:	460b      	mov	r3, r1
 80140f8:	807b      	strh	r3, [r7, #2]
 80140fa:	4613      	mov	r3, r2
 80140fc:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80140fe:	887b      	ldrh	r3, [r7, #2]
 8014100:	3b01      	subs	r3, #1
 8014102:	b29b      	uxth	r3, r3
 8014104:	b21c      	sxth	r4, r3
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	1c9a      	adds	r2, r3, #2
 801410a:	61ba      	str	r2, [r7, #24]
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8014112:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014116:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	4613      	mov	r3, r2
 801411e:	4622      	mov	r2, r4
 8014120:	f7fe fee0 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8014124:	88bb      	ldrh	r3, [r7, #4]
 8014126:	3301      	adds	r3, #1
 8014128:	b29b      	uxth	r3, r3
 801412a:	b219      	sxth	r1, r3
 801412c:	883b      	ldrh	r3, [r7, #0]
 801412e:	3b01      	subs	r3, #1
 8014130:	b29b      	uxth	r3, r3
 8014132:	b21c      	sxth	r4, r3
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	1c9a      	adds	r2, r3, #2
 8014138:	61ba      	str	r2, [r7, #24]
 801413a:	881b      	ldrh	r3, [r3, #0]
 801413c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014140:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	4623      	mov	r3, r4
 8014148:	f7fe fecc 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	1c9a      	adds	r2, r3, #2
 8014150:	61ba      	str	r2, [r7, #24]
 8014152:	881b      	ldrh	r3, [r3, #0]
 8014154:	f9b7 4000 	ldrsh.w	r4, [r7]
 8014158:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801415c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8014160:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	4623      	mov	r3, r4
 8014168:	f7fe febc 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 801416c:	883b      	ldrh	r3, [r7, #0]
 801416e:	3b01      	subs	r3, #1
 8014170:	b29b      	uxth	r3, r3
 8014172:	b21c      	sxth	r4, r3
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	1c9a      	adds	r2, r3, #2
 8014178:	61ba      	str	r2, [r7, #24]
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014180:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8014184:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8014188:	9300      	str	r3, [sp, #0]
 801418a:	4623      	mov	r3, r4
 801418c:	f7fe feaa 	bl	8012ee4 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8014190:	88fb      	ldrh	r3, [r7, #6]
 8014192:	3301      	adds	r3, #1
 8014194:	b29b      	uxth	r3, r3
 8014196:	b218      	sxth	r0, r3
 8014198:	88bb      	ldrh	r3, [r7, #4]
 801419a:	3301      	adds	r3, #1
 801419c:	b29b      	uxth	r3, r3
 801419e:	b219      	sxth	r1, r3
 80141a0:	887b      	ldrh	r3, [r7, #2]
 80141a2:	3b02      	subs	r3, #2
 80141a4:	b29b      	uxth	r3, r3
 80141a6:	b21c      	sxth	r4, r3
 80141a8:	88bb      	ldrh	r3, [r7, #4]
 80141aa:	3301      	adds	r3, #1
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	b21d      	sxth	r5, r3
 80141b0:	69bb      	ldr	r3, [r7, #24]
 80141b2:	1c9a      	adds	r2, r3, #2
 80141b4:	61ba      	str	r2, [r7, #24]
 80141b6:	881b      	ldrh	r3, [r3, #0]
 80141b8:	9300      	str	r3, [sp, #0]
 80141ba:	462b      	mov	r3, r5
 80141bc:	4622      	mov	r2, r4
 80141be:	f7fe fe91 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80141c2:	88fb      	ldrh	r3, [r7, #6]
 80141c4:	3301      	adds	r3, #1
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	b218      	sxth	r0, r3
 80141ca:	88bb      	ldrh	r3, [r7, #4]
 80141cc:	3302      	adds	r3, #2
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	b219      	sxth	r1, r3
 80141d2:	88fb      	ldrh	r3, [r7, #6]
 80141d4:	3301      	adds	r3, #1
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	b21c      	sxth	r4, r3
 80141da:	883b      	ldrh	r3, [r7, #0]
 80141dc:	3b02      	subs	r3, #2
 80141de:	b29b      	uxth	r3, r3
 80141e0:	b21d      	sxth	r5, r3
 80141e2:	69bb      	ldr	r3, [r7, #24]
 80141e4:	1c9a      	adds	r2, r3, #2
 80141e6:	61ba      	str	r2, [r7, #24]
 80141e8:	881b      	ldrh	r3, [r3, #0]
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	462b      	mov	r3, r5
 80141ee:	4622      	mov	r2, r4
 80141f0:	f7fe fe78 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80141f4:	88fb      	ldrh	r3, [r7, #6]
 80141f6:	3301      	adds	r3, #1
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	b218      	sxth	r0, r3
 80141fc:	883b      	ldrh	r3, [r7, #0]
 80141fe:	3b01      	subs	r3, #1
 8014200:	b29b      	uxth	r3, r3
 8014202:	b219      	sxth	r1, r3
 8014204:	887b      	ldrh	r3, [r7, #2]
 8014206:	3b01      	subs	r3, #1
 8014208:	b29b      	uxth	r3, r3
 801420a:	b21c      	sxth	r4, r3
 801420c:	883b      	ldrh	r3, [r7, #0]
 801420e:	3b01      	subs	r3, #1
 8014210:	b29b      	uxth	r3, r3
 8014212:	b21d      	sxth	r5, r3
 8014214:	69bb      	ldr	r3, [r7, #24]
 8014216:	1c9a      	adds	r2, r3, #2
 8014218:	61ba      	str	r2, [r7, #24]
 801421a:	881b      	ldrh	r3, [r3, #0]
 801421c:	9300      	str	r3, [sp, #0]
 801421e:	462b      	mov	r3, r5
 8014220:	4622      	mov	r2, r4
 8014222:	f7fe fe5f 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8014226:	887b      	ldrh	r3, [r7, #2]
 8014228:	3b01      	subs	r3, #1
 801422a:	b29b      	uxth	r3, r3
 801422c:	b218      	sxth	r0, r3
 801422e:	88bb      	ldrh	r3, [r7, #4]
 8014230:	3301      	adds	r3, #1
 8014232:	b29b      	uxth	r3, r3
 8014234:	b219      	sxth	r1, r3
 8014236:	887b      	ldrh	r3, [r7, #2]
 8014238:	3b01      	subs	r3, #1
 801423a:	b29b      	uxth	r3, r3
 801423c:	b21c      	sxth	r4, r3
 801423e:	883b      	ldrh	r3, [r7, #0]
 8014240:	3b02      	subs	r3, #2
 8014242:	b29b      	uxth	r3, r3
 8014244:	b21d      	sxth	r5, r3
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	1c9a      	adds	r2, r3, #2
 801424a:	61ba      	str	r2, [r7, #24]
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	462b      	mov	r3, r5
 8014252:	4622      	mov	r2, r4
 8014254:	f7fe fe46 	bl	8012ee4 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8014258:	88fb      	ldrh	r3, [r7, #6]
 801425a:	3302      	adds	r3, #2
 801425c:	b29b      	uxth	r3, r3
 801425e:	b218      	sxth	r0, r3
 8014260:	88bb      	ldrh	r3, [r7, #4]
 8014262:	3302      	adds	r3, #2
 8014264:	b29b      	uxth	r3, r3
 8014266:	b219      	sxth	r1, r3
 8014268:	887b      	ldrh	r3, [r7, #2]
 801426a:	3b03      	subs	r3, #3
 801426c:	b29b      	uxth	r3, r3
 801426e:	b21c      	sxth	r4, r3
 8014270:	88bb      	ldrh	r3, [r7, #4]
 8014272:	3302      	adds	r3, #2
 8014274:	b29b      	uxth	r3, r3
 8014276:	b21d      	sxth	r5, r3
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	1c9a      	adds	r2, r3, #2
 801427c:	61ba      	str	r2, [r7, #24]
 801427e:	881b      	ldrh	r3, [r3, #0]
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	462b      	mov	r3, r5
 8014284:	4622      	mov	r2, r4
 8014286:	f7fe fe2d 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801428a:	88fb      	ldrh	r3, [r7, #6]
 801428c:	3302      	adds	r3, #2
 801428e:	b29b      	uxth	r3, r3
 8014290:	b218      	sxth	r0, r3
 8014292:	88bb      	ldrh	r3, [r7, #4]
 8014294:	3303      	adds	r3, #3
 8014296:	b29b      	uxth	r3, r3
 8014298:	b219      	sxth	r1, r3
 801429a:	88fb      	ldrh	r3, [r7, #6]
 801429c:	3302      	adds	r3, #2
 801429e:	b29b      	uxth	r3, r3
 80142a0:	b21c      	sxth	r4, r3
 80142a2:	883b      	ldrh	r3, [r7, #0]
 80142a4:	3b03      	subs	r3, #3
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	b21d      	sxth	r5, r3
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	1c9a      	adds	r2, r3, #2
 80142ae:	61ba      	str	r2, [r7, #24]
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	462b      	mov	r3, r5
 80142b6:	4622      	mov	r2, r4
 80142b8:	f7fe fe14 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80142bc:	88fb      	ldrh	r3, [r7, #6]
 80142be:	3302      	adds	r3, #2
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	b218      	sxth	r0, r3
 80142c4:	883b      	ldrh	r3, [r7, #0]
 80142c6:	3b02      	subs	r3, #2
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	b219      	sxth	r1, r3
 80142cc:	887b      	ldrh	r3, [r7, #2]
 80142ce:	3b02      	subs	r3, #2
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	b21c      	sxth	r4, r3
 80142d4:	883b      	ldrh	r3, [r7, #0]
 80142d6:	3b02      	subs	r3, #2
 80142d8:	b29b      	uxth	r3, r3
 80142da:	b21d      	sxth	r5, r3
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	1c9a      	adds	r2, r3, #2
 80142e0:	61ba      	str	r2, [r7, #24]
 80142e2:	881b      	ldrh	r3, [r3, #0]
 80142e4:	9300      	str	r3, [sp, #0]
 80142e6:	462b      	mov	r3, r5
 80142e8:	4622      	mov	r2, r4
 80142ea:	f7fe fdfb 	bl	8012ee4 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 80142ee:	887b      	ldrh	r3, [r7, #2]
 80142f0:	3b02      	subs	r3, #2
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	b218      	sxth	r0, r3
 80142f6:	88bb      	ldrh	r3, [r7, #4]
 80142f8:	3302      	adds	r3, #2
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	b219      	sxth	r1, r3
 80142fe:	887b      	ldrh	r3, [r7, #2]
 8014300:	3b02      	subs	r3, #2
 8014302:	b29b      	uxth	r3, r3
 8014304:	b21a      	sxth	r2, r3
 8014306:	883b      	ldrh	r3, [r7, #0]
 8014308:	3b03      	subs	r3, #3
 801430a:	b29b      	uxth	r3, r3
 801430c:	b21c      	sxth	r4, r3
 801430e:	69bb      	ldr	r3, [r7, #24]
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	4623      	mov	r3, r4
 8014316:	f7fe fde5 	bl	8012ee4 <UG_DrawLine>
}
 801431a:	bf00      	nop
 801431c:	3708      	adds	r7, #8
 801431e:	46bd      	mov	sp, r7
 8014320:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014324 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	4603      	mov	r3, r0
 801432c:	6039      	str	r1, [r7, #0]
 801432e:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8014330:	79fb      	ldrb	r3, [r7, #7]
 8014332:	2b03      	cmp	r3, #3
 8014334:	d810      	bhi.n	8014358 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8014336:	4b0b      	ldr	r3, [pc, #44]	; (8014364 <UG_DriverRegister+0x40>)
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	79fb      	ldrb	r3, [r7, #7]
 801433c:	330a      	adds	r3, #10
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	4413      	add	r3, r2
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8014346:	4b07      	ldr	r3, [pc, #28]	; (8014364 <UG_DriverRegister+0x40>)
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	79fb      	ldrb	r3, [r7, #7]
 801434c:	330a      	adds	r3, #10
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	4413      	add	r3, r2
 8014352:	2203      	movs	r2, #3
 8014354:	721a      	strb	r2, [r3, #8]
 8014356:	e000      	b.n	801435a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8014358:	bf00      	nop
}
 801435a:	370c      	adds	r7, #12
 801435c:	46bd      	mov	sp, r7
 801435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014362:	4770      	bx	lr
 8014364:	200023f0 	.word	0x200023f0

08014368 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 801436e:	4b5e      	ldr	r3, [pc, #376]	; (80144e8 <UG_Update+0x180>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8014376:	f003 0301 	and.w	r3, r3, #1
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00a      	beq.n	8014394 <UG_Update+0x2c>
 801437e:	4b5a      	ldr	r3, [pc, #360]	; (80144e8 <UG_Update+0x180>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8014386:	4b58      	ldr	r3, [pc, #352]	; (80144e8 <UG_Update+0x180>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f022 0201 	bic.w	r2, r2, #1
 801438e:	b2d2      	uxtb	r2, r2
 8014390:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8014394:	4b54      	ldr	r3, [pc, #336]	; (80144e8 <UG_Update+0x180>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	68da      	ldr	r2, [r3, #12]
 801439a:	4b53      	ldr	r3, [pc, #332]	; (80144e8 <UG_Update+0x180>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d071      	beq.n	8014488 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80143a4:	4b50      	ldr	r3, [pc, #320]	; (80144e8 <UG_Update+0x180>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d06c      	beq.n	8014488 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80143ae:	4b4e      	ldr	r3, [pc, #312]	; (80144e8 <UG_Update+0x180>)
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	4b4d      	ldr	r3, [pc, #308]	; (80144e8 <UG_Update+0x180>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	6912      	ldr	r2, [r2, #16]
 80143b8:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80143ba:	4b4b      	ldr	r3, [pc, #300]	; (80144e8 <UG_Update+0x180>)
 80143bc:	681a      	ldr	r2, [r3, #0]
 80143be:	4b4a      	ldr	r3, [pc, #296]	; (80144e8 <UG_Update+0x180>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	68d2      	ldr	r2, [r2, #12]
 80143c4:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80143c6:	4b48      	ldr	r3, [pc, #288]	; (80144e8 <UG_Update+0x180>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	695b      	ldr	r3, [r3, #20]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d045      	beq.n	801445c <UG_Update+0xf4>
 80143d0:	4b45      	ldr	r3, [pc, #276]	; (80144e8 <UG_Update+0x180>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	695b      	ldr	r3, [r3, #20]
 80143d6:	7d9b      	ldrb	r3, [r3, #22]
 80143d8:	f003 0302 	and.w	r3, r3, #2
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d03d      	beq.n	801445c <UG_Update+0xf4>
 80143e0:	4b41      	ldr	r3, [pc, #260]	; (80144e8 <UG_Update+0x180>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	695b      	ldr	r3, [r3, #20]
 80143e6:	7a1b      	ldrb	r3, [r3, #8]
 80143e8:	f003 0308 	and.w	r3, r3, #8
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d035      	beq.n	801445c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80143f0:	4b3d      	ldr	r3, [pc, #244]	; (80144e8 <UG_Update+0x180>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	695b      	ldr	r3, [r3, #20]
 80143f6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80143fa:	4b3b      	ldr	r3, [pc, #236]	; (80144e8 <UG_Update+0x180>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	691b      	ldr	r3, [r3, #16]
 8014400:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8014404:	429a      	cmp	r2, r3
 8014406:	d123      	bne.n	8014450 <UG_Update+0xe8>
 8014408:	4b37      	ldr	r3, [pc, #220]	; (80144e8 <UG_Update+0x180>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	695b      	ldr	r3, [r3, #20]
 801440e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014412:	4b35      	ldr	r3, [pc, #212]	; (80144e8 <UG_Update+0x180>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	691b      	ldr	r3, [r3, #16]
 8014418:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801441c:	429a      	cmp	r2, r3
 801441e:	d117      	bne.n	8014450 <UG_Update+0xe8>
 8014420:	4b31      	ldr	r3, [pc, #196]	; (80144e8 <UG_Update+0x180>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	695b      	ldr	r3, [r3, #20]
 8014426:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801442a:	4b2f      	ldr	r3, [pc, #188]	; (80144e8 <UG_Update+0x180>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	691b      	ldr	r3, [r3, #16]
 8014430:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8014434:	429a      	cmp	r2, r3
 8014436:	d10b      	bne.n	8014450 <UG_Update+0xe8>
 8014438:	4b2b      	ldr	r3, [pc, #172]	; (80144e8 <UG_Update+0x180>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	695b      	ldr	r3, [r3, #20]
 801443e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8014442:	4b29      	ldr	r3, [pc, #164]	; (80144e8 <UG_Update+0x180>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801444c:	429a      	cmp	r2, r3
 801444e:	d005      	beq.n	801445c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8014450:	4b25      	ldr	r3, [pc, #148]	; (80144e8 <UG_Update+0x180>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	4618      	mov	r0, r3
 8014458:	f000 f848 	bl	80144ec <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 801445c:	4b22      	ldr	r3, [pc, #136]	; (80144e8 <UG_Update+0x180>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	691b      	ldr	r3, [r3, #16]
 8014462:	7a1a      	ldrb	r2, [r3, #8]
 8014464:	4b20      	ldr	r3, [pc, #128]	; (80144e8 <UG_Update+0x180>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	691b      	ldr	r3, [r3, #16]
 801446a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801446e:	b2d2      	uxtb	r2, r2
 8014470:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8014472:	4b1d      	ldr	r3, [pc, #116]	; (80144e8 <UG_Update+0x180>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	691b      	ldr	r3, [r3, #16]
 8014478:	7a1a      	ldrb	r2, [r3, #8]
 801447a:	4b1b      	ldr	r3, [pc, #108]	; (80144e8 <UG_Update+0x180>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	691b      	ldr	r3, [r3, #16]
 8014480:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8014484:	b2d2      	uxtb	r2, r2
 8014486:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8014488:	4b17      	ldr	r3, [pc, #92]	; (80144e8 <UG_Update+0x180>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	691b      	ldr	r3, [r3, #16]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d01b      	beq.n	80144ca <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8014492:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <UG_Update+0x180>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	7a1b      	ldrb	r3, [r3, #8]
 801449e:	f003 0320 	and.w	r3, r3, #32
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d002      	beq.n	80144ac <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f000 f8ca 	bl	8014640 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	7a1b      	ldrb	r3, [r3, #8]
 80144b0:	f003 0308 	and.w	r3, r3, #8
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d008      	beq.n	80144ca <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff fb81 	bl	8013bc0 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f7ff fc34 	bl	8013d2c <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f7ff fc7b 	bl	8013dc0 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80144ca:	4b07      	ldr	r3, [pc, #28]	; (80144e8 <UG_Update+0x180>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d004      	beq.n	80144e0 <UG_Update+0x178>
     gui->device->flush();
 80144d6:	4b04      	ldr	r3, [pc, #16]	; (80144e8 <UG_Update+0x180>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	4798      	blx	r3
   }
}
 80144e0:	bf00      	nop
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	200023f0 	.word	0x200023f0

080144ec <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 80144ec:	b590      	push	{r4, r7, lr}
 80144ee:	b08f      	sub	sp, #60	; 0x3c
 80144f0:	af02      	add	r7, sp, #8
 80144f2:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	f000 809a 	beq.w	8014630 <_UG_WindowDrawTitle+0x144>
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	7a1b      	ldrb	r3, [r3, #8]
 8014500:	f003 0302 	and.w	r3, r3, #2
 8014504:	2b00      	cmp	r3, #0
 8014506:	f000 8093 	beq.w	8014630 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	89db      	ldrh	r3, [r3, #14]
 801450e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	8a1b      	ldrh	r3, [r3, #16]
 8014514:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	8a5b      	ldrh	r3, [r3, #18]
 801451a:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	8a9b      	ldrh	r3, [r3, #20]
 8014520:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	7d9b      	ldrb	r3, [r3, #22]
 8014526:	f003 0301 	and.w	r3, r3, #1
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00f      	beq.n	801454e <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 801452e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014530:	3303      	adds	r3, #3
 8014532:	b29b      	uxth	r3, r3
 8014534:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8014536:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014538:	3303      	adds	r3, #3
 801453a:	b29b      	uxth	r3, r3
 801453c:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 801453e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014540:	3b03      	subs	r3, #3
 8014542:	b29b      	uxth	r3, r3
 8014544:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8014546:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014548:	3b03      	subs	r3, #3
 801454a:	b29b      	uxth	r3, r3
 801454c:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 801454e:	4b3b      	ldr	r3, [pc, #236]	; (801463c <_UG_WindowDrawTitle+0x150>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	691b      	ldr	r3, [r3, #16]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	429a      	cmp	r2, r3
 8014558:	d106      	bne.n	8014568 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801455e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014564:	83bb      	strh	r3, [r7, #28]
 8014566:	e005      	b.n	8014574 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801456c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014572:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801457a:	b29a      	uxth	r2, r3
 801457c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801457e:	4413      	add	r3, r2
 8014580:	b29b      	uxth	r3, r3
 8014582:	3b01      	subs	r3, #1
 8014584:	b29b      	uxth	r3, r3
 8014586:	b21c      	sxth	r4, r3
 8014588:	8bfb      	ldrh	r3, [r7, #30]
 801458a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801458e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8014592:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8014596:	9300      	str	r3, [sp, #0]
 8014598:	4623      	mov	r3, r4
 801459a:	f7fe fb03 	bl	8012ba4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	699b      	ldr	r3, [r3, #24]
 80145a2:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	69db      	ldr	r3, [r3, #28]
 80145a8:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80145aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145ac:	3303      	adds	r3, #3
 80145ae:	b29b      	uxth	r3, r3
 80145b0:	b21b      	sxth	r3, r3
 80145b2:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80145b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145b6:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 80145b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80145ba:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80145c6:	4413      	add	r3, r2
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	3b01      	subs	r3, #1
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	b21b      	sxth	r3, r3
 80145d0:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80145d8:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80145e2:	b21b      	sxth	r3, r3
 80145e4:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 80145ec:	b21b      	sxth	r3, r3
 80145ee:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 80145f0:	f107 030c 	add.w	r3, r7, #12
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7ff fc2f 	bl	8013e58 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014600:	b29a      	uxth	r2, r3
 8014602:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014604:	4413      	add	r3, r2
 8014606:	b29b      	uxth	r3, r3
 8014608:	b219      	sxth	r1, r3
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014610:	b29a      	uxth	r2, r3
 8014612:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014614:	4413      	add	r3, r2
 8014616:	b29b      	uxth	r3, r3
 8014618:	b21b      	sxth	r3, r3
 801461a:	f649 5413 	movw	r4, #40211	; 0x9d13
 801461e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8014622:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8014626:	9400      	str	r4, [sp, #0]
 8014628:	f7fe fc5c 	bl	8012ee4 <UG_DrawLine>
      return UG_RESULT_OK;
 801462c:	2300      	movs	r3, #0
 801462e:	e001      	b.n	8014634 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8014630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014634:	4618      	mov	r0, r3
 8014636:	3734      	adds	r7, #52	; 0x34
 8014638:	46bd      	mov	sp, r7
 801463a:	bd90      	pop	{r4, r7, pc}
 801463c:	200023f0 	.word	0x200023f0

08014640 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8014640:	b590      	push	{r4, r7, lr}
 8014642:	b089      	sub	sp, #36	; 0x24
 8014644:	af02      	add	r7, sp, #8
 8014646:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	89db      	ldrh	r3, [r3, #14]
 801464c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	8a1b      	ldrh	r3, [r3, #16]
 8014652:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	8a5b      	ldrh	r3, [r3, #18]
 8014658:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	8a9b      	ldrh	r3, [r3, #20]
 801465e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	7a1b      	ldrb	r3, [r3, #8]
 8014664:	f023 0320 	bic.w	r3, r3, #32
 8014668:	b2da      	uxtb	r2, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	7a1b      	ldrb	r3, [r3, #8]
 8014672:	f003 0308 	and.w	r3, r3, #8
 8014676:	2b00      	cmp	r3, #0
 8014678:	f000 8084 	beq.w	8014784 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	7d9b      	ldrb	r3, [r3, #22]
 8014680:	f003 0301 	and.w	r3, r3, #1
 8014684:	2b00      	cmp	r3, #0
 8014686:	d021      	beq.n	80146cc <_UG_WindowUpdate+0x8c>
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	7a1b      	ldrb	r3, [r3, #8]
 801468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014690:	2b00      	cmp	r3, #0
 8014692:	d11b      	bne.n	80146cc <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8014694:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014698:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801469c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80146a0:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80146a4:	4c43      	ldr	r4, [pc, #268]	; (80147b4 <_UG_WindowUpdate+0x174>)
 80146a6:	9400      	str	r4, [sp, #0]
 80146a8:	f7ff fd1a 	bl	80140e0 <_UG_DrawObjectFrame>
         xs+=3;
 80146ac:	8abb      	ldrh	r3, [r7, #20]
 80146ae:	3303      	adds	r3, #3
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80146b4:	8a7b      	ldrh	r3, [r7, #18]
 80146b6:	3303      	adds	r3, #3
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80146bc:	8a3b      	ldrh	r3, [r7, #16]
 80146be:	3b03      	subs	r3, #3
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80146c4:	89fb      	ldrh	r3, [r7, #14]
 80146c6:	3b03      	subs	r3, #3
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	7d9b      	ldrb	r3, [r3, #22]
 80146d0:	f003 0302 	and.w	r3, r3, #2
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d01a      	beq.n	801470e <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7ff ff07 	bl	80144ec <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	8a7b      	ldrh	r3, [r7, #18]
 80146e8:	4413      	add	r3, r2
 80146ea:	b29b      	uxth	r3, r3
 80146ec:	3301      	adds	r3, #1
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	7a1b      	ldrb	r3, [r3, #8]
 80146f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d007      	beq.n	801470e <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	7a1b      	ldrb	r3, [r3, #8]
 8014702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014706:	b2da      	uxtb	r2, r3
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	721a      	strb	r2, [r3, #8]
            return;
 801470c:	e04e      	b.n	80147ac <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	899b      	ldrh	r3, [r3, #12]
 8014712:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8014716:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801471a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 801471e:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8014722:	9300      	str	r3, [sp, #0]
 8014724:	4623      	mov	r3, r4
 8014726:	f7fe fa3d 	bl	8012ba4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8014730:	2300      	movs	r3, #0
 8014732:	82fb      	strh	r3, [r7, #22]
 8014734:	e021      	b.n	801477a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	685a      	ldr	r2, [r3, #4]
 801473a:	8afb      	ldrh	r3, [r7, #22]
 801473c:	015b      	lsls	r3, r3, #5
 801473e:	4413      	add	r3, r2
 8014740:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8014742:	68bb      	ldr	r3, [r7, #8]
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	f003 0301 	and.w	r3, r3, #1
 801474a:	2b00      	cmp	r3, #0
 801474c:	d112      	bne.n	8014774 <_UG_WindowUpdate+0x134>
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	f003 0302 	and.w	r3, r3, #2
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00c      	beq.n	8014774 <_UG_WindowUpdate+0x134>
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	f003 0308 	and.w	r3, r3, #8
 8014762:	2b00      	cmp	r3, #0
 8014764:	d006      	beq.n	8014774 <_UG_WindowUpdate+0x134>
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801476e:	b2da      	uxtb	r2, r3
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8014774:	8afb      	ldrh	r3, [r7, #22]
 8014776:	3301      	adds	r3, #1
 8014778:	82fb      	strh	r3, [r7, #22]
 801477a:	8afa      	ldrh	r2, [r7, #22]
 801477c:	89bb      	ldrh	r3, [r7, #12]
 801477e:	429a      	cmp	r2, r3
 8014780:	d3d9      	bcc.n	8014736 <_UG_WindowUpdate+0xf6>
 8014782:	e013      	b.n	80147ac <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 801479c:	4b06      	ldr	r3, [pc, #24]	; (80147b8 <_UG_WindowUpdate+0x178>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80147a4:	9300      	str	r3, [sp, #0]
 80147a6:	4623      	mov	r3, r4
 80147a8:	f7fe f9fc 	bl	8012ba4 <UG_FillFrame>
   }
}
 80147ac:	371c      	adds	r7, #28
 80147ae:	46bd      	mov	sp, r7
 80147b0:	bd90      	pop	{r4, r7, pc}
 80147b2:	bf00      	nop
 80147b4:	0801dee8 	.word	0x0801dee8
 80147b8:	200023f0 	.word	0x200023f0

080147bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b084      	sub	sp, #16
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	460b      	mov	r3, r1
 80147c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80147c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80147cc:	f002 f8fc 	bl	80169c8 <USBD_static_malloc>
 80147d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d105      	bne.n	80147e4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80147e0:	2302      	movs	r3, #2
 80147e2:	e066      	b.n	80148b2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	68fa      	ldr	r2, [r7, #12]
 80147e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	7c1b      	ldrb	r3, [r3, #16]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d119      	bne.n	8014828 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80147f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147f8:	2202      	movs	r2, #2
 80147fa:	2181      	movs	r1, #129	; 0x81
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f001 ff8a 	bl	8016716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2201      	movs	r2, #1
 8014806:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014808:	f44f 7300 	mov.w	r3, #512	; 0x200
 801480c:	2202      	movs	r2, #2
 801480e:	2101      	movs	r1, #1
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f001 ff80 	bl	8016716 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2201      	movs	r2, #1
 801481a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2210      	movs	r2, #16
 8014822:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014826:	e016      	b.n	8014856 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014828:	2340      	movs	r3, #64	; 0x40
 801482a:	2202      	movs	r2, #2
 801482c:	2181      	movs	r1, #129	; 0x81
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f001 ff71 	bl	8016716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2201      	movs	r2, #1
 8014838:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801483a:	2340      	movs	r3, #64	; 0x40
 801483c:	2202      	movs	r2, #2
 801483e:	2101      	movs	r1, #1
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f001 ff68 	bl	8016716 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2201      	movs	r2, #1
 801484a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2210      	movs	r2, #16
 8014852:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014856:	2308      	movs	r3, #8
 8014858:	2203      	movs	r2, #3
 801485a:	2182      	movs	r1, #130	; 0x82
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f001 ff5a 	bl	8016716 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2201      	movs	r2, #1
 8014866:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2200      	movs	r2, #0
 8014878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2200      	movs	r2, #0
 8014880:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	7c1b      	ldrb	r3, [r3, #16]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d109      	bne.n	80148a0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014896:	2101      	movs	r1, #1
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f002 f82b 	bl	80168f4 <USBD_LL_PrepareReceive>
 801489e:	e007      	b.n	80148b0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80148a6:	2340      	movs	r3, #64	; 0x40
 80148a8:	2101      	movs	r1, #1
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f002 f822 	bl	80168f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80148b0:	2300      	movs	r3, #0
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3710      	adds	r7, #16
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}

080148ba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80148ba:	b580      	push	{r7, lr}
 80148bc:	b082      	sub	sp, #8
 80148be:	af00      	add	r7, sp, #0
 80148c0:	6078      	str	r0, [r7, #4]
 80148c2:	460b      	mov	r3, r1
 80148c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80148c6:	2181      	movs	r1, #129	; 0x81
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f001 ff4a 	bl	8016762 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80148d4:	2101      	movs	r1, #1
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f001 ff43 	bl	8016762 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2200      	movs	r2, #0
 80148e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80148e4:	2182      	movs	r1, #130	; 0x82
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f001 ff3b 	bl	8016762 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00e      	beq.n	8014924 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801490c:	685b      	ldr	r3, [r3, #4]
 801490e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014916:	4618      	mov	r0, r3
 8014918:	f002 f864 	bl	80169e4 <USBD_static_free>
    pdev->pClassData = NULL;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	2200      	movs	r2, #0
 8014920:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014924:	2300      	movs	r3, #0
}
 8014926:	4618      	mov	r0, r3
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
	...

08014930 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014940:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014942:	2300      	movs	r3, #0
 8014944:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014946:	2300      	movs	r3, #0
 8014948:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801494a:	2300      	movs	r3, #0
 801494c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d101      	bne.n	8014958 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014954:	2303      	movs	r3, #3
 8014956:	e0af      	b.n	8014ab8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014960:	2b00      	cmp	r3, #0
 8014962:	d03f      	beq.n	80149e4 <USBD_CDC_Setup+0xb4>
 8014964:	2b20      	cmp	r3, #32
 8014966:	f040 809f 	bne.w	8014aa8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	88db      	ldrh	r3, [r3, #6]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d02e      	beq.n	80149d0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	781b      	ldrb	r3, [r3, #0]
 8014976:	b25b      	sxtb	r3, r3
 8014978:	2b00      	cmp	r3, #0
 801497a:	da16      	bge.n	80149aa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014982:	689b      	ldr	r3, [r3, #8]
 8014984:	683a      	ldr	r2, [r7, #0]
 8014986:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014988:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	88d2      	ldrh	r2, [r2, #6]
 801498e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	88db      	ldrh	r3, [r3, #6]
 8014994:	2b07      	cmp	r3, #7
 8014996:	bf28      	it	cs
 8014998:	2307      	movcs	r3, #7
 801499a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	89fa      	ldrh	r2, [r7, #14]
 80149a0:	4619      	mov	r1, r3
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f001 facf 	bl	8015f46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80149a8:	e085      	b.n	8014ab6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	785a      	ldrb	r2, [r3, #1]
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	88db      	ldrh	r3, [r3, #6]
 80149b8:	b2da      	uxtb	r2, r3
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80149c0:	6939      	ldr	r1, [r7, #16]
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	88db      	ldrh	r3, [r3, #6]
 80149c6:	461a      	mov	r2, r3
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f001 fae8 	bl	8015f9e <USBD_CtlPrepareRx>
      break;
 80149ce:	e072      	b.n	8014ab6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80149d6:	689b      	ldr	r3, [r3, #8]
 80149d8:	683a      	ldr	r2, [r7, #0]
 80149da:	7850      	ldrb	r0, [r2, #1]
 80149dc:	2200      	movs	r2, #0
 80149de:	6839      	ldr	r1, [r7, #0]
 80149e0:	4798      	blx	r3
      break;
 80149e2:	e068      	b.n	8014ab6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	785b      	ldrb	r3, [r3, #1]
 80149e8:	2b0b      	cmp	r3, #11
 80149ea:	d852      	bhi.n	8014a92 <USBD_CDC_Setup+0x162>
 80149ec:	a201      	add	r2, pc, #4	; (adr r2, 80149f4 <USBD_CDC_Setup+0xc4>)
 80149ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149f2:	bf00      	nop
 80149f4:	08014a25 	.word	0x08014a25
 80149f8:	08014aa1 	.word	0x08014aa1
 80149fc:	08014a93 	.word	0x08014a93
 8014a00:	08014a93 	.word	0x08014a93
 8014a04:	08014a93 	.word	0x08014a93
 8014a08:	08014a93 	.word	0x08014a93
 8014a0c:	08014a93 	.word	0x08014a93
 8014a10:	08014a93 	.word	0x08014a93
 8014a14:	08014a93 	.word	0x08014a93
 8014a18:	08014a93 	.word	0x08014a93
 8014a1c:	08014a4f 	.word	0x08014a4f
 8014a20:	08014a79 	.word	0x08014a79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	2b03      	cmp	r3, #3
 8014a2e:	d107      	bne.n	8014a40 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a30:	f107 030a 	add.w	r3, r7, #10
 8014a34:	2202      	movs	r2, #2
 8014a36:	4619      	mov	r1, r3
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f001 fa84 	bl	8015f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a3e:	e032      	b.n	8014aa6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f001 fa0e 	bl	8015e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a48:	2303      	movs	r3, #3
 8014a4a:	75fb      	strb	r3, [r7, #23]
          break;
 8014a4c:	e02b      	b.n	8014aa6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	2b03      	cmp	r3, #3
 8014a58:	d107      	bne.n	8014a6a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a5a:	f107 030d 	add.w	r3, r7, #13
 8014a5e:	2201      	movs	r2, #1
 8014a60:	4619      	mov	r1, r3
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f001 fa6f 	bl	8015f46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a68:	e01d      	b.n	8014aa6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014a6a:	6839      	ldr	r1, [r7, #0]
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f001 f9f9 	bl	8015e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a72:	2303      	movs	r3, #3
 8014a74:	75fb      	strb	r3, [r7, #23]
          break;
 8014a76:	e016      	b.n	8014aa6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a7e:	b2db      	uxtb	r3, r3
 8014a80:	2b03      	cmp	r3, #3
 8014a82:	d00f      	beq.n	8014aa4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014a84:	6839      	ldr	r1, [r7, #0]
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f001 f9ec 	bl	8015e64 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a8c:	2303      	movs	r3, #3
 8014a8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a90:	e008      	b.n	8014aa4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a92:	6839      	ldr	r1, [r7, #0]
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f001 f9e5 	bl	8015e64 <USBD_CtlError>
          ret = USBD_FAIL;
 8014a9a:	2303      	movs	r3, #3
 8014a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8014a9e:	e002      	b.n	8014aa6 <USBD_CDC_Setup+0x176>
          break;
 8014aa0:	bf00      	nop
 8014aa2:	e008      	b.n	8014ab6 <USBD_CDC_Setup+0x186>
          break;
 8014aa4:	bf00      	nop
      }
      break;
 8014aa6:	e006      	b.n	8014ab6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014aa8:	6839      	ldr	r1, [r7, #0]
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f001 f9da 	bl	8015e64 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ab0:	2303      	movs	r3, #3
 8014ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8014ab4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3718      	adds	r7, #24
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}

08014ac0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	460b      	mov	r3, r1
 8014aca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ad2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d101      	bne.n	8014ae2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014ade:	2303      	movs	r3, #3
 8014ae0:	e04f      	b.n	8014b82 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ae8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014aea:	78fa      	ldrb	r2, [r7, #3]
 8014aec:	6879      	ldr	r1, [r7, #4]
 8014aee:	4613      	mov	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4413      	add	r3, r2
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	440b      	add	r3, r1
 8014af8:	3318      	adds	r3, #24
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d029      	beq.n	8014b54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014b00:	78fa      	ldrb	r2, [r7, #3]
 8014b02:	6879      	ldr	r1, [r7, #4]
 8014b04:	4613      	mov	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	4413      	add	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	440b      	add	r3, r1
 8014b0e:	3318      	adds	r3, #24
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	78f9      	ldrb	r1, [r7, #3]
 8014b14:	68f8      	ldr	r0, [r7, #12]
 8014b16:	460b      	mov	r3, r1
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	440b      	add	r3, r1
 8014b1c:	00db      	lsls	r3, r3, #3
 8014b1e:	4403      	add	r3, r0
 8014b20:	3320      	adds	r3, #32
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b28:	fb01 f303 	mul.w	r3, r1, r3
 8014b2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d110      	bne.n	8014b54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014b32:	78fa      	ldrb	r2, [r7, #3]
 8014b34:	6879      	ldr	r1, [r7, #4]
 8014b36:	4613      	mov	r3, r2
 8014b38:	009b      	lsls	r3, r3, #2
 8014b3a:	4413      	add	r3, r2
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	440b      	add	r3, r1
 8014b40:	3318      	adds	r3, #24
 8014b42:	2200      	movs	r2, #0
 8014b44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b46:	78f9      	ldrb	r1, [r7, #3]
 8014b48:	2300      	movs	r3, #0
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f001 feb0 	bl	80168b2 <USBD_LL_Transmit>
 8014b52:	e015      	b.n	8014b80 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b54:	68bb      	ldr	r3, [r7, #8]
 8014b56:	2200      	movs	r2, #0
 8014b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b62:	691b      	ldr	r3, [r3, #16]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00b      	beq.n	8014b80 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b6e:	691b      	ldr	r3, [r3, #16]
 8014b70:	68ba      	ldr	r2, [r7, #8]
 8014b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b76:	68ba      	ldr	r2, [r7, #8]
 8014b78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b7c:	78fa      	ldrb	r2, [r7, #3]
 8014b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b084      	sub	sp, #16
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
 8014b92:	460b      	mov	r3, r1
 8014b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b9c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d101      	bne.n	8014bac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014ba8:	2303      	movs	r3, #3
 8014baa:	e015      	b.n	8014bd8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014bac:	78fb      	ldrb	r3, [r7, #3]
 8014bae:	4619      	mov	r1, r3
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f001 fec0 	bl	8016936 <USBD_LL_GetRxDataSize>
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bc4:	68db      	ldr	r3, [r3, #12]
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014bcc:	68fa      	ldr	r2, [r7, #12]
 8014bce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014bd2:	4611      	mov	r1, r2
 8014bd4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014bd6:	2300      	movs	r3, #0
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3710      	adds	r7, #16
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014bee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d101      	bne.n	8014bfa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8014bf6:	2303      	movs	r3, #3
 8014bf8:	e01b      	b.n	8014c32 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d015      	beq.n	8014c30 <USBD_CDC_EP0_RxReady+0x50>
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c0a:	2bff      	cmp	r3, #255	; 0xff
 8014c0c:	d010      	beq.n	8014c30 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c14:	689b      	ldr	r3, [r3, #8]
 8014c16:	68fa      	ldr	r2, [r7, #12]
 8014c18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8014c1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014c1e:	68fa      	ldr	r2, [r7, #12]
 8014c20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014c24:	b292      	uxth	r2, r2
 8014c26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	22ff      	movs	r2, #255	; 0xff
 8014c2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c30:	2300      	movs	r3, #0
}
 8014c32:	4618      	mov	r0, r3
 8014c34:	3710      	adds	r7, #16
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}
	...

08014c3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2243      	movs	r2, #67	; 0x43
 8014c48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8014c4a:	4b03      	ldr	r3, [pc, #12]	; (8014c58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	370c      	adds	r7, #12
 8014c50:	46bd      	mov	sp, r7
 8014c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c56:	4770      	bx	lr
 8014c58:	200002a4 	.word	0x200002a4

08014c5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2243      	movs	r2, #67	; 0x43
 8014c68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8014c6a:	4b03      	ldr	r3, [pc, #12]	; (8014c78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	370c      	adds	r7, #12
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr
 8014c78:	20000260 	.word	0x20000260

08014c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2243      	movs	r2, #67	; 0x43
 8014c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014c8a:	4b03      	ldr	r3, [pc, #12]	; (8014c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr
 8014c98:	200002e8 	.word	0x200002e8

08014c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	220a      	movs	r2, #10
 8014ca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014caa:	4b03      	ldr	r3, [pc, #12]	; (8014cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb6:	4770      	bx	lr
 8014cb8:	2000021c 	.word	0x2000021c

08014cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d101      	bne.n	8014cd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014ccc:	2303      	movs	r3, #3
 8014cce:	e004      	b.n	8014cda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	683a      	ldr	r2, [r7, #0]
 8014cd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014ce6:	b480      	push	{r7}
 8014ce8:	b087      	sub	sp, #28
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	60f8      	str	r0, [r7, #12]
 8014cee:	60b9      	str	r1, [r7, #8]
 8014cf0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014cf8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014cfa:	697b      	ldr	r3, [r7, #20]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d101      	bne.n	8014d04 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014d00:	2303      	movs	r3, #3
 8014d02:	e008      	b.n	8014d16 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	68ba      	ldr	r2, [r7, #8]
 8014d08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	371c      	adds	r7, #28
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014d22:	b480      	push	{r7}
 8014d24:	b085      	sub	sp, #20
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
 8014d2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d101      	bne.n	8014d3e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8014d3a:	2303      	movs	r3, #3
 8014d3c:	e004      	b.n	8014d48 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	683a      	ldr	r2, [r7, #0]
 8014d42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3714      	adds	r7, #20
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d52:	4770      	bx	lr

08014d54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b084      	sub	sp, #16
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014d64:	2301      	movs	r3, #1
 8014d66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d101      	bne.n	8014d76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014d72:	2303      	movs	r3, #3
 8014d74:	e01a      	b.n	8014dac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d114      	bne.n	8014daa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	2201      	movs	r2, #1
 8014d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014d98:	68bb      	ldr	r3, [r7, #8]
 8014d9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014d9e:	2181      	movs	r1, #129	; 0x81
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f001 fd86 	bl	80168b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014da6:	2300      	movs	r3, #0
 8014da8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d101      	bne.n	8014dd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8014dce:	2303      	movs	r3, #3
 8014dd0:	e016      	b.n	8014e00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	7c1b      	ldrb	r3, [r3, #16]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d109      	bne.n	8014dee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014de4:	2101      	movs	r1, #1
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f001 fd84 	bl	80168f4 <USBD_LL_PrepareReceive>
 8014dec:	e007      	b.n	8014dfe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014df4:	2340      	movs	r3, #64	; 0x40
 8014df6:	2101      	movs	r1, #1
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f001 fd7b 	bl	80168f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014dfe:	2300      	movs	r3, #0
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3710      	adds	r7, #16
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	4613      	mov	r3, r2
 8014e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d101      	bne.n	8014e20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014e1c:	2303      	movs	r3, #3
 8014e1e:	e01f      	b.n	8014e60 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2200      	movs	r2, #0
 8014e34:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d003      	beq.n	8014e46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	68ba      	ldr	r2, [r7, #8]
 8014e42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	2201      	movs	r2, #1
 8014e4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	79fa      	ldrb	r2, [r7, #7]
 8014e52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e54:	68f8      	ldr	r0, [r7, #12]
 8014e56:	f001 fbe3 	bl	8016620 <USBD_LL_Init>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3718      	adds	r7, #24
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e72:	2300      	movs	r3, #0
 8014e74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d101      	bne.n	8014e80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8014e7c:	2303      	movs	r3, #3
 8014e7e:	e016      	b.n	8014eae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	683a      	ldr	r2, [r7, #0]
 8014e84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d00b      	beq.n	8014eac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e9c:	f107 020e 	add.w	r2, r7, #14
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	4798      	blx	r3
 8014ea4:	4602      	mov	r2, r0
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014eac:	2300      	movs	r3, #0
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3710      	adds	r7, #16
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}

08014eb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014eb6:	b580      	push	{r7, lr}
 8014eb8:	b082      	sub	sp, #8
 8014eba:	af00      	add	r7, sp, #0
 8014ebc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f001 fc0e 	bl	80166e0 <USBD_LL_Start>
 8014ec4:	4603      	mov	r3, r0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}

08014ece <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014ece:	b480      	push	{r7}
 8014ed0:	b083      	sub	sp, #12
 8014ed2:	af00      	add	r7, sp, #0
 8014ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ed6:	2300      	movs	r3, #0
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	460b      	mov	r3, r1
 8014eee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014ef0:	2303      	movs	r3, #3
 8014ef2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d009      	beq.n	8014f12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	78fa      	ldrb	r2, [r7, #3]
 8014f08:	4611      	mov	r1, r2
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	4798      	blx	r3
 8014f0e:	4603      	mov	r3, r0
 8014f10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3710      	adds	r7, #16
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	460b      	mov	r3, r1
 8014f26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d007      	beq.n	8014f42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	78fa      	ldrb	r2, [r7, #3]
 8014f3c:	4611      	mov	r1, r2
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	4798      	blx	r3
  }

  return USBD_OK;
 8014f42:	2300      	movs	r3, #0
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3708      	adds	r7, #8
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f5c:	6839      	ldr	r1, [r7, #0]
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f000 ff46 	bl	8015df0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2201      	movs	r2, #1
 8014f68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f72:	461a      	mov	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f80:	f003 031f 	and.w	r3, r3, #31
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	d01a      	beq.n	8014fbe <USBD_LL_SetupStage+0x72>
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	d822      	bhi.n	8014fd2 <USBD_LL_SetupStage+0x86>
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d002      	beq.n	8014f96 <USBD_LL_SetupStage+0x4a>
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d00a      	beq.n	8014faa <USBD_LL_SetupStage+0x5e>
 8014f94:	e01d      	b.n	8014fd2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f000 f9ee 	bl	8015380 <USBD_StdDevReq>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8014fa8:	e020      	b.n	8014fec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 fa52 	bl	801545c <USBD_StdItfReq>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	73fb      	strb	r3, [r7, #15]
      break;
 8014fbc:	e016      	b.n	8014fec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fc4:	4619      	mov	r1, r3
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f000 fa91 	bl	80154ee <USBD_StdEPReq>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	73fb      	strb	r3, [r7, #15]
      break;
 8014fd0:	e00c      	b.n	8014fec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	4619      	mov	r1, r3
 8014fe0:	6878      	ldr	r0, [r7, #4]
 8014fe2:	f001 fbdd 	bl	80167a0 <USBD_LL_StallEP>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8014fea:	bf00      	nop
  }

  return ret;
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b086      	sub	sp, #24
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	460b      	mov	r3, r1
 8015000:	607a      	str	r2, [r7, #4]
 8015002:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015004:	7afb      	ldrb	r3, [r7, #11]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d138      	bne.n	801507c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015010:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015018:	2b03      	cmp	r3, #3
 801501a:	d14a      	bne.n	80150b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	689a      	ldr	r2, [r3, #8]
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	429a      	cmp	r2, r3
 8015026:	d913      	bls.n	8015050 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	689a      	ldr	r2, [r3, #8]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	1ad2      	subs	r2, r2, r3
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	68da      	ldr	r2, [r3, #12]
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	4293      	cmp	r3, r2
 8015040:	bf28      	it	cs
 8015042:	4613      	movcs	r3, r2
 8015044:	461a      	mov	r2, r3
 8015046:	6879      	ldr	r1, [r7, #4]
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f000 ffc5 	bl	8015fd8 <USBD_CtlContinueRx>
 801504e:	e030      	b.n	80150b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015056:	b2db      	uxtb	r3, r3
 8015058:	2b03      	cmp	r3, #3
 801505a:	d10b      	bne.n	8015074 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015062:	691b      	ldr	r3, [r3, #16]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d005      	beq.n	8015074 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801506e:	691b      	ldr	r3, [r3, #16]
 8015070:	68f8      	ldr	r0, [r7, #12]
 8015072:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015074:	68f8      	ldr	r0, [r7, #12]
 8015076:	f000 ffc0 	bl	8015ffa <USBD_CtlSendStatus>
 801507a:	e01a      	b.n	80150b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015082:	b2db      	uxtb	r3, r3
 8015084:	2b03      	cmp	r3, #3
 8015086:	d114      	bne.n	80150b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801508e:	699b      	ldr	r3, [r3, #24]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d00e      	beq.n	80150b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801509a:	699b      	ldr	r3, [r3, #24]
 801509c:	7afa      	ldrb	r2, [r7, #11]
 801509e:	4611      	mov	r1, r2
 80150a0:	68f8      	ldr	r0, [r7, #12]
 80150a2:	4798      	blx	r3
 80150a4:	4603      	mov	r3, r0
 80150a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80150a8:	7dfb      	ldrb	r3, [r7, #23]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d001      	beq.n	80150b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80150ae:	7dfb      	ldrb	r3, [r7, #23]
 80150b0:	e000      	b.n	80150b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80150b2:	2300      	movs	r3, #0
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3718      	adds	r7, #24
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b086      	sub	sp, #24
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	460b      	mov	r3, r1
 80150c6:	607a      	str	r2, [r7, #4]
 80150c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80150ca:	7afb      	ldrb	r3, [r7, #11]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d16b      	bne.n	80151a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	3314      	adds	r3, #20
 80150d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80150dc:	2b02      	cmp	r3, #2
 80150de:	d156      	bne.n	801518e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	689a      	ldr	r2, [r3, #8]
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d914      	bls.n	8015116 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	689a      	ldr	r2, [r3, #8]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	1ad2      	subs	r2, r2, r3
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	689b      	ldr	r3, [r3, #8]
 80150fe:	461a      	mov	r2, r3
 8015100:	6879      	ldr	r1, [r7, #4]
 8015102:	68f8      	ldr	r0, [r7, #12]
 8015104:	f000 ff3a 	bl	8015f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015108:	2300      	movs	r3, #0
 801510a:	2200      	movs	r2, #0
 801510c:	2100      	movs	r1, #0
 801510e:	68f8      	ldr	r0, [r7, #12]
 8015110:	f001 fbf0 	bl	80168f4 <USBD_LL_PrepareReceive>
 8015114:	e03b      	b.n	801518e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	68da      	ldr	r2, [r3, #12]
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	689b      	ldr	r3, [r3, #8]
 801511e:	429a      	cmp	r2, r3
 8015120:	d11c      	bne.n	801515c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	685a      	ldr	r2, [r3, #4]
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801512a:	429a      	cmp	r2, r3
 801512c:	d316      	bcc.n	801515c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	685a      	ldr	r2, [r3, #4]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015138:	429a      	cmp	r2, r3
 801513a:	d20f      	bcs.n	801515c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801513c:	2200      	movs	r2, #0
 801513e:	2100      	movs	r1, #0
 8015140:	68f8      	ldr	r0, [r7, #12]
 8015142:	f000 ff1b 	bl	8015f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2200      	movs	r2, #0
 801514a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801514e:	2300      	movs	r3, #0
 8015150:	2200      	movs	r2, #0
 8015152:	2100      	movs	r1, #0
 8015154:	68f8      	ldr	r0, [r7, #12]
 8015156:	f001 fbcd 	bl	80168f4 <USBD_LL_PrepareReceive>
 801515a:	e018      	b.n	801518e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015162:	b2db      	uxtb	r3, r3
 8015164:	2b03      	cmp	r3, #3
 8015166:	d10b      	bne.n	8015180 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d005      	beq.n	8015180 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015180:	2180      	movs	r1, #128	; 0x80
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f001 fb0c 	bl	80167a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015188:	68f8      	ldr	r0, [r7, #12]
 801518a:	f000 ff49 	bl	8016020 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015194:	2b01      	cmp	r3, #1
 8015196:	d122      	bne.n	80151de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f7ff fe98 	bl	8014ece <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	2200      	movs	r2, #0
 80151a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80151a6:	e01a      	b.n	80151de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	2b03      	cmp	r3, #3
 80151b2:	d114      	bne.n	80151de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151ba:	695b      	ldr	r3, [r3, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d00e      	beq.n	80151de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80151c6:	695b      	ldr	r3, [r3, #20]
 80151c8:	7afa      	ldrb	r2, [r7, #11]
 80151ca:	4611      	mov	r1, r2
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	4798      	blx	r3
 80151d0:	4603      	mov	r3, r0
 80151d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80151d4:	7dfb      	ldrb	r3, [r7, #23]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d001      	beq.n	80151de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80151da:	7dfb      	ldrb	r3, [r7, #23]
 80151dc:	e000      	b.n	80151e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80151de:	2300      	movs	r3, #0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3718      	adds	r7, #24
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2201      	movs	r2, #1
 80151f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2200      	movs	r2, #0
 80151fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2200      	movs	r2, #0
 8015204:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2200      	movs	r2, #0
 801520a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015214:	2b00      	cmp	r3, #0
 8015216:	d101      	bne.n	801521c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8015218:	2303      	movs	r3, #3
 801521a:	e02f      	b.n	801527c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015222:	2b00      	cmp	r3, #0
 8015224:	d00f      	beq.n	8015246 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d009      	beq.n	8015246 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	6852      	ldr	r2, [r2, #4]
 801523e:	b2d2      	uxtb	r2, r2
 8015240:	4611      	mov	r1, r2
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015246:	2340      	movs	r3, #64	; 0x40
 8015248:	2200      	movs	r2, #0
 801524a:	2100      	movs	r1, #0
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f001 fa62 	bl	8016716 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2201      	movs	r2, #1
 8015256:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2240      	movs	r2, #64	; 0x40
 801525e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015262:	2340      	movs	r3, #64	; 0x40
 8015264:	2200      	movs	r2, #0
 8015266:	2180      	movs	r1, #128	; 0x80
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f001 fa54 	bl	8016716 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	2201      	movs	r2, #1
 8015272:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2240      	movs	r2, #64	; 0x40
 8015278:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801527a:	2300      	movs	r3, #0
}
 801527c:	4618      	mov	r0, r3
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015284:	b480      	push	{r7}
 8015286:	b083      	sub	sp, #12
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	460b      	mov	r3, r1
 801528e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	78fa      	ldrb	r2, [r7, #3]
 8015294:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015296:	2300      	movs	r3, #0
}
 8015298:	4618      	mov	r0, r3
 801529a:	370c      	adds	r7, #12
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr

080152a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b083      	sub	sp, #12
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152b2:	b2da      	uxtb	r2, r3
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2204      	movs	r2, #4
 80152be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80152c2:	2300      	movs	r3, #0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80152d0:	b480      	push	{r7}
 80152d2:	b083      	sub	sp, #12
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	2b04      	cmp	r3, #4
 80152e2:	d106      	bne.n	80152f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80152ea:	b2da      	uxtb	r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801530e:	2b00      	cmp	r3, #0
 8015310:	d101      	bne.n	8015316 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8015312:	2303      	movs	r3, #3
 8015314:	e012      	b.n	801533c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801531c:	b2db      	uxtb	r3, r3
 801531e:	2b03      	cmp	r3, #3
 8015320:	d10b      	bne.n	801533a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015328:	69db      	ldr	r3, [r3, #28]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d005      	beq.n	801533a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015334:	69db      	ldr	r3, [r3, #28]
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801533a:	2300      	movs	r3, #0
}
 801533c:	4618      	mov	r0, r3
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015344:	b480      	push	{r7}
 8015346:	b087      	sub	sp, #28
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	3301      	adds	r3, #1
 801535a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015362:	8a3b      	ldrh	r3, [r7, #16]
 8015364:	021b      	lsls	r3, r3, #8
 8015366:	b21a      	sxth	r2, r3
 8015368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801536c:	4313      	orrs	r3, r2
 801536e:	b21b      	sxth	r3, r3
 8015370:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015372:	89fb      	ldrh	r3, [r7, #14]
}
 8015374:	4618      	mov	r0, r3
 8015376:	371c      	adds	r7, #28
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr

08015380 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801538a:	2300      	movs	r3, #0
 801538c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015396:	2b40      	cmp	r3, #64	; 0x40
 8015398:	d005      	beq.n	80153a6 <USBD_StdDevReq+0x26>
 801539a:	2b40      	cmp	r3, #64	; 0x40
 801539c:	d853      	bhi.n	8015446 <USBD_StdDevReq+0xc6>
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d00b      	beq.n	80153ba <USBD_StdDevReq+0x3a>
 80153a2:	2b20      	cmp	r3, #32
 80153a4:	d14f      	bne.n	8015446 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153ac:	689b      	ldr	r3, [r3, #8]
 80153ae:	6839      	ldr	r1, [r7, #0]
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	4798      	blx	r3
 80153b4:	4603      	mov	r3, r0
 80153b6:	73fb      	strb	r3, [r7, #15]
      break;
 80153b8:	e04a      	b.n	8015450 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	785b      	ldrb	r3, [r3, #1]
 80153be:	2b09      	cmp	r3, #9
 80153c0:	d83b      	bhi.n	801543a <USBD_StdDevReq+0xba>
 80153c2:	a201      	add	r2, pc, #4	; (adr r2, 80153c8 <USBD_StdDevReq+0x48>)
 80153c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153c8:	0801541d 	.word	0x0801541d
 80153cc:	08015431 	.word	0x08015431
 80153d0:	0801543b 	.word	0x0801543b
 80153d4:	08015427 	.word	0x08015427
 80153d8:	0801543b 	.word	0x0801543b
 80153dc:	080153fb 	.word	0x080153fb
 80153e0:	080153f1 	.word	0x080153f1
 80153e4:	0801543b 	.word	0x0801543b
 80153e8:	08015413 	.word	0x08015413
 80153ec:	08015405 	.word	0x08015405
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 f9de 	bl	80157b4 <USBD_GetDescriptor>
          break;
 80153f8:	e024      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80153fa:	6839      	ldr	r1, [r7, #0]
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 fb6d 	bl	8015adc <USBD_SetAddress>
          break;
 8015402:	e01f      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015404:	6839      	ldr	r1, [r7, #0]
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f000 fbac 	bl	8015b64 <USBD_SetConfig>
 801540c:	4603      	mov	r3, r0
 801540e:	73fb      	strb	r3, [r7, #15]
          break;
 8015410:	e018      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015412:	6839      	ldr	r1, [r7, #0]
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f000 fc4b 	bl	8015cb0 <USBD_GetConfig>
          break;
 801541a:	e013      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801541c:	6839      	ldr	r1, [r7, #0]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 fc7c 	bl	8015d1c <USBD_GetStatus>
          break;
 8015424:	e00e      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015426:	6839      	ldr	r1, [r7, #0]
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fcab 	bl	8015d84 <USBD_SetFeature>
          break;
 801542e:	e009      	b.n	8015444 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015430:	6839      	ldr	r1, [r7, #0]
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f000 fcba 	bl	8015dac <USBD_ClrFeature>
          break;
 8015438:	e004      	b.n	8015444 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801543a:	6839      	ldr	r1, [r7, #0]
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f000 fd11 	bl	8015e64 <USBD_CtlError>
          break;
 8015442:	bf00      	nop
      }
      break;
 8015444:	e004      	b.n	8015450 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015446:	6839      	ldr	r1, [r7, #0]
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f000 fd0b 	bl	8015e64 <USBD_CtlError>
      break;
 801544e:	bf00      	nop
  }

  return ret;
 8015450:	7bfb      	ldrb	r3, [r7, #15]
}
 8015452:	4618      	mov	r0, r3
 8015454:	3710      	adds	r7, #16
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop

0801545c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015466:	2300      	movs	r3, #0
 8015468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015472:	2b40      	cmp	r3, #64	; 0x40
 8015474:	d005      	beq.n	8015482 <USBD_StdItfReq+0x26>
 8015476:	2b40      	cmp	r3, #64	; 0x40
 8015478:	d82f      	bhi.n	80154da <USBD_StdItfReq+0x7e>
 801547a:	2b00      	cmp	r3, #0
 801547c:	d001      	beq.n	8015482 <USBD_StdItfReq+0x26>
 801547e:	2b20      	cmp	r3, #32
 8015480:	d12b      	bne.n	80154da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015488:	b2db      	uxtb	r3, r3
 801548a:	3b01      	subs	r3, #1
 801548c:	2b02      	cmp	r3, #2
 801548e:	d81d      	bhi.n	80154cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	889b      	ldrh	r3, [r3, #4]
 8015494:	b2db      	uxtb	r3, r3
 8015496:	2b01      	cmp	r3, #1
 8015498:	d813      	bhi.n	80154c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a0:	689b      	ldr	r3, [r3, #8]
 80154a2:	6839      	ldr	r1, [r7, #0]
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	4798      	blx	r3
 80154a8:	4603      	mov	r3, r0
 80154aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	88db      	ldrh	r3, [r3, #6]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d110      	bne.n	80154d6 <USBD_StdItfReq+0x7a>
 80154b4:	7bfb      	ldrb	r3, [r7, #15]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d10d      	bne.n	80154d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 fd9d 	bl	8015ffa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80154c0:	e009      	b.n	80154d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fccd 	bl	8015e64 <USBD_CtlError>
          break;
 80154ca:	e004      	b.n	80154d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80154cc:	6839      	ldr	r1, [r7, #0]
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f000 fcc8 	bl	8015e64 <USBD_CtlError>
          break;
 80154d4:	e000      	b.n	80154d8 <USBD_StdItfReq+0x7c>
          break;
 80154d6:	bf00      	nop
      }
      break;
 80154d8:	e004      	b.n	80154e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f000 fcc1 	bl	8015e64 <USBD_CtlError>
      break;
 80154e2:	bf00      	nop
  }

  return ret;
 80154e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3710      	adds	r7, #16
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}

080154ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154ee:	b580      	push	{r7, lr}
 80154f0:	b084      	sub	sp, #16
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	6078      	str	r0, [r7, #4]
 80154f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80154f8:	2300      	movs	r3, #0
 80154fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	889b      	ldrh	r3, [r3, #4]
 8015500:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801550a:	2b40      	cmp	r3, #64	; 0x40
 801550c:	d007      	beq.n	801551e <USBD_StdEPReq+0x30>
 801550e:	2b40      	cmp	r3, #64	; 0x40
 8015510:	f200 8145 	bhi.w	801579e <USBD_StdEPReq+0x2b0>
 8015514:	2b00      	cmp	r3, #0
 8015516:	d00c      	beq.n	8015532 <USBD_StdEPReq+0x44>
 8015518:	2b20      	cmp	r3, #32
 801551a:	f040 8140 	bne.w	801579e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015524:	689b      	ldr	r3, [r3, #8]
 8015526:	6839      	ldr	r1, [r7, #0]
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	4798      	blx	r3
 801552c:	4603      	mov	r3, r0
 801552e:	73fb      	strb	r3, [r7, #15]
      break;
 8015530:	e13a      	b.n	80157a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	785b      	ldrb	r3, [r3, #1]
 8015536:	2b03      	cmp	r3, #3
 8015538:	d007      	beq.n	801554a <USBD_StdEPReq+0x5c>
 801553a:	2b03      	cmp	r3, #3
 801553c:	f300 8129 	bgt.w	8015792 <USBD_StdEPReq+0x2a4>
 8015540:	2b00      	cmp	r3, #0
 8015542:	d07f      	beq.n	8015644 <USBD_StdEPReq+0x156>
 8015544:	2b01      	cmp	r3, #1
 8015546:	d03c      	beq.n	80155c2 <USBD_StdEPReq+0xd4>
 8015548:	e123      	b.n	8015792 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015550:	b2db      	uxtb	r3, r3
 8015552:	2b02      	cmp	r3, #2
 8015554:	d002      	beq.n	801555c <USBD_StdEPReq+0x6e>
 8015556:	2b03      	cmp	r3, #3
 8015558:	d016      	beq.n	8015588 <USBD_StdEPReq+0x9a>
 801555a:	e02c      	b.n	80155b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801555c:	7bbb      	ldrb	r3, [r7, #14]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00d      	beq.n	801557e <USBD_StdEPReq+0x90>
 8015562:	7bbb      	ldrb	r3, [r7, #14]
 8015564:	2b80      	cmp	r3, #128	; 0x80
 8015566:	d00a      	beq.n	801557e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015568:	7bbb      	ldrb	r3, [r7, #14]
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f001 f917 	bl	80167a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015572:	2180      	movs	r1, #128	; 0x80
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f001 f913 	bl	80167a0 <USBD_LL_StallEP>
 801557a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801557c:	e020      	b.n	80155c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801557e:	6839      	ldr	r1, [r7, #0]
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f000 fc6f 	bl	8015e64 <USBD_CtlError>
              break;
 8015586:	e01b      	b.n	80155c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	885b      	ldrh	r3, [r3, #2]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d10e      	bne.n	80155ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015590:	7bbb      	ldrb	r3, [r7, #14]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00b      	beq.n	80155ae <USBD_StdEPReq+0xc0>
 8015596:	7bbb      	ldrb	r3, [r7, #14]
 8015598:	2b80      	cmp	r3, #128	; 0x80
 801559a:	d008      	beq.n	80155ae <USBD_StdEPReq+0xc0>
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	88db      	ldrh	r3, [r3, #6]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d104      	bne.n	80155ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80155a4:	7bbb      	ldrb	r3, [r7, #14]
 80155a6:	4619      	mov	r1, r3
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f001 f8f9 	bl	80167a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f000 fd23 	bl	8015ffa <USBD_CtlSendStatus>

              break;
 80155b4:	e004      	b.n	80155c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80155b6:	6839      	ldr	r1, [r7, #0]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f000 fc53 	bl	8015e64 <USBD_CtlError>
              break;
 80155be:	bf00      	nop
          }
          break;
 80155c0:	e0ec      	b.n	801579c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	2b02      	cmp	r3, #2
 80155cc:	d002      	beq.n	80155d4 <USBD_StdEPReq+0xe6>
 80155ce:	2b03      	cmp	r3, #3
 80155d0:	d016      	beq.n	8015600 <USBD_StdEPReq+0x112>
 80155d2:	e030      	b.n	8015636 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80155d4:	7bbb      	ldrb	r3, [r7, #14]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d00d      	beq.n	80155f6 <USBD_StdEPReq+0x108>
 80155da:	7bbb      	ldrb	r3, [r7, #14]
 80155dc:	2b80      	cmp	r3, #128	; 0x80
 80155de:	d00a      	beq.n	80155f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80155e0:	7bbb      	ldrb	r3, [r7, #14]
 80155e2:	4619      	mov	r1, r3
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f001 f8db 	bl	80167a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80155ea:	2180      	movs	r1, #128	; 0x80
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f001 f8d7 	bl	80167a0 <USBD_LL_StallEP>
 80155f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80155f4:	e025      	b.n	8015642 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80155f6:	6839      	ldr	r1, [r7, #0]
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f000 fc33 	bl	8015e64 <USBD_CtlError>
              break;
 80155fe:	e020      	b.n	8015642 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	885b      	ldrh	r3, [r3, #2]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d11b      	bne.n	8015640 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015608:	7bbb      	ldrb	r3, [r7, #14]
 801560a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801560e:	2b00      	cmp	r3, #0
 8015610:	d004      	beq.n	801561c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015612:	7bbb      	ldrb	r3, [r7, #14]
 8015614:	4619      	mov	r1, r3
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f001 f8e1 	bl	80167de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f000 fcec 	bl	8015ffa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	6839      	ldr	r1, [r7, #0]
 801562c:	6878      	ldr	r0, [r7, #4]
 801562e:	4798      	blx	r3
 8015630:	4603      	mov	r3, r0
 8015632:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015634:	e004      	b.n	8015640 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8015636:	6839      	ldr	r1, [r7, #0]
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f000 fc13 	bl	8015e64 <USBD_CtlError>
              break;
 801563e:	e000      	b.n	8015642 <USBD_StdEPReq+0x154>
              break;
 8015640:	bf00      	nop
          }
          break;
 8015642:	e0ab      	b.n	801579c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801564a:	b2db      	uxtb	r3, r3
 801564c:	2b02      	cmp	r3, #2
 801564e:	d002      	beq.n	8015656 <USBD_StdEPReq+0x168>
 8015650:	2b03      	cmp	r3, #3
 8015652:	d032      	beq.n	80156ba <USBD_StdEPReq+0x1cc>
 8015654:	e097      	b.n	8015786 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015656:	7bbb      	ldrb	r3, [r7, #14]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d007      	beq.n	801566c <USBD_StdEPReq+0x17e>
 801565c:	7bbb      	ldrb	r3, [r7, #14]
 801565e:	2b80      	cmp	r3, #128	; 0x80
 8015660:	d004      	beq.n	801566c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015662:	6839      	ldr	r1, [r7, #0]
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f000 fbfd 	bl	8015e64 <USBD_CtlError>
                break;
 801566a:	e091      	b.n	8015790 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801566c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015670:	2b00      	cmp	r3, #0
 8015672:	da0b      	bge.n	801568c <USBD_StdEPReq+0x19e>
 8015674:	7bbb      	ldrb	r3, [r7, #14]
 8015676:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801567a:	4613      	mov	r3, r2
 801567c:	009b      	lsls	r3, r3, #2
 801567e:	4413      	add	r3, r2
 8015680:	009b      	lsls	r3, r3, #2
 8015682:	3310      	adds	r3, #16
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	4413      	add	r3, r2
 8015688:	3304      	adds	r3, #4
 801568a:	e00b      	b.n	80156a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801568c:	7bbb      	ldrb	r3, [r7, #14]
 801568e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015692:	4613      	mov	r3, r2
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	4413      	add	r3, r2
 80156a2:	3304      	adds	r3, #4
 80156a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	2200      	movs	r2, #0
 80156aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	2202      	movs	r2, #2
 80156b0:	4619      	mov	r1, r3
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f000 fc47 	bl	8015f46 <USBD_CtlSendData>
              break;
 80156b8:	e06a      	b.n	8015790 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80156ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	da11      	bge.n	80156e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80156c2:	7bbb      	ldrb	r3, [r7, #14]
 80156c4:	f003 020f 	and.w	r2, r3, #15
 80156c8:	6879      	ldr	r1, [r7, #4]
 80156ca:	4613      	mov	r3, r2
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	4413      	add	r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	440b      	add	r3, r1
 80156d4:	3324      	adds	r3, #36	; 0x24
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d117      	bne.n	801570c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80156dc:	6839      	ldr	r1, [r7, #0]
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 fbc0 	bl	8015e64 <USBD_CtlError>
                  break;
 80156e4:	e054      	b.n	8015790 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80156e6:	7bbb      	ldrb	r3, [r7, #14]
 80156e8:	f003 020f 	and.w	r2, r3, #15
 80156ec:	6879      	ldr	r1, [r7, #4]
 80156ee:	4613      	mov	r3, r2
 80156f0:	009b      	lsls	r3, r3, #2
 80156f2:	4413      	add	r3, r2
 80156f4:	009b      	lsls	r3, r3, #2
 80156f6:	440b      	add	r3, r1
 80156f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80156fc:	881b      	ldrh	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d104      	bne.n	801570c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f000 fbad 	bl	8015e64 <USBD_CtlError>
                  break;
 801570a:	e041      	b.n	8015790 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801570c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015710:	2b00      	cmp	r3, #0
 8015712:	da0b      	bge.n	801572c <USBD_StdEPReq+0x23e>
 8015714:	7bbb      	ldrb	r3, [r7, #14]
 8015716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801571a:	4613      	mov	r3, r2
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	4413      	add	r3, r2
 8015720:	009b      	lsls	r3, r3, #2
 8015722:	3310      	adds	r3, #16
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	4413      	add	r3, r2
 8015728:	3304      	adds	r3, #4
 801572a:	e00b      	b.n	8015744 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801572c:	7bbb      	ldrb	r3, [r7, #14]
 801572e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015732:	4613      	mov	r3, r2
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	4413      	add	r3, r2
 8015738:	009b      	lsls	r3, r3, #2
 801573a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	4413      	add	r3, r2
 8015742:	3304      	adds	r3, #4
 8015744:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015746:	7bbb      	ldrb	r3, [r7, #14]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d002      	beq.n	8015752 <USBD_StdEPReq+0x264>
 801574c:	7bbb      	ldrb	r3, [r7, #14]
 801574e:	2b80      	cmp	r3, #128	; 0x80
 8015750:	d103      	bne.n	801575a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	2200      	movs	r2, #0
 8015756:	601a      	str	r2, [r3, #0]
 8015758:	e00e      	b.n	8015778 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801575a:	7bbb      	ldrb	r3, [r7, #14]
 801575c:	4619      	mov	r1, r3
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f001 f85c 	bl	801681c <USBD_LL_IsStallEP>
 8015764:	4603      	mov	r3, r0
 8015766:	2b00      	cmp	r3, #0
 8015768:	d003      	beq.n	8015772 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	2201      	movs	r2, #1
 801576e:	601a      	str	r2, [r3, #0]
 8015770:	e002      	b.n	8015778 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	2200      	movs	r2, #0
 8015776:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	2202      	movs	r2, #2
 801577c:	4619      	mov	r1, r3
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f000 fbe1 	bl	8015f46 <USBD_CtlSendData>
              break;
 8015784:	e004      	b.n	8015790 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015786:	6839      	ldr	r1, [r7, #0]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f000 fb6b 	bl	8015e64 <USBD_CtlError>
              break;
 801578e:	bf00      	nop
          }
          break;
 8015790:	e004      	b.n	801579c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 fb65 	bl	8015e64 <USBD_CtlError>
          break;
 801579a:	bf00      	nop
      }
      break;
 801579c:	e004      	b.n	80157a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801579e:	6839      	ldr	r1, [r7, #0]
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f000 fb5f 	bl	8015e64 <USBD_CtlError>
      break;
 80157a6:	bf00      	nop
  }

  return ret;
 80157a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3710      	adds	r7, #16
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80157be:	2300      	movs	r3, #0
 80157c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80157c2:	2300      	movs	r3, #0
 80157c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80157c6:	2300      	movs	r3, #0
 80157c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	885b      	ldrh	r3, [r3, #2]
 80157ce:	0a1b      	lsrs	r3, r3, #8
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	3b01      	subs	r3, #1
 80157d4:	2b0e      	cmp	r3, #14
 80157d6:	f200 8152 	bhi.w	8015a7e <USBD_GetDescriptor+0x2ca>
 80157da:	a201      	add	r2, pc, #4	; (adr r2, 80157e0 <USBD_GetDescriptor+0x2c>)
 80157dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157e0:	08015851 	.word	0x08015851
 80157e4:	08015869 	.word	0x08015869
 80157e8:	080158a9 	.word	0x080158a9
 80157ec:	08015a7f 	.word	0x08015a7f
 80157f0:	08015a7f 	.word	0x08015a7f
 80157f4:	08015a1f 	.word	0x08015a1f
 80157f8:	08015a4b 	.word	0x08015a4b
 80157fc:	08015a7f 	.word	0x08015a7f
 8015800:	08015a7f 	.word	0x08015a7f
 8015804:	08015a7f 	.word	0x08015a7f
 8015808:	08015a7f 	.word	0x08015a7f
 801580c:	08015a7f 	.word	0x08015a7f
 8015810:	08015a7f 	.word	0x08015a7f
 8015814:	08015a7f 	.word	0x08015a7f
 8015818:	0801581d 	.word	0x0801581d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015822:	69db      	ldr	r3, [r3, #28]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00b      	beq.n	8015840 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801582e:	69db      	ldr	r3, [r3, #28]
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	7c12      	ldrb	r2, [r2, #16]
 8015834:	f107 0108 	add.w	r1, r7, #8
 8015838:	4610      	mov	r0, r2
 801583a:	4798      	blx	r3
 801583c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801583e:	e126      	b.n	8015a8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015840:	6839      	ldr	r1, [r7, #0]
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f000 fb0e 	bl	8015e64 <USBD_CtlError>
        err++;
 8015848:	7afb      	ldrb	r3, [r7, #11]
 801584a:	3301      	adds	r3, #1
 801584c:	72fb      	strb	r3, [r7, #11]
      break;
 801584e:	e11e      	b.n	8015a8e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	7c12      	ldrb	r2, [r2, #16]
 801585c:	f107 0108 	add.w	r1, r7, #8
 8015860:	4610      	mov	r0, r2
 8015862:	4798      	blx	r3
 8015864:	60f8      	str	r0, [r7, #12]
      break;
 8015866:	e112      	b.n	8015a8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	7c1b      	ldrb	r3, [r3, #16]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d10d      	bne.n	801588c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015878:	f107 0208 	add.w	r2, r7, #8
 801587c:	4610      	mov	r0, r2
 801587e:	4798      	blx	r3
 8015880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	3301      	adds	r3, #1
 8015886:	2202      	movs	r2, #2
 8015888:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801588a:	e100      	b.n	8015a8e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015894:	f107 0208 	add.w	r2, r7, #8
 8015898:	4610      	mov	r0, r2
 801589a:	4798      	blx	r3
 801589c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	3301      	adds	r3, #1
 80158a2:	2202      	movs	r2, #2
 80158a4:	701a      	strb	r2, [r3, #0]
      break;
 80158a6:	e0f2      	b.n	8015a8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	885b      	ldrh	r3, [r3, #2]
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	2b05      	cmp	r3, #5
 80158b0:	f200 80ac 	bhi.w	8015a0c <USBD_GetDescriptor+0x258>
 80158b4:	a201      	add	r2, pc, #4	; (adr r2, 80158bc <USBD_GetDescriptor+0x108>)
 80158b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158ba:	bf00      	nop
 80158bc:	080158d5 	.word	0x080158d5
 80158c0:	08015909 	.word	0x08015909
 80158c4:	0801593d 	.word	0x0801593d
 80158c8:	08015971 	.word	0x08015971
 80158cc:	080159a5 	.word	0x080159a5
 80158d0:	080159d9 	.word	0x080159d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d00b      	beq.n	80158f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	7c12      	ldrb	r2, [r2, #16]
 80158ec:	f107 0108 	add.w	r1, r7, #8
 80158f0:	4610      	mov	r0, r2
 80158f2:	4798      	blx	r3
 80158f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80158f6:	e091      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80158f8:	6839      	ldr	r1, [r7, #0]
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f000 fab2 	bl	8015e64 <USBD_CtlError>
            err++;
 8015900:	7afb      	ldrb	r3, [r7, #11]
 8015902:	3301      	adds	r3, #1
 8015904:	72fb      	strb	r3, [r7, #11]
          break;
 8015906:	e089      	b.n	8015a1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d00b      	beq.n	801592c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801591a:	689b      	ldr	r3, [r3, #8]
 801591c:	687a      	ldr	r2, [r7, #4]
 801591e:	7c12      	ldrb	r2, [r2, #16]
 8015920:	f107 0108 	add.w	r1, r7, #8
 8015924:	4610      	mov	r0, r2
 8015926:	4798      	blx	r3
 8015928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801592a:	e077      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801592c:	6839      	ldr	r1, [r7, #0]
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 fa98 	bl	8015e64 <USBD_CtlError>
            err++;
 8015934:	7afb      	ldrb	r3, [r7, #11]
 8015936:	3301      	adds	r3, #1
 8015938:	72fb      	strb	r3, [r7, #11]
          break;
 801593a:	e06f      	b.n	8015a1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015942:	68db      	ldr	r3, [r3, #12]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d00b      	beq.n	8015960 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	7c12      	ldrb	r2, [r2, #16]
 8015954:	f107 0108 	add.w	r1, r7, #8
 8015958:	4610      	mov	r0, r2
 801595a:	4798      	blx	r3
 801595c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801595e:	e05d      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015960:	6839      	ldr	r1, [r7, #0]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f000 fa7e 	bl	8015e64 <USBD_CtlError>
            err++;
 8015968:	7afb      	ldrb	r3, [r7, #11]
 801596a:	3301      	adds	r3, #1
 801596c:	72fb      	strb	r3, [r7, #11]
          break;
 801596e:	e055      	b.n	8015a1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015976:	691b      	ldr	r3, [r3, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d00b      	beq.n	8015994 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015982:	691b      	ldr	r3, [r3, #16]
 8015984:	687a      	ldr	r2, [r7, #4]
 8015986:	7c12      	ldrb	r2, [r2, #16]
 8015988:	f107 0108 	add.w	r1, r7, #8
 801598c:	4610      	mov	r0, r2
 801598e:	4798      	blx	r3
 8015990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015992:	e043      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015994:	6839      	ldr	r1, [r7, #0]
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f000 fa64 	bl	8015e64 <USBD_CtlError>
            err++;
 801599c:	7afb      	ldrb	r3, [r7, #11]
 801599e:	3301      	adds	r3, #1
 80159a0:	72fb      	strb	r3, [r7, #11]
          break;
 80159a2:	e03b      	b.n	8015a1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159aa:	695b      	ldr	r3, [r3, #20]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d00b      	beq.n	80159c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159b6:	695b      	ldr	r3, [r3, #20]
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	7c12      	ldrb	r2, [r2, #16]
 80159bc:	f107 0108 	add.w	r1, r7, #8
 80159c0:	4610      	mov	r0, r2
 80159c2:	4798      	blx	r3
 80159c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159c6:	e029      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80159c8:	6839      	ldr	r1, [r7, #0]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f000 fa4a 	bl	8015e64 <USBD_CtlError>
            err++;
 80159d0:	7afb      	ldrb	r3, [r7, #11]
 80159d2:	3301      	adds	r3, #1
 80159d4:	72fb      	strb	r3, [r7, #11]
          break;
 80159d6:	e021      	b.n	8015a1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159de:	699b      	ldr	r3, [r3, #24]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d00b      	beq.n	80159fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80159ea:	699b      	ldr	r3, [r3, #24]
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	7c12      	ldrb	r2, [r2, #16]
 80159f0:	f107 0108 	add.w	r1, r7, #8
 80159f4:	4610      	mov	r0, r2
 80159f6:	4798      	blx	r3
 80159f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80159fa:	e00f      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80159fc:	6839      	ldr	r1, [r7, #0]
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 fa30 	bl	8015e64 <USBD_CtlError>
            err++;
 8015a04:	7afb      	ldrb	r3, [r7, #11]
 8015a06:	3301      	adds	r3, #1
 8015a08:	72fb      	strb	r3, [r7, #11]
          break;
 8015a0a:	e007      	b.n	8015a1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015a0c:	6839      	ldr	r1, [r7, #0]
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f000 fa28 	bl	8015e64 <USBD_CtlError>
          err++;
 8015a14:	7afb      	ldrb	r3, [r7, #11]
 8015a16:	3301      	adds	r3, #1
 8015a18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015a1a:	bf00      	nop
      }
      break;
 8015a1c:	e037      	b.n	8015a8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	7c1b      	ldrb	r3, [r3, #16]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d109      	bne.n	8015a3a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a2e:	f107 0208 	add.w	r2, r7, #8
 8015a32:	4610      	mov	r0, r2
 8015a34:	4798      	blx	r3
 8015a36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a38:	e029      	b.n	8015a8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015a3a:	6839      	ldr	r1, [r7, #0]
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 fa11 	bl	8015e64 <USBD_CtlError>
        err++;
 8015a42:	7afb      	ldrb	r3, [r7, #11]
 8015a44:	3301      	adds	r3, #1
 8015a46:	72fb      	strb	r3, [r7, #11]
      break;
 8015a48:	e021      	b.n	8015a8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	7c1b      	ldrb	r3, [r3, #16]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d10d      	bne.n	8015a6e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a5a:	f107 0208 	add.w	r2, r7, #8
 8015a5e:	4610      	mov	r0, r2
 8015a60:	4798      	blx	r3
 8015a62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	3301      	adds	r3, #1
 8015a68:	2207      	movs	r2, #7
 8015a6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015a6c:	e00f      	b.n	8015a8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f000 f9f7 	bl	8015e64 <USBD_CtlError>
        err++;
 8015a76:	7afb      	ldrb	r3, [r7, #11]
 8015a78:	3301      	adds	r3, #1
 8015a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a7c:	e007      	b.n	8015a8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015a7e:	6839      	ldr	r1, [r7, #0]
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f000 f9ef 	bl	8015e64 <USBD_CtlError>
      err++;
 8015a86:	7afb      	ldrb	r3, [r7, #11]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8015a8c:	bf00      	nop
  }

  if (err != 0U)
 8015a8e:	7afb      	ldrb	r3, [r7, #11]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d11e      	bne.n	8015ad2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	88db      	ldrh	r3, [r3, #6]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d016      	beq.n	8015aca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015a9c:	893b      	ldrh	r3, [r7, #8]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d00e      	beq.n	8015ac0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	88da      	ldrh	r2, [r3, #6]
 8015aa6:	893b      	ldrh	r3, [r7, #8]
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	bf28      	it	cs
 8015aac:	4613      	movcs	r3, r2
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ab2:	893b      	ldrh	r3, [r7, #8]
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	68f9      	ldr	r1, [r7, #12]
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f000 fa44 	bl	8015f46 <USBD_CtlSendData>
 8015abe:	e009      	b.n	8015ad4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015ac0:	6839      	ldr	r1, [r7, #0]
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f000 f9ce 	bl	8015e64 <USBD_CtlError>
 8015ac8:	e004      	b.n	8015ad4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 fa95 	bl	8015ffa <USBD_CtlSendStatus>
 8015ad0:	e000      	b.n	8015ad4 <USBD_GetDescriptor+0x320>
    return;
 8015ad2:	bf00      	nop
  }
}
 8015ad4:	3710      	adds	r7, #16
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop

08015adc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	889b      	ldrh	r3, [r3, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d131      	bne.n	8015b52 <USBD_SetAddress+0x76>
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	88db      	ldrh	r3, [r3, #6]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d12d      	bne.n	8015b52 <USBD_SetAddress+0x76>
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	885b      	ldrh	r3, [r3, #2]
 8015afa:	2b7f      	cmp	r3, #127	; 0x7f
 8015afc:	d829      	bhi.n	8015b52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	885b      	ldrh	r3, [r3, #2]
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b10:	b2db      	uxtb	r3, r3
 8015b12:	2b03      	cmp	r3, #3
 8015b14:	d104      	bne.n	8015b20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015b16:	6839      	ldr	r1, [r7, #0]
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f000 f9a3 	bl	8015e64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b1e:	e01d      	b.n	8015b5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	7bfa      	ldrb	r2, [r7, #15]
 8015b24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f000 fea1 	bl	8016874 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f000 fa61 	bl	8015ffa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015b38:	7bfb      	ldrb	r3, [r7, #15]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d004      	beq.n	8015b48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2202      	movs	r2, #2
 8015b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b46:	e009      	b.n	8015b5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b50:	e004      	b.n	8015b5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015b52:	6839      	ldr	r1, [r7, #0]
 8015b54:	6878      	ldr	r0, [r7, #4]
 8015b56:	f000 f985 	bl	8015e64 <USBD_CtlError>
  }
}
 8015b5a:	bf00      	nop
 8015b5c:	bf00      	nop
 8015b5e:	3710      	adds	r7, #16
 8015b60:	46bd      	mov	sp, r7
 8015b62:	bd80      	pop	{r7, pc}

08015b64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	885b      	ldrh	r3, [r3, #2]
 8015b76:	b2da      	uxtb	r2, r3
 8015b78:	4b4c      	ldr	r3, [pc, #304]	; (8015cac <USBD_SetConfig+0x148>)
 8015b7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015b7c:	4b4b      	ldr	r3, [pc, #300]	; (8015cac <USBD_SetConfig+0x148>)
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	d905      	bls.n	8015b90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015b84:	6839      	ldr	r1, [r7, #0]
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f000 f96c 	bl	8015e64 <USBD_CtlError>
    return USBD_FAIL;
 8015b8c:	2303      	movs	r3, #3
 8015b8e:	e088      	b.n	8015ca2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	2b02      	cmp	r3, #2
 8015b9a:	d002      	beq.n	8015ba2 <USBD_SetConfig+0x3e>
 8015b9c:	2b03      	cmp	r3, #3
 8015b9e:	d025      	beq.n	8015bec <USBD_SetConfig+0x88>
 8015ba0:	e071      	b.n	8015c86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015ba2:	4b42      	ldr	r3, [pc, #264]	; (8015cac <USBD_SetConfig+0x148>)
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d01c      	beq.n	8015be4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015baa:	4b40      	ldr	r3, [pc, #256]	; (8015cac <USBD_SetConfig+0x148>)
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	461a      	mov	r2, r3
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015bb4:	4b3d      	ldr	r3, [pc, #244]	; (8015cac <USBD_SetConfig+0x148>)
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	4619      	mov	r1, r3
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f7ff f992 	bl	8014ee4 <USBD_SetClassConfig>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015bc4:	7bfb      	ldrb	r3, [r7, #15]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d004      	beq.n	8015bd4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015bca:	6839      	ldr	r1, [r7, #0]
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f000 f949 	bl	8015e64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015bd2:	e065      	b.n	8015ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f000 fa10 	bl	8015ffa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2203      	movs	r2, #3
 8015bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015be2:	e05d      	b.n	8015ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f000 fa08 	bl	8015ffa <USBD_CtlSendStatus>
      break;
 8015bea:	e059      	b.n	8015ca0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015bec:	4b2f      	ldr	r3, [pc, #188]	; (8015cac <USBD_SetConfig+0x148>)
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d112      	bne.n	8015c1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2202      	movs	r2, #2
 8015bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015bfc:	4b2b      	ldr	r3, [pc, #172]	; (8015cac <USBD_SetConfig+0x148>)
 8015bfe:	781b      	ldrb	r3, [r3, #0]
 8015c00:	461a      	mov	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c06:	4b29      	ldr	r3, [pc, #164]	; (8015cac <USBD_SetConfig+0x148>)
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff f985 	bl	8014f1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 f9f1 	bl	8015ffa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015c18:	e042      	b.n	8015ca0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8015c1a:	4b24      	ldr	r3, [pc, #144]	; (8015cac <USBD_SetConfig+0x148>)
 8015c1c:	781b      	ldrb	r3, [r3, #0]
 8015c1e:	461a      	mov	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d02a      	beq.n	8015c7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	b2db      	uxtb	r3, r3
 8015c2e:	4619      	mov	r1, r3
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7ff f973 	bl	8014f1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015c36:	4b1d      	ldr	r3, [pc, #116]	; (8015cac <USBD_SetConfig+0x148>)
 8015c38:	781b      	ldrb	r3, [r3, #0]
 8015c3a:	461a      	mov	r2, r3
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015c40:	4b1a      	ldr	r3, [pc, #104]	; (8015cac <USBD_SetConfig+0x148>)
 8015c42:	781b      	ldrb	r3, [r3, #0]
 8015c44:	4619      	mov	r1, r3
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f7ff f94c 	bl	8014ee4 <USBD_SetClassConfig>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015c50:	7bfb      	ldrb	r3, [r7, #15]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00f      	beq.n	8015c76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015c56:	6839      	ldr	r1, [r7, #0]
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 f903 	bl	8015e64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	685b      	ldr	r3, [r3, #4]
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	4619      	mov	r1, r3
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7ff f958 	bl	8014f1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2202      	movs	r2, #2
 8015c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015c74:	e014      	b.n	8015ca0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f000 f9bf 	bl	8015ffa <USBD_CtlSendStatus>
      break;
 8015c7c:	e010      	b.n	8015ca0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f000 f9bb 	bl	8015ffa <USBD_CtlSendStatus>
      break;
 8015c84:	e00c      	b.n	8015ca0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015c86:	6839      	ldr	r1, [r7, #0]
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f000 f8eb 	bl	8015e64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015c8e:	4b07      	ldr	r3, [pc, #28]	; (8015cac <USBD_SetConfig+0x148>)
 8015c90:	781b      	ldrb	r3, [r3, #0]
 8015c92:	4619      	mov	r1, r3
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff f941 	bl	8014f1c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015c9a:	2303      	movs	r3, #3
 8015c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8015c9e:	bf00      	nop
  }

  return ret;
 8015ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3710      	adds	r7, #16
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop
 8015cac:	2000240c 	.word	0x2000240c

08015cb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b082      	sub	sp, #8
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	88db      	ldrh	r3, [r3, #6]
 8015cbe:	2b01      	cmp	r3, #1
 8015cc0:	d004      	beq.n	8015ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015cc2:	6839      	ldr	r1, [r7, #0]
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f8cd 	bl	8015e64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015cca:	e023      	b.n	8015d14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	2b02      	cmp	r3, #2
 8015cd6:	dc02      	bgt.n	8015cde <USBD_GetConfig+0x2e>
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	dc03      	bgt.n	8015ce4 <USBD_GetConfig+0x34>
 8015cdc:	e015      	b.n	8015d0a <USBD_GetConfig+0x5a>
 8015cde:	2b03      	cmp	r3, #3
 8015ce0:	d00b      	beq.n	8015cfa <USBD_GetConfig+0x4a>
 8015ce2:	e012      	b.n	8015d0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	3308      	adds	r3, #8
 8015cee:	2201      	movs	r2, #1
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 f927 	bl	8015f46 <USBD_CtlSendData>
        break;
 8015cf8:	e00c      	b.n	8015d14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	3304      	adds	r3, #4
 8015cfe:	2201      	movs	r2, #1
 8015d00:	4619      	mov	r1, r3
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f000 f91f 	bl	8015f46 <USBD_CtlSendData>
        break;
 8015d08:	e004      	b.n	8015d14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015d0a:	6839      	ldr	r1, [r7, #0]
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f000 f8a9 	bl	8015e64 <USBD_CtlError>
        break;
 8015d12:	bf00      	nop
}
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	3b01      	subs	r3, #1
 8015d30:	2b02      	cmp	r3, #2
 8015d32:	d81e      	bhi.n	8015d72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	88db      	ldrh	r3, [r3, #6]
 8015d38:	2b02      	cmp	r3, #2
 8015d3a:	d004      	beq.n	8015d46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015d3c:	6839      	ldr	r1, [r7, #0]
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f000 f890 	bl	8015e64 <USBD_CtlError>
        break;
 8015d44:	e01a      	b.n	8015d7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2201      	movs	r2, #1
 8015d4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d005      	beq.n	8015d62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	f043 0202 	orr.w	r2, r3, #2
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	330c      	adds	r3, #12
 8015d66:	2202      	movs	r2, #2
 8015d68:	4619      	mov	r1, r3
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f000 f8eb 	bl	8015f46 <USBD_CtlSendData>
      break;
 8015d70:	e004      	b.n	8015d7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015d72:	6839      	ldr	r1, [r7, #0]
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f000 f875 	bl	8015e64 <USBD_CtlError>
      break;
 8015d7a:	bf00      	nop
  }
}
 8015d7c:	bf00      	nop
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	885b      	ldrh	r3, [r3, #2]
 8015d92:	2b01      	cmp	r3, #1
 8015d94:	d106      	bne.n	8015da4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	2201      	movs	r2, #1
 8015d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f000 f92b 	bl	8015ffa <USBD_CtlSendStatus>
  }
}
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	3b01      	subs	r3, #1
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	d80b      	bhi.n	8015ddc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	885b      	ldrh	r3, [r3, #2]
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d10c      	bne.n	8015de6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f000 f910 	bl	8015ffa <USBD_CtlSendStatus>
      }
      break;
 8015dda:	e004      	b.n	8015de6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 f840 	bl	8015e64 <USBD_CtlError>
      break;
 8015de4:	e000      	b.n	8015de8 <USBD_ClrFeature+0x3c>
      break;
 8015de6:	bf00      	nop
  }
}
 8015de8:	bf00      	nop
 8015dea:	3708      	adds	r7, #8
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}

08015df0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	781a      	ldrb	r2, [r3, #0]
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	781a      	ldrb	r2, [r3, #0]
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	3301      	adds	r3, #1
 8015e18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015e1a:	68f8      	ldr	r0, [r7, #12]
 8015e1c:	f7ff fa92 	bl	8015344 <SWAPBYTE>
 8015e20:	4603      	mov	r3, r0
 8015e22:	461a      	mov	r2, r3
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	3301      	adds	r3, #1
 8015e32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015e34:	68f8      	ldr	r0, [r7, #12]
 8015e36:	f7ff fa85 	bl	8015344 <SWAPBYTE>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	3301      	adds	r3, #1
 8015e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015e4e:	68f8      	ldr	r0, [r7, #12]
 8015e50:	f7ff fa78 	bl	8015344 <SWAPBYTE>
 8015e54:	4603      	mov	r3, r0
 8015e56:	461a      	mov	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	80da      	strh	r2, [r3, #6]
}
 8015e5c:	bf00      	nop
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015e6e:	2180      	movs	r1, #128	; 0x80
 8015e70:	6878      	ldr	r0, [r7, #4]
 8015e72:	f000 fc95 	bl	80167a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015e76:	2100      	movs	r1, #0
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 fc91 	bl	80167a0 <USBD_LL_StallEP>
}
 8015e7e:	bf00      	nop
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015e86:	b580      	push	{r7, lr}
 8015e88:	b086      	sub	sp, #24
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	60f8      	str	r0, [r7, #12]
 8015e8e:	60b9      	str	r1, [r7, #8]
 8015e90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015e92:	2300      	movs	r3, #0
 8015e94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d036      	beq.n	8015f0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015ea0:	6938      	ldr	r0, [r7, #16]
 8015ea2:	f000 f836 	bl	8015f12 <USBD_GetLen>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	005b      	lsls	r3, r3, #1
 8015eae:	b29a      	uxth	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015eb4:	7dfb      	ldrb	r3, [r7, #23]
 8015eb6:	68ba      	ldr	r2, [r7, #8]
 8015eb8:	4413      	add	r3, r2
 8015eba:	687a      	ldr	r2, [r7, #4]
 8015ebc:	7812      	ldrb	r2, [r2, #0]
 8015ebe:	701a      	strb	r2, [r3, #0]
  idx++;
 8015ec0:	7dfb      	ldrb	r3, [r7, #23]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015ec6:	7dfb      	ldrb	r3, [r7, #23]
 8015ec8:	68ba      	ldr	r2, [r7, #8]
 8015eca:	4413      	add	r3, r2
 8015ecc:	2203      	movs	r2, #3
 8015ece:	701a      	strb	r2, [r3, #0]
  idx++;
 8015ed0:	7dfb      	ldrb	r3, [r7, #23]
 8015ed2:	3301      	adds	r3, #1
 8015ed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015ed6:	e013      	b.n	8015f00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015ed8:	7dfb      	ldrb	r3, [r7, #23]
 8015eda:	68ba      	ldr	r2, [r7, #8]
 8015edc:	4413      	add	r3, r2
 8015ede:	693a      	ldr	r2, [r7, #16]
 8015ee0:	7812      	ldrb	r2, [r2, #0]
 8015ee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	3301      	adds	r3, #1
 8015ee8:	613b      	str	r3, [r7, #16]
    idx++;
 8015eea:	7dfb      	ldrb	r3, [r7, #23]
 8015eec:	3301      	adds	r3, #1
 8015eee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015ef0:	7dfb      	ldrb	r3, [r7, #23]
 8015ef2:	68ba      	ldr	r2, [r7, #8]
 8015ef4:	4413      	add	r3, r2
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	701a      	strb	r2, [r3, #0]
    idx++;
 8015efa:	7dfb      	ldrb	r3, [r7, #23]
 8015efc:	3301      	adds	r3, #1
 8015efe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1e7      	bne.n	8015ed8 <USBD_GetString+0x52>
 8015f08:	e000      	b.n	8015f0c <USBD_GetString+0x86>
    return;
 8015f0a:	bf00      	nop
  }
}
 8015f0c:	3718      	adds	r7, #24
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}

08015f12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015f12:	b480      	push	{r7}
 8015f14:	b085      	sub	sp, #20
 8015f16:	af00      	add	r7, sp, #0
 8015f18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015f22:	e005      	b.n	8015f30 <USBD_GetLen+0x1e>
  {
    len++;
 8015f24:	7bfb      	ldrb	r3, [r7, #15]
 8015f26:	3301      	adds	r3, #1
 8015f28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1f5      	bne.n	8015f24 <USBD_GetLen+0x12>
  }

  return len;
 8015f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3714      	adds	r7, #20
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr

08015f46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b084      	sub	sp, #16
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	60f8      	str	r0, [r7, #12]
 8015f4e:	60b9      	str	r1, [r7, #8]
 8015f50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2202      	movs	r2, #2
 8015f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	2100      	movs	r1, #0
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f000 fca0 	bl	80168b2 <USBD_LL_Transmit>

  return USBD_OK;
 8015f72:	2300      	movs	r3, #0
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	68ba      	ldr	r2, [r7, #8]
 8015f8c:	2100      	movs	r1, #0
 8015f8e:	68f8      	ldr	r0, [r7, #12]
 8015f90:	f000 fc8f 	bl	80168b2 <USBD_LL_Transmit>

  return USBD_OK;
 8015f94:	2300      	movs	r3, #0
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015f9e:	b580      	push	{r7, lr}
 8015fa0:	b084      	sub	sp, #16
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	60f8      	str	r0, [r7, #12]
 8015fa6:	60b9      	str	r1, [r7, #8]
 8015fa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	2203      	movs	r2, #3
 8015fae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	68ba      	ldr	r2, [r7, #8]
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f000 fc93 	bl	80168f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015fce:	2300      	movs	r3, #0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3710      	adds	r7, #16
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}

08015fd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	b084      	sub	sp, #16
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	60f8      	str	r0, [r7, #12]
 8015fe0:	60b9      	str	r1, [r7, #8]
 8015fe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	68ba      	ldr	r2, [r7, #8]
 8015fe8:	2100      	movs	r1, #0
 8015fea:	68f8      	ldr	r0, [r7, #12]
 8015fec:	f000 fc82 	bl	80168f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ff0:	2300      	movs	r3, #0
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3710      	adds	r7, #16
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}

08015ffa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015ffa:	b580      	push	{r7, lr}
 8015ffc:	b082      	sub	sp, #8
 8015ffe:	af00      	add	r7, sp, #0
 8016000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	2204      	movs	r2, #4
 8016006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801600a:	2300      	movs	r3, #0
 801600c:	2200      	movs	r2, #0
 801600e:	2100      	movs	r1, #0
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 fc4e 	bl	80168b2 <USBD_LL_Transmit>

  return USBD_OK;
 8016016:	2300      	movs	r3, #0
}
 8016018:	4618      	mov	r0, r3
 801601a:	3708      	adds	r7, #8
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2205      	movs	r2, #5
 801602c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016030:	2300      	movs	r3, #0
 8016032:	2200      	movs	r2, #0
 8016034:	2100      	movs	r1, #0
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fc5c 	bl	80168f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801603c:	2300      	movs	r3, #0
}
 801603e:	4618      	mov	r0, r3
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
	...

08016048 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801604c:	2200      	movs	r2, #0
 801604e:	4912      	ldr	r1, [pc, #72]	; (8016098 <MX_USB_Device_Init+0x50>)
 8016050:	4812      	ldr	r0, [pc, #72]	; (801609c <MX_USB_Device_Init+0x54>)
 8016052:	f7fe fed9 	bl	8014e08 <USBD_Init>
 8016056:	4603      	mov	r3, r0
 8016058:	2b00      	cmp	r3, #0
 801605a:	d001      	beq.n	8016060 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801605c:	f7ee fd78 	bl	8004b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8016060:	490f      	ldr	r1, [pc, #60]	; (80160a0 <MX_USB_Device_Init+0x58>)
 8016062:	480e      	ldr	r0, [pc, #56]	; (801609c <MX_USB_Device_Init+0x54>)
 8016064:	f7fe ff00 	bl	8014e68 <USBD_RegisterClass>
 8016068:	4603      	mov	r3, r0
 801606a:	2b00      	cmp	r3, #0
 801606c:	d001      	beq.n	8016072 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801606e:	f7ee fd6f 	bl	8004b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8016072:	490c      	ldr	r1, [pc, #48]	; (80160a4 <MX_USB_Device_Init+0x5c>)
 8016074:	4809      	ldr	r0, [pc, #36]	; (801609c <MX_USB_Device_Init+0x54>)
 8016076:	f7fe fe21 	bl	8014cbc <USBD_CDC_RegisterInterface>
 801607a:	4603      	mov	r3, r0
 801607c:	2b00      	cmp	r3, #0
 801607e:	d001      	beq.n	8016084 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8016080:	f7ee fd66 	bl	8004b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8016084:	4805      	ldr	r0, [pc, #20]	; (801609c <MX_USB_Device_Init+0x54>)
 8016086:	f7fe ff16 	bl	8014eb6 <USBD_Start>
 801608a:	4603      	mov	r3, r0
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8016090:	f7ee fd5e 	bl	8004b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8016094:	bf00      	nop
 8016096:	bd80      	pop	{r7, pc}
 8016098:	20000340 	.word	0x20000340
 801609c:	20002410 	.word	0x20002410
 80160a0:	20000228 	.word	0x20000228
 80160a4:	2000032c 	.word	0x2000032c

080160a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80160ac:	2200      	movs	r2, #0
 80160ae:	4905      	ldr	r1, [pc, #20]	; (80160c4 <CDC_Init_FS+0x1c>)
 80160b0:	4805      	ldr	r0, [pc, #20]	; (80160c8 <CDC_Init_FS+0x20>)
 80160b2:	f7fe fe18 	bl	8014ce6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80160b6:	4905      	ldr	r1, [pc, #20]	; (80160cc <CDC_Init_FS+0x24>)
 80160b8:	4803      	ldr	r0, [pc, #12]	; (80160c8 <CDC_Init_FS+0x20>)
 80160ba:	f7fe fe32 	bl	8014d22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80160be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	20002ae0 	.word	0x20002ae0
 80160c8:	20002410 	.word	0x20002410
 80160cc:	200026e0 	.word	0x200026e0

080160d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80160d0:	b480      	push	{r7}
 80160d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80160d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	46bd      	mov	sp, r7
 80160da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160de:	4770      	bx	lr

080160e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	4603      	mov	r3, r0
 80160e8:	6039      	str	r1, [r7, #0]
 80160ea:	71fb      	strb	r3, [r7, #7]
 80160ec:	4613      	mov	r3, r2
 80160ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80160f0:	79fb      	ldrb	r3, [r7, #7]
 80160f2:	2b23      	cmp	r3, #35	; 0x23
 80160f4:	d84a      	bhi.n	801618c <CDC_Control_FS+0xac>
 80160f6:	a201      	add	r2, pc, #4	; (adr r2, 80160fc <CDC_Control_FS+0x1c>)
 80160f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160fc:	0801618d 	.word	0x0801618d
 8016100:	0801618d 	.word	0x0801618d
 8016104:	0801618d 	.word	0x0801618d
 8016108:	0801618d 	.word	0x0801618d
 801610c:	0801618d 	.word	0x0801618d
 8016110:	0801618d 	.word	0x0801618d
 8016114:	0801618d 	.word	0x0801618d
 8016118:	0801618d 	.word	0x0801618d
 801611c:	0801618d 	.word	0x0801618d
 8016120:	0801618d 	.word	0x0801618d
 8016124:	0801618d 	.word	0x0801618d
 8016128:	0801618d 	.word	0x0801618d
 801612c:	0801618d 	.word	0x0801618d
 8016130:	0801618d 	.word	0x0801618d
 8016134:	0801618d 	.word	0x0801618d
 8016138:	0801618d 	.word	0x0801618d
 801613c:	0801618d 	.word	0x0801618d
 8016140:	0801618d 	.word	0x0801618d
 8016144:	0801618d 	.word	0x0801618d
 8016148:	0801618d 	.word	0x0801618d
 801614c:	0801618d 	.word	0x0801618d
 8016150:	0801618d 	.word	0x0801618d
 8016154:	0801618d 	.word	0x0801618d
 8016158:	0801618d 	.word	0x0801618d
 801615c:	0801618d 	.word	0x0801618d
 8016160:	0801618d 	.word	0x0801618d
 8016164:	0801618d 	.word	0x0801618d
 8016168:	0801618d 	.word	0x0801618d
 801616c:	0801618d 	.word	0x0801618d
 8016170:	0801618d 	.word	0x0801618d
 8016174:	0801618d 	.word	0x0801618d
 8016178:	0801618d 	.word	0x0801618d
 801617c:	0801618d 	.word	0x0801618d
 8016180:	0801618d 	.word	0x0801618d
 8016184:	0801618d 	.word	0x0801618d
 8016188:	0801618d 	.word	0x0801618d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801618c:	bf00      	nop
  }

  return (USBD_OK);
 801618e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016190:	4618      	mov	r0, r3
 8016192:	370c      	adds	r7, #12
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr

0801619c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b082      	sub	sp, #8
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80161a6:	6879      	ldr	r1, [r7, #4]
 80161a8:	4805      	ldr	r0, [pc, #20]	; (80161c0 <CDC_Receive_FS+0x24>)
 80161aa:	f7fe fdba 	bl	8014d22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80161ae:	4804      	ldr	r0, [pc, #16]	; (80161c0 <CDC_Receive_FS+0x24>)
 80161b0:	f7fe fe00 	bl	8014db4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80161b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3708      	adds	r7, #8
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	20002410 	.word	0x20002410

080161c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	460b      	mov	r3, r1
 80161ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80161d0:	2300      	movs	r3, #0
 80161d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80161d4:	4b0d      	ldr	r3, [pc, #52]	; (801620c <CDC_Transmit_FS+0x48>)
 80161d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80161da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d001      	beq.n	80161ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80161e6:	2301      	movs	r3, #1
 80161e8:	e00b      	b.n	8016202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80161ea:	887b      	ldrh	r3, [r7, #2]
 80161ec:	461a      	mov	r2, r3
 80161ee:	6879      	ldr	r1, [r7, #4]
 80161f0:	4806      	ldr	r0, [pc, #24]	; (801620c <CDC_Transmit_FS+0x48>)
 80161f2:	f7fe fd78 	bl	8014ce6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80161f6:	4805      	ldr	r0, [pc, #20]	; (801620c <CDC_Transmit_FS+0x48>)
 80161f8:	f7fe fdac 	bl	8014d54 <USBD_CDC_TransmitPacket>
 80161fc:	4603      	mov	r3, r0
 80161fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016200:	7bfb      	ldrb	r3, [r7, #15]
}
 8016202:	4618      	mov	r0, r3
 8016204:	3710      	adds	r7, #16
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
 801620a:	bf00      	nop
 801620c:	20002410 	.word	0x20002410

08016210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016210:	b480      	push	{r7}
 8016212:	b087      	sub	sp, #28
 8016214:	af00      	add	r7, sp, #0
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	60b9      	str	r1, [r7, #8]
 801621a:	4613      	mov	r3, r2
 801621c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801621e:	2300      	movs	r3, #0
 8016220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016226:	4618      	mov	r0, r3
 8016228:	371c      	adds	r7, #28
 801622a:	46bd      	mov	sp, r7
 801622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016230:	4770      	bx	lr
	...

08016234 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016234:	b480      	push	{r7}
 8016236:	b083      	sub	sp, #12
 8016238:	af00      	add	r7, sp, #0
 801623a:	4603      	mov	r3, r0
 801623c:	6039      	str	r1, [r7, #0]
 801623e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	2212      	movs	r2, #18
 8016244:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8016246:	4b03      	ldr	r3, [pc, #12]	; (8016254 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8016248:	4618      	mov	r0, r3
 801624a:	370c      	adds	r7, #12
 801624c:	46bd      	mov	sp, r7
 801624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016252:	4770      	bx	lr
 8016254:	20000360 	.word	0x20000360

08016258 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016258:	b480      	push	{r7}
 801625a:	b083      	sub	sp, #12
 801625c:	af00      	add	r7, sp, #0
 801625e:	4603      	mov	r3, r0
 8016260:	6039      	str	r1, [r7, #0]
 8016262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	2204      	movs	r2, #4
 8016268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801626a:	4b03      	ldr	r3, [pc, #12]	; (8016278 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801626c:	4618      	mov	r0, r3
 801626e:	370c      	adds	r7, #12
 8016270:	46bd      	mov	sp, r7
 8016272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016276:	4770      	bx	lr
 8016278:	20000374 	.word	0x20000374

0801627c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b082      	sub	sp, #8
 8016280:	af00      	add	r7, sp, #0
 8016282:	4603      	mov	r3, r0
 8016284:	6039      	str	r1, [r7, #0]
 8016286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016288:	79fb      	ldrb	r3, [r7, #7]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d105      	bne.n	801629a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	4907      	ldr	r1, [pc, #28]	; (80162b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8016292:	4808      	ldr	r0, [pc, #32]	; (80162b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8016294:	f7ff fdf7 	bl	8015e86 <USBD_GetString>
 8016298:	e004      	b.n	80162a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801629a:	683a      	ldr	r2, [r7, #0]
 801629c:	4904      	ldr	r1, [pc, #16]	; (80162b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 801629e:	4805      	ldr	r0, [pc, #20]	; (80162b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80162a0:	f7ff fdf1 	bl	8015e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 80162a4:	4b02      	ldr	r3, [pc, #8]	; (80162b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	20002ee0 	.word	0x20002ee0
 80162b4:	0801b684 	.word	0x0801b684

080162b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	4603      	mov	r3, r0
 80162c0:	6039      	str	r1, [r7, #0]
 80162c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80162c4:	683a      	ldr	r2, [r7, #0]
 80162c6:	4904      	ldr	r1, [pc, #16]	; (80162d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80162c8:	4804      	ldr	r0, [pc, #16]	; (80162dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80162ca:	f7ff fddc 	bl	8015e86 <USBD_GetString>
  return USBD_StrDesc;
 80162ce:	4b02      	ldr	r3, [pc, #8]	; (80162d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	3708      	adds	r7, #8
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	20002ee0 	.word	0x20002ee0
 80162dc:	0801b69c 	.word	0x0801b69c

080162e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	4603      	mov	r3, r0
 80162e8:	6039      	str	r1, [r7, #0]
 80162ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	221a      	movs	r2, #26
 80162f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80162f2:	f000 f843 	bl	801637c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80162f6:	4b02      	ldr	r3, [pc, #8]	; (8016300 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3708      	adds	r7, #8
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}
 8016300:	20000378 	.word	0x20000378

08016304 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	4603      	mov	r3, r0
 801630c:	6039      	str	r1, [r7, #0]
 801630e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016310:	79fb      	ldrb	r3, [r7, #7]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d105      	bne.n	8016322 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016316:	683a      	ldr	r2, [r7, #0]
 8016318:	4907      	ldr	r1, [pc, #28]	; (8016338 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801631a:	4808      	ldr	r0, [pc, #32]	; (801633c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801631c:	f7ff fdb3 	bl	8015e86 <USBD_GetString>
 8016320:	e004      	b.n	801632c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8016322:	683a      	ldr	r2, [r7, #0]
 8016324:	4904      	ldr	r1, [pc, #16]	; (8016338 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8016326:	4805      	ldr	r0, [pc, #20]	; (801633c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8016328:	f7ff fdad 	bl	8015e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 801632c:	4b02      	ldr	r3, [pc, #8]	; (8016338 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801632e:	4618      	mov	r0, r3
 8016330:	3708      	adds	r7, #8
 8016332:	46bd      	mov	sp, r7
 8016334:	bd80      	pop	{r7, pc}
 8016336:	bf00      	nop
 8016338:	20002ee0 	.word	0x20002ee0
 801633c:	0801b6b0 	.word	0x0801b6b0

08016340 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	4603      	mov	r3, r0
 8016348:	6039      	str	r1, [r7, #0]
 801634a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801634c:	79fb      	ldrb	r3, [r7, #7]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d105      	bne.n	801635e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8016352:	683a      	ldr	r2, [r7, #0]
 8016354:	4907      	ldr	r1, [pc, #28]	; (8016374 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016356:	4808      	ldr	r0, [pc, #32]	; (8016378 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016358:	f7ff fd95 	bl	8015e86 <USBD_GetString>
 801635c:	e004      	b.n	8016368 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801635e:	683a      	ldr	r2, [r7, #0]
 8016360:	4904      	ldr	r1, [pc, #16]	; (8016374 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8016362:	4805      	ldr	r0, [pc, #20]	; (8016378 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8016364:	f7ff fd8f 	bl	8015e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016368:	4b02      	ldr	r3, [pc, #8]	; (8016374 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801636a:	4618      	mov	r0, r3
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	20002ee0 	.word	0x20002ee0
 8016378:	0801b6bc 	.word	0x0801b6bc

0801637c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016382:	4b0f      	ldr	r3, [pc, #60]	; (80163c0 <Get_SerialNum+0x44>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016388:	4b0e      	ldr	r3, [pc, #56]	; (80163c4 <Get_SerialNum+0x48>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801638e:	4b0e      	ldr	r3, [pc, #56]	; (80163c8 <Get_SerialNum+0x4c>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016394:	68fa      	ldr	r2, [r7, #12]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	4413      	add	r3, r2
 801639a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d009      	beq.n	80163b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80163a2:	2208      	movs	r2, #8
 80163a4:	4909      	ldr	r1, [pc, #36]	; (80163cc <Get_SerialNum+0x50>)
 80163a6:	68f8      	ldr	r0, [r7, #12]
 80163a8:	f000 f814 	bl	80163d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80163ac:	2204      	movs	r2, #4
 80163ae:	4908      	ldr	r1, [pc, #32]	; (80163d0 <Get_SerialNum+0x54>)
 80163b0:	68b8      	ldr	r0, [r7, #8]
 80163b2:	f000 f80f 	bl	80163d4 <IntToUnicode>
  }
}
 80163b6:	bf00      	nop
 80163b8:	3710      	adds	r7, #16
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	1fff7590 	.word	0x1fff7590
 80163c4:	1fff7594 	.word	0x1fff7594
 80163c8:	1fff7598 	.word	0x1fff7598
 80163cc:	2000037a 	.word	0x2000037a
 80163d0:	2000038a 	.word	0x2000038a

080163d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80163d4:	b480      	push	{r7}
 80163d6:	b087      	sub	sp, #28
 80163d8:	af00      	add	r7, sp, #0
 80163da:	60f8      	str	r0, [r7, #12]
 80163dc:	60b9      	str	r1, [r7, #8]
 80163de:	4613      	mov	r3, r2
 80163e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80163e2:	2300      	movs	r3, #0
 80163e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80163e6:	2300      	movs	r3, #0
 80163e8:	75fb      	strb	r3, [r7, #23]
 80163ea:	e027      	b.n	801643c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	0f1b      	lsrs	r3, r3, #28
 80163f0:	2b09      	cmp	r3, #9
 80163f2:	d80b      	bhi.n	801640c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	0f1b      	lsrs	r3, r3, #28
 80163f8:	b2da      	uxtb	r2, r3
 80163fa:	7dfb      	ldrb	r3, [r7, #23]
 80163fc:	005b      	lsls	r3, r3, #1
 80163fe:	4619      	mov	r1, r3
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	440b      	add	r3, r1
 8016404:	3230      	adds	r2, #48	; 0x30
 8016406:	b2d2      	uxtb	r2, r2
 8016408:	701a      	strb	r2, [r3, #0]
 801640a:	e00a      	b.n	8016422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	0f1b      	lsrs	r3, r3, #28
 8016410:	b2da      	uxtb	r2, r3
 8016412:	7dfb      	ldrb	r3, [r7, #23]
 8016414:	005b      	lsls	r3, r3, #1
 8016416:	4619      	mov	r1, r3
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	440b      	add	r3, r1
 801641c:	3237      	adds	r2, #55	; 0x37
 801641e:	b2d2      	uxtb	r2, r2
 8016420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	011b      	lsls	r3, r3, #4
 8016426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016428:	7dfb      	ldrb	r3, [r7, #23]
 801642a:	005b      	lsls	r3, r3, #1
 801642c:	3301      	adds	r3, #1
 801642e:	68ba      	ldr	r2, [r7, #8]
 8016430:	4413      	add	r3, r2
 8016432:	2200      	movs	r2, #0
 8016434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016436:	7dfb      	ldrb	r3, [r7, #23]
 8016438:	3301      	adds	r3, #1
 801643a:	75fb      	strb	r3, [r7, #23]
 801643c:	7dfa      	ldrb	r2, [r7, #23]
 801643e:	79fb      	ldrb	r3, [r7, #7]
 8016440:	429a      	cmp	r2, r3
 8016442:	d3d3      	bcc.n	80163ec <IntToUnicode+0x18>
  }
}
 8016444:	bf00      	nop
 8016446:	bf00      	nop
 8016448:	371c      	adds	r7, #28
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr
	...

08016454 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b094      	sub	sp, #80	; 0x50
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801645c:	f107 030c 	add.w	r3, r7, #12
 8016460:	2244      	movs	r2, #68	; 0x44
 8016462:	2100      	movs	r1, #0
 8016464:	4618      	mov	r0, r3
 8016466:	f001 fa94 	bl	8017992 <memset>
  if(pcdHandle->Instance==USB)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	4a15      	ldr	r2, [pc, #84]	; (80164c4 <HAL_PCD_MspInit+0x70>)
 8016470:	4293      	cmp	r3, r2
 8016472:	d122      	bne.n	80164ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016478:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801647a:	2300      	movs	r3, #0
 801647c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801647e:	f107 030c 	add.w	r3, r7, #12
 8016482:	4618      	mov	r0, r3
 8016484:	f7f6 fc1e 	bl	800ccc4 <HAL_RCCEx_PeriphCLKConfig>
 8016488:	4603      	mov	r3, r0
 801648a:	2b00      	cmp	r3, #0
 801648c:	d001      	beq.n	8016492 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801648e:	f7ee fb5f 	bl	8004b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016492:	4b0d      	ldr	r3, [pc, #52]	; (80164c8 <HAL_PCD_MspInit+0x74>)
 8016494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016496:	4a0c      	ldr	r2, [pc, #48]	; (80164c8 <HAL_PCD_MspInit+0x74>)
 8016498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801649c:	6593      	str	r3, [r2, #88]	; 0x58
 801649e:	4b0a      	ldr	r3, [pc, #40]	; (80164c8 <HAL_PCD_MspInit+0x74>)
 80164a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80164a6:	60bb      	str	r3, [r7, #8]
 80164a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80164aa:	2200      	movs	r2, #0
 80164ac:	2100      	movs	r1, #0
 80164ae:	2014      	movs	r0, #20
 80164b0:	f7f2 fe65 	bl	800917e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80164b4:	2014      	movs	r0, #20
 80164b6:	f7f2 fe7c 	bl	80091b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80164ba:	bf00      	nop
 80164bc:	3750      	adds	r7, #80	; 0x50
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	40005c00 	.word	0x40005c00
 80164c8:	40021000 	.word	0x40021000

080164cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164cc:	b580      	push	{r7, lr}
 80164ce:	b082      	sub	sp, #8
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80164e0:	4619      	mov	r1, r3
 80164e2:	4610      	mov	r0, r2
 80164e4:	f7fe fd32 	bl	8014f4c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80164e8:	bf00      	nop
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	460b      	mov	r3, r1
 80164fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8016502:	78fa      	ldrb	r2, [r7, #3]
 8016504:	6879      	ldr	r1, [r7, #4]
 8016506:	4613      	mov	r3, r2
 8016508:	009b      	lsls	r3, r3, #2
 801650a:	4413      	add	r3, r2
 801650c:	00db      	lsls	r3, r3, #3
 801650e:	440b      	add	r3, r1
 8016510:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016514:	681a      	ldr	r2, [r3, #0]
 8016516:	78fb      	ldrb	r3, [r7, #3]
 8016518:	4619      	mov	r1, r3
 801651a:	f7fe fd6c 	bl	8014ff6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801651e:	bf00      	nop
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b082      	sub	sp, #8
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]
 801652e:	460b      	mov	r3, r1
 8016530:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8016538:	78fa      	ldrb	r2, [r7, #3]
 801653a:	6879      	ldr	r1, [r7, #4]
 801653c:	4613      	mov	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	4413      	add	r3, r2
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	440b      	add	r3, r1
 8016546:	3324      	adds	r3, #36	; 0x24
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	78fb      	ldrb	r3, [r7, #3]
 801654c:	4619      	mov	r1, r3
 801654e:	f7fe fdb5 	bl	80150bc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8016552:	bf00      	nop
 8016554:	3708      	adds	r7, #8
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b082      	sub	sp, #8
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016568:	4618      	mov	r0, r3
 801656a:	f7fe fec9 	bl	8015300 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801656e:	bf00      	nop
 8016570:	3708      	adds	r7, #8
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016576:	b580      	push	{r7, lr}
 8016578:	b084      	sub	sp, #16
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801657e:	2301      	movs	r3, #1
 8016580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	795b      	ldrb	r3, [r3, #5]
 8016586:	2b02      	cmp	r3, #2
 8016588:	d001      	beq.n	801658e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801658a:	f7ee fae1 	bl	8004b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016594:	7bfa      	ldrb	r2, [r7, #15]
 8016596:	4611      	mov	r1, r2
 8016598:	4618      	mov	r0, r3
 801659a:	f7fe fe73 	bl	8015284 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7fe fe1f 	bl	80151e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80165aa:	bf00      	nop
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
	...

080165b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7fe fe6e 	bl	80152a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	7a5b      	ldrb	r3, [r3, #9]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d005      	beq.n	80165dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165d0:	4b04      	ldr	r3, [pc, #16]	; (80165e4 <HAL_PCD_SuspendCallback+0x30>)
 80165d2:	691b      	ldr	r3, [r3, #16]
 80165d4:	4a03      	ldr	r2, [pc, #12]	; (80165e4 <HAL_PCD_SuspendCallback+0x30>)
 80165d6:	f043 0306 	orr.w	r3, r3, #6
 80165da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80165dc:	bf00      	nop
 80165de:	3708      	adds	r7, #8
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	e000ed00 	.word	0xe000ed00

080165e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	7a5b      	ldrb	r3, [r3, #9]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d007      	beq.n	8016608 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80165f8:	4b08      	ldr	r3, [pc, #32]	; (801661c <HAL_PCD_ResumeCallback+0x34>)
 80165fa:	691b      	ldr	r3, [r3, #16]
 80165fc:	4a07      	ldr	r2, [pc, #28]	; (801661c <HAL_PCD_ResumeCallback+0x34>)
 80165fe:	f023 0306 	bic.w	r3, r3, #6
 8016602:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8016604:	f000 f9f8 	bl	80169f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801660e:	4618      	mov	r0, r3
 8016610:	f7fe fe5e 	bl	80152d0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8016614:	bf00      	nop
 8016616:	3708      	adds	r7, #8
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}
 801661c:	e000ed00 	.word	0xe000ed00

08016620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8016628:	4a2b      	ldr	r2, [pc, #172]	; (80166d8 <USBD_LL_Init+0xb8>)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	4a29      	ldr	r2, [pc, #164]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016634:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8016638:	4b27      	ldr	r3, [pc, #156]	; (80166d8 <USBD_LL_Init+0xb8>)
 801663a:	4a28      	ldr	r2, [pc, #160]	; (80166dc <USBD_LL_Init+0xbc>)
 801663c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801663e:	4b26      	ldr	r3, [pc, #152]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016640:	2208      	movs	r2, #8
 8016642:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016644:	4b24      	ldr	r3, [pc, #144]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016646:	2202      	movs	r2, #2
 8016648:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801664a:	4b23      	ldr	r3, [pc, #140]	; (80166d8 <USBD_LL_Init+0xb8>)
 801664c:	2202      	movs	r2, #2
 801664e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8016650:	4b21      	ldr	r3, [pc, #132]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016652:	2200      	movs	r2, #0
 8016654:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016656:	4b20      	ldr	r3, [pc, #128]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016658:	2200      	movs	r2, #0
 801665a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801665c:	4b1e      	ldr	r3, [pc, #120]	; (80166d8 <USBD_LL_Init+0xb8>)
 801665e:	2200      	movs	r2, #0
 8016660:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016662:	4b1d      	ldr	r3, [pc, #116]	; (80166d8 <USBD_LL_Init+0xb8>)
 8016664:	2200      	movs	r2, #0
 8016666:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016668:	481b      	ldr	r0, [pc, #108]	; (80166d8 <USBD_LL_Init+0xb8>)
 801666a:	f7f4 f815 	bl	800a698 <HAL_PCD_Init>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d001      	beq.n	8016678 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8016674:	f7ee fa6c 	bl	8004b50 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801667e:	2318      	movs	r3, #24
 8016680:	2200      	movs	r2, #0
 8016682:	2100      	movs	r1, #0
 8016684:	f7f5 fccf 	bl	800c026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801668e:	2358      	movs	r3, #88	; 0x58
 8016690:	2200      	movs	r2, #0
 8016692:	2180      	movs	r1, #128	; 0x80
 8016694:	f7f5 fcc7 	bl	800c026 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801669e:	23c0      	movs	r3, #192	; 0xc0
 80166a0:	2200      	movs	r2, #0
 80166a2:	2181      	movs	r1, #129	; 0x81
 80166a4:	f7f5 fcbf 	bl	800c026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80166ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80166b2:	2200      	movs	r2, #0
 80166b4:	2101      	movs	r1, #1
 80166b6:	f7f5 fcb6 	bl	800c026 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80166c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80166c4:	2200      	movs	r2, #0
 80166c6:	2182      	movs	r1, #130	; 0x82
 80166c8:	f7f5 fcad 	bl	800c026 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80166cc:	2300      	movs	r3, #0
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	200030e0 	.word	0x200030e0
 80166dc:	40005c00 	.word	0x40005c00

080166e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b084      	sub	sp, #16
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166e8:	2300      	movs	r3, #0
 80166ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166ec:	2300      	movs	r3, #0
 80166ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7f4 f89c 	bl	800a834 <HAL_PCD_Start>
 80166fc:	4603      	mov	r3, r0
 80166fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016700:	7bfb      	ldrb	r3, [r7, #15]
 8016702:	4618      	mov	r0, r3
 8016704:	f000 f97e 	bl	8016a04 <USBD_Get_USB_Status>
 8016708:	4603      	mov	r3, r0
 801670a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801670c:	7bbb      	ldrb	r3, [r7, #14]
}
 801670e:	4618      	mov	r0, r3
 8016710:	3710      	adds	r7, #16
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}

08016716 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016716:	b580      	push	{r7, lr}
 8016718:	b084      	sub	sp, #16
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	4608      	mov	r0, r1
 8016720:	4611      	mov	r1, r2
 8016722:	461a      	mov	r2, r3
 8016724:	4603      	mov	r3, r0
 8016726:	70fb      	strb	r3, [r7, #3]
 8016728:	460b      	mov	r3, r1
 801672a:	70bb      	strb	r3, [r7, #2]
 801672c:	4613      	mov	r3, r2
 801672e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016730:	2300      	movs	r3, #0
 8016732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016734:	2300      	movs	r3, #0
 8016736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801673e:	78bb      	ldrb	r3, [r7, #2]
 8016740:	883a      	ldrh	r2, [r7, #0]
 8016742:	78f9      	ldrb	r1, [r7, #3]
 8016744:	f7f4 f9e3 	bl	800ab0e <HAL_PCD_EP_Open>
 8016748:	4603      	mov	r3, r0
 801674a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801674c:	7bfb      	ldrb	r3, [r7, #15]
 801674e:	4618      	mov	r0, r3
 8016750:	f000 f958 	bl	8016a04 <USBD_Get_USB_Status>
 8016754:	4603      	mov	r3, r0
 8016756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016758:	7bbb      	ldrb	r3, [r7, #14]
}
 801675a:	4618      	mov	r0, r3
 801675c:	3710      	adds	r7, #16
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}

08016762 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016762:	b580      	push	{r7, lr}
 8016764:	b084      	sub	sp, #16
 8016766:	af00      	add	r7, sp, #0
 8016768:	6078      	str	r0, [r7, #4]
 801676a:	460b      	mov	r3, r1
 801676c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801676e:	2300      	movs	r3, #0
 8016770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016772:	2300      	movs	r3, #0
 8016774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801677c:	78fa      	ldrb	r2, [r7, #3]
 801677e:	4611      	mov	r1, r2
 8016780:	4618      	mov	r0, r3
 8016782:	f7f4 fa21 	bl	800abc8 <HAL_PCD_EP_Close>
 8016786:	4603      	mov	r3, r0
 8016788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801678a:	7bfb      	ldrb	r3, [r7, #15]
 801678c:	4618      	mov	r0, r3
 801678e:	f000 f939 	bl	8016a04 <USBD_Get_USB_Status>
 8016792:	4603      	mov	r3, r0
 8016794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016796:	7bbb      	ldrb	r3, [r7, #14]
}
 8016798:	4618      	mov	r0, r3
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	460b      	mov	r3, r1
 80167aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167ac:	2300      	movs	r3, #0
 80167ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167b0:	2300      	movs	r3, #0
 80167b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80167ba:	78fa      	ldrb	r2, [r7, #3]
 80167bc:	4611      	mov	r1, r2
 80167be:	4618      	mov	r0, r3
 80167c0:	f7f4 faca 	bl	800ad58 <HAL_PCD_EP_SetStall>
 80167c4:	4603      	mov	r3, r0
 80167c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80167c8:	7bfb      	ldrb	r3, [r7, #15]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f000 f91a 	bl	8016a04 <USBD_Get_USB_Status>
 80167d0:	4603      	mov	r3, r0
 80167d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80167d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3710      	adds	r7, #16
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}

080167de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80167de:	b580      	push	{r7, lr}
 80167e0:	b084      	sub	sp, #16
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
 80167e6:	460b      	mov	r3, r1
 80167e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80167ea:	2300      	movs	r3, #0
 80167ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80167ee:	2300      	movs	r3, #0
 80167f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80167f8:	78fa      	ldrb	r2, [r7, #3]
 80167fa:	4611      	mov	r1, r2
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7f4 fafd 	bl	800adfc <HAL_PCD_EP_ClrStall>
 8016802:	4603      	mov	r3, r0
 8016804:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016806:	7bfb      	ldrb	r3, [r7, #15]
 8016808:	4618      	mov	r0, r3
 801680a:	f000 f8fb 	bl	8016a04 <USBD_Get_USB_Status>
 801680e:	4603      	mov	r3, r0
 8016810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016812:	7bbb      	ldrb	r3, [r7, #14]
}
 8016814:	4618      	mov	r0, r3
 8016816:	3710      	adds	r7, #16
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801681c:	b480      	push	{r7}
 801681e:	b085      	sub	sp, #20
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801682e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016834:	2b00      	cmp	r3, #0
 8016836:	da0b      	bge.n	8016850 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016838:	78fb      	ldrb	r3, [r7, #3]
 801683a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801683e:	68f9      	ldr	r1, [r7, #12]
 8016840:	4613      	mov	r3, r2
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	4413      	add	r3, r2
 8016846:	00db      	lsls	r3, r3, #3
 8016848:	440b      	add	r3, r1
 801684a:	3312      	adds	r3, #18
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	e00b      	b.n	8016868 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016850:	78fb      	ldrb	r3, [r7, #3]
 8016852:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016856:	68f9      	ldr	r1, [r7, #12]
 8016858:	4613      	mov	r3, r2
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	4413      	add	r3, r2
 801685e:	00db      	lsls	r3, r3, #3
 8016860:	440b      	add	r3, r1
 8016862:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8016866:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016868:	4618      	mov	r0, r3
 801686a:	3714      	adds	r7, #20
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr

08016874 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b084      	sub	sp, #16
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	460b      	mov	r3, r1
 801687e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016880:	2300      	movs	r3, #0
 8016882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016884:	2300      	movs	r3, #0
 8016886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801688e:	78fa      	ldrb	r2, [r7, #3]
 8016890:	4611      	mov	r1, r2
 8016892:	4618      	mov	r0, r3
 8016894:	f7f4 f917 	bl	800aac6 <HAL_PCD_SetAddress>
 8016898:	4603      	mov	r3, r0
 801689a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801689c:	7bfb      	ldrb	r3, [r7, #15]
 801689e:	4618      	mov	r0, r3
 80168a0:	f000 f8b0 	bl	8016a04 <USBD_Get_USB_Status>
 80168a4:	4603      	mov	r3, r0
 80168a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3710      	adds	r7, #16
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}

080168b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80168b2:	b580      	push	{r7, lr}
 80168b4:	b086      	sub	sp, #24
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	60f8      	str	r0, [r7, #12]
 80168ba:	607a      	str	r2, [r7, #4]
 80168bc:	603b      	str	r3, [r7, #0]
 80168be:	460b      	mov	r3, r1
 80168c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168c6:	2300      	movs	r3, #0
 80168c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80168d0:	7af9      	ldrb	r1, [r7, #11]
 80168d2:	683b      	ldr	r3, [r7, #0]
 80168d4:	687a      	ldr	r2, [r7, #4]
 80168d6:	f7f4 fa08 	bl	800acea <HAL_PCD_EP_Transmit>
 80168da:	4603      	mov	r3, r0
 80168dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168de:	7dfb      	ldrb	r3, [r7, #23]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f000 f88f 	bl	8016a04 <USBD_Get_USB_Status>
 80168e6:	4603      	mov	r3, r0
 80168e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80168ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3718      	adds	r7, #24
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b086      	sub	sp, #24
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	60f8      	str	r0, [r7, #12]
 80168fc:	607a      	str	r2, [r7, #4]
 80168fe:	603b      	str	r3, [r7, #0]
 8016900:	460b      	mov	r3, r1
 8016902:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016904:	2300      	movs	r3, #0
 8016906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016908:	2300      	movs	r3, #0
 801690a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016912:	7af9      	ldrb	r1, [r7, #11]
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	f7f4 f99e 	bl	800ac58 <HAL_PCD_EP_Receive>
 801691c:	4603      	mov	r3, r0
 801691e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016920:	7dfb      	ldrb	r3, [r7, #23]
 8016922:	4618      	mov	r0, r3
 8016924:	f000 f86e 	bl	8016a04 <USBD_Get_USB_Status>
 8016928:	4603      	mov	r3, r0
 801692a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801692c:	7dbb      	ldrb	r3, [r7, #22]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3718      	adds	r7, #24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016936:	b580      	push	{r7, lr}
 8016938:	b082      	sub	sp, #8
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	460b      	mov	r3, r1
 8016940:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016948:	78fa      	ldrb	r2, [r7, #3]
 801694a:	4611      	mov	r1, r2
 801694c:	4618      	mov	r0, r3
 801694e:	f7f4 f9b4 	bl	800acba <HAL_PCD_EP_GetRxCount>
 8016952:	4603      	mov	r3, r0
}
 8016954:	4618      	mov	r0, r3
 8016956:	3708      	adds	r7, #8
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}

0801695c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801695c:	b580      	push	{r7, lr}
 801695e:	b082      	sub	sp, #8
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	460b      	mov	r3, r1
 8016966:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8016968:	78fb      	ldrb	r3, [r7, #3]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d002      	beq.n	8016974 <HAL_PCDEx_LPM_Callback+0x18>
 801696e:	2b01      	cmp	r3, #1
 8016970:	d013      	beq.n	801699a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8016972:	e023      	b.n	80169bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	7a5b      	ldrb	r3, [r3, #9]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d007      	beq.n	801698c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801697c:	f000 f83c 	bl	80169f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016980:	4b10      	ldr	r3, [pc, #64]	; (80169c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016982:	691b      	ldr	r3, [r3, #16]
 8016984:	4a0f      	ldr	r2, [pc, #60]	; (80169c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8016986:	f023 0306 	bic.w	r3, r3, #6
 801698a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016992:	4618      	mov	r0, r3
 8016994:	f7fe fc9c 	bl	80152d0 <USBD_LL_Resume>
    break;
 8016998:	e010      	b.n	80169bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7fe fc7f 	bl	80152a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	7a5b      	ldrb	r3, [r3, #9]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d005      	beq.n	80169ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80169ae:	4b05      	ldr	r3, [pc, #20]	; (80169c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80169b0:	691b      	ldr	r3, [r3, #16]
 80169b2:	4a04      	ldr	r2, [pc, #16]	; (80169c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80169b4:	f043 0306 	orr.w	r3, r3, #6
 80169b8:	6113      	str	r3, [r2, #16]
    break;
 80169ba:	bf00      	nop
}
 80169bc:	bf00      	nop
 80169be:	3708      	adds	r7, #8
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}
 80169c4:	e000ed00 	.word	0xe000ed00

080169c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80169c8:	b480      	push	{r7}
 80169ca:	b083      	sub	sp, #12
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80169d0:	4b03      	ldr	r3, [pc, #12]	; (80169e0 <USBD_static_malloc+0x18>)
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	370c      	adds	r7, #12
 80169d6:	46bd      	mov	sp, r7
 80169d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169dc:	4770      	bx	lr
 80169de:	bf00      	nop
 80169e0:	200033bc 	.word	0x200033bc

080169e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b083      	sub	sp, #12
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]

}
 80169ec:	bf00      	nop
 80169ee:	370c      	adds	r7, #12
 80169f0:	46bd      	mov	sp, r7
 80169f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f6:	4770      	bx	lr

080169f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80169fc:	f7ed fafa 	bl	8003ff4 <SystemClock_Config>
}
 8016a00:	bf00      	nop
 8016a02:	bd80      	pop	{r7, pc}

08016a04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016a04:	b480      	push	{r7}
 8016a06:	b085      	sub	sp, #20
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016a12:	79fb      	ldrb	r3, [r7, #7]
 8016a14:	2b03      	cmp	r3, #3
 8016a16:	d817      	bhi.n	8016a48 <USBD_Get_USB_Status+0x44>
 8016a18:	a201      	add	r2, pc, #4	; (adr r2, 8016a20 <USBD_Get_USB_Status+0x1c>)
 8016a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a1e:	bf00      	nop
 8016a20:	08016a31 	.word	0x08016a31
 8016a24:	08016a37 	.word	0x08016a37
 8016a28:	08016a3d 	.word	0x08016a3d
 8016a2c:	08016a43 	.word	0x08016a43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016a30:	2300      	movs	r3, #0
 8016a32:	73fb      	strb	r3, [r7, #15]
    break;
 8016a34:	e00b      	b.n	8016a4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016a36:	2303      	movs	r3, #3
 8016a38:	73fb      	strb	r3, [r7, #15]
    break;
 8016a3a:	e008      	b.n	8016a4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016a3c:	2301      	movs	r3, #1
 8016a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8016a40:	e005      	b.n	8016a4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016a42:	2303      	movs	r3, #3
 8016a44:	73fb      	strb	r3, [r7, #15]
    break;
 8016a46:	e002      	b.n	8016a4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016a48:	2303      	movs	r3, #3
 8016a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8016a4c:	bf00      	nop
  }
  return usb_status;
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3714      	adds	r7, #20
 8016a54:	46bd      	mov	sp, r7
 8016a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5a:	4770      	bx	lr

08016a5c <__cvt>:
 8016a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a60:	ec55 4b10 	vmov	r4, r5, d0
 8016a64:	2d00      	cmp	r5, #0
 8016a66:	460e      	mov	r6, r1
 8016a68:	4619      	mov	r1, r3
 8016a6a:	462b      	mov	r3, r5
 8016a6c:	bfbb      	ittet	lt
 8016a6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016a72:	461d      	movlt	r5, r3
 8016a74:	2300      	movge	r3, #0
 8016a76:	232d      	movlt	r3, #45	; 0x2d
 8016a78:	700b      	strb	r3, [r1, #0]
 8016a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016a80:	4691      	mov	r9, r2
 8016a82:	f023 0820 	bic.w	r8, r3, #32
 8016a86:	bfbc      	itt	lt
 8016a88:	4622      	movlt	r2, r4
 8016a8a:	4614      	movlt	r4, r2
 8016a8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016a90:	d005      	beq.n	8016a9e <__cvt+0x42>
 8016a92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016a96:	d100      	bne.n	8016a9a <__cvt+0x3e>
 8016a98:	3601      	adds	r6, #1
 8016a9a:	2102      	movs	r1, #2
 8016a9c:	e000      	b.n	8016aa0 <__cvt+0x44>
 8016a9e:	2103      	movs	r1, #3
 8016aa0:	ab03      	add	r3, sp, #12
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	ab02      	add	r3, sp, #8
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	ec45 4b10 	vmov	d0, r4, r5
 8016aac:	4653      	mov	r3, sl
 8016aae:	4632      	mov	r2, r6
 8016ab0:	f001 f88e 	bl	8017bd0 <_dtoa_r>
 8016ab4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016ab8:	4607      	mov	r7, r0
 8016aba:	d102      	bne.n	8016ac2 <__cvt+0x66>
 8016abc:	f019 0f01 	tst.w	r9, #1
 8016ac0:	d022      	beq.n	8016b08 <__cvt+0xac>
 8016ac2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016ac6:	eb07 0906 	add.w	r9, r7, r6
 8016aca:	d110      	bne.n	8016aee <__cvt+0x92>
 8016acc:	783b      	ldrb	r3, [r7, #0]
 8016ace:	2b30      	cmp	r3, #48	; 0x30
 8016ad0:	d10a      	bne.n	8016ae8 <__cvt+0x8c>
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	4629      	mov	r1, r5
 8016ada:	f7ea f81d 	bl	8000b18 <__aeabi_dcmpeq>
 8016ade:	b918      	cbnz	r0, 8016ae8 <__cvt+0x8c>
 8016ae0:	f1c6 0601 	rsb	r6, r6, #1
 8016ae4:	f8ca 6000 	str.w	r6, [sl]
 8016ae8:	f8da 3000 	ldr.w	r3, [sl]
 8016aec:	4499      	add	r9, r3
 8016aee:	2200      	movs	r2, #0
 8016af0:	2300      	movs	r3, #0
 8016af2:	4620      	mov	r0, r4
 8016af4:	4629      	mov	r1, r5
 8016af6:	f7ea f80f 	bl	8000b18 <__aeabi_dcmpeq>
 8016afa:	b108      	cbz	r0, 8016b00 <__cvt+0xa4>
 8016afc:	f8cd 900c 	str.w	r9, [sp, #12]
 8016b00:	2230      	movs	r2, #48	; 0x30
 8016b02:	9b03      	ldr	r3, [sp, #12]
 8016b04:	454b      	cmp	r3, r9
 8016b06:	d307      	bcc.n	8016b18 <__cvt+0xbc>
 8016b08:	9b03      	ldr	r3, [sp, #12]
 8016b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b0c:	1bdb      	subs	r3, r3, r7
 8016b0e:	4638      	mov	r0, r7
 8016b10:	6013      	str	r3, [r2, #0]
 8016b12:	b004      	add	sp, #16
 8016b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b18:	1c59      	adds	r1, r3, #1
 8016b1a:	9103      	str	r1, [sp, #12]
 8016b1c:	701a      	strb	r2, [r3, #0]
 8016b1e:	e7f0      	b.n	8016b02 <__cvt+0xa6>

08016b20 <__exponent>:
 8016b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b22:	4603      	mov	r3, r0
 8016b24:	2900      	cmp	r1, #0
 8016b26:	bfb8      	it	lt
 8016b28:	4249      	neglt	r1, r1
 8016b2a:	f803 2b02 	strb.w	r2, [r3], #2
 8016b2e:	bfb4      	ite	lt
 8016b30:	222d      	movlt	r2, #45	; 0x2d
 8016b32:	222b      	movge	r2, #43	; 0x2b
 8016b34:	2909      	cmp	r1, #9
 8016b36:	7042      	strb	r2, [r0, #1]
 8016b38:	dd2a      	ble.n	8016b90 <__exponent+0x70>
 8016b3a:	f10d 0207 	add.w	r2, sp, #7
 8016b3e:	4617      	mov	r7, r2
 8016b40:	260a      	movs	r6, #10
 8016b42:	4694      	mov	ip, r2
 8016b44:	fb91 f5f6 	sdiv	r5, r1, r6
 8016b48:	fb06 1415 	mls	r4, r6, r5, r1
 8016b4c:	3430      	adds	r4, #48	; 0x30
 8016b4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016b52:	460c      	mov	r4, r1
 8016b54:	2c63      	cmp	r4, #99	; 0x63
 8016b56:	f102 32ff 	add.w	r2, r2, #4294967295
 8016b5a:	4629      	mov	r1, r5
 8016b5c:	dcf1      	bgt.n	8016b42 <__exponent+0x22>
 8016b5e:	3130      	adds	r1, #48	; 0x30
 8016b60:	f1ac 0402 	sub.w	r4, ip, #2
 8016b64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016b68:	1c41      	adds	r1, r0, #1
 8016b6a:	4622      	mov	r2, r4
 8016b6c:	42ba      	cmp	r2, r7
 8016b6e:	d30a      	bcc.n	8016b86 <__exponent+0x66>
 8016b70:	f10d 0209 	add.w	r2, sp, #9
 8016b74:	eba2 020c 	sub.w	r2, r2, ip
 8016b78:	42bc      	cmp	r4, r7
 8016b7a:	bf88      	it	hi
 8016b7c:	2200      	movhi	r2, #0
 8016b7e:	4413      	add	r3, r2
 8016b80:	1a18      	subs	r0, r3, r0
 8016b82:	b003      	add	sp, #12
 8016b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016b8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016b8e:	e7ed      	b.n	8016b6c <__exponent+0x4c>
 8016b90:	2330      	movs	r3, #48	; 0x30
 8016b92:	3130      	adds	r1, #48	; 0x30
 8016b94:	7083      	strb	r3, [r0, #2]
 8016b96:	70c1      	strb	r1, [r0, #3]
 8016b98:	1d03      	adds	r3, r0, #4
 8016b9a:	e7f1      	b.n	8016b80 <__exponent+0x60>

08016b9c <_printf_float>:
 8016b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba0:	ed2d 8b02 	vpush	{d8}
 8016ba4:	b08d      	sub	sp, #52	; 0x34
 8016ba6:	460c      	mov	r4, r1
 8016ba8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016bac:	4616      	mov	r6, r2
 8016bae:	461f      	mov	r7, r3
 8016bb0:	4605      	mov	r5, r0
 8016bb2:	f000 fef7 	bl	80179a4 <_localeconv_r>
 8016bb6:	f8d0 a000 	ldr.w	sl, [r0]
 8016bba:	4650      	mov	r0, sl
 8016bbc:	f7e9 fb80 	bl	80002c0 <strlen>
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8016bc4:	6823      	ldr	r3, [r4, #0]
 8016bc6:	9305      	str	r3, [sp, #20]
 8016bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8016bcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016bd0:	3307      	adds	r3, #7
 8016bd2:	f023 0307 	bic.w	r3, r3, #7
 8016bd6:	f103 0208 	add.w	r2, r3, #8
 8016bda:	f8c8 2000 	str.w	r2, [r8]
 8016bde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016be6:	9307      	str	r3, [sp, #28]
 8016be8:	f8cd 8018 	str.w	r8, [sp, #24]
 8016bec:	ee08 0a10 	vmov	s16, r0
 8016bf0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016bf8:	4b9e      	ldr	r3, [pc, #632]	; (8016e74 <_printf_float+0x2d8>)
 8016bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8016bfe:	f7e9 ffbd 	bl	8000b7c <__aeabi_dcmpun>
 8016c02:	bb88      	cbnz	r0, 8016c68 <_printf_float+0xcc>
 8016c04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c08:	4b9a      	ldr	r3, [pc, #616]	; (8016e74 <_printf_float+0x2d8>)
 8016c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c0e:	f7e9 ff97 	bl	8000b40 <__aeabi_dcmple>
 8016c12:	bb48      	cbnz	r0, 8016c68 <_printf_float+0xcc>
 8016c14:	2200      	movs	r2, #0
 8016c16:	2300      	movs	r3, #0
 8016c18:	4640      	mov	r0, r8
 8016c1a:	4649      	mov	r1, r9
 8016c1c:	f7e9 ff86 	bl	8000b2c <__aeabi_dcmplt>
 8016c20:	b110      	cbz	r0, 8016c28 <_printf_float+0x8c>
 8016c22:	232d      	movs	r3, #45	; 0x2d
 8016c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c28:	4a93      	ldr	r2, [pc, #588]	; (8016e78 <_printf_float+0x2dc>)
 8016c2a:	4b94      	ldr	r3, [pc, #592]	; (8016e7c <_printf_float+0x2e0>)
 8016c2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016c30:	bf94      	ite	ls
 8016c32:	4690      	movls	r8, r2
 8016c34:	4698      	movhi	r8, r3
 8016c36:	2303      	movs	r3, #3
 8016c38:	6123      	str	r3, [r4, #16]
 8016c3a:	9b05      	ldr	r3, [sp, #20]
 8016c3c:	f023 0304 	bic.w	r3, r3, #4
 8016c40:	6023      	str	r3, [r4, #0]
 8016c42:	f04f 0900 	mov.w	r9, #0
 8016c46:	9700      	str	r7, [sp, #0]
 8016c48:	4633      	mov	r3, r6
 8016c4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8016c4c:	4621      	mov	r1, r4
 8016c4e:	4628      	mov	r0, r5
 8016c50:	f000 f9da 	bl	8017008 <_printf_common>
 8016c54:	3001      	adds	r0, #1
 8016c56:	f040 8090 	bne.w	8016d7a <_printf_float+0x1de>
 8016c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8016c5e:	b00d      	add	sp, #52	; 0x34
 8016c60:	ecbd 8b02 	vpop	{d8}
 8016c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c68:	4642      	mov	r2, r8
 8016c6a:	464b      	mov	r3, r9
 8016c6c:	4640      	mov	r0, r8
 8016c6e:	4649      	mov	r1, r9
 8016c70:	f7e9 ff84 	bl	8000b7c <__aeabi_dcmpun>
 8016c74:	b140      	cbz	r0, 8016c88 <_printf_float+0xec>
 8016c76:	464b      	mov	r3, r9
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	bfbc      	itt	lt
 8016c7c:	232d      	movlt	r3, #45	; 0x2d
 8016c7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016c82:	4a7f      	ldr	r2, [pc, #508]	; (8016e80 <_printf_float+0x2e4>)
 8016c84:	4b7f      	ldr	r3, [pc, #508]	; (8016e84 <_printf_float+0x2e8>)
 8016c86:	e7d1      	b.n	8016c2c <_printf_float+0x90>
 8016c88:	6863      	ldr	r3, [r4, #4]
 8016c8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016c8e:	9206      	str	r2, [sp, #24]
 8016c90:	1c5a      	adds	r2, r3, #1
 8016c92:	d13f      	bne.n	8016d14 <_printf_float+0x178>
 8016c94:	2306      	movs	r3, #6
 8016c96:	6063      	str	r3, [r4, #4]
 8016c98:	9b05      	ldr	r3, [sp, #20]
 8016c9a:	6861      	ldr	r1, [r4, #4]
 8016c9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	9303      	str	r3, [sp, #12]
 8016ca4:	ab0a      	add	r3, sp, #40	; 0x28
 8016ca6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016caa:	ab09      	add	r3, sp, #36	; 0x24
 8016cac:	ec49 8b10 	vmov	d0, r8, r9
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	6022      	str	r2, [r4, #0]
 8016cb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016cb8:	4628      	mov	r0, r5
 8016cba:	f7ff fecf 	bl	8016a5c <__cvt>
 8016cbe:	9b06      	ldr	r3, [sp, #24]
 8016cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cc2:	2b47      	cmp	r3, #71	; 0x47
 8016cc4:	4680      	mov	r8, r0
 8016cc6:	d108      	bne.n	8016cda <_printf_float+0x13e>
 8016cc8:	1cc8      	adds	r0, r1, #3
 8016cca:	db02      	blt.n	8016cd2 <_printf_float+0x136>
 8016ccc:	6863      	ldr	r3, [r4, #4]
 8016cce:	4299      	cmp	r1, r3
 8016cd0:	dd41      	ble.n	8016d56 <_printf_float+0x1ba>
 8016cd2:	f1ab 0302 	sub.w	r3, fp, #2
 8016cd6:	fa5f fb83 	uxtb.w	fp, r3
 8016cda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016cde:	d820      	bhi.n	8016d22 <_printf_float+0x186>
 8016ce0:	3901      	subs	r1, #1
 8016ce2:	465a      	mov	r2, fp
 8016ce4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016ce8:	9109      	str	r1, [sp, #36]	; 0x24
 8016cea:	f7ff ff19 	bl	8016b20 <__exponent>
 8016cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cf0:	1813      	adds	r3, r2, r0
 8016cf2:	2a01      	cmp	r2, #1
 8016cf4:	4681      	mov	r9, r0
 8016cf6:	6123      	str	r3, [r4, #16]
 8016cf8:	dc02      	bgt.n	8016d00 <_printf_float+0x164>
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	07d2      	lsls	r2, r2, #31
 8016cfe:	d501      	bpl.n	8016d04 <_printf_float+0x168>
 8016d00:	3301      	adds	r3, #1
 8016d02:	6123      	str	r3, [r4, #16]
 8016d04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d09c      	beq.n	8016c46 <_printf_float+0xaa>
 8016d0c:	232d      	movs	r3, #45	; 0x2d
 8016d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d12:	e798      	b.n	8016c46 <_printf_float+0xaa>
 8016d14:	9a06      	ldr	r2, [sp, #24]
 8016d16:	2a47      	cmp	r2, #71	; 0x47
 8016d18:	d1be      	bne.n	8016c98 <_printf_float+0xfc>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d1bc      	bne.n	8016c98 <_printf_float+0xfc>
 8016d1e:	2301      	movs	r3, #1
 8016d20:	e7b9      	b.n	8016c96 <_printf_float+0xfa>
 8016d22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016d26:	d118      	bne.n	8016d5a <_printf_float+0x1be>
 8016d28:	2900      	cmp	r1, #0
 8016d2a:	6863      	ldr	r3, [r4, #4]
 8016d2c:	dd0b      	ble.n	8016d46 <_printf_float+0x1aa>
 8016d2e:	6121      	str	r1, [r4, #16]
 8016d30:	b913      	cbnz	r3, 8016d38 <_printf_float+0x19c>
 8016d32:	6822      	ldr	r2, [r4, #0]
 8016d34:	07d0      	lsls	r0, r2, #31
 8016d36:	d502      	bpl.n	8016d3e <_printf_float+0x1a2>
 8016d38:	3301      	adds	r3, #1
 8016d3a:	440b      	add	r3, r1
 8016d3c:	6123      	str	r3, [r4, #16]
 8016d3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8016d40:	f04f 0900 	mov.w	r9, #0
 8016d44:	e7de      	b.n	8016d04 <_printf_float+0x168>
 8016d46:	b913      	cbnz	r3, 8016d4e <_printf_float+0x1b2>
 8016d48:	6822      	ldr	r2, [r4, #0]
 8016d4a:	07d2      	lsls	r2, r2, #31
 8016d4c:	d501      	bpl.n	8016d52 <_printf_float+0x1b6>
 8016d4e:	3302      	adds	r3, #2
 8016d50:	e7f4      	b.n	8016d3c <_printf_float+0x1a0>
 8016d52:	2301      	movs	r3, #1
 8016d54:	e7f2      	b.n	8016d3c <_printf_float+0x1a0>
 8016d56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d5c:	4299      	cmp	r1, r3
 8016d5e:	db05      	blt.n	8016d6c <_printf_float+0x1d0>
 8016d60:	6823      	ldr	r3, [r4, #0]
 8016d62:	6121      	str	r1, [r4, #16]
 8016d64:	07d8      	lsls	r0, r3, #31
 8016d66:	d5ea      	bpl.n	8016d3e <_printf_float+0x1a2>
 8016d68:	1c4b      	adds	r3, r1, #1
 8016d6a:	e7e7      	b.n	8016d3c <_printf_float+0x1a0>
 8016d6c:	2900      	cmp	r1, #0
 8016d6e:	bfd4      	ite	le
 8016d70:	f1c1 0202 	rsble	r2, r1, #2
 8016d74:	2201      	movgt	r2, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	e7e0      	b.n	8016d3c <_printf_float+0x1a0>
 8016d7a:	6823      	ldr	r3, [r4, #0]
 8016d7c:	055a      	lsls	r2, r3, #21
 8016d7e:	d407      	bmi.n	8016d90 <_printf_float+0x1f4>
 8016d80:	6923      	ldr	r3, [r4, #16]
 8016d82:	4642      	mov	r2, r8
 8016d84:	4631      	mov	r1, r6
 8016d86:	4628      	mov	r0, r5
 8016d88:	47b8      	blx	r7
 8016d8a:	3001      	adds	r0, #1
 8016d8c:	d12c      	bne.n	8016de8 <_printf_float+0x24c>
 8016d8e:	e764      	b.n	8016c5a <_printf_float+0xbe>
 8016d90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016d94:	f240 80e0 	bls.w	8016f58 <_printf_float+0x3bc>
 8016d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	2300      	movs	r3, #0
 8016da0:	f7e9 feba 	bl	8000b18 <__aeabi_dcmpeq>
 8016da4:	2800      	cmp	r0, #0
 8016da6:	d034      	beq.n	8016e12 <_printf_float+0x276>
 8016da8:	4a37      	ldr	r2, [pc, #220]	; (8016e88 <_printf_float+0x2ec>)
 8016daa:	2301      	movs	r3, #1
 8016dac:	4631      	mov	r1, r6
 8016dae:	4628      	mov	r0, r5
 8016db0:	47b8      	blx	r7
 8016db2:	3001      	adds	r0, #1
 8016db4:	f43f af51 	beq.w	8016c5a <_printf_float+0xbe>
 8016db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	db02      	blt.n	8016dc6 <_printf_float+0x22a>
 8016dc0:	6823      	ldr	r3, [r4, #0]
 8016dc2:	07d8      	lsls	r0, r3, #31
 8016dc4:	d510      	bpl.n	8016de8 <_printf_float+0x24c>
 8016dc6:	ee18 3a10 	vmov	r3, s16
 8016dca:	4652      	mov	r2, sl
 8016dcc:	4631      	mov	r1, r6
 8016dce:	4628      	mov	r0, r5
 8016dd0:	47b8      	blx	r7
 8016dd2:	3001      	adds	r0, #1
 8016dd4:	f43f af41 	beq.w	8016c5a <_printf_float+0xbe>
 8016dd8:	f04f 0800 	mov.w	r8, #0
 8016ddc:	f104 091a 	add.w	r9, r4, #26
 8016de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016de2:	3b01      	subs	r3, #1
 8016de4:	4543      	cmp	r3, r8
 8016de6:	dc09      	bgt.n	8016dfc <_printf_float+0x260>
 8016de8:	6823      	ldr	r3, [r4, #0]
 8016dea:	079b      	lsls	r3, r3, #30
 8016dec:	f100 8107 	bmi.w	8016ffe <_printf_float+0x462>
 8016df0:	68e0      	ldr	r0, [r4, #12]
 8016df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016df4:	4298      	cmp	r0, r3
 8016df6:	bfb8      	it	lt
 8016df8:	4618      	movlt	r0, r3
 8016dfa:	e730      	b.n	8016c5e <_printf_float+0xc2>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	464a      	mov	r2, r9
 8016e00:	4631      	mov	r1, r6
 8016e02:	4628      	mov	r0, r5
 8016e04:	47b8      	blx	r7
 8016e06:	3001      	adds	r0, #1
 8016e08:	f43f af27 	beq.w	8016c5a <_printf_float+0xbe>
 8016e0c:	f108 0801 	add.w	r8, r8, #1
 8016e10:	e7e6      	b.n	8016de0 <_printf_float+0x244>
 8016e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	dc39      	bgt.n	8016e8c <_printf_float+0x2f0>
 8016e18:	4a1b      	ldr	r2, [pc, #108]	; (8016e88 <_printf_float+0x2ec>)
 8016e1a:	2301      	movs	r3, #1
 8016e1c:	4631      	mov	r1, r6
 8016e1e:	4628      	mov	r0, r5
 8016e20:	47b8      	blx	r7
 8016e22:	3001      	adds	r0, #1
 8016e24:	f43f af19 	beq.w	8016c5a <_printf_float+0xbe>
 8016e28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016e2c:	4313      	orrs	r3, r2
 8016e2e:	d102      	bne.n	8016e36 <_printf_float+0x29a>
 8016e30:	6823      	ldr	r3, [r4, #0]
 8016e32:	07d9      	lsls	r1, r3, #31
 8016e34:	d5d8      	bpl.n	8016de8 <_printf_float+0x24c>
 8016e36:	ee18 3a10 	vmov	r3, s16
 8016e3a:	4652      	mov	r2, sl
 8016e3c:	4631      	mov	r1, r6
 8016e3e:	4628      	mov	r0, r5
 8016e40:	47b8      	blx	r7
 8016e42:	3001      	adds	r0, #1
 8016e44:	f43f af09 	beq.w	8016c5a <_printf_float+0xbe>
 8016e48:	f04f 0900 	mov.w	r9, #0
 8016e4c:	f104 0a1a 	add.w	sl, r4, #26
 8016e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e52:	425b      	negs	r3, r3
 8016e54:	454b      	cmp	r3, r9
 8016e56:	dc01      	bgt.n	8016e5c <_printf_float+0x2c0>
 8016e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e5a:	e792      	b.n	8016d82 <_printf_float+0x1e6>
 8016e5c:	2301      	movs	r3, #1
 8016e5e:	4652      	mov	r2, sl
 8016e60:	4631      	mov	r1, r6
 8016e62:	4628      	mov	r0, r5
 8016e64:	47b8      	blx	r7
 8016e66:	3001      	adds	r0, #1
 8016e68:	f43f aef7 	beq.w	8016c5a <_printf_float+0xbe>
 8016e6c:	f109 0901 	add.w	r9, r9, #1
 8016e70:	e7ee      	b.n	8016e50 <_printf_float+0x2b4>
 8016e72:	bf00      	nop
 8016e74:	7fefffff 	.word	0x7fefffff
 8016e78:	0801df00 	.word	0x0801df00
 8016e7c:	0801df04 	.word	0x0801df04
 8016e80:	0801df08 	.word	0x0801df08
 8016e84:	0801df0c 	.word	0x0801df0c
 8016e88:	0801df10 	.word	0x0801df10
 8016e8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016e90:	429a      	cmp	r2, r3
 8016e92:	bfa8      	it	ge
 8016e94:	461a      	movge	r2, r3
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	4691      	mov	r9, r2
 8016e9a:	dc37      	bgt.n	8016f0c <_printf_float+0x370>
 8016e9c:	f04f 0b00 	mov.w	fp, #0
 8016ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016ea4:	f104 021a 	add.w	r2, r4, #26
 8016ea8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016eaa:	9305      	str	r3, [sp, #20]
 8016eac:	eba3 0309 	sub.w	r3, r3, r9
 8016eb0:	455b      	cmp	r3, fp
 8016eb2:	dc33      	bgt.n	8016f1c <_printf_float+0x380>
 8016eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	db3b      	blt.n	8016f34 <_printf_float+0x398>
 8016ebc:	6823      	ldr	r3, [r4, #0]
 8016ebe:	07da      	lsls	r2, r3, #31
 8016ec0:	d438      	bmi.n	8016f34 <_printf_float+0x398>
 8016ec2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016ec6:	eba2 0903 	sub.w	r9, r2, r3
 8016eca:	9b05      	ldr	r3, [sp, #20]
 8016ecc:	1ad2      	subs	r2, r2, r3
 8016ece:	4591      	cmp	r9, r2
 8016ed0:	bfa8      	it	ge
 8016ed2:	4691      	movge	r9, r2
 8016ed4:	f1b9 0f00 	cmp.w	r9, #0
 8016ed8:	dc35      	bgt.n	8016f46 <_printf_float+0x3aa>
 8016eda:	f04f 0800 	mov.w	r8, #0
 8016ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016ee2:	f104 0a1a 	add.w	sl, r4, #26
 8016ee6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016eea:	1a9b      	subs	r3, r3, r2
 8016eec:	eba3 0309 	sub.w	r3, r3, r9
 8016ef0:	4543      	cmp	r3, r8
 8016ef2:	f77f af79 	ble.w	8016de8 <_printf_float+0x24c>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	4652      	mov	r2, sl
 8016efa:	4631      	mov	r1, r6
 8016efc:	4628      	mov	r0, r5
 8016efe:	47b8      	blx	r7
 8016f00:	3001      	adds	r0, #1
 8016f02:	f43f aeaa 	beq.w	8016c5a <_printf_float+0xbe>
 8016f06:	f108 0801 	add.w	r8, r8, #1
 8016f0a:	e7ec      	b.n	8016ee6 <_printf_float+0x34a>
 8016f0c:	4613      	mov	r3, r2
 8016f0e:	4631      	mov	r1, r6
 8016f10:	4642      	mov	r2, r8
 8016f12:	4628      	mov	r0, r5
 8016f14:	47b8      	blx	r7
 8016f16:	3001      	adds	r0, #1
 8016f18:	d1c0      	bne.n	8016e9c <_printf_float+0x300>
 8016f1a:	e69e      	b.n	8016c5a <_printf_float+0xbe>
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	4631      	mov	r1, r6
 8016f20:	4628      	mov	r0, r5
 8016f22:	9205      	str	r2, [sp, #20]
 8016f24:	47b8      	blx	r7
 8016f26:	3001      	adds	r0, #1
 8016f28:	f43f ae97 	beq.w	8016c5a <_printf_float+0xbe>
 8016f2c:	9a05      	ldr	r2, [sp, #20]
 8016f2e:	f10b 0b01 	add.w	fp, fp, #1
 8016f32:	e7b9      	b.n	8016ea8 <_printf_float+0x30c>
 8016f34:	ee18 3a10 	vmov	r3, s16
 8016f38:	4652      	mov	r2, sl
 8016f3a:	4631      	mov	r1, r6
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	47b8      	blx	r7
 8016f40:	3001      	adds	r0, #1
 8016f42:	d1be      	bne.n	8016ec2 <_printf_float+0x326>
 8016f44:	e689      	b.n	8016c5a <_printf_float+0xbe>
 8016f46:	9a05      	ldr	r2, [sp, #20]
 8016f48:	464b      	mov	r3, r9
 8016f4a:	4442      	add	r2, r8
 8016f4c:	4631      	mov	r1, r6
 8016f4e:	4628      	mov	r0, r5
 8016f50:	47b8      	blx	r7
 8016f52:	3001      	adds	r0, #1
 8016f54:	d1c1      	bne.n	8016eda <_printf_float+0x33e>
 8016f56:	e680      	b.n	8016c5a <_printf_float+0xbe>
 8016f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f5a:	2a01      	cmp	r2, #1
 8016f5c:	dc01      	bgt.n	8016f62 <_printf_float+0x3c6>
 8016f5e:	07db      	lsls	r3, r3, #31
 8016f60:	d53a      	bpl.n	8016fd8 <_printf_float+0x43c>
 8016f62:	2301      	movs	r3, #1
 8016f64:	4642      	mov	r2, r8
 8016f66:	4631      	mov	r1, r6
 8016f68:	4628      	mov	r0, r5
 8016f6a:	47b8      	blx	r7
 8016f6c:	3001      	adds	r0, #1
 8016f6e:	f43f ae74 	beq.w	8016c5a <_printf_float+0xbe>
 8016f72:	ee18 3a10 	vmov	r3, s16
 8016f76:	4652      	mov	r2, sl
 8016f78:	4631      	mov	r1, r6
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	47b8      	blx	r7
 8016f7e:	3001      	adds	r0, #1
 8016f80:	f43f ae6b 	beq.w	8016c5a <_printf_float+0xbe>
 8016f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016f88:	2200      	movs	r2, #0
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016f90:	f7e9 fdc2 	bl	8000b18 <__aeabi_dcmpeq>
 8016f94:	b9d8      	cbnz	r0, 8016fce <_printf_float+0x432>
 8016f96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016f9a:	f108 0201 	add.w	r2, r8, #1
 8016f9e:	4631      	mov	r1, r6
 8016fa0:	4628      	mov	r0, r5
 8016fa2:	47b8      	blx	r7
 8016fa4:	3001      	adds	r0, #1
 8016fa6:	d10e      	bne.n	8016fc6 <_printf_float+0x42a>
 8016fa8:	e657      	b.n	8016c5a <_printf_float+0xbe>
 8016faa:	2301      	movs	r3, #1
 8016fac:	4652      	mov	r2, sl
 8016fae:	4631      	mov	r1, r6
 8016fb0:	4628      	mov	r0, r5
 8016fb2:	47b8      	blx	r7
 8016fb4:	3001      	adds	r0, #1
 8016fb6:	f43f ae50 	beq.w	8016c5a <_printf_float+0xbe>
 8016fba:	f108 0801 	add.w	r8, r8, #1
 8016fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fc0:	3b01      	subs	r3, #1
 8016fc2:	4543      	cmp	r3, r8
 8016fc4:	dcf1      	bgt.n	8016faa <_printf_float+0x40e>
 8016fc6:	464b      	mov	r3, r9
 8016fc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016fcc:	e6da      	b.n	8016d84 <_printf_float+0x1e8>
 8016fce:	f04f 0800 	mov.w	r8, #0
 8016fd2:	f104 0a1a 	add.w	sl, r4, #26
 8016fd6:	e7f2      	b.n	8016fbe <_printf_float+0x422>
 8016fd8:	2301      	movs	r3, #1
 8016fda:	4642      	mov	r2, r8
 8016fdc:	e7df      	b.n	8016f9e <_printf_float+0x402>
 8016fde:	2301      	movs	r3, #1
 8016fe0:	464a      	mov	r2, r9
 8016fe2:	4631      	mov	r1, r6
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	47b8      	blx	r7
 8016fe8:	3001      	adds	r0, #1
 8016fea:	f43f ae36 	beq.w	8016c5a <_printf_float+0xbe>
 8016fee:	f108 0801 	add.w	r8, r8, #1
 8016ff2:	68e3      	ldr	r3, [r4, #12]
 8016ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ff6:	1a5b      	subs	r3, r3, r1
 8016ff8:	4543      	cmp	r3, r8
 8016ffa:	dcf0      	bgt.n	8016fde <_printf_float+0x442>
 8016ffc:	e6f8      	b.n	8016df0 <_printf_float+0x254>
 8016ffe:	f04f 0800 	mov.w	r8, #0
 8017002:	f104 0919 	add.w	r9, r4, #25
 8017006:	e7f4      	b.n	8016ff2 <_printf_float+0x456>

08017008 <_printf_common>:
 8017008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801700c:	4616      	mov	r6, r2
 801700e:	4699      	mov	r9, r3
 8017010:	688a      	ldr	r2, [r1, #8]
 8017012:	690b      	ldr	r3, [r1, #16]
 8017014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017018:	4293      	cmp	r3, r2
 801701a:	bfb8      	it	lt
 801701c:	4613      	movlt	r3, r2
 801701e:	6033      	str	r3, [r6, #0]
 8017020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017024:	4607      	mov	r7, r0
 8017026:	460c      	mov	r4, r1
 8017028:	b10a      	cbz	r2, 801702e <_printf_common+0x26>
 801702a:	3301      	adds	r3, #1
 801702c:	6033      	str	r3, [r6, #0]
 801702e:	6823      	ldr	r3, [r4, #0]
 8017030:	0699      	lsls	r1, r3, #26
 8017032:	bf42      	ittt	mi
 8017034:	6833      	ldrmi	r3, [r6, #0]
 8017036:	3302      	addmi	r3, #2
 8017038:	6033      	strmi	r3, [r6, #0]
 801703a:	6825      	ldr	r5, [r4, #0]
 801703c:	f015 0506 	ands.w	r5, r5, #6
 8017040:	d106      	bne.n	8017050 <_printf_common+0x48>
 8017042:	f104 0a19 	add.w	sl, r4, #25
 8017046:	68e3      	ldr	r3, [r4, #12]
 8017048:	6832      	ldr	r2, [r6, #0]
 801704a:	1a9b      	subs	r3, r3, r2
 801704c:	42ab      	cmp	r3, r5
 801704e:	dc26      	bgt.n	801709e <_printf_common+0x96>
 8017050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017054:	1e13      	subs	r3, r2, #0
 8017056:	6822      	ldr	r2, [r4, #0]
 8017058:	bf18      	it	ne
 801705a:	2301      	movne	r3, #1
 801705c:	0692      	lsls	r2, r2, #26
 801705e:	d42b      	bmi.n	80170b8 <_printf_common+0xb0>
 8017060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017064:	4649      	mov	r1, r9
 8017066:	4638      	mov	r0, r7
 8017068:	47c0      	blx	r8
 801706a:	3001      	adds	r0, #1
 801706c:	d01e      	beq.n	80170ac <_printf_common+0xa4>
 801706e:	6823      	ldr	r3, [r4, #0]
 8017070:	6922      	ldr	r2, [r4, #16]
 8017072:	f003 0306 	and.w	r3, r3, #6
 8017076:	2b04      	cmp	r3, #4
 8017078:	bf02      	ittt	eq
 801707a:	68e5      	ldreq	r5, [r4, #12]
 801707c:	6833      	ldreq	r3, [r6, #0]
 801707e:	1aed      	subeq	r5, r5, r3
 8017080:	68a3      	ldr	r3, [r4, #8]
 8017082:	bf0c      	ite	eq
 8017084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017088:	2500      	movne	r5, #0
 801708a:	4293      	cmp	r3, r2
 801708c:	bfc4      	itt	gt
 801708e:	1a9b      	subgt	r3, r3, r2
 8017090:	18ed      	addgt	r5, r5, r3
 8017092:	2600      	movs	r6, #0
 8017094:	341a      	adds	r4, #26
 8017096:	42b5      	cmp	r5, r6
 8017098:	d11a      	bne.n	80170d0 <_printf_common+0xc8>
 801709a:	2000      	movs	r0, #0
 801709c:	e008      	b.n	80170b0 <_printf_common+0xa8>
 801709e:	2301      	movs	r3, #1
 80170a0:	4652      	mov	r2, sl
 80170a2:	4649      	mov	r1, r9
 80170a4:	4638      	mov	r0, r7
 80170a6:	47c0      	blx	r8
 80170a8:	3001      	adds	r0, #1
 80170aa:	d103      	bne.n	80170b4 <_printf_common+0xac>
 80170ac:	f04f 30ff 	mov.w	r0, #4294967295
 80170b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b4:	3501      	adds	r5, #1
 80170b6:	e7c6      	b.n	8017046 <_printf_common+0x3e>
 80170b8:	18e1      	adds	r1, r4, r3
 80170ba:	1c5a      	adds	r2, r3, #1
 80170bc:	2030      	movs	r0, #48	; 0x30
 80170be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170c2:	4422      	add	r2, r4
 80170c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80170cc:	3302      	adds	r3, #2
 80170ce:	e7c7      	b.n	8017060 <_printf_common+0x58>
 80170d0:	2301      	movs	r3, #1
 80170d2:	4622      	mov	r2, r4
 80170d4:	4649      	mov	r1, r9
 80170d6:	4638      	mov	r0, r7
 80170d8:	47c0      	blx	r8
 80170da:	3001      	adds	r0, #1
 80170dc:	d0e6      	beq.n	80170ac <_printf_common+0xa4>
 80170de:	3601      	adds	r6, #1
 80170e0:	e7d9      	b.n	8017096 <_printf_common+0x8e>
	...

080170e4 <_printf_i>:
 80170e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170e8:	7e0f      	ldrb	r7, [r1, #24]
 80170ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80170ec:	2f78      	cmp	r7, #120	; 0x78
 80170ee:	4691      	mov	r9, r2
 80170f0:	4680      	mov	r8, r0
 80170f2:	460c      	mov	r4, r1
 80170f4:	469a      	mov	sl, r3
 80170f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80170fa:	d807      	bhi.n	801710c <_printf_i+0x28>
 80170fc:	2f62      	cmp	r7, #98	; 0x62
 80170fe:	d80a      	bhi.n	8017116 <_printf_i+0x32>
 8017100:	2f00      	cmp	r7, #0
 8017102:	f000 80d4 	beq.w	80172ae <_printf_i+0x1ca>
 8017106:	2f58      	cmp	r7, #88	; 0x58
 8017108:	f000 80c0 	beq.w	801728c <_printf_i+0x1a8>
 801710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017114:	e03a      	b.n	801718c <_printf_i+0xa8>
 8017116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801711a:	2b15      	cmp	r3, #21
 801711c:	d8f6      	bhi.n	801710c <_printf_i+0x28>
 801711e:	a101      	add	r1, pc, #4	; (adr r1, 8017124 <_printf_i+0x40>)
 8017120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017124:	0801717d 	.word	0x0801717d
 8017128:	08017191 	.word	0x08017191
 801712c:	0801710d 	.word	0x0801710d
 8017130:	0801710d 	.word	0x0801710d
 8017134:	0801710d 	.word	0x0801710d
 8017138:	0801710d 	.word	0x0801710d
 801713c:	08017191 	.word	0x08017191
 8017140:	0801710d 	.word	0x0801710d
 8017144:	0801710d 	.word	0x0801710d
 8017148:	0801710d 	.word	0x0801710d
 801714c:	0801710d 	.word	0x0801710d
 8017150:	08017295 	.word	0x08017295
 8017154:	080171bd 	.word	0x080171bd
 8017158:	0801724f 	.word	0x0801724f
 801715c:	0801710d 	.word	0x0801710d
 8017160:	0801710d 	.word	0x0801710d
 8017164:	080172b7 	.word	0x080172b7
 8017168:	0801710d 	.word	0x0801710d
 801716c:	080171bd 	.word	0x080171bd
 8017170:	0801710d 	.word	0x0801710d
 8017174:	0801710d 	.word	0x0801710d
 8017178:	08017257 	.word	0x08017257
 801717c:	682b      	ldr	r3, [r5, #0]
 801717e:	1d1a      	adds	r2, r3, #4
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	602a      	str	r2, [r5, #0]
 8017184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801718c:	2301      	movs	r3, #1
 801718e:	e09f      	b.n	80172d0 <_printf_i+0x1ec>
 8017190:	6820      	ldr	r0, [r4, #0]
 8017192:	682b      	ldr	r3, [r5, #0]
 8017194:	0607      	lsls	r7, r0, #24
 8017196:	f103 0104 	add.w	r1, r3, #4
 801719a:	6029      	str	r1, [r5, #0]
 801719c:	d501      	bpl.n	80171a2 <_printf_i+0xbe>
 801719e:	681e      	ldr	r6, [r3, #0]
 80171a0:	e003      	b.n	80171aa <_printf_i+0xc6>
 80171a2:	0646      	lsls	r6, r0, #25
 80171a4:	d5fb      	bpl.n	801719e <_printf_i+0xba>
 80171a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80171aa:	2e00      	cmp	r6, #0
 80171ac:	da03      	bge.n	80171b6 <_printf_i+0xd2>
 80171ae:	232d      	movs	r3, #45	; 0x2d
 80171b0:	4276      	negs	r6, r6
 80171b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171b6:	485a      	ldr	r0, [pc, #360]	; (8017320 <_printf_i+0x23c>)
 80171b8:	230a      	movs	r3, #10
 80171ba:	e012      	b.n	80171e2 <_printf_i+0xfe>
 80171bc:	682b      	ldr	r3, [r5, #0]
 80171be:	6820      	ldr	r0, [r4, #0]
 80171c0:	1d19      	adds	r1, r3, #4
 80171c2:	6029      	str	r1, [r5, #0]
 80171c4:	0605      	lsls	r5, r0, #24
 80171c6:	d501      	bpl.n	80171cc <_printf_i+0xe8>
 80171c8:	681e      	ldr	r6, [r3, #0]
 80171ca:	e002      	b.n	80171d2 <_printf_i+0xee>
 80171cc:	0641      	lsls	r1, r0, #25
 80171ce:	d5fb      	bpl.n	80171c8 <_printf_i+0xe4>
 80171d0:	881e      	ldrh	r6, [r3, #0]
 80171d2:	4853      	ldr	r0, [pc, #332]	; (8017320 <_printf_i+0x23c>)
 80171d4:	2f6f      	cmp	r7, #111	; 0x6f
 80171d6:	bf0c      	ite	eq
 80171d8:	2308      	moveq	r3, #8
 80171da:	230a      	movne	r3, #10
 80171dc:	2100      	movs	r1, #0
 80171de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80171e2:	6865      	ldr	r5, [r4, #4]
 80171e4:	60a5      	str	r5, [r4, #8]
 80171e6:	2d00      	cmp	r5, #0
 80171e8:	bfa2      	ittt	ge
 80171ea:	6821      	ldrge	r1, [r4, #0]
 80171ec:	f021 0104 	bicge.w	r1, r1, #4
 80171f0:	6021      	strge	r1, [r4, #0]
 80171f2:	b90e      	cbnz	r6, 80171f8 <_printf_i+0x114>
 80171f4:	2d00      	cmp	r5, #0
 80171f6:	d04b      	beq.n	8017290 <_printf_i+0x1ac>
 80171f8:	4615      	mov	r5, r2
 80171fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80171fe:	fb03 6711 	mls	r7, r3, r1, r6
 8017202:	5dc7      	ldrb	r7, [r0, r7]
 8017204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017208:	4637      	mov	r7, r6
 801720a:	42bb      	cmp	r3, r7
 801720c:	460e      	mov	r6, r1
 801720e:	d9f4      	bls.n	80171fa <_printf_i+0x116>
 8017210:	2b08      	cmp	r3, #8
 8017212:	d10b      	bne.n	801722c <_printf_i+0x148>
 8017214:	6823      	ldr	r3, [r4, #0]
 8017216:	07de      	lsls	r6, r3, #31
 8017218:	d508      	bpl.n	801722c <_printf_i+0x148>
 801721a:	6923      	ldr	r3, [r4, #16]
 801721c:	6861      	ldr	r1, [r4, #4]
 801721e:	4299      	cmp	r1, r3
 8017220:	bfde      	ittt	le
 8017222:	2330      	movle	r3, #48	; 0x30
 8017224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017228:	f105 35ff 	addle.w	r5, r5, #4294967295
 801722c:	1b52      	subs	r2, r2, r5
 801722e:	6122      	str	r2, [r4, #16]
 8017230:	f8cd a000 	str.w	sl, [sp]
 8017234:	464b      	mov	r3, r9
 8017236:	aa03      	add	r2, sp, #12
 8017238:	4621      	mov	r1, r4
 801723a:	4640      	mov	r0, r8
 801723c:	f7ff fee4 	bl	8017008 <_printf_common>
 8017240:	3001      	adds	r0, #1
 8017242:	d14a      	bne.n	80172da <_printf_i+0x1f6>
 8017244:	f04f 30ff 	mov.w	r0, #4294967295
 8017248:	b004      	add	sp, #16
 801724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801724e:	6823      	ldr	r3, [r4, #0]
 8017250:	f043 0320 	orr.w	r3, r3, #32
 8017254:	6023      	str	r3, [r4, #0]
 8017256:	4833      	ldr	r0, [pc, #204]	; (8017324 <_printf_i+0x240>)
 8017258:	2778      	movs	r7, #120	; 0x78
 801725a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801725e:	6823      	ldr	r3, [r4, #0]
 8017260:	6829      	ldr	r1, [r5, #0]
 8017262:	061f      	lsls	r7, r3, #24
 8017264:	f851 6b04 	ldr.w	r6, [r1], #4
 8017268:	d402      	bmi.n	8017270 <_printf_i+0x18c>
 801726a:	065f      	lsls	r7, r3, #25
 801726c:	bf48      	it	mi
 801726e:	b2b6      	uxthmi	r6, r6
 8017270:	07df      	lsls	r7, r3, #31
 8017272:	bf48      	it	mi
 8017274:	f043 0320 	orrmi.w	r3, r3, #32
 8017278:	6029      	str	r1, [r5, #0]
 801727a:	bf48      	it	mi
 801727c:	6023      	strmi	r3, [r4, #0]
 801727e:	b91e      	cbnz	r6, 8017288 <_printf_i+0x1a4>
 8017280:	6823      	ldr	r3, [r4, #0]
 8017282:	f023 0320 	bic.w	r3, r3, #32
 8017286:	6023      	str	r3, [r4, #0]
 8017288:	2310      	movs	r3, #16
 801728a:	e7a7      	b.n	80171dc <_printf_i+0xf8>
 801728c:	4824      	ldr	r0, [pc, #144]	; (8017320 <_printf_i+0x23c>)
 801728e:	e7e4      	b.n	801725a <_printf_i+0x176>
 8017290:	4615      	mov	r5, r2
 8017292:	e7bd      	b.n	8017210 <_printf_i+0x12c>
 8017294:	682b      	ldr	r3, [r5, #0]
 8017296:	6826      	ldr	r6, [r4, #0]
 8017298:	6961      	ldr	r1, [r4, #20]
 801729a:	1d18      	adds	r0, r3, #4
 801729c:	6028      	str	r0, [r5, #0]
 801729e:	0635      	lsls	r5, r6, #24
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	d501      	bpl.n	80172a8 <_printf_i+0x1c4>
 80172a4:	6019      	str	r1, [r3, #0]
 80172a6:	e002      	b.n	80172ae <_printf_i+0x1ca>
 80172a8:	0670      	lsls	r0, r6, #25
 80172aa:	d5fb      	bpl.n	80172a4 <_printf_i+0x1c0>
 80172ac:	8019      	strh	r1, [r3, #0]
 80172ae:	2300      	movs	r3, #0
 80172b0:	6123      	str	r3, [r4, #16]
 80172b2:	4615      	mov	r5, r2
 80172b4:	e7bc      	b.n	8017230 <_printf_i+0x14c>
 80172b6:	682b      	ldr	r3, [r5, #0]
 80172b8:	1d1a      	adds	r2, r3, #4
 80172ba:	602a      	str	r2, [r5, #0]
 80172bc:	681d      	ldr	r5, [r3, #0]
 80172be:	6862      	ldr	r2, [r4, #4]
 80172c0:	2100      	movs	r1, #0
 80172c2:	4628      	mov	r0, r5
 80172c4:	f7e8 ffac 	bl	8000220 <memchr>
 80172c8:	b108      	cbz	r0, 80172ce <_printf_i+0x1ea>
 80172ca:	1b40      	subs	r0, r0, r5
 80172cc:	6060      	str	r0, [r4, #4]
 80172ce:	6863      	ldr	r3, [r4, #4]
 80172d0:	6123      	str	r3, [r4, #16]
 80172d2:	2300      	movs	r3, #0
 80172d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172d8:	e7aa      	b.n	8017230 <_printf_i+0x14c>
 80172da:	6923      	ldr	r3, [r4, #16]
 80172dc:	462a      	mov	r2, r5
 80172de:	4649      	mov	r1, r9
 80172e0:	4640      	mov	r0, r8
 80172e2:	47d0      	blx	sl
 80172e4:	3001      	adds	r0, #1
 80172e6:	d0ad      	beq.n	8017244 <_printf_i+0x160>
 80172e8:	6823      	ldr	r3, [r4, #0]
 80172ea:	079b      	lsls	r3, r3, #30
 80172ec:	d413      	bmi.n	8017316 <_printf_i+0x232>
 80172ee:	68e0      	ldr	r0, [r4, #12]
 80172f0:	9b03      	ldr	r3, [sp, #12]
 80172f2:	4298      	cmp	r0, r3
 80172f4:	bfb8      	it	lt
 80172f6:	4618      	movlt	r0, r3
 80172f8:	e7a6      	b.n	8017248 <_printf_i+0x164>
 80172fa:	2301      	movs	r3, #1
 80172fc:	4632      	mov	r2, r6
 80172fe:	4649      	mov	r1, r9
 8017300:	4640      	mov	r0, r8
 8017302:	47d0      	blx	sl
 8017304:	3001      	adds	r0, #1
 8017306:	d09d      	beq.n	8017244 <_printf_i+0x160>
 8017308:	3501      	adds	r5, #1
 801730a:	68e3      	ldr	r3, [r4, #12]
 801730c:	9903      	ldr	r1, [sp, #12]
 801730e:	1a5b      	subs	r3, r3, r1
 8017310:	42ab      	cmp	r3, r5
 8017312:	dcf2      	bgt.n	80172fa <_printf_i+0x216>
 8017314:	e7eb      	b.n	80172ee <_printf_i+0x20a>
 8017316:	2500      	movs	r5, #0
 8017318:	f104 0619 	add.w	r6, r4, #25
 801731c:	e7f5      	b.n	801730a <_printf_i+0x226>
 801731e:	bf00      	nop
 8017320:	0801df12 	.word	0x0801df12
 8017324:	0801df23 	.word	0x0801df23

08017328 <_scanf_float>:
 8017328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801732c:	b087      	sub	sp, #28
 801732e:	4617      	mov	r7, r2
 8017330:	9303      	str	r3, [sp, #12]
 8017332:	688b      	ldr	r3, [r1, #8]
 8017334:	1e5a      	subs	r2, r3, #1
 8017336:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801733a:	bf83      	ittte	hi
 801733c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017340:	195b      	addhi	r3, r3, r5
 8017342:	9302      	strhi	r3, [sp, #8]
 8017344:	2300      	movls	r3, #0
 8017346:	bf86      	itte	hi
 8017348:	f240 135d 	movwhi	r3, #349	; 0x15d
 801734c:	608b      	strhi	r3, [r1, #8]
 801734e:	9302      	strls	r3, [sp, #8]
 8017350:	680b      	ldr	r3, [r1, #0]
 8017352:	468b      	mov	fp, r1
 8017354:	2500      	movs	r5, #0
 8017356:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801735a:	f84b 3b1c 	str.w	r3, [fp], #28
 801735e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017362:	4680      	mov	r8, r0
 8017364:	460c      	mov	r4, r1
 8017366:	465e      	mov	r6, fp
 8017368:	46aa      	mov	sl, r5
 801736a:	46a9      	mov	r9, r5
 801736c:	9501      	str	r5, [sp, #4]
 801736e:	68a2      	ldr	r2, [r4, #8]
 8017370:	b152      	cbz	r2, 8017388 <_scanf_float+0x60>
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	2b4e      	cmp	r3, #78	; 0x4e
 8017378:	d864      	bhi.n	8017444 <_scanf_float+0x11c>
 801737a:	2b40      	cmp	r3, #64	; 0x40
 801737c:	d83c      	bhi.n	80173f8 <_scanf_float+0xd0>
 801737e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017382:	b2c8      	uxtb	r0, r1
 8017384:	280e      	cmp	r0, #14
 8017386:	d93a      	bls.n	80173fe <_scanf_float+0xd6>
 8017388:	f1b9 0f00 	cmp.w	r9, #0
 801738c:	d003      	beq.n	8017396 <_scanf_float+0x6e>
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017394:	6023      	str	r3, [r4, #0]
 8017396:	f10a 3aff 	add.w	sl, sl, #4294967295
 801739a:	f1ba 0f01 	cmp.w	sl, #1
 801739e:	f200 8113 	bhi.w	80175c8 <_scanf_float+0x2a0>
 80173a2:	455e      	cmp	r6, fp
 80173a4:	f200 8105 	bhi.w	80175b2 <_scanf_float+0x28a>
 80173a8:	2501      	movs	r5, #1
 80173aa:	4628      	mov	r0, r5
 80173ac:	b007      	add	sp, #28
 80173ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80173b6:	2a0d      	cmp	r2, #13
 80173b8:	d8e6      	bhi.n	8017388 <_scanf_float+0x60>
 80173ba:	a101      	add	r1, pc, #4	; (adr r1, 80173c0 <_scanf_float+0x98>)
 80173bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80173c0:	080174ff 	.word	0x080174ff
 80173c4:	08017389 	.word	0x08017389
 80173c8:	08017389 	.word	0x08017389
 80173cc:	08017389 	.word	0x08017389
 80173d0:	0801755f 	.word	0x0801755f
 80173d4:	08017537 	.word	0x08017537
 80173d8:	08017389 	.word	0x08017389
 80173dc:	08017389 	.word	0x08017389
 80173e0:	0801750d 	.word	0x0801750d
 80173e4:	08017389 	.word	0x08017389
 80173e8:	08017389 	.word	0x08017389
 80173ec:	08017389 	.word	0x08017389
 80173f0:	08017389 	.word	0x08017389
 80173f4:	080174c5 	.word	0x080174c5
 80173f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80173fc:	e7db      	b.n	80173b6 <_scanf_float+0x8e>
 80173fe:	290e      	cmp	r1, #14
 8017400:	d8c2      	bhi.n	8017388 <_scanf_float+0x60>
 8017402:	a001      	add	r0, pc, #4	; (adr r0, 8017408 <_scanf_float+0xe0>)
 8017404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017408:	080174b7 	.word	0x080174b7
 801740c:	08017389 	.word	0x08017389
 8017410:	080174b7 	.word	0x080174b7
 8017414:	0801754b 	.word	0x0801754b
 8017418:	08017389 	.word	0x08017389
 801741c:	08017465 	.word	0x08017465
 8017420:	080174a1 	.word	0x080174a1
 8017424:	080174a1 	.word	0x080174a1
 8017428:	080174a1 	.word	0x080174a1
 801742c:	080174a1 	.word	0x080174a1
 8017430:	080174a1 	.word	0x080174a1
 8017434:	080174a1 	.word	0x080174a1
 8017438:	080174a1 	.word	0x080174a1
 801743c:	080174a1 	.word	0x080174a1
 8017440:	080174a1 	.word	0x080174a1
 8017444:	2b6e      	cmp	r3, #110	; 0x6e
 8017446:	d809      	bhi.n	801745c <_scanf_float+0x134>
 8017448:	2b60      	cmp	r3, #96	; 0x60
 801744a:	d8b2      	bhi.n	80173b2 <_scanf_float+0x8a>
 801744c:	2b54      	cmp	r3, #84	; 0x54
 801744e:	d077      	beq.n	8017540 <_scanf_float+0x218>
 8017450:	2b59      	cmp	r3, #89	; 0x59
 8017452:	d199      	bne.n	8017388 <_scanf_float+0x60>
 8017454:	2d07      	cmp	r5, #7
 8017456:	d197      	bne.n	8017388 <_scanf_float+0x60>
 8017458:	2508      	movs	r5, #8
 801745a:	e029      	b.n	80174b0 <_scanf_float+0x188>
 801745c:	2b74      	cmp	r3, #116	; 0x74
 801745e:	d06f      	beq.n	8017540 <_scanf_float+0x218>
 8017460:	2b79      	cmp	r3, #121	; 0x79
 8017462:	e7f6      	b.n	8017452 <_scanf_float+0x12a>
 8017464:	6821      	ldr	r1, [r4, #0]
 8017466:	05c8      	lsls	r0, r1, #23
 8017468:	d51a      	bpl.n	80174a0 <_scanf_float+0x178>
 801746a:	9b02      	ldr	r3, [sp, #8]
 801746c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017470:	6021      	str	r1, [r4, #0]
 8017472:	f109 0901 	add.w	r9, r9, #1
 8017476:	b11b      	cbz	r3, 8017480 <_scanf_float+0x158>
 8017478:	3b01      	subs	r3, #1
 801747a:	3201      	adds	r2, #1
 801747c:	9302      	str	r3, [sp, #8]
 801747e:	60a2      	str	r2, [r4, #8]
 8017480:	68a3      	ldr	r3, [r4, #8]
 8017482:	3b01      	subs	r3, #1
 8017484:	60a3      	str	r3, [r4, #8]
 8017486:	6923      	ldr	r3, [r4, #16]
 8017488:	3301      	adds	r3, #1
 801748a:	6123      	str	r3, [r4, #16]
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	3b01      	subs	r3, #1
 8017490:	2b00      	cmp	r3, #0
 8017492:	607b      	str	r3, [r7, #4]
 8017494:	f340 8084 	ble.w	80175a0 <_scanf_float+0x278>
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	3301      	adds	r3, #1
 801749c:	603b      	str	r3, [r7, #0]
 801749e:	e766      	b.n	801736e <_scanf_float+0x46>
 80174a0:	eb1a 0f05 	cmn.w	sl, r5
 80174a4:	f47f af70 	bne.w	8017388 <_scanf_float+0x60>
 80174a8:	6822      	ldr	r2, [r4, #0]
 80174aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80174ae:	6022      	str	r2, [r4, #0]
 80174b0:	f806 3b01 	strb.w	r3, [r6], #1
 80174b4:	e7e4      	b.n	8017480 <_scanf_float+0x158>
 80174b6:	6822      	ldr	r2, [r4, #0]
 80174b8:	0610      	lsls	r0, r2, #24
 80174ba:	f57f af65 	bpl.w	8017388 <_scanf_float+0x60>
 80174be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80174c2:	e7f4      	b.n	80174ae <_scanf_float+0x186>
 80174c4:	f1ba 0f00 	cmp.w	sl, #0
 80174c8:	d10e      	bne.n	80174e8 <_scanf_float+0x1c0>
 80174ca:	f1b9 0f00 	cmp.w	r9, #0
 80174ce:	d10e      	bne.n	80174ee <_scanf_float+0x1c6>
 80174d0:	6822      	ldr	r2, [r4, #0]
 80174d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80174d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80174da:	d108      	bne.n	80174ee <_scanf_float+0x1c6>
 80174dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80174e0:	6022      	str	r2, [r4, #0]
 80174e2:	f04f 0a01 	mov.w	sl, #1
 80174e6:	e7e3      	b.n	80174b0 <_scanf_float+0x188>
 80174e8:	f1ba 0f02 	cmp.w	sl, #2
 80174ec:	d055      	beq.n	801759a <_scanf_float+0x272>
 80174ee:	2d01      	cmp	r5, #1
 80174f0:	d002      	beq.n	80174f8 <_scanf_float+0x1d0>
 80174f2:	2d04      	cmp	r5, #4
 80174f4:	f47f af48 	bne.w	8017388 <_scanf_float+0x60>
 80174f8:	3501      	adds	r5, #1
 80174fa:	b2ed      	uxtb	r5, r5
 80174fc:	e7d8      	b.n	80174b0 <_scanf_float+0x188>
 80174fe:	f1ba 0f01 	cmp.w	sl, #1
 8017502:	f47f af41 	bne.w	8017388 <_scanf_float+0x60>
 8017506:	f04f 0a02 	mov.w	sl, #2
 801750a:	e7d1      	b.n	80174b0 <_scanf_float+0x188>
 801750c:	b97d      	cbnz	r5, 801752e <_scanf_float+0x206>
 801750e:	f1b9 0f00 	cmp.w	r9, #0
 8017512:	f47f af3c 	bne.w	801738e <_scanf_float+0x66>
 8017516:	6822      	ldr	r2, [r4, #0]
 8017518:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801751c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017520:	f47f af39 	bne.w	8017396 <_scanf_float+0x6e>
 8017524:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017528:	6022      	str	r2, [r4, #0]
 801752a:	2501      	movs	r5, #1
 801752c:	e7c0      	b.n	80174b0 <_scanf_float+0x188>
 801752e:	2d03      	cmp	r5, #3
 8017530:	d0e2      	beq.n	80174f8 <_scanf_float+0x1d0>
 8017532:	2d05      	cmp	r5, #5
 8017534:	e7de      	b.n	80174f4 <_scanf_float+0x1cc>
 8017536:	2d02      	cmp	r5, #2
 8017538:	f47f af26 	bne.w	8017388 <_scanf_float+0x60>
 801753c:	2503      	movs	r5, #3
 801753e:	e7b7      	b.n	80174b0 <_scanf_float+0x188>
 8017540:	2d06      	cmp	r5, #6
 8017542:	f47f af21 	bne.w	8017388 <_scanf_float+0x60>
 8017546:	2507      	movs	r5, #7
 8017548:	e7b2      	b.n	80174b0 <_scanf_float+0x188>
 801754a:	6822      	ldr	r2, [r4, #0]
 801754c:	0591      	lsls	r1, r2, #22
 801754e:	f57f af1b 	bpl.w	8017388 <_scanf_float+0x60>
 8017552:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017556:	6022      	str	r2, [r4, #0]
 8017558:	f8cd 9004 	str.w	r9, [sp, #4]
 801755c:	e7a8      	b.n	80174b0 <_scanf_float+0x188>
 801755e:	6822      	ldr	r2, [r4, #0]
 8017560:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017564:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017568:	d006      	beq.n	8017578 <_scanf_float+0x250>
 801756a:	0550      	lsls	r0, r2, #21
 801756c:	f57f af0c 	bpl.w	8017388 <_scanf_float+0x60>
 8017570:	f1b9 0f00 	cmp.w	r9, #0
 8017574:	f43f af0f 	beq.w	8017396 <_scanf_float+0x6e>
 8017578:	0591      	lsls	r1, r2, #22
 801757a:	bf58      	it	pl
 801757c:	9901      	ldrpl	r1, [sp, #4]
 801757e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017582:	bf58      	it	pl
 8017584:	eba9 0101 	subpl.w	r1, r9, r1
 8017588:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801758c:	bf58      	it	pl
 801758e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017592:	6022      	str	r2, [r4, #0]
 8017594:	f04f 0900 	mov.w	r9, #0
 8017598:	e78a      	b.n	80174b0 <_scanf_float+0x188>
 801759a:	f04f 0a03 	mov.w	sl, #3
 801759e:	e787      	b.n	80174b0 <_scanf_float+0x188>
 80175a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80175a4:	4639      	mov	r1, r7
 80175a6:	4640      	mov	r0, r8
 80175a8:	4798      	blx	r3
 80175aa:	2800      	cmp	r0, #0
 80175ac:	f43f aedf 	beq.w	801736e <_scanf_float+0x46>
 80175b0:	e6ea      	b.n	8017388 <_scanf_float+0x60>
 80175b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175ba:	463a      	mov	r2, r7
 80175bc:	4640      	mov	r0, r8
 80175be:	4798      	blx	r3
 80175c0:	6923      	ldr	r3, [r4, #16]
 80175c2:	3b01      	subs	r3, #1
 80175c4:	6123      	str	r3, [r4, #16]
 80175c6:	e6ec      	b.n	80173a2 <_scanf_float+0x7a>
 80175c8:	1e6b      	subs	r3, r5, #1
 80175ca:	2b06      	cmp	r3, #6
 80175cc:	d825      	bhi.n	801761a <_scanf_float+0x2f2>
 80175ce:	2d02      	cmp	r5, #2
 80175d0:	d836      	bhi.n	8017640 <_scanf_float+0x318>
 80175d2:	455e      	cmp	r6, fp
 80175d4:	f67f aee8 	bls.w	80173a8 <_scanf_float+0x80>
 80175d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80175e0:	463a      	mov	r2, r7
 80175e2:	4640      	mov	r0, r8
 80175e4:	4798      	blx	r3
 80175e6:	6923      	ldr	r3, [r4, #16]
 80175e8:	3b01      	subs	r3, #1
 80175ea:	6123      	str	r3, [r4, #16]
 80175ec:	e7f1      	b.n	80175d2 <_scanf_float+0x2aa>
 80175ee:	9802      	ldr	r0, [sp, #8]
 80175f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80175f8:	9002      	str	r0, [sp, #8]
 80175fa:	463a      	mov	r2, r7
 80175fc:	4640      	mov	r0, r8
 80175fe:	4798      	blx	r3
 8017600:	6923      	ldr	r3, [r4, #16]
 8017602:	3b01      	subs	r3, #1
 8017604:	6123      	str	r3, [r4, #16]
 8017606:	f10a 3aff 	add.w	sl, sl, #4294967295
 801760a:	fa5f fa8a 	uxtb.w	sl, sl
 801760e:	f1ba 0f02 	cmp.w	sl, #2
 8017612:	d1ec      	bne.n	80175ee <_scanf_float+0x2c6>
 8017614:	3d03      	subs	r5, #3
 8017616:	b2ed      	uxtb	r5, r5
 8017618:	1b76      	subs	r6, r6, r5
 801761a:	6823      	ldr	r3, [r4, #0]
 801761c:	05da      	lsls	r2, r3, #23
 801761e:	d52f      	bpl.n	8017680 <_scanf_float+0x358>
 8017620:	055b      	lsls	r3, r3, #21
 8017622:	d510      	bpl.n	8017646 <_scanf_float+0x31e>
 8017624:	455e      	cmp	r6, fp
 8017626:	f67f aebf 	bls.w	80173a8 <_scanf_float+0x80>
 801762a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801762e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017632:	463a      	mov	r2, r7
 8017634:	4640      	mov	r0, r8
 8017636:	4798      	blx	r3
 8017638:	6923      	ldr	r3, [r4, #16]
 801763a:	3b01      	subs	r3, #1
 801763c:	6123      	str	r3, [r4, #16]
 801763e:	e7f1      	b.n	8017624 <_scanf_float+0x2fc>
 8017640:	46aa      	mov	sl, r5
 8017642:	9602      	str	r6, [sp, #8]
 8017644:	e7df      	b.n	8017606 <_scanf_float+0x2de>
 8017646:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801764a:	6923      	ldr	r3, [r4, #16]
 801764c:	2965      	cmp	r1, #101	; 0x65
 801764e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017652:	f106 35ff 	add.w	r5, r6, #4294967295
 8017656:	6123      	str	r3, [r4, #16]
 8017658:	d00c      	beq.n	8017674 <_scanf_float+0x34c>
 801765a:	2945      	cmp	r1, #69	; 0x45
 801765c:	d00a      	beq.n	8017674 <_scanf_float+0x34c>
 801765e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017662:	463a      	mov	r2, r7
 8017664:	4640      	mov	r0, r8
 8017666:	4798      	blx	r3
 8017668:	6923      	ldr	r3, [r4, #16]
 801766a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801766e:	3b01      	subs	r3, #1
 8017670:	1eb5      	subs	r5, r6, #2
 8017672:	6123      	str	r3, [r4, #16]
 8017674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017678:	463a      	mov	r2, r7
 801767a:	4640      	mov	r0, r8
 801767c:	4798      	blx	r3
 801767e:	462e      	mov	r6, r5
 8017680:	6825      	ldr	r5, [r4, #0]
 8017682:	f015 0510 	ands.w	r5, r5, #16
 8017686:	d158      	bne.n	801773a <_scanf_float+0x412>
 8017688:	7035      	strb	r5, [r6, #0]
 801768a:	6823      	ldr	r3, [r4, #0]
 801768c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017694:	d11c      	bne.n	80176d0 <_scanf_float+0x3a8>
 8017696:	9b01      	ldr	r3, [sp, #4]
 8017698:	454b      	cmp	r3, r9
 801769a:	eba3 0209 	sub.w	r2, r3, r9
 801769e:	d124      	bne.n	80176ea <_scanf_float+0x3c2>
 80176a0:	2200      	movs	r2, #0
 80176a2:	4659      	mov	r1, fp
 80176a4:	4640      	mov	r0, r8
 80176a6:	f002 fc3f 	bl	8019f28 <_strtod_r>
 80176aa:	9b03      	ldr	r3, [sp, #12]
 80176ac:	6821      	ldr	r1, [r4, #0]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f011 0f02 	tst.w	r1, #2
 80176b4:	ec57 6b10 	vmov	r6, r7, d0
 80176b8:	f103 0204 	add.w	r2, r3, #4
 80176bc:	d020      	beq.n	8017700 <_scanf_float+0x3d8>
 80176be:	9903      	ldr	r1, [sp, #12]
 80176c0:	600a      	str	r2, [r1, #0]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	e9c3 6700 	strd	r6, r7, [r3]
 80176c8:	68e3      	ldr	r3, [r4, #12]
 80176ca:	3301      	adds	r3, #1
 80176cc:	60e3      	str	r3, [r4, #12]
 80176ce:	e66c      	b.n	80173aa <_scanf_float+0x82>
 80176d0:	9b04      	ldr	r3, [sp, #16]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d0e4      	beq.n	80176a0 <_scanf_float+0x378>
 80176d6:	9905      	ldr	r1, [sp, #20]
 80176d8:	230a      	movs	r3, #10
 80176da:	462a      	mov	r2, r5
 80176dc:	3101      	adds	r1, #1
 80176de:	4640      	mov	r0, r8
 80176e0:	f002 fcaa 	bl	801a038 <_strtol_r>
 80176e4:	9b04      	ldr	r3, [sp, #16]
 80176e6:	9e05      	ldr	r6, [sp, #20]
 80176e8:	1ac2      	subs	r2, r0, r3
 80176ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80176ee:	429e      	cmp	r6, r3
 80176f0:	bf28      	it	cs
 80176f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80176f6:	4912      	ldr	r1, [pc, #72]	; (8017740 <_scanf_float+0x418>)
 80176f8:	4630      	mov	r0, r6
 80176fa:	f000 f8e7 	bl	80178cc <siprintf>
 80176fe:	e7cf      	b.n	80176a0 <_scanf_float+0x378>
 8017700:	f011 0f04 	tst.w	r1, #4
 8017704:	9903      	ldr	r1, [sp, #12]
 8017706:	600a      	str	r2, [r1, #0]
 8017708:	d1db      	bne.n	80176c2 <_scanf_float+0x39a>
 801770a:	f8d3 8000 	ldr.w	r8, [r3]
 801770e:	ee10 2a10 	vmov	r2, s0
 8017712:	ee10 0a10 	vmov	r0, s0
 8017716:	463b      	mov	r3, r7
 8017718:	4639      	mov	r1, r7
 801771a:	f7e9 fa2f 	bl	8000b7c <__aeabi_dcmpun>
 801771e:	b128      	cbz	r0, 801772c <_scanf_float+0x404>
 8017720:	4808      	ldr	r0, [pc, #32]	; (8017744 <_scanf_float+0x41c>)
 8017722:	f000 f9c5 	bl	8017ab0 <nanf>
 8017726:	ed88 0a00 	vstr	s0, [r8]
 801772a:	e7cd      	b.n	80176c8 <_scanf_float+0x3a0>
 801772c:	4630      	mov	r0, r6
 801772e:	4639      	mov	r1, r7
 8017730:	f7e9 fa82 	bl	8000c38 <__aeabi_d2f>
 8017734:	f8c8 0000 	str.w	r0, [r8]
 8017738:	e7c6      	b.n	80176c8 <_scanf_float+0x3a0>
 801773a:	2500      	movs	r5, #0
 801773c:	e635      	b.n	80173aa <_scanf_float+0x82>
 801773e:	bf00      	nop
 8017740:	0801df34 	.word	0x0801df34
 8017744:	0801e2c5 	.word	0x0801e2c5

08017748 <std>:
 8017748:	2300      	movs	r3, #0
 801774a:	b510      	push	{r4, lr}
 801774c:	4604      	mov	r4, r0
 801774e:	e9c0 3300 	strd	r3, r3, [r0]
 8017752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017756:	6083      	str	r3, [r0, #8]
 8017758:	8181      	strh	r1, [r0, #12]
 801775a:	6643      	str	r3, [r0, #100]	; 0x64
 801775c:	81c2      	strh	r2, [r0, #14]
 801775e:	6183      	str	r3, [r0, #24]
 8017760:	4619      	mov	r1, r3
 8017762:	2208      	movs	r2, #8
 8017764:	305c      	adds	r0, #92	; 0x5c
 8017766:	f000 f914 	bl	8017992 <memset>
 801776a:	4b0d      	ldr	r3, [pc, #52]	; (80177a0 <std+0x58>)
 801776c:	6263      	str	r3, [r4, #36]	; 0x24
 801776e:	4b0d      	ldr	r3, [pc, #52]	; (80177a4 <std+0x5c>)
 8017770:	62a3      	str	r3, [r4, #40]	; 0x28
 8017772:	4b0d      	ldr	r3, [pc, #52]	; (80177a8 <std+0x60>)
 8017774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017776:	4b0d      	ldr	r3, [pc, #52]	; (80177ac <std+0x64>)
 8017778:	6323      	str	r3, [r4, #48]	; 0x30
 801777a:	4b0d      	ldr	r3, [pc, #52]	; (80177b0 <std+0x68>)
 801777c:	6224      	str	r4, [r4, #32]
 801777e:	429c      	cmp	r4, r3
 8017780:	d006      	beq.n	8017790 <std+0x48>
 8017782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017786:	4294      	cmp	r4, r2
 8017788:	d002      	beq.n	8017790 <std+0x48>
 801778a:	33d0      	adds	r3, #208	; 0xd0
 801778c:	429c      	cmp	r4, r3
 801778e:	d105      	bne.n	801779c <std+0x54>
 8017790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017798:	f000 b978 	b.w	8017a8c <__retarget_lock_init_recursive>
 801779c:	bd10      	pop	{r4, pc}
 801779e:	bf00      	nop
 80177a0:	0801790d 	.word	0x0801790d
 80177a4:	0801792f 	.word	0x0801792f
 80177a8:	08017967 	.word	0x08017967
 80177ac:	0801798b 	.word	0x0801798b
 80177b0:	200035dc 	.word	0x200035dc

080177b4 <stdio_exit_handler>:
 80177b4:	4a02      	ldr	r2, [pc, #8]	; (80177c0 <stdio_exit_handler+0xc>)
 80177b6:	4903      	ldr	r1, [pc, #12]	; (80177c4 <stdio_exit_handler+0x10>)
 80177b8:	4803      	ldr	r0, [pc, #12]	; (80177c8 <stdio_exit_handler+0x14>)
 80177ba:	f000 b869 	b.w	8017890 <_fwalk_sglue>
 80177be:	bf00      	nop
 80177c0:	20000394 	.word	0x20000394
 80177c4:	0801a3f9 	.word	0x0801a3f9
 80177c8:	200003a0 	.word	0x200003a0

080177cc <cleanup_stdio>:
 80177cc:	6841      	ldr	r1, [r0, #4]
 80177ce:	4b0c      	ldr	r3, [pc, #48]	; (8017800 <cleanup_stdio+0x34>)
 80177d0:	4299      	cmp	r1, r3
 80177d2:	b510      	push	{r4, lr}
 80177d4:	4604      	mov	r4, r0
 80177d6:	d001      	beq.n	80177dc <cleanup_stdio+0x10>
 80177d8:	f002 fe0e 	bl	801a3f8 <_fflush_r>
 80177dc:	68a1      	ldr	r1, [r4, #8]
 80177de:	4b09      	ldr	r3, [pc, #36]	; (8017804 <cleanup_stdio+0x38>)
 80177e0:	4299      	cmp	r1, r3
 80177e2:	d002      	beq.n	80177ea <cleanup_stdio+0x1e>
 80177e4:	4620      	mov	r0, r4
 80177e6:	f002 fe07 	bl	801a3f8 <_fflush_r>
 80177ea:	68e1      	ldr	r1, [r4, #12]
 80177ec:	4b06      	ldr	r3, [pc, #24]	; (8017808 <cleanup_stdio+0x3c>)
 80177ee:	4299      	cmp	r1, r3
 80177f0:	d004      	beq.n	80177fc <cleanup_stdio+0x30>
 80177f2:	4620      	mov	r0, r4
 80177f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f8:	f002 bdfe 	b.w	801a3f8 <_fflush_r>
 80177fc:	bd10      	pop	{r4, pc}
 80177fe:	bf00      	nop
 8017800:	200035dc 	.word	0x200035dc
 8017804:	20003644 	.word	0x20003644
 8017808:	200036ac 	.word	0x200036ac

0801780c <global_stdio_init.part.0>:
 801780c:	b510      	push	{r4, lr}
 801780e:	4b0b      	ldr	r3, [pc, #44]	; (801783c <global_stdio_init.part.0+0x30>)
 8017810:	4c0b      	ldr	r4, [pc, #44]	; (8017840 <global_stdio_init.part.0+0x34>)
 8017812:	4a0c      	ldr	r2, [pc, #48]	; (8017844 <global_stdio_init.part.0+0x38>)
 8017814:	601a      	str	r2, [r3, #0]
 8017816:	4620      	mov	r0, r4
 8017818:	2200      	movs	r2, #0
 801781a:	2104      	movs	r1, #4
 801781c:	f7ff ff94 	bl	8017748 <std>
 8017820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017824:	2201      	movs	r2, #1
 8017826:	2109      	movs	r1, #9
 8017828:	f7ff ff8e 	bl	8017748 <std>
 801782c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017830:	2202      	movs	r2, #2
 8017832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017836:	2112      	movs	r1, #18
 8017838:	f7ff bf86 	b.w	8017748 <std>
 801783c:	20003714 	.word	0x20003714
 8017840:	200035dc 	.word	0x200035dc
 8017844:	080177b5 	.word	0x080177b5

08017848 <__sfp_lock_acquire>:
 8017848:	4801      	ldr	r0, [pc, #4]	; (8017850 <__sfp_lock_acquire+0x8>)
 801784a:	f000 b920 	b.w	8017a8e <__retarget_lock_acquire_recursive>
 801784e:	bf00      	nop
 8017850:	2000371d 	.word	0x2000371d

08017854 <__sfp_lock_release>:
 8017854:	4801      	ldr	r0, [pc, #4]	; (801785c <__sfp_lock_release+0x8>)
 8017856:	f000 b91b 	b.w	8017a90 <__retarget_lock_release_recursive>
 801785a:	bf00      	nop
 801785c:	2000371d 	.word	0x2000371d

08017860 <__sinit>:
 8017860:	b510      	push	{r4, lr}
 8017862:	4604      	mov	r4, r0
 8017864:	f7ff fff0 	bl	8017848 <__sfp_lock_acquire>
 8017868:	6a23      	ldr	r3, [r4, #32]
 801786a:	b11b      	cbz	r3, 8017874 <__sinit+0x14>
 801786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017870:	f7ff bff0 	b.w	8017854 <__sfp_lock_release>
 8017874:	4b04      	ldr	r3, [pc, #16]	; (8017888 <__sinit+0x28>)
 8017876:	6223      	str	r3, [r4, #32]
 8017878:	4b04      	ldr	r3, [pc, #16]	; (801788c <__sinit+0x2c>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1f5      	bne.n	801786c <__sinit+0xc>
 8017880:	f7ff ffc4 	bl	801780c <global_stdio_init.part.0>
 8017884:	e7f2      	b.n	801786c <__sinit+0xc>
 8017886:	bf00      	nop
 8017888:	080177cd 	.word	0x080177cd
 801788c:	20003714 	.word	0x20003714

08017890 <_fwalk_sglue>:
 8017890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017894:	4607      	mov	r7, r0
 8017896:	4688      	mov	r8, r1
 8017898:	4614      	mov	r4, r2
 801789a:	2600      	movs	r6, #0
 801789c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80178a0:	f1b9 0901 	subs.w	r9, r9, #1
 80178a4:	d505      	bpl.n	80178b2 <_fwalk_sglue+0x22>
 80178a6:	6824      	ldr	r4, [r4, #0]
 80178a8:	2c00      	cmp	r4, #0
 80178aa:	d1f7      	bne.n	801789c <_fwalk_sglue+0xc>
 80178ac:	4630      	mov	r0, r6
 80178ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178b2:	89ab      	ldrh	r3, [r5, #12]
 80178b4:	2b01      	cmp	r3, #1
 80178b6:	d907      	bls.n	80178c8 <_fwalk_sglue+0x38>
 80178b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178bc:	3301      	adds	r3, #1
 80178be:	d003      	beq.n	80178c8 <_fwalk_sglue+0x38>
 80178c0:	4629      	mov	r1, r5
 80178c2:	4638      	mov	r0, r7
 80178c4:	47c0      	blx	r8
 80178c6:	4306      	orrs	r6, r0
 80178c8:	3568      	adds	r5, #104	; 0x68
 80178ca:	e7e9      	b.n	80178a0 <_fwalk_sglue+0x10>

080178cc <siprintf>:
 80178cc:	b40e      	push	{r1, r2, r3}
 80178ce:	b500      	push	{lr}
 80178d0:	b09c      	sub	sp, #112	; 0x70
 80178d2:	ab1d      	add	r3, sp, #116	; 0x74
 80178d4:	9002      	str	r0, [sp, #8]
 80178d6:	9006      	str	r0, [sp, #24]
 80178d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178dc:	4809      	ldr	r0, [pc, #36]	; (8017904 <siprintf+0x38>)
 80178de:	9107      	str	r1, [sp, #28]
 80178e0:	9104      	str	r1, [sp, #16]
 80178e2:	4909      	ldr	r1, [pc, #36]	; (8017908 <siprintf+0x3c>)
 80178e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80178e8:	9105      	str	r1, [sp, #20]
 80178ea:	6800      	ldr	r0, [r0, #0]
 80178ec:	9301      	str	r3, [sp, #4]
 80178ee:	a902      	add	r1, sp, #8
 80178f0:	f002 fbfe 	bl	801a0f0 <_svfiprintf_r>
 80178f4:	9b02      	ldr	r3, [sp, #8]
 80178f6:	2200      	movs	r2, #0
 80178f8:	701a      	strb	r2, [r3, #0]
 80178fa:	b01c      	add	sp, #112	; 0x70
 80178fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017900:	b003      	add	sp, #12
 8017902:	4770      	bx	lr
 8017904:	200003ec 	.word	0x200003ec
 8017908:	ffff0208 	.word	0xffff0208

0801790c <__sread>:
 801790c:	b510      	push	{r4, lr}
 801790e:	460c      	mov	r4, r1
 8017910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017914:	f000 f86c 	bl	80179f0 <_read_r>
 8017918:	2800      	cmp	r0, #0
 801791a:	bfab      	itete	ge
 801791c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801791e:	89a3      	ldrhlt	r3, [r4, #12]
 8017920:	181b      	addge	r3, r3, r0
 8017922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017926:	bfac      	ite	ge
 8017928:	6563      	strge	r3, [r4, #84]	; 0x54
 801792a:	81a3      	strhlt	r3, [r4, #12]
 801792c:	bd10      	pop	{r4, pc}

0801792e <__swrite>:
 801792e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017932:	461f      	mov	r7, r3
 8017934:	898b      	ldrh	r3, [r1, #12]
 8017936:	05db      	lsls	r3, r3, #23
 8017938:	4605      	mov	r5, r0
 801793a:	460c      	mov	r4, r1
 801793c:	4616      	mov	r6, r2
 801793e:	d505      	bpl.n	801794c <__swrite+0x1e>
 8017940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017944:	2302      	movs	r3, #2
 8017946:	2200      	movs	r2, #0
 8017948:	f000 f840 	bl	80179cc <_lseek_r>
 801794c:	89a3      	ldrh	r3, [r4, #12]
 801794e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017956:	81a3      	strh	r3, [r4, #12]
 8017958:	4632      	mov	r2, r6
 801795a:	463b      	mov	r3, r7
 801795c:	4628      	mov	r0, r5
 801795e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017962:	f000 b857 	b.w	8017a14 <_write_r>

08017966 <__sseek>:
 8017966:	b510      	push	{r4, lr}
 8017968:	460c      	mov	r4, r1
 801796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801796e:	f000 f82d 	bl	80179cc <_lseek_r>
 8017972:	1c43      	adds	r3, r0, #1
 8017974:	89a3      	ldrh	r3, [r4, #12]
 8017976:	bf15      	itete	ne
 8017978:	6560      	strne	r0, [r4, #84]	; 0x54
 801797a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801797e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017982:	81a3      	strheq	r3, [r4, #12]
 8017984:	bf18      	it	ne
 8017986:	81a3      	strhne	r3, [r4, #12]
 8017988:	bd10      	pop	{r4, pc}

0801798a <__sclose>:
 801798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801798e:	f000 b80d 	b.w	80179ac <_close_r>

08017992 <memset>:
 8017992:	4402      	add	r2, r0
 8017994:	4603      	mov	r3, r0
 8017996:	4293      	cmp	r3, r2
 8017998:	d100      	bne.n	801799c <memset+0xa>
 801799a:	4770      	bx	lr
 801799c:	f803 1b01 	strb.w	r1, [r3], #1
 80179a0:	e7f9      	b.n	8017996 <memset+0x4>
	...

080179a4 <_localeconv_r>:
 80179a4:	4800      	ldr	r0, [pc, #0]	; (80179a8 <_localeconv_r+0x4>)
 80179a6:	4770      	bx	lr
 80179a8:	200004e0 	.word	0x200004e0

080179ac <_close_r>:
 80179ac:	b538      	push	{r3, r4, r5, lr}
 80179ae:	4d06      	ldr	r5, [pc, #24]	; (80179c8 <_close_r+0x1c>)
 80179b0:	2300      	movs	r3, #0
 80179b2:	4604      	mov	r4, r0
 80179b4:	4608      	mov	r0, r1
 80179b6:	602b      	str	r3, [r5, #0]
 80179b8:	f7ee fa85 	bl	8005ec6 <_close>
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d102      	bne.n	80179c6 <_close_r+0x1a>
 80179c0:	682b      	ldr	r3, [r5, #0]
 80179c2:	b103      	cbz	r3, 80179c6 <_close_r+0x1a>
 80179c4:	6023      	str	r3, [r4, #0]
 80179c6:	bd38      	pop	{r3, r4, r5, pc}
 80179c8:	20003718 	.word	0x20003718

080179cc <_lseek_r>:
 80179cc:	b538      	push	{r3, r4, r5, lr}
 80179ce:	4d07      	ldr	r5, [pc, #28]	; (80179ec <_lseek_r+0x20>)
 80179d0:	4604      	mov	r4, r0
 80179d2:	4608      	mov	r0, r1
 80179d4:	4611      	mov	r1, r2
 80179d6:	2200      	movs	r2, #0
 80179d8:	602a      	str	r2, [r5, #0]
 80179da:	461a      	mov	r2, r3
 80179dc:	f7ee fa9a 	bl	8005f14 <_lseek>
 80179e0:	1c43      	adds	r3, r0, #1
 80179e2:	d102      	bne.n	80179ea <_lseek_r+0x1e>
 80179e4:	682b      	ldr	r3, [r5, #0]
 80179e6:	b103      	cbz	r3, 80179ea <_lseek_r+0x1e>
 80179e8:	6023      	str	r3, [r4, #0]
 80179ea:	bd38      	pop	{r3, r4, r5, pc}
 80179ec:	20003718 	.word	0x20003718

080179f0 <_read_r>:
 80179f0:	b538      	push	{r3, r4, r5, lr}
 80179f2:	4d07      	ldr	r5, [pc, #28]	; (8017a10 <_read_r+0x20>)
 80179f4:	4604      	mov	r4, r0
 80179f6:	4608      	mov	r0, r1
 80179f8:	4611      	mov	r1, r2
 80179fa:	2200      	movs	r2, #0
 80179fc:	602a      	str	r2, [r5, #0]
 80179fe:	461a      	mov	r2, r3
 8017a00:	f7ee fa28 	bl	8005e54 <_read>
 8017a04:	1c43      	adds	r3, r0, #1
 8017a06:	d102      	bne.n	8017a0e <_read_r+0x1e>
 8017a08:	682b      	ldr	r3, [r5, #0]
 8017a0a:	b103      	cbz	r3, 8017a0e <_read_r+0x1e>
 8017a0c:	6023      	str	r3, [r4, #0]
 8017a0e:	bd38      	pop	{r3, r4, r5, pc}
 8017a10:	20003718 	.word	0x20003718

08017a14 <_write_r>:
 8017a14:	b538      	push	{r3, r4, r5, lr}
 8017a16:	4d07      	ldr	r5, [pc, #28]	; (8017a34 <_write_r+0x20>)
 8017a18:	4604      	mov	r4, r0
 8017a1a:	4608      	mov	r0, r1
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	2200      	movs	r2, #0
 8017a20:	602a      	str	r2, [r5, #0]
 8017a22:	461a      	mov	r2, r3
 8017a24:	f7ee fa33 	bl	8005e8e <_write>
 8017a28:	1c43      	adds	r3, r0, #1
 8017a2a:	d102      	bne.n	8017a32 <_write_r+0x1e>
 8017a2c:	682b      	ldr	r3, [r5, #0]
 8017a2e:	b103      	cbz	r3, 8017a32 <_write_r+0x1e>
 8017a30:	6023      	str	r3, [r4, #0]
 8017a32:	bd38      	pop	{r3, r4, r5, pc}
 8017a34:	20003718 	.word	0x20003718

08017a38 <__errno>:
 8017a38:	4b01      	ldr	r3, [pc, #4]	; (8017a40 <__errno+0x8>)
 8017a3a:	6818      	ldr	r0, [r3, #0]
 8017a3c:	4770      	bx	lr
 8017a3e:	bf00      	nop
 8017a40:	200003ec 	.word	0x200003ec

08017a44 <__libc_init_array>:
 8017a44:	b570      	push	{r4, r5, r6, lr}
 8017a46:	4d0d      	ldr	r5, [pc, #52]	; (8017a7c <__libc_init_array+0x38>)
 8017a48:	4c0d      	ldr	r4, [pc, #52]	; (8017a80 <__libc_init_array+0x3c>)
 8017a4a:	1b64      	subs	r4, r4, r5
 8017a4c:	10a4      	asrs	r4, r4, #2
 8017a4e:	2600      	movs	r6, #0
 8017a50:	42a6      	cmp	r6, r4
 8017a52:	d109      	bne.n	8017a68 <__libc_init_array+0x24>
 8017a54:	4d0b      	ldr	r5, [pc, #44]	; (8017a84 <__libc_init_array+0x40>)
 8017a56:	4c0c      	ldr	r4, [pc, #48]	; (8017a88 <__libc_init_array+0x44>)
 8017a58:	f003 fd5a 	bl	801b510 <_init>
 8017a5c:	1b64      	subs	r4, r4, r5
 8017a5e:	10a4      	asrs	r4, r4, #2
 8017a60:	2600      	movs	r6, #0
 8017a62:	42a6      	cmp	r6, r4
 8017a64:	d105      	bne.n	8017a72 <__libc_init_array+0x2e>
 8017a66:	bd70      	pop	{r4, r5, r6, pc}
 8017a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a6c:	4798      	blx	r3
 8017a6e:	3601      	adds	r6, #1
 8017a70:	e7ee      	b.n	8017a50 <__libc_init_array+0xc>
 8017a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8017a76:	4798      	blx	r3
 8017a78:	3601      	adds	r6, #1
 8017a7a:	e7f2      	b.n	8017a62 <__libc_init_array+0x1e>
 8017a7c:	0801e340 	.word	0x0801e340
 8017a80:	0801e340 	.word	0x0801e340
 8017a84:	0801e340 	.word	0x0801e340
 8017a88:	0801e344 	.word	0x0801e344

08017a8c <__retarget_lock_init_recursive>:
 8017a8c:	4770      	bx	lr

08017a8e <__retarget_lock_acquire_recursive>:
 8017a8e:	4770      	bx	lr

08017a90 <__retarget_lock_release_recursive>:
 8017a90:	4770      	bx	lr

08017a92 <memcpy>:
 8017a92:	440a      	add	r2, r1
 8017a94:	4291      	cmp	r1, r2
 8017a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8017a9a:	d100      	bne.n	8017a9e <memcpy+0xc>
 8017a9c:	4770      	bx	lr
 8017a9e:	b510      	push	{r4, lr}
 8017aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017aa8:	4291      	cmp	r1, r2
 8017aaa:	d1f9      	bne.n	8017aa0 <memcpy+0xe>
 8017aac:	bd10      	pop	{r4, pc}
	...

08017ab0 <nanf>:
 8017ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017ab8 <nanf+0x8>
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop
 8017ab8:	7fc00000 	.word	0x7fc00000

08017abc <quorem>:
 8017abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac0:	6903      	ldr	r3, [r0, #16]
 8017ac2:	690c      	ldr	r4, [r1, #16]
 8017ac4:	42a3      	cmp	r3, r4
 8017ac6:	4607      	mov	r7, r0
 8017ac8:	db7e      	blt.n	8017bc8 <quorem+0x10c>
 8017aca:	3c01      	subs	r4, #1
 8017acc:	f101 0814 	add.w	r8, r1, #20
 8017ad0:	f100 0514 	add.w	r5, r0, #20
 8017ad4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ad8:	9301      	str	r3, [sp, #4]
 8017ada:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017ade:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017aea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017aee:	fbb2 f6f3 	udiv	r6, r2, r3
 8017af2:	d331      	bcc.n	8017b58 <quorem+0x9c>
 8017af4:	f04f 0e00 	mov.w	lr, #0
 8017af8:	4640      	mov	r0, r8
 8017afa:	46ac      	mov	ip, r5
 8017afc:	46f2      	mov	sl, lr
 8017afe:	f850 2b04 	ldr.w	r2, [r0], #4
 8017b02:	b293      	uxth	r3, r2
 8017b04:	fb06 e303 	mla	r3, r6, r3, lr
 8017b08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b0c:	0c1a      	lsrs	r2, r3, #16
 8017b0e:	b29b      	uxth	r3, r3
 8017b10:	ebaa 0303 	sub.w	r3, sl, r3
 8017b14:	f8dc a000 	ldr.w	sl, [ip]
 8017b18:	fa13 f38a 	uxtah	r3, r3, sl
 8017b1c:	fb06 220e 	mla	r2, r6, lr, r2
 8017b20:	9300      	str	r3, [sp, #0]
 8017b22:	9b00      	ldr	r3, [sp, #0]
 8017b24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017b28:	b292      	uxth	r2, r2
 8017b2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017b2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b32:	f8bd 3000 	ldrh.w	r3, [sp]
 8017b36:	4581      	cmp	r9, r0
 8017b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b3c:	f84c 3b04 	str.w	r3, [ip], #4
 8017b40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017b44:	d2db      	bcs.n	8017afe <quorem+0x42>
 8017b46:	f855 300b 	ldr.w	r3, [r5, fp]
 8017b4a:	b92b      	cbnz	r3, 8017b58 <quorem+0x9c>
 8017b4c:	9b01      	ldr	r3, [sp, #4]
 8017b4e:	3b04      	subs	r3, #4
 8017b50:	429d      	cmp	r5, r3
 8017b52:	461a      	mov	r2, r3
 8017b54:	d32c      	bcc.n	8017bb0 <quorem+0xf4>
 8017b56:	613c      	str	r4, [r7, #16]
 8017b58:	4638      	mov	r0, r7
 8017b5a:	f001 f9f1 	bl	8018f40 <__mcmp>
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	db22      	blt.n	8017ba8 <quorem+0xec>
 8017b62:	3601      	adds	r6, #1
 8017b64:	4629      	mov	r1, r5
 8017b66:	2000      	movs	r0, #0
 8017b68:	f858 2b04 	ldr.w	r2, [r8], #4
 8017b6c:	f8d1 c000 	ldr.w	ip, [r1]
 8017b70:	b293      	uxth	r3, r2
 8017b72:	1ac3      	subs	r3, r0, r3
 8017b74:	0c12      	lsrs	r2, r2, #16
 8017b76:	fa13 f38c 	uxtah	r3, r3, ip
 8017b7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017b88:	45c1      	cmp	r9, r8
 8017b8a:	f841 3b04 	str.w	r3, [r1], #4
 8017b8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017b92:	d2e9      	bcs.n	8017b68 <quorem+0xac>
 8017b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017b98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017b9c:	b922      	cbnz	r2, 8017ba8 <quorem+0xec>
 8017b9e:	3b04      	subs	r3, #4
 8017ba0:	429d      	cmp	r5, r3
 8017ba2:	461a      	mov	r2, r3
 8017ba4:	d30a      	bcc.n	8017bbc <quorem+0x100>
 8017ba6:	613c      	str	r4, [r7, #16]
 8017ba8:	4630      	mov	r0, r6
 8017baa:	b003      	add	sp, #12
 8017bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bb0:	6812      	ldr	r2, [r2, #0]
 8017bb2:	3b04      	subs	r3, #4
 8017bb4:	2a00      	cmp	r2, #0
 8017bb6:	d1ce      	bne.n	8017b56 <quorem+0x9a>
 8017bb8:	3c01      	subs	r4, #1
 8017bba:	e7c9      	b.n	8017b50 <quorem+0x94>
 8017bbc:	6812      	ldr	r2, [r2, #0]
 8017bbe:	3b04      	subs	r3, #4
 8017bc0:	2a00      	cmp	r2, #0
 8017bc2:	d1f0      	bne.n	8017ba6 <quorem+0xea>
 8017bc4:	3c01      	subs	r4, #1
 8017bc6:	e7eb      	b.n	8017ba0 <quorem+0xe4>
 8017bc8:	2000      	movs	r0, #0
 8017bca:	e7ee      	b.n	8017baa <quorem+0xee>
 8017bcc:	0000      	movs	r0, r0
	...

08017bd0 <_dtoa_r>:
 8017bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bd4:	ed2d 8b04 	vpush	{d8-d9}
 8017bd8:	69c5      	ldr	r5, [r0, #28]
 8017bda:	b093      	sub	sp, #76	; 0x4c
 8017bdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017be0:	ec57 6b10 	vmov	r6, r7, d0
 8017be4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017be8:	9107      	str	r1, [sp, #28]
 8017bea:	4604      	mov	r4, r0
 8017bec:	920a      	str	r2, [sp, #40]	; 0x28
 8017bee:	930d      	str	r3, [sp, #52]	; 0x34
 8017bf0:	b975      	cbnz	r5, 8017c10 <_dtoa_r+0x40>
 8017bf2:	2010      	movs	r0, #16
 8017bf4:	f000 fe2a 	bl	801884c <malloc>
 8017bf8:	4602      	mov	r2, r0
 8017bfa:	61e0      	str	r0, [r4, #28]
 8017bfc:	b920      	cbnz	r0, 8017c08 <_dtoa_r+0x38>
 8017bfe:	4bae      	ldr	r3, [pc, #696]	; (8017eb8 <_dtoa_r+0x2e8>)
 8017c00:	21ef      	movs	r1, #239	; 0xef
 8017c02:	48ae      	ldr	r0, [pc, #696]	; (8017ebc <_dtoa_r+0x2ec>)
 8017c04:	f002 fc64 	bl	801a4d0 <__assert_func>
 8017c08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017c0c:	6005      	str	r5, [r0, #0]
 8017c0e:	60c5      	str	r5, [r0, #12]
 8017c10:	69e3      	ldr	r3, [r4, #28]
 8017c12:	6819      	ldr	r1, [r3, #0]
 8017c14:	b151      	cbz	r1, 8017c2c <_dtoa_r+0x5c>
 8017c16:	685a      	ldr	r2, [r3, #4]
 8017c18:	604a      	str	r2, [r1, #4]
 8017c1a:	2301      	movs	r3, #1
 8017c1c:	4093      	lsls	r3, r2
 8017c1e:	608b      	str	r3, [r1, #8]
 8017c20:	4620      	mov	r0, r4
 8017c22:	f000 ff07 	bl	8018a34 <_Bfree>
 8017c26:	69e3      	ldr	r3, [r4, #28]
 8017c28:	2200      	movs	r2, #0
 8017c2a:	601a      	str	r2, [r3, #0]
 8017c2c:	1e3b      	subs	r3, r7, #0
 8017c2e:	bfbb      	ittet	lt
 8017c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017c34:	9303      	strlt	r3, [sp, #12]
 8017c36:	2300      	movge	r3, #0
 8017c38:	2201      	movlt	r2, #1
 8017c3a:	bfac      	ite	ge
 8017c3c:	f8c8 3000 	strge.w	r3, [r8]
 8017c40:	f8c8 2000 	strlt.w	r2, [r8]
 8017c44:	4b9e      	ldr	r3, [pc, #632]	; (8017ec0 <_dtoa_r+0x2f0>)
 8017c46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017c4a:	ea33 0308 	bics.w	r3, r3, r8
 8017c4e:	d11b      	bne.n	8017c88 <_dtoa_r+0xb8>
 8017c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017c52:	f242 730f 	movw	r3, #9999	; 0x270f
 8017c56:	6013      	str	r3, [r2, #0]
 8017c58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017c5c:	4333      	orrs	r3, r6
 8017c5e:	f000 8593 	beq.w	8018788 <_dtoa_r+0xbb8>
 8017c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c64:	b963      	cbnz	r3, 8017c80 <_dtoa_r+0xb0>
 8017c66:	4b97      	ldr	r3, [pc, #604]	; (8017ec4 <_dtoa_r+0x2f4>)
 8017c68:	e027      	b.n	8017cba <_dtoa_r+0xea>
 8017c6a:	4b97      	ldr	r3, [pc, #604]	; (8017ec8 <_dtoa_r+0x2f8>)
 8017c6c:	9300      	str	r3, [sp, #0]
 8017c6e:	3308      	adds	r3, #8
 8017c70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017c72:	6013      	str	r3, [r2, #0]
 8017c74:	9800      	ldr	r0, [sp, #0]
 8017c76:	b013      	add	sp, #76	; 0x4c
 8017c78:	ecbd 8b04 	vpop	{d8-d9}
 8017c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c80:	4b90      	ldr	r3, [pc, #576]	; (8017ec4 <_dtoa_r+0x2f4>)
 8017c82:	9300      	str	r3, [sp, #0]
 8017c84:	3303      	adds	r3, #3
 8017c86:	e7f3      	b.n	8017c70 <_dtoa_r+0xa0>
 8017c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	ec51 0b17 	vmov	r0, r1, d7
 8017c92:	eeb0 8a47 	vmov.f32	s16, s14
 8017c96:	eef0 8a67 	vmov.f32	s17, s15
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	f7e8 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 8017ca0:	4681      	mov	r9, r0
 8017ca2:	b160      	cbz	r0, 8017cbe <_dtoa_r+0xee>
 8017ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	6013      	str	r3, [r2, #0]
 8017caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	f000 8568 	beq.w	8018782 <_dtoa_r+0xbb2>
 8017cb2:	4b86      	ldr	r3, [pc, #536]	; (8017ecc <_dtoa_r+0x2fc>)
 8017cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017cb6:	6013      	str	r3, [r2, #0]
 8017cb8:	3b01      	subs	r3, #1
 8017cba:	9300      	str	r3, [sp, #0]
 8017cbc:	e7da      	b.n	8017c74 <_dtoa_r+0xa4>
 8017cbe:	aa10      	add	r2, sp, #64	; 0x40
 8017cc0:	a911      	add	r1, sp, #68	; 0x44
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8017cc8:	eef0 0a68 	vmov.f32	s1, s17
 8017ccc:	f001 fa4e 	bl	801916c <__d2b>
 8017cd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017cd4:	4682      	mov	sl, r0
 8017cd6:	2d00      	cmp	r5, #0
 8017cd8:	d07f      	beq.n	8017dda <_dtoa_r+0x20a>
 8017cda:	ee18 3a90 	vmov	r3, s17
 8017cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017ce6:	ec51 0b18 	vmov	r0, r1, d8
 8017cea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017cf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	4b75      	ldr	r3, [pc, #468]	; (8017ed0 <_dtoa_r+0x300>)
 8017cfc:	f7e8 faec 	bl	80002d8 <__aeabi_dsub>
 8017d00:	a367      	add	r3, pc, #412	; (adr r3, 8017ea0 <_dtoa_r+0x2d0>)
 8017d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d06:	f7e8 fc9f 	bl	8000648 <__aeabi_dmul>
 8017d0a:	a367      	add	r3, pc, #412	; (adr r3, 8017ea8 <_dtoa_r+0x2d8>)
 8017d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d10:	f7e8 fae4 	bl	80002dc <__adddf3>
 8017d14:	4606      	mov	r6, r0
 8017d16:	4628      	mov	r0, r5
 8017d18:	460f      	mov	r7, r1
 8017d1a:	f7e8 fc2b 	bl	8000574 <__aeabi_i2d>
 8017d1e:	a364      	add	r3, pc, #400	; (adr r3, 8017eb0 <_dtoa_r+0x2e0>)
 8017d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d24:	f7e8 fc90 	bl	8000648 <__aeabi_dmul>
 8017d28:	4602      	mov	r2, r0
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	4630      	mov	r0, r6
 8017d2e:	4639      	mov	r1, r7
 8017d30:	f7e8 fad4 	bl	80002dc <__adddf3>
 8017d34:	4606      	mov	r6, r0
 8017d36:	460f      	mov	r7, r1
 8017d38:	f7e8 ff36 	bl	8000ba8 <__aeabi_d2iz>
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	4683      	mov	fp, r0
 8017d40:	2300      	movs	r3, #0
 8017d42:	4630      	mov	r0, r6
 8017d44:	4639      	mov	r1, r7
 8017d46:	f7e8 fef1 	bl	8000b2c <__aeabi_dcmplt>
 8017d4a:	b148      	cbz	r0, 8017d60 <_dtoa_r+0x190>
 8017d4c:	4658      	mov	r0, fp
 8017d4e:	f7e8 fc11 	bl	8000574 <__aeabi_i2d>
 8017d52:	4632      	mov	r2, r6
 8017d54:	463b      	mov	r3, r7
 8017d56:	f7e8 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 8017d5a:	b908      	cbnz	r0, 8017d60 <_dtoa_r+0x190>
 8017d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d60:	f1bb 0f16 	cmp.w	fp, #22
 8017d64:	d857      	bhi.n	8017e16 <_dtoa_r+0x246>
 8017d66:	4b5b      	ldr	r3, [pc, #364]	; (8017ed4 <_dtoa_r+0x304>)
 8017d68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d70:	ec51 0b18 	vmov	r0, r1, d8
 8017d74:	f7e8 feda 	bl	8000b2c <__aeabi_dcmplt>
 8017d78:	2800      	cmp	r0, #0
 8017d7a:	d04e      	beq.n	8017e1a <_dtoa_r+0x24a>
 8017d7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017d80:	2300      	movs	r3, #0
 8017d82:	930c      	str	r3, [sp, #48]	; 0x30
 8017d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d86:	1b5b      	subs	r3, r3, r5
 8017d88:	1e5a      	subs	r2, r3, #1
 8017d8a:	bf45      	ittet	mi
 8017d8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017d90:	9305      	strmi	r3, [sp, #20]
 8017d92:	2300      	movpl	r3, #0
 8017d94:	2300      	movmi	r3, #0
 8017d96:	9206      	str	r2, [sp, #24]
 8017d98:	bf54      	ite	pl
 8017d9a:	9305      	strpl	r3, [sp, #20]
 8017d9c:	9306      	strmi	r3, [sp, #24]
 8017d9e:	f1bb 0f00 	cmp.w	fp, #0
 8017da2:	db3c      	blt.n	8017e1e <_dtoa_r+0x24e>
 8017da4:	9b06      	ldr	r3, [sp, #24]
 8017da6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017daa:	445b      	add	r3, fp
 8017dac:	9306      	str	r3, [sp, #24]
 8017dae:	2300      	movs	r3, #0
 8017db0:	9308      	str	r3, [sp, #32]
 8017db2:	9b07      	ldr	r3, [sp, #28]
 8017db4:	2b09      	cmp	r3, #9
 8017db6:	d868      	bhi.n	8017e8a <_dtoa_r+0x2ba>
 8017db8:	2b05      	cmp	r3, #5
 8017dba:	bfc4      	itt	gt
 8017dbc:	3b04      	subgt	r3, #4
 8017dbe:	9307      	strgt	r3, [sp, #28]
 8017dc0:	9b07      	ldr	r3, [sp, #28]
 8017dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8017dc6:	bfcc      	ite	gt
 8017dc8:	2500      	movgt	r5, #0
 8017dca:	2501      	movle	r5, #1
 8017dcc:	2b03      	cmp	r3, #3
 8017dce:	f200 8085 	bhi.w	8017edc <_dtoa_r+0x30c>
 8017dd2:	e8df f003 	tbb	[pc, r3]
 8017dd6:	3b2e      	.short	0x3b2e
 8017dd8:	5839      	.short	0x5839
 8017dda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017dde:	441d      	add	r5, r3
 8017de0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017de4:	2b20      	cmp	r3, #32
 8017de6:	bfc1      	itttt	gt
 8017de8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017dec:	fa08 f803 	lslgt.w	r8, r8, r3
 8017df0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017df4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017df8:	bfd6      	itet	le
 8017dfa:	f1c3 0320 	rsble	r3, r3, #32
 8017dfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8017e02:	fa06 f003 	lslle.w	r0, r6, r3
 8017e06:	f7e8 fba5 	bl	8000554 <__aeabi_ui2d>
 8017e0a:	2201      	movs	r2, #1
 8017e0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017e10:	3d01      	subs	r5, #1
 8017e12:	920e      	str	r2, [sp, #56]	; 0x38
 8017e14:	e76f      	b.n	8017cf6 <_dtoa_r+0x126>
 8017e16:	2301      	movs	r3, #1
 8017e18:	e7b3      	b.n	8017d82 <_dtoa_r+0x1b2>
 8017e1a:	900c      	str	r0, [sp, #48]	; 0x30
 8017e1c:	e7b2      	b.n	8017d84 <_dtoa_r+0x1b4>
 8017e1e:	9b05      	ldr	r3, [sp, #20]
 8017e20:	eba3 030b 	sub.w	r3, r3, fp
 8017e24:	9305      	str	r3, [sp, #20]
 8017e26:	f1cb 0300 	rsb	r3, fp, #0
 8017e2a:	9308      	str	r3, [sp, #32]
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e30:	e7bf      	b.n	8017db2 <_dtoa_r+0x1e2>
 8017e32:	2300      	movs	r3, #0
 8017e34:	9309      	str	r3, [sp, #36]	; 0x24
 8017e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	dc52      	bgt.n	8017ee2 <_dtoa_r+0x312>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	9301      	str	r3, [sp, #4]
 8017e40:	9304      	str	r3, [sp, #16]
 8017e42:	461a      	mov	r2, r3
 8017e44:	920a      	str	r2, [sp, #40]	; 0x28
 8017e46:	e00b      	b.n	8017e60 <_dtoa_r+0x290>
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e7f3      	b.n	8017e34 <_dtoa_r+0x264>
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e52:	445b      	add	r3, fp
 8017e54:	9301      	str	r3, [sp, #4]
 8017e56:	3301      	adds	r3, #1
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	9304      	str	r3, [sp, #16]
 8017e5c:	bfb8      	it	lt
 8017e5e:	2301      	movlt	r3, #1
 8017e60:	69e0      	ldr	r0, [r4, #28]
 8017e62:	2100      	movs	r1, #0
 8017e64:	2204      	movs	r2, #4
 8017e66:	f102 0614 	add.w	r6, r2, #20
 8017e6a:	429e      	cmp	r6, r3
 8017e6c:	d93d      	bls.n	8017eea <_dtoa_r+0x31a>
 8017e6e:	6041      	str	r1, [r0, #4]
 8017e70:	4620      	mov	r0, r4
 8017e72:	f000 fd9f 	bl	80189b4 <_Balloc>
 8017e76:	9000      	str	r0, [sp, #0]
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d139      	bne.n	8017ef0 <_dtoa_r+0x320>
 8017e7c:	4b16      	ldr	r3, [pc, #88]	; (8017ed8 <_dtoa_r+0x308>)
 8017e7e:	4602      	mov	r2, r0
 8017e80:	f240 11af 	movw	r1, #431	; 0x1af
 8017e84:	e6bd      	b.n	8017c02 <_dtoa_r+0x32>
 8017e86:	2301      	movs	r3, #1
 8017e88:	e7e1      	b.n	8017e4e <_dtoa_r+0x27e>
 8017e8a:	2501      	movs	r5, #1
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	9307      	str	r3, [sp, #28]
 8017e90:	9509      	str	r5, [sp, #36]	; 0x24
 8017e92:	f04f 33ff 	mov.w	r3, #4294967295
 8017e96:	9301      	str	r3, [sp, #4]
 8017e98:	9304      	str	r3, [sp, #16]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	2312      	movs	r3, #18
 8017e9e:	e7d1      	b.n	8017e44 <_dtoa_r+0x274>
 8017ea0:	636f4361 	.word	0x636f4361
 8017ea4:	3fd287a7 	.word	0x3fd287a7
 8017ea8:	8b60c8b3 	.word	0x8b60c8b3
 8017eac:	3fc68a28 	.word	0x3fc68a28
 8017eb0:	509f79fb 	.word	0x509f79fb
 8017eb4:	3fd34413 	.word	0x3fd34413
 8017eb8:	0801df46 	.word	0x0801df46
 8017ebc:	0801df5d 	.word	0x0801df5d
 8017ec0:	7ff00000 	.word	0x7ff00000
 8017ec4:	0801df42 	.word	0x0801df42
 8017ec8:	0801df39 	.word	0x0801df39
 8017ecc:	0801df11 	.word	0x0801df11
 8017ed0:	3ff80000 	.word	0x3ff80000
 8017ed4:	0801e048 	.word	0x0801e048
 8017ed8:	0801dfb5 	.word	0x0801dfb5
 8017edc:	2301      	movs	r3, #1
 8017ede:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee0:	e7d7      	b.n	8017e92 <_dtoa_r+0x2c2>
 8017ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	9304      	str	r3, [sp, #16]
 8017ee8:	e7ba      	b.n	8017e60 <_dtoa_r+0x290>
 8017eea:	3101      	adds	r1, #1
 8017eec:	0052      	lsls	r2, r2, #1
 8017eee:	e7ba      	b.n	8017e66 <_dtoa_r+0x296>
 8017ef0:	69e3      	ldr	r3, [r4, #28]
 8017ef2:	9a00      	ldr	r2, [sp, #0]
 8017ef4:	601a      	str	r2, [r3, #0]
 8017ef6:	9b04      	ldr	r3, [sp, #16]
 8017ef8:	2b0e      	cmp	r3, #14
 8017efa:	f200 80a8 	bhi.w	801804e <_dtoa_r+0x47e>
 8017efe:	2d00      	cmp	r5, #0
 8017f00:	f000 80a5 	beq.w	801804e <_dtoa_r+0x47e>
 8017f04:	f1bb 0f00 	cmp.w	fp, #0
 8017f08:	dd38      	ble.n	8017f7c <_dtoa_r+0x3ac>
 8017f0a:	4bc0      	ldr	r3, [pc, #768]	; (801820c <_dtoa_r+0x63c>)
 8017f0c:	f00b 020f 	and.w	r2, fp, #15
 8017f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017f18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017f1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017f20:	d019      	beq.n	8017f56 <_dtoa_r+0x386>
 8017f22:	4bbb      	ldr	r3, [pc, #748]	; (8018210 <_dtoa_r+0x640>)
 8017f24:	ec51 0b18 	vmov	r0, r1, d8
 8017f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017f2c:	f7e8 fcb6 	bl	800089c <__aeabi_ddiv>
 8017f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f34:	f008 080f 	and.w	r8, r8, #15
 8017f38:	2503      	movs	r5, #3
 8017f3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8018210 <_dtoa_r+0x640>
 8017f3e:	f1b8 0f00 	cmp.w	r8, #0
 8017f42:	d10a      	bne.n	8017f5a <_dtoa_r+0x38a>
 8017f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f48:	4632      	mov	r2, r6
 8017f4a:	463b      	mov	r3, r7
 8017f4c:	f7e8 fca6 	bl	800089c <__aeabi_ddiv>
 8017f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f54:	e02b      	b.n	8017fae <_dtoa_r+0x3de>
 8017f56:	2502      	movs	r5, #2
 8017f58:	e7ef      	b.n	8017f3a <_dtoa_r+0x36a>
 8017f5a:	f018 0f01 	tst.w	r8, #1
 8017f5e:	d008      	beq.n	8017f72 <_dtoa_r+0x3a2>
 8017f60:	4630      	mov	r0, r6
 8017f62:	4639      	mov	r1, r7
 8017f64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017f68:	f7e8 fb6e 	bl	8000648 <__aeabi_dmul>
 8017f6c:	3501      	adds	r5, #1
 8017f6e:	4606      	mov	r6, r0
 8017f70:	460f      	mov	r7, r1
 8017f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017f76:	f109 0908 	add.w	r9, r9, #8
 8017f7a:	e7e0      	b.n	8017f3e <_dtoa_r+0x36e>
 8017f7c:	f000 809f 	beq.w	80180be <_dtoa_r+0x4ee>
 8017f80:	f1cb 0600 	rsb	r6, fp, #0
 8017f84:	4ba1      	ldr	r3, [pc, #644]	; (801820c <_dtoa_r+0x63c>)
 8017f86:	4fa2      	ldr	r7, [pc, #648]	; (8018210 <_dtoa_r+0x640>)
 8017f88:	f006 020f 	and.w	r2, r6, #15
 8017f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f94:	ec51 0b18 	vmov	r0, r1, d8
 8017f98:	f7e8 fb56 	bl	8000648 <__aeabi_dmul>
 8017f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fa0:	1136      	asrs	r6, r6, #4
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	2502      	movs	r5, #2
 8017fa6:	2e00      	cmp	r6, #0
 8017fa8:	d17e      	bne.n	80180a8 <_dtoa_r+0x4d8>
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d1d0      	bne.n	8017f50 <_dtoa_r+0x380>
 8017fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	f000 8084 	beq.w	80180c2 <_dtoa_r+0x4f2>
 8017fba:	4b96      	ldr	r3, [pc, #600]	; (8018214 <_dtoa_r+0x644>)
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	4640      	mov	r0, r8
 8017fc0:	4649      	mov	r1, r9
 8017fc2:	f7e8 fdb3 	bl	8000b2c <__aeabi_dcmplt>
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	d07b      	beq.n	80180c2 <_dtoa_r+0x4f2>
 8017fca:	9b04      	ldr	r3, [sp, #16]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d078      	beq.n	80180c2 <_dtoa_r+0x4f2>
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	dd39      	ble.n	801804a <_dtoa_r+0x47a>
 8017fd6:	4b90      	ldr	r3, [pc, #576]	; (8018218 <_dtoa_r+0x648>)
 8017fd8:	2200      	movs	r2, #0
 8017fda:	4640      	mov	r0, r8
 8017fdc:	4649      	mov	r1, r9
 8017fde:	f7e8 fb33 	bl	8000648 <__aeabi_dmul>
 8017fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fe6:	9e01      	ldr	r6, [sp, #4]
 8017fe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017fec:	3501      	adds	r5, #1
 8017fee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	f7e8 fabe 	bl	8000574 <__aeabi_i2d>
 8017ff8:	4642      	mov	r2, r8
 8017ffa:	464b      	mov	r3, r9
 8017ffc:	f7e8 fb24 	bl	8000648 <__aeabi_dmul>
 8018000:	4b86      	ldr	r3, [pc, #536]	; (801821c <_dtoa_r+0x64c>)
 8018002:	2200      	movs	r2, #0
 8018004:	f7e8 f96a 	bl	80002dc <__adddf3>
 8018008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801800c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018010:	9303      	str	r3, [sp, #12]
 8018012:	2e00      	cmp	r6, #0
 8018014:	d158      	bne.n	80180c8 <_dtoa_r+0x4f8>
 8018016:	4b82      	ldr	r3, [pc, #520]	; (8018220 <_dtoa_r+0x650>)
 8018018:	2200      	movs	r2, #0
 801801a:	4640      	mov	r0, r8
 801801c:	4649      	mov	r1, r9
 801801e:	f7e8 f95b 	bl	80002d8 <__aeabi_dsub>
 8018022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018026:	4680      	mov	r8, r0
 8018028:	4689      	mov	r9, r1
 801802a:	f7e8 fd9d 	bl	8000b68 <__aeabi_dcmpgt>
 801802e:	2800      	cmp	r0, #0
 8018030:	f040 8296 	bne.w	8018560 <_dtoa_r+0x990>
 8018034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018038:	4640      	mov	r0, r8
 801803a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801803e:	4649      	mov	r1, r9
 8018040:	f7e8 fd74 	bl	8000b2c <__aeabi_dcmplt>
 8018044:	2800      	cmp	r0, #0
 8018046:	f040 8289 	bne.w	801855c <_dtoa_r+0x98c>
 801804a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801804e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018050:	2b00      	cmp	r3, #0
 8018052:	f2c0 814e 	blt.w	80182f2 <_dtoa_r+0x722>
 8018056:	f1bb 0f0e 	cmp.w	fp, #14
 801805a:	f300 814a 	bgt.w	80182f2 <_dtoa_r+0x722>
 801805e:	4b6b      	ldr	r3, [pc, #428]	; (801820c <_dtoa_r+0x63c>)
 8018060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801806a:	2b00      	cmp	r3, #0
 801806c:	f280 80dc 	bge.w	8018228 <_dtoa_r+0x658>
 8018070:	9b04      	ldr	r3, [sp, #16]
 8018072:	2b00      	cmp	r3, #0
 8018074:	f300 80d8 	bgt.w	8018228 <_dtoa_r+0x658>
 8018078:	f040 826f 	bne.w	801855a <_dtoa_r+0x98a>
 801807c:	4b68      	ldr	r3, [pc, #416]	; (8018220 <_dtoa_r+0x650>)
 801807e:	2200      	movs	r2, #0
 8018080:	4640      	mov	r0, r8
 8018082:	4649      	mov	r1, r9
 8018084:	f7e8 fae0 	bl	8000648 <__aeabi_dmul>
 8018088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801808c:	f7e8 fd62 	bl	8000b54 <__aeabi_dcmpge>
 8018090:	9e04      	ldr	r6, [sp, #16]
 8018092:	4637      	mov	r7, r6
 8018094:	2800      	cmp	r0, #0
 8018096:	f040 8245 	bne.w	8018524 <_dtoa_r+0x954>
 801809a:	9d00      	ldr	r5, [sp, #0]
 801809c:	2331      	movs	r3, #49	; 0x31
 801809e:	f805 3b01 	strb.w	r3, [r5], #1
 80180a2:	f10b 0b01 	add.w	fp, fp, #1
 80180a6:	e241      	b.n	801852c <_dtoa_r+0x95c>
 80180a8:	07f2      	lsls	r2, r6, #31
 80180aa:	d505      	bpl.n	80180b8 <_dtoa_r+0x4e8>
 80180ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80180b0:	f7e8 faca 	bl	8000648 <__aeabi_dmul>
 80180b4:	3501      	adds	r5, #1
 80180b6:	2301      	movs	r3, #1
 80180b8:	1076      	asrs	r6, r6, #1
 80180ba:	3708      	adds	r7, #8
 80180bc:	e773      	b.n	8017fa6 <_dtoa_r+0x3d6>
 80180be:	2502      	movs	r5, #2
 80180c0:	e775      	b.n	8017fae <_dtoa_r+0x3de>
 80180c2:	9e04      	ldr	r6, [sp, #16]
 80180c4:	465f      	mov	r7, fp
 80180c6:	e792      	b.n	8017fee <_dtoa_r+0x41e>
 80180c8:	9900      	ldr	r1, [sp, #0]
 80180ca:	4b50      	ldr	r3, [pc, #320]	; (801820c <_dtoa_r+0x63c>)
 80180cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180d0:	4431      	add	r1, r6
 80180d2:	9102      	str	r1, [sp, #8]
 80180d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80180d6:	eeb0 9a47 	vmov.f32	s18, s14
 80180da:	eef0 9a67 	vmov.f32	s19, s15
 80180de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80180e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80180e6:	2900      	cmp	r1, #0
 80180e8:	d044      	beq.n	8018174 <_dtoa_r+0x5a4>
 80180ea:	494e      	ldr	r1, [pc, #312]	; (8018224 <_dtoa_r+0x654>)
 80180ec:	2000      	movs	r0, #0
 80180ee:	f7e8 fbd5 	bl	800089c <__aeabi_ddiv>
 80180f2:	ec53 2b19 	vmov	r2, r3, d9
 80180f6:	f7e8 f8ef 	bl	80002d8 <__aeabi_dsub>
 80180fa:	9d00      	ldr	r5, [sp, #0]
 80180fc:	ec41 0b19 	vmov	d9, r0, r1
 8018100:	4649      	mov	r1, r9
 8018102:	4640      	mov	r0, r8
 8018104:	f7e8 fd50 	bl	8000ba8 <__aeabi_d2iz>
 8018108:	4606      	mov	r6, r0
 801810a:	f7e8 fa33 	bl	8000574 <__aeabi_i2d>
 801810e:	4602      	mov	r2, r0
 8018110:	460b      	mov	r3, r1
 8018112:	4640      	mov	r0, r8
 8018114:	4649      	mov	r1, r9
 8018116:	f7e8 f8df 	bl	80002d8 <__aeabi_dsub>
 801811a:	3630      	adds	r6, #48	; 0x30
 801811c:	f805 6b01 	strb.w	r6, [r5], #1
 8018120:	ec53 2b19 	vmov	r2, r3, d9
 8018124:	4680      	mov	r8, r0
 8018126:	4689      	mov	r9, r1
 8018128:	f7e8 fd00 	bl	8000b2c <__aeabi_dcmplt>
 801812c:	2800      	cmp	r0, #0
 801812e:	d164      	bne.n	80181fa <_dtoa_r+0x62a>
 8018130:	4642      	mov	r2, r8
 8018132:	464b      	mov	r3, r9
 8018134:	4937      	ldr	r1, [pc, #220]	; (8018214 <_dtoa_r+0x644>)
 8018136:	2000      	movs	r0, #0
 8018138:	f7e8 f8ce 	bl	80002d8 <__aeabi_dsub>
 801813c:	ec53 2b19 	vmov	r2, r3, d9
 8018140:	f7e8 fcf4 	bl	8000b2c <__aeabi_dcmplt>
 8018144:	2800      	cmp	r0, #0
 8018146:	f040 80b6 	bne.w	80182b6 <_dtoa_r+0x6e6>
 801814a:	9b02      	ldr	r3, [sp, #8]
 801814c:	429d      	cmp	r5, r3
 801814e:	f43f af7c 	beq.w	801804a <_dtoa_r+0x47a>
 8018152:	4b31      	ldr	r3, [pc, #196]	; (8018218 <_dtoa_r+0x648>)
 8018154:	ec51 0b19 	vmov	r0, r1, d9
 8018158:	2200      	movs	r2, #0
 801815a:	f7e8 fa75 	bl	8000648 <__aeabi_dmul>
 801815e:	4b2e      	ldr	r3, [pc, #184]	; (8018218 <_dtoa_r+0x648>)
 8018160:	ec41 0b19 	vmov	d9, r0, r1
 8018164:	2200      	movs	r2, #0
 8018166:	4640      	mov	r0, r8
 8018168:	4649      	mov	r1, r9
 801816a:	f7e8 fa6d 	bl	8000648 <__aeabi_dmul>
 801816e:	4680      	mov	r8, r0
 8018170:	4689      	mov	r9, r1
 8018172:	e7c5      	b.n	8018100 <_dtoa_r+0x530>
 8018174:	ec51 0b17 	vmov	r0, r1, d7
 8018178:	f7e8 fa66 	bl	8000648 <__aeabi_dmul>
 801817c:	9b02      	ldr	r3, [sp, #8]
 801817e:	9d00      	ldr	r5, [sp, #0]
 8018180:	930f      	str	r3, [sp, #60]	; 0x3c
 8018182:	ec41 0b19 	vmov	d9, r0, r1
 8018186:	4649      	mov	r1, r9
 8018188:	4640      	mov	r0, r8
 801818a:	f7e8 fd0d 	bl	8000ba8 <__aeabi_d2iz>
 801818e:	4606      	mov	r6, r0
 8018190:	f7e8 f9f0 	bl	8000574 <__aeabi_i2d>
 8018194:	3630      	adds	r6, #48	; 0x30
 8018196:	4602      	mov	r2, r0
 8018198:	460b      	mov	r3, r1
 801819a:	4640      	mov	r0, r8
 801819c:	4649      	mov	r1, r9
 801819e:	f7e8 f89b 	bl	80002d8 <__aeabi_dsub>
 80181a2:	f805 6b01 	strb.w	r6, [r5], #1
 80181a6:	9b02      	ldr	r3, [sp, #8]
 80181a8:	429d      	cmp	r5, r3
 80181aa:	4680      	mov	r8, r0
 80181ac:	4689      	mov	r9, r1
 80181ae:	f04f 0200 	mov.w	r2, #0
 80181b2:	d124      	bne.n	80181fe <_dtoa_r+0x62e>
 80181b4:	4b1b      	ldr	r3, [pc, #108]	; (8018224 <_dtoa_r+0x654>)
 80181b6:	ec51 0b19 	vmov	r0, r1, d9
 80181ba:	f7e8 f88f 	bl	80002dc <__adddf3>
 80181be:	4602      	mov	r2, r0
 80181c0:	460b      	mov	r3, r1
 80181c2:	4640      	mov	r0, r8
 80181c4:	4649      	mov	r1, r9
 80181c6:	f7e8 fccf 	bl	8000b68 <__aeabi_dcmpgt>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d173      	bne.n	80182b6 <_dtoa_r+0x6e6>
 80181ce:	ec53 2b19 	vmov	r2, r3, d9
 80181d2:	4914      	ldr	r1, [pc, #80]	; (8018224 <_dtoa_r+0x654>)
 80181d4:	2000      	movs	r0, #0
 80181d6:	f7e8 f87f 	bl	80002d8 <__aeabi_dsub>
 80181da:	4602      	mov	r2, r0
 80181dc:	460b      	mov	r3, r1
 80181de:	4640      	mov	r0, r8
 80181e0:	4649      	mov	r1, r9
 80181e2:	f7e8 fca3 	bl	8000b2c <__aeabi_dcmplt>
 80181e6:	2800      	cmp	r0, #0
 80181e8:	f43f af2f 	beq.w	801804a <_dtoa_r+0x47a>
 80181ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80181ee:	1e6b      	subs	r3, r5, #1
 80181f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80181f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80181f6:	2b30      	cmp	r3, #48	; 0x30
 80181f8:	d0f8      	beq.n	80181ec <_dtoa_r+0x61c>
 80181fa:	46bb      	mov	fp, r7
 80181fc:	e04a      	b.n	8018294 <_dtoa_r+0x6c4>
 80181fe:	4b06      	ldr	r3, [pc, #24]	; (8018218 <_dtoa_r+0x648>)
 8018200:	f7e8 fa22 	bl	8000648 <__aeabi_dmul>
 8018204:	4680      	mov	r8, r0
 8018206:	4689      	mov	r9, r1
 8018208:	e7bd      	b.n	8018186 <_dtoa_r+0x5b6>
 801820a:	bf00      	nop
 801820c:	0801e048 	.word	0x0801e048
 8018210:	0801e020 	.word	0x0801e020
 8018214:	3ff00000 	.word	0x3ff00000
 8018218:	40240000 	.word	0x40240000
 801821c:	401c0000 	.word	0x401c0000
 8018220:	40140000 	.word	0x40140000
 8018224:	3fe00000 	.word	0x3fe00000
 8018228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801822c:	9d00      	ldr	r5, [sp, #0]
 801822e:	4642      	mov	r2, r8
 8018230:	464b      	mov	r3, r9
 8018232:	4630      	mov	r0, r6
 8018234:	4639      	mov	r1, r7
 8018236:	f7e8 fb31 	bl	800089c <__aeabi_ddiv>
 801823a:	f7e8 fcb5 	bl	8000ba8 <__aeabi_d2iz>
 801823e:	9001      	str	r0, [sp, #4]
 8018240:	f7e8 f998 	bl	8000574 <__aeabi_i2d>
 8018244:	4642      	mov	r2, r8
 8018246:	464b      	mov	r3, r9
 8018248:	f7e8 f9fe 	bl	8000648 <__aeabi_dmul>
 801824c:	4602      	mov	r2, r0
 801824e:	460b      	mov	r3, r1
 8018250:	4630      	mov	r0, r6
 8018252:	4639      	mov	r1, r7
 8018254:	f7e8 f840 	bl	80002d8 <__aeabi_dsub>
 8018258:	9e01      	ldr	r6, [sp, #4]
 801825a:	9f04      	ldr	r7, [sp, #16]
 801825c:	3630      	adds	r6, #48	; 0x30
 801825e:	f805 6b01 	strb.w	r6, [r5], #1
 8018262:	9e00      	ldr	r6, [sp, #0]
 8018264:	1bae      	subs	r6, r5, r6
 8018266:	42b7      	cmp	r7, r6
 8018268:	4602      	mov	r2, r0
 801826a:	460b      	mov	r3, r1
 801826c:	d134      	bne.n	80182d8 <_dtoa_r+0x708>
 801826e:	f7e8 f835 	bl	80002dc <__adddf3>
 8018272:	4642      	mov	r2, r8
 8018274:	464b      	mov	r3, r9
 8018276:	4606      	mov	r6, r0
 8018278:	460f      	mov	r7, r1
 801827a:	f7e8 fc75 	bl	8000b68 <__aeabi_dcmpgt>
 801827e:	b9c8      	cbnz	r0, 80182b4 <_dtoa_r+0x6e4>
 8018280:	4642      	mov	r2, r8
 8018282:	464b      	mov	r3, r9
 8018284:	4630      	mov	r0, r6
 8018286:	4639      	mov	r1, r7
 8018288:	f7e8 fc46 	bl	8000b18 <__aeabi_dcmpeq>
 801828c:	b110      	cbz	r0, 8018294 <_dtoa_r+0x6c4>
 801828e:	9b01      	ldr	r3, [sp, #4]
 8018290:	07db      	lsls	r3, r3, #31
 8018292:	d40f      	bmi.n	80182b4 <_dtoa_r+0x6e4>
 8018294:	4651      	mov	r1, sl
 8018296:	4620      	mov	r0, r4
 8018298:	f000 fbcc 	bl	8018a34 <_Bfree>
 801829c:	2300      	movs	r3, #0
 801829e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80182a0:	702b      	strb	r3, [r5, #0]
 80182a2:	f10b 0301 	add.w	r3, fp, #1
 80182a6:	6013      	str	r3, [r2, #0]
 80182a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	f43f ace2 	beq.w	8017c74 <_dtoa_r+0xa4>
 80182b0:	601d      	str	r5, [r3, #0]
 80182b2:	e4df      	b.n	8017c74 <_dtoa_r+0xa4>
 80182b4:	465f      	mov	r7, fp
 80182b6:	462b      	mov	r3, r5
 80182b8:	461d      	mov	r5, r3
 80182ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80182be:	2a39      	cmp	r2, #57	; 0x39
 80182c0:	d106      	bne.n	80182d0 <_dtoa_r+0x700>
 80182c2:	9a00      	ldr	r2, [sp, #0]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	d1f7      	bne.n	80182b8 <_dtoa_r+0x6e8>
 80182c8:	9900      	ldr	r1, [sp, #0]
 80182ca:	2230      	movs	r2, #48	; 0x30
 80182cc:	3701      	adds	r7, #1
 80182ce:	700a      	strb	r2, [r1, #0]
 80182d0:	781a      	ldrb	r2, [r3, #0]
 80182d2:	3201      	adds	r2, #1
 80182d4:	701a      	strb	r2, [r3, #0]
 80182d6:	e790      	b.n	80181fa <_dtoa_r+0x62a>
 80182d8:	4ba3      	ldr	r3, [pc, #652]	; (8018568 <_dtoa_r+0x998>)
 80182da:	2200      	movs	r2, #0
 80182dc:	f7e8 f9b4 	bl	8000648 <__aeabi_dmul>
 80182e0:	2200      	movs	r2, #0
 80182e2:	2300      	movs	r3, #0
 80182e4:	4606      	mov	r6, r0
 80182e6:	460f      	mov	r7, r1
 80182e8:	f7e8 fc16 	bl	8000b18 <__aeabi_dcmpeq>
 80182ec:	2800      	cmp	r0, #0
 80182ee:	d09e      	beq.n	801822e <_dtoa_r+0x65e>
 80182f0:	e7d0      	b.n	8018294 <_dtoa_r+0x6c4>
 80182f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80182f4:	2a00      	cmp	r2, #0
 80182f6:	f000 80ca 	beq.w	801848e <_dtoa_r+0x8be>
 80182fa:	9a07      	ldr	r2, [sp, #28]
 80182fc:	2a01      	cmp	r2, #1
 80182fe:	f300 80ad 	bgt.w	801845c <_dtoa_r+0x88c>
 8018302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018304:	2a00      	cmp	r2, #0
 8018306:	f000 80a5 	beq.w	8018454 <_dtoa_r+0x884>
 801830a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801830e:	9e08      	ldr	r6, [sp, #32]
 8018310:	9d05      	ldr	r5, [sp, #20]
 8018312:	9a05      	ldr	r2, [sp, #20]
 8018314:	441a      	add	r2, r3
 8018316:	9205      	str	r2, [sp, #20]
 8018318:	9a06      	ldr	r2, [sp, #24]
 801831a:	2101      	movs	r1, #1
 801831c:	441a      	add	r2, r3
 801831e:	4620      	mov	r0, r4
 8018320:	9206      	str	r2, [sp, #24]
 8018322:	f000 fc87 	bl	8018c34 <__i2b>
 8018326:	4607      	mov	r7, r0
 8018328:	b165      	cbz	r5, 8018344 <_dtoa_r+0x774>
 801832a:	9b06      	ldr	r3, [sp, #24]
 801832c:	2b00      	cmp	r3, #0
 801832e:	dd09      	ble.n	8018344 <_dtoa_r+0x774>
 8018330:	42ab      	cmp	r3, r5
 8018332:	9a05      	ldr	r2, [sp, #20]
 8018334:	bfa8      	it	ge
 8018336:	462b      	movge	r3, r5
 8018338:	1ad2      	subs	r2, r2, r3
 801833a:	9205      	str	r2, [sp, #20]
 801833c:	9a06      	ldr	r2, [sp, #24]
 801833e:	1aed      	subs	r5, r5, r3
 8018340:	1ad3      	subs	r3, r2, r3
 8018342:	9306      	str	r3, [sp, #24]
 8018344:	9b08      	ldr	r3, [sp, #32]
 8018346:	b1f3      	cbz	r3, 8018386 <_dtoa_r+0x7b6>
 8018348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801834a:	2b00      	cmp	r3, #0
 801834c:	f000 80a3 	beq.w	8018496 <_dtoa_r+0x8c6>
 8018350:	2e00      	cmp	r6, #0
 8018352:	dd10      	ble.n	8018376 <_dtoa_r+0x7a6>
 8018354:	4639      	mov	r1, r7
 8018356:	4632      	mov	r2, r6
 8018358:	4620      	mov	r0, r4
 801835a:	f000 fd2b 	bl	8018db4 <__pow5mult>
 801835e:	4652      	mov	r2, sl
 8018360:	4601      	mov	r1, r0
 8018362:	4607      	mov	r7, r0
 8018364:	4620      	mov	r0, r4
 8018366:	f000 fc7b 	bl	8018c60 <__multiply>
 801836a:	4651      	mov	r1, sl
 801836c:	4680      	mov	r8, r0
 801836e:	4620      	mov	r0, r4
 8018370:	f000 fb60 	bl	8018a34 <_Bfree>
 8018374:	46c2      	mov	sl, r8
 8018376:	9b08      	ldr	r3, [sp, #32]
 8018378:	1b9a      	subs	r2, r3, r6
 801837a:	d004      	beq.n	8018386 <_dtoa_r+0x7b6>
 801837c:	4651      	mov	r1, sl
 801837e:	4620      	mov	r0, r4
 8018380:	f000 fd18 	bl	8018db4 <__pow5mult>
 8018384:	4682      	mov	sl, r0
 8018386:	2101      	movs	r1, #1
 8018388:	4620      	mov	r0, r4
 801838a:	f000 fc53 	bl	8018c34 <__i2b>
 801838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018390:	2b00      	cmp	r3, #0
 8018392:	4606      	mov	r6, r0
 8018394:	f340 8081 	ble.w	801849a <_dtoa_r+0x8ca>
 8018398:	461a      	mov	r2, r3
 801839a:	4601      	mov	r1, r0
 801839c:	4620      	mov	r0, r4
 801839e:	f000 fd09 	bl	8018db4 <__pow5mult>
 80183a2:	9b07      	ldr	r3, [sp, #28]
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	4606      	mov	r6, r0
 80183a8:	dd7a      	ble.n	80184a0 <_dtoa_r+0x8d0>
 80183aa:	f04f 0800 	mov.w	r8, #0
 80183ae:	6933      	ldr	r3, [r6, #16]
 80183b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80183b4:	6918      	ldr	r0, [r3, #16]
 80183b6:	f000 fbef 	bl	8018b98 <__hi0bits>
 80183ba:	f1c0 0020 	rsb	r0, r0, #32
 80183be:	9b06      	ldr	r3, [sp, #24]
 80183c0:	4418      	add	r0, r3
 80183c2:	f010 001f 	ands.w	r0, r0, #31
 80183c6:	f000 8094 	beq.w	80184f2 <_dtoa_r+0x922>
 80183ca:	f1c0 0320 	rsb	r3, r0, #32
 80183ce:	2b04      	cmp	r3, #4
 80183d0:	f340 8085 	ble.w	80184de <_dtoa_r+0x90e>
 80183d4:	9b05      	ldr	r3, [sp, #20]
 80183d6:	f1c0 001c 	rsb	r0, r0, #28
 80183da:	4403      	add	r3, r0
 80183dc:	9305      	str	r3, [sp, #20]
 80183de:	9b06      	ldr	r3, [sp, #24]
 80183e0:	4403      	add	r3, r0
 80183e2:	4405      	add	r5, r0
 80183e4:	9306      	str	r3, [sp, #24]
 80183e6:	9b05      	ldr	r3, [sp, #20]
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	dd05      	ble.n	80183f8 <_dtoa_r+0x828>
 80183ec:	4651      	mov	r1, sl
 80183ee:	461a      	mov	r2, r3
 80183f0:	4620      	mov	r0, r4
 80183f2:	f000 fd39 	bl	8018e68 <__lshift>
 80183f6:	4682      	mov	sl, r0
 80183f8:	9b06      	ldr	r3, [sp, #24]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	dd05      	ble.n	801840a <_dtoa_r+0x83a>
 80183fe:	4631      	mov	r1, r6
 8018400:	461a      	mov	r2, r3
 8018402:	4620      	mov	r0, r4
 8018404:	f000 fd30 	bl	8018e68 <__lshift>
 8018408:	4606      	mov	r6, r0
 801840a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801840c:	2b00      	cmp	r3, #0
 801840e:	d072      	beq.n	80184f6 <_dtoa_r+0x926>
 8018410:	4631      	mov	r1, r6
 8018412:	4650      	mov	r0, sl
 8018414:	f000 fd94 	bl	8018f40 <__mcmp>
 8018418:	2800      	cmp	r0, #0
 801841a:	da6c      	bge.n	80184f6 <_dtoa_r+0x926>
 801841c:	2300      	movs	r3, #0
 801841e:	4651      	mov	r1, sl
 8018420:	220a      	movs	r2, #10
 8018422:	4620      	mov	r0, r4
 8018424:	f000 fb28 	bl	8018a78 <__multadd>
 8018428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801842a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801842e:	4682      	mov	sl, r0
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 81b0 	beq.w	8018796 <_dtoa_r+0xbc6>
 8018436:	2300      	movs	r3, #0
 8018438:	4639      	mov	r1, r7
 801843a:	220a      	movs	r2, #10
 801843c:	4620      	mov	r0, r4
 801843e:	f000 fb1b 	bl	8018a78 <__multadd>
 8018442:	9b01      	ldr	r3, [sp, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	4607      	mov	r7, r0
 8018448:	f300 8096 	bgt.w	8018578 <_dtoa_r+0x9a8>
 801844c:	9b07      	ldr	r3, [sp, #28]
 801844e:	2b02      	cmp	r3, #2
 8018450:	dc59      	bgt.n	8018506 <_dtoa_r+0x936>
 8018452:	e091      	b.n	8018578 <_dtoa_r+0x9a8>
 8018454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801845a:	e758      	b.n	801830e <_dtoa_r+0x73e>
 801845c:	9b04      	ldr	r3, [sp, #16]
 801845e:	1e5e      	subs	r6, r3, #1
 8018460:	9b08      	ldr	r3, [sp, #32]
 8018462:	42b3      	cmp	r3, r6
 8018464:	bfbf      	itttt	lt
 8018466:	9b08      	ldrlt	r3, [sp, #32]
 8018468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801846a:	9608      	strlt	r6, [sp, #32]
 801846c:	1af3      	sublt	r3, r6, r3
 801846e:	bfb4      	ite	lt
 8018470:	18d2      	addlt	r2, r2, r3
 8018472:	1b9e      	subge	r6, r3, r6
 8018474:	9b04      	ldr	r3, [sp, #16]
 8018476:	bfbc      	itt	lt
 8018478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801847a:	2600      	movlt	r6, #0
 801847c:	2b00      	cmp	r3, #0
 801847e:	bfb7      	itett	lt
 8018480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018488:	1a9d      	sublt	r5, r3, r2
 801848a:	2300      	movlt	r3, #0
 801848c:	e741      	b.n	8018312 <_dtoa_r+0x742>
 801848e:	9e08      	ldr	r6, [sp, #32]
 8018490:	9d05      	ldr	r5, [sp, #20]
 8018492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018494:	e748      	b.n	8018328 <_dtoa_r+0x758>
 8018496:	9a08      	ldr	r2, [sp, #32]
 8018498:	e770      	b.n	801837c <_dtoa_r+0x7ac>
 801849a:	9b07      	ldr	r3, [sp, #28]
 801849c:	2b01      	cmp	r3, #1
 801849e:	dc19      	bgt.n	80184d4 <_dtoa_r+0x904>
 80184a0:	9b02      	ldr	r3, [sp, #8]
 80184a2:	b9bb      	cbnz	r3, 80184d4 <_dtoa_r+0x904>
 80184a4:	9b03      	ldr	r3, [sp, #12]
 80184a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80184aa:	b99b      	cbnz	r3, 80184d4 <_dtoa_r+0x904>
 80184ac:	9b03      	ldr	r3, [sp, #12]
 80184ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80184b2:	0d1b      	lsrs	r3, r3, #20
 80184b4:	051b      	lsls	r3, r3, #20
 80184b6:	b183      	cbz	r3, 80184da <_dtoa_r+0x90a>
 80184b8:	9b05      	ldr	r3, [sp, #20]
 80184ba:	3301      	adds	r3, #1
 80184bc:	9305      	str	r3, [sp, #20]
 80184be:	9b06      	ldr	r3, [sp, #24]
 80184c0:	3301      	adds	r3, #1
 80184c2:	9306      	str	r3, [sp, #24]
 80184c4:	f04f 0801 	mov.w	r8, #1
 80184c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	f47f af6f 	bne.w	80183ae <_dtoa_r+0x7de>
 80184d0:	2001      	movs	r0, #1
 80184d2:	e774      	b.n	80183be <_dtoa_r+0x7ee>
 80184d4:	f04f 0800 	mov.w	r8, #0
 80184d8:	e7f6      	b.n	80184c8 <_dtoa_r+0x8f8>
 80184da:	4698      	mov	r8, r3
 80184dc:	e7f4      	b.n	80184c8 <_dtoa_r+0x8f8>
 80184de:	d082      	beq.n	80183e6 <_dtoa_r+0x816>
 80184e0:	9a05      	ldr	r2, [sp, #20]
 80184e2:	331c      	adds	r3, #28
 80184e4:	441a      	add	r2, r3
 80184e6:	9205      	str	r2, [sp, #20]
 80184e8:	9a06      	ldr	r2, [sp, #24]
 80184ea:	441a      	add	r2, r3
 80184ec:	441d      	add	r5, r3
 80184ee:	9206      	str	r2, [sp, #24]
 80184f0:	e779      	b.n	80183e6 <_dtoa_r+0x816>
 80184f2:	4603      	mov	r3, r0
 80184f4:	e7f4      	b.n	80184e0 <_dtoa_r+0x910>
 80184f6:	9b04      	ldr	r3, [sp, #16]
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	dc37      	bgt.n	801856c <_dtoa_r+0x99c>
 80184fc:	9b07      	ldr	r3, [sp, #28]
 80184fe:	2b02      	cmp	r3, #2
 8018500:	dd34      	ble.n	801856c <_dtoa_r+0x99c>
 8018502:	9b04      	ldr	r3, [sp, #16]
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	9b01      	ldr	r3, [sp, #4]
 8018508:	b963      	cbnz	r3, 8018524 <_dtoa_r+0x954>
 801850a:	4631      	mov	r1, r6
 801850c:	2205      	movs	r2, #5
 801850e:	4620      	mov	r0, r4
 8018510:	f000 fab2 	bl	8018a78 <__multadd>
 8018514:	4601      	mov	r1, r0
 8018516:	4606      	mov	r6, r0
 8018518:	4650      	mov	r0, sl
 801851a:	f000 fd11 	bl	8018f40 <__mcmp>
 801851e:	2800      	cmp	r0, #0
 8018520:	f73f adbb 	bgt.w	801809a <_dtoa_r+0x4ca>
 8018524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018526:	9d00      	ldr	r5, [sp, #0]
 8018528:	ea6f 0b03 	mvn.w	fp, r3
 801852c:	f04f 0800 	mov.w	r8, #0
 8018530:	4631      	mov	r1, r6
 8018532:	4620      	mov	r0, r4
 8018534:	f000 fa7e 	bl	8018a34 <_Bfree>
 8018538:	2f00      	cmp	r7, #0
 801853a:	f43f aeab 	beq.w	8018294 <_dtoa_r+0x6c4>
 801853e:	f1b8 0f00 	cmp.w	r8, #0
 8018542:	d005      	beq.n	8018550 <_dtoa_r+0x980>
 8018544:	45b8      	cmp	r8, r7
 8018546:	d003      	beq.n	8018550 <_dtoa_r+0x980>
 8018548:	4641      	mov	r1, r8
 801854a:	4620      	mov	r0, r4
 801854c:	f000 fa72 	bl	8018a34 <_Bfree>
 8018550:	4639      	mov	r1, r7
 8018552:	4620      	mov	r0, r4
 8018554:	f000 fa6e 	bl	8018a34 <_Bfree>
 8018558:	e69c      	b.n	8018294 <_dtoa_r+0x6c4>
 801855a:	2600      	movs	r6, #0
 801855c:	4637      	mov	r7, r6
 801855e:	e7e1      	b.n	8018524 <_dtoa_r+0x954>
 8018560:	46bb      	mov	fp, r7
 8018562:	4637      	mov	r7, r6
 8018564:	e599      	b.n	801809a <_dtoa_r+0x4ca>
 8018566:	bf00      	nop
 8018568:	40240000 	.word	0x40240000
 801856c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801856e:	2b00      	cmp	r3, #0
 8018570:	f000 80c8 	beq.w	8018704 <_dtoa_r+0xb34>
 8018574:	9b04      	ldr	r3, [sp, #16]
 8018576:	9301      	str	r3, [sp, #4]
 8018578:	2d00      	cmp	r5, #0
 801857a:	dd05      	ble.n	8018588 <_dtoa_r+0x9b8>
 801857c:	4639      	mov	r1, r7
 801857e:	462a      	mov	r2, r5
 8018580:	4620      	mov	r0, r4
 8018582:	f000 fc71 	bl	8018e68 <__lshift>
 8018586:	4607      	mov	r7, r0
 8018588:	f1b8 0f00 	cmp.w	r8, #0
 801858c:	d05b      	beq.n	8018646 <_dtoa_r+0xa76>
 801858e:	6879      	ldr	r1, [r7, #4]
 8018590:	4620      	mov	r0, r4
 8018592:	f000 fa0f 	bl	80189b4 <_Balloc>
 8018596:	4605      	mov	r5, r0
 8018598:	b928      	cbnz	r0, 80185a6 <_dtoa_r+0x9d6>
 801859a:	4b83      	ldr	r3, [pc, #524]	; (80187a8 <_dtoa_r+0xbd8>)
 801859c:	4602      	mov	r2, r0
 801859e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80185a2:	f7ff bb2e 	b.w	8017c02 <_dtoa_r+0x32>
 80185a6:	693a      	ldr	r2, [r7, #16]
 80185a8:	3202      	adds	r2, #2
 80185aa:	0092      	lsls	r2, r2, #2
 80185ac:	f107 010c 	add.w	r1, r7, #12
 80185b0:	300c      	adds	r0, #12
 80185b2:	f7ff fa6e 	bl	8017a92 <memcpy>
 80185b6:	2201      	movs	r2, #1
 80185b8:	4629      	mov	r1, r5
 80185ba:	4620      	mov	r0, r4
 80185bc:	f000 fc54 	bl	8018e68 <__lshift>
 80185c0:	9b00      	ldr	r3, [sp, #0]
 80185c2:	3301      	adds	r3, #1
 80185c4:	9304      	str	r3, [sp, #16]
 80185c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80185ca:	4413      	add	r3, r2
 80185cc:	9308      	str	r3, [sp, #32]
 80185ce:	9b02      	ldr	r3, [sp, #8]
 80185d0:	f003 0301 	and.w	r3, r3, #1
 80185d4:	46b8      	mov	r8, r7
 80185d6:	9306      	str	r3, [sp, #24]
 80185d8:	4607      	mov	r7, r0
 80185da:	9b04      	ldr	r3, [sp, #16]
 80185dc:	4631      	mov	r1, r6
 80185de:	3b01      	subs	r3, #1
 80185e0:	4650      	mov	r0, sl
 80185e2:	9301      	str	r3, [sp, #4]
 80185e4:	f7ff fa6a 	bl	8017abc <quorem>
 80185e8:	4641      	mov	r1, r8
 80185ea:	9002      	str	r0, [sp, #8]
 80185ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80185f0:	4650      	mov	r0, sl
 80185f2:	f000 fca5 	bl	8018f40 <__mcmp>
 80185f6:	463a      	mov	r2, r7
 80185f8:	9005      	str	r0, [sp, #20]
 80185fa:	4631      	mov	r1, r6
 80185fc:	4620      	mov	r0, r4
 80185fe:	f000 fcbb 	bl	8018f78 <__mdiff>
 8018602:	68c2      	ldr	r2, [r0, #12]
 8018604:	4605      	mov	r5, r0
 8018606:	bb02      	cbnz	r2, 801864a <_dtoa_r+0xa7a>
 8018608:	4601      	mov	r1, r0
 801860a:	4650      	mov	r0, sl
 801860c:	f000 fc98 	bl	8018f40 <__mcmp>
 8018610:	4602      	mov	r2, r0
 8018612:	4629      	mov	r1, r5
 8018614:	4620      	mov	r0, r4
 8018616:	9209      	str	r2, [sp, #36]	; 0x24
 8018618:	f000 fa0c 	bl	8018a34 <_Bfree>
 801861c:	9b07      	ldr	r3, [sp, #28]
 801861e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018620:	9d04      	ldr	r5, [sp, #16]
 8018622:	ea43 0102 	orr.w	r1, r3, r2
 8018626:	9b06      	ldr	r3, [sp, #24]
 8018628:	4319      	orrs	r1, r3
 801862a:	d110      	bne.n	801864e <_dtoa_r+0xa7e>
 801862c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018630:	d029      	beq.n	8018686 <_dtoa_r+0xab6>
 8018632:	9b05      	ldr	r3, [sp, #20]
 8018634:	2b00      	cmp	r3, #0
 8018636:	dd02      	ble.n	801863e <_dtoa_r+0xa6e>
 8018638:	9b02      	ldr	r3, [sp, #8]
 801863a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801863e:	9b01      	ldr	r3, [sp, #4]
 8018640:	f883 9000 	strb.w	r9, [r3]
 8018644:	e774      	b.n	8018530 <_dtoa_r+0x960>
 8018646:	4638      	mov	r0, r7
 8018648:	e7ba      	b.n	80185c0 <_dtoa_r+0x9f0>
 801864a:	2201      	movs	r2, #1
 801864c:	e7e1      	b.n	8018612 <_dtoa_r+0xa42>
 801864e:	9b05      	ldr	r3, [sp, #20]
 8018650:	2b00      	cmp	r3, #0
 8018652:	db04      	blt.n	801865e <_dtoa_r+0xa8e>
 8018654:	9907      	ldr	r1, [sp, #28]
 8018656:	430b      	orrs	r3, r1
 8018658:	9906      	ldr	r1, [sp, #24]
 801865a:	430b      	orrs	r3, r1
 801865c:	d120      	bne.n	80186a0 <_dtoa_r+0xad0>
 801865e:	2a00      	cmp	r2, #0
 8018660:	dded      	ble.n	801863e <_dtoa_r+0xa6e>
 8018662:	4651      	mov	r1, sl
 8018664:	2201      	movs	r2, #1
 8018666:	4620      	mov	r0, r4
 8018668:	f000 fbfe 	bl	8018e68 <__lshift>
 801866c:	4631      	mov	r1, r6
 801866e:	4682      	mov	sl, r0
 8018670:	f000 fc66 	bl	8018f40 <__mcmp>
 8018674:	2800      	cmp	r0, #0
 8018676:	dc03      	bgt.n	8018680 <_dtoa_r+0xab0>
 8018678:	d1e1      	bne.n	801863e <_dtoa_r+0xa6e>
 801867a:	f019 0f01 	tst.w	r9, #1
 801867e:	d0de      	beq.n	801863e <_dtoa_r+0xa6e>
 8018680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018684:	d1d8      	bne.n	8018638 <_dtoa_r+0xa68>
 8018686:	9a01      	ldr	r2, [sp, #4]
 8018688:	2339      	movs	r3, #57	; 0x39
 801868a:	7013      	strb	r3, [r2, #0]
 801868c:	462b      	mov	r3, r5
 801868e:	461d      	mov	r5, r3
 8018690:	3b01      	subs	r3, #1
 8018692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018696:	2a39      	cmp	r2, #57	; 0x39
 8018698:	d06c      	beq.n	8018774 <_dtoa_r+0xba4>
 801869a:	3201      	adds	r2, #1
 801869c:	701a      	strb	r2, [r3, #0]
 801869e:	e747      	b.n	8018530 <_dtoa_r+0x960>
 80186a0:	2a00      	cmp	r2, #0
 80186a2:	dd07      	ble.n	80186b4 <_dtoa_r+0xae4>
 80186a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80186a8:	d0ed      	beq.n	8018686 <_dtoa_r+0xab6>
 80186aa:	9a01      	ldr	r2, [sp, #4]
 80186ac:	f109 0301 	add.w	r3, r9, #1
 80186b0:	7013      	strb	r3, [r2, #0]
 80186b2:	e73d      	b.n	8018530 <_dtoa_r+0x960>
 80186b4:	9b04      	ldr	r3, [sp, #16]
 80186b6:	9a08      	ldr	r2, [sp, #32]
 80186b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80186bc:	4293      	cmp	r3, r2
 80186be:	d043      	beq.n	8018748 <_dtoa_r+0xb78>
 80186c0:	4651      	mov	r1, sl
 80186c2:	2300      	movs	r3, #0
 80186c4:	220a      	movs	r2, #10
 80186c6:	4620      	mov	r0, r4
 80186c8:	f000 f9d6 	bl	8018a78 <__multadd>
 80186cc:	45b8      	cmp	r8, r7
 80186ce:	4682      	mov	sl, r0
 80186d0:	f04f 0300 	mov.w	r3, #0
 80186d4:	f04f 020a 	mov.w	r2, #10
 80186d8:	4641      	mov	r1, r8
 80186da:	4620      	mov	r0, r4
 80186dc:	d107      	bne.n	80186ee <_dtoa_r+0xb1e>
 80186de:	f000 f9cb 	bl	8018a78 <__multadd>
 80186e2:	4680      	mov	r8, r0
 80186e4:	4607      	mov	r7, r0
 80186e6:	9b04      	ldr	r3, [sp, #16]
 80186e8:	3301      	adds	r3, #1
 80186ea:	9304      	str	r3, [sp, #16]
 80186ec:	e775      	b.n	80185da <_dtoa_r+0xa0a>
 80186ee:	f000 f9c3 	bl	8018a78 <__multadd>
 80186f2:	4639      	mov	r1, r7
 80186f4:	4680      	mov	r8, r0
 80186f6:	2300      	movs	r3, #0
 80186f8:	220a      	movs	r2, #10
 80186fa:	4620      	mov	r0, r4
 80186fc:	f000 f9bc 	bl	8018a78 <__multadd>
 8018700:	4607      	mov	r7, r0
 8018702:	e7f0      	b.n	80186e6 <_dtoa_r+0xb16>
 8018704:	9b04      	ldr	r3, [sp, #16]
 8018706:	9301      	str	r3, [sp, #4]
 8018708:	9d00      	ldr	r5, [sp, #0]
 801870a:	4631      	mov	r1, r6
 801870c:	4650      	mov	r0, sl
 801870e:	f7ff f9d5 	bl	8017abc <quorem>
 8018712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018716:	9b00      	ldr	r3, [sp, #0]
 8018718:	f805 9b01 	strb.w	r9, [r5], #1
 801871c:	1aea      	subs	r2, r5, r3
 801871e:	9b01      	ldr	r3, [sp, #4]
 8018720:	4293      	cmp	r3, r2
 8018722:	dd07      	ble.n	8018734 <_dtoa_r+0xb64>
 8018724:	4651      	mov	r1, sl
 8018726:	2300      	movs	r3, #0
 8018728:	220a      	movs	r2, #10
 801872a:	4620      	mov	r0, r4
 801872c:	f000 f9a4 	bl	8018a78 <__multadd>
 8018730:	4682      	mov	sl, r0
 8018732:	e7ea      	b.n	801870a <_dtoa_r+0xb3a>
 8018734:	9b01      	ldr	r3, [sp, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	bfc8      	it	gt
 801873a:	461d      	movgt	r5, r3
 801873c:	9b00      	ldr	r3, [sp, #0]
 801873e:	bfd8      	it	le
 8018740:	2501      	movle	r5, #1
 8018742:	441d      	add	r5, r3
 8018744:	f04f 0800 	mov.w	r8, #0
 8018748:	4651      	mov	r1, sl
 801874a:	2201      	movs	r2, #1
 801874c:	4620      	mov	r0, r4
 801874e:	f000 fb8b 	bl	8018e68 <__lshift>
 8018752:	4631      	mov	r1, r6
 8018754:	4682      	mov	sl, r0
 8018756:	f000 fbf3 	bl	8018f40 <__mcmp>
 801875a:	2800      	cmp	r0, #0
 801875c:	dc96      	bgt.n	801868c <_dtoa_r+0xabc>
 801875e:	d102      	bne.n	8018766 <_dtoa_r+0xb96>
 8018760:	f019 0f01 	tst.w	r9, #1
 8018764:	d192      	bne.n	801868c <_dtoa_r+0xabc>
 8018766:	462b      	mov	r3, r5
 8018768:	461d      	mov	r5, r3
 801876a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801876e:	2a30      	cmp	r2, #48	; 0x30
 8018770:	d0fa      	beq.n	8018768 <_dtoa_r+0xb98>
 8018772:	e6dd      	b.n	8018530 <_dtoa_r+0x960>
 8018774:	9a00      	ldr	r2, [sp, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d189      	bne.n	801868e <_dtoa_r+0xabe>
 801877a:	f10b 0b01 	add.w	fp, fp, #1
 801877e:	2331      	movs	r3, #49	; 0x31
 8018780:	e796      	b.n	80186b0 <_dtoa_r+0xae0>
 8018782:	4b0a      	ldr	r3, [pc, #40]	; (80187ac <_dtoa_r+0xbdc>)
 8018784:	f7ff ba99 	b.w	8017cba <_dtoa_r+0xea>
 8018788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801878a:	2b00      	cmp	r3, #0
 801878c:	f47f aa6d 	bne.w	8017c6a <_dtoa_r+0x9a>
 8018790:	4b07      	ldr	r3, [pc, #28]	; (80187b0 <_dtoa_r+0xbe0>)
 8018792:	f7ff ba92 	b.w	8017cba <_dtoa_r+0xea>
 8018796:	9b01      	ldr	r3, [sp, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	dcb5      	bgt.n	8018708 <_dtoa_r+0xb38>
 801879c:	9b07      	ldr	r3, [sp, #28]
 801879e:	2b02      	cmp	r3, #2
 80187a0:	f73f aeb1 	bgt.w	8018506 <_dtoa_r+0x936>
 80187a4:	e7b0      	b.n	8018708 <_dtoa_r+0xb38>
 80187a6:	bf00      	nop
 80187a8:	0801dfb5 	.word	0x0801dfb5
 80187ac:	0801df10 	.word	0x0801df10
 80187b0:	0801df39 	.word	0x0801df39

080187b4 <_free_r>:
 80187b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80187b6:	2900      	cmp	r1, #0
 80187b8:	d044      	beq.n	8018844 <_free_r+0x90>
 80187ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187be:	9001      	str	r0, [sp, #4]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	f1a1 0404 	sub.w	r4, r1, #4
 80187c6:	bfb8      	it	lt
 80187c8:	18e4      	addlt	r4, r4, r3
 80187ca:	f000 f8e7 	bl	801899c <__malloc_lock>
 80187ce:	4a1e      	ldr	r2, [pc, #120]	; (8018848 <_free_r+0x94>)
 80187d0:	9801      	ldr	r0, [sp, #4]
 80187d2:	6813      	ldr	r3, [r2, #0]
 80187d4:	b933      	cbnz	r3, 80187e4 <_free_r+0x30>
 80187d6:	6063      	str	r3, [r4, #4]
 80187d8:	6014      	str	r4, [r2, #0]
 80187da:	b003      	add	sp, #12
 80187dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187e0:	f000 b8e2 	b.w	80189a8 <__malloc_unlock>
 80187e4:	42a3      	cmp	r3, r4
 80187e6:	d908      	bls.n	80187fa <_free_r+0x46>
 80187e8:	6825      	ldr	r5, [r4, #0]
 80187ea:	1961      	adds	r1, r4, r5
 80187ec:	428b      	cmp	r3, r1
 80187ee:	bf01      	itttt	eq
 80187f0:	6819      	ldreq	r1, [r3, #0]
 80187f2:	685b      	ldreq	r3, [r3, #4]
 80187f4:	1949      	addeq	r1, r1, r5
 80187f6:	6021      	streq	r1, [r4, #0]
 80187f8:	e7ed      	b.n	80187d6 <_free_r+0x22>
 80187fa:	461a      	mov	r2, r3
 80187fc:	685b      	ldr	r3, [r3, #4]
 80187fe:	b10b      	cbz	r3, 8018804 <_free_r+0x50>
 8018800:	42a3      	cmp	r3, r4
 8018802:	d9fa      	bls.n	80187fa <_free_r+0x46>
 8018804:	6811      	ldr	r1, [r2, #0]
 8018806:	1855      	adds	r5, r2, r1
 8018808:	42a5      	cmp	r5, r4
 801880a:	d10b      	bne.n	8018824 <_free_r+0x70>
 801880c:	6824      	ldr	r4, [r4, #0]
 801880e:	4421      	add	r1, r4
 8018810:	1854      	adds	r4, r2, r1
 8018812:	42a3      	cmp	r3, r4
 8018814:	6011      	str	r1, [r2, #0]
 8018816:	d1e0      	bne.n	80187da <_free_r+0x26>
 8018818:	681c      	ldr	r4, [r3, #0]
 801881a:	685b      	ldr	r3, [r3, #4]
 801881c:	6053      	str	r3, [r2, #4]
 801881e:	440c      	add	r4, r1
 8018820:	6014      	str	r4, [r2, #0]
 8018822:	e7da      	b.n	80187da <_free_r+0x26>
 8018824:	d902      	bls.n	801882c <_free_r+0x78>
 8018826:	230c      	movs	r3, #12
 8018828:	6003      	str	r3, [r0, #0]
 801882a:	e7d6      	b.n	80187da <_free_r+0x26>
 801882c:	6825      	ldr	r5, [r4, #0]
 801882e:	1961      	adds	r1, r4, r5
 8018830:	428b      	cmp	r3, r1
 8018832:	bf04      	itt	eq
 8018834:	6819      	ldreq	r1, [r3, #0]
 8018836:	685b      	ldreq	r3, [r3, #4]
 8018838:	6063      	str	r3, [r4, #4]
 801883a:	bf04      	itt	eq
 801883c:	1949      	addeq	r1, r1, r5
 801883e:	6021      	streq	r1, [r4, #0]
 8018840:	6054      	str	r4, [r2, #4]
 8018842:	e7ca      	b.n	80187da <_free_r+0x26>
 8018844:	b003      	add	sp, #12
 8018846:	bd30      	pop	{r4, r5, pc}
 8018848:	20003720 	.word	0x20003720

0801884c <malloc>:
 801884c:	4b02      	ldr	r3, [pc, #8]	; (8018858 <malloc+0xc>)
 801884e:	4601      	mov	r1, r0
 8018850:	6818      	ldr	r0, [r3, #0]
 8018852:	f000 b823 	b.w	801889c <_malloc_r>
 8018856:	bf00      	nop
 8018858:	200003ec 	.word	0x200003ec

0801885c <sbrk_aligned>:
 801885c:	b570      	push	{r4, r5, r6, lr}
 801885e:	4e0e      	ldr	r6, [pc, #56]	; (8018898 <sbrk_aligned+0x3c>)
 8018860:	460c      	mov	r4, r1
 8018862:	6831      	ldr	r1, [r6, #0]
 8018864:	4605      	mov	r5, r0
 8018866:	b911      	cbnz	r1, 801886e <sbrk_aligned+0x12>
 8018868:	f001 fe1a 	bl	801a4a0 <_sbrk_r>
 801886c:	6030      	str	r0, [r6, #0]
 801886e:	4621      	mov	r1, r4
 8018870:	4628      	mov	r0, r5
 8018872:	f001 fe15 	bl	801a4a0 <_sbrk_r>
 8018876:	1c43      	adds	r3, r0, #1
 8018878:	d00a      	beq.n	8018890 <sbrk_aligned+0x34>
 801887a:	1cc4      	adds	r4, r0, #3
 801887c:	f024 0403 	bic.w	r4, r4, #3
 8018880:	42a0      	cmp	r0, r4
 8018882:	d007      	beq.n	8018894 <sbrk_aligned+0x38>
 8018884:	1a21      	subs	r1, r4, r0
 8018886:	4628      	mov	r0, r5
 8018888:	f001 fe0a 	bl	801a4a0 <_sbrk_r>
 801888c:	3001      	adds	r0, #1
 801888e:	d101      	bne.n	8018894 <sbrk_aligned+0x38>
 8018890:	f04f 34ff 	mov.w	r4, #4294967295
 8018894:	4620      	mov	r0, r4
 8018896:	bd70      	pop	{r4, r5, r6, pc}
 8018898:	20003724 	.word	0x20003724

0801889c <_malloc_r>:
 801889c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188a0:	1ccd      	adds	r5, r1, #3
 80188a2:	f025 0503 	bic.w	r5, r5, #3
 80188a6:	3508      	adds	r5, #8
 80188a8:	2d0c      	cmp	r5, #12
 80188aa:	bf38      	it	cc
 80188ac:	250c      	movcc	r5, #12
 80188ae:	2d00      	cmp	r5, #0
 80188b0:	4607      	mov	r7, r0
 80188b2:	db01      	blt.n	80188b8 <_malloc_r+0x1c>
 80188b4:	42a9      	cmp	r1, r5
 80188b6:	d905      	bls.n	80188c4 <_malloc_r+0x28>
 80188b8:	230c      	movs	r3, #12
 80188ba:	603b      	str	r3, [r7, #0]
 80188bc:	2600      	movs	r6, #0
 80188be:	4630      	mov	r0, r6
 80188c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018998 <_malloc_r+0xfc>
 80188c8:	f000 f868 	bl	801899c <__malloc_lock>
 80188cc:	f8d8 3000 	ldr.w	r3, [r8]
 80188d0:	461c      	mov	r4, r3
 80188d2:	bb5c      	cbnz	r4, 801892c <_malloc_r+0x90>
 80188d4:	4629      	mov	r1, r5
 80188d6:	4638      	mov	r0, r7
 80188d8:	f7ff ffc0 	bl	801885c <sbrk_aligned>
 80188dc:	1c43      	adds	r3, r0, #1
 80188de:	4604      	mov	r4, r0
 80188e0:	d155      	bne.n	801898e <_malloc_r+0xf2>
 80188e2:	f8d8 4000 	ldr.w	r4, [r8]
 80188e6:	4626      	mov	r6, r4
 80188e8:	2e00      	cmp	r6, #0
 80188ea:	d145      	bne.n	8018978 <_malloc_r+0xdc>
 80188ec:	2c00      	cmp	r4, #0
 80188ee:	d048      	beq.n	8018982 <_malloc_r+0xe6>
 80188f0:	6823      	ldr	r3, [r4, #0]
 80188f2:	4631      	mov	r1, r6
 80188f4:	4638      	mov	r0, r7
 80188f6:	eb04 0903 	add.w	r9, r4, r3
 80188fa:	f001 fdd1 	bl	801a4a0 <_sbrk_r>
 80188fe:	4581      	cmp	r9, r0
 8018900:	d13f      	bne.n	8018982 <_malloc_r+0xe6>
 8018902:	6821      	ldr	r1, [r4, #0]
 8018904:	1a6d      	subs	r5, r5, r1
 8018906:	4629      	mov	r1, r5
 8018908:	4638      	mov	r0, r7
 801890a:	f7ff ffa7 	bl	801885c <sbrk_aligned>
 801890e:	3001      	adds	r0, #1
 8018910:	d037      	beq.n	8018982 <_malloc_r+0xe6>
 8018912:	6823      	ldr	r3, [r4, #0]
 8018914:	442b      	add	r3, r5
 8018916:	6023      	str	r3, [r4, #0]
 8018918:	f8d8 3000 	ldr.w	r3, [r8]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d038      	beq.n	8018992 <_malloc_r+0xf6>
 8018920:	685a      	ldr	r2, [r3, #4]
 8018922:	42a2      	cmp	r2, r4
 8018924:	d12b      	bne.n	801897e <_malloc_r+0xe2>
 8018926:	2200      	movs	r2, #0
 8018928:	605a      	str	r2, [r3, #4]
 801892a:	e00f      	b.n	801894c <_malloc_r+0xb0>
 801892c:	6822      	ldr	r2, [r4, #0]
 801892e:	1b52      	subs	r2, r2, r5
 8018930:	d41f      	bmi.n	8018972 <_malloc_r+0xd6>
 8018932:	2a0b      	cmp	r2, #11
 8018934:	d917      	bls.n	8018966 <_malloc_r+0xca>
 8018936:	1961      	adds	r1, r4, r5
 8018938:	42a3      	cmp	r3, r4
 801893a:	6025      	str	r5, [r4, #0]
 801893c:	bf18      	it	ne
 801893e:	6059      	strne	r1, [r3, #4]
 8018940:	6863      	ldr	r3, [r4, #4]
 8018942:	bf08      	it	eq
 8018944:	f8c8 1000 	streq.w	r1, [r8]
 8018948:	5162      	str	r2, [r4, r5]
 801894a:	604b      	str	r3, [r1, #4]
 801894c:	4638      	mov	r0, r7
 801894e:	f104 060b 	add.w	r6, r4, #11
 8018952:	f000 f829 	bl	80189a8 <__malloc_unlock>
 8018956:	f026 0607 	bic.w	r6, r6, #7
 801895a:	1d23      	adds	r3, r4, #4
 801895c:	1af2      	subs	r2, r6, r3
 801895e:	d0ae      	beq.n	80188be <_malloc_r+0x22>
 8018960:	1b9b      	subs	r3, r3, r6
 8018962:	50a3      	str	r3, [r4, r2]
 8018964:	e7ab      	b.n	80188be <_malloc_r+0x22>
 8018966:	42a3      	cmp	r3, r4
 8018968:	6862      	ldr	r2, [r4, #4]
 801896a:	d1dd      	bne.n	8018928 <_malloc_r+0x8c>
 801896c:	f8c8 2000 	str.w	r2, [r8]
 8018970:	e7ec      	b.n	801894c <_malloc_r+0xb0>
 8018972:	4623      	mov	r3, r4
 8018974:	6864      	ldr	r4, [r4, #4]
 8018976:	e7ac      	b.n	80188d2 <_malloc_r+0x36>
 8018978:	4634      	mov	r4, r6
 801897a:	6876      	ldr	r6, [r6, #4]
 801897c:	e7b4      	b.n	80188e8 <_malloc_r+0x4c>
 801897e:	4613      	mov	r3, r2
 8018980:	e7cc      	b.n	801891c <_malloc_r+0x80>
 8018982:	230c      	movs	r3, #12
 8018984:	603b      	str	r3, [r7, #0]
 8018986:	4638      	mov	r0, r7
 8018988:	f000 f80e 	bl	80189a8 <__malloc_unlock>
 801898c:	e797      	b.n	80188be <_malloc_r+0x22>
 801898e:	6025      	str	r5, [r4, #0]
 8018990:	e7dc      	b.n	801894c <_malloc_r+0xb0>
 8018992:	605b      	str	r3, [r3, #4]
 8018994:	deff      	udf	#255	; 0xff
 8018996:	bf00      	nop
 8018998:	20003720 	.word	0x20003720

0801899c <__malloc_lock>:
 801899c:	4801      	ldr	r0, [pc, #4]	; (80189a4 <__malloc_lock+0x8>)
 801899e:	f7ff b876 	b.w	8017a8e <__retarget_lock_acquire_recursive>
 80189a2:	bf00      	nop
 80189a4:	2000371c 	.word	0x2000371c

080189a8 <__malloc_unlock>:
 80189a8:	4801      	ldr	r0, [pc, #4]	; (80189b0 <__malloc_unlock+0x8>)
 80189aa:	f7ff b871 	b.w	8017a90 <__retarget_lock_release_recursive>
 80189ae:	bf00      	nop
 80189b0:	2000371c 	.word	0x2000371c

080189b4 <_Balloc>:
 80189b4:	b570      	push	{r4, r5, r6, lr}
 80189b6:	69c6      	ldr	r6, [r0, #28]
 80189b8:	4604      	mov	r4, r0
 80189ba:	460d      	mov	r5, r1
 80189bc:	b976      	cbnz	r6, 80189dc <_Balloc+0x28>
 80189be:	2010      	movs	r0, #16
 80189c0:	f7ff ff44 	bl	801884c <malloc>
 80189c4:	4602      	mov	r2, r0
 80189c6:	61e0      	str	r0, [r4, #28]
 80189c8:	b920      	cbnz	r0, 80189d4 <_Balloc+0x20>
 80189ca:	4b18      	ldr	r3, [pc, #96]	; (8018a2c <_Balloc+0x78>)
 80189cc:	4818      	ldr	r0, [pc, #96]	; (8018a30 <_Balloc+0x7c>)
 80189ce:	216b      	movs	r1, #107	; 0x6b
 80189d0:	f001 fd7e 	bl	801a4d0 <__assert_func>
 80189d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80189d8:	6006      	str	r6, [r0, #0]
 80189da:	60c6      	str	r6, [r0, #12]
 80189dc:	69e6      	ldr	r6, [r4, #28]
 80189de:	68f3      	ldr	r3, [r6, #12]
 80189e0:	b183      	cbz	r3, 8018a04 <_Balloc+0x50>
 80189e2:	69e3      	ldr	r3, [r4, #28]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80189ea:	b9b8      	cbnz	r0, 8018a1c <_Balloc+0x68>
 80189ec:	2101      	movs	r1, #1
 80189ee:	fa01 f605 	lsl.w	r6, r1, r5
 80189f2:	1d72      	adds	r2, r6, #5
 80189f4:	0092      	lsls	r2, r2, #2
 80189f6:	4620      	mov	r0, r4
 80189f8:	f001 fd88 	bl	801a50c <_calloc_r>
 80189fc:	b160      	cbz	r0, 8018a18 <_Balloc+0x64>
 80189fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018a02:	e00e      	b.n	8018a22 <_Balloc+0x6e>
 8018a04:	2221      	movs	r2, #33	; 0x21
 8018a06:	2104      	movs	r1, #4
 8018a08:	4620      	mov	r0, r4
 8018a0a:	f001 fd7f 	bl	801a50c <_calloc_r>
 8018a0e:	69e3      	ldr	r3, [r4, #28]
 8018a10:	60f0      	str	r0, [r6, #12]
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d1e4      	bne.n	80189e2 <_Balloc+0x2e>
 8018a18:	2000      	movs	r0, #0
 8018a1a:	bd70      	pop	{r4, r5, r6, pc}
 8018a1c:	6802      	ldr	r2, [r0, #0]
 8018a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018a22:	2300      	movs	r3, #0
 8018a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a28:	e7f7      	b.n	8018a1a <_Balloc+0x66>
 8018a2a:	bf00      	nop
 8018a2c:	0801df46 	.word	0x0801df46
 8018a30:	0801dfc6 	.word	0x0801dfc6

08018a34 <_Bfree>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	69c6      	ldr	r6, [r0, #28]
 8018a38:	4605      	mov	r5, r0
 8018a3a:	460c      	mov	r4, r1
 8018a3c:	b976      	cbnz	r6, 8018a5c <_Bfree+0x28>
 8018a3e:	2010      	movs	r0, #16
 8018a40:	f7ff ff04 	bl	801884c <malloc>
 8018a44:	4602      	mov	r2, r0
 8018a46:	61e8      	str	r0, [r5, #28]
 8018a48:	b920      	cbnz	r0, 8018a54 <_Bfree+0x20>
 8018a4a:	4b09      	ldr	r3, [pc, #36]	; (8018a70 <_Bfree+0x3c>)
 8018a4c:	4809      	ldr	r0, [pc, #36]	; (8018a74 <_Bfree+0x40>)
 8018a4e:	218f      	movs	r1, #143	; 0x8f
 8018a50:	f001 fd3e 	bl	801a4d0 <__assert_func>
 8018a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018a58:	6006      	str	r6, [r0, #0]
 8018a5a:	60c6      	str	r6, [r0, #12]
 8018a5c:	b13c      	cbz	r4, 8018a6e <_Bfree+0x3a>
 8018a5e:	69eb      	ldr	r3, [r5, #28]
 8018a60:	6862      	ldr	r2, [r4, #4]
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018a68:	6021      	str	r1, [r4, #0]
 8018a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018a6e:	bd70      	pop	{r4, r5, r6, pc}
 8018a70:	0801df46 	.word	0x0801df46
 8018a74:	0801dfc6 	.word	0x0801dfc6

08018a78 <__multadd>:
 8018a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a7c:	690d      	ldr	r5, [r1, #16]
 8018a7e:	4607      	mov	r7, r0
 8018a80:	460c      	mov	r4, r1
 8018a82:	461e      	mov	r6, r3
 8018a84:	f101 0c14 	add.w	ip, r1, #20
 8018a88:	2000      	movs	r0, #0
 8018a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8018a8e:	b299      	uxth	r1, r3
 8018a90:	fb02 6101 	mla	r1, r2, r1, r6
 8018a94:	0c1e      	lsrs	r6, r3, #16
 8018a96:	0c0b      	lsrs	r3, r1, #16
 8018a98:	fb02 3306 	mla	r3, r2, r6, r3
 8018a9c:	b289      	uxth	r1, r1
 8018a9e:	3001      	adds	r0, #1
 8018aa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018aa4:	4285      	cmp	r5, r0
 8018aa6:	f84c 1b04 	str.w	r1, [ip], #4
 8018aaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018aae:	dcec      	bgt.n	8018a8a <__multadd+0x12>
 8018ab0:	b30e      	cbz	r6, 8018af6 <__multadd+0x7e>
 8018ab2:	68a3      	ldr	r3, [r4, #8]
 8018ab4:	42ab      	cmp	r3, r5
 8018ab6:	dc19      	bgt.n	8018aec <__multadd+0x74>
 8018ab8:	6861      	ldr	r1, [r4, #4]
 8018aba:	4638      	mov	r0, r7
 8018abc:	3101      	adds	r1, #1
 8018abe:	f7ff ff79 	bl	80189b4 <_Balloc>
 8018ac2:	4680      	mov	r8, r0
 8018ac4:	b928      	cbnz	r0, 8018ad2 <__multadd+0x5a>
 8018ac6:	4602      	mov	r2, r0
 8018ac8:	4b0c      	ldr	r3, [pc, #48]	; (8018afc <__multadd+0x84>)
 8018aca:	480d      	ldr	r0, [pc, #52]	; (8018b00 <__multadd+0x88>)
 8018acc:	21ba      	movs	r1, #186	; 0xba
 8018ace:	f001 fcff 	bl	801a4d0 <__assert_func>
 8018ad2:	6922      	ldr	r2, [r4, #16]
 8018ad4:	3202      	adds	r2, #2
 8018ad6:	f104 010c 	add.w	r1, r4, #12
 8018ada:	0092      	lsls	r2, r2, #2
 8018adc:	300c      	adds	r0, #12
 8018ade:	f7fe ffd8 	bl	8017a92 <memcpy>
 8018ae2:	4621      	mov	r1, r4
 8018ae4:	4638      	mov	r0, r7
 8018ae6:	f7ff ffa5 	bl	8018a34 <_Bfree>
 8018aea:	4644      	mov	r4, r8
 8018aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018af0:	3501      	adds	r5, #1
 8018af2:	615e      	str	r6, [r3, #20]
 8018af4:	6125      	str	r5, [r4, #16]
 8018af6:	4620      	mov	r0, r4
 8018af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018afc:	0801dfb5 	.word	0x0801dfb5
 8018b00:	0801dfc6 	.word	0x0801dfc6

08018b04 <__s2b>:
 8018b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b08:	460c      	mov	r4, r1
 8018b0a:	4615      	mov	r5, r2
 8018b0c:	461f      	mov	r7, r3
 8018b0e:	2209      	movs	r2, #9
 8018b10:	3308      	adds	r3, #8
 8018b12:	4606      	mov	r6, r0
 8018b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b18:	2100      	movs	r1, #0
 8018b1a:	2201      	movs	r2, #1
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	db09      	blt.n	8018b34 <__s2b+0x30>
 8018b20:	4630      	mov	r0, r6
 8018b22:	f7ff ff47 	bl	80189b4 <_Balloc>
 8018b26:	b940      	cbnz	r0, 8018b3a <__s2b+0x36>
 8018b28:	4602      	mov	r2, r0
 8018b2a:	4b19      	ldr	r3, [pc, #100]	; (8018b90 <__s2b+0x8c>)
 8018b2c:	4819      	ldr	r0, [pc, #100]	; (8018b94 <__s2b+0x90>)
 8018b2e:	21d3      	movs	r1, #211	; 0xd3
 8018b30:	f001 fcce 	bl	801a4d0 <__assert_func>
 8018b34:	0052      	lsls	r2, r2, #1
 8018b36:	3101      	adds	r1, #1
 8018b38:	e7f0      	b.n	8018b1c <__s2b+0x18>
 8018b3a:	9b08      	ldr	r3, [sp, #32]
 8018b3c:	6143      	str	r3, [r0, #20]
 8018b3e:	2d09      	cmp	r5, #9
 8018b40:	f04f 0301 	mov.w	r3, #1
 8018b44:	6103      	str	r3, [r0, #16]
 8018b46:	dd16      	ble.n	8018b76 <__s2b+0x72>
 8018b48:	f104 0909 	add.w	r9, r4, #9
 8018b4c:	46c8      	mov	r8, r9
 8018b4e:	442c      	add	r4, r5
 8018b50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018b54:	4601      	mov	r1, r0
 8018b56:	3b30      	subs	r3, #48	; 0x30
 8018b58:	220a      	movs	r2, #10
 8018b5a:	4630      	mov	r0, r6
 8018b5c:	f7ff ff8c 	bl	8018a78 <__multadd>
 8018b60:	45a0      	cmp	r8, r4
 8018b62:	d1f5      	bne.n	8018b50 <__s2b+0x4c>
 8018b64:	f1a5 0408 	sub.w	r4, r5, #8
 8018b68:	444c      	add	r4, r9
 8018b6a:	1b2d      	subs	r5, r5, r4
 8018b6c:	1963      	adds	r3, r4, r5
 8018b6e:	42bb      	cmp	r3, r7
 8018b70:	db04      	blt.n	8018b7c <__s2b+0x78>
 8018b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b76:	340a      	adds	r4, #10
 8018b78:	2509      	movs	r5, #9
 8018b7a:	e7f6      	b.n	8018b6a <__s2b+0x66>
 8018b7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018b80:	4601      	mov	r1, r0
 8018b82:	3b30      	subs	r3, #48	; 0x30
 8018b84:	220a      	movs	r2, #10
 8018b86:	4630      	mov	r0, r6
 8018b88:	f7ff ff76 	bl	8018a78 <__multadd>
 8018b8c:	e7ee      	b.n	8018b6c <__s2b+0x68>
 8018b8e:	bf00      	nop
 8018b90:	0801dfb5 	.word	0x0801dfb5
 8018b94:	0801dfc6 	.word	0x0801dfc6

08018b98 <__hi0bits>:
 8018b98:	0c03      	lsrs	r3, r0, #16
 8018b9a:	041b      	lsls	r3, r3, #16
 8018b9c:	b9d3      	cbnz	r3, 8018bd4 <__hi0bits+0x3c>
 8018b9e:	0400      	lsls	r0, r0, #16
 8018ba0:	2310      	movs	r3, #16
 8018ba2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018ba6:	bf04      	itt	eq
 8018ba8:	0200      	lsleq	r0, r0, #8
 8018baa:	3308      	addeq	r3, #8
 8018bac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018bb0:	bf04      	itt	eq
 8018bb2:	0100      	lsleq	r0, r0, #4
 8018bb4:	3304      	addeq	r3, #4
 8018bb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018bba:	bf04      	itt	eq
 8018bbc:	0080      	lsleq	r0, r0, #2
 8018bbe:	3302      	addeq	r3, #2
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	db05      	blt.n	8018bd0 <__hi0bits+0x38>
 8018bc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018bc8:	f103 0301 	add.w	r3, r3, #1
 8018bcc:	bf08      	it	eq
 8018bce:	2320      	moveq	r3, #32
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	4770      	bx	lr
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	e7e4      	b.n	8018ba2 <__hi0bits+0xa>

08018bd8 <__lo0bits>:
 8018bd8:	6803      	ldr	r3, [r0, #0]
 8018bda:	f013 0207 	ands.w	r2, r3, #7
 8018bde:	d00c      	beq.n	8018bfa <__lo0bits+0x22>
 8018be0:	07d9      	lsls	r1, r3, #31
 8018be2:	d422      	bmi.n	8018c2a <__lo0bits+0x52>
 8018be4:	079a      	lsls	r2, r3, #30
 8018be6:	bf49      	itett	mi
 8018be8:	085b      	lsrmi	r3, r3, #1
 8018bea:	089b      	lsrpl	r3, r3, #2
 8018bec:	6003      	strmi	r3, [r0, #0]
 8018bee:	2201      	movmi	r2, #1
 8018bf0:	bf5c      	itt	pl
 8018bf2:	6003      	strpl	r3, [r0, #0]
 8018bf4:	2202      	movpl	r2, #2
 8018bf6:	4610      	mov	r0, r2
 8018bf8:	4770      	bx	lr
 8018bfa:	b299      	uxth	r1, r3
 8018bfc:	b909      	cbnz	r1, 8018c02 <__lo0bits+0x2a>
 8018bfe:	0c1b      	lsrs	r3, r3, #16
 8018c00:	2210      	movs	r2, #16
 8018c02:	b2d9      	uxtb	r1, r3
 8018c04:	b909      	cbnz	r1, 8018c0a <__lo0bits+0x32>
 8018c06:	3208      	adds	r2, #8
 8018c08:	0a1b      	lsrs	r3, r3, #8
 8018c0a:	0719      	lsls	r1, r3, #28
 8018c0c:	bf04      	itt	eq
 8018c0e:	091b      	lsreq	r3, r3, #4
 8018c10:	3204      	addeq	r2, #4
 8018c12:	0799      	lsls	r1, r3, #30
 8018c14:	bf04      	itt	eq
 8018c16:	089b      	lsreq	r3, r3, #2
 8018c18:	3202      	addeq	r2, #2
 8018c1a:	07d9      	lsls	r1, r3, #31
 8018c1c:	d403      	bmi.n	8018c26 <__lo0bits+0x4e>
 8018c1e:	085b      	lsrs	r3, r3, #1
 8018c20:	f102 0201 	add.w	r2, r2, #1
 8018c24:	d003      	beq.n	8018c2e <__lo0bits+0x56>
 8018c26:	6003      	str	r3, [r0, #0]
 8018c28:	e7e5      	b.n	8018bf6 <__lo0bits+0x1e>
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	e7e3      	b.n	8018bf6 <__lo0bits+0x1e>
 8018c2e:	2220      	movs	r2, #32
 8018c30:	e7e1      	b.n	8018bf6 <__lo0bits+0x1e>
	...

08018c34 <__i2b>:
 8018c34:	b510      	push	{r4, lr}
 8018c36:	460c      	mov	r4, r1
 8018c38:	2101      	movs	r1, #1
 8018c3a:	f7ff febb 	bl	80189b4 <_Balloc>
 8018c3e:	4602      	mov	r2, r0
 8018c40:	b928      	cbnz	r0, 8018c4e <__i2b+0x1a>
 8018c42:	4b05      	ldr	r3, [pc, #20]	; (8018c58 <__i2b+0x24>)
 8018c44:	4805      	ldr	r0, [pc, #20]	; (8018c5c <__i2b+0x28>)
 8018c46:	f240 1145 	movw	r1, #325	; 0x145
 8018c4a:	f001 fc41 	bl	801a4d0 <__assert_func>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	6144      	str	r4, [r0, #20]
 8018c52:	6103      	str	r3, [r0, #16]
 8018c54:	bd10      	pop	{r4, pc}
 8018c56:	bf00      	nop
 8018c58:	0801dfb5 	.word	0x0801dfb5
 8018c5c:	0801dfc6 	.word	0x0801dfc6

08018c60 <__multiply>:
 8018c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c64:	4691      	mov	r9, r2
 8018c66:	690a      	ldr	r2, [r1, #16]
 8018c68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	bfb8      	it	lt
 8018c70:	460b      	movlt	r3, r1
 8018c72:	460c      	mov	r4, r1
 8018c74:	bfbc      	itt	lt
 8018c76:	464c      	movlt	r4, r9
 8018c78:	4699      	movlt	r9, r3
 8018c7a:	6927      	ldr	r7, [r4, #16]
 8018c7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018c80:	68a3      	ldr	r3, [r4, #8]
 8018c82:	6861      	ldr	r1, [r4, #4]
 8018c84:	eb07 060a 	add.w	r6, r7, sl
 8018c88:	42b3      	cmp	r3, r6
 8018c8a:	b085      	sub	sp, #20
 8018c8c:	bfb8      	it	lt
 8018c8e:	3101      	addlt	r1, #1
 8018c90:	f7ff fe90 	bl	80189b4 <_Balloc>
 8018c94:	b930      	cbnz	r0, 8018ca4 <__multiply+0x44>
 8018c96:	4602      	mov	r2, r0
 8018c98:	4b44      	ldr	r3, [pc, #272]	; (8018dac <__multiply+0x14c>)
 8018c9a:	4845      	ldr	r0, [pc, #276]	; (8018db0 <__multiply+0x150>)
 8018c9c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018ca0:	f001 fc16 	bl	801a4d0 <__assert_func>
 8018ca4:	f100 0514 	add.w	r5, r0, #20
 8018ca8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018cac:	462b      	mov	r3, r5
 8018cae:	2200      	movs	r2, #0
 8018cb0:	4543      	cmp	r3, r8
 8018cb2:	d321      	bcc.n	8018cf8 <__multiply+0x98>
 8018cb4:	f104 0314 	add.w	r3, r4, #20
 8018cb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018cbc:	f109 0314 	add.w	r3, r9, #20
 8018cc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018cc4:	9202      	str	r2, [sp, #8]
 8018cc6:	1b3a      	subs	r2, r7, r4
 8018cc8:	3a15      	subs	r2, #21
 8018cca:	f022 0203 	bic.w	r2, r2, #3
 8018cce:	3204      	adds	r2, #4
 8018cd0:	f104 0115 	add.w	r1, r4, #21
 8018cd4:	428f      	cmp	r7, r1
 8018cd6:	bf38      	it	cc
 8018cd8:	2204      	movcc	r2, #4
 8018cda:	9201      	str	r2, [sp, #4]
 8018cdc:	9a02      	ldr	r2, [sp, #8]
 8018cde:	9303      	str	r3, [sp, #12]
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d80c      	bhi.n	8018cfe <__multiply+0x9e>
 8018ce4:	2e00      	cmp	r6, #0
 8018ce6:	dd03      	ble.n	8018cf0 <__multiply+0x90>
 8018ce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d05b      	beq.n	8018da8 <__multiply+0x148>
 8018cf0:	6106      	str	r6, [r0, #16]
 8018cf2:	b005      	add	sp, #20
 8018cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf8:	f843 2b04 	str.w	r2, [r3], #4
 8018cfc:	e7d8      	b.n	8018cb0 <__multiply+0x50>
 8018cfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8018d02:	f1ba 0f00 	cmp.w	sl, #0
 8018d06:	d024      	beq.n	8018d52 <__multiply+0xf2>
 8018d08:	f104 0e14 	add.w	lr, r4, #20
 8018d0c:	46a9      	mov	r9, r5
 8018d0e:	f04f 0c00 	mov.w	ip, #0
 8018d12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018d16:	f8d9 1000 	ldr.w	r1, [r9]
 8018d1a:	fa1f fb82 	uxth.w	fp, r2
 8018d1e:	b289      	uxth	r1, r1
 8018d20:	fb0a 110b 	mla	r1, sl, fp, r1
 8018d24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018d28:	f8d9 2000 	ldr.w	r2, [r9]
 8018d2c:	4461      	add	r1, ip
 8018d2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018d32:	fb0a c20b 	mla	r2, sl, fp, ip
 8018d36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018d3a:	b289      	uxth	r1, r1
 8018d3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018d40:	4577      	cmp	r7, lr
 8018d42:	f849 1b04 	str.w	r1, [r9], #4
 8018d46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018d4a:	d8e2      	bhi.n	8018d12 <__multiply+0xb2>
 8018d4c:	9a01      	ldr	r2, [sp, #4]
 8018d4e:	f845 c002 	str.w	ip, [r5, r2]
 8018d52:	9a03      	ldr	r2, [sp, #12]
 8018d54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018d58:	3304      	adds	r3, #4
 8018d5a:	f1b9 0f00 	cmp.w	r9, #0
 8018d5e:	d021      	beq.n	8018da4 <__multiply+0x144>
 8018d60:	6829      	ldr	r1, [r5, #0]
 8018d62:	f104 0c14 	add.w	ip, r4, #20
 8018d66:	46ae      	mov	lr, r5
 8018d68:	f04f 0a00 	mov.w	sl, #0
 8018d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8018d70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018d74:	fb09 220b 	mla	r2, r9, fp, r2
 8018d78:	4452      	add	r2, sl
 8018d7a:	b289      	uxth	r1, r1
 8018d7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018d80:	f84e 1b04 	str.w	r1, [lr], #4
 8018d84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018d88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018d8c:	f8be 1000 	ldrh.w	r1, [lr]
 8018d90:	fb09 110a 	mla	r1, r9, sl, r1
 8018d94:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018d98:	4567      	cmp	r7, ip
 8018d9a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018d9e:	d8e5      	bhi.n	8018d6c <__multiply+0x10c>
 8018da0:	9a01      	ldr	r2, [sp, #4]
 8018da2:	50a9      	str	r1, [r5, r2]
 8018da4:	3504      	adds	r5, #4
 8018da6:	e799      	b.n	8018cdc <__multiply+0x7c>
 8018da8:	3e01      	subs	r6, #1
 8018daa:	e79b      	b.n	8018ce4 <__multiply+0x84>
 8018dac:	0801dfb5 	.word	0x0801dfb5
 8018db0:	0801dfc6 	.word	0x0801dfc6

08018db4 <__pow5mult>:
 8018db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018db8:	4615      	mov	r5, r2
 8018dba:	f012 0203 	ands.w	r2, r2, #3
 8018dbe:	4606      	mov	r6, r0
 8018dc0:	460f      	mov	r7, r1
 8018dc2:	d007      	beq.n	8018dd4 <__pow5mult+0x20>
 8018dc4:	4c25      	ldr	r4, [pc, #148]	; (8018e5c <__pow5mult+0xa8>)
 8018dc6:	3a01      	subs	r2, #1
 8018dc8:	2300      	movs	r3, #0
 8018dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018dce:	f7ff fe53 	bl	8018a78 <__multadd>
 8018dd2:	4607      	mov	r7, r0
 8018dd4:	10ad      	asrs	r5, r5, #2
 8018dd6:	d03d      	beq.n	8018e54 <__pow5mult+0xa0>
 8018dd8:	69f4      	ldr	r4, [r6, #28]
 8018dda:	b97c      	cbnz	r4, 8018dfc <__pow5mult+0x48>
 8018ddc:	2010      	movs	r0, #16
 8018dde:	f7ff fd35 	bl	801884c <malloc>
 8018de2:	4602      	mov	r2, r0
 8018de4:	61f0      	str	r0, [r6, #28]
 8018de6:	b928      	cbnz	r0, 8018df4 <__pow5mult+0x40>
 8018de8:	4b1d      	ldr	r3, [pc, #116]	; (8018e60 <__pow5mult+0xac>)
 8018dea:	481e      	ldr	r0, [pc, #120]	; (8018e64 <__pow5mult+0xb0>)
 8018dec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018df0:	f001 fb6e 	bl	801a4d0 <__assert_func>
 8018df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018df8:	6004      	str	r4, [r0, #0]
 8018dfa:	60c4      	str	r4, [r0, #12]
 8018dfc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e04:	b94c      	cbnz	r4, 8018e1a <__pow5mult+0x66>
 8018e06:	f240 2171 	movw	r1, #625	; 0x271
 8018e0a:	4630      	mov	r0, r6
 8018e0c:	f7ff ff12 	bl	8018c34 <__i2b>
 8018e10:	2300      	movs	r3, #0
 8018e12:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e16:	4604      	mov	r4, r0
 8018e18:	6003      	str	r3, [r0, #0]
 8018e1a:	f04f 0900 	mov.w	r9, #0
 8018e1e:	07eb      	lsls	r3, r5, #31
 8018e20:	d50a      	bpl.n	8018e38 <__pow5mult+0x84>
 8018e22:	4639      	mov	r1, r7
 8018e24:	4622      	mov	r2, r4
 8018e26:	4630      	mov	r0, r6
 8018e28:	f7ff ff1a 	bl	8018c60 <__multiply>
 8018e2c:	4639      	mov	r1, r7
 8018e2e:	4680      	mov	r8, r0
 8018e30:	4630      	mov	r0, r6
 8018e32:	f7ff fdff 	bl	8018a34 <_Bfree>
 8018e36:	4647      	mov	r7, r8
 8018e38:	106d      	asrs	r5, r5, #1
 8018e3a:	d00b      	beq.n	8018e54 <__pow5mult+0xa0>
 8018e3c:	6820      	ldr	r0, [r4, #0]
 8018e3e:	b938      	cbnz	r0, 8018e50 <__pow5mult+0x9c>
 8018e40:	4622      	mov	r2, r4
 8018e42:	4621      	mov	r1, r4
 8018e44:	4630      	mov	r0, r6
 8018e46:	f7ff ff0b 	bl	8018c60 <__multiply>
 8018e4a:	6020      	str	r0, [r4, #0]
 8018e4c:	f8c0 9000 	str.w	r9, [r0]
 8018e50:	4604      	mov	r4, r0
 8018e52:	e7e4      	b.n	8018e1e <__pow5mult+0x6a>
 8018e54:	4638      	mov	r0, r7
 8018e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e5a:	bf00      	nop
 8018e5c:	0801e110 	.word	0x0801e110
 8018e60:	0801df46 	.word	0x0801df46
 8018e64:	0801dfc6 	.word	0x0801dfc6

08018e68 <__lshift>:
 8018e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e6c:	460c      	mov	r4, r1
 8018e6e:	6849      	ldr	r1, [r1, #4]
 8018e70:	6923      	ldr	r3, [r4, #16]
 8018e72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018e76:	68a3      	ldr	r3, [r4, #8]
 8018e78:	4607      	mov	r7, r0
 8018e7a:	4691      	mov	r9, r2
 8018e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e80:	f108 0601 	add.w	r6, r8, #1
 8018e84:	42b3      	cmp	r3, r6
 8018e86:	db0b      	blt.n	8018ea0 <__lshift+0x38>
 8018e88:	4638      	mov	r0, r7
 8018e8a:	f7ff fd93 	bl	80189b4 <_Balloc>
 8018e8e:	4605      	mov	r5, r0
 8018e90:	b948      	cbnz	r0, 8018ea6 <__lshift+0x3e>
 8018e92:	4602      	mov	r2, r0
 8018e94:	4b28      	ldr	r3, [pc, #160]	; (8018f38 <__lshift+0xd0>)
 8018e96:	4829      	ldr	r0, [pc, #164]	; (8018f3c <__lshift+0xd4>)
 8018e98:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018e9c:	f001 fb18 	bl	801a4d0 <__assert_func>
 8018ea0:	3101      	adds	r1, #1
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	e7ee      	b.n	8018e84 <__lshift+0x1c>
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	f100 0114 	add.w	r1, r0, #20
 8018eac:	f100 0210 	add.w	r2, r0, #16
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	4553      	cmp	r3, sl
 8018eb4:	db33      	blt.n	8018f1e <__lshift+0xb6>
 8018eb6:	6920      	ldr	r0, [r4, #16]
 8018eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018ebc:	f104 0314 	add.w	r3, r4, #20
 8018ec0:	f019 091f 	ands.w	r9, r9, #31
 8018ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018ecc:	d02b      	beq.n	8018f26 <__lshift+0xbe>
 8018ece:	f1c9 0e20 	rsb	lr, r9, #32
 8018ed2:	468a      	mov	sl, r1
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	6818      	ldr	r0, [r3, #0]
 8018ed8:	fa00 f009 	lsl.w	r0, r0, r9
 8018edc:	4310      	orrs	r0, r2
 8018ede:	f84a 0b04 	str.w	r0, [sl], #4
 8018ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee6:	459c      	cmp	ip, r3
 8018ee8:	fa22 f20e 	lsr.w	r2, r2, lr
 8018eec:	d8f3      	bhi.n	8018ed6 <__lshift+0x6e>
 8018eee:	ebac 0304 	sub.w	r3, ip, r4
 8018ef2:	3b15      	subs	r3, #21
 8018ef4:	f023 0303 	bic.w	r3, r3, #3
 8018ef8:	3304      	adds	r3, #4
 8018efa:	f104 0015 	add.w	r0, r4, #21
 8018efe:	4584      	cmp	ip, r0
 8018f00:	bf38      	it	cc
 8018f02:	2304      	movcc	r3, #4
 8018f04:	50ca      	str	r2, [r1, r3]
 8018f06:	b10a      	cbz	r2, 8018f0c <__lshift+0xa4>
 8018f08:	f108 0602 	add.w	r6, r8, #2
 8018f0c:	3e01      	subs	r6, #1
 8018f0e:	4638      	mov	r0, r7
 8018f10:	612e      	str	r6, [r5, #16]
 8018f12:	4621      	mov	r1, r4
 8018f14:	f7ff fd8e 	bl	8018a34 <_Bfree>
 8018f18:	4628      	mov	r0, r5
 8018f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018f22:	3301      	adds	r3, #1
 8018f24:	e7c5      	b.n	8018eb2 <__lshift+0x4a>
 8018f26:	3904      	subs	r1, #4
 8018f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018f30:	459c      	cmp	ip, r3
 8018f32:	d8f9      	bhi.n	8018f28 <__lshift+0xc0>
 8018f34:	e7ea      	b.n	8018f0c <__lshift+0xa4>
 8018f36:	bf00      	nop
 8018f38:	0801dfb5 	.word	0x0801dfb5
 8018f3c:	0801dfc6 	.word	0x0801dfc6

08018f40 <__mcmp>:
 8018f40:	b530      	push	{r4, r5, lr}
 8018f42:	6902      	ldr	r2, [r0, #16]
 8018f44:	690c      	ldr	r4, [r1, #16]
 8018f46:	1b12      	subs	r2, r2, r4
 8018f48:	d10e      	bne.n	8018f68 <__mcmp+0x28>
 8018f4a:	f100 0314 	add.w	r3, r0, #20
 8018f4e:	3114      	adds	r1, #20
 8018f50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018f54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018f58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018f5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018f60:	42a5      	cmp	r5, r4
 8018f62:	d003      	beq.n	8018f6c <__mcmp+0x2c>
 8018f64:	d305      	bcc.n	8018f72 <__mcmp+0x32>
 8018f66:	2201      	movs	r2, #1
 8018f68:	4610      	mov	r0, r2
 8018f6a:	bd30      	pop	{r4, r5, pc}
 8018f6c:	4283      	cmp	r3, r0
 8018f6e:	d3f3      	bcc.n	8018f58 <__mcmp+0x18>
 8018f70:	e7fa      	b.n	8018f68 <__mcmp+0x28>
 8018f72:	f04f 32ff 	mov.w	r2, #4294967295
 8018f76:	e7f7      	b.n	8018f68 <__mcmp+0x28>

08018f78 <__mdiff>:
 8018f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f7c:	460c      	mov	r4, r1
 8018f7e:	4606      	mov	r6, r0
 8018f80:	4611      	mov	r1, r2
 8018f82:	4620      	mov	r0, r4
 8018f84:	4690      	mov	r8, r2
 8018f86:	f7ff ffdb 	bl	8018f40 <__mcmp>
 8018f8a:	1e05      	subs	r5, r0, #0
 8018f8c:	d110      	bne.n	8018fb0 <__mdiff+0x38>
 8018f8e:	4629      	mov	r1, r5
 8018f90:	4630      	mov	r0, r6
 8018f92:	f7ff fd0f 	bl	80189b4 <_Balloc>
 8018f96:	b930      	cbnz	r0, 8018fa6 <__mdiff+0x2e>
 8018f98:	4b3a      	ldr	r3, [pc, #232]	; (8019084 <__mdiff+0x10c>)
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	f240 2137 	movw	r1, #567	; 0x237
 8018fa0:	4839      	ldr	r0, [pc, #228]	; (8019088 <__mdiff+0x110>)
 8018fa2:	f001 fa95 	bl	801a4d0 <__assert_func>
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb0:	bfa4      	itt	ge
 8018fb2:	4643      	movge	r3, r8
 8018fb4:	46a0      	movge	r8, r4
 8018fb6:	4630      	mov	r0, r6
 8018fb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018fbc:	bfa6      	itte	ge
 8018fbe:	461c      	movge	r4, r3
 8018fc0:	2500      	movge	r5, #0
 8018fc2:	2501      	movlt	r5, #1
 8018fc4:	f7ff fcf6 	bl	80189b4 <_Balloc>
 8018fc8:	b920      	cbnz	r0, 8018fd4 <__mdiff+0x5c>
 8018fca:	4b2e      	ldr	r3, [pc, #184]	; (8019084 <__mdiff+0x10c>)
 8018fcc:	4602      	mov	r2, r0
 8018fce:	f240 2145 	movw	r1, #581	; 0x245
 8018fd2:	e7e5      	b.n	8018fa0 <__mdiff+0x28>
 8018fd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018fd8:	6926      	ldr	r6, [r4, #16]
 8018fda:	60c5      	str	r5, [r0, #12]
 8018fdc:	f104 0914 	add.w	r9, r4, #20
 8018fe0:	f108 0514 	add.w	r5, r8, #20
 8018fe4:	f100 0e14 	add.w	lr, r0, #20
 8018fe8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018fec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018ff0:	f108 0210 	add.w	r2, r8, #16
 8018ff4:	46f2      	mov	sl, lr
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ffc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019000:	fa11 f88b 	uxtah	r8, r1, fp
 8019004:	b299      	uxth	r1, r3
 8019006:	0c1b      	lsrs	r3, r3, #16
 8019008:	eba8 0801 	sub.w	r8, r8, r1
 801900c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019010:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019014:	fa1f f888 	uxth.w	r8, r8
 8019018:	1419      	asrs	r1, r3, #16
 801901a:	454e      	cmp	r6, r9
 801901c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019020:	f84a 3b04 	str.w	r3, [sl], #4
 8019024:	d8e8      	bhi.n	8018ff8 <__mdiff+0x80>
 8019026:	1b33      	subs	r3, r6, r4
 8019028:	3b15      	subs	r3, #21
 801902a:	f023 0303 	bic.w	r3, r3, #3
 801902e:	3304      	adds	r3, #4
 8019030:	3415      	adds	r4, #21
 8019032:	42a6      	cmp	r6, r4
 8019034:	bf38      	it	cc
 8019036:	2304      	movcc	r3, #4
 8019038:	441d      	add	r5, r3
 801903a:	4473      	add	r3, lr
 801903c:	469e      	mov	lr, r3
 801903e:	462e      	mov	r6, r5
 8019040:	4566      	cmp	r6, ip
 8019042:	d30e      	bcc.n	8019062 <__mdiff+0xea>
 8019044:	f10c 0203 	add.w	r2, ip, #3
 8019048:	1b52      	subs	r2, r2, r5
 801904a:	f022 0203 	bic.w	r2, r2, #3
 801904e:	3d03      	subs	r5, #3
 8019050:	45ac      	cmp	ip, r5
 8019052:	bf38      	it	cc
 8019054:	2200      	movcc	r2, #0
 8019056:	4413      	add	r3, r2
 8019058:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801905c:	b17a      	cbz	r2, 801907e <__mdiff+0x106>
 801905e:	6107      	str	r7, [r0, #16]
 8019060:	e7a4      	b.n	8018fac <__mdiff+0x34>
 8019062:	f856 8b04 	ldr.w	r8, [r6], #4
 8019066:	fa11 f288 	uxtah	r2, r1, r8
 801906a:	1414      	asrs	r4, r2, #16
 801906c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019070:	b292      	uxth	r2, r2
 8019072:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8019076:	f84e 2b04 	str.w	r2, [lr], #4
 801907a:	1421      	asrs	r1, r4, #16
 801907c:	e7e0      	b.n	8019040 <__mdiff+0xc8>
 801907e:	3f01      	subs	r7, #1
 8019080:	e7ea      	b.n	8019058 <__mdiff+0xe0>
 8019082:	bf00      	nop
 8019084:	0801dfb5 	.word	0x0801dfb5
 8019088:	0801dfc6 	.word	0x0801dfc6

0801908c <__ulp>:
 801908c:	b082      	sub	sp, #8
 801908e:	ed8d 0b00 	vstr	d0, [sp]
 8019092:	9a01      	ldr	r2, [sp, #4]
 8019094:	4b0f      	ldr	r3, [pc, #60]	; (80190d4 <__ulp+0x48>)
 8019096:	4013      	ands	r3, r2
 8019098:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801909c:	2b00      	cmp	r3, #0
 801909e:	dc08      	bgt.n	80190b2 <__ulp+0x26>
 80190a0:	425b      	negs	r3, r3
 80190a2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80190a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80190aa:	da04      	bge.n	80190b6 <__ulp+0x2a>
 80190ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80190b0:	4113      	asrs	r3, r2
 80190b2:	2200      	movs	r2, #0
 80190b4:	e008      	b.n	80190c8 <__ulp+0x3c>
 80190b6:	f1a2 0314 	sub.w	r3, r2, #20
 80190ba:	2b1e      	cmp	r3, #30
 80190bc:	bfda      	itte	le
 80190be:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80190c2:	40da      	lsrle	r2, r3
 80190c4:	2201      	movgt	r2, #1
 80190c6:	2300      	movs	r3, #0
 80190c8:	4619      	mov	r1, r3
 80190ca:	4610      	mov	r0, r2
 80190cc:	ec41 0b10 	vmov	d0, r0, r1
 80190d0:	b002      	add	sp, #8
 80190d2:	4770      	bx	lr
 80190d4:	7ff00000 	.word	0x7ff00000

080190d8 <__b2d>:
 80190d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190dc:	6906      	ldr	r6, [r0, #16]
 80190de:	f100 0814 	add.w	r8, r0, #20
 80190e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80190e6:	1f37      	subs	r7, r6, #4
 80190e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80190ec:	4610      	mov	r0, r2
 80190ee:	f7ff fd53 	bl	8018b98 <__hi0bits>
 80190f2:	f1c0 0320 	rsb	r3, r0, #32
 80190f6:	280a      	cmp	r0, #10
 80190f8:	600b      	str	r3, [r1, #0]
 80190fa:	491b      	ldr	r1, [pc, #108]	; (8019168 <__b2d+0x90>)
 80190fc:	dc15      	bgt.n	801912a <__b2d+0x52>
 80190fe:	f1c0 0c0b 	rsb	ip, r0, #11
 8019102:	fa22 f30c 	lsr.w	r3, r2, ip
 8019106:	45b8      	cmp	r8, r7
 8019108:	ea43 0501 	orr.w	r5, r3, r1
 801910c:	bf34      	ite	cc
 801910e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019112:	2300      	movcs	r3, #0
 8019114:	3015      	adds	r0, #21
 8019116:	fa02 f000 	lsl.w	r0, r2, r0
 801911a:	fa23 f30c 	lsr.w	r3, r3, ip
 801911e:	4303      	orrs	r3, r0
 8019120:	461c      	mov	r4, r3
 8019122:	ec45 4b10 	vmov	d0, r4, r5
 8019126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801912a:	45b8      	cmp	r8, r7
 801912c:	bf3a      	itte	cc
 801912e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019132:	f1a6 0708 	subcc.w	r7, r6, #8
 8019136:	2300      	movcs	r3, #0
 8019138:	380b      	subs	r0, #11
 801913a:	d012      	beq.n	8019162 <__b2d+0x8a>
 801913c:	f1c0 0120 	rsb	r1, r0, #32
 8019140:	fa23 f401 	lsr.w	r4, r3, r1
 8019144:	4082      	lsls	r2, r0
 8019146:	4322      	orrs	r2, r4
 8019148:	4547      	cmp	r7, r8
 801914a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801914e:	bf8c      	ite	hi
 8019150:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019154:	2200      	movls	r2, #0
 8019156:	4083      	lsls	r3, r0
 8019158:	40ca      	lsrs	r2, r1
 801915a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801915e:	4313      	orrs	r3, r2
 8019160:	e7de      	b.n	8019120 <__b2d+0x48>
 8019162:	ea42 0501 	orr.w	r5, r2, r1
 8019166:	e7db      	b.n	8019120 <__b2d+0x48>
 8019168:	3ff00000 	.word	0x3ff00000

0801916c <__d2b>:
 801916c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019170:	460f      	mov	r7, r1
 8019172:	2101      	movs	r1, #1
 8019174:	ec59 8b10 	vmov	r8, r9, d0
 8019178:	4616      	mov	r6, r2
 801917a:	f7ff fc1b 	bl	80189b4 <_Balloc>
 801917e:	4604      	mov	r4, r0
 8019180:	b930      	cbnz	r0, 8019190 <__d2b+0x24>
 8019182:	4602      	mov	r2, r0
 8019184:	4b24      	ldr	r3, [pc, #144]	; (8019218 <__d2b+0xac>)
 8019186:	4825      	ldr	r0, [pc, #148]	; (801921c <__d2b+0xb0>)
 8019188:	f240 310f 	movw	r1, #783	; 0x30f
 801918c:	f001 f9a0 	bl	801a4d0 <__assert_func>
 8019190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019198:	bb2d      	cbnz	r5, 80191e6 <__d2b+0x7a>
 801919a:	9301      	str	r3, [sp, #4]
 801919c:	f1b8 0300 	subs.w	r3, r8, #0
 80191a0:	d026      	beq.n	80191f0 <__d2b+0x84>
 80191a2:	4668      	mov	r0, sp
 80191a4:	9300      	str	r3, [sp, #0]
 80191a6:	f7ff fd17 	bl	8018bd8 <__lo0bits>
 80191aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80191ae:	b1e8      	cbz	r0, 80191ec <__d2b+0x80>
 80191b0:	f1c0 0320 	rsb	r3, r0, #32
 80191b4:	fa02 f303 	lsl.w	r3, r2, r3
 80191b8:	430b      	orrs	r3, r1
 80191ba:	40c2      	lsrs	r2, r0
 80191bc:	6163      	str	r3, [r4, #20]
 80191be:	9201      	str	r2, [sp, #4]
 80191c0:	9b01      	ldr	r3, [sp, #4]
 80191c2:	61a3      	str	r3, [r4, #24]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	bf14      	ite	ne
 80191c8:	2202      	movne	r2, #2
 80191ca:	2201      	moveq	r2, #1
 80191cc:	6122      	str	r2, [r4, #16]
 80191ce:	b1bd      	cbz	r5, 8019200 <__d2b+0x94>
 80191d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80191d4:	4405      	add	r5, r0
 80191d6:	603d      	str	r5, [r7, #0]
 80191d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80191dc:	6030      	str	r0, [r6, #0]
 80191de:	4620      	mov	r0, r4
 80191e0:	b003      	add	sp, #12
 80191e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80191ea:	e7d6      	b.n	801919a <__d2b+0x2e>
 80191ec:	6161      	str	r1, [r4, #20]
 80191ee:	e7e7      	b.n	80191c0 <__d2b+0x54>
 80191f0:	a801      	add	r0, sp, #4
 80191f2:	f7ff fcf1 	bl	8018bd8 <__lo0bits>
 80191f6:	9b01      	ldr	r3, [sp, #4]
 80191f8:	6163      	str	r3, [r4, #20]
 80191fa:	3020      	adds	r0, #32
 80191fc:	2201      	movs	r2, #1
 80191fe:	e7e5      	b.n	80191cc <__d2b+0x60>
 8019200:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019204:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019208:	6038      	str	r0, [r7, #0]
 801920a:	6918      	ldr	r0, [r3, #16]
 801920c:	f7ff fcc4 	bl	8018b98 <__hi0bits>
 8019210:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019214:	e7e2      	b.n	80191dc <__d2b+0x70>
 8019216:	bf00      	nop
 8019218:	0801dfb5 	.word	0x0801dfb5
 801921c:	0801dfc6 	.word	0x0801dfc6

08019220 <__ratio>:
 8019220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019224:	4688      	mov	r8, r1
 8019226:	4669      	mov	r1, sp
 8019228:	4681      	mov	r9, r0
 801922a:	f7ff ff55 	bl	80190d8 <__b2d>
 801922e:	a901      	add	r1, sp, #4
 8019230:	4640      	mov	r0, r8
 8019232:	ec55 4b10 	vmov	r4, r5, d0
 8019236:	f7ff ff4f 	bl	80190d8 <__b2d>
 801923a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801923e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019242:	eba3 0c02 	sub.w	ip, r3, r2
 8019246:	e9dd 3200 	ldrd	r3, r2, [sp]
 801924a:	1a9b      	subs	r3, r3, r2
 801924c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019250:	ec51 0b10 	vmov	r0, r1, d0
 8019254:	2b00      	cmp	r3, #0
 8019256:	bfd6      	itet	le
 8019258:	460a      	movle	r2, r1
 801925a:	462a      	movgt	r2, r5
 801925c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019260:	468b      	mov	fp, r1
 8019262:	462f      	mov	r7, r5
 8019264:	bfd4      	ite	le
 8019266:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801926a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801926e:	4620      	mov	r0, r4
 8019270:	ee10 2a10 	vmov	r2, s0
 8019274:	465b      	mov	r3, fp
 8019276:	4639      	mov	r1, r7
 8019278:	f7e7 fb10 	bl	800089c <__aeabi_ddiv>
 801927c:	ec41 0b10 	vmov	d0, r0, r1
 8019280:	b003      	add	sp, #12
 8019282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019286 <__copybits>:
 8019286:	3901      	subs	r1, #1
 8019288:	b570      	push	{r4, r5, r6, lr}
 801928a:	1149      	asrs	r1, r1, #5
 801928c:	6914      	ldr	r4, [r2, #16]
 801928e:	3101      	adds	r1, #1
 8019290:	f102 0314 	add.w	r3, r2, #20
 8019294:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801929c:	1f05      	subs	r5, r0, #4
 801929e:	42a3      	cmp	r3, r4
 80192a0:	d30c      	bcc.n	80192bc <__copybits+0x36>
 80192a2:	1aa3      	subs	r3, r4, r2
 80192a4:	3b11      	subs	r3, #17
 80192a6:	f023 0303 	bic.w	r3, r3, #3
 80192aa:	3211      	adds	r2, #17
 80192ac:	42a2      	cmp	r2, r4
 80192ae:	bf88      	it	hi
 80192b0:	2300      	movhi	r3, #0
 80192b2:	4418      	add	r0, r3
 80192b4:	2300      	movs	r3, #0
 80192b6:	4288      	cmp	r0, r1
 80192b8:	d305      	bcc.n	80192c6 <__copybits+0x40>
 80192ba:	bd70      	pop	{r4, r5, r6, pc}
 80192bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80192c0:	f845 6f04 	str.w	r6, [r5, #4]!
 80192c4:	e7eb      	b.n	801929e <__copybits+0x18>
 80192c6:	f840 3b04 	str.w	r3, [r0], #4
 80192ca:	e7f4      	b.n	80192b6 <__copybits+0x30>

080192cc <__any_on>:
 80192cc:	f100 0214 	add.w	r2, r0, #20
 80192d0:	6900      	ldr	r0, [r0, #16]
 80192d2:	114b      	asrs	r3, r1, #5
 80192d4:	4298      	cmp	r0, r3
 80192d6:	b510      	push	{r4, lr}
 80192d8:	db11      	blt.n	80192fe <__any_on+0x32>
 80192da:	dd0a      	ble.n	80192f2 <__any_on+0x26>
 80192dc:	f011 011f 	ands.w	r1, r1, #31
 80192e0:	d007      	beq.n	80192f2 <__any_on+0x26>
 80192e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80192e6:	fa24 f001 	lsr.w	r0, r4, r1
 80192ea:	fa00 f101 	lsl.w	r1, r0, r1
 80192ee:	428c      	cmp	r4, r1
 80192f0:	d10b      	bne.n	801930a <__any_on+0x3e>
 80192f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80192f6:	4293      	cmp	r3, r2
 80192f8:	d803      	bhi.n	8019302 <__any_on+0x36>
 80192fa:	2000      	movs	r0, #0
 80192fc:	bd10      	pop	{r4, pc}
 80192fe:	4603      	mov	r3, r0
 8019300:	e7f7      	b.n	80192f2 <__any_on+0x26>
 8019302:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019306:	2900      	cmp	r1, #0
 8019308:	d0f5      	beq.n	80192f6 <__any_on+0x2a>
 801930a:	2001      	movs	r0, #1
 801930c:	e7f6      	b.n	80192fc <__any_on+0x30>

0801930e <sulp>:
 801930e:	b570      	push	{r4, r5, r6, lr}
 8019310:	4604      	mov	r4, r0
 8019312:	460d      	mov	r5, r1
 8019314:	ec45 4b10 	vmov	d0, r4, r5
 8019318:	4616      	mov	r6, r2
 801931a:	f7ff feb7 	bl	801908c <__ulp>
 801931e:	ec51 0b10 	vmov	r0, r1, d0
 8019322:	b17e      	cbz	r6, 8019344 <sulp+0x36>
 8019324:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019328:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801932c:	2b00      	cmp	r3, #0
 801932e:	dd09      	ble.n	8019344 <sulp+0x36>
 8019330:	051b      	lsls	r3, r3, #20
 8019332:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019336:	2400      	movs	r4, #0
 8019338:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801933c:	4622      	mov	r2, r4
 801933e:	462b      	mov	r3, r5
 8019340:	f7e7 f982 	bl	8000648 <__aeabi_dmul>
 8019344:	bd70      	pop	{r4, r5, r6, pc}
	...

08019348 <_strtod_l>:
 8019348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801934c:	ed2d 8b02 	vpush	{d8}
 8019350:	b09b      	sub	sp, #108	; 0x6c
 8019352:	4604      	mov	r4, r0
 8019354:	9213      	str	r2, [sp, #76]	; 0x4c
 8019356:	2200      	movs	r2, #0
 8019358:	9216      	str	r2, [sp, #88]	; 0x58
 801935a:	460d      	mov	r5, r1
 801935c:	f04f 0800 	mov.w	r8, #0
 8019360:	f04f 0900 	mov.w	r9, #0
 8019364:	460a      	mov	r2, r1
 8019366:	9215      	str	r2, [sp, #84]	; 0x54
 8019368:	7811      	ldrb	r1, [r2, #0]
 801936a:	292b      	cmp	r1, #43	; 0x2b
 801936c:	d04c      	beq.n	8019408 <_strtod_l+0xc0>
 801936e:	d83a      	bhi.n	80193e6 <_strtod_l+0x9e>
 8019370:	290d      	cmp	r1, #13
 8019372:	d834      	bhi.n	80193de <_strtod_l+0x96>
 8019374:	2908      	cmp	r1, #8
 8019376:	d834      	bhi.n	80193e2 <_strtod_l+0x9a>
 8019378:	2900      	cmp	r1, #0
 801937a:	d03d      	beq.n	80193f8 <_strtod_l+0xb0>
 801937c:	2200      	movs	r2, #0
 801937e:	920a      	str	r2, [sp, #40]	; 0x28
 8019380:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019382:	7832      	ldrb	r2, [r6, #0]
 8019384:	2a30      	cmp	r2, #48	; 0x30
 8019386:	f040 80b4 	bne.w	80194f2 <_strtod_l+0x1aa>
 801938a:	7872      	ldrb	r2, [r6, #1]
 801938c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019390:	2a58      	cmp	r2, #88	; 0x58
 8019392:	d170      	bne.n	8019476 <_strtod_l+0x12e>
 8019394:	9302      	str	r3, [sp, #8]
 8019396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019398:	9301      	str	r3, [sp, #4]
 801939a:	ab16      	add	r3, sp, #88	; 0x58
 801939c:	9300      	str	r3, [sp, #0]
 801939e:	4a8e      	ldr	r2, [pc, #568]	; (80195d8 <_strtod_l+0x290>)
 80193a0:	ab17      	add	r3, sp, #92	; 0x5c
 80193a2:	a915      	add	r1, sp, #84	; 0x54
 80193a4:	4620      	mov	r0, r4
 80193a6:	f001 f92f 	bl	801a608 <__gethex>
 80193aa:	f010 070f 	ands.w	r7, r0, #15
 80193ae:	4605      	mov	r5, r0
 80193b0:	d005      	beq.n	80193be <_strtod_l+0x76>
 80193b2:	2f06      	cmp	r7, #6
 80193b4:	d12a      	bne.n	801940c <_strtod_l+0xc4>
 80193b6:	3601      	adds	r6, #1
 80193b8:	2300      	movs	r3, #0
 80193ba:	9615      	str	r6, [sp, #84]	; 0x54
 80193bc:	930a      	str	r3, [sp, #40]	; 0x28
 80193be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	f040 857f 	bne.w	8019ec4 <_strtod_l+0xb7c>
 80193c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193c8:	b1db      	cbz	r3, 8019402 <_strtod_l+0xba>
 80193ca:	4642      	mov	r2, r8
 80193cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80193d0:	ec43 2b10 	vmov	d0, r2, r3
 80193d4:	b01b      	add	sp, #108	; 0x6c
 80193d6:	ecbd 8b02 	vpop	{d8}
 80193da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193de:	2920      	cmp	r1, #32
 80193e0:	d1cc      	bne.n	801937c <_strtod_l+0x34>
 80193e2:	3201      	adds	r2, #1
 80193e4:	e7bf      	b.n	8019366 <_strtod_l+0x1e>
 80193e6:	292d      	cmp	r1, #45	; 0x2d
 80193e8:	d1c8      	bne.n	801937c <_strtod_l+0x34>
 80193ea:	2101      	movs	r1, #1
 80193ec:	910a      	str	r1, [sp, #40]	; 0x28
 80193ee:	1c51      	adds	r1, r2, #1
 80193f0:	9115      	str	r1, [sp, #84]	; 0x54
 80193f2:	7852      	ldrb	r2, [r2, #1]
 80193f4:	2a00      	cmp	r2, #0
 80193f6:	d1c3      	bne.n	8019380 <_strtod_l+0x38>
 80193f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80193fa:	9515      	str	r5, [sp, #84]	; 0x54
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f040 855f 	bne.w	8019ec0 <_strtod_l+0xb78>
 8019402:	4642      	mov	r2, r8
 8019404:	464b      	mov	r3, r9
 8019406:	e7e3      	b.n	80193d0 <_strtod_l+0x88>
 8019408:	2100      	movs	r1, #0
 801940a:	e7ef      	b.n	80193ec <_strtod_l+0xa4>
 801940c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801940e:	b13a      	cbz	r2, 8019420 <_strtod_l+0xd8>
 8019410:	2135      	movs	r1, #53	; 0x35
 8019412:	a818      	add	r0, sp, #96	; 0x60
 8019414:	f7ff ff37 	bl	8019286 <__copybits>
 8019418:	9916      	ldr	r1, [sp, #88]	; 0x58
 801941a:	4620      	mov	r0, r4
 801941c:	f7ff fb0a 	bl	8018a34 <_Bfree>
 8019420:	3f01      	subs	r7, #1
 8019422:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019424:	2f04      	cmp	r7, #4
 8019426:	d806      	bhi.n	8019436 <_strtod_l+0xee>
 8019428:	e8df f007 	tbb	[pc, r7]
 801942c:	201d0314 	.word	0x201d0314
 8019430:	14          	.byte	0x14
 8019431:	00          	.byte	0x00
 8019432:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8019436:	05e9      	lsls	r1, r5, #23
 8019438:	bf48      	it	mi
 801943a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801943e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019442:	0d1b      	lsrs	r3, r3, #20
 8019444:	051b      	lsls	r3, r3, #20
 8019446:	2b00      	cmp	r3, #0
 8019448:	d1b9      	bne.n	80193be <_strtod_l+0x76>
 801944a:	f7fe faf5 	bl	8017a38 <__errno>
 801944e:	2322      	movs	r3, #34	; 0x22
 8019450:	6003      	str	r3, [r0, #0]
 8019452:	e7b4      	b.n	80193be <_strtod_l+0x76>
 8019454:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019458:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801945c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019460:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019464:	e7e7      	b.n	8019436 <_strtod_l+0xee>
 8019466:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80195e0 <_strtod_l+0x298>
 801946a:	e7e4      	b.n	8019436 <_strtod_l+0xee>
 801946c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019470:	f04f 38ff 	mov.w	r8, #4294967295
 8019474:	e7df      	b.n	8019436 <_strtod_l+0xee>
 8019476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019478:	1c5a      	adds	r2, r3, #1
 801947a:	9215      	str	r2, [sp, #84]	; 0x54
 801947c:	785b      	ldrb	r3, [r3, #1]
 801947e:	2b30      	cmp	r3, #48	; 0x30
 8019480:	d0f9      	beq.n	8019476 <_strtod_l+0x12e>
 8019482:	2b00      	cmp	r3, #0
 8019484:	d09b      	beq.n	80193be <_strtod_l+0x76>
 8019486:	2301      	movs	r3, #1
 8019488:	f04f 0a00 	mov.w	sl, #0
 801948c:	9304      	str	r3, [sp, #16]
 801948e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019490:	930b      	str	r3, [sp, #44]	; 0x2c
 8019492:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019496:	46d3      	mov	fp, sl
 8019498:	220a      	movs	r2, #10
 801949a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801949c:	7806      	ldrb	r6, [r0, #0]
 801949e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80194a2:	b2d9      	uxtb	r1, r3
 80194a4:	2909      	cmp	r1, #9
 80194a6:	d926      	bls.n	80194f6 <_strtod_l+0x1ae>
 80194a8:	494c      	ldr	r1, [pc, #304]	; (80195dc <_strtod_l+0x294>)
 80194aa:	2201      	movs	r2, #1
 80194ac:	f000 ffe6 	bl	801a47c <strncmp>
 80194b0:	2800      	cmp	r0, #0
 80194b2:	d030      	beq.n	8019516 <_strtod_l+0x1ce>
 80194b4:	2000      	movs	r0, #0
 80194b6:	4632      	mov	r2, r6
 80194b8:	9005      	str	r0, [sp, #20]
 80194ba:	465e      	mov	r6, fp
 80194bc:	4603      	mov	r3, r0
 80194be:	2a65      	cmp	r2, #101	; 0x65
 80194c0:	d001      	beq.n	80194c6 <_strtod_l+0x17e>
 80194c2:	2a45      	cmp	r2, #69	; 0x45
 80194c4:	d113      	bne.n	80194ee <_strtod_l+0x1a6>
 80194c6:	b91e      	cbnz	r6, 80194d0 <_strtod_l+0x188>
 80194c8:	9a04      	ldr	r2, [sp, #16]
 80194ca:	4302      	orrs	r2, r0
 80194cc:	d094      	beq.n	80193f8 <_strtod_l+0xb0>
 80194ce:	2600      	movs	r6, #0
 80194d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80194d2:	1c6a      	adds	r2, r5, #1
 80194d4:	9215      	str	r2, [sp, #84]	; 0x54
 80194d6:	786a      	ldrb	r2, [r5, #1]
 80194d8:	2a2b      	cmp	r2, #43	; 0x2b
 80194da:	d074      	beq.n	80195c6 <_strtod_l+0x27e>
 80194dc:	2a2d      	cmp	r2, #45	; 0x2d
 80194de:	d078      	beq.n	80195d2 <_strtod_l+0x28a>
 80194e0:	f04f 0c00 	mov.w	ip, #0
 80194e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80194e8:	2909      	cmp	r1, #9
 80194ea:	d97f      	bls.n	80195ec <_strtod_l+0x2a4>
 80194ec:	9515      	str	r5, [sp, #84]	; 0x54
 80194ee:	2700      	movs	r7, #0
 80194f0:	e09e      	b.n	8019630 <_strtod_l+0x2e8>
 80194f2:	2300      	movs	r3, #0
 80194f4:	e7c8      	b.n	8019488 <_strtod_l+0x140>
 80194f6:	f1bb 0f08 	cmp.w	fp, #8
 80194fa:	bfd8      	it	le
 80194fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80194fe:	f100 0001 	add.w	r0, r0, #1
 8019502:	bfda      	itte	le
 8019504:	fb02 3301 	mlale	r3, r2, r1, r3
 8019508:	9309      	strle	r3, [sp, #36]	; 0x24
 801950a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801950e:	f10b 0b01 	add.w	fp, fp, #1
 8019512:	9015      	str	r0, [sp, #84]	; 0x54
 8019514:	e7c1      	b.n	801949a <_strtod_l+0x152>
 8019516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019518:	1c5a      	adds	r2, r3, #1
 801951a:	9215      	str	r2, [sp, #84]	; 0x54
 801951c:	785a      	ldrb	r2, [r3, #1]
 801951e:	f1bb 0f00 	cmp.w	fp, #0
 8019522:	d037      	beq.n	8019594 <_strtod_l+0x24c>
 8019524:	9005      	str	r0, [sp, #20]
 8019526:	465e      	mov	r6, fp
 8019528:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801952c:	2b09      	cmp	r3, #9
 801952e:	d912      	bls.n	8019556 <_strtod_l+0x20e>
 8019530:	2301      	movs	r3, #1
 8019532:	e7c4      	b.n	80194be <_strtod_l+0x176>
 8019534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019536:	1c5a      	adds	r2, r3, #1
 8019538:	9215      	str	r2, [sp, #84]	; 0x54
 801953a:	785a      	ldrb	r2, [r3, #1]
 801953c:	3001      	adds	r0, #1
 801953e:	2a30      	cmp	r2, #48	; 0x30
 8019540:	d0f8      	beq.n	8019534 <_strtod_l+0x1ec>
 8019542:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019546:	2b08      	cmp	r3, #8
 8019548:	f200 84c1 	bhi.w	8019ece <_strtod_l+0xb86>
 801954c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801954e:	9005      	str	r0, [sp, #20]
 8019550:	2000      	movs	r0, #0
 8019552:	930b      	str	r3, [sp, #44]	; 0x2c
 8019554:	4606      	mov	r6, r0
 8019556:	3a30      	subs	r2, #48	; 0x30
 8019558:	f100 0301 	add.w	r3, r0, #1
 801955c:	d014      	beq.n	8019588 <_strtod_l+0x240>
 801955e:	9905      	ldr	r1, [sp, #20]
 8019560:	4419      	add	r1, r3
 8019562:	9105      	str	r1, [sp, #20]
 8019564:	4633      	mov	r3, r6
 8019566:	eb00 0c06 	add.w	ip, r0, r6
 801956a:	210a      	movs	r1, #10
 801956c:	4563      	cmp	r3, ip
 801956e:	d113      	bne.n	8019598 <_strtod_l+0x250>
 8019570:	1833      	adds	r3, r6, r0
 8019572:	2b08      	cmp	r3, #8
 8019574:	f106 0601 	add.w	r6, r6, #1
 8019578:	4406      	add	r6, r0
 801957a:	dc1a      	bgt.n	80195b2 <_strtod_l+0x26a>
 801957c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801957e:	230a      	movs	r3, #10
 8019580:	fb03 2301 	mla	r3, r3, r1, r2
 8019584:	9309      	str	r3, [sp, #36]	; 0x24
 8019586:	2300      	movs	r3, #0
 8019588:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801958a:	1c51      	adds	r1, r2, #1
 801958c:	9115      	str	r1, [sp, #84]	; 0x54
 801958e:	7852      	ldrb	r2, [r2, #1]
 8019590:	4618      	mov	r0, r3
 8019592:	e7c9      	b.n	8019528 <_strtod_l+0x1e0>
 8019594:	4658      	mov	r0, fp
 8019596:	e7d2      	b.n	801953e <_strtod_l+0x1f6>
 8019598:	2b08      	cmp	r3, #8
 801959a:	f103 0301 	add.w	r3, r3, #1
 801959e:	dc03      	bgt.n	80195a8 <_strtod_l+0x260>
 80195a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80195a2:	434f      	muls	r7, r1
 80195a4:	9709      	str	r7, [sp, #36]	; 0x24
 80195a6:	e7e1      	b.n	801956c <_strtod_l+0x224>
 80195a8:	2b10      	cmp	r3, #16
 80195aa:	bfd8      	it	le
 80195ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80195b0:	e7dc      	b.n	801956c <_strtod_l+0x224>
 80195b2:	2e10      	cmp	r6, #16
 80195b4:	bfdc      	itt	le
 80195b6:	230a      	movle	r3, #10
 80195b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80195bc:	e7e3      	b.n	8019586 <_strtod_l+0x23e>
 80195be:	2300      	movs	r3, #0
 80195c0:	9305      	str	r3, [sp, #20]
 80195c2:	2301      	movs	r3, #1
 80195c4:	e780      	b.n	80194c8 <_strtod_l+0x180>
 80195c6:	f04f 0c00 	mov.w	ip, #0
 80195ca:	1caa      	adds	r2, r5, #2
 80195cc:	9215      	str	r2, [sp, #84]	; 0x54
 80195ce:	78aa      	ldrb	r2, [r5, #2]
 80195d0:	e788      	b.n	80194e4 <_strtod_l+0x19c>
 80195d2:	f04f 0c01 	mov.w	ip, #1
 80195d6:	e7f8      	b.n	80195ca <_strtod_l+0x282>
 80195d8:	0801e120 	.word	0x0801e120
 80195dc:	0801e11c 	.word	0x0801e11c
 80195e0:	7ff00000 	.word	0x7ff00000
 80195e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80195e6:	1c51      	adds	r1, r2, #1
 80195e8:	9115      	str	r1, [sp, #84]	; 0x54
 80195ea:	7852      	ldrb	r2, [r2, #1]
 80195ec:	2a30      	cmp	r2, #48	; 0x30
 80195ee:	d0f9      	beq.n	80195e4 <_strtod_l+0x29c>
 80195f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80195f4:	2908      	cmp	r1, #8
 80195f6:	f63f af7a 	bhi.w	80194ee <_strtod_l+0x1a6>
 80195fa:	3a30      	subs	r2, #48	; 0x30
 80195fc:	9208      	str	r2, [sp, #32]
 80195fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019600:	920c      	str	r2, [sp, #48]	; 0x30
 8019602:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019604:	1c57      	adds	r7, r2, #1
 8019606:	9715      	str	r7, [sp, #84]	; 0x54
 8019608:	7852      	ldrb	r2, [r2, #1]
 801960a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801960e:	f1be 0f09 	cmp.w	lr, #9
 8019612:	d938      	bls.n	8019686 <_strtod_l+0x33e>
 8019614:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019616:	1a7f      	subs	r7, r7, r1
 8019618:	2f08      	cmp	r7, #8
 801961a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801961e:	dc03      	bgt.n	8019628 <_strtod_l+0x2e0>
 8019620:	9908      	ldr	r1, [sp, #32]
 8019622:	428f      	cmp	r7, r1
 8019624:	bfa8      	it	ge
 8019626:	460f      	movge	r7, r1
 8019628:	f1bc 0f00 	cmp.w	ip, #0
 801962c:	d000      	beq.n	8019630 <_strtod_l+0x2e8>
 801962e:	427f      	negs	r7, r7
 8019630:	2e00      	cmp	r6, #0
 8019632:	d14f      	bne.n	80196d4 <_strtod_l+0x38c>
 8019634:	9904      	ldr	r1, [sp, #16]
 8019636:	4301      	orrs	r1, r0
 8019638:	f47f aec1 	bne.w	80193be <_strtod_l+0x76>
 801963c:	2b00      	cmp	r3, #0
 801963e:	f47f aedb 	bne.w	80193f8 <_strtod_l+0xb0>
 8019642:	2a69      	cmp	r2, #105	; 0x69
 8019644:	d029      	beq.n	801969a <_strtod_l+0x352>
 8019646:	dc26      	bgt.n	8019696 <_strtod_l+0x34e>
 8019648:	2a49      	cmp	r2, #73	; 0x49
 801964a:	d026      	beq.n	801969a <_strtod_l+0x352>
 801964c:	2a4e      	cmp	r2, #78	; 0x4e
 801964e:	f47f aed3 	bne.w	80193f8 <_strtod_l+0xb0>
 8019652:	499b      	ldr	r1, [pc, #620]	; (80198c0 <_strtod_l+0x578>)
 8019654:	a815      	add	r0, sp, #84	; 0x54
 8019656:	f001 fa17 	bl	801aa88 <__match>
 801965a:	2800      	cmp	r0, #0
 801965c:	f43f aecc 	beq.w	80193f8 <_strtod_l+0xb0>
 8019660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	2b28      	cmp	r3, #40	; 0x28
 8019666:	d12f      	bne.n	80196c8 <_strtod_l+0x380>
 8019668:	4996      	ldr	r1, [pc, #600]	; (80198c4 <_strtod_l+0x57c>)
 801966a:	aa18      	add	r2, sp, #96	; 0x60
 801966c:	a815      	add	r0, sp, #84	; 0x54
 801966e:	f001 fa1f 	bl	801aab0 <__hexnan>
 8019672:	2805      	cmp	r0, #5
 8019674:	d128      	bne.n	80196c8 <_strtod_l+0x380>
 8019676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019678:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801967c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019680:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019684:	e69b      	b.n	80193be <_strtod_l+0x76>
 8019686:	9f08      	ldr	r7, [sp, #32]
 8019688:	210a      	movs	r1, #10
 801968a:	fb01 2107 	mla	r1, r1, r7, r2
 801968e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019692:	9208      	str	r2, [sp, #32]
 8019694:	e7b5      	b.n	8019602 <_strtod_l+0x2ba>
 8019696:	2a6e      	cmp	r2, #110	; 0x6e
 8019698:	e7d9      	b.n	801964e <_strtod_l+0x306>
 801969a:	498b      	ldr	r1, [pc, #556]	; (80198c8 <_strtod_l+0x580>)
 801969c:	a815      	add	r0, sp, #84	; 0x54
 801969e:	f001 f9f3 	bl	801aa88 <__match>
 80196a2:	2800      	cmp	r0, #0
 80196a4:	f43f aea8 	beq.w	80193f8 <_strtod_l+0xb0>
 80196a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80196aa:	4988      	ldr	r1, [pc, #544]	; (80198cc <_strtod_l+0x584>)
 80196ac:	3b01      	subs	r3, #1
 80196ae:	a815      	add	r0, sp, #84	; 0x54
 80196b0:	9315      	str	r3, [sp, #84]	; 0x54
 80196b2:	f001 f9e9 	bl	801aa88 <__match>
 80196b6:	b910      	cbnz	r0, 80196be <_strtod_l+0x376>
 80196b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80196ba:	3301      	adds	r3, #1
 80196bc:	9315      	str	r3, [sp, #84]	; 0x54
 80196be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80198dc <_strtod_l+0x594>
 80196c2:	f04f 0800 	mov.w	r8, #0
 80196c6:	e67a      	b.n	80193be <_strtod_l+0x76>
 80196c8:	4881      	ldr	r0, [pc, #516]	; (80198d0 <_strtod_l+0x588>)
 80196ca:	f000 fef9 	bl	801a4c0 <nan>
 80196ce:	ec59 8b10 	vmov	r8, r9, d0
 80196d2:	e674      	b.n	80193be <_strtod_l+0x76>
 80196d4:	9b05      	ldr	r3, [sp, #20]
 80196d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196d8:	1afb      	subs	r3, r7, r3
 80196da:	f1bb 0f00 	cmp.w	fp, #0
 80196de:	bf08      	it	eq
 80196e0:	46b3      	moveq	fp, r6
 80196e2:	2e10      	cmp	r6, #16
 80196e4:	9308      	str	r3, [sp, #32]
 80196e6:	4635      	mov	r5, r6
 80196e8:	bfa8      	it	ge
 80196ea:	2510      	movge	r5, #16
 80196ec:	f7e6 ff32 	bl	8000554 <__aeabi_ui2d>
 80196f0:	2e09      	cmp	r6, #9
 80196f2:	4680      	mov	r8, r0
 80196f4:	4689      	mov	r9, r1
 80196f6:	dd13      	ble.n	8019720 <_strtod_l+0x3d8>
 80196f8:	4b76      	ldr	r3, [pc, #472]	; (80198d4 <_strtod_l+0x58c>)
 80196fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80196fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019702:	f7e6 ffa1 	bl	8000648 <__aeabi_dmul>
 8019706:	4680      	mov	r8, r0
 8019708:	4650      	mov	r0, sl
 801970a:	4689      	mov	r9, r1
 801970c:	f7e6 ff22 	bl	8000554 <__aeabi_ui2d>
 8019710:	4602      	mov	r2, r0
 8019712:	460b      	mov	r3, r1
 8019714:	4640      	mov	r0, r8
 8019716:	4649      	mov	r1, r9
 8019718:	f7e6 fde0 	bl	80002dc <__adddf3>
 801971c:	4680      	mov	r8, r0
 801971e:	4689      	mov	r9, r1
 8019720:	2e0f      	cmp	r6, #15
 8019722:	dc38      	bgt.n	8019796 <_strtod_l+0x44e>
 8019724:	9b08      	ldr	r3, [sp, #32]
 8019726:	2b00      	cmp	r3, #0
 8019728:	f43f ae49 	beq.w	80193be <_strtod_l+0x76>
 801972c:	dd24      	ble.n	8019778 <_strtod_l+0x430>
 801972e:	2b16      	cmp	r3, #22
 8019730:	dc0b      	bgt.n	801974a <_strtod_l+0x402>
 8019732:	4968      	ldr	r1, [pc, #416]	; (80198d4 <_strtod_l+0x58c>)
 8019734:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801973c:	4642      	mov	r2, r8
 801973e:	464b      	mov	r3, r9
 8019740:	f7e6 ff82 	bl	8000648 <__aeabi_dmul>
 8019744:	4680      	mov	r8, r0
 8019746:	4689      	mov	r9, r1
 8019748:	e639      	b.n	80193be <_strtod_l+0x76>
 801974a:	9a08      	ldr	r2, [sp, #32]
 801974c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019750:	4293      	cmp	r3, r2
 8019752:	db20      	blt.n	8019796 <_strtod_l+0x44e>
 8019754:	4c5f      	ldr	r4, [pc, #380]	; (80198d4 <_strtod_l+0x58c>)
 8019756:	f1c6 060f 	rsb	r6, r6, #15
 801975a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801975e:	4642      	mov	r2, r8
 8019760:	464b      	mov	r3, r9
 8019762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019766:	f7e6 ff6f 	bl	8000648 <__aeabi_dmul>
 801976a:	9b08      	ldr	r3, [sp, #32]
 801976c:	1b9e      	subs	r6, r3, r6
 801976e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019772:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019776:	e7e3      	b.n	8019740 <_strtod_l+0x3f8>
 8019778:	9b08      	ldr	r3, [sp, #32]
 801977a:	3316      	adds	r3, #22
 801977c:	db0b      	blt.n	8019796 <_strtod_l+0x44e>
 801977e:	9b05      	ldr	r3, [sp, #20]
 8019780:	1bdf      	subs	r7, r3, r7
 8019782:	4b54      	ldr	r3, [pc, #336]	; (80198d4 <_strtod_l+0x58c>)
 8019784:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801978c:	4640      	mov	r0, r8
 801978e:	4649      	mov	r1, r9
 8019790:	f7e7 f884 	bl	800089c <__aeabi_ddiv>
 8019794:	e7d6      	b.n	8019744 <_strtod_l+0x3fc>
 8019796:	9b08      	ldr	r3, [sp, #32]
 8019798:	1b75      	subs	r5, r6, r5
 801979a:	441d      	add	r5, r3
 801979c:	2d00      	cmp	r5, #0
 801979e:	dd70      	ble.n	8019882 <_strtod_l+0x53a>
 80197a0:	f015 030f 	ands.w	r3, r5, #15
 80197a4:	d00a      	beq.n	80197bc <_strtod_l+0x474>
 80197a6:	494b      	ldr	r1, [pc, #300]	; (80198d4 <_strtod_l+0x58c>)
 80197a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80197ac:	4642      	mov	r2, r8
 80197ae:	464b      	mov	r3, r9
 80197b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197b4:	f7e6 ff48 	bl	8000648 <__aeabi_dmul>
 80197b8:	4680      	mov	r8, r0
 80197ba:	4689      	mov	r9, r1
 80197bc:	f035 050f 	bics.w	r5, r5, #15
 80197c0:	d04d      	beq.n	801985e <_strtod_l+0x516>
 80197c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80197c6:	dd22      	ble.n	801980e <_strtod_l+0x4c6>
 80197c8:	2500      	movs	r5, #0
 80197ca:	46ab      	mov	fp, r5
 80197cc:	9509      	str	r5, [sp, #36]	; 0x24
 80197ce:	9505      	str	r5, [sp, #20]
 80197d0:	2322      	movs	r3, #34	; 0x22
 80197d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80198dc <_strtod_l+0x594>
 80197d6:	6023      	str	r3, [r4, #0]
 80197d8:	f04f 0800 	mov.w	r8, #0
 80197dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197de:	2b00      	cmp	r3, #0
 80197e0:	f43f aded 	beq.w	80193be <_strtod_l+0x76>
 80197e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80197e6:	4620      	mov	r0, r4
 80197e8:	f7ff f924 	bl	8018a34 <_Bfree>
 80197ec:	9905      	ldr	r1, [sp, #20]
 80197ee:	4620      	mov	r0, r4
 80197f0:	f7ff f920 	bl	8018a34 <_Bfree>
 80197f4:	4659      	mov	r1, fp
 80197f6:	4620      	mov	r0, r4
 80197f8:	f7ff f91c 	bl	8018a34 <_Bfree>
 80197fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80197fe:	4620      	mov	r0, r4
 8019800:	f7ff f918 	bl	8018a34 <_Bfree>
 8019804:	4629      	mov	r1, r5
 8019806:	4620      	mov	r0, r4
 8019808:	f7ff f914 	bl	8018a34 <_Bfree>
 801980c:	e5d7      	b.n	80193be <_strtod_l+0x76>
 801980e:	4b32      	ldr	r3, [pc, #200]	; (80198d8 <_strtod_l+0x590>)
 8019810:	9304      	str	r3, [sp, #16]
 8019812:	2300      	movs	r3, #0
 8019814:	112d      	asrs	r5, r5, #4
 8019816:	4640      	mov	r0, r8
 8019818:	4649      	mov	r1, r9
 801981a:	469a      	mov	sl, r3
 801981c:	2d01      	cmp	r5, #1
 801981e:	dc21      	bgt.n	8019864 <_strtod_l+0x51c>
 8019820:	b10b      	cbz	r3, 8019826 <_strtod_l+0x4de>
 8019822:	4680      	mov	r8, r0
 8019824:	4689      	mov	r9, r1
 8019826:	492c      	ldr	r1, [pc, #176]	; (80198d8 <_strtod_l+0x590>)
 8019828:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801982c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019830:	4642      	mov	r2, r8
 8019832:	464b      	mov	r3, r9
 8019834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019838:	f7e6 ff06 	bl	8000648 <__aeabi_dmul>
 801983c:	4b27      	ldr	r3, [pc, #156]	; (80198dc <_strtod_l+0x594>)
 801983e:	460a      	mov	r2, r1
 8019840:	400b      	ands	r3, r1
 8019842:	4927      	ldr	r1, [pc, #156]	; (80198e0 <_strtod_l+0x598>)
 8019844:	428b      	cmp	r3, r1
 8019846:	4680      	mov	r8, r0
 8019848:	d8be      	bhi.n	80197c8 <_strtod_l+0x480>
 801984a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801984e:	428b      	cmp	r3, r1
 8019850:	bf86      	itte	hi
 8019852:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80198e4 <_strtod_l+0x59c>
 8019856:	f04f 38ff 	movhi.w	r8, #4294967295
 801985a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801985e:	2300      	movs	r3, #0
 8019860:	9304      	str	r3, [sp, #16]
 8019862:	e07b      	b.n	801995c <_strtod_l+0x614>
 8019864:	07ea      	lsls	r2, r5, #31
 8019866:	d505      	bpl.n	8019874 <_strtod_l+0x52c>
 8019868:	9b04      	ldr	r3, [sp, #16]
 801986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801986e:	f7e6 feeb 	bl	8000648 <__aeabi_dmul>
 8019872:	2301      	movs	r3, #1
 8019874:	9a04      	ldr	r2, [sp, #16]
 8019876:	3208      	adds	r2, #8
 8019878:	f10a 0a01 	add.w	sl, sl, #1
 801987c:	106d      	asrs	r5, r5, #1
 801987e:	9204      	str	r2, [sp, #16]
 8019880:	e7cc      	b.n	801981c <_strtod_l+0x4d4>
 8019882:	d0ec      	beq.n	801985e <_strtod_l+0x516>
 8019884:	426d      	negs	r5, r5
 8019886:	f015 020f 	ands.w	r2, r5, #15
 801988a:	d00a      	beq.n	80198a2 <_strtod_l+0x55a>
 801988c:	4b11      	ldr	r3, [pc, #68]	; (80198d4 <_strtod_l+0x58c>)
 801988e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019892:	4640      	mov	r0, r8
 8019894:	4649      	mov	r1, r9
 8019896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801989a:	f7e6 ffff 	bl	800089c <__aeabi_ddiv>
 801989e:	4680      	mov	r8, r0
 80198a0:	4689      	mov	r9, r1
 80198a2:	112d      	asrs	r5, r5, #4
 80198a4:	d0db      	beq.n	801985e <_strtod_l+0x516>
 80198a6:	2d1f      	cmp	r5, #31
 80198a8:	dd1e      	ble.n	80198e8 <_strtod_l+0x5a0>
 80198aa:	2500      	movs	r5, #0
 80198ac:	46ab      	mov	fp, r5
 80198ae:	9509      	str	r5, [sp, #36]	; 0x24
 80198b0:	9505      	str	r5, [sp, #20]
 80198b2:	2322      	movs	r3, #34	; 0x22
 80198b4:	f04f 0800 	mov.w	r8, #0
 80198b8:	f04f 0900 	mov.w	r9, #0
 80198bc:	6023      	str	r3, [r4, #0]
 80198be:	e78d      	b.n	80197dc <_strtod_l+0x494>
 80198c0:	0801df0d 	.word	0x0801df0d
 80198c4:	0801e134 	.word	0x0801e134
 80198c8:	0801df05 	.word	0x0801df05
 80198cc:	0801df3c 	.word	0x0801df3c
 80198d0:	0801e2c5 	.word	0x0801e2c5
 80198d4:	0801e048 	.word	0x0801e048
 80198d8:	0801e020 	.word	0x0801e020
 80198dc:	7ff00000 	.word	0x7ff00000
 80198e0:	7ca00000 	.word	0x7ca00000
 80198e4:	7fefffff 	.word	0x7fefffff
 80198e8:	f015 0310 	ands.w	r3, r5, #16
 80198ec:	bf18      	it	ne
 80198ee:	236a      	movne	r3, #106	; 0x6a
 80198f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019c94 <_strtod_l+0x94c>
 80198f4:	9304      	str	r3, [sp, #16]
 80198f6:	4640      	mov	r0, r8
 80198f8:	4649      	mov	r1, r9
 80198fa:	2300      	movs	r3, #0
 80198fc:	07ea      	lsls	r2, r5, #31
 80198fe:	d504      	bpl.n	801990a <_strtod_l+0x5c2>
 8019900:	e9da 2300 	ldrd	r2, r3, [sl]
 8019904:	f7e6 fea0 	bl	8000648 <__aeabi_dmul>
 8019908:	2301      	movs	r3, #1
 801990a:	106d      	asrs	r5, r5, #1
 801990c:	f10a 0a08 	add.w	sl, sl, #8
 8019910:	d1f4      	bne.n	80198fc <_strtod_l+0x5b4>
 8019912:	b10b      	cbz	r3, 8019918 <_strtod_l+0x5d0>
 8019914:	4680      	mov	r8, r0
 8019916:	4689      	mov	r9, r1
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	b1bb      	cbz	r3, 801994c <_strtod_l+0x604>
 801991c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8019920:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8019924:	2b00      	cmp	r3, #0
 8019926:	4649      	mov	r1, r9
 8019928:	dd10      	ble.n	801994c <_strtod_l+0x604>
 801992a:	2b1f      	cmp	r3, #31
 801992c:	f340 811e 	ble.w	8019b6c <_strtod_l+0x824>
 8019930:	2b34      	cmp	r3, #52	; 0x34
 8019932:	bfde      	ittt	le
 8019934:	f04f 33ff 	movle.w	r3, #4294967295
 8019938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801993c:	4093      	lslle	r3, r2
 801993e:	f04f 0800 	mov.w	r8, #0
 8019942:	bfcc      	ite	gt
 8019944:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019948:	ea03 0901 	andle.w	r9, r3, r1
 801994c:	2200      	movs	r2, #0
 801994e:	2300      	movs	r3, #0
 8019950:	4640      	mov	r0, r8
 8019952:	4649      	mov	r1, r9
 8019954:	f7e7 f8e0 	bl	8000b18 <__aeabi_dcmpeq>
 8019958:	2800      	cmp	r0, #0
 801995a:	d1a6      	bne.n	80198aa <_strtod_l+0x562>
 801995c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801995e:	9300      	str	r3, [sp, #0]
 8019960:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019962:	4633      	mov	r3, r6
 8019964:	465a      	mov	r2, fp
 8019966:	4620      	mov	r0, r4
 8019968:	f7ff f8cc 	bl	8018b04 <__s2b>
 801996c:	9009      	str	r0, [sp, #36]	; 0x24
 801996e:	2800      	cmp	r0, #0
 8019970:	f43f af2a 	beq.w	80197c8 <_strtod_l+0x480>
 8019974:	9a08      	ldr	r2, [sp, #32]
 8019976:	9b05      	ldr	r3, [sp, #20]
 8019978:	2a00      	cmp	r2, #0
 801997a:	eba3 0307 	sub.w	r3, r3, r7
 801997e:	bfa8      	it	ge
 8019980:	2300      	movge	r3, #0
 8019982:	930c      	str	r3, [sp, #48]	; 0x30
 8019984:	2500      	movs	r5, #0
 8019986:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801998a:	9312      	str	r3, [sp, #72]	; 0x48
 801998c:	46ab      	mov	fp, r5
 801998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019990:	4620      	mov	r0, r4
 8019992:	6859      	ldr	r1, [r3, #4]
 8019994:	f7ff f80e 	bl	80189b4 <_Balloc>
 8019998:	9005      	str	r0, [sp, #20]
 801999a:	2800      	cmp	r0, #0
 801999c:	f43f af18 	beq.w	80197d0 <_strtod_l+0x488>
 80199a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199a2:	691a      	ldr	r2, [r3, #16]
 80199a4:	3202      	adds	r2, #2
 80199a6:	f103 010c 	add.w	r1, r3, #12
 80199aa:	0092      	lsls	r2, r2, #2
 80199ac:	300c      	adds	r0, #12
 80199ae:	f7fe f870 	bl	8017a92 <memcpy>
 80199b2:	ec49 8b10 	vmov	d0, r8, r9
 80199b6:	aa18      	add	r2, sp, #96	; 0x60
 80199b8:	a917      	add	r1, sp, #92	; 0x5c
 80199ba:	4620      	mov	r0, r4
 80199bc:	f7ff fbd6 	bl	801916c <__d2b>
 80199c0:	ec49 8b18 	vmov	d8, r8, r9
 80199c4:	9016      	str	r0, [sp, #88]	; 0x58
 80199c6:	2800      	cmp	r0, #0
 80199c8:	f43f af02 	beq.w	80197d0 <_strtod_l+0x488>
 80199cc:	2101      	movs	r1, #1
 80199ce:	4620      	mov	r0, r4
 80199d0:	f7ff f930 	bl	8018c34 <__i2b>
 80199d4:	4683      	mov	fp, r0
 80199d6:	2800      	cmp	r0, #0
 80199d8:	f43f aefa 	beq.w	80197d0 <_strtod_l+0x488>
 80199dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80199de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80199e0:	2e00      	cmp	r6, #0
 80199e2:	bfab      	itete	ge
 80199e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80199e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80199e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80199ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80199ee:	bfac      	ite	ge
 80199f0:	eb06 0a03 	addge.w	sl, r6, r3
 80199f4:	1b9f      	sublt	r7, r3, r6
 80199f6:	9b04      	ldr	r3, [sp, #16]
 80199f8:	1af6      	subs	r6, r6, r3
 80199fa:	4416      	add	r6, r2
 80199fc:	4ba0      	ldr	r3, [pc, #640]	; (8019c80 <_strtod_l+0x938>)
 80199fe:	3e01      	subs	r6, #1
 8019a00:	429e      	cmp	r6, r3
 8019a02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019a06:	f280 80c4 	bge.w	8019b92 <_strtod_l+0x84a>
 8019a0a:	1b9b      	subs	r3, r3, r6
 8019a0c:	2b1f      	cmp	r3, #31
 8019a0e:	eba2 0203 	sub.w	r2, r2, r3
 8019a12:	f04f 0101 	mov.w	r1, #1
 8019a16:	f300 80b0 	bgt.w	8019b7a <_strtod_l+0x832>
 8019a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8019a1e:	930e      	str	r3, [sp, #56]	; 0x38
 8019a20:	2300      	movs	r3, #0
 8019a22:	930d      	str	r3, [sp, #52]	; 0x34
 8019a24:	eb0a 0602 	add.w	r6, sl, r2
 8019a28:	9b04      	ldr	r3, [sp, #16]
 8019a2a:	45b2      	cmp	sl, r6
 8019a2c:	4417      	add	r7, r2
 8019a2e:	441f      	add	r7, r3
 8019a30:	4653      	mov	r3, sl
 8019a32:	bfa8      	it	ge
 8019a34:	4633      	movge	r3, r6
 8019a36:	42bb      	cmp	r3, r7
 8019a38:	bfa8      	it	ge
 8019a3a:	463b      	movge	r3, r7
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	bfc2      	ittt	gt
 8019a40:	1af6      	subgt	r6, r6, r3
 8019a42:	1aff      	subgt	r7, r7, r3
 8019a44:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	dd17      	ble.n	8019a7e <_strtod_l+0x736>
 8019a4e:	4659      	mov	r1, fp
 8019a50:	461a      	mov	r2, r3
 8019a52:	4620      	mov	r0, r4
 8019a54:	f7ff f9ae 	bl	8018db4 <__pow5mult>
 8019a58:	4683      	mov	fp, r0
 8019a5a:	2800      	cmp	r0, #0
 8019a5c:	f43f aeb8 	beq.w	80197d0 <_strtod_l+0x488>
 8019a60:	4601      	mov	r1, r0
 8019a62:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019a64:	4620      	mov	r0, r4
 8019a66:	f7ff f8fb 	bl	8018c60 <__multiply>
 8019a6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8019a6c:	2800      	cmp	r0, #0
 8019a6e:	f43f aeaf 	beq.w	80197d0 <_strtod_l+0x488>
 8019a72:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019a74:	4620      	mov	r0, r4
 8019a76:	f7fe ffdd 	bl	8018a34 <_Bfree>
 8019a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a7c:	9316      	str	r3, [sp, #88]	; 0x58
 8019a7e:	2e00      	cmp	r6, #0
 8019a80:	f300 808c 	bgt.w	8019b9c <_strtod_l+0x854>
 8019a84:	9b08      	ldr	r3, [sp, #32]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	dd08      	ble.n	8019a9c <_strtod_l+0x754>
 8019a8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019a8c:	9905      	ldr	r1, [sp, #20]
 8019a8e:	4620      	mov	r0, r4
 8019a90:	f7ff f990 	bl	8018db4 <__pow5mult>
 8019a94:	9005      	str	r0, [sp, #20]
 8019a96:	2800      	cmp	r0, #0
 8019a98:	f43f ae9a 	beq.w	80197d0 <_strtod_l+0x488>
 8019a9c:	2f00      	cmp	r7, #0
 8019a9e:	dd08      	ble.n	8019ab2 <_strtod_l+0x76a>
 8019aa0:	9905      	ldr	r1, [sp, #20]
 8019aa2:	463a      	mov	r2, r7
 8019aa4:	4620      	mov	r0, r4
 8019aa6:	f7ff f9df 	bl	8018e68 <__lshift>
 8019aaa:	9005      	str	r0, [sp, #20]
 8019aac:	2800      	cmp	r0, #0
 8019aae:	f43f ae8f 	beq.w	80197d0 <_strtod_l+0x488>
 8019ab2:	f1ba 0f00 	cmp.w	sl, #0
 8019ab6:	dd08      	ble.n	8019aca <_strtod_l+0x782>
 8019ab8:	4659      	mov	r1, fp
 8019aba:	4652      	mov	r2, sl
 8019abc:	4620      	mov	r0, r4
 8019abe:	f7ff f9d3 	bl	8018e68 <__lshift>
 8019ac2:	4683      	mov	fp, r0
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	f43f ae83 	beq.w	80197d0 <_strtod_l+0x488>
 8019aca:	9a05      	ldr	r2, [sp, #20]
 8019acc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019ace:	4620      	mov	r0, r4
 8019ad0:	f7ff fa52 	bl	8018f78 <__mdiff>
 8019ad4:	4605      	mov	r5, r0
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	f43f ae7a 	beq.w	80197d0 <_strtod_l+0x488>
 8019adc:	68c3      	ldr	r3, [r0, #12]
 8019ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	60c3      	str	r3, [r0, #12]
 8019ae4:	4659      	mov	r1, fp
 8019ae6:	f7ff fa2b 	bl	8018f40 <__mcmp>
 8019aea:	2800      	cmp	r0, #0
 8019aec:	da60      	bge.n	8019bb0 <_strtod_l+0x868>
 8019aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019af0:	ea53 0308 	orrs.w	r3, r3, r8
 8019af4:	f040 8084 	bne.w	8019c00 <_strtod_l+0x8b8>
 8019af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d17f      	bne.n	8019c00 <_strtod_l+0x8b8>
 8019b00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019b04:	0d1b      	lsrs	r3, r3, #20
 8019b06:	051b      	lsls	r3, r3, #20
 8019b08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019b0c:	d978      	bls.n	8019c00 <_strtod_l+0x8b8>
 8019b0e:	696b      	ldr	r3, [r5, #20]
 8019b10:	b913      	cbnz	r3, 8019b18 <_strtod_l+0x7d0>
 8019b12:	692b      	ldr	r3, [r5, #16]
 8019b14:	2b01      	cmp	r3, #1
 8019b16:	dd73      	ble.n	8019c00 <_strtod_l+0x8b8>
 8019b18:	4629      	mov	r1, r5
 8019b1a:	2201      	movs	r2, #1
 8019b1c:	4620      	mov	r0, r4
 8019b1e:	f7ff f9a3 	bl	8018e68 <__lshift>
 8019b22:	4659      	mov	r1, fp
 8019b24:	4605      	mov	r5, r0
 8019b26:	f7ff fa0b 	bl	8018f40 <__mcmp>
 8019b2a:	2800      	cmp	r0, #0
 8019b2c:	dd68      	ble.n	8019c00 <_strtod_l+0x8b8>
 8019b2e:	9904      	ldr	r1, [sp, #16]
 8019b30:	4a54      	ldr	r2, [pc, #336]	; (8019c84 <_strtod_l+0x93c>)
 8019b32:	464b      	mov	r3, r9
 8019b34:	2900      	cmp	r1, #0
 8019b36:	f000 8084 	beq.w	8019c42 <_strtod_l+0x8fa>
 8019b3a:	ea02 0109 	and.w	r1, r2, r9
 8019b3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019b42:	dc7e      	bgt.n	8019c42 <_strtod_l+0x8fa>
 8019b44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019b48:	f77f aeb3 	ble.w	80198b2 <_strtod_l+0x56a>
 8019b4c:	4b4e      	ldr	r3, [pc, #312]	; (8019c88 <_strtod_l+0x940>)
 8019b4e:	4640      	mov	r0, r8
 8019b50:	4649      	mov	r1, r9
 8019b52:	2200      	movs	r2, #0
 8019b54:	f7e6 fd78 	bl	8000648 <__aeabi_dmul>
 8019b58:	4b4a      	ldr	r3, [pc, #296]	; (8019c84 <_strtod_l+0x93c>)
 8019b5a:	400b      	ands	r3, r1
 8019b5c:	4680      	mov	r8, r0
 8019b5e:	4689      	mov	r9, r1
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	f47f ae3f 	bne.w	80197e4 <_strtod_l+0x49c>
 8019b66:	2322      	movs	r3, #34	; 0x22
 8019b68:	6023      	str	r3, [r4, #0]
 8019b6a:	e63b      	b.n	80197e4 <_strtod_l+0x49c>
 8019b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019b70:	fa02 f303 	lsl.w	r3, r2, r3
 8019b74:	ea03 0808 	and.w	r8, r3, r8
 8019b78:	e6e8      	b.n	801994c <_strtod_l+0x604>
 8019b7a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8019b7e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019b82:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019b86:	36e2      	adds	r6, #226	; 0xe2
 8019b88:	fa01 f306 	lsl.w	r3, r1, r6
 8019b8c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019b90:	e748      	b.n	8019a24 <_strtod_l+0x6dc>
 8019b92:	2100      	movs	r1, #0
 8019b94:	2301      	movs	r3, #1
 8019b96:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8019b9a:	e743      	b.n	8019a24 <_strtod_l+0x6dc>
 8019b9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b9e:	4632      	mov	r2, r6
 8019ba0:	4620      	mov	r0, r4
 8019ba2:	f7ff f961 	bl	8018e68 <__lshift>
 8019ba6:	9016      	str	r0, [sp, #88]	; 0x58
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	f47f af6b 	bne.w	8019a84 <_strtod_l+0x73c>
 8019bae:	e60f      	b.n	80197d0 <_strtod_l+0x488>
 8019bb0:	46ca      	mov	sl, r9
 8019bb2:	d171      	bne.n	8019c98 <_strtod_l+0x950>
 8019bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019bba:	b352      	cbz	r2, 8019c12 <_strtod_l+0x8ca>
 8019bbc:	4a33      	ldr	r2, [pc, #204]	; (8019c8c <_strtod_l+0x944>)
 8019bbe:	4293      	cmp	r3, r2
 8019bc0:	d12a      	bne.n	8019c18 <_strtod_l+0x8d0>
 8019bc2:	9b04      	ldr	r3, [sp, #16]
 8019bc4:	4641      	mov	r1, r8
 8019bc6:	b1fb      	cbz	r3, 8019c08 <_strtod_l+0x8c0>
 8019bc8:	4b2e      	ldr	r3, [pc, #184]	; (8019c84 <_strtod_l+0x93c>)
 8019bca:	ea09 0303 	and.w	r3, r9, r3
 8019bce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8019bd6:	d81a      	bhi.n	8019c0e <_strtod_l+0x8c6>
 8019bd8:	0d1b      	lsrs	r3, r3, #20
 8019bda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019bde:	fa02 f303 	lsl.w	r3, r2, r3
 8019be2:	4299      	cmp	r1, r3
 8019be4:	d118      	bne.n	8019c18 <_strtod_l+0x8d0>
 8019be6:	4b2a      	ldr	r3, [pc, #168]	; (8019c90 <_strtod_l+0x948>)
 8019be8:	459a      	cmp	sl, r3
 8019bea:	d102      	bne.n	8019bf2 <_strtod_l+0x8aa>
 8019bec:	3101      	adds	r1, #1
 8019bee:	f43f adef 	beq.w	80197d0 <_strtod_l+0x488>
 8019bf2:	4b24      	ldr	r3, [pc, #144]	; (8019c84 <_strtod_l+0x93c>)
 8019bf4:	ea0a 0303 	and.w	r3, sl, r3
 8019bf8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8019bfc:	f04f 0800 	mov.w	r8, #0
 8019c00:	9b04      	ldr	r3, [sp, #16]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d1a2      	bne.n	8019b4c <_strtod_l+0x804>
 8019c06:	e5ed      	b.n	80197e4 <_strtod_l+0x49c>
 8019c08:	f04f 33ff 	mov.w	r3, #4294967295
 8019c0c:	e7e9      	b.n	8019be2 <_strtod_l+0x89a>
 8019c0e:	4613      	mov	r3, r2
 8019c10:	e7e7      	b.n	8019be2 <_strtod_l+0x89a>
 8019c12:	ea53 0308 	orrs.w	r3, r3, r8
 8019c16:	d08a      	beq.n	8019b2e <_strtod_l+0x7e6>
 8019c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c1a:	b1e3      	cbz	r3, 8019c56 <_strtod_l+0x90e>
 8019c1c:	ea13 0f0a 	tst.w	r3, sl
 8019c20:	d0ee      	beq.n	8019c00 <_strtod_l+0x8b8>
 8019c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c24:	9a04      	ldr	r2, [sp, #16]
 8019c26:	4640      	mov	r0, r8
 8019c28:	4649      	mov	r1, r9
 8019c2a:	b1c3      	cbz	r3, 8019c5e <_strtod_l+0x916>
 8019c2c:	f7ff fb6f 	bl	801930e <sulp>
 8019c30:	4602      	mov	r2, r0
 8019c32:	460b      	mov	r3, r1
 8019c34:	ec51 0b18 	vmov	r0, r1, d8
 8019c38:	f7e6 fb50 	bl	80002dc <__adddf3>
 8019c3c:	4680      	mov	r8, r0
 8019c3e:	4689      	mov	r9, r1
 8019c40:	e7de      	b.n	8019c00 <_strtod_l+0x8b8>
 8019c42:	4013      	ands	r3, r2
 8019c44:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019c48:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019c4c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019c50:	f04f 38ff 	mov.w	r8, #4294967295
 8019c54:	e7d4      	b.n	8019c00 <_strtod_l+0x8b8>
 8019c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019c58:	ea13 0f08 	tst.w	r3, r8
 8019c5c:	e7e0      	b.n	8019c20 <_strtod_l+0x8d8>
 8019c5e:	f7ff fb56 	bl	801930e <sulp>
 8019c62:	4602      	mov	r2, r0
 8019c64:	460b      	mov	r3, r1
 8019c66:	ec51 0b18 	vmov	r0, r1, d8
 8019c6a:	f7e6 fb35 	bl	80002d8 <__aeabi_dsub>
 8019c6e:	2200      	movs	r2, #0
 8019c70:	2300      	movs	r3, #0
 8019c72:	4680      	mov	r8, r0
 8019c74:	4689      	mov	r9, r1
 8019c76:	f7e6 ff4f 	bl	8000b18 <__aeabi_dcmpeq>
 8019c7a:	2800      	cmp	r0, #0
 8019c7c:	d0c0      	beq.n	8019c00 <_strtod_l+0x8b8>
 8019c7e:	e618      	b.n	80198b2 <_strtod_l+0x56a>
 8019c80:	fffffc02 	.word	0xfffffc02
 8019c84:	7ff00000 	.word	0x7ff00000
 8019c88:	39500000 	.word	0x39500000
 8019c8c:	000fffff 	.word	0x000fffff
 8019c90:	7fefffff 	.word	0x7fefffff
 8019c94:	0801e148 	.word	0x0801e148
 8019c98:	4659      	mov	r1, fp
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	f7ff fac0 	bl	8019220 <__ratio>
 8019ca0:	ec57 6b10 	vmov	r6, r7, d0
 8019ca4:	ee10 0a10 	vmov	r0, s0
 8019ca8:	2200      	movs	r2, #0
 8019caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019cae:	4639      	mov	r1, r7
 8019cb0:	f7e6 ff46 	bl	8000b40 <__aeabi_dcmple>
 8019cb4:	2800      	cmp	r0, #0
 8019cb6:	d071      	beq.n	8019d9c <_strtod_l+0xa54>
 8019cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d17c      	bne.n	8019db8 <_strtod_l+0xa70>
 8019cbe:	f1b8 0f00 	cmp.w	r8, #0
 8019cc2:	d15a      	bne.n	8019d7a <_strtod_l+0xa32>
 8019cc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d15d      	bne.n	8019d88 <_strtod_l+0xa40>
 8019ccc:	4b90      	ldr	r3, [pc, #576]	; (8019f10 <_strtod_l+0xbc8>)
 8019cce:	2200      	movs	r2, #0
 8019cd0:	4630      	mov	r0, r6
 8019cd2:	4639      	mov	r1, r7
 8019cd4:	f7e6 ff2a 	bl	8000b2c <__aeabi_dcmplt>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	d15c      	bne.n	8019d96 <_strtod_l+0xa4e>
 8019cdc:	4630      	mov	r0, r6
 8019cde:	4639      	mov	r1, r7
 8019ce0:	4b8c      	ldr	r3, [pc, #560]	; (8019f14 <_strtod_l+0xbcc>)
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	f7e6 fcb0 	bl	8000648 <__aeabi_dmul>
 8019ce8:	4606      	mov	r6, r0
 8019cea:	460f      	mov	r7, r1
 8019cec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019cf0:	9606      	str	r6, [sp, #24]
 8019cf2:	9307      	str	r3, [sp, #28]
 8019cf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019cf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019cfc:	4b86      	ldr	r3, [pc, #536]	; (8019f18 <_strtod_l+0xbd0>)
 8019cfe:	ea0a 0303 	and.w	r3, sl, r3
 8019d02:	930d      	str	r3, [sp, #52]	; 0x34
 8019d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019d06:	4b85      	ldr	r3, [pc, #532]	; (8019f1c <_strtod_l+0xbd4>)
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	f040 8090 	bne.w	8019e2e <_strtod_l+0xae6>
 8019d0e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019d12:	ec49 8b10 	vmov	d0, r8, r9
 8019d16:	f7ff f9b9 	bl	801908c <__ulp>
 8019d1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019d1e:	ec51 0b10 	vmov	r0, r1, d0
 8019d22:	f7e6 fc91 	bl	8000648 <__aeabi_dmul>
 8019d26:	4642      	mov	r2, r8
 8019d28:	464b      	mov	r3, r9
 8019d2a:	f7e6 fad7 	bl	80002dc <__adddf3>
 8019d2e:	460b      	mov	r3, r1
 8019d30:	4979      	ldr	r1, [pc, #484]	; (8019f18 <_strtod_l+0xbd0>)
 8019d32:	4a7b      	ldr	r2, [pc, #492]	; (8019f20 <_strtod_l+0xbd8>)
 8019d34:	4019      	ands	r1, r3
 8019d36:	4291      	cmp	r1, r2
 8019d38:	4680      	mov	r8, r0
 8019d3a:	d944      	bls.n	8019dc6 <_strtod_l+0xa7e>
 8019d3c:	ee18 2a90 	vmov	r2, s17
 8019d40:	4b78      	ldr	r3, [pc, #480]	; (8019f24 <_strtod_l+0xbdc>)
 8019d42:	429a      	cmp	r2, r3
 8019d44:	d104      	bne.n	8019d50 <_strtod_l+0xa08>
 8019d46:	ee18 3a10 	vmov	r3, s16
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	f43f ad40 	beq.w	80197d0 <_strtod_l+0x488>
 8019d50:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019f24 <_strtod_l+0xbdc>
 8019d54:	f04f 38ff 	mov.w	r8, #4294967295
 8019d58:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	f7fe fe6a 	bl	8018a34 <_Bfree>
 8019d60:	9905      	ldr	r1, [sp, #20]
 8019d62:	4620      	mov	r0, r4
 8019d64:	f7fe fe66 	bl	8018a34 <_Bfree>
 8019d68:	4659      	mov	r1, fp
 8019d6a:	4620      	mov	r0, r4
 8019d6c:	f7fe fe62 	bl	8018a34 <_Bfree>
 8019d70:	4629      	mov	r1, r5
 8019d72:	4620      	mov	r0, r4
 8019d74:	f7fe fe5e 	bl	8018a34 <_Bfree>
 8019d78:	e609      	b.n	801998e <_strtod_l+0x646>
 8019d7a:	f1b8 0f01 	cmp.w	r8, #1
 8019d7e:	d103      	bne.n	8019d88 <_strtod_l+0xa40>
 8019d80:	f1b9 0f00 	cmp.w	r9, #0
 8019d84:	f43f ad95 	beq.w	80198b2 <_strtod_l+0x56a>
 8019d88:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019ee0 <_strtod_l+0xb98>
 8019d8c:	4f60      	ldr	r7, [pc, #384]	; (8019f10 <_strtod_l+0xbc8>)
 8019d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d92:	2600      	movs	r6, #0
 8019d94:	e7ae      	b.n	8019cf4 <_strtod_l+0x9ac>
 8019d96:	4f5f      	ldr	r7, [pc, #380]	; (8019f14 <_strtod_l+0xbcc>)
 8019d98:	2600      	movs	r6, #0
 8019d9a:	e7a7      	b.n	8019cec <_strtod_l+0x9a4>
 8019d9c:	4b5d      	ldr	r3, [pc, #372]	; (8019f14 <_strtod_l+0xbcc>)
 8019d9e:	4630      	mov	r0, r6
 8019da0:	4639      	mov	r1, r7
 8019da2:	2200      	movs	r2, #0
 8019da4:	f7e6 fc50 	bl	8000648 <__aeabi_dmul>
 8019da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019daa:	4606      	mov	r6, r0
 8019dac:	460f      	mov	r7, r1
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d09c      	beq.n	8019cec <_strtod_l+0x9a4>
 8019db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019db6:	e79d      	b.n	8019cf4 <_strtod_l+0x9ac>
 8019db8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019ee8 <_strtod_l+0xba0>
 8019dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019dc0:	ec57 6b17 	vmov	r6, r7, d7
 8019dc4:	e796      	b.n	8019cf4 <_strtod_l+0x9ac>
 8019dc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019dca:	9b04      	ldr	r3, [sp, #16]
 8019dcc:	46ca      	mov	sl, r9
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d1c2      	bne.n	8019d58 <_strtod_l+0xa10>
 8019dd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019dd8:	0d1b      	lsrs	r3, r3, #20
 8019dda:	051b      	lsls	r3, r3, #20
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d1bb      	bne.n	8019d58 <_strtod_l+0xa10>
 8019de0:	4630      	mov	r0, r6
 8019de2:	4639      	mov	r1, r7
 8019de4:	f7e6 ff90 	bl	8000d08 <__aeabi_d2lz>
 8019de8:	f7e6 fc00 	bl	80005ec <__aeabi_l2d>
 8019dec:	4602      	mov	r2, r0
 8019dee:	460b      	mov	r3, r1
 8019df0:	4630      	mov	r0, r6
 8019df2:	4639      	mov	r1, r7
 8019df4:	f7e6 fa70 	bl	80002d8 <__aeabi_dsub>
 8019df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019dfe:	ea43 0308 	orr.w	r3, r3, r8
 8019e02:	4313      	orrs	r3, r2
 8019e04:	4606      	mov	r6, r0
 8019e06:	460f      	mov	r7, r1
 8019e08:	d054      	beq.n	8019eb4 <_strtod_l+0xb6c>
 8019e0a:	a339      	add	r3, pc, #228	; (adr r3, 8019ef0 <_strtod_l+0xba8>)
 8019e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e10:	f7e6 fe8c 	bl	8000b2c <__aeabi_dcmplt>
 8019e14:	2800      	cmp	r0, #0
 8019e16:	f47f ace5 	bne.w	80197e4 <_strtod_l+0x49c>
 8019e1a:	a337      	add	r3, pc, #220	; (adr r3, 8019ef8 <_strtod_l+0xbb0>)
 8019e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e20:	4630      	mov	r0, r6
 8019e22:	4639      	mov	r1, r7
 8019e24:	f7e6 fea0 	bl	8000b68 <__aeabi_dcmpgt>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	d095      	beq.n	8019d58 <_strtod_l+0xa10>
 8019e2c:	e4da      	b.n	80197e4 <_strtod_l+0x49c>
 8019e2e:	9b04      	ldr	r3, [sp, #16]
 8019e30:	b333      	cbz	r3, 8019e80 <_strtod_l+0xb38>
 8019e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019e38:	d822      	bhi.n	8019e80 <_strtod_l+0xb38>
 8019e3a:	a331      	add	r3, pc, #196	; (adr r3, 8019f00 <_strtod_l+0xbb8>)
 8019e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e40:	4630      	mov	r0, r6
 8019e42:	4639      	mov	r1, r7
 8019e44:	f7e6 fe7c 	bl	8000b40 <__aeabi_dcmple>
 8019e48:	b1a0      	cbz	r0, 8019e74 <_strtod_l+0xb2c>
 8019e4a:	4639      	mov	r1, r7
 8019e4c:	4630      	mov	r0, r6
 8019e4e:	f7e6 fed3 	bl	8000bf8 <__aeabi_d2uiz>
 8019e52:	2801      	cmp	r0, #1
 8019e54:	bf38      	it	cc
 8019e56:	2001      	movcc	r0, #1
 8019e58:	f7e6 fb7c 	bl	8000554 <__aeabi_ui2d>
 8019e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019e5e:	4606      	mov	r6, r0
 8019e60:	460f      	mov	r7, r1
 8019e62:	bb23      	cbnz	r3, 8019eae <_strtod_l+0xb66>
 8019e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e68:	9010      	str	r0, [sp, #64]	; 0x40
 8019e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8019e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019e70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019e78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019e7c:	1a9b      	subs	r3, r3, r2
 8019e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019e84:	eeb0 0a48 	vmov.f32	s0, s16
 8019e88:	eef0 0a68 	vmov.f32	s1, s17
 8019e8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019e90:	f7ff f8fc 	bl	801908c <__ulp>
 8019e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019e98:	ec53 2b10 	vmov	r2, r3, d0
 8019e9c:	f7e6 fbd4 	bl	8000648 <__aeabi_dmul>
 8019ea0:	ec53 2b18 	vmov	r2, r3, d8
 8019ea4:	f7e6 fa1a 	bl	80002dc <__adddf3>
 8019ea8:	4680      	mov	r8, r0
 8019eaa:	4689      	mov	r9, r1
 8019eac:	e78d      	b.n	8019dca <_strtod_l+0xa82>
 8019eae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019eb2:	e7db      	b.n	8019e6c <_strtod_l+0xb24>
 8019eb4:	a314      	add	r3, pc, #80	; (adr r3, 8019f08 <_strtod_l+0xbc0>)
 8019eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019eba:	f7e6 fe37 	bl	8000b2c <__aeabi_dcmplt>
 8019ebe:	e7b3      	b.n	8019e28 <_strtod_l+0xae0>
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8019ec4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ec8:	6013      	str	r3, [r2, #0]
 8019eca:	f7ff ba7c 	b.w	80193c6 <_strtod_l+0x7e>
 8019ece:	2a65      	cmp	r2, #101	; 0x65
 8019ed0:	f43f ab75 	beq.w	80195be <_strtod_l+0x276>
 8019ed4:	2a45      	cmp	r2, #69	; 0x45
 8019ed6:	f43f ab72 	beq.w	80195be <_strtod_l+0x276>
 8019eda:	2301      	movs	r3, #1
 8019edc:	f7ff bbaa 	b.w	8019634 <_strtod_l+0x2ec>
 8019ee0:	00000000 	.word	0x00000000
 8019ee4:	bff00000 	.word	0xbff00000
 8019ee8:	00000000 	.word	0x00000000
 8019eec:	3ff00000 	.word	0x3ff00000
 8019ef0:	94a03595 	.word	0x94a03595
 8019ef4:	3fdfffff 	.word	0x3fdfffff
 8019ef8:	35afe535 	.word	0x35afe535
 8019efc:	3fe00000 	.word	0x3fe00000
 8019f00:	ffc00000 	.word	0xffc00000
 8019f04:	41dfffff 	.word	0x41dfffff
 8019f08:	94a03595 	.word	0x94a03595
 8019f0c:	3fcfffff 	.word	0x3fcfffff
 8019f10:	3ff00000 	.word	0x3ff00000
 8019f14:	3fe00000 	.word	0x3fe00000
 8019f18:	7ff00000 	.word	0x7ff00000
 8019f1c:	7fe00000 	.word	0x7fe00000
 8019f20:	7c9fffff 	.word	0x7c9fffff
 8019f24:	7fefffff 	.word	0x7fefffff

08019f28 <_strtod_r>:
 8019f28:	4b01      	ldr	r3, [pc, #4]	; (8019f30 <_strtod_r+0x8>)
 8019f2a:	f7ff ba0d 	b.w	8019348 <_strtod_l>
 8019f2e:	bf00      	nop
 8019f30:	200003f0 	.word	0x200003f0

08019f34 <_strtol_l.constprop.0>:
 8019f34:	2b01      	cmp	r3, #1
 8019f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f3a:	d001      	beq.n	8019f40 <_strtol_l.constprop.0+0xc>
 8019f3c:	2b24      	cmp	r3, #36	; 0x24
 8019f3e:	d906      	bls.n	8019f4e <_strtol_l.constprop.0+0x1a>
 8019f40:	f7fd fd7a 	bl	8017a38 <__errno>
 8019f44:	2316      	movs	r3, #22
 8019f46:	6003      	str	r3, [r0, #0]
 8019f48:	2000      	movs	r0, #0
 8019f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a034 <_strtol_l.constprop.0+0x100>
 8019f52:	460d      	mov	r5, r1
 8019f54:	462e      	mov	r6, r5
 8019f56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019f5e:	f017 0708 	ands.w	r7, r7, #8
 8019f62:	d1f7      	bne.n	8019f54 <_strtol_l.constprop.0+0x20>
 8019f64:	2c2d      	cmp	r4, #45	; 0x2d
 8019f66:	d132      	bne.n	8019fce <_strtol_l.constprop.0+0x9a>
 8019f68:	782c      	ldrb	r4, [r5, #0]
 8019f6a:	2701      	movs	r7, #1
 8019f6c:	1cb5      	adds	r5, r6, #2
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d05b      	beq.n	801a02a <_strtol_l.constprop.0+0xf6>
 8019f72:	2b10      	cmp	r3, #16
 8019f74:	d109      	bne.n	8019f8a <_strtol_l.constprop.0+0x56>
 8019f76:	2c30      	cmp	r4, #48	; 0x30
 8019f78:	d107      	bne.n	8019f8a <_strtol_l.constprop.0+0x56>
 8019f7a:	782c      	ldrb	r4, [r5, #0]
 8019f7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019f80:	2c58      	cmp	r4, #88	; 0x58
 8019f82:	d14d      	bne.n	801a020 <_strtol_l.constprop.0+0xec>
 8019f84:	786c      	ldrb	r4, [r5, #1]
 8019f86:	2310      	movs	r3, #16
 8019f88:	3502      	adds	r5, #2
 8019f8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019f8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019f92:	f04f 0e00 	mov.w	lr, #0
 8019f96:	fbb8 f9f3 	udiv	r9, r8, r3
 8019f9a:	4676      	mov	r6, lr
 8019f9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019fa0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019fa4:	f1bc 0f09 	cmp.w	ip, #9
 8019fa8:	d816      	bhi.n	8019fd8 <_strtol_l.constprop.0+0xa4>
 8019faa:	4664      	mov	r4, ip
 8019fac:	42a3      	cmp	r3, r4
 8019fae:	dd24      	ble.n	8019ffa <_strtol_l.constprop.0+0xc6>
 8019fb0:	f1be 3fff 	cmp.w	lr, #4294967295
 8019fb4:	d008      	beq.n	8019fc8 <_strtol_l.constprop.0+0x94>
 8019fb6:	45b1      	cmp	r9, r6
 8019fb8:	d31c      	bcc.n	8019ff4 <_strtol_l.constprop.0+0xc0>
 8019fba:	d101      	bne.n	8019fc0 <_strtol_l.constprop.0+0x8c>
 8019fbc:	45a2      	cmp	sl, r4
 8019fbe:	db19      	blt.n	8019ff4 <_strtol_l.constprop.0+0xc0>
 8019fc0:	fb06 4603 	mla	r6, r6, r3, r4
 8019fc4:	f04f 0e01 	mov.w	lr, #1
 8019fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fcc:	e7e8      	b.n	8019fa0 <_strtol_l.constprop.0+0x6c>
 8019fce:	2c2b      	cmp	r4, #43	; 0x2b
 8019fd0:	bf04      	itt	eq
 8019fd2:	782c      	ldrbeq	r4, [r5, #0]
 8019fd4:	1cb5      	addeq	r5, r6, #2
 8019fd6:	e7ca      	b.n	8019f6e <_strtol_l.constprop.0+0x3a>
 8019fd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019fdc:	f1bc 0f19 	cmp.w	ip, #25
 8019fe0:	d801      	bhi.n	8019fe6 <_strtol_l.constprop.0+0xb2>
 8019fe2:	3c37      	subs	r4, #55	; 0x37
 8019fe4:	e7e2      	b.n	8019fac <_strtol_l.constprop.0+0x78>
 8019fe6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019fea:	f1bc 0f19 	cmp.w	ip, #25
 8019fee:	d804      	bhi.n	8019ffa <_strtol_l.constprop.0+0xc6>
 8019ff0:	3c57      	subs	r4, #87	; 0x57
 8019ff2:	e7db      	b.n	8019fac <_strtol_l.constprop.0+0x78>
 8019ff4:	f04f 3eff 	mov.w	lr, #4294967295
 8019ff8:	e7e6      	b.n	8019fc8 <_strtol_l.constprop.0+0x94>
 8019ffa:	f1be 3fff 	cmp.w	lr, #4294967295
 8019ffe:	d105      	bne.n	801a00c <_strtol_l.constprop.0+0xd8>
 801a000:	2322      	movs	r3, #34	; 0x22
 801a002:	6003      	str	r3, [r0, #0]
 801a004:	4646      	mov	r6, r8
 801a006:	b942      	cbnz	r2, 801a01a <_strtol_l.constprop.0+0xe6>
 801a008:	4630      	mov	r0, r6
 801a00a:	e79e      	b.n	8019f4a <_strtol_l.constprop.0+0x16>
 801a00c:	b107      	cbz	r7, 801a010 <_strtol_l.constprop.0+0xdc>
 801a00e:	4276      	negs	r6, r6
 801a010:	2a00      	cmp	r2, #0
 801a012:	d0f9      	beq.n	801a008 <_strtol_l.constprop.0+0xd4>
 801a014:	f1be 0f00 	cmp.w	lr, #0
 801a018:	d000      	beq.n	801a01c <_strtol_l.constprop.0+0xe8>
 801a01a:	1e69      	subs	r1, r5, #1
 801a01c:	6011      	str	r1, [r2, #0]
 801a01e:	e7f3      	b.n	801a008 <_strtol_l.constprop.0+0xd4>
 801a020:	2430      	movs	r4, #48	; 0x30
 801a022:	2b00      	cmp	r3, #0
 801a024:	d1b1      	bne.n	8019f8a <_strtol_l.constprop.0+0x56>
 801a026:	2308      	movs	r3, #8
 801a028:	e7af      	b.n	8019f8a <_strtol_l.constprop.0+0x56>
 801a02a:	2c30      	cmp	r4, #48	; 0x30
 801a02c:	d0a5      	beq.n	8019f7a <_strtol_l.constprop.0+0x46>
 801a02e:	230a      	movs	r3, #10
 801a030:	e7ab      	b.n	8019f8a <_strtol_l.constprop.0+0x56>
 801a032:	bf00      	nop
 801a034:	0801e171 	.word	0x0801e171

0801a038 <_strtol_r>:
 801a038:	f7ff bf7c 	b.w	8019f34 <_strtol_l.constprop.0>

0801a03c <__ssputs_r>:
 801a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a040:	688e      	ldr	r6, [r1, #8]
 801a042:	461f      	mov	r7, r3
 801a044:	42be      	cmp	r6, r7
 801a046:	680b      	ldr	r3, [r1, #0]
 801a048:	4682      	mov	sl, r0
 801a04a:	460c      	mov	r4, r1
 801a04c:	4690      	mov	r8, r2
 801a04e:	d82c      	bhi.n	801a0aa <__ssputs_r+0x6e>
 801a050:	898a      	ldrh	r2, [r1, #12]
 801a052:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a056:	d026      	beq.n	801a0a6 <__ssputs_r+0x6a>
 801a058:	6965      	ldr	r5, [r4, #20]
 801a05a:	6909      	ldr	r1, [r1, #16]
 801a05c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a060:	eba3 0901 	sub.w	r9, r3, r1
 801a064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a068:	1c7b      	adds	r3, r7, #1
 801a06a:	444b      	add	r3, r9
 801a06c:	106d      	asrs	r5, r5, #1
 801a06e:	429d      	cmp	r5, r3
 801a070:	bf38      	it	cc
 801a072:	461d      	movcc	r5, r3
 801a074:	0553      	lsls	r3, r2, #21
 801a076:	d527      	bpl.n	801a0c8 <__ssputs_r+0x8c>
 801a078:	4629      	mov	r1, r5
 801a07a:	f7fe fc0f 	bl	801889c <_malloc_r>
 801a07e:	4606      	mov	r6, r0
 801a080:	b360      	cbz	r0, 801a0dc <__ssputs_r+0xa0>
 801a082:	6921      	ldr	r1, [r4, #16]
 801a084:	464a      	mov	r2, r9
 801a086:	f7fd fd04 	bl	8017a92 <memcpy>
 801a08a:	89a3      	ldrh	r3, [r4, #12]
 801a08c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a094:	81a3      	strh	r3, [r4, #12]
 801a096:	6126      	str	r6, [r4, #16]
 801a098:	6165      	str	r5, [r4, #20]
 801a09a:	444e      	add	r6, r9
 801a09c:	eba5 0509 	sub.w	r5, r5, r9
 801a0a0:	6026      	str	r6, [r4, #0]
 801a0a2:	60a5      	str	r5, [r4, #8]
 801a0a4:	463e      	mov	r6, r7
 801a0a6:	42be      	cmp	r6, r7
 801a0a8:	d900      	bls.n	801a0ac <__ssputs_r+0x70>
 801a0aa:	463e      	mov	r6, r7
 801a0ac:	6820      	ldr	r0, [r4, #0]
 801a0ae:	4632      	mov	r2, r6
 801a0b0:	4641      	mov	r1, r8
 801a0b2:	f000 f9c9 	bl	801a448 <memmove>
 801a0b6:	68a3      	ldr	r3, [r4, #8]
 801a0b8:	1b9b      	subs	r3, r3, r6
 801a0ba:	60a3      	str	r3, [r4, #8]
 801a0bc:	6823      	ldr	r3, [r4, #0]
 801a0be:	4433      	add	r3, r6
 801a0c0:	6023      	str	r3, [r4, #0]
 801a0c2:	2000      	movs	r0, #0
 801a0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0c8:	462a      	mov	r2, r5
 801a0ca:	f000 fd9e 	bl	801ac0a <_realloc_r>
 801a0ce:	4606      	mov	r6, r0
 801a0d0:	2800      	cmp	r0, #0
 801a0d2:	d1e0      	bne.n	801a096 <__ssputs_r+0x5a>
 801a0d4:	6921      	ldr	r1, [r4, #16]
 801a0d6:	4650      	mov	r0, sl
 801a0d8:	f7fe fb6c 	bl	80187b4 <_free_r>
 801a0dc:	230c      	movs	r3, #12
 801a0de:	f8ca 3000 	str.w	r3, [sl]
 801a0e2:	89a3      	ldrh	r3, [r4, #12]
 801a0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0e8:	81a3      	strh	r3, [r4, #12]
 801a0ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a0ee:	e7e9      	b.n	801a0c4 <__ssputs_r+0x88>

0801a0f0 <_svfiprintf_r>:
 801a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0f4:	4698      	mov	r8, r3
 801a0f6:	898b      	ldrh	r3, [r1, #12]
 801a0f8:	061b      	lsls	r3, r3, #24
 801a0fa:	b09d      	sub	sp, #116	; 0x74
 801a0fc:	4607      	mov	r7, r0
 801a0fe:	460d      	mov	r5, r1
 801a100:	4614      	mov	r4, r2
 801a102:	d50e      	bpl.n	801a122 <_svfiprintf_r+0x32>
 801a104:	690b      	ldr	r3, [r1, #16]
 801a106:	b963      	cbnz	r3, 801a122 <_svfiprintf_r+0x32>
 801a108:	2140      	movs	r1, #64	; 0x40
 801a10a:	f7fe fbc7 	bl	801889c <_malloc_r>
 801a10e:	6028      	str	r0, [r5, #0]
 801a110:	6128      	str	r0, [r5, #16]
 801a112:	b920      	cbnz	r0, 801a11e <_svfiprintf_r+0x2e>
 801a114:	230c      	movs	r3, #12
 801a116:	603b      	str	r3, [r7, #0]
 801a118:	f04f 30ff 	mov.w	r0, #4294967295
 801a11c:	e0d0      	b.n	801a2c0 <_svfiprintf_r+0x1d0>
 801a11e:	2340      	movs	r3, #64	; 0x40
 801a120:	616b      	str	r3, [r5, #20]
 801a122:	2300      	movs	r3, #0
 801a124:	9309      	str	r3, [sp, #36]	; 0x24
 801a126:	2320      	movs	r3, #32
 801a128:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a12c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a130:	2330      	movs	r3, #48	; 0x30
 801a132:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801a2d8 <_svfiprintf_r+0x1e8>
 801a136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a13a:	f04f 0901 	mov.w	r9, #1
 801a13e:	4623      	mov	r3, r4
 801a140:	469a      	mov	sl, r3
 801a142:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a146:	b10a      	cbz	r2, 801a14c <_svfiprintf_r+0x5c>
 801a148:	2a25      	cmp	r2, #37	; 0x25
 801a14a:	d1f9      	bne.n	801a140 <_svfiprintf_r+0x50>
 801a14c:	ebba 0b04 	subs.w	fp, sl, r4
 801a150:	d00b      	beq.n	801a16a <_svfiprintf_r+0x7a>
 801a152:	465b      	mov	r3, fp
 801a154:	4622      	mov	r2, r4
 801a156:	4629      	mov	r1, r5
 801a158:	4638      	mov	r0, r7
 801a15a:	f7ff ff6f 	bl	801a03c <__ssputs_r>
 801a15e:	3001      	adds	r0, #1
 801a160:	f000 80a9 	beq.w	801a2b6 <_svfiprintf_r+0x1c6>
 801a164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a166:	445a      	add	r2, fp
 801a168:	9209      	str	r2, [sp, #36]	; 0x24
 801a16a:	f89a 3000 	ldrb.w	r3, [sl]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	f000 80a1 	beq.w	801a2b6 <_svfiprintf_r+0x1c6>
 801a174:	2300      	movs	r3, #0
 801a176:	f04f 32ff 	mov.w	r2, #4294967295
 801a17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a17e:	f10a 0a01 	add.w	sl, sl, #1
 801a182:	9304      	str	r3, [sp, #16]
 801a184:	9307      	str	r3, [sp, #28]
 801a186:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a18a:	931a      	str	r3, [sp, #104]	; 0x68
 801a18c:	4654      	mov	r4, sl
 801a18e:	2205      	movs	r2, #5
 801a190:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a194:	4850      	ldr	r0, [pc, #320]	; (801a2d8 <_svfiprintf_r+0x1e8>)
 801a196:	f7e6 f843 	bl	8000220 <memchr>
 801a19a:	9a04      	ldr	r2, [sp, #16]
 801a19c:	b9d8      	cbnz	r0, 801a1d6 <_svfiprintf_r+0xe6>
 801a19e:	06d0      	lsls	r0, r2, #27
 801a1a0:	bf44      	itt	mi
 801a1a2:	2320      	movmi	r3, #32
 801a1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1a8:	0711      	lsls	r1, r2, #28
 801a1aa:	bf44      	itt	mi
 801a1ac:	232b      	movmi	r3, #43	; 0x2b
 801a1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a1b2:	f89a 3000 	ldrb.w	r3, [sl]
 801a1b6:	2b2a      	cmp	r3, #42	; 0x2a
 801a1b8:	d015      	beq.n	801a1e6 <_svfiprintf_r+0xf6>
 801a1ba:	9a07      	ldr	r2, [sp, #28]
 801a1bc:	4654      	mov	r4, sl
 801a1be:	2000      	movs	r0, #0
 801a1c0:	f04f 0c0a 	mov.w	ip, #10
 801a1c4:	4621      	mov	r1, r4
 801a1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a1ca:	3b30      	subs	r3, #48	; 0x30
 801a1cc:	2b09      	cmp	r3, #9
 801a1ce:	d94d      	bls.n	801a26c <_svfiprintf_r+0x17c>
 801a1d0:	b1b0      	cbz	r0, 801a200 <_svfiprintf_r+0x110>
 801a1d2:	9207      	str	r2, [sp, #28]
 801a1d4:	e014      	b.n	801a200 <_svfiprintf_r+0x110>
 801a1d6:	eba0 0308 	sub.w	r3, r0, r8
 801a1da:	fa09 f303 	lsl.w	r3, r9, r3
 801a1de:	4313      	orrs	r3, r2
 801a1e0:	9304      	str	r3, [sp, #16]
 801a1e2:	46a2      	mov	sl, r4
 801a1e4:	e7d2      	b.n	801a18c <_svfiprintf_r+0x9c>
 801a1e6:	9b03      	ldr	r3, [sp, #12]
 801a1e8:	1d19      	adds	r1, r3, #4
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	9103      	str	r1, [sp, #12]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	bfbb      	ittet	lt
 801a1f2:	425b      	neglt	r3, r3
 801a1f4:	f042 0202 	orrlt.w	r2, r2, #2
 801a1f8:	9307      	strge	r3, [sp, #28]
 801a1fa:	9307      	strlt	r3, [sp, #28]
 801a1fc:	bfb8      	it	lt
 801a1fe:	9204      	strlt	r2, [sp, #16]
 801a200:	7823      	ldrb	r3, [r4, #0]
 801a202:	2b2e      	cmp	r3, #46	; 0x2e
 801a204:	d10c      	bne.n	801a220 <_svfiprintf_r+0x130>
 801a206:	7863      	ldrb	r3, [r4, #1]
 801a208:	2b2a      	cmp	r3, #42	; 0x2a
 801a20a:	d134      	bne.n	801a276 <_svfiprintf_r+0x186>
 801a20c:	9b03      	ldr	r3, [sp, #12]
 801a20e:	1d1a      	adds	r2, r3, #4
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	9203      	str	r2, [sp, #12]
 801a214:	2b00      	cmp	r3, #0
 801a216:	bfb8      	it	lt
 801a218:	f04f 33ff 	movlt.w	r3, #4294967295
 801a21c:	3402      	adds	r4, #2
 801a21e:	9305      	str	r3, [sp, #20]
 801a220:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801a2e8 <_svfiprintf_r+0x1f8>
 801a224:	7821      	ldrb	r1, [r4, #0]
 801a226:	2203      	movs	r2, #3
 801a228:	4650      	mov	r0, sl
 801a22a:	f7e5 fff9 	bl	8000220 <memchr>
 801a22e:	b138      	cbz	r0, 801a240 <_svfiprintf_r+0x150>
 801a230:	9b04      	ldr	r3, [sp, #16]
 801a232:	eba0 000a 	sub.w	r0, r0, sl
 801a236:	2240      	movs	r2, #64	; 0x40
 801a238:	4082      	lsls	r2, r0
 801a23a:	4313      	orrs	r3, r2
 801a23c:	3401      	adds	r4, #1
 801a23e:	9304      	str	r3, [sp, #16]
 801a240:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a244:	4825      	ldr	r0, [pc, #148]	; (801a2dc <_svfiprintf_r+0x1ec>)
 801a246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a24a:	2206      	movs	r2, #6
 801a24c:	f7e5 ffe8 	bl	8000220 <memchr>
 801a250:	2800      	cmp	r0, #0
 801a252:	d038      	beq.n	801a2c6 <_svfiprintf_r+0x1d6>
 801a254:	4b22      	ldr	r3, [pc, #136]	; (801a2e0 <_svfiprintf_r+0x1f0>)
 801a256:	bb1b      	cbnz	r3, 801a2a0 <_svfiprintf_r+0x1b0>
 801a258:	9b03      	ldr	r3, [sp, #12]
 801a25a:	3307      	adds	r3, #7
 801a25c:	f023 0307 	bic.w	r3, r3, #7
 801a260:	3308      	adds	r3, #8
 801a262:	9303      	str	r3, [sp, #12]
 801a264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a266:	4433      	add	r3, r6
 801a268:	9309      	str	r3, [sp, #36]	; 0x24
 801a26a:	e768      	b.n	801a13e <_svfiprintf_r+0x4e>
 801a26c:	fb0c 3202 	mla	r2, ip, r2, r3
 801a270:	460c      	mov	r4, r1
 801a272:	2001      	movs	r0, #1
 801a274:	e7a6      	b.n	801a1c4 <_svfiprintf_r+0xd4>
 801a276:	2300      	movs	r3, #0
 801a278:	3401      	adds	r4, #1
 801a27a:	9305      	str	r3, [sp, #20]
 801a27c:	4619      	mov	r1, r3
 801a27e:	f04f 0c0a 	mov.w	ip, #10
 801a282:	4620      	mov	r0, r4
 801a284:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a288:	3a30      	subs	r2, #48	; 0x30
 801a28a:	2a09      	cmp	r2, #9
 801a28c:	d903      	bls.n	801a296 <_svfiprintf_r+0x1a6>
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d0c6      	beq.n	801a220 <_svfiprintf_r+0x130>
 801a292:	9105      	str	r1, [sp, #20]
 801a294:	e7c4      	b.n	801a220 <_svfiprintf_r+0x130>
 801a296:	fb0c 2101 	mla	r1, ip, r1, r2
 801a29a:	4604      	mov	r4, r0
 801a29c:	2301      	movs	r3, #1
 801a29e:	e7f0      	b.n	801a282 <_svfiprintf_r+0x192>
 801a2a0:	ab03      	add	r3, sp, #12
 801a2a2:	9300      	str	r3, [sp, #0]
 801a2a4:	462a      	mov	r2, r5
 801a2a6:	4b0f      	ldr	r3, [pc, #60]	; (801a2e4 <_svfiprintf_r+0x1f4>)
 801a2a8:	a904      	add	r1, sp, #16
 801a2aa:	4638      	mov	r0, r7
 801a2ac:	f7fc fc76 	bl	8016b9c <_printf_float>
 801a2b0:	1c42      	adds	r2, r0, #1
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	d1d6      	bne.n	801a264 <_svfiprintf_r+0x174>
 801a2b6:	89ab      	ldrh	r3, [r5, #12]
 801a2b8:	065b      	lsls	r3, r3, #25
 801a2ba:	f53f af2d 	bmi.w	801a118 <_svfiprintf_r+0x28>
 801a2be:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a2c0:	b01d      	add	sp, #116	; 0x74
 801a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c6:	ab03      	add	r3, sp, #12
 801a2c8:	9300      	str	r3, [sp, #0]
 801a2ca:	462a      	mov	r2, r5
 801a2cc:	4b05      	ldr	r3, [pc, #20]	; (801a2e4 <_svfiprintf_r+0x1f4>)
 801a2ce:	a904      	add	r1, sp, #16
 801a2d0:	4638      	mov	r0, r7
 801a2d2:	f7fc ff07 	bl	80170e4 <_printf_i>
 801a2d6:	e7eb      	b.n	801a2b0 <_svfiprintf_r+0x1c0>
 801a2d8:	0801e271 	.word	0x0801e271
 801a2dc:	0801e27b 	.word	0x0801e27b
 801a2e0:	08016b9d 	.word	0x08016b9d
 801a2e4:	0801a03d 	.word	0x0801a03d
 801a2e8:	0801e277 	.word	0x0801e277

0801a2ec <__sflush_r>:
 801a2ec:	898a      	ldrh	r2, [r1, #12]
 801a2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f2:	4605      	mov	r5, r0
 801a2f4:	0710      	lsls	r0, r2, #28
 801a2f6:	460c      	mov	r4, r1
 801a2f8:	d458      	bmi.n	801a3ac <__sflush_r+0xc0>
 801a2fa:	684b      	ldr	r3, [r1, #4]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	dc05      	bgt.n	801a30c <__sflush_r+0x20>
 801a300:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a302:	2b00      	cmp	r3, #0
 801a304:	dc02      	bgt.n	801a30c <__sflush_r+0x20>
 801a306:	2000      	movs	r0, #0
 801a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a30c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a30e:	2e00      	cmp	r6, #0
 801a310:	d0f9      	beq.n	801a306 <__sflush_r+0x1a>
 801a312:	2300      	movs	r3, #0
 801a314:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a318:	682f      	ldr	r7, [r5, #0]
 801a31a:	6a21      	ldr	r1, [r4, #32]
 801a31c:	602b      	str	r3, [r5, #0]
 801a31e:	d032      	beq.n	801a386 <__sflush_r+0x9a>
 801a320:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a322:	89a3      	ldrh	r3, [r4, #12]
 801a324:	075a      	lsls	r2, r3, #29
 801a326:	d505      	bpl.n	801a334 <__sflush_r+0x48>
 801a328:	6863      	ldr	r3, [r4, #4]
 801a32a:	1ac0      	subs	r0, r0, r3
 801a32c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a32e:	b10b      	cbz	r3, 801a334 <__sflush_r+0x48>
 801a330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a332:	1ac0      	subs	r0, r0, r3
 801a334:	2300      	movs	r3, #0
 801a336:	4602      	mov	r2, r0
 801a338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a33a:	6a21      	ldr	r1, [r4, #32]
 801a33c:	4628      	mov	r0, r5
 801a33e:	47b0      	blx	r6
 801a340:	1c43      	adds	r3, r0, #1
 801a342:	89a3      	ldrh	r3, [r4, #12]
 801a344:	d106      	bne.n	801a354 <__sflush_r+0x68>
 801a346:	6829      	ldr	r1, [r5, #0]
 801a348:	291d      	cmp	r1, #29
 801a34a:	d82b      	bhi.n	801a3a4 <__sflush_r+0xb8>
 801a34c:	4a29      	ldr	r2, [pc, #164]	; (801a3f4 <__sflush_r+0x108>)
 801a34e:	410a      	asrs	r2, r1
 801a350:	07d6      	lsls	r6, r2, #31
 801a352:	d427      	bmi.n	801a3a4 <__sflush_r+0xb8>
 801a354:	2200      	movs	r2, #0
 801a356:	6062      	str	r2, [r4, #4]
 801a358:	04d9      	lsls	r1, r3, #19
 801a35a:	6922      	ldr	r2, [r4, #16]
 801a35c:	6022      	str	r2, [r4, #0]
 801a35e:	d504      	bpl.n	801a36a <__sflush_r+0x7e>
 801a360:	1c42      	adds	r2, r0, #1
 801a362:	d101      	bne.n	801a368 <__sflush_r+0x7c>
 801a364:	682b      	ldr	r3, [r5, #0]
 801a366:	b903      	cbnz	r3, 801a36a <__sflush_r+0x7e>
 801a368:	6560      	str	r0, [r4, #84]	; 0x54
 801a36a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a36c:	602f      	str	r7, [r5, #0]
 801a36e:	2900      	cmp	r1, #0
 801a370:	d0c9      	beq.n	801a306 <__sflush_r+0x1a>
 801a372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a376:	4299      	cmp	r1, r3
 801a378:	d002      	beq.n	801a380 <__sflush_r+0x94>
 801a37a:	4628      	mov	r0, r5
 801a37c:	f7fe fa1a 	bl	80187b4 <_free_r>
 801a380:	2000      	movs	r0, #0
 801a382:	6360      	str	r0, [r4, #52]	; 0x34
 801a384:	e7c0      	b.n	801a308 <__sflush_r+0x1c>
 801a386:	2301      	movs	r3, #1
 801a388:	4628      	mov	r0, r5
 801a38a:	47b0      	blx	r6
 801a38c:	1c41      	adds	r1, r0, #1
 801a38e:	d1c8      	bne.n	801a322 <__sflush_r+0x36>
 801a390:	682b      	ldr	r3, [r5, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d0c5      	beq.n	801a322 <__sflush_r+0x36>
 801a396:	2b1d      	cmp	r3, #29
 801a398:	d001      	beq.n	801a39e <__sflush_r+0xb2>
 801a39a:	2b16      	cmp	r3, #22
 801a39c:	d101      	bne.n	801a3a2 <__sflush_r+0xb6>
 801a39e:	602f      	str	r7, [r5, #0]
 801a3a0:	e7b1      	b.n	801a306 <__sflush_r+0x1a>
 801a3a2:	89a3      	ldrh	r3, [r4, #12]
 801a3a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3a8:	81a3      	strh	r3, [r4, #12]
 801a3aa:	e7ad      	b.n	801a308 <__sflush_r+0x1c>
 801a3ac:	690f      	ldr	r7, [r1, #16]
 801a3ae:	2f00      	cmp	r7, #0
 801a3b0:	d0a9      	beq.n	801a306 <__sflush_r+0x1a>
 801a3b2:	0793      	lsls	r3, r2, #30
 801a3b4:	680e      	ldr	r6, [r1, #0]
 801a3b6:	bf08      	it	eq
 801a3b8:	694b      	ldreq	r3, [r1, #20]
 801a3ba:	600f      	str	r7, [r1, #0]
 801a3bc:	bf18      	it	ne
 801a3be:	2300      	movne	r3, #0
 801a3c0:	eba6 0807 	sub.w	r8, r6, r7
 801a3c4:	608b      	str	r3, [r1, #8]
 801a3c6:	f1b8 0f00 	cmp.w	r8, #0
 801a3ca:	dd9c      	ble.n	801a306 <__sflush_r+0x1a>
 801a3cc:	6a21      	ldr	r1, [r4, #32]
 801a3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3d0:	4643      	mov	r3, r8
 801a3d2:	463a      	mov	r2, r7
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	47b0      	blx	r6
 801a3d8:	2800      	cmp	r0, #0
 801a3da:	dc06      	bgt.n	801a3ea <__sflush_r+0xfe>
 801a3dc:	89a3      	ldrh	r3, [r4, #12]
 801a3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3e2:	81a3      	strh	r3, [r4, #12]
 801a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a3e8:	e78e      	b.n	801a308 <__sflush_r+0x1c>
 801a3ea:	4407      	add	r7, r0
 801a3ec:	eba8 0800 	sub.w	r8, r8, r0
 801a3f0:	e7e9      	b.n	801a3c6 <__sflush_r+0xda>
 801a3f2:	bf00      	nop
 801a3f4:	dfbffffe 	.word	0xdfbffffe

0801a3f8 <_fflush_r>:
 801a3f8:	b538      	push	{r3, r4, r5, lr}
 801a3fa:	690b      	ldr	r3, [r1, #16]
 801a3fc:	4605      	mov	r5, r0
 801a3fe:	460c      	mov	r4, r1
 801a400:	b913      	cbnz	r3, 801a408 <_fflush_r+0x10>
 801a402:	2500      	movs	r5, #0
 801a404:	4628      	mov	r0, r5
 801a406:	bd38      	pop	{r3, r4, r5, pc}
 801a408:	b118      	cbz	r0, 801a412 <_fflush_r+0x1a>
 801a40a:	6a03      	ldr	r3, [r0, #32]
 801a40c:	b90b      	cbnz	r3, 801a412 <_fflush_r+0x1a>
 801a40e:	f7fd fa27 	bl	8017860 <__sinit>
 801a412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d0f3      	beq.n	801a402 <_fflush_r+0xa>
 801a41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a41c:	07d0      	lsls	r0, r2, #31
 801a41e:	d404      	bmi.n	801a42a <_fflush_r+0x32>
 801a420:	0599      	lsls	r1, r3, #22
 801a422:	d402      	bmi.n	801a42a <_fflush_r+0x32>
 801a424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a426:	f7fd fb32 	bl	8017a8e <__retarget_lock_acquire_recursive>
 801a42a:	4628      	mov	r0, r5
 801a42c:	4621      	mov	r1, r4
 801a42e:	f7ff ff5d 	bl	801a2ec <__sflush_r>
 801a432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a434:	07da      	lsls	r2, r3, #31
 801a436:	4605      	mov	r5, r0
 801a438:	d4e4      	bmi.n	801a404 <_fflush_r+0xc>
 801a43a:	89a3      	ldrh	r3, [r4, #12]
 801a43c:	059b      	lsls	r3, r3, #22
 801a43e:	d4e1      	bmi.n	801a404 <_fflush_r+0xc>
 801a440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a442:	f7fd fb25 	bl	8017a90 <__retarget_lock_release_recursive>
 801a446:	e7dd      	b.n	801a404 <_fflush_r+0xc>

0801a448 <memmove>:
 801a448:	4288      	cmp	r0, r1
 801a44a:	b510      	push	{r4, lr}
 801a44c:	eb01 0402 	add.w	r4, r1, r2
 801a450:	d902      	bls.n	801a458 <memmove+0x10>
 801a452:	4284      	cmp	r4, r0
 801a454:	4623      	mov	r3, r4
 801a456:	d807      	bhi.n	801a468 <memmove+0x20>
 801a458:	1e43      	subs	r3, r0, #1
 801a45a:	42a1      	cmp	r1, r4
 801a45c:	d008      	beq.n	801a470 <memmove+0x28>
 801a45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a462:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a466:	e7f8      	b.n	801a45a <memmove+0x12>
 801a468:	4402      	add	r2, r0
 801a46a:	4601      	mov	r1, r0
 801a46c:	428a      	cmp	r2, r1
 801a46e:	d100      	bne.n	801a472 <memmove+0x2a>
 801a470:	bd10      	pop	{r4, pc}
 801a472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a47a:	e7f7      	b.n	801a46c <memmove+0x24>

0801a47c <strncmp>:
 801a47c:	b510      	push	{r4, lr}
 801a47e:	b16a      	cbz	r2, 801a49c <strncmp+0x20>
 801a480:	3901      	subs	r1, #1
 801a482:	1884      	adds	r4, r0, r2
 801a484:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a488:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a48c:	429a      	cmp	r2, r3
 801a48e:	d103      	bne.n	801a498 <strncmp+0x1c>
 801a490:	42a0      	cmp	r0, r4
 801a492:	d001      	beq.n	801a498 <strncmp+0x1c>
 801a494:	2a00      	cmp	r2, #0
 801a496:	d1f5      	bne.n	801a484 <strncmp+0x8>
 801a498:	1ad0      	subs	r0, r2, r3
 801a49a:	bd10      	pop	{r4, pc}
 801a49c:	4610      	mov	r0, r2
 801a49e:	e7fc      	b.n	801a49a <strncmp+0x1e>

0801a4a0 <_sbrk_r>:
 801a4a0:	b538      	push	{r3, r4, r5, lr}
 801a4a2:	4d06      	ldr	r5, [pc, #24]	; (801a4bc <_sbrk_r+0x1c>)
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	4604      	mov	r4, r0
 801a4a8:	4608      	mov	r0, r1
 801a4aa:	602b      	str	r3, [r5, #0]
 801a4ac:	f7eb fd40 	bl	8005f30 <_sbrk>
 801a4b0:	1c43      	adds	r3, r0, #1
 801a4b2:	d102      	bne.n	801a4ba <_sbrk_r+0x1a>
 801a4b4:	682b      	ldr	r3, [r5, #0]
 801a4b6:	b103      	cbz	r3, 801a4ba <_sbrk_r+0x1a>
 801a4b8:	6023      	str	r3, [r4, #0]
 801a4ba:	bd38      	pop	{r3, r4, r5, pc}
 801a4bc:	20003718 	.word	0x20003718

0801a4c0 <nan>:
 801a4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a4c8 <nan+0x8>
 801a4c4:	4770      	bx	lr
 801a4c6:	bf00      	nop
 801a4c8:	00000000 	.word	0x00000000
 801a4cc:	7ff80000 	.word	0x7ff80000

0801a4d0 <__assert_func>:
 801a4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a4d2:	4614      	mov	r4, r2
 801a4d4:	461a      	mov	r2, r3
 801a4d6:	4b09      	ldr	r3, [pc, #36]	; (801a4fc <__assert_func+0x2c>)
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	4605      	mov	r5, r0
 801a4dc:	68d8      	ldr	r0, [r3, #12]
 801a4de:	b14c      	cbz	r4, 801a4f4 <__assert_func+0x24>
 801a4e0:	4b07      	ldr	r3, [pc, #28]	; (801a500 <__assert_func+0x30>)
 801a4e2:	9100      	str	r1, [sp, #0]
 801a4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a4e8:	4906      	ldr	r1, [pc, #24]	; (801a504 <__assert_func+0x34>)
 801a4ea:	462b      	mov	r3, r5
 801a4ec:	f000 fbca 	bl	801ac84 <fiprintf>
 801a4f0:	f000 fbda 	bl	801aca8 <abort>
 801a4f4:	4b04      	ldr	r3, [pc, #16]	; (801a508 <__assert_func+0x38>)
 801a4f6:	461c      	mov	r4, r3
 801a4f8:	e7f3      	b.n	801a4e2 <__assert_func+0x12>
 801a4fa:	bf00      	nop
 801a4fc:	200003ec 	.word	0x200003ec
 801a500:	0801e28a 	.word	0x0801e28a
 801a504:	0801e297 	.word	0x0801e297
 801a508:	0801e2c5 	.word	0x0801e2c5

0801a50c <_calloc_r>:
 801a50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a50e:	fba1 2402 	umull	r2, r4, r1, r2
 801a512:	b94c      	cbnz	r4, 801a528 <_calloc_r+0x1c>
 801a514:	4611      	mov	r1, r2
 801a516:	9201      	str	r2, [sp, #4]
 801a518:	f7fe f9c0 	bl	801889c <_malloc_r>
 801a51c:	9a01      	ldr	r2, [sp, #4]
 801a51e:	4605      	mov	r5, r0
 801a520:	b930      	cbnz	r0, 801a530 <_calloc_r+0x24>
 801a522:	4628      	mov	r0, r5
 801a524:	b003      	add	sp, #12
 801a526:	bd30      	pop	{r4, r5, pc}
 801a528:	220c      	movs	r2, #12
 801a52a:	6002      	str	r2, [r0, #0]
 801a52c:	2500      	movs	r5, #0
 801a52e:	e7f8      	b.n	801a522 <_calloc_r+0x16>
 801a530:	4621      	mov	r1, r4
 801a532:	f7fd fa2e 	bl	8017992 <memset>
 801a536:	e7f4      	b.n	801a522 <_calloc_r+0x16>

0801a538 <rshift>:
 801a538:	6903      	ldr	r3, [r0, #16]
 801a53a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a53e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a542:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a546:	f100 0414 	add.w	r4, r0, #20
 801a54a:	dd45      	ble.n	801a5d8 <rshift+0xa0>
 801a54c:	f011 011f 	ands.w	r1, r1, #31
 801a550:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a554:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a558:	d10c      	bne.n	801a574 <rshift+0x3c>
 801a55a:	f100 0710 	add.w	r7, r0, #16
 801a55e:	4629      	mov	r1, r5
 801a560:	42b1      	cmp	r1, r6
 801a562:	d334      	bcc.n	801a5ce <rshift+0x96>
 801a564:	1a9b      	subs	r3, r3, r2
 801a566:	009b      	lsls	r3, r3, #2
 801a568:	1eea      	subs	r2, r5, #3
 801a56a:	4296      	cmp	r6, r2
 801a56c:	bf38      	it	cc
 801a56e:	2300      	movcc	r3, #0
 801a570:	4423      	add	r3, r4
 801a572:	e015      	b.n	801a5a0 <rshift+0x68>
 801a574:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a578:	f1c1 0820 	rsb	r8, r1, #32
 801a57c:	40cf      	lsrs	r7, r1
 801a57e:	f105 0e04 	add.w	lr, r5, #4
 801a582:	46a1      	mov	r9, r4
 801a584:	4576      	cmp	r6, lr
 801a586:	46f4      	mov	ip, lr
 801a588:	d815      	bhi.n	801a5b6 <rshift+0x7e>
 801a58a:	1a9a      	subs	r2, r3, r2
 801a58c:	0092      	lsls	r2, r2, #2
 801a58e:	3a04      	subs	r2, #4
 801a590:	3501      	adds	r5, #1
 801a592:	42ae      	cmp	r6, r5
 801a594:	bf38      	it	cc
 801a596:	2200      	movcc	r2, #0
 801a598:	18a3      	adds	r3, r4, r2
 801a59a:	50a7      	str	r7, [r4, r2]
 801a59c:	b107      	cbz	r7, 801a5a0 <rshift+0x68>
 801a59e:	3304      	adds	r3, #4
 801a5a0:	1b1a      	subs	r2, r3, r4
 801a5a2:	42a3      	cmp	r3, r4
 801a5a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a5a8:	bf08      	it	eq
 801a5aa:	2300      	moveq	r3, #0
 801a5ac:	6102      	str	r2, [r0, #16]
 801a5ae:	bf08      	it	eq
 801a5b0:	6143      	streq	r3, [r0, #20]
 801a5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5b6:	f8dc c000 	ldr.w	ip, [ip]
 801a5ba:	fa0c fc08 	lsl.w	ip, ip, r8
 801a5be:	ea4c 0707 	orr.w	r7, ip, r7
 801a5c2:	f849 7b04 	str.w	r7, [r9], #4
 801a5c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a5ca:	40cf      	lsrs	r7, r1
 801a5cc:	e7da      	b.n	801a584 <rshift+0x4c>
 801a5ce:	f851 cb04 	ldr.w	ip, [r1], #4
 801a5d2:	f847 cf04 	str.w	ip, [r7, #4]!
 801a5d6:	e7c3      	b.n	801a560 <rshift+0x28>
 801a5d8:	4623      	mov	r3, r4
 801a5da:	e7e1      	b.n	801a5a0 <rshift+0x68>

0801a5dc <__hexdig_fun>:
 801a5dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a5e0:	2b09      	cmp	r3, #9
 801a5e2:	d802      	bhi.n	801a5ea <__hexdig_fun+0xe>
 801a5e4:	3820      	subs	r0, #32
 801a5e6:	b2c0      	uxtb	r0, r0
 801a5e8:	4770      	bx	lr
 801a5ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a5ee:	2b05      	cmp	r3, #5
 801a5f0:	d801      	bhi.n	801a5f6 <__hexdig_fun+0x1a>
 801a5f2:	3847      	subs	r0, #71	; 0x47
 801a5f4:	e7f7      	b.n	801a5e6 <__hexdig_fun+0xa>
 801a5f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a5fa:	2b05      	cmp	r3, #5
 801a5fc:	d801      	bhi.n	801a602 <__hexdig_fun+0x26>
 801a5fe:	3827      	subs	r0, #39	; 0x27
 801a600:	e7f1      	b.n	801a5e6 <__hexdig_fun+0xa>
 801a602:	2000      	movs	r0, #0
 801a604:	4770      	bx	lr
	...

0801a608 <__gethex>:
 801a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60c:	4617      	mov	r7, r2
 801a60e:	680a      	ldr	r2, [r1, #0]
 801a610:	b085      	sub	sp, #20
 801a612:	f102 0b02 	add.w	fp, r2, #2
 801a616:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a61a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a61e:	4681      	mov	r9, r0
 801a620:	468a      	mov	sl, r1
 801a622:	9302      	str	r3, [sp, #8]
 801a624:	32fe      	adds	r2, #254	; 0xfe
 801a626:	eb02 030b 	add.w	r3, r2, fp
 801a62a:	46d8      	mov	r8, fp
 801a62c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a630:	9301      	str	r3, [sp, #4]
 801a632:	2830      	cmp	r0, #48	; 0x30
 801a634:	d0f7      	beq.n	801a626 <__gethex+0x1e>
 801a636:	f7ff ffd1 	bl	801a5dc <__hexdig_fun>
 801a63a:	4604      	mov	r4, r0
 801a63c:	2800      	cmp	r0, #0
 801a63e:	d138      	bne.n	801a6b2 <__gethex+0xaa>
 801a640:	49a7      	ldr	r1, [pc, #668]	; (801a8e0 <__gethex+0x2d8>)
 801a642:	2201      	movs	r2, #1
 801a644:	4640      	mov	r0, r8
 801a646:	f7ff ff19 	bl	801a47c <strncmp>
 801a64a:	4606      	mov	r6, r0
 801a64c:	2800      	cmp	r0, #0
 801a64e:	d169      	bne.n	801a724 <__gethex+0x11c>
 801a650:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a654:	465d      	mov	r5, fp
 801a656:	f7ff ffc1 	bl	801a5dc <__hexdig_fun>
 801a65a:	2800      	cmp	r0, #0
 801a65c:	d064      	beq.n	801a728 <__gethex+0x120>
 801a65e:	465a      	mov	r2, fp
 801a660:	7810      	ldrb	r0, [r2, #0]
 801a662:	2830      	cmp	r0, #48	; 0x30
 801a664:	4690      	mov	r8, r2
 801a666:	f102 0201 	add.w	r2, r2, #1
 801a66a:	d0f9      	beq.n	801a660 <__gethex+0x58>
 801a66c:	f7ff ffb6 	bl	801a5dc <__hexdig_fun>
 801a670:	2301      	movs	r3, #1
 801a672:	fab0 f480 	clz	r4, r0
 801a676:	0964      	lsrs	r4, r4, #5
 801a678:	465e      	mov	r6, fp
 801a67a:	9301      	str	r3, [sp, #4]
 801a67c:	4642      	mov	r2, r8
 801a67e:	4615      	mov	r5, r2
 801a680:	3201      	adds	r2, #1
 801a682:	7828      	ldrb	r0, [r5, #0]
 801a684:	f7ff ffaa 	bl	801a5dc <__hexdig_fun>
 801a688:	2800      	cmp	r0, #0
 801a68a:	d1f8      	bne.n	801a67e <__gethex+0x76>
 801a68c:	4994      	ldr	r1, [pc, #592]	; (801a8e0 <__gethex+0x2d8>)
 801a68e:	2201      	movs	r2, #1
 801a690:	4628      	mov	r0, r5
 801a692:	f7ff fef3 	bl	801a47c <strncmp>
 801a696:	b978      	cbnz	r0, 801a6b8 <__gethex+0xb0>
 801a698:	b946      	cbnz	r6, 801a6ac <__gethex+0xa4>
 801a69a:	1c6e      	adds	r6, r5, #1
 801a69c:	4632      	mov	r2, r6
 801a69e:	4615      	mov	r5, r2
 801a6a0:	3201      	adds	r2, #1
 801a6a2:	7828      	ldrb	r0, [r5, #0]
 801a6a4:	f7ff ff9a 	bl	801a5dc <__hexdig_fun>
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	d1f8      	bne.n	801a69e <__gethex+0x96>
 801a6ac:	1b73      	subs	r3, r6, r5
 801a6ae:	009e      	lsls	r6, r3, #2
 801a6b0:	e004      	b.n	801a6bc <__gethex+0xb4>
 801a6b2:	2400      	movs	r4, #0
 801a6b4:	4626      	mov	r6, r4
 801a6b6:	e7e1      	b.n	801a67c <__gethex+0x74>
 801a6b8:	2e00      	cmp	r6, #0
 801a6ba:	d1f7      	bne.n	801a6ac <__gethex+0xa4>
 801a6bc:	782b      	ldrb	r3, [r5, #0]
 801a6be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6c2:	2b50      	cmp	r3, #80	; 0x50
 801a6c4:	d13d      	bne.n	801a742 <__gethex+0x13a>
 801a6c6:	786b      	ldrb	r3, [r5, #1]
 801a6c8:	2b2b      	cmp	r3, #43	; 0x2b
 801a6ca:	d02f      	beq.n	801a72c <__gethex+0x124>
 801a6cc:	2b2d      	cmp	r3, #45	; 0x2d
 801a6ce:	d031      	beq.n	801a734 <__gethex+0x12c>
 801a6d0:	1c69      	adds	r1, r5, #1
 801a6d2:	f04f 0b00 	mov.w	fp, #0
 801a6d6:	7808      	ldrb	r0, [r1, #0]
 801a6d8:	f7ff ff80 	bl	801a5dc <__hexdig_fun>
 801a6dc:	1e42      	subs	r2, r0, #1
 801a6de:	b2d2      	uxtb	r2, r2
 801a6e0:	2a18      	cmp	r2, #24
 801a6e2:	d82e      	bhi.n	801a742 <__gethex+0x13a>
 801a6e4:	f1a0 0210 	sub.w	r2, r0, #16
 801a6e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a6ec:	f7ff ff76 	bl	801a5dc <__hexdig_fun>
 801a6f0:	f100 3cff 	add.w	ip, r0, #4294967295
 801a6f4:	fa5f fc8c 	uxtb.w	ip, ip
 801a6f8:	f1bc 0f18 	cmp.w	ip, #24
 801a6fc:	d91d      	bls.n	801a73a <__gethex+0x132>
 801a6fe:	f1bb 0f00 	cmp.w	fp, #0
 801a702:	d000      	beq.n	801a706 <__gethex+0xfe>
 801a704:	4252      	negs	r2, r2
 801a706:	4416      	add	r6, r2
 801a708:	f8ca 1000 	str.w	r1, [sl]
 801a70c:	b1dc      	cbz	r4, 801a746 <__gethex+0x13e>
 801a70e:	9b01      	ldr	r3, [sp, #4]
 801a710:	2b00      	cmp	r3, #0
 801a712:	bf14      	ite	ne
 801a714:	f04f 0800 	movne.w	r8, #0
 801a718:	f04f 0806 	moveq.w	r8, #6
 801a71c:	4640      	mov	r0, r8
 801a71e:	b005      	add	sp, #20
 801a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a724:	4645      	mov	r5, r8
 801a726:	4626      	mov	r6, r4
 801a728:	2401      	movs	r4, #1
 801a72a:	e7c7      	b.n	801a6bc <__gethex+0xb4>
 801a72c:	f04f 0b00 	mov.w	fp, #0
 801a730:	1ca9      	adds	r1, r5, #2
 801a732:	e7d0      	b.n	801a6d6 <__gethex+0xce>
 801a734:	f04f 0b01 	mov.w	fp, #1
 801a738:	e7fa      	b.n	801a730 <__gethex+0x128>
 801a73a:	230a      	movs	r3, #10
 801a73c:	fb03 0002 	mla	r0, r3, r2, r0
 801a740:	e7d0      	b.n	801a6e4 <__gethex+0xdc>
 801a742:	4629      	mov	r1, r5
 801a744:	e7e0      	b.n	801a708 <__gethex+0x100>
 801a746:	eba5 0308 	sub.w	r3, r5, r8
 801a74a:	3b01      	subs	r3, #1
 801a74c:	4621      	mov	r1, r4
 801a74e:	2b07      	cmp	r3, #7
 801a750:	dc0a      	bgt.n	801a768 <__gethex+0x160>
 801a752:	4648      	mov	r0, r9
 801a754:	f7fe f92e 	bl	80189b4 <_Balloc>
 801a758:	4604      	mov	r4, r0
 801a75a:	b940      	cbnz	r0, 801a76e <__gethex+0x166>
 801a75c:	4b61      	ldr	r3, [pc, #388]	; (801a8e4 <__gethex+0x2dc>)
 801a75e:	4602      	mov	r2, r0
 801a760:	21e4      	movs	r1, #228	; 0xe4
 801a762:	4861      	ldr	r0, [pc, #388]	; (801a8e8 <__gethex+0x2e0>)
 801a764:	f7ff feb4 	bl	801a4d0 <__assert_func>
 801a768:	3101      	adds	r1, #1
 801a76a:	105b      	asrs	r3, r3, #1
 801a76c:	e7ef      	b.n	801a74e <__gethex+0x146>
 801a76e:	f100 0a14 	add.w	sl, r0, #20
 801a772:	2300      	movs	r3, #0
 801a774:	495a      	ldr	r1, [pc, #360]	; (801a8e0 <__gethex+0x2d8>)
 801a776:	f8cd a004 	str.w	sl, [sp, #4]
 801a77a:	469b      	mov	fp, r3
 801a77c:	45a8      	cmp	r8, r5
 801a77e:	d342      	bcc.n	801a806 <__gethex+0x1fe>
 801a780:	9801      	ldr	r0, [sp, #4]
 801a782:	f840 bb04 	str.w	fp, [r0], #4
 801a786:	eba0 000a 	sub.w	r0, r0, sl
 801a78a:	1080      	asrs	r0, r0, #2
 801a78c:	6120      	str	r0, [r4, #16]
 801a78e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a792:	4658      	mov	r0, fp
 801a794:	f7fe fa00 	bl	8018b98 <__hi0bits>
 801a798:	683d      	ldr	r5, [r7, #0]
 801a79a:	eba8 0000 	sub.w	r0, r8, r0
 801a79e:	42a8      	cmp	r0, r5
 801a7a0:	dd59      	ble.n	801a856 <__gethex+0x24e>
 801a7a2:	eba0 0805 	sub.w	r8, r0, r5
 801a7a6:	4641      	mov	r1, r8
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	f7fe fd8f 	bl	80192cc <__any_on>
 801a7ae:	4683      	mov	fp, r0
 801a7b0:	b1b8      	cbz	r0, 801a7e2 <__gethex+0x1da>
 801a7b2:	f108 33ff 	add.w	r3, r8, #4294967295
 801a7b6:	1159      	asrs	r1, r3, #5
 801a7b8:	f003 021f 	and.w	r2, r3, #31
 801a7bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a7c0:	f04f 0b01 	mov.w	fp, #1
 801a7c4:	fa0b f202 	lsl.w	r2, fp, r2
 801a7c8:	420a      	tst	r2, r1
 801a7ca:	d00a      	beq.n	801a7e2 <__gethex+0x1da>
 801a7cc:	455b      	cmp	r3, fp
 801a7ce:	dd06      	ble.n	801a7de <__gethex+0x1d6>
 801a7d0:	f1a8 0102 	sub.w	r1, r8, #2
 801a7d4:	4620      	mov	r0, r4
 801a7d6:	f7fe fd79 	bl	80192cc <__any_on>
 801a7da:	2800      	cmp	r0, #0
 801a7dc:	d138      	bne.n	801a850 <__gethex+0x248>
 801a7de:	f04f 0b02 	mov.w	fp, #2
 801a7e2:	4641      	mov	r1, r8
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	f7ff fea7 	bl	801a538 <rshift>
 801a7ea:	4446      	add	r6, r8
 801a7ec:	68bb      	ldr	r3, [r7, #8]
 801a7ee:	42b3      	cmp	r3, r6
 801a7f0:	da41      	bge.n	801a876 <__gethex+0x26e>
 801a7f2:	4621      	mov	r1, r4
 801a7f4:	4648      	mov	r0, r9
 801a7f6:	f7fe f91d 	bl	8018a34 <_Bfree>
 801a7fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	6013      	str	r3, [r2, #0]
 801a800:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801a804:	e78a      	b.n	801a71c <__gethex+0x114>
 801a806:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801a80a:	2a2e      	cmp	r2, #46	; 0x2e
 801a80c:	d014      	beq.n	801a838 <__gethex+0x230>
 801a80e:	2b20      	cmp	r3, #32
 801a810:	d106      	bne.n	801a820 <__gethex+0x218>
 801a812:	9b01      	ldr	r3, [sp, #4]
 801a814:	f843 bb04 	str.w	fp, [r3], #4
 801a818:	f04f 0b00 	mov.w	fp, #0
 801a81c:	9301      	str	r3, [sp, #4]
 801a81e:	465b      	mov	r3, fp
 801a820:	7828      	ldrb	r0, [r5, #0]
 801a822:	9303      	str	r3, [sp, #12]
 801a824:	f7ff feda 	bl	801a5dc <__hexdig_fun>
 801a828:	9b03      	ldr	r3, [sp, #12]
 801a82a:	f000 000f 	and.w	r0, r0, #15
 801a82e:	4098      	lsls	r0, r3
 801a830:	ea4b 0b00 	orr.w	fp, fp, r0
 801a834:	3304      	adds	r3, #4
 801a836:	e7a1      	b.n	801a77c <__gethex+0x174>
 801a838:	45a8      	cmp	r8, r5
 801a83a:	d8e8      	bhi.n	801a80e <__gethex+0x206>
 801a83c:	2201      	movs	r2, #1
 801a83e:	4628      	mov	r0, r5
 801a840:	9303      	str	r3, [sp, #12]
 801a842:	f7ff fe1b 	bl	801a47c <strncmp>
 801a846:	4926      	ldr	r1, [pc, #152]	; (801a8e0 <__gethex+0x2d8>)
 801a848:	9b03      	ldr	r3, [sp, #12]
 801a84a:	2800      	cmp	r0, #0
 801a84c:	d1df      	bne.n	801a80e <__gethex+0x206>
 801a84e:	e795      	b.n	801a77c <__gethex+0x174>
 801a850:	f04f 0b03 	mov.w	fp, #3
 801a854:	e7c5      	b.n	801a7e2 <__gethex+0x1da>
 801a856:	da0b      	bge.n	801a870 <__gethex+0x268>
 801a858:	eba5 0800 	sub.w	r8, r5, r0
 801a85c:	4621      	mov	r1, r4
 801a85e:	4642      	mov	r2, r8
 801a860:	4648      	mov	r0, r9
 801a862:	f7fe fb01 	bl	8018e68 <__lshift>
 801a866:	eba6 0608 	sub.w	r6, r6, r8
 801a86a:	4604      	mov	r4, r0
 801a86c:	f100 0a14 	add.w	sl, r0, #20
 801a870:	f04f 0b00 	mov.w	fp, #0
 801a874:	e7ba      	b.n	801a7ec <__gethex+0x1e4>
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	42b3      	cmp	r3, r6
 801a87a:	dd73      	ble.n	801a964 <__gethex+0x35c>
 801a87c:	1b9e      	subs	r6, r3, r6
 801a87e:	42b5      	cmp	r5, r6
 801a880:	dc34      	bgt.n	801a8ec <__gethex+0x2e4>
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	2b02      	cmp	r3, #2
 801a886:	d023      	beq.n	801a8d0 <__gethex+0x2c8>
 801a888:	2b03      	cmp	r3, #3
 801a88a:	d025      	beq.n	801a8d8 <__gethex+0x2d0>
 801a88c:	2b01      	cmp	r3, #1
 801a88e:	d115      	bne.n	801a8bc <__gethex+0x2b4>
 801a890:	42b5      	cmp	r5, r6
 801a892:	d113      	bne.n	801a8bc <__gethex+0x2b4>
 801a894:	2d01      	cmp	r5, #1
 801a896:	d10b      	bne.n	801a8b0 <__gethex+0x2a8>
 801a898:	9a02      	ldr	r2, [sp, #8]
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6013      	str	r3, [r2, #0]
 801a89e:	2301      	movs	r3, #1
 801a8a0:	6123      	str	r3, [r4, #16]
 801a8a2:	f8ca 3000 	str.w	r3, [sl]
 801a8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 801a8ac:	601c      	str	r4, [r3, #0]
 801a8ae:	e735      	b.n	801a71c <__gethex+0x114>
 801a8b0:	1e69      	subs	r1, r5, #1
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	f7fe fd0a 	bl	80192cc <__any_on>
 801a8b8:	2800      	cmp	r0, #0
 801a8ba:	d1ed      	bne.n	801a898 <__gethex+0x290>
 801a8bc:	4621      	mov	r1, r4
 801a8be:	4648      	mov	r0, r9
 801a8c0:	f7fe f8b8 	bl	8018a34 <_Bfree>
 801a8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	6013      	str	r3, [r2, #0]
 801a8ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 801a8ce:	e725      	b.n	801a71c <__gethex+0x114>
 801a8d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d1f2      	bne.n	801a8bc <__gethex+0x2b4>
 801a8d6:	e7df      	b.n	801a898 <__gethex+0x290>
 801a8d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d1dc      	bne.n	801a898 <__gethex+0x290>
 801a8de:	e7ed      	b.n	801a8bc <__gethex+0x2b4>
 801a8e0:	0801e11c 	.word	0x0801e11c
 801a8e4:	0801dfb5 	.word	0x0801dfb5
 801a8e8:	0801e2c6 	.word	0x0801e2c6
 801a8ec:	f106 38ff 	add.w	r8, r6, #4294967295
 801a8f0:	f1bb 0f00 	cmp.w	fp, #0
 801a8f4:	d133      	bne.n	801a95e <__gethex+0x356>
 801a8f6:	f1b8 0f00 	cmp.w	r8, #0
 801a8fa:	d004      	beq.n	801a906 <__gethex+0x2fe>
 801a8fc:	4641      	mov	r1, r8
 801a8fe:	4620      	mov	r0, r4
 801a900:	f7fe fce4 	bl	80192cc <__any_on>
 801a904:	4683      	mov	fp, r0
 801a906:	ea4f 1268 	mov.w	r2, r8, asr #5
 801a90a:	2301      	movs	r3, #1
 801a90c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801a910:	f008 081f 	and.w	r8, r8, #31
 801a914:	fa03 f308 	lsl.w	r3, r3, r8
 801a918:	4213      	tst	r3, r2
 801a91a:	4631      	mov	r1, r6
 801a91c:	4620      	mov	r0, r4
 801a91e:	bf18      	it	ne
 801a920:	f04b 0b02 	orrne.w	fp, fp, #2
 801a924:	1bad      	subs	r5, r5, r6
 801a926:	f7ff fe07 	bl	801a538 <rshift>
 801a92a:	687e      	ldr	r6, [r7, #4]
 801a92c:	f04f 0802 	mov.w	r8, #2
 801a930:	f1bb 0f00 	cmp.w	fp, #0
 801a934:	d04a      	beq.n	801a9cc <__gethex+0x3c4>
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	2b02      	cmp	r3, #2
 801a93a:	d016      	beq.n	801a96a <__gethex+0x362>
 801a93c:	2b03      	cmp	r3, #3
 801a93e:	d018      	beq.n	801a972 <__gethex+0x36a>
 801a940:	2b01      	cmp	r3, #1
 801a942:	d109      	bne.n	801a958 <__gethex+0x350>
 801a944:	f01b 0f02 	tst.w	fp, #2
 801a948:	d006      	beq.n	801a958 <__gethex+0x350>
 801a94a:	f8da 3000 	ldr.w	r3, [sl]
 801a94e:	ea4b 0b03 	orr.w	fp, fp, r3
 801a952:	f01b 0f01 	tst.w	fp, #1
 801a956:	d10f      	bne.n	801a978 <__gethex+0x370>
 801a958:	f048 0810 	orr.w	r8, r8, #16
 801a95c:	e036      	b.n	801a9cc <__gethex+0x3c4>
 801a95e:	f04f 0b01 	mov.w	fp, #1
 801a962:	e7d0      	b.n	801a906 <__gethex+0x2fe>
 801a964:	f04f 0801 	mov.w	r8, #1
 801a968:	e7e2      	b.n	801a930 <__gethex+0x328>
 801a96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a96c:	f1c3 0301 	rsb	r3, r3, #1
 801a970:	930f      	str	r3, [sp, #60]	; 0x3c
 801a972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a974:	2b00      	cmp	r3, #0
 801a976:	d0ef      	beq.n	801a958 <__gethex+0x350>
 801a978:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a97c:	f104 0214 	add.w	r2, r4, #20
 801a980:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801a984:	9301      	str	r3, [sp, #4]
 801a986:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801a98a:	2300      	movs	r3, #0
 801a98c:	4694      	mov	ip, r2
 801a98e:	f852 1b04 	ldr.w	r1, [r2], #4
 801a992:	f1b1 3fff 	cmp.w	r1, #4294967295
 801a996:	d01e      	beq.n	801a9d6 <__gethex+0x3ce>
 801a998:	3101      	adds	r1, #1
 801a99a:	f8cc 1000 	str.w	r1, [ip]
 801a99e:	f1b8 0f02 	cmp.w	r8, #2
 801a9a2:	f104 0214 	add.w	r2, r4, #20
 801a9a6:	d13d      	bne.n	801aa24 <__gethex+0x41c>
 801a9a8:	683b      	ldr	r3, [r7, #0]
 801a9aa:	3b01      	subs	r3, #1
 801a9ac:	42ab      	cmp	r3, r5
 801a9ae:	d10b      	bne.n	801a9c8 <__gethex+0x3c0>
 801a9b0:	1169      	asrs	r1, r5, #5
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	f005 051f 	and.w	r5, r5, #31
 801a9b8:	fa03 f505 	lsl.w	r5, r3, r5
 801a9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a9c0:	421d      	tst	r5, r3
 801a9c2:	bf18      	it	ne
 801a9c4:	f04f 0801 	movne.w	r8, #1
 801a9c8:	f048 0820 	orr.w	r8, r8, #32
 801a9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9ce:	601c      	str	r4, [r3, #0]
 801a9d0:	9b02      	ldr	r3, [sp, #8]
 801a9d2:	601e      	str	r6, [r3, #0]
 801a9d4:	e6a2      	b.n	801a71c <__gethex+0x114>
 801a9d6:	4290      	cmp	r0, r2
 801a9d8:	f842 3c04 	str.w	r3, [r2, #-4]
 801a9dc:	d8d6      	bhi.n	801a98c <__gethex+0x384>
 801a9de:	68a2      	ldr	r2, [r4, #8]
 801a9e0:	4593      	cmp	fp, r2
 801a9e2:	db17      	blt.n	801aa14 <__gethex+0x40c>
 801a9e4:	6861      	ldr	r1, [r4, #4]
 801a9e6:	4648      	mov	r0, r9
 801a9e8:	3101      	adds	r1, #1
 801a9ea:	f7fd ffe3 	bl	80189b4 <_Balloc>
 801a9ee:	4682      	mov	sl, r0
 801a9f0:	b918      	cbnz	r0, 801a9fa <__gethex+0x3f2>
 801a9f2:	4b1b      	ldr	r3, [pc, #108]	; (801aa60 <__gethex+0x458>)
 801a9f4:	4602      	mov	r2, r0
 801a9f6:	2184      	movs	r1, #132	; 0x84
 801a9f8:	e6b3      	b.n	801a762 <__gethex+0x15a>
 801a9fa:	6922      	ldr	r2, [r4, #16]
 801a9fc:	3202      	adds	r2, #2
 801a9fe:	f104 010c 	add.w	r1, r4, #12
 801aa02:	0092      	lsls	r2, r2, #2
 801aa04:	300c      	adds	r0, #12
 801aa06:	f7fd f844 	bl	8017a92 <memcpy>
 801aa0a:	4621      	mov	r1, r4
 801aa0c:	4648      	mov	r0, r9
 801aa0e:	f7fe f811 	bl	8018a34 <_Bfree>
 801aa12:	4654      	mov	r4, sl
 801aa14:	6922      	ldr	r2, [r4, #16]
 801aa16:	1c51      	adds	r1, r2, #1
 801aa18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aa1c:	6121      	str	r1, [r4, #16]
 801aa1e:	2101      	movs	r1, #1
 801aa20:	6151      	str	r1, [r2, #20]
 801aa22:	e7bc      	b.n	801a99e <__gethex+0x396>
 801aa24:	6921      	ldr	r1, [r4, #16]
 801aa26:	4559      	cmp	r1, fp
 801aa28:	dd0b      	ble.n	801aa42 <__gethex+0x43a>
 801aa2a:	2101      	movs	r1, #1
 801aa2c:	4620      	mov	r0, r4
 801aa2e:	f7ff fd83 	bl	801a538 <rshift>
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	3601      	adds	r6, #1
 801aa36:	42b3      	cmp	r3, r6
 801aa38:	f6ff aedb 	blt.w	801a7f2 <__gethex+0x1ea>
 801aa3c:	f04f 0801 	mov.w	r8, #1
 801aa40:	e7c2      	b.n	801a9c8 <__gethex+0x3c0>
 801aa42:	f015 051f 	ands.w	r5, r5, #31
 801aa46:	d0f9      	beq.n	801aa3c <__gethex+0x434>
 801aa48:	9b01      	ldr	r3, [sp, #4]
 801aa4a:	441a      	add	r2, r3
 801aa4c:	f1c5 0520 	rsb	r5, r5, #32
 801aa50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801aa54:	f7fe f8a0 	bl	8018b98 <__hi0bits>
 801aa58:	42a8      	cmp	r0, r5
 801aa5a:	dbe6      	blt.n	801aa2a <__gethex+0x422>
 801aa5c:	e7ee      	b.n	801aa3c <__gethex+0x434>
 801aa5e:	bf00      	nop
 801aa60:	0801dfb5 	.word	0x0801dfb5

0801aa64 <L_shift>:
 801aa64:	f1c2 0208 	rsb	r2, r2, #8
 801aa68:	0092      	lsls	r2, r2, #2
 801aa6a:	b570      	push	{r4, r5, r6, lr}
 801aa6c:	f1c2 0620 	rsb	r6, r2, #32
 801aa70:	6843      	ldr	r3, [r0, #4]
 801aa72:	6804      	ldr	r4, [r0, #0]
 801aa74:	fa03 f506 	lsl.w	r5, r3, r6
 801aa78:	432c      	orrs	r4, r5
 801aa7a:	40d3      	lsrs	r3, r2
 801aa7c:	6004      	str	r4, [r0, #0]
 801aa7e:	f840 3f04 	str.w	r3, [r0, #4]!
 801aa82:	4288      	cmp	r0, r1
 801aa84:	d3f4      	bcc.n	801aa70 <L_shift+0xc>
 801aa86:	bd70      	pop	{r4, r5, r6, pc}

0801aa88 <__match>:
 801aa88:	b530      	push	{r4, r5, lr}
 801aa8a:	6803      	ldr	r3, [r0, #0]
 801aa8c:	3301      	adds	r3, #1
 801aa8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa92:	b914      	cbnz	r4, 801aa9a <__match+0x12>
 801aa94:	6003      	str	r3, [r0, #0]
 801aa96:	2001      	movs	r0, #1
 801aa98:	bd30      	pop	{r4, r5, pc}
 801aa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801aaa2:	2d19      	cmp	r5, #25
 801aaa4:	bf98      	it	ls
 801aaa6:	3220      	addls	r2, #32
 801aaa8:	42a2      	cmp	r2, r4
 801aaaa:	d0f0      	beq.n	801aa8e <__match+0x6>
 801aaac:	2000      	movs	r0, #0
 801aaae:	e7f3      	b.n	801aa98 <__match+0x10>

0801aab0 <__hexnan>:
 801aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	680b      	ldr	r3, [r1, #0]
 801aab6:	6801      	ldr	r1, [r0, #0]
 801aab8:	115e      	asrs	r6, r3, #5
 801aaba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801aabe:	f013 031f 	ands.w	r3, r3, #31
 801aac2:	b087      	sub	sp, #28
 801aac4:	bf18      	it	ne
 801aac6:	3604      	addne	r6, #4
 801aac8:	2500      	movs	r5, #0
 801aaca:	1f37      	subs	r7, r6, #4
 801aacc:	4682      	mov	sl, r0
 801aace:	4690      	mov	r8, r2
 801aad0:	9301      	str	r3, [sp, #4]
 801aad2:	f846 5c04 	str.w	r5, [r6, #-4]
 801aad6:	46b9      	mov	r9, r7
 801aad8:	463c      	mov	r4, r7
 801aada:	9502      	str	r5, [sp, #8]
 801aadc:	46ab      	mov	fp, r5
 801aade:	784a      	ldrb	r2, [r1, #1]
 801aae0:	1c4b      	adds	r3, r1, #1
 801aae2:	9303      	str	r3, [sp, #12]
 801aae4:	b342      	cbz	r2, 801ab38 <__hexnan+0x88>
 801aae6:	4610      	mov	r0, r2
 801aae8:	9105      	str	r1, [sp, #20]
 801aaea:	9204      	str	r2, [sp, #16]
 801aaec:	f7ff fd76 	bl	801a5dc <__hexdig_fun>
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	d14f      	bne.n	801ab94 <__hexnan+0xe4>
 801aaf4:	9a04      	ldr	r2, [sp, #16]
 801aaf6:	9905      	ldr	r1, [sp, #20]
 801aaf8:	2a20      	cmp	r2, #32
 801aafa:	d818      	bhi.n	801ab2e <__hexnan+0x7e>
 801aafc:	9b02      	ldr	r3, [sp, #8]
 801aafe:	459b      	cmp	fp, r3
 801ab00:	dd13      	ble.n	801ab2a <__hexnan+0x7a>
 801ab02:	454c      	cmp	r4, r9
 801ab04:	d206      	bcs.n	801ab14 <__hexnan+0x64>
 801ab06:	2d07      	cmp	r5, #7
 801ab08:	dc04      	bgt.n	801ab14 <__hexnan+0x64>
 801ab0a:	462a      	mov	r2, r5
 801ab0c:	4649      	mov	r1, r9
 801ab0e:	4620      	mov	r0, r4
 801ab10:	f7ff ffa8 	bl	801aa64 <L_shift>
 801ab14:	4544      	cmp	r4, r8
 801ab16:	d950      	bls.n	801abba <__hexnan+0x10a>
 801ab18:	2300      	movs	r3, #0
 801ab1a:	f1a4 0904 	sub.w	r9, r4, #4
 801ab1e:	f844 3c04 	str.w	r3, [r4, #-4]
 801ab22:	f8cd b008 	str.w	fp, [sp, #8]
 801ab26:	464c      	mov	r4, r9
 801ab28:	461d      	mov	r5, r3
 801ab2a:	9903      	ldr	r1, [sp, #12]
 801ab2c:	e7d7      	b.n	801aade <__hexnan+0x2e>
 801ab2e:	2a29      	cmp	r2, #41	; 0x29
 801ab30:	d155      	bne.n	801abde <__hexnan+0x12e>
 801ab32:	3102      	adds	r1, #2
 801ab34:	f8ca 1000 	str.w	r1, [sl]
 801ab38:	f1bb 0f00 	cmp.w	fp, #0
 801ab3c:	d04f      	beq.n	801abde <__hexnan+0x12e>
 801ab3e:	454c      	cmp	r4, r9
 801ab40:	d206      	bcs.n	801ab50 <__hexnan+0xa0>
 801ab42:	2d07      	cmp	r5, #7
 801ab44:	dc04      	bgt.n	801ab50 <__hexnan+0xa0>
 801ab46:	462a      	mov	r2, r5
 801ab48:	4649      	mov	r1, r9
 801ab4a:	4620      	mov	r0, r4
 801ab4c:	f7ff ff8a 	bl	801aa64 <L_shift>
 801ab50:	4544      	cmp	r4, r8
 801ab52:	d934      	bls.n	801abbe <__hexnan+0x10e>
 801ab54:	f1a8 0204 	sub.w	r2, r8, #4
 801ab58:	4623      	mov	r3, r4
 801ab5a:	f853 1b04 	ldr.w	r1, [r3], #4
 801ab5e:	f842 1f04 	str.w	r1, [r2, #4]!
 801ab62:	429f      	cmp	r7, r3
 801ab64:	d2f9      	bcs.n	801ab5a <__hexnan+0xaa>
 801ab66:	1b3b      	subs	r3, r7, r4
 801ab68:	f023 0303 	bic.w	r3, r3, #3
 801ab6c:	3304      	adds	r3, #4
 801ab6e:	3e03      	subs	r6, #3
 801ab70:	3401      	adds	r4, #1
 801ab72:	42a6      	cmp	r6, r4
 801ab74:	bf38      	it	cc
 801ab76:	2304      	movcc	r3, #4
 801ab78:	4443      	add	r3, r8
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	f843 2b04 	str.w	r2, [r3], #4
 801ab80:	429f      	cmp	r7, r3
 801ab82:	d2fb      	bcs.n	801ab7c <__hexnan+0xcc>
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	b91b      	cbnz	r3, 801ab90 <__hexnan+0xe0>
 801ab88:	4547      	cmp	r7, r8
 801ab8a:	d126      	bne.n	801abda <__hexnan+0x12a>
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	603b      	str	r3, [r7, #0]
 801ab90:	2005      	movs	r0, #5
 801ab92:	e025      	b.n	801abe0 <__hexnan+0x130>
 801ab94:	3501      	adds	r5, #1
 801ab96:	2d08      	cmp	r5, #8
 801ab98:	f10b 0b01 	add.w	fp, fp, #1
 801ab9c:	dd06      	ble.n	801abac <__hexnan+0xfc>
 801ab9e:	4544      	cmp	r4, r8
 801aba0:	d9c3      	bls.n	801ab2a <__hexnan+0x7a>
 801aba2:	2300      	movs	r3, #0
 801aba4:	f844 3c04 	str.w	r3, [r4, #-4]
 801aba8:	2501      	movs	r5, #1
 801abaa:	3c04      	subs	r4, #4
 801abac:	6822      	ldr	r2, [r4, #0]
 801abae:	f000 000f 	and.w	r0, r0, #15
 801abb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801abb6:	6020      	str	r0, [r4, #0]
 801abb8:	e7b7      	b.n	801ab2a <__hexnan+0x7a>
 801abba:	2508      	movs	r5, #8
 801abbc:	e7b5      	b.n	801ab2a <__hexnan+0x7a>
 801abbe:	9b01      	ldr	r3, [sp, #4]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d0df      	beq.n	801ab84 <__hexnan+0xd4>
 801abc4:	f1c3 0320 	rsb	r3, r3, #32
 801abc8:	f04f 32ff 	mov.w	r2, #4294967295
 801abcc:	40da      	lsrs	r2, r3
 801abce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801abd2:	4013      	ands	r3, r2
 801abd4:	f846 3c04 	str.w	r3, [r6, #-4]
 801abd8:	e7d4      	b.n	801ab84 <__hexnan+0xd4>
 801abda:	3f04      	subs	r7, #4
 801abdc:	e7d2      	b.n	801ab84 <__hexnan+0xd4>
 801abde:	2004      	movs	r0, #4
 801abe0:	b007      	add	sp, #28
 801abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abe6 <__ascii_mbtowc>:
 801abe6:	b082      	sub	sp, #8
 801abe8:	b901      	cbnz	r1, 801abec <__ascii_mbtowc+0x6>
 801abea:	a901      	add	r1, sp, #4
 801abec:	b142      	cbz	r2, 801ac00 <__ascii_mbtowc+0x1a>
 801abee:	b14b      	cbz	r3, 801ac04 <__ascii_mbtowc+0x1e>
 801abf0:	7813      	ldrb	r3, [r2, #0]
 801abf2:	600b      	str	r3, [r1, #0]
 801abf4:	7812      	ldrb	r2, [r2, #0]
 801abf6:	1e10      	subs	r0, r2, #0
 801abf8:	bf18      	it	ne
 801abfa:	2001      	movne	r0, #1
 801abfc:	b002      	add	sp, #8
 801abfe:	4770      	bx	lr
 801ac00:	4610      	mov	r0, r2
 801ac02:	e7fb      	b.n	801abfc <__ascii_mbtowc+0x16>
 801ac04:	f06f 0001 	mvn.w	r0, #1
 801ac08:	e7f8      	b.n	801abfc <__ascii_mbtowc+0x16>

0801ac0a <_realloc_r>:
 801ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac0e:	4680      	mov	r8, r0
 801ac10:	4614      	mov	r4, r2
 801ac12:	460e      	mov	r6, r1
 801ac14:	b921      	cbnz	r1, 801ac20 <_realloc_r+0x16>
 801ac16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac1a:	4611      	mov	r1, r2
 801ac1c:	f7fd be3e 	b.w	801889c <_malloc_r>
 801ac20:	b92a      	cbnz	r2, 801ac2e <_realloc_r+0x24>
 801ac22:	f7fd fdc7 	bl	80187b4 <_free_r>
 801ac26:	4625      	mov	r5, r4
 801ac28:	4628      	mov	r0, r5
 801ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac2e:	f000 f842 	bl	801acb6 <_malloc_usable_size_r>
 801ac32:	4284      	cmp	r4, r0
 801ac34:	4607      	mov	r7, r0
 801ac36:	d802      	bhi.n	801ac3e <_realloc_r+0x34>
 801ac38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ac3c:	d812      	bhi.n	801ac64 <_realloc_r+0x5a>
 801ac3e:	4621      	mov	r1, r4
 801ac40:	4640      	mov	r0, r8
 801ac42:	f7fd fe2b 	bl	801889c <_malloc_r>
 801ac46:	4605      	mov	r5, r0
 801ac48:	2800      	cmp	r0, #0
 801ac4a:	d0ed      	beq.n	801ac28 <_realloc_r+0x1e>
 801ac4c:	42bc      	cmp	r4, r7
 801ac4e:	4622      	mov	r2, r4
 801ac50:	4631      	mov	r1, r6
 801ac52:	bf28      	it	cs
 801ac54:	463a      	movcs	r2, r7
 801ac56:	f7fc ff1c 	bl	8017a92 <memcpy>
 801ac5a:	4631      	mov	r1, r6
 801ac5c:	4640      	mov	r0, r8
 801ac5e:	f7fd fda9 	bl	80187b4 <_free_r>
 801ac62:	e7e1      	b.n	801ac28 <_realloc_r+0x1e>
 801ac64:	4635      	mov	r5, r6
 801ac66:	e7df      	b.n	801ac28 <_realloc_r+0x1e>

0801ac68 <__ascii_wctomb>:
 801ac68:	b149      	cbz	r1, 801ac7e <__ascii_wctomb+0x16>
 801ac6a:	2aff      	cmp	r2, #255	; 0xff
 801ac6c:	bf85      	ittet	hi
 801ac6e:	238a      	movhi	r3, #138	; 0x8a
 801ac70:	6003      	strhi	r3, [r0, #0]
 801ac72:	700a      	strbls	r2, [r1, #0]
 801ac74:	f04f 30ff 	movhi.w	r0, #4294967295
 801ac78:	bf98      	it	ls
 801ac7a:	2001      	movls	r0, #1
 801ac7c:	4770      	bx	lr
 801ac7e:	4608      	mov	r0, r1
 801ac80:	4770      	bx	lr
	...

0801ac84 <fiprintf>:
 801ac84:	b40e      	push	{r1, r2, r3}
 801ac86:	b503      	push	{r0, r1, lr}
 801ac88:	4601      	mov	r1, r0
 801ac8a:	ab03      	add	r3, sp, #12
 801ac8c:	4805      	ldr	r0, [pc, #20]	; (801aca4 <fiprintf+0x20>)
 801ac8e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac92:	6800      	ldr	r0, [r0, #0]
 801ac94:	9301      	str	r3, [sp, #4]
 801ac96:	f000 f83f 	bl	801ad18 <_vfiprintf_r>
 801ac9a:	b002      	add	sp, #8
 801ac9c:	f85d eb04 	ldr.w	lr, [sp], #4
 801aca0:	b003      	add	sp, #12
 801aca2:	4770      	bx	lr
 801aca4:	200003ec 	.word	0x200003ec

0801aca8 <abort>:
 801aca8:	b508      	push	{r3, lr}
 801acaa:	2006      	movs	r0, #6
 801acac:	f000 fa0c 	bl	801b0c8 <raise>
 801acb0:	2001      	movs	r0, #1
 801acb2:	f7eb f8c5 	bl	8005e40 <_exit>

0801acb6 <_malloc_usable_size_r>:
 801acb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acba:	1f18      	subs	r0, r3, #4
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	bfbc      	itt	lt
 801acc0:	580b      	ldrlt	r3, [r1, r0]
 801acc2:	18c0      	addlt	r0, r0, r3
 801acc4:	4770      	bx	lr

0801acc6 <__sfputc_r>:
 801acc6:	6893      	ldr	r3, [r2, #8]
 801acc8:	3b01      	subs	r3, #1
 801acca:	2b00      	cmp	r3, #0
 801accc:	b410      	push	{r4}
 801acce:	6093      	str	r3, [r2, #8]
 801acd0:	da08      	bge.n	801ace4 <__sfputc_r+0x1e>
 801acd2:	6994      	ldr	r4, [r2, #24]
 801acd4:	42a3      	cmp	r3, r4
 801acd6:	db01      	blt.n	801acdc <__sfputc_r+0x16>
 801acd8:	290a      	cmp	r1, #10
 801acda:	d103      	bne.n	801ace4 <__sfputc_r+0x1e>
 801acdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ace0:	f000 b934 	b.w	801af4c <__swbuf_r>
 801ace4:	6813      	ldr	r3, [r2, #0]
 801ace6:	1c58      	adds	r0, r3, #1
 801ace8:	6010      	str	r0, [r2, #0]
 801acea:	7019      	strb	r1, [r3, #0]
 801acec:	4608      	mov	r0, r1
 801acee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acf2:	4770      	bx	lr

0801acf4 <__sfputs_r>:
 801acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acf6:	4606      	mov	r6, r0
 801acf8:	460f      	mov	r7, r1
 801acfa:	4614      	mov	r4, r2
 801acfc:	18d5      	adds	r5, r2, r3
 801acfe:	42ac      	cmp	r4, r5
 801ad00:	d101      	bne.n	801ad06 <__sfputs_r+0x12>
 801ad02:	2000      	movs	r0, #0
 801ad04:	e007      	b.n	801ad16 <__sfputs_r+0x22>
 801ad06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad0a:	463a      	mov	r2, r7
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f7ff ffda 	bl	801acc6 <__sfputc_r>
 801ad12:	1c43      	adds	r3, r0, #1
 801ad14:	d1f3      	bne.n	801acfe <__sfputs_r+0xa>
 801ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ad18 <_vfiprintf_r>:
 801ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad1c:	460d      	mov	r5, r1
 801ad1e:	b09d      	sub	sp, #116	; 0x74
 801ad20:	4614      	mov	r4, r2
 801ad22:	4698      	mov	r8, r3
 801ad24:	4606      	mov	r6, r0
 801ad26:	b118      	cbz	r0, 801ad30 <_vfiprintf_r+0x18>
 801ad28:	6a03      	ldr	r3, [r0, #32]
 801ad2a:	b90b      	cbnz	r3, 801ad30 <_vfiprintf_r+0x18>
 801ad2c:	f7fc fd98 	bl	8017860 <__sinit>
 801ad30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad32:	07d9      	lsls	r1, r3, #31
 801ad34:	d405      	bmi.n	801ad42 <_vfiprintf_r+0x2a>
 801ad36:	89ab      	ldrh	r3, [r5, #12]
 801ad38:	059a      	lsls	r2, r3, #22
 801ad3a:	d402      	bmi.n	801ad42 <_vfiprintf_r+0x2a>
 801ad3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad3e:	f7fc fea6 	bl	8017a8e <__retarget_lock_acquire_recursive>
 801ad42:	89ab      	ldrh	r3, [r5, #12]
 801ad44:	071b      	lsls	r3, r3, #28
 801ad46:	d501      	bpl.n	801ad4c <_vfiprintf_r+0x34>
 801ad48:	692b      	ldr	r3, [r5, #16]
 801ad4a:	b99b      	cbnz	r3, 801ad74 <_vfiprintf_r+0x5c>
 801ad4c:	4629      	mov	r1, r5
 801ad4e:	4630      	mov	r0, r6
 801ad50:	f000 f93a 	bl	801afc8 <__swsetup_r>
 801ad54:	b170      	cbz	r0, 801ad74 <_vfiprintf_r+0x5c>
 801ad56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad58:	07dc      	lsls	r4, r3, #31
 801ad5a:	d504      	bpl.n	801ad66 <_vfiprintf_r+0x4e>
 801ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad60:	b01d      	add	sp, #116	; 0x74
 801ad62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad66:	89ab      	ldrh	r3, [r5, #12]
 801ad68:	0598      	lsls	r0, r3, #22
 801ad6a:	d4f7      	bmi.n	801ad5c <_vfiprintf_r+0x44>
 801ad6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad6e:	f7fc fe8f 	bl	8017a90 <__retarget_lock_release_recursive>
 801ad72:	e7f3      	b.n	801ad5c <_vfiprintf_r+0x44>
 801ad74:	2300      	movs	r3, #0
 801ad76:	9309      	str	r3, [sp, #36]	; 0x24
 801ad78:	2320      	movs	r3, #32
 801ad7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad7e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad82:	2330      	movs	r3, #48	; 0x30
 801ad84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801af38 <_vfiprintf_r+0x220>
 801ad88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad8c:	f04f 0901 	mov.w	r9, #1
 801ad90:	4623      	mov	r3, r4
 801ad92:	469a      	mov	sl, r3
 801ad94:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad98:	b10a      	cbz	r2, 801ad9e <_vfiprintf_r+0x86>
 801ad9a:	2a25      	cmp	r2, #37	; 0x25
 801ad9c:	d1f9      	bne.n	801ad92 <_vfiprintf_r+0x7a>
 801ad9e:	ebba 0b04 	subs.w	fp, sl, r4
 801ada2:	d00b      	beq.n	801adbc <_vfiprintf_r+0xa4>
 801ada4:	465b      	mov	r3, fp
 801ada6:	4622      	mov	r2, r4
 801ada8:	4629      	mov	r1, r5
 801adaa:	4630      	mov	r0, r6
 801adac:	f7ff ffa2 	bl	801acf4 <__sfputs_r>
 801adb0:	3001      	adds	r0, #1
 801adb2:	f000 80a9 	beq.w	801af08 <_vfiprintf_r+0x1f0>
 801adb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adb8:	445a      	add	r2, fp
 801adba:	9209      	str	r2, [sp, #36]	; 0x24
 801adbc:	f89a 3000 	ldrb.w	r3, [sl]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	f000 80a1 	beq.w	801af08 <_vfiprintf_r+0x1f0>
 801adc6:	2300      	movs	r3, #0
 801adc8:	f04f 32ff 	mov.w	r2, #4294967295
 801adcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801add0:	f10a 0a01 	add.w	sl, sl, #1
 801add4:	9304      	str	r3, [sp, #16]
 801add6:	9307      	str	r3, [sp, #28]
 801add8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801addc:	931a      	str	r3, [sp, #104]	; 0x68
 801adde:	4654      	mov	r4, sl
 801ade0:	2205      	movs	r2, #5
 801ade2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ade6:	4854      	ldr	r0, [pc, #336]	; (801af38 <_vfiprintf_r+0x220>)
 801ade8:	f7e5 fa1a 	bl	8000220 <memchr>
 801adec:	9a04      	ldr	r2, [sp, #16]
 801adee:	b9d8      	cbnz	r0, 801ae28 <_vfiprintf_r+0x110>
 801adf0:	06d1      	lsls	r1, r2, #27
 801adf2:	bf44      	itt	mi
 801adf4:	2320      	movmi	r3, #32
 801adf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801adfa:	0713      	lsls	r3, r2, #28
 801adfc:	bf44      	itt	mi
 801adfe:	232b      	movmi	r3, #43	; 0x2b
 801ae00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae04:	f89a 3000 	ldrb.w	r3, [sl]
 801ae08:	2b2a      	cmp	r3, #42	; 0x2a
 801ae0a:	d015      	beq.n	801ae38 <_vfiprintf_r+0x120>
 801ae0c:	9a07      	ldr	r2, [sp, #28]
 801ae0e:	4654      	mov	r4, sl
 801ae10:	2000      	movs	r0, #0
 801ae12:	f04f 0c0a 	mov.w	ip, #10
 801ae16:	4621      	mov	r1, r4
 801ae18:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae1c:	3b30      	subs	r3, #48	; 0x30
 801ae1e:	2b09      	cmp	r3, #9
 801ae20:	d94d      	bls.n	801aebe <_vfiprintf_r+0x1a6>
 801ae22:	b1b0      	cbz	r0, 801ae52 <_vfiprintf_r+0x13a>
 801ae24:	9207      	str	r2, [sp, #28]
 801ae26:	e014      	b.n	801ae52 <_vfiprintf_r+0x13a>
 801ae28:	eba0 0308 	sub.w	r3, r0, r8
 801ae2c:	fa09 f303 	lsl.w	r3, r9, r3
 801ae30:	4313      	orrs	r3, r2
 801ae32:	9304      	str	r3, [sp, #16]
 801ae34:	46a2      	mov	sl, r4
 801ae36:	e7d2      	b.n	801adde <_vfiprintf_r+0xc6>
 801ae38:	9b03      	ldr	r3, [sp, #12]
 801ae3a:	1d19      	adds	r1, r3, #4
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	9103      	str	r1, [sp, #12]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	bfbb      	ittet	lt
 801ae44:	425b      	neglt	r3, r3
 801ae46:	f042 0202 	orrlt.w	r2, r2, #2
 801ae4a:	9307      	strge	r3, [sp, #28]
 801ae4c:	9307      	strlt	r3, [sp, #28]
 801ae4e:	bfb8      	it	lt
 801ae50:	9204      	strlt	r2, [sp, #16]
 801ae52:	7823      	ldrb	r3, [r4, #0]
 801ae54:	2b2e      	cmp	r3, #46	; 0x2e
 801ae56:	d10c      	bne.n	801ae72 <_vfiprintf_r+0x15a>
 801ae58:	7863      	ldrb	r3, [r4, #1]
 801ae5a:	2b2a      	cmp	r3, #42	; 0x2a
 801ae5c:	d134      	bne.n	801aec8 <_vfiprintf_r+0x1b0>
 801ae5e:	9b03      	ldr	r3, [sp, #12]
 801ae60:	1d1a      	adds	r2, r3, #4
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	9203      	str	r2, [sp, #12]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	bfb8      	it	lt
 801ae6a:	f04f 33ff 	movlt.w	r3, #4294967295
 801ae6e:	3402      	adds	r4, #2
 801ae70:	9305      	str	r3, [sp, #20]
 801ae72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801af48 <_vfiprintf_r+0x230>
 801ae76:	7821      	ldrb	r1, [r4, #0]
 801ae78:	2203      	movs	r2, #3
 801ae7a:	4650      	mov	r0, sl
 801ae7c:	f7e5 f9d0 	bl	8000220 <memchr>
 801ae80:	b138      	cbz	r0, 801ae92 <_vfiprintf_r+0x17a>
 801ae82:	9b04      	ldr	r3, [sp, #16]
 801ae84:	eba0 000a 	sub.w	r0, r0, sl
 801ae88:	2240      	movs	r2, #64	; 0x40
 801ae8a:	4082      	lsls	r2, r0
 801ae8c:	4313      	orrs	r3, r2
 801ae8e:	3401      	adds	r4, #1
 801ae90:	9304      	str	r3, [sp, #16]
 801ae92:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae96:	4829      	ldr	r0, [pc, #164]	; (801af3c <_vfiprintf_r+0x224>)
 801ae98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae9c:	2206      	movs	r2, #6
 801ae9e:	f7e5 f9bf 	bl	8000220 <memchr>
 801aea2:	2800      	cmp	r0, #0
 801aea4:	d03f      	beq.n	801af26 <_vfiprintf_r+0x20e>
 801aea6:	4b26      	ldr	r3, [pc, #152]	; (801af40 <_vfiprintf_r+0x228>)
 801aea8:	bb1b      	cbnz	r3, 801aef2 <_vfiprintf_r+0x1da>
 801aeaa:	9b03      	ldr	r3, [sp, #12]
 801aeac:	3307      	adds	r3, #7
 801aeae:	f023 0307 	bic.w	r3, r3, #7
 801aeb2:	3308      	adds	r3, #8
 801aeb4:	9303      	str	r3, [sp, #12]
 801aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aeb8:	443b      	add	r3, r7
 801aeba:	9309      	str	r3, [sp, #36]	; 0x24
 801aebc:	e768      	b.n	801ad90 <_vfiprintf_r+0x78>
 801aebe:	fb0c 3202 	mla	r2, ip, r2, r3
 801aec2:	460c      	mov	r4, r1
 801aec4:	2001      	movs	r0, #1
 801aec6:	e7a6      	b.n	801ae16 <_vfiprintf_r+0xfe>
 801aec8:	2300      	movs	r3, #0
 801aeca:	3401      	adds	r4, #1
 801aecc:	9305      	str	r3, [sp, #20]
 801aece:	4619      	mov	r1, r3
 801aed0:	f04f 0c0a 	mov.w	ip, #10
 801aed4:	4620      	mov	r0, r4
 801aed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aeda:	3a30      	subs	r2, #48	; 0x30
 801aedc:	2a09      	cmp	r2, #9
 801aede:	d903      	bls.n	801aee8 <_vfiprintf_r+0x1d0>
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d0c6      	beq.n	801ae72 <_vfiprintf_r+0x15a>
 801aee4:	9105      	str	r1, [sp, #20]
 801aee6:	e7c4      	b.n	801ae72 <_vfiprintf_r+0x15a>
 801aee8:	fb0c 2101 	mla	r1, ip, r1, r2
 801aeec:	4604      	mov	r4, r0
 801aeee:	2301      	movs	r3, #1
 801aef0:	e7f0      	b.n	801aed4 <_vfiprintf_r+0x1bc>
 801aef2:	ab03      	add	r3, sp, #12
 801aef4:	9300      	str	r3, [sp, #0]
 801aef6:	462a      	mov	r2, r5
 801aef8:	4b12      	ldr	r3, [pc, #72]	; (801af44 <_vfiprintf_r+0x22c>)
 801aefa:	a904      	add	r1, sp, #16
 801aefc:	4630      	mov	r0, r6
 801aefe:	f7fb fe4d 	bl	8016b9c <_printf_float>
 801af02:	4607      	mov	r7, r0
 801af04:	1c78      	adds	r0, r7, #1
 801af06:	d1d6      	bne.n	801aeb6 <_vfiprintf_r+0x19e>
 801af08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af0a:	07d9      	lsls	r1, r3, #31
 801af0c:	d405      	bmi.n	801af1a <_vfiprintf_r+0x202>
 801af0e:	89ab      	ldrh	r3, [r5, #12]
 801af10:	059a      	lsls	r2, r3, #22
 801af12:	d402      	bmi.n	801af1a <_vfiprintf_r+0x202>
 801af14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af16:	f7fc fdbb 	bl	8017a90 <__retarget_lock_release_recursive>
 801af1a:	89ab      	ldrh	r3, [r5, #12]
 801af1c:	065b      	lsls	r3, r3, #25
 801af1e:	f53f af1d 	bmi.w	801ad5c <_vfiprintf_r+0x44>
 801af22:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af24:	e71c      	b.n	801ad60 <_vfiprintf_r+0x48>
 801af26:	ab03      	add	r3, sp, #12
 801af28:	9300      	str	r3, [sp, #0]
 801af2a:	462a      	mov	r2, r5
 801af2c:	4b05      	ldr	r3, [pc, #20]	; (801af44 <_vfiprintf_r+0x22c>)
 801af2e:	a904      	add	r1, sp, #16
 801af30:	4630      	mov	r0, r6
 801af32:	f7fc f8d7 	bl	80170e4 <_printf_i>
 801af36:	e7e4      	b.n	801af02 <_vfiprintf_r+0x1ea>
 801af38:	0801e271 	.word	0x0801e271
 801af3c:	0801e27b 	.word	0x0801e27b
 801af40:	08016b9d 	.word	0x08016b9d
 801af44:	0801acf5 	.word	0x0801acf5
 801af48:	0801e277 	.word	0x0801e277

0801af4c <__swbuf_r>:
 801af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af4e:	460e      	mov	r6, r1
 801af50:	4614      	mov	r4, r2
 801af52:	4605      	mov	r5, r0
 801af54:	b118      	cbz	r0, 801af5e <__swbuf_r+0x12>
 801af56:	6a03      	ldr	r3, [r0, #32]
 801af58:	b90b      	cbnz	r3, 801af5e <__swbuf_r+0x12>
 801af5a:	f7fc fc81 	bl	8017860 <__sinit>
 801af5e:	69a3      	ldr	r3, [r4, #24]
 801af60:	60a3      	str	r3, [r4, #8]
 801af62:	89a3      	ldrh	r3, [r4, #12]
 801af64:	071a      	lsls	r2, r3, #28
 801af66:	d525      	bpl.n	801afb4 <__swbuf_r+0x68>
 801af68:	6923      	ldr	r3, [r4, #16]
 801af6a:	b31b      	cbz	r3, 801afb4 <__swbuf_r+0x68>
 801af6c:	6823      	ldr	r3, [r4, #0]
 801af6e:	6922      	ldr	r2, [r4, #16]
 801af70:	1a98      	subs	r0, r3, r2
 801af72:	6963      	ldr	r3, [r4, #20]
 801af74:	b2f6      	uxtb	r6, r6
 801af76:	4283      	cmp	r3, r0
 801af78:	4637      	mov	r7, r6
 801af7a:	dc04      	bgt.n	801af86 <__swbuf_r+0x3a>
 801af7c:	4621      	mov	r1, r4
 801af7e:	4628      	mov	r0, r5
 801af80:	f7ff fa3a 	bl	801a3f8 <_fflush_r>
 801af84:	b9e0      	cbnz	r0, 801afc0 <__swbuf_r+0x74>
 801af86:	68a3      	ldr	r3, [r4, #8]
 801af88:	3b01      	subs	r3, #1
 801af8a:	60a3      	str	r3, [r4, #8]
 801af8c:	6823      	ldr	r3, [r4, #0]
 801af8e:	1c5a      	adds	r2, r3, #1
 801af90:	6022      	str	r2, [r4, #0]
 801af92:	701e      	strb	r6, [r3, #0]
 801af94:	6962      	ldr	r2, [r4, #20]
 801af96:	1c43      	adds	r3, r0, #1
 801af98:	429a      	cmp	r2, r3
 801af9a:	d004      	beq.n	801afa6 <__swbuf_r+0x5a>
 801af9c:	89a3      	ldrh	r3, [r4, #12]
 801af9e:	07db      	lsls	r3, r3, #31
 801afa0:	d506      	bpl.n	801afb0 <__swbuf_r+0x64>
 801afa2:	2e0a      	cmp	r6, #10
 801afa4:	d104      	bne.n	801afb0 <__swbuf_r+0x64>
 801afa6:	4621      	mov	r1, r4
 801afa8:	4628      	mov	r0, r5
 801afaa:	f7ff fa25 	bl	801a3f8 <_fflush_r>
 801afae:	b938      	cbnz	r0, 801afc0 <__swbuf_r+0x74>
 801afb0:	4638      	mov	r0, r7
 801afb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afb4:	4621      	mov	r1, r4
 801afb6:	4628      	mov	r0, r5
 801afb8:	f000 f806 	bl	801afc8 <__swsetup_r>
 801afbc:	2800      	cmp	r0, #0
 801afbe:	d0d5      	beq.n	801af6c <__swbuf_r+0x20>
 801afc0:	f04f 37ff 	mov.w	r7, #4294967295
 801afc4:	e7f4      	b.n	801afb0 <__swbuf_r+0x64>
	...

0801afc8 <__swsetup_r>:
 801afc8:	b538      	push	{r3, r4, r5, lr}
 801afca:	4b2a      	ldr	r3, [pc, #168]	; (801b074 <__swsetup_r+0xac>)
 801afcc:	4605      	mov	r5, r0
 801afce:	6818      	ldr	r0, [r3, #0]
 801afd0:	460c      	mov	r4, r1
 801afd2:	b118      	cbz	r0, 801afdc <__swsetup_r+0x14>
 801afd4:	6a03      	ldr	r3, [r0, #32]
 801afd6:	b90b      	cbnz	r3, 801afdc <__swsetup_r+0x14>
 801afd8:	f7fc fc42 	bl	8017860 <__sinit>
 801afdc:	89a3      	ldrh	r3, [r4, #12]
 801afde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afe2:	0718      	lsls	r0, r3, #28
 801afe4:	d422      	bmi.n	801b02c <__swsetup_r+0x64>
 801afe6:	06d9      	lsls	r1, r3, #27
 801afe8:	d407      	bmi.n	801affa <__swsetup_r+0x32>
 801afea:	2309      	movs	r3, #9
 801afec:	602b      	str	r3, [r5, #0]
 801afee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aff2:	81a3      	strh	r3, [r4, #12]
 801aff4:	f04f 30ff 	mov.w	r0, #4294967295
 801aff8:	e034      	b.n	801b064 <__swsetup_r+0x9c>
 801affa:	0758      	lsls	r0, r3, #29
 801affc:	d512      	bpl.n	801b024 <__swsetup_r+0x5c>
 801affe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b000:	b141      	cbz	r1, 801b014 <__swsetup_r+0x4c>
 801b002:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b006:	4299      	cmp	r1, r3
 801b008:	d002      	beq.n	801b010 <__swsetup_r+0x48>
 801b00a:	4628      	mov	r0, r5
 801b00c:	f7fd fbd2 	bl	80187b4 <_free_r>
 801b010:	2300      	movs	r3, #0
 801b012:	6363      	str	r3, [r4, #52]	; 0x34
 801b014:	89a3      	ldrh	r3, [r4, #12]
 801b016:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b01a:	81a3      	strh	r3, [r4, #12]
 801b01c:	2300      	movs	r3, #0
 801b01e:	6063      	str	r3, [r4, #4]
 801b020:	6923      	ldr	r3, [r4, #16]
 801b022:	6023      	str	r3, [r4, #0]
 801b024:	89a3      	ldrh	r3, [r4, #12]
 801b026:	f043 0308 	orr.w	r3, r3, #8
 801b02a:	81a3      	strh	r3, [r4, #12]
 801b02c:	6923      	ldr	r3, [r4, #16]
 801b02e:	b94b      	cbnz	r3, 801b044 <__swsetup_r+0x7c>
 801b030:	89a3      	ldrh	r3, [r4, #12]
 801b032:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b03a:	d003      	beq.n	801b044 <__swsetup_r+0x7c>
 801b03c:	4621      	mov	r1, r4
 801b03e:	4628      	mov	r0, r5
 801b040:	f000 f884 	bl	801b14c <__smakebuf_r>
 801b044:	89a0      	ldrh	r0, [r4, #12]
 801b046:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b04a:	f010 0301 	ands.w	r3, r0, #1
 801b04e:	d00a      	beq.n	801b066 <__swsetup_r+0x9e>
 801b050:	2300      	movs	r3, #0
 801b052:	60a3      	str	r3, [r4, #8]
 801b054:	6963      	ldr	r3, [r4, #20]
 801b056:	425b      	negs	r3, r3
 801b058:	61a3      	str	r3, [r4, #24]
 801b05a:	6923      	ldr	r3, [r4, #16]
 801b05c:	b943      	cbnz	r3, 801b070 <__swsetup_r+0xa8>
 801b05e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b062:	d1c4      	bne.n	801afee <__swsetup_r+0x26>
 801b064:	bd38      	pop	{r3, r4, r5, pc}
 801b066:	0781      	lsls	r1, r0, #30
 801b068:	bf58      	it	pl
 801b06a:	6963      	ldrpl	r3, [r4, #20]
 801b06c:	60a3      	str	r3, [r4, #8]
 801b06e:	e7f4      	b.n	801b05a <__swsetup_r+0x92>
 801b070:	2000      	movs	r0, #0
 801b072:	e7f7      	b.n	801b064 <__swsetup_r+0x9c>
 801b074:	200003ec 	.word	0x200003ec

0801b078 <_raise_r>:
 801b078:	291f      	cmp	r1, #31
 801b07a:	b538      	push	{r3, r4, r5, lr}
 801b07c:	4604      	mov	r4, r0
 801b07e:	460d      	mov	r5, r1
 801b080:	d904      	bls.n	801b08c <_raise_r+0x14>
 801b082:	2316      	movs	r3, #22
 801b084:	6003      	str	r3, [r0, #0]
 801b086:	f04f 30ff 	mov.w	r0, #4294967295
 801b08a:	bd38      	pop	{r3, r4, r5, pc}
 801b08c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b08e:	b112      	cbz	r2, 801b096 <_raise_r+0x1e>
 801b090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b094:	b94b      	cbnz	r3, 801b0aa <_raise_r+0x32>
 801b096:	4620      	mov	r0, r4
 801b098:	f000 f830 	bl	801b0fc <_getpid_r>
 801b09c:	462a      	mov	r2, r5
 801b09e:	4601      	mov	r1, r0
 801b0a0:	4620      	mov	r0, r4
 801b0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b0a6:	f000 b817 	b.w	801b0d8 <_kill_r>
 801b0aa:	2b01      	cmp	r3, #1
 801b0ac:	d00a      	beq.n	801b0c4 <_raise_r+0x4c>
 801b0ae:	1c59      	adds	r1, r3, #1
 801b0b0:	d103      	bne.n	801b0ba <_raise_r+0x42>
 801b0b2:	2316      	movs	r3, #22
 801b0b4:	6003      	str	r3, [r0, #0]
 801b0b6:	2001      	movs	r0, #1
 801b0b8:	e7e7      	b.n	801b08a <_raise_r+0x12>
 801b0ba:	2400      	movs	r4, #0
 801b0bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b0c0:	4628      	mov	r0, r5
 801b0c2:	4798      	blx	r3
 801b0c4:	2000      	movs	r0, #0
 801b0c6:	e7e0      	b.n	801b08a <_raise_r+0x12>

0801b0c8 <raise>:
 801b0c8:	4b02      	ldr	r3, [pc, #8]	; (801b0d4 <raise+0xc>)
 801b0ca:	4601      	mov	r1, r0
 801b0cc:	6818      	ldr	r0, [r3, #0]
 801b0ce:	f7ff bfd3 	b.w	801b078 <_raise_r>
 801b0d2:	bf00      	nop
 801b0d4:	200003ec 	.word	0x200003ec

0801b0d8 <_kill_r>:
 801b0d8:	b538      	push	{r3, r4, r5, lr}
 801b0da:	4d07      	ldr	r5, [pc, #28]	; (801b0f8 <_kill_r+0x20>)
 801b0dc:	2300      	movs	r3, #0
 801b0de:	4604      	mov	r4, r0
 801b0e0:	4608      	mov	r0, r1
 801b0e2:	4611      	mov	r1, r2
 801b0e4:	602b      	str	r3, [r5, #0]
 801b0e6:	f7ea fe9b 	bl	8005e20 <_kill>
 801b0ea:	1c43      	adds	r3, r0, #1
 801b0ec:	d102      	bne.n	801b0f4 <_kill_r+0x1c>
 801b0ee:	682b      	ldr	r3, [r5, #0]
 801b0f0:	b103      	cbz	r3, 801b0f4 <_kill_r+0x1c>
 801b0f2:	6023      	str	r3, [r4, #0]
 801b0f4:	bd38      	pop	{r3, r4, r5, pc}
 801b0f6:	bf00      	nop
 801b0f8:	20003718 	.word	0x20003718

0801b0fc <_getpid_r>:
 801b0fc:	f7ea be88 	b.w	8005e10 <_getpid>

0801b100 <__swhatbuf_r>:
 801b100:	b570      	push	{r4, r5, r6, lr}
 801b102:	460c      	mov	r4, r1
 801b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b108:	2900      	cmp	r1, #0
 801b10a:	b096      	sub	sp, #88	; 0x58
 801b10c:	4615      	mov	r5, r2
 801b10e:	461e      	mov	r6, r3
 801b110:	da0d      	bge.n	801b12e <__swhatbuf_r+0x2e>
 801b112:	89a3      	ldrh	r3, [r4, #12]
 801b114:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b118:	f04f 0100 	mov.w	r1, #0
 801b11c:	bf0c      	ite	eq
 801b11e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b122:	2340      	movne	r3, #64	; 0x40
 801b124:	2000      	movs	r0, #0
 801b126:	6031      	str	r1, [r6, #0]
 801b128:	602b      	str	r3, [r5, #0]
 801b12a:	b016      	add	sp, #88	; 0x58
 801b12c:	bd70      	pop	{r4, r5, r6, pc}
 801b12e:	466a      	mov	r2, sp
 801b130:	f000 f848 	bl	801b1c4 <_fstat_r>
 801b134:	2800      	cmp	r0, #0
 801b136:	dbec      	blt.n	801b112 <__swhatbuf_r+0x12>
 801b138:	9901      	ldr	r1, [sp, #4]
 801b13a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b13e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b142:	4259      	negs	r1, r3
 801b144:	4159      	adcs	r1, r3
 801b146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b14a:	e7eb      	b.n	801b124 <__swhatbuf_r+0x24>

0801b14c <__smakebuf_r>:
 801b14c:	898b      	ldrh	r3, [r1, #12]
 801b14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b150:	079d      	lsls	r5, r3, #30
 801b152:	4606      	mov	r6, r0
 801b154:	460c      	mov	r4, r1
 801b156:	d507      	bpl.n	801b168 <__smakebuf_r+0x1c>
 801b158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b15c:	6023      	str	r3, [r4, #0]
 801b15e:	6123      	str	r3, [r4, #16]
 801b160:	2301      	movs	r3, #1
 801b162:	6163      	str	r3, [r4, #20]
 801b164:	b002      	add	sp, #8
 801b166:	bd70      	pop	{r4, r5, r6, pc}
 801b168:	ab01      	add	r3, sp, #4
 801b16a:	466a      	mov	r2, sp
 801b16c:	f7ff ffc8 	bl	801b100 <__swhatbuf_r>
 801b170:	9900      	ldr	r1, [sp, #0]
 801b172:	4605      	mov	r5, r0
 801b174:	4630      	mov	r0, r6
 801b176:	f7fd fb91 	bl	801889c <_malloc_r>
 801b17a:	b948      	cbnz	r0, 801b190 <__smakebuf_r+0x44>
 801b17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b180:	059a      	lsls	r2, r3, #22
 801b182:	d4ef      	bmi.n	801b164 <__smakebuf_r+0x18>
 801b184:	f023 0303 	bic.w	r3, r3, #3
 801b188:	f043 0302 	orr.w	r3, r3, #2
 801b18c:	81a3      	strh	r3, [r4, #12]
 801b18e:	e7e3      	b.n	801b158 <__smakebuf_r+0xc>
 801b190:	89a3      	ldrh	r3, [r4, #12]
 801b192:	6020      	str	r0, [r4, #0]
 801b194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b198:	81a3      	strh	r3, [r4, #12]
 801b19a:	9b00      	ldr	r3, [sp, #0]
 801b19c:	6163      	str	r3, [r4, #20]
 801b19e:	9b01      	ldr	r3, [sp, #4]
 801b1a0:	6120      	str	r0, [r4, #16]
 801b1a2:	b15b      	cbz	r3, 801b1bc <__smakebuf_r+0x70>
 801b1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	f000 f81d 	bl	801b1e8 <_isatty_r>
 801b1ae:	b128      	cbz	r0, 801b1bc <__smakebuf_r+0x70>
 801b1b0:	89a3      	ldrh	r3, [r4, #12]
 801b1b2:	f023 0303 	bic.w	r3, r3, #3
 801b1b6:	f043 0301 	orr.w	r3, r3, #1
 801b1ba:	81a3      	strh	r3, [r4, #12]
 801b1bc:	89a3      	ldrh	r3, [r4, #12]
 801b1be:	431d      	orrs	r5, r3
 801b1c0:	81a5      	strh	r5, [r4, #12]
 801b1c2:	e7cf      	b.n	801b164 <__smakebuf_r+0x18>

0801b1c4 <_fstat_r>:
 801b1c4:	b538      	push	{r3, r4, r5, lr}
 801b1c6:	4d07      	ldr	r5, [pc, #28]	; (801b1e4 <_fstat_r+0x20>)
 801b1c8:	2300      	movs	r3, #0
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	4608      	mov	r0, r1
 801b1ce:	4611      	mov	r1, r2
 801b1d0:	602b      	str	r3, [r5, #0]
 801b1d2:	f7ea fe84 	bl	8005ede <_fstat>
 801b1d6:	1c43      	adds	r3, r0, #1
 801b1d8:	d102      	bne.n	801b1e0 <_fstat_r+0x1c>
 801b1da:	682b      	ldr	r3, [r5, #0]
 801b1dc:	b103      	cbz	r3, 801b1e0 <_fstat_r+0x1c>
 801b1de:	6023      	str	r3, [r4, #0]
 801b1e0:	bd38      	pop	{r3, r4, r5, pc}
 801b1e2:	bf00      	nop
 801b1e4:	20003718 	.word	0x20003718

0801b1e8 <_isatty_r>:
 801b1e8:	b538      	push	{r3, r4, r5, lr}
 801b1ea:	4d06      	ldr	r5, [pc, #24]	; (801b204 <_isatty_r+0x1c>)
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	4608      	mov	r0, r1
 801b1f2:	602b      	str	r3, [r5, #0]
 801b1f4:	f7ea fe83 	bl	8005efe <_isatty>
 801b1f8:	1c43      	adds	r3, r0, #1
 801b1fa:	d102      	bne.n	801b202 <_isatty_r+0x1a>
 801b1fc:	682b      	ldr	r3, [r5, #0]
 801b1fe:	b103      	cbz	r3, 801b202 <_isatty_r+0x1a>
 801b200:	6023      	str	r3, [r4, #0]
 801b202:	bd38      	pop	{r3, r4, r5, pc}
 801b204:	20003718 	.word	0x20003718

0801b208 <fmod>:
 801b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b20a:	ed2d 8b02 	vpush	{d8}
 801b20e:	ec57 6b10 	vmov	r6, r7, d0
 801b212:	ec55 4b11 	vmov	r4, r5, d1
 801b216:	f000 f86d 	bl	801b2f4 <__ieee754_fmod>
 801b21a:	4622      	mov	r2, r4
 801b21c:	462b      	mov	r3, r5
 801b21e:	4630      	mov	r0, r6
 801b220:	4639      	mov	r1, r7
 801b222:	eeb0 8a40 	vmov.f32	s16, s0
 801b226:	eef0 8a60 	vmov.f32	s17, s1
 801b22a:	f7e5 fca7 	bl	8000b7c <__aeabi_dcmpun>
 801b22e:	b990      	cbnz	r0, 801b256 <fmod+0x4e>
 801b230:	2200      	movs	r2, #0
 801b232:	2300      	movs	r3, #0
 801b234:	4620      	mov	r0, r4
 801b236:	4629      	mov	r1, r5
 801b238:	f7e5 fc6e 	bl	8000b18 <__aeabi_dcmpeq>
 801b23c:	b158      	cbz	r0, 801b256 <fmod+0x4e>
 801b23e:	f7fc fbfb 	bl	8017a38 <__errno>
 801b242:	2321      	movs	r3, #33	; 0x21
 801b244:	6003      	str	r3, [r0, #0]
 801b246:	2200      	movs	r2, #0
 801b248:	2300      	movs	r3, #0
 801b24a:	4610      	mov	r0, r2
 801b24c:	4619      	mov	r1, r3
 801b24e:	f7e5 fb25 	bl	800089c <__aeabi_ddiv>
 801b252:	ec41 0b18 	vmov	d8, r0, r1
 801b256:	eeb0 0a48 	vmov.f32	s0, s16
 801b25a:	eef0 0a68 	vmov.f32	s1, s17
 801b25e:	ecbd 8b02 	vpop	{d8}
 801b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b264 <round>:
 801b264:	ec53 2b10 	vmov	r2, r3, d0
 801b268:	b570      	push	{r4, r5, r6, lr}
 801b26a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801b26e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 801b272:	2813      	cmp	r0, #19
 801b274:	ee10 5a10 	vmov	r5, s0
 801b278:	4619      	mov	r1, r3
 801b27a:	dc18      	bgt.n	801b2ae <round+0x4a>
 801b27c:	2800      	cmp	r0, #0
 801b27e:	da09      	bge.n	801b294 <round+0x30>
 801b280:	3001      	adds	r0, #1
 801b282:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 801b286:	d103      	bne.n	801b290 <round+0x2c>
 801b288:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b28c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b290:	2300      	movs	r3, #0
 801b292:	e02a      	b.n	801b2ea <round+0x86>
 801b294:	4c16      	ldr	r4, [pc, #88]	; (801b2f0 <round+0x8c>)
 801b296:	4104      	asrs	r4, r0
 801b298:	ea03 0604 	and.w	r6, r3, r4
 801b29c:	4316      	orrs	r6, r2
 801b29e:	d011      	beq.n	801b2c4 <round+0x60>
 801b2a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801b2a4:	4103      	asrs	r3, r0
 801b2a6:	440b      	add	r3, r1
 801b2a8:	ea23 0104 	bic.w	r1, r3, r4
 801b2ac:	e7f0      	b.n	801b290 <round+0x2c>
 801b2ae:	2833      	cmp	r0, #51	; 0x33
 801b2b0:	dd0b      	ble.n	801b2ca <round+0x66>
 801b2b2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801b2b6:	d105      	bne.n	801b2c4 <round+0x60>
 801b2b8:	ee10 0a10 	vmov	r0, s0
 801b2bc:	f7e5 f80e 	bl	80002dc <__adddf3>
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	460b      	mov	r3, r1
 801b2c4:	ec43 2b10 	vmov	d0, r2, r3
 801b2c8:	bd70      	pop	{r4, r5, r6, pc}
 801b2ca:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801b2ce:	f04f 34ff 	mov.w	r4, #4294967295
 801b2d2:	40f4      	lsrs	r4, r6
 801b2d4:	4214      	tst	r4, r2
 801b2d6:	d0f5      	beq.n	801b2c4 <round+0x60>
 801b2d8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 801b2dc:	2301      	movs	r3, #1
 801b2de:	4083      	lsls	r3, r0
 801b2e0:	195b      	adds	r3, r3, r5
 801b2e2:	bf28      	it	cs
 801b2e4:	3101      	addcs	r1, #1
 801b2e6:	ea23 0304 	bic.w	r3, r3, r4
 801b2ea:	461a      	mov	r2, r3
 801b2ec:	460b      	mov	r3, r1
 801b2ee:	e7e9      	b.n	801b2c4 <round+0x60>
 801b2f0:	000fffff 	.word	0x000fffff

0801b2f4 <__ieee754_fmod>:
 801b2f4:	ec53 2b11 	vmov	r2, r3, d1
 801b2f8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b300:	ea5c 0402 	orrs.w	r4, ip, r2
 801b304:	ec51 0b10 	vmov	r0, r1, d0
 801b308:	ee11 7a10 	vmov	r7, s2
 801b30c:	ee11 ea10 	vmov	lr, s2
 801b310:	461e      	mov	r6, r3
 801b312:	d00c      	beq.n	801b32e <__ieee754_fmod+0x3a>
 801b314:	4c78      	ldr	r4, [pc, #480]	; (801b4f8 <__ieee754_fmod+0x204>)
 801b316:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801b31a:	45a0      	cmp	r8, r4
 801b31c:	4689      	mov	r9, r1
 801b31e:	dc06      	bgt.n	801b32e <__ieee754_fmod+0x3a>
 801b320:	4254      	negs	r4, r2
 801b322:	4d76      	ldr	r5, [pc, #472]	; (801b4fc <__ieee754_fmod+0x208>)
 801b324:	4314      	orrs	r4, r2
 801b326:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801b32a:	42ac      	cmp	r4, r5
 801b32c:	d909      	bls.n	801b342 <__ieee754_fmod+0x4e>
 801b32e:	f7e5 f98b 	bl	8000648 <__aeabi_dmul>
 801b332:	4602      	mov	r2, r0
 801b334:	460b      	mov	r3, r1
 801b336:	f7e5 fab1 	bl	800089c <__aeabi_ddiv>
 801b33a:	ec41 0b10 	vmov	d0, r0, r1
 801b33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b342:	45e0      	cmp	r8, ip
 801b344:	ee10 aa10 	vmov	sl, s0
 801b348:	ee10 4a10 	vmov	r4, s0
 801b34c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801b350:	dc09      	bgt.n	801b366 <__ieee754_fmod+0x72>
 801b352:	dbf2      	blt.n	801b33a <__ieee754_fmod+0x46>
 801b354:	4290      	cmp	r0, r2
 801b356:	d3f0      	bcc.n	801b33a <__ieee754_fmod+0x46>
 801b358:	d105      	bne.n	801b366 <__ieee754_fmod+0x72>
 801b35a:	4b69      	ldr	r3, [pc, #420]	; (801b500 <__ieee754_fmod+0x20c>)
 801b35c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801b360:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b364:	e7e9      	b.n	801b33a <__ieee754_fmod+0x46>
 801b366:	4a65      	ldr	r2, [pc, #404]	; (801b4fc <__ieee754_fmod+0x208>)
 801b368:	ea19 0f02 	tst.w	r9, r2
 801b36c:	d148      	bne.n	801b400 <__ieee754_fmod+0x10c>
 801b36e:	f1b8 0f00 	cmp.w	r8, #0
 801b372:	d13d      	bne.n	801b3f0 <__ieee754_fmod+0xfc>
 801b374:	4963      	ldr	r1, [pc, #396]	; (801b504 <__ieee754_fmod+0x210>)
 801b376:	4653      	mov	r3, sl
 801b378:	2b00      	cmp	r3, #0
 801b37a:	dc36      	bgt.n	801b3ea <__ieee754_fmod+0xf6>
 801b37c:	4216      	tst	r6, r2
 801b37e:	d14f      	bne.n	801b420 <__ieee754_fmod+0x12c>
 801b380:	f1bc 0f00 	cmp.w	ip, #0
 801b384:	d144      	bne.n	801b410 <__ieee754_fmod+0x11c>
 801b386:	4a5f      	ldr	r2, [pc, #380]	; (801b504 <__ieee754_fmod+0x210>)
 801b388:	463b      	mov	r3, r7
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	dc3d      	bgt.n	801b40a <__ieee754_fmod+0x116>
 801b38e:	485e      	ldr	r0, [pc, #376]	; (801b508 <__ieee754_fmod+0x214>)
 801b390:	4281      	cmp	r1, r0
 801b392:	db4a      	blt.n	801b42a <__ieee754_fmod+0x136>
 801b394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b39c:	485a      	ldr	r0, [pc, #360]	; (801b508 <__ieee754_fmod+0x214>)
 801b39e:	4282      	cmp	r2, r0
 801b3a0:	db57      	blt.n	801b452 <__ieee754_fmod+0x15e>
 801b3a2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801b3a6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801b3aa:	1a89      	subs	r1, r1, r2
 801b3ac:	1b98      	subs	r0, r3, r6
 801b3ae:	eba4 070e 	sub.w	r7, r4, lr
 801b3b2:	2900      	cmp	r1, #0
 801b3b4:	d162      	bne.n	801b47c <__ieee754_fmod+0x188>
 801b3b6:	4574      	cmp	r4, lr
 801b3b8:	bf38      	it	cc
 801b3ba:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801b3be:	2800      	cmp	r0, #0
 801b3c0:	bfa4      	itt	ge
 801b3c2:	463c      	movge	r4, r7
 801b3c4:	4603      	movge	r3, r0
 801b3c6:	ea53 0104 	orrs.w	r1, r3, r4
 801b3ca:	d0c6      	beq.n	801b35a <__ieee754_fmod+0x66>
 801b3cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b3d0:	db69      	blt.n	801b4a6 <__ieee754_fmod+0x1b2>
 801b3d2:	494d      	ldr	r1, [pc, #308]	; (801b508 <__ieee754_fmod+0x214>)
 801b3d4:	428a      	cmp	r2, r1
 801b3d6:	db6c      	blt.n	801b4b2 <__ieee754_fmod+0x1be>
 801b3d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b3dc:	432b      	orrs	r3, r5
 801b3de:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801b3e2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	e7a7      	b.n	801b33a <__ieee754_fmod+0x46>
 801b3ea:	3901      	subs	r1, #1
 801b3ec:	005b      	lsls	r3, r3, #1
 801b3ee:	e7c3      	b.n	801b378 <__ieee754_fmod+0x84>
 801b3f0:	4945      	ldr	r1, [pc, #276]	; (801b508 <__ieee754_fmod+0x214>)
 801b3f2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	ddc0      	ble.n	801b37c <__ieee754_fmod+0x88>
 801b3fa:	3901      	subs	r1, #1
 801b3fc:	005b      	lsls	r3, r3, #1
 801b3fe:	e7fa      	b.n	801b3f6 <__ieee754_fmod+0x102>
 801b400:	ea4f 5128 	mov.w	r1, r8, asr #20
 801b404:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b408:	e7b8      	b.n	801b37c <__ieee754_fmod+0x88>
 801b40a:	3a01      	subs	r2, #1
 801b40c:	005b      	lsls	r3, r3, #1
 801b40e:	e7bc      	b.n	801b38a <__ieee754_fmod+0x96>
 801b410:	4a3d      	ldr	r2, [pc, #244]	; (801b508 <__ieee754_fmod+0x214>)
 801b412:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801b416:	2b00      	cmp	r3, #0
 801b418:	ddb9      	ble.n	801b38e <__ieee754_fmod+0x9a>
 801b41a:	3a01      	subs	r2, #1
 801b41c:	005b      	lsls	r3, r3, #1
 801b41e:	e7fa      	b.n	801b416 <__ieee754_fmod+0x122>
 801b420:	ea4f 522c 	mov.w	r2, ip, asr #20
 801b424:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b428:	e7b1      	b.n	801b38e <__ieee754_fmod+0x9a>
 801b42a:	1a40      	subs	r0, r0, r1
 801b42c:	281f      	cmp	r0, #31
 801b42e:	dc0a      	bgt.n	801b446 <__ieee754_fmod+0x152>
 801b430:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801b434:	fa08 f800 	lsl.w	r8, r8, r0
 801b438:	fa2a f303 	lsr.w	r3, sl, r3
 801b43c:	ea43 0308 	orr.w	r3, r3, r8
 801b440:	fa0a f400 	lsl.w	r4, sl, r0
 801b444:	e7aa      	b.n	801b39c <__ieee754_fmod+0xa8>
 801b446:	4b31      	ldr	r3, [pc, #196]	; (801b50c <__ieee754_fmod+0x218>)
 801b448:	1a5b      	subs	r3, r3, r1
 801b44a:	fa0a f303 	lsl.w	r3, sl, r3
 801b44e:	2400      	movs	r4, #0
 801b450:	e7a4      	b.n	801b39c <__ieee754_fmod+0xa8>
 801b452:	1a80      	subs	r0, r0, r2
 801b454:	281f      	cmp	r0, #31
 801b456:	dc0a      	bgt.n	801b46e <__ieee754_fmod+0x17a>
 801b458:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801b45c:	fa0c fc00 	lsl.w	ip, ip, r0
 801b460:	fa27 f606 	lsr.w	r6, r7, r6
 801b464:	ea46 060c 	orr.w	r6, r6, ip
 801b468:	fa07 fe00 	lsl.w	lr, r7, r0
 801b46c:	e79d      	b.n	801b3aa <__ieee754_fmod+0xb6>
 801b46e:	4e27      	ldr	r6, [pc, #156]	; (801b50c <__ieee754_fmod+0x218>)
 801b470:	1ab6      	subs	r6, r6, r2
 801b472:	fa07 f606 	lsl.w	r6, r7, r6
 801b476:	f04f 0e00 	mov.w	lr, #0
 801b47a:	e796      	b.n	801b3aa <__ieee754_fmod+0xb6>
 801b47c:	4574      	cmp	r4, lr
 801b47e:	bf38      	it	cc
 801b480:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801b484:	2800      	cmp	r0, #0
 801b486:	da05      	bge.n	801b494 <__ieee754_fmod+0x1a0>
 801b488:	0fe0      	lsrs	r0, r4, #31
 801b48a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801b48e:	0064      	lsls	r4, r4, #1
 801b490:	3901      	subs	r1, #1
 801b492:	e78b      	b.n	801b3ac <__ieee754_fmod+0xb8>
 801b494:	ea50 0307 	orrs.w	r3, r0, r7
 801b498:	f43f af5f 	beq.w	801b35a <__ieee754_fmod+0x66>
 801b49c:	0ffb      	lsrs	r3, r7, #31
 801b49e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801b4a2:	007c      	lsls	r4, r7, #1
 801b4a4:	e7f4      	b.n	801b490 <__ieee754_fmod+0x19c>
 801b4a6:	0fe1      	lsrs	r1, r4, #31
 801b4a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801b4ac:	0064      	lsls	r4, r4, #1
 801b4ae:	3a01      	subs	r2, #1
 801b4b0:	e78c      	b.n	801b3cc <__ieee754_fmod+0xd8>
 801b4b2:	1a89      	subs	r1, r1, r2
 801b4b4:	2914      	cmp	r1, #20
 801b4b6:	dc0a      	bgt.n	801b4ce <__ieee754_fmod+0x1da>
 801b4b8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801b4bc:	fa03 f202 	lsl.w	r2, r3, r2
 801b4c0:	40cc      	lsrs	r4, r1
 801b4c2:	4322      	orrs	r2, r4
 801b4c4:	410b      	asrs	r3, r1
 801b4c6:	ea43 0105 	orr.w	r1, r3, r5
 801b4ca:	4610      	mov	r0, r2
 801b4cc:	e735      	b.n	801b33a <__ieee754_fmod+0x46>
 801b4ce:	291f      	cmp	r1, #31
 801b4d0:	dc07      	bgt.n	801b4e2 <__ieee754_fmod+0x1ee>
 801b4d2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801b4d6:	40cc      	lsrs	r4, r1
 801b4d8:	fa03 f202 	lsl.w	r2, r3, r2
 801b4dc:	4322      	orrs	r2, r4
 801b4de:	462b      	mov	r3, r5
 801b4e0:	e7f1      	b.n	801b4c6 <__ieee754_fmod+0x1d2>
 801b4e2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801b4e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b4ea:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801b4ee:	32e2      	adds	r2, #226	; 0xe2
 801b4f0:	fa43 f202 	asr.w	r2, r3, r2
 801b4f4:	e7f3      	b.n	801b4de <__ieee754_fmod+0x1ea>
 801b4f6:	bf00      	nop
 801b4f8:	7fefffff 	.word	0x7fefffff
 801b4fc:	7ff00000 	.word	0x7ff00000
 801b500:	0801e328 	.word	0x0801e328
 801b504:	fffffbed 	.word	0xfffffbed
 801b508:	fffffc02 	.word	0xfffffc02
 801b50c:	fffffbe2 	.word	0xfffffbe2

0801b510 <_init>:
 801b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b512:	bf00      	nop
 801b514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b516:	bc08      	pop	{r3}
 801b518:	469e      	mov	lr, r3
 801b51a:	4770      	bx	lr

0801b51c <_fini>:
 801b51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b51e:	bf00      	nop
 801b520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b522:	bc08      	pop	{r3}
 801b524:	469e      	mov	lr, r3
 801b526:	4770      	bx	lr
